// Generated by Haxe 5.0.0-alpha.1
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var h2d_col_PointImpl = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.PointImpl"] = h2d_col_PointImpl;
h2d_col_PointImpl.__name__ = "h2d.col.PointImpl";
h2d_col_PointImpl.prototype = {
	distanceSq: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "}";
	}
	,sub: function(p) {
		var x = this.x - p.x;
		var y = this.y - p.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,add: function(p) {
		var x = this.x + p.x;
		var y = this.y + p.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,scaled: function(v) {
		var x = this.x * v;
		var y = this.y * v;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,equals: function(other) {
		if(this.x == other.x) {
			return this.y == other.y;
		} else {
			return false;
		}
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
	}
	,normalized: function() {
		var k = this.x * this.x + this.y * this.y;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = this.x * k;
		var y = this.y * k;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,set: function(x,y) {
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
	}
	,load: function(p) {
		this.x = p.x;
		this.y = p.y;
	}
	,scale: function(f) {
		this.x *= f;
		this.y *= f;
	}
	,clone: function() {
		var x = this.x;
		var y = this.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,cross: function(p) {
		return this.x * p.y - this.y * p.x;
	}
	,lerp: function(a,b,k) {
		var a1 = a.x;
		this.x = a1 + k * (b.x - a1);
		var a1 = a.y;
		this.y = a1 + k * (b.y - a1);
	}
	,transform: function(m) {
		var mx = m.a * this.x + m.c * this.y + m.x;
		var my = m.b * this.x + m.d * this.y + m.y;
		this.x = mx;
		this.y = my;
	}
	,transformed: function(m) {
		var mx = m.a * this.x + m.c * this.y + m.x;
		var my = m.b * this.x + m.d * this.y + m.y;
		var x = mx;
		var y = my;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,transform2x2: function(m) {
		var mx = m.a * this.x + m.c * this.y;
		var my = m.b * this.x + m.d * this.y;
		this.x = mx;
		this.y = my;
	}
	,transformed2x2: function(m) {
		var mx = m.a * this.x + m.c * this.y;
		var my = m.b * this.x + m.d * this.y;
		var x = mx;
		var y = my;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,toIPoint: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		return new h2d_col_IPoint(Math.round(this.x * scale),Math.round(this.y * scale));
	}
	,rotate: function(angle) {
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		var x2 = this.x * c - this.y * s;
		var y2 = this.x * s + this.y * c;
		this.x = x2;
		this.y = y2;
	}
	,__class__: h2d_col_PointImpl
};
var h2d_Object = function(parent) {
	this.blendMode = h2d_BlendMode.Alpha;
	this.alpha = 1.;
	this.visible = true;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = parent != null;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h2d.Object"] = h2d_Object;
h2d_Object.__name__ = "h2d.Object";
h2d_Object.prototype = {
	getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,getSize: function(out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		this.syncPos();
		this.getBoundsRec(this.parent,out,true);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(this.parent,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		var dx = -this.x;
		var dy = -this.y;
		out.xMin += dx;
		out.xMax += dx;
		out.yMin += dy;
		out.yMax += dy;
		return out;
	}
	,getAbsPos: function() {
		this.syncPos();
		var m = new h2d_col_Matrix();
		m.a = this.matA;
		m.b = this.matB;
		m.c = this.matC;
		m.d = this.matD;
		m.x = this.absX;
		m.y = this.absY;
		return m;
	}
	,contains: function(o) {
		while(o != null) {
			o = o.parent;
			if(o == this) {
				return true;
			}
		}
		return false;
	}
	,find: function(f) {
		var v = f(this);
		if(v != null) {
			return v;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var v = o.find(f);
			if(v != null) {
				return v;
			}
		}
		return null;
	}
	,findAll: function(f,arr) {
		if(arr == null) {
			arr = [];
		}
		var v = f(this);
		if(v != null) {
			arr.push(v);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.findAll(f,arr);
		}
		return arr;
	}
	,set_filter: function(f) {
		if(this.filter != null && this.allocated) {
			this.filter.unbind(this);
		}
		this.filter = f;
		if(f != null && this.allocated) {
			f.bind(this);
		}
		return f;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c = this.children[0];
			if(c.visible) {
				c.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(!c.visible) {
				continue;
			}
			c.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x = dx * this.matA + dy * this.matC + this.absX;
			var y = dx * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x = dx * this.matA + dy * this.matC + rX;
		var y = dx * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + dy * this.matC + rX;
		y = (dx + width) * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = dx * this.matA + (dy + height) * this.matC + rX;
		y = dx * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
	}
	,getObjectsCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			k += c.getObjectsCount() + 1;
		}
		return k;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_PointImpl(0.,0.);
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,globalToLocal: function(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		var py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h2d_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onContentChanged: function() {
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var i = this.children.length - 1;
		while(i >= 0) {
			var c = this.children[i--];
			if(c != null) {
				c.onRemove();
			}
		}
	}
	,getMatrix: function(m) {
		m.a = this.matA;
		m.b = this.matB;
		m.c = this.matC;
		m.d = this.matD;
		m.x = this.absX;
		m.y = this.absY;
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.getChildAt(0));
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,drawTo: function(t) {
		var s = this.getScene();
		var needDispose = s == null;
		if(s == null) {
			s = new h2d_Scene();
		}
		s.drawImplTo(this,[t]);
		if(needDispose) {
			s.dispose();
			this.onRemove();
		}
	}
	,drawToTextures: function(texs,outputs) {
		var s = this.getScene();
		var needDispose = s == null;
		if(s == null) {
			s = new h2d_Scene();
		}
		s.drawImplTo(this,texs,outputs);
		if(needDispose) {
			s.dispose();
			this.onRemove();
		}
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr = Math.cos(this.rotation);
				var sr = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr;
				var tmpB = this.scaleX * sr;
				var tmpC = this.scaleY * -sr;
				var tmpD = this.scaleY * cr;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Object.nullDrawable == null) {
			h2d_Object.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Object.nullDrawable.smooth = this.filter != null && this.filter.smooth ? true : null;
		h2d_Object.nullDrawable.absX = this.absX;
		h2d_Object.nullDrawable.absY = this.absY;
		h2d_Object.nullDrawable.matA = this.matA;
		h2d_Object.nullDrawable.matB = this.matB;
		h2d_Object.nullDrawable.matC = this.matC;
		h2d_Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Object.nullDrawable,tile);
	}
	,clipBounds: function(ctx,bounds,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1.;
		}
		if(scaleX == null) {
			scaleX = 1.;
		}
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			var tmpA = this.matA * f1.x + this.matB * f1.y;
			var tmpB = this.matA * f2.x + this.matB * f2.y;
			var tmpC = this.matC * f1.x + this.matD * f1.y;
			var tmpD = this.matC * f2.x + this.matD * f2.y;
			var tmpX = this.absX * f1.x + this.absY * f1.y + f1.z;
			var tmpY = this.absX * f2.x + this.absY * f2.y + f2.z;
			matA = (tmpA * ctx.viewA + tmpB * ctx.viewC) / scaleX;
			matB = (tmpA * ctx.viewB + tmpB * ctx.viewD) / scaleY;
			matC = (tmpC * ctx.viewA + tmpD * ctx.viewC) / scaleX;
			matD = (tmpC * ctx.viewB + tmpD * ctx.viewD) / scaleY;
			absX = tmpX * ctx.viewA + tmpY * ctx.viewC + ctx.viewX;
			absY = tmpX * ctx.viewB + tmpY * ctx.viewD + ctx.viewY;
		} else {
			matA = (this.matA * ctx.viewA + this.matB * ctx.viewC) / scaleX;
			matB = (this.matA * ctx.viewB + this.matB * ctx.viewD) / scaleY;
			matC = (this.matC * ctx.viewA + this.matD * ctx.viewC) / scaleX;
			matD = (this.matC * ctx.viewB + this.matD * ctx.viewD) / scaleY;
			absX = this.absX * ctx.viewA + this.absY * ctx.viewC + ctx.viewX;
			absY = this.absX * ctx.viewB + this.absY * ctx.viewD + ctx.viewY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMin;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		if(view.xMin < -1) {
			view.xMin = -1;
		}
		if(view.yMin < -1) {
			view.yMin = -1;
		}
		if(view.xMax > 1) {
			view.xMax = 1;
		}
		if(view.yMax > 1) {
			view.yMax = 1;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = sxMin;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMin;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a = bounds.yMin;
		var b = view.yMin;
		bounds.yMin = a < b ? b : a;
		var a = bounds.xMax;
		var b = view.xMax;
		bounds.xMax = a > b ? b : a;
		var a = bounds.yMax;
		var b = view.yMax;
		bounds.yMax = a > b ? b : a;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		this.filter.sync(ctx,this);
		var scaleX;
		var scaleY;
		if(this.filter.useScreenResolution) {
			var s = ctx.scene;
			scaleX = s.viewportScaleX * this.filter.resolutionScale;
			scaleY = s.viewportScaleY * this.filter.resolutionScale;
		} else {
			scaleX = this.filter.resolutionScale;
			scaleY = this.filter.resolutionScale;
		}
		if(this.filter.autoBounds) {
			var maxExtent = this.filter.boundsExtend;
			if(maxExtent >= 0) {
				this.getBounds(this,bounds);
				bounds.xMin = bounds.xMin * scaleX - maxExtent;
				bounds.yMin = bounds.yMin * scaleY - maxExtent;
				bounds.xMax = bounds.xMax * scaleX + maxExtent;
				bounds.yMax = bounds.yMax * scaleY + maxExtent;
				if(bounds.xMin < total.xMin) {
					total.xMin = bounds.xMin;
				}
				if(bounds.xMax > total.xMax) {
					total.xMax = bounds.xMax;
				}
				if(bounds.yMin < total.yMin) {
					total.yMin = bounds.yMin;
				}
				if(bounds.yMax > total.yMax) {
					total.yMax = bounds.yMax;
				}
			}
		} else {
			var scale = h2d_Object.tmpPoint;
			var x = scaleX;
			var y = scaleY;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			scale.x = x;
			scale.y = y;
			this.filter.getBounds(this,bounds,scale);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
			scaleX = scale.x;
			scaleY = scale.y;
		}
		ctx.setFilterScale(scaleX,scaleY);
		this.clipBounds(ctx,total,scaleX,scaleY);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			ctx.popFilter();
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var _this = shader.filterMatrixA__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var oldA_x = x1;
		var oldA_y = y1;
		var oldA_z = z1;
		var _this = shader.filterMatrixB__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var oldB_x = x1;
		var oldB_y = y1;
		var oldB_z = z1;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet * scaleX;
		var invB = -this.matB * invDet * scaleY;
		var invC = -this.matC * invDet * scaleX;
		var invD = this.matA * invDet * scaleY;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this = shader.filterMatrixA__;
		var x = invA;
		var y = invC;
		var z = invX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = shader.filterMatrixB__;
		var x = invB;
		var y = invD;
		var z = invY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		ctx.globalAlpha = 1;
		this.drawContent(ctx);
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin / scaleX;
		finalTile.dy = yMin / scaleY;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != null) {
			if(finalTile != prev) {
				finalTile.dx = (finalTile.dx + xMin) / scaleX;
				finalTile.dy = (finalTile.dy + yMin) / scaleY;
			}
			finalTile.width /= scaleX;
			finalTile.height /= scaleY;
		}
		var _this = shader.filterMatrixA__;
		_this.x = oldA_x;
		_this.y = oldA_y;
		_this.z = oldA_z;
		var _this = shader.filterMatrixB__;
		_this.x = oldB_x;
		_this.y = oldB_y;
		_this.z = oldB_z;
		ctx.popTarget();
		ctx.popFilter();
		ctx.globalAlpha = oldAlpha;
		if(finalTile == null) {
			return;
		}
		this.drawFiltered(ctx,finalTile);
	}
	,drawFiltered: function(ctx,tile) {
		var oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			this.drawContent(ctx);
			ctx.globalAlpha = old;
		}
	}
	,drawContent: function(ctx) {
		if(ctx.front2back) {
			var i = this.children.length;
			while(i-- > 0) this.children[i].drawRec(ctx);
			this.draw(ctx);
		} else {
			this.draw(ctx);
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.drawRec(ctx);
			}
		}
	}
	,set_x: function(v) {
		this.posChanged = true;
		return this.x = v;
	}
	,set_y: function(v) {
		this.posChanged = true;
		return this.y = v;
	}
	,set_scaleX: function(v) {
		this.posChanged = true;
		return this.scaleX = v;
	}
	,set_scaleY: function(v) {
		this.posChanged = true;
		return this.scaleY = v;
	}
	,set_rotation: function(v) {
		this.posChanged = true;
		return this.rotation = v;
	}
	,move: function(dx,dy) {
		var v = this.x + dx * Math.cos(this.rotation);
		this.posChanged = true;
		this.x = v;
		var v = this.y + dy * Math.sin(this.rotation);
		this.posChanged = true;
		this.y = v;
	}
	,setPosition: function(x,y) {
		this.posChanged = true;
		this.x = x;
		this.posChanged = true;
		this.y = y;
	}
	,rotate: function(v) {
		this.posChanged = true;
		this.rotation += v;
	}
	,scale: function(v) {
		this.posChanged = true;
		this.scaleX *= v;
		this.posChanged = true;
		this.scaleY *= v;
	}
	,setScale: function(v) {
		this.posChanged = true;
		this.scaleX = v;
		this.posChanged = true;
		this.scaleY = v;
	}
	,getChildAt: function(n) {
		return this.children[n];
	}
	,getChildIndex: function(o) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == o) {
				return i;
			}
		}
		return -1;
	}
	,getObjectByName: function(name) {
		if(this.name == name) {
			return this;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var o = c.getObjectByName(name);
			if(o != null) {
				return o;
			}
		}
		return null;
	}
	,get_numChildren: function() {
		return this.children.length;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$h2d_$Object(this.children);
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var c1 = c.__name__;
		if(this.name == null) {
			return c1;
		} else {
			return this.name + "(" + c1 + ")";
		}
	}
	,contentChanged: function(s) {
	}
	,constraintSize: function(maxWidth,maxHeight) {
	}
	,__class__: h2d_Object
};
var h2d_Drawable = function(parent) {
	h2d_Object.call(this,parent);
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.color = new h3d_Vector4Impl(x,y,z,w);
};
$hxClasses["h2d.Drawable"] = h2d_Drawable;
h2d_Drawable.__name__ = "h2d.Drawable";
h2d_Drawable.__super__ = h2d_Object;
h2d_Drawable.prototype = $extend(h2d_Object.prototype,{
	set_tileWrap: function(b) {
		return this.tileWrap = b;
	}
	,get_colorAdd: function() {
		var s = this.getShader(h3d_shader_ColorAdd);
		if(s == null) {
			return null;
		} else {
			return s.color__;
		}
	}
	,set_colorAdd: function(c) {
		var s = this.getShader(h3d_shader_ColorAdd);
		if(s == null) {
			if(c != null) {
				s = this.addShader(new h3d_shader_ColorAdd());
				s.color__ = c;
			}
		} else if(c == null) {
			this.removeShader(s);
		} else {
			s.color__ = c;
		}
		return c;
	}
	,drawFiltered: function(ctx,tile) {
		var old = this.shaders;
		this.shaders = null;
		h2d_Object.prototype.drawFiltered.call(this,ctx,tile);
		this.shaders = old;
	}
	,set_colorKey: function(v) {
		var s = this.getShader(h3d_shader_ColorKey);
		if(s == null) {
			if(v != null) {
				s = this.addShader(new h3d_shader_ColorKey(-16777216 | v));
			}
		} else if(v == null) {
			this.removeShader(s);
		} else {
			var _this = s.colorKey__;
			var c = -16777216 | v;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
		}
		return this.colorKey = v;
	}
	,adjustColor: function(col) {
		if(col == null) {
			this.set_colorMatrix(null);
		} else {
			var m = this.get_colorMatrix();
			if(m == null) {
				m = new h3d_MatrixImpl();
				this.set_colorMatrix(m);
			}
			m.identity();
			m.adjustColor(col);
		}
	}
	,get_colorMatrix: function() {
		var s = this.getShader(h3d_shader_ColorMatrix);
		if(s == null) {
			return null;
		} else {
			return s.matrix__;
		}
	}
	,set_colorMatrix: function(m) {
		var s = this.getShader(h3d_shader_ColorMatrix);
		if(s == null) {
			if(m != null) {
				s = this.addShader(new h3d_shader_ColorMatrix());
				s.matrix__ = m;
			}
		} else if(m == null) {
			this.removeShader(s);
		} else {
			s.matrix__ = m;
		}
		return m;
	}
	,getShader: function(stype) {
		if(this.shaders != null) {
			var _g_l = this.shaders;
			var _g_last = null;
			while(_g_l != _g_last) {
				var s = _g_l.s;
				_g_l = _g_l.next;
				var s1 = s;
				var s2 = js_Boot.__downcastCheck(s1,stype) ? s1 : null;
				if(s2 != null) {
					return s2;
				}
			}
		}
		return null;
	}
	,getShaders: function() {
		return new hxsl__$ShaderList_ShaderIterator(this.shaders,null);
	}
	,addShader: function(s) {
		if(s == null) {
			throw haxe_Exception.thrown("Can't add null shader");
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
	}
	,__class__: h2d_Drawable
});
var Anim = function(frames,speed,loops,parent) {
	if(loops == null) {
		loops = true;
	}
	if(speed == null) {
		speed = 15;
	}
	this.loops = true;
	this.pause = false;
	h2d_Drawable.call(this,parent);
	this.frames = frames == null ? [] : frames;
	this.curFrame = 0;
	this.speed = speed;
	this.loops = loops;
};
$hxClasses["Anim"] = Anim;
Anim.__name__ = "Anim";
Anim.__super__ = h2d_Drawable;
Anim.prototype = $extend(h2d_Drawable.prototype,{
	get_currentFrame: function() {
		return this.curFrame;
	}
	,playCurrent: function(atFrame) {
		if(atFrame == null) {
			atFrame = 0.;
		}
		this.play(this.frames,atFrame);
	}
	,play: function(frames,atFrame) {
		if(atFrame == null) {
			atFrame = 0.;
		}
		this.frames = frames == null ? [] : frames;
		this.set_currentFrame(atFrame);
		this.pause = false;
	}
	,playFromName: function(sheetName,name,atFrame) {
		if(atFrame == null) {
			atFrame = 0.;
		}
		var data = Assets.getAnimData(sheetName,name);
		if(data == null) {
			return;
		}
		this.play(data.tiles,atFrame);
		this.speed = data.fps;
		this.loops = data.loops;
	}
	,onAnimEnd: function() {
	}
	,set_currentFrame: function(frame) {
		this.curFrame = this.frames.length == 0 ? 0 : frame % this.frames.length;
		if(this.curFrame < 0) {
			this.curFrame += this.frames.length;
		}
		return this.curFrame;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		var tile = this.getFrame();
		if(tile != null) {
			this.addBounds(relativeTo,out,tile.dx,tile.dy,tile.width,tile.height);
		}
	}
	,update: function(dt) {
		var prev = this.curFrame;
		if(!this.pause) {
			this.curFrame += this.speed * dt;
		}
		if(this.curFrame < this.frames.length) {
			return;
		}
		if(this.loops) {
			if(this.frames.length == 0) {
				this.curFrame = 0;
			} else {
				this.curFrame %= this.frames.length;
			}
			this.onAnimEnd();
		} else if(this.curFrame >= this.frames.length) {
			this.curFrame = this.frames.length;
			if(this.curFrame != prev) {
				this.onAnimEnd();
			}
		}
	}
	,getCurrentIFrame: function() {
		return this.curFrame | 0;
	}
	,getFrame: function() {
		var i = this.curFrame | 0;
		if(i == this.frames.length) {
			--i;
		}
		return this.frames[i];
	}
	,draw: function(ctx) {
		this.emitTile(ctx,this.getFrame());
	}
	,__class__: Anim
});
var Assets = function() { };
$hxClasses["Assets"] = Assets;
Assets.__name__ = "Assets";
Assets.init = function() {
	Data.load(hxd_Res.get_loader().loadCache("data.cdb",hxd_res_Resource).entry.getText());
	Assets.font = hxd_Res.get_loader().loadCache("fonts/cc13.fnt",hxd_res_BitmapFont).toFont();
	Assets.fontLarge = hxd_Res.get_loader().loadCache("fonts/large.fnt",hxd_res_BitmapFont).toFont();
	Assets.loadAllSpriteSheets();
	Assets.loadAudio();
	Assets.loadNoise();
};
Assets.loadAllSpriteSheets = function() {
	Assets.sheets = new haxe_ds_StringMap();
	var _this = hxd_Res.load("gfx");
	var _g = [];
	var _g1 = _this.entry.iterator();
	while(_g1.i < _g1.l) {
		var f = _g1.a[_g1.i++];
		_g.push(new hxd_res_Any(_this.loader,f));
	}
	var _g_i = 0;
	var _g_a = _g;
	var _g_l = _g_a.length;
	while(_g_i < _g_l) {
		var res = _g_a[_g_i++];
		if(HxOverrides.substr(res.entry.name,-5,null) == ".json") {
			var name = HxOverrides.substr(res.entry.name,0,res.entry.name.length - 5);
			var resPng = hxd_Res.load("gfx/" + name + ".png").toImage();
			if(resPng != null) {
				var sheet = Assets.loadSpriteSheet(name,res,resPng);
				Assets.sheets.h[name] = sheet;
			}
		}
	}
};
Assets.loadSpriteSheet = function(name,resJson,resPng) {
	var sheet = { tiles : new haxe_ds_StringMap(), animData : new haxe_ds_StringMap()};
	var json = JSON.parse(resJson.entry.getText());
	var atlas = resPng.toTile();
	atlas.innerTex.preventAutoDispose();
	var _g = 0;
	var _g1 = json.meta.slices;
	while(_g < _g1.length) {
		var slice = _g1[_g];
		++_g;
		Assets.addSliceToSheet(sheet,atlas,slice);
	}
	return sheet;
};
Assets.addSliceToSheet = function(sheet,atlas,slice) {
	var bounds = slice.keys[0].bounds;
	var pivot = slice.keys[0].pivot;
	var tile = atlas.sub(bounds.x,bounds.y,bounds.w,bounds.h);
	if(slice.data == null || slice.data == "") {
		if(pivot == null) {
			tile.dx = -(Math.ceil(tile.width + tile.x) - Math.floor(tile.x)) >> 1;
			tile.dy = -(Math.ceil(tile.height + tile.y) - Math.floor(tile.y)) >> 1;
		} else {
			tile.dx = -pivot.x;
			tile.dy = -pivot.y;
		}
		sheet.tiles.h[slice.name] = tile;
		sheet.animData.h[slice.name] = { tiles : [tile], fps : 1, loops : false};
	} else {
		var json = JSON.parse("[" + slice.data + "]");
		var uniqueTiles = [];
		var frameList = [];
		var frameCount = 0;
		var frameWidth = 0;
		var frameHeight = 0;
		var fps = 0;
		var cntx = 0;
		var cnty = 0;
		if(json.length == 2) {
			frameCount = json[0];
			fps = json[1];
			if((Math.ceil(tile.width + tile.x) - Math.floor(tile.x)) % frameCount != 0) {
				throw haxe_Exception.thrown("Frame count does not divide slice width for slice " + slice.name);
			}
			frameWidth = (Math.ceil(tile.width + tile.x) - Math.floor(tile.x)) / frameCount | 0;
			frameHeight = Math.ceil(tile.height + tile.y) - Math.floor(tile.y);
			cntx = frameCount;
			cnty = 1;
		} else {
			frameCount = json[0];
			cntx = json[1];
			fps = json[2];
			if(json.length > 3) {
				var _g = 3;
				var _g1 = json.length;
				while(_g < _g1) {
					var i = _g++;
					frameList.push(json[i]);
				}
			}
			if((Math.ceil(tile.width + tile.x) - Math.floor(tile.x)) % cntx != 0) {
				throw haxe_Exception.thrown("Frame width does not divide strip frame count for slice " + slice.name);
			}
			frameWidth = (Math.ceil(tile.width + tile.x) - Math.floor(tile.x)) / cntx | 0;
			cnty = Math.ceil(frameCount / cntx);
			if((Math.ceil(tile.height + tile.y) - Math.floor(tile.y)) % cnty != 0) {
				throw haxe_Exception.thrown("Frame height does not divide slice height for slice " + slice.name);
			}
			frameHeight = (Math.ceil(tile.height + tile.y) - Math.floor(tile.y)) / cnty | 0;
		}
		var centerX = pivot == null ? frameWidth >> 1 : pivot.x;
		var centerY = pivot == null ? frameHeight >> 1 : pivot.y;
		var _g = 0;
		var _g1 = frameCount;
		while(_g < _g1) {
			var f = _g++;
			var i = f / cntx | 0;
			var j = f % cntx;
			var sub = tile.sub(j * frameWidth,i * frameHeight,frameWidth,frameHeight,-centerX,-centerY);
			uniqueTiles.push(sub);
		}
		var tiles = [];
		if(frameList.length > 0) {
			var _g = 0;
			while(_g < frameList.length) {
				var f = frameList[_g];
				++_g;
				tiles.push(uniqueTiles[f]);
			}
		} else {
			tiles = uniqueTiles;
		}
		sheet.animData.h[slice.name] = { tiles : tiles, fps : fps, loops : slice.color == "#0000ffff"};
	}
};
Assets.hasTile = function(sheetName,tileName) {
	var sheet = Assets.sheets.h[sheetName];
	if(sheet == null) {
		return false;
	}
	return Object.prototype.hasOwnProperty.call(sheet.tiles.h,tileName);
};
Assets.getTile = function(sheetName,tileName) {
	var sheet = Assets.sheets.h[sheetName];
	if(sheet == null) {
		haxe_Log.trace("No sheet named " + sheetName,{ fileName : "src/Assets.hx", lineNumber : 152, className : "Assets", methodName : "getTile"});
		return null;
	}
	var tile = sheet.tiles.h[tileName];
	if(tile == null) {
		haxe_Log.trace("No tile named " + tileName + " in sheet " + sheetName,{ fileName : "src/Assets.hx", lineNumber : 157, className : "Assets", methodName : "getTile"});
		return null;
	}
	return tile;
};
Assets.getAnimData = function(sheetName,tileName) {
	var sheet = Assets.sheets.h[sheetName];
	if(sheet == null) {
		haxe_Log.trace("No sheet named " + sheetName,{ fileName : "src/Assets.hx", lineNumber : 166, className : "Assets", methodName : "getAnimData"});
		return null;
	}
	var animData = sheet.animData.h[tileName];
	if(animData == null) {
		haxe_Log.trace("No animData named " + tileName + " in sheet " + sheetName,{ fileName : "src/Assets.hx", lineNumber : 171, className : "Assets", methodName : "getAnimData"});
		return null;
	}
	return animData;
};
Assets.loadAudio = function() {
	Assets.nameToSound = new haxe_ds_StringMap();
	var _g_a = Data.soundDef.all;
	var _g_pos = 0;
	while(_g_pos < _g_a.length) {
		var def = _g_a[_g_pos++];
		var sound = new audio_VariedSound(def);
		Assets.nameToSound.h[def.name] = sound;
	}
	Assets.nameToMusic = new haxe_ds_StringMap();
	var _g_a = Data.musicDef.all;
	var _g_pos = 0;
	while(_g_pos < _g_a.length) {
		var def = _g_a[_g_pos++];
		var music = new audio_Music(def);
		Assets.nameToMusic.h[def.name] = music;
	}
};
Assets.loadNoise = function() {
	var bd = hxd_Res.get_loader().loadCache("gfx/textures/noise.png",hxd_res_Image).toBitmap();
	bd.lock();
	Assets.noiseWidth = bd.ctx.canvas.width;
	Assets.noiseHeight = bd.ctx.canvas.height;
	Assets.noiseMapX = new Array(Assets.noiseHeight);
	Assets.noiseMapY = new Array(Assets.noiseHeight);
	var _g = 0;
	var _g1 = Assets.noiseHeight;
	while(_g < _g1) {
		var i = _g++;
		Assets.noiseMapX[i] = new Array(Assets.noiseWidth);
		Assets.noiseMapY[i] = new Array(Assets.noiseWidth);
		var _g2 = 0;
		var _g3 = Assets.noiseWidth;
		while(_g2 < _g3) {
			var j = _g2++;
			var col = bd.getPixel(j,i);
			Assets.noiseMapX[i][j] = (col & 255) / 255.0 * 2 - 1;
			Assets.noiseMapY[i][j] = (col >> 8 & 255) / 255.0 * 2 - 1;
		}
	}
};
var Camera = function(bounds) {
	this.targetOffY = 0.;
	this.targetOffX = 0.;
	this.targetY = 0.;
	this.targetX = 0.;
	this.bounds = bounds;
	this.sodX = new SecondOrderDynamics(2.,1.5,0.,0.,StableKind.Precise);
	this.sodY = new SecondOrderDynamics(2.,1.5,0.,0.,StableKind.Precise);
	this.updateViewport();
};
$hxClasses["Camera"] = Camera;
Camera.__name__ = "Camera";
Camera.prototype = {
	setTarget: function(target,immediate) {
		this.target = target;
		if(immediate) {
			this.sodX.reset(0.);
			this.sodY.reset(0.);
			this.targetX = target.x + this.targetOffX;
			this.targetY = target.y + this.targetOffY;
		}
	}
	,resetTarget: function() {
		this.target = null;
	}
	,getTargetWithoutOffset: function() {
		if(this.target == null) {
			return null;
		}
		var x = this.target.x;
		var y = this.target.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,update: function(dt) {
		if(this.target != null) {
			var tx = this.target.x + this.targetOffX + 4;
			var ty = this.target.y + this.targetOffY + 8;
			this.sodX.update(dt,this.target.eyeOffsetX);
			this.sodY.update(dt,this.target.eyeOffsetY);
			this.targetX = tx + this.sodX.pos;
			this.targetY = ty + this.sodY.pos;
			var newClampedTarget = this.getClampedPosition(this.bounds);
			this.clampedTargetX = newClampedTarget.x;
			this.clampedTargetY = newClampedTarget.y;
		}
	}
	,updateConstantRate: function(dt) {
		var world = Game.inst.world;
		var wx = this.clampedTargetX - this.viewportWidth * .5;
		var wy = this.clampedTargetY - this.viewportHeight * .5;
		world.posChanged = true;
		world.x = -wx + Game.inst.fx.shakeX;
		world.posChanged = true;
		world.y = -wy + Game.inst.fx.shakeY;
	}
	,updateViewport: function() {
		this.viewportWidth = 320;
		this.viewportHeight = 180;
	}
	,setBounds: function(bounds) {
		this.bounds = bounds;
	}
	,getClampedPosition: function(bounds) {
		var x = this.targetX;
		var y = this.targetY;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var clampedTarget = new h2d_col_PointImpl(x,y);
		if(bounds != null) {
			if(this.viewportWidth > bounds.xMax - bounds.xMin) {
				var x = bounds.xMin + bounds.xMax >> 1;
				var y = bounds.yMin + bounds.yMax >> 1;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var inlIPoint_x = x;
				var inlIPoint_y = y;
				clampedTarget.x = inlIPoint_x;
			} else {
				var hw = this.viewportWidth * .5;
				if(this.targetX - hw < bounds.xMin) {
					clampedTarget.x = bounds.xMin + hw;
				} else if(this.targetX + hw > bounds.xMax) {
					clampedTarget.x = bounds.xMax - hw;
				} else {
					clampedTarget.x = this.targetX;
				}
			}
			if(this.viewportHeight > bounds.yMax - bounds.yMin) {
				var x = bounds.xMin + bounds.xMax >> 1;
				var y = bounds.yMin + bounds.yMax >> 1;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var inlIPoint_x = x;
				var inlIPoint_y = y;
				clampedTarget.y = inlIPoint_y;
			} else {
				var hh = this.viewportHeight * .5;
				if(this.targetY - hh < bounds.yMin) {
					clampedTarget.y = bounds.yMin + hh;
				} else if(this.targetY + hh > bounds.yMax) {
					clampedTarget.y = bounds.yMax - hh;
				} else {
					clampedTarget.y = this.targetY;
				}
			}
		}
		return clampedTarget;
	}
	,__class__: Camera
};
var Controller = function() {
	this.ignoreNextInput = false;
	this.enabled = true;
	this.padType = 0;
	this.bindings = new haxe_ds_IntMap();
	this.padButtonToId = new haxe_ds_IntMap();
	this.waitForPad();
};
$hxClasses["Controller"] = Controller;
Controller.__name__ = "Controller";
Controller.padButtonToString = function(b) {
	switch(b) {
	case 1:
		return "A";
	case 2:
		return "B";
	case 3:
		return "X";
	case 4:
		return "Y";
	case 5:
		return "START";
	case 6:
		return "SELECT";
	case 7:
		return "LT";
	case 8:
		return "RT";
	case 9:
		return "LB";
	case 10:
		return "RB";
	case 11:
		return "DPAD UP";
	case 12:
		return "DPAD RIGHT";
	case 13:
		return "DPAD DOWN";
	case 14:
		return "DPAD LEFT";
	case 15:
		return "LSTICK PUSH";
	case 16:
		return "RSTICK PUSH";
	case 19:
		return "LSTICK UP";
	case 20:
		return "LSTICK RIGHT";
	case 21:
		return "LSTICK DOWN";
	case 22:
		return "LSTICK LEFT";
	case 25:
		return "RSTICK UP";
	case 26:
		return "RSTICK RIGHT";
	case 27:
		return "RSTICK DOWN";
	case 28:
		return "RSTICK LEFT";
	default:
		return "UNKNOWN";
	}
};
Controller.prototype = {
	waitForPad: function() {
		this.pad = hxd_Pad.createDummy();
		this.initButtonMapping();
		hxd_Pad.wait($bind(this,this.onPadConnected));
	}
	,onPadDisconnected: function() {
		this.waitForPad();
		if(this.onDisconnect != null) {
			this.onDisconnect();
		}
	}
	,onPadConnected: function(pad) {
		this.pad = pad;
		this.updatePadType();
		pad.onDisconnect = $bind(this,this.onPadDisconnected);
		if(this.onConnect != null) {
			this.onConnect();
		}
	}
	,updatePadType: function() {
		var name = this.pad.get_name().toLowerCase();
		if(name.indexOf("xbox") != -1) {
			this.padType = 1;
		} else if(name.indexOf("switch") != -1) {
			this.padType = 2;
		} else {
			this.padType = 0;
		}
	}
	,getNewBindingFromPadButton: function(action,button) {
		if(button == 19) {
			var binding = new Binding(this,action);
			binding.isX = false;
			binding.isLStick = true;
			binding.isRStick = false;
			binding.sign = -1;
			return binding;
		} else if(button == 20) {
			var binding = new Binding(this,action);
			binding.isX = true;
			binding.isLStick = true;
			binding.isRStick = false;
			binding.sign = 1;
			return binding;
		} else if(button == 21) {
			var binding = new Binding(this,action);
			binding.isX = false;
			binding.isLStick = true;
			binding.isRStick = false;
			binding.sign = 1;
			return binding;
		} else if(button == 22) {
			var binding = new Binding(this,action);
			binding.isX = true;
			binding.isLStick = true;
			binding.isRStick = false;
			binding.sign = -1;
			return binding;
		} else if(button == 25) {
			var binding = new Binding(this,action);
			binding.isX = false;
			binding.isLStick = false;
			binding.isRStick = true;
			binding.sign = -1;
			return binding;
		} else if(button == 26) {
			var binding = new Binding(this,action);
			binding.isX = true;
			binding.isLStick = false;
			binding.isRStick = true;
			binding.sign = 1;
			return binding;
		} else if(button == 27) {
			var binding = new Binding(this,action);
			binding.isX = false;
			binding.isLStick = false;
			binding.isRStick = true;
			binding.sign = 1;
			return binding;
		} else if(button == 28) {
			var binding = new Binding(this,action);
			binding.isX = true;
			binding.isLStick = false;
			binding.isRStick = true;
			binding.sign = -1;
			return binding;
		}
		var binding = new Binding(this,action);
		binding.padButton = button;
		return binding;
	}
	,isUsingGamepad: function() {
		return this.pad.index != -1;
	}
	,bindPad: function(action,button,buttons) {
		if(buttons == null && button == null || buttons != null && button != null) {
			throw haxe_Exception.thrown("Need exactly 1 button argument");
		}
		if(buttons == null) {
			buttons = [button];
		}
		var _g = 0;
		while(_g < buttons.length) {
			var b = buttons[_g];
			++_g;
			var binding = this.getNewBindingFromPadButton(action,b);
			this.storeBinding(action,binding);
		}
	}
	,bindPadLStick: function(actionX,actionY) {
		var binding = new Binding(this,actionX);
		binding.isX = true;
		binding.isLStick = true;
		binding.isRStick = false;
		var bindingX = binding;
		this.storeBinding(actionX,bindingX);
		var binding = new Binding(this,actionY);
		binding.isX = false;
		binding.isLStick = true;
		binding.isRStick = false;
		var bindingY = binding;
		this.storeBinding(actionY,bindingY);
	}
	,bindPadRStick: function(actionX,actionY) {
		var binding = new Binding(this,actionX);
		binding.isX = true;
		binding.isLStick = false;
		binding.isRStick = true;
		var bindingX = binding;
		this.storeBinding(actionX,bindingX);
		var binding = new Binding(this,actionY);
		binding.isX = false;
		binding.isLStick = false;
		binding.isRStick = true;
		var bindingY = binding;
		this.storeBinding(actionY,bindingY);
	}
	,bindPadButtonsAsStickXY: function(actionX,actionY,up,right,down,left) {
		this.bindPadButtonsAsStick(actionX,true,left,right);
		this.bindPadButtonsAsStick(actionY,false,up,down);
	}
	,bindPadButtonsAsStick: function(action,isX,negativeButton,positiveButton) {
		var binding = new Binding(this,action);
		binding.isX = isX;
		binding.padNeg = negativeButton;
		binding.padPos = positiveButton;
		this.storeBinding(action,binding);
	}
	,bindKey: function(action,key,keys) {
		if(keys == null && key == null || keys != null && key != null) {
			throw haxe_Exception.thrown("Need exactly 1 key argument");
		}
		if(keys == null) {
			keys = [key];
		}
		var _g = 0;
		while(_g < keys.length) {
			var k = keys[_g];
			++_g;
			var binding = new Binding(this,action);
			binding.keyboardPos = binding.keyboardNeg = k;
			var binding1 = binding;
			this.storeBinding(action,binding1);
		}
	}
	,bindKeyAsStick: function(action,isX,negativeKey,positiveKey) {
		var binding = new Binding(this,action);
		binding.isX = isX;
		binding.keyboardNeg = negativeKey;
		binding.keyboardPos = positiveKey;
		this.storeBinding(action,binding);
	}
	,bindKeyAsStickXY: function(actionX,actionY,up,right,down,left) {
		this.bindKeyAsStick(actionX,true,left,right);
		this.bindKeyAsStick(actionY,false,up,down);
	}
	,storeBinding: function(action,binding) {
		if(!this.bindings.h.hasOwnProperty(action)) {
			this.bindings.h[action] = [];
		}
		this.bindings.h[action].push(binding);
		if(this.onBindingsChange != null) {
			this.onBindingsChange();
		}
	}
	,rumble: function(strength,seconds) {
		if(this.pad.index >= 0) {
			this.pad.rumble(strength,seconds);
		}
	}
	,isDown: function(action) {
		if(this.ignoreNextInput) {
			return false;
		}
		if(!this.bindings.h.hasOwnProperty(action)) {
			return false;
		}
		var _g = 0;
		var _g1 = this.bindings.h[action];
		while(_g < _g1.length) {
			var binding = _g1[_g];
			++_g;
			var pad = this.pad;
			var tmp;
			if(!binding.controller.enabled) {
				tmp = false;
			} else if(binding.isLStick || binding.isRStick) {
				var tmp1;
				if(!binding.controller.enabled) {
					tmp1 = 0.;
				} else {
					var tmp2;
					if(!hxd_Key.isDown(binding.keyboardPos)) {
						var _this = binding.controller;
						var padButton = binding.padPos;
						tmp2 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
					} else {
						tmp2 = true;
					}
					if(tmp2) {
						tmp1 = 1.;
					} else {
						var tmp3;
						if(!hxd_Key.isDown(binding.keyboardNeg)) {
							var _this1 = binding.controller;
							var padButton1 = binding.padNeg;
							tmp3 = pad.isDown(padButton1 != null && _this1.padButtonToId.h.hasOwnProperty(padButton1) ? _this1.padButtonToId.h[padButton1] : -1);
						} else {
							tmp3 = true;
						}
						tmp1 = tmp3 ? -1. : binding.padPos == null && binding.isLStick && binding.isX ? pad.get_xAxis() * binding.sign : binding.padPos == null && binding.isLStick && !binding.isX ? pad.get_yAxis() * binding.sign : binding.padPos == null && binding.isRStick && binding.isX ? pad.get_rxAxis() * binding.sign : binding.padPos == null && binding.isRStick && !binding.isX ? pad.get_ryAxis() * binding.sign : 0.;
					}
				}
				tmp = tmp1 > Binding.deadZone;
			} else {
				var _this2 = binding.controller;
				var padButton2 = binding.padButton;
				tmp = pad.isDown(padButton2 != null && _this2.padButtonToId.h.hasOwnProperty(padButton2) ? _this2.padButtonToId.h[padButton2] : -1) || hxd_Key.isDown(binding.keyboardPos) || hxd_Key.isDown(binding.keyboardNeg);
			}
			if(tmp) {
				return true;
			}
		}
		return false;
	}
	,isPressed: function(action) {
		if(this.ignoreNextInput) {
			return false;
		}
		if(!this.bindings.h.hasOwnProperty(action)) {
			return false;
		}
		var _g = 0;
		var _g1 = this.bindings.h[action];
		while(_g < _g1.length) {
			var binding = _g1[_g];
			++_g;
			var pad = this.pad;
			var tmp;
			if(!binding.wasDown) {
				if(!binding.controller.enabled) {
					tmp = false;
				} else if(binding.isLStick || binding.isRStick) {
					var tmp1;
					if(!binding.controller.enabled) {
						tmp1 = 0.;
					} else {
						var tmp2;
						if(!hxd_Key.isDown(binding.keyboardPos)) {
							var _this = binding.controller;
							var padButton = binding.padPos;
							tmp2 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
						} else {
							tmp2 = true;
						}
						if(tmp2) {
							tmp1 = 1.;
						} else {
							var tmp3;
							if(!hxd_Key.isDown(binding.keyboardNeg)) {
								var _this1 = binding.controller;
								var padButton1 = binding.padNeg;
								tmp3 = pad.isDown(padButton1 != null && _this1.padButtonToId.h.hasOwnProperty(padButton1) ? _this1.padButtonToId.h[padButton1] : -1);
							} else {
								tmp3 = true;
							}
							tmp1 = tmp3 ? -1. : binding.padPos == null && binding.isLStick && binding.isX ? pad.get_xAxis() * binding.sign : binding.padPos == null && binding.isLStick && !binding.isX ? pad.get_yAxis() * binding.sign : binding.padPos == null && binding.isRStick && binding.isX ? pad.get_rxAxis() * binding.sign : binding.padPos == null && binding.isRStick && !binding.isX ? pad.get_ryAxis() * binding.sign : 0.;
						}
					}
					tmp = tmp1 > Binding.deadZone;
				} else {
					var _this2 = binding.controller;
					var padButton2 = binding.padButton;
					tmp = pad.isDown(padButton2 != null && _this2.padButtonToId.h.hasOwnProperty(padButton2) ? _this2.padButtonToId.h[padButton2] : -1) || hxd_Key.isDown(binding.keyboardPos) || hxd_Key.isDown(binding.keyboardNeg);
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
		}
		return false;
	}
	,isReleased: function(action) {
		if(this.ignoreNextInput) {
			return false;
		}
		if(!this.bindings.h.hasOwnProperty(action)) {
			return false;
		}
		var _g = 0;
		var _g1 = this.bindings.h[action];
		while(_g < _g1.length) {
			var binding = _g1[_g];
			++_g;
			var pad = this.pad;
			var tmp;
			if(binding.wasDown) {
				var tmp1;
				if(!binding.controller.enabled) {
					tmp1 = false;
				} else if(binding.isLStick || binding.isRStick) {
					var tmp2;
					if(!binding.controller.enabled) {
						tmp2 = 0.;
					} else {
						var tmp3;
						if(!hxd_Key.isDown(binding.keyboardPos)) {
							var _this = binding.controller;
							var padButton = binding.padPos;
							tmp3 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
						} else {
							tmp3 = true;
						}
						if(tmp3) {
							tmp2 = 1.;
						} else {
							var tmp4;
							if(!hxd_Key.isDown(binding.keyboardNeg)) {
								var _this1 = binding.controller;
								var padButton1 = binding.padNeg;
								tmp4 = pad.isDown(padButton1 != null && _this1.padButtonToId.h.hasOwnProperty(padButton1) ? _this1.padButtonToId.h[padButton1] : -1);
							} else {
								tmp4 = true;
							}
							tmp2 = tmp4 ? -1. : binding.padPos == null && binding.isLStick && binding.isX ? pad.get_xAxis() * binding.sign : binding.padPos == null && binding.isLStick && !binding.isX ? pad.get_yAxis() * binding.sign : binding.padPos == null && binding.isRStick && binding.isX ? pad.get_rxAxis() * binding.sign : binding.padPos == null && binding.isRStick && !binding.isX ? pad.get_ryAxis() * binding.sign : 0.;
						}
					}
					tmp1 = tmp2 > Binding.deadZone;
				} else {
					var _this2 = binding.controller;
					var padButton2 = binding.padButton;
					tmp1 = pad.isDown(padButton2 != null && _this2.padButtonToId.h.hasOwnProperty(padButton2) ? _this2.padButtonToId.h[padButton2] : -1) || hxd_Key.isDown(binding.keyboardPos) || hxd_Key.isDown(binding.keyboardNeg);
				}
				tmp = !tmp1;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
		}
		return false;
	}
	,getAnalogValue: function(action) {
		if(!this.bindings.h.hasOwnProperty(action)) {
			return 0.;
		}
		var _g = 0;
		var _g1 = this.bindings.h[action];
		while(_g < _g1.length) {
			var binding = _g1[_g];
			++_g;
			var pad = this.pad;
			var val;
			if(!binding.controller.enabled) {
				val = 0.;
			} else {
				var val1;
				if(!hxd_Key.isDown(binding.keyboardPos)) {
					var _this = binding.controller;
					var padButton = binding.padPos;
					val1 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
				} else {
					val1 = true;
				}
				if(val1) {
					val = 1.;
				} else {
					var val2;
					if(!hxd_Key.isDown(binding.keyboardNeg)) {
						var _this1 = binding.controller;
						var padButton1 = binding.padNeg;
						val2 = pad.isDown(padButton1 != null && _this1.padButtonToId.h.hasOwnProperty(padButton1) ? _this1.padButtonToId.h[padButton1] : -1);
					} else {
						val2 = true;
					}
					val = val2 ? -1. : binding.padPos == null && binding.isLStick && binding.isX ? pad.get_xAxis() * binding.sign : binding.padPos == null && binding.isLStick && !binding.isX ? pad.get_yAxis() * binding.sign : binding.padPos == null && binding.isRStick && binding.isX ? pad.get_rxAxis() * binding.sign : binding.padPos == null && binding.isRStick && !binding.isX ? pad.get_ryAxis() * binding.sign : 0.;
				}
			}
			if(val != 0) {
				return val;
			}
		}
		return 0.;
	}
	,getAnalogDistXY: function(actionX,actionY,clamp) {
		if(clamp == null) {
			clamp = true;
		}
		var dx = this.getAnalogValue(actionX);
		var dy = this.getAnalogValue(actionY);
		var dist = Math.sqrt(dx * dx + dy * dy);
		return Math.min(dist,1.);
	}
	,getAnalogAngleXY: function(actionX,actionY) {
		return Math.atan2(this.getAnalogValue(actionY),this.getAnalogValue(actionX));
	}
	,initButtonMapping: function() {
		this.padButtonToId = new haxe_ds_IntMap();
		this.padButtonToId.h[1] = this.pad.config.A;
		this.padButtonToId.h[2] = this.pad.config.B;
		this.padButtonToId.h[3] = this.pad.config.X;
		this.padButtonToId.h[4] = this.pad.config.Y;
		this.padButtonToId.h[5] = this.pad.config.start;
		this.padButtonToId.h[6] = this.pad.config.back;
		this.padButtonToId.h[7] = this.pad.config.LT;
		this.padButtonToId.h[8] = this.pad.config.RT;
		this.padButtonToId.h[9] = this.pad.config.LB;
		this.padButtonToId.h[10] = this.pad.config.RB;
		this.padButtonToId.h[11] = this.pad.config.dpadUp;
		this.padButtonToId.h[13] = this.pad.config.dpadDown;
		this.padButtonToId.h[14] = this.pad.config.dpadLeft;
		this.padButtonToId.h[12] = this.pad.config.dpadRight;
		this.padButtonToId.h[15] = this.pad.config.analogClick;
		this.padButtonToId.h[16] = this.pad.config.ranalogClick;
	}
	,getStickPadButton: function(isLeft,deadZone) {
		if(deadZone == null) {
			deadZone = .7;
		}
		var stickX = isLeft ? this.pad.get_xAxis() : this.pad.get_rxAxis();
		var stickY = isLeft ? this.pad.get_yAxis() : this.pad.get_ryAxis();
		var dist = Math.sqrt(stickX * stickX + stickY * stickY);
		var angle = Math.atan2(stickY,stickX);
		if(dist > deadZone) {
			var pi2 = Math.PI / 2;
			var dirAngle = Math.round(angle / pi2) * pi2;
			if(dirAngle == 0) {
				if(isLeft) {
					return 20;
				} else {
					return 26;
				}
			} else if(dirAngle == -pi2) {
				if(isLeft) {
					return 19;
				} else {
					return 25;
				}
			} else if(dirAngle == pi2) {
				if(isLeft) {
					return 21;
				} else {
					return 27;
				}
			} else if(isLeft) {
				return 22;
			} else {
				return 28;
			}
		}
		return 0;
	}
	,getPadButtonId: function(padButton) {
		if(padButton != null && this.padButtonToId.h.hasOwnProperty(padButton)) {
			return this.padButtonToId.h[padButton];
		} else {
			return -1;
		}
	}
	,update: function(dt) {
	}
	,afterUpdate: function() {
		if(!this.enabled) {
			return;
		}
		var arr = this.bindings.iterator();
		while(arr.hasNext()) {
			var arr1 = arr.next();
			var _g = 0;
			while(_g < arr1.length) {
				var b = arr1[_g];
				++_g;
				var pad = this.pad;
				var tmp;
				if(!b.controller.enabled) {
					tmp = false;
				} else if(b.isLStick || b.isRStick) {
					var tmp1;
					if(!b.controller.enabled) {
						tmp1 = 0.;
					} else {
						var tmp2;
						if(!hxd_Key.isDown(b.keyboardPos)) {
							var _this = b.controller;
							var padButton = b.padPos;
							tmp2 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
						} else {
							tmp2 = true;
						}
						if(tmp2) {
							tmp1 = 1.;
						} else {
							var tmp3;
							if(!hxd_Key.isDown(b.keyboardNeg)) {
								var _this1 = b.controller;
								var padButton1 = b.padNeg;
								tmp3 = pad.isDown(padButton1 != null && _this1.padButtonToId.h.hasOwnProperty(padButton1) ? _this1.padButtonToId.h[padButton1] : -1);
							} else {
								tmp3 = true;
							}
							tmp1 = tmp3 ? -1. : b.padPos == null && b.isLStick && b.isX ? pad.get_xAxis() * b.sign : b.padPos == null && b.isLStick && !b.isX ? pad.get_yAxis() * b.sign : b.padPos == null && b.isRStick && b.isX ? pad.get_rxAxis() * b.sign : b.padPos == null && b.isRStick && !b.isX ? pad.get_ryAxis() * b.sign : 0.;
						}
					}
					tmp = tmp1 > Binding.deadZone;
				} else {
					var _this2 = b.controller;
					var padButton2 = b.padButton;
					tmp = pad.isDown(padButton2 != null && _this2.padButtonToId.h.hasOwnProperty(padButton2) ? _this2.padButtonToId.h[padButton2] : -1) || hxd_Key.isDown(b.keyboardPos) || hxd_Key.isDown(b.keyboardNeg);
				}
				b.wasDown = tmp;
			}
		}
		if(this.ignoreNextInput) {
			this.ignoreNextInput = false;
		}
	}
	,resetBindings: function() {
		this.bindings = new haxe_ds_IntMap();
		if(this.onBindingsChange != null) {
			this.onBindingsChange();
		}
	}
	,getButtonTileName: function(button) {
		var name;
		switch(button) {
		case 1:
			name = "A";
			break;
		case 2:
			name = "B";
			break;
		case 3:
			name = "X";
			break;
		case 4:
			name = "Y";
			break;
		case 5:
			name = "START";
			break;
		case 6:
			name = "SELECT";
			break;
		case 7:
			name = "LT";
			break;
		case 8:
			name = "RT";
			break;
		case 9:
			name = "LB";
			break;
		case 10:
			name = "RB";
			break;
		case 11:
			name = "DPAD UP";
			break;
		case 12:
			name = "DPAD RIGHT";
			break;
		case 13:
			name = "DPAD DOWN";
			break;
		case 14:
			name = "DPAD LEFT";
			break;
		case 15:
			name = "LSTICK PUSH";
			break;
		case 16:
			name = "RSTICK PUSH";
			break;
		case 19:
			name = "LSTICK UP";
			break;
		case 20:
			name = "LSTICK RIGHT";
			break;
		case 21:
			name = "LSTICK DOWN";
			break;
		case 22:
			name = "LSTICK LEFT";
			break;
		case 25:
			name = "RSTICK UP";
			break;
		case 26:
			name = "RSTICK RIGHT";
			break;
		case 27:
			name = "RSTICK DOWN";
			break;
		case 28:
			name = "RSTICK LEFT";
			break;
		default:
			name = "UNKNOWN";
		}
		var defaultPrefix = "pad";
		var idealPrefix = defaultPrefix + (this.padType == 2 ? "Switch" : "");
		if(Assets.hasTile("inputIcons",idealPrefix + name)) {
			return idealPrefix + name;
		}
		if(Assets.hasTile("inputIcons",defaultPrefix + name)) {
			return defaultPrefix + name;
		}
		return null;
	}
	,getPrimaryKeyForAction: function(action) {
		if(!this.bindings.h.hasOwnProperty(action)) {
			return null;
		}
		var _g = 0;
		var _g1 = this.bindings.h[action];
		while(_g < _g1.length) {
			var binding = _g1[_g];
			++_g;
			if(binding.keyboardPos != -1) {
				return binding.keyboardPos;
			}
		}
		return null;
	}
	,getPrimaryButtonForAction: function(action) {
		if(!this.bindings.h.hasOwnProperty(action)) {
			return null;
		}
		var _g = 0;
		var _g1 = this.bindings.h[action];
		while(_g < _g1.length) {
			var binding = _g1[_g];
			++_g;
			if(binding.padButton != null) {
				return binding.padButton;
			}
		}
		return null;
	}
	,__class__: Controller
};
var Binding = function(controller,action) {
	this.wasDown = false;
	this.sign = 1;
	this.isX = false;
	this.keyboardNeg = -1;
	this.keyboardPos = -1;
	this.isRStick = false;
	this.isLStick = false;
	this.controller = controller;
	this.action = action;
};
$hxClasses["Binding"] = Binding;
Binding.__name__ = "Binding";
Binding.newFromKeyboard = function(controller,action,key) {
	var binding = new Binding(controller,action);
	binding.keyboardPos = binding.keyboardNeg = key;
	return binding;
};
Binding.newFromPad = function(controller,action,padButton) {
	var binding = new Binding(controller,action);
	binding.padButton = padButton;
	return binding;
};
Binding.newFromPadAxis = function(controller,action,isLStick,isX) {
	var binding = new Binding(controller,action);
	binding.isX = isX;
	binding.isLStick = isLStick;
	binding.isRStick = !isLStick;
	return binding;
};
Binding.newFromPadDirection = function(controller,action,isLStick,isX,sign) {
	var binding = new Binding(controller,action);
	binding.isX = isX;
	binding.isLStick = isLStick;
	binding.isRStick = !isLStick;
	binding.sign = sign;
	return binding;
};
Binding.prototype = {
	getValue: function(pad) {
		if(!this.controller.enabled) {
			return 0.;
		}
		var tmp;
		if(!hxd_Key.isDown(this.keyboardPos)) {
			var _this = this.controller;
			var padButton = this.padPos;
			tmp = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
		} else {
			tmp = true;
		}
		if(tmp) {
			return 1.;
		} else {
			var tmp;
			if(!hxd_Key.isDown(this.keyboardNeg)) {
				var _this = this.controller;
				var padButton = this.padNeg;
				tmp = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
			} else {
				tmp = true;
			}
			if(tmp) {
				return -1.;
			} else if(this.padPos == null && this.isLStick && this.isX) {
				return pad.get_xAxis() * this.sign;
			} else if(this.padPos == null && this.isLStick && !this.isX) {
				return pad.get_yAxis() * this.sign;
			} else if(this.padPos == null && this.isRStick && this.isX) {
				return pad.get_rxAxis() * this.sign;
			} else if(this.padPos == null && this.isRStick && !this.isX) {
				return pad.get_ryAxis() * this.sign;
			} else {
				return 0.;
			}
		}
	}
	,afterUpdate: function(pad) {
		var tmp;
		if(!this.controller.enabled) {
			tmp = false;
		} else if(this.isLStick || this.isRStick) {
			var tmp1;
			if(!this.controller.enabled) {
				tmp1 = 0.;
			} else {
				var tmp2;
				if(!hxd_Key.isDown(this.keyboardPos)) {
					var _this = this.controller;
					var padButton = this.padPos;
					tmp2 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
				} else {
					tmp2 = true;
				}
				if(tmp2) {
					tmp1 = 1.;
				} else {
					var tmp2;
					if(!hxd_Key.isDown(this.keyboardNeg)) {
						var _this = this.controller;
						var padButton = this.padNeg;
						tmp2 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
					} else {
						tmp2 = true;
					}
					tmp1 = tmp2 ? -1. : this.padPos == null && this.isLStick && this.isX ? pad.get_xAxis() * this.sign : this.padPos == null && this.isLStick && !this.isX ? pad.get_yAxis() * this.sign : this.padPos == null && this.isRStick && this.isX ? pad.get_rxAxis() * this.sign : this.padPos == null && this.isRStick && !this.isX ? pad.get_ryAxis() * this.sign : 0.;
				}
			}
			tmp = tmp1 > Binding.deadZone;
		} else {
			var _this = this.controller;
			var padButton = this.padButton;
			tmp = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1) || hxd_Key.isDown(this.keyboardPos) || hxd_Key.isDown(this.keyboardNeg);
		}
		this.wasDown = tmp;
	}
	,isDown: function(pad) {
		if(!this.controller.enabled) {
			return false;
		}
		if(this.isLStick || this.isRStick) {
			var tmp;
			if(!this.controller.enabled) {
				tmp = 0.;
			} else {
				var tmp1;
				if(!hxd_Key.isDown(this.keyboardPos)) {
					var _this = this.controller;
					var padButton = this.padPos;
					tmp1 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					tmp = 1.;
				} else {
					var tmp1;
					if(!hxd_Key.isDown(this.keyboardNeg)) {
						var _this = this.controller;
						var padButton = this.padNeg;
						tmp1 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
					} else {
						tmp1 = true;
					}
					tmp = tmp1 ? -1. : this.padPos == null && this.isLStick && this.isX ? pad.get_xAxis() * this.sign : this.padPos == null && this.isLStick && !this.isX ? pad.get_yAxis() * this.sign : this.padPos == null && this.isRStick && this.isX ? pad.get_rxAxis() * this.sign : this.padPos == null && this.isRStick && !this.isX ? pad.get_ryAxis() * this.sign : 0.;
				}
			}
			return tmp > Binding.deadZone;
		}
		var _this = this.controller;
		var padButton = this.padButton;
		if(!(pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1) || hxd_Key.isDown(this.keyboardPos))) {
			return hxd_Key.isDown(this.keyboardNeg);
		} else {
			return true;
		}
	}
	,isPressed: function(pad) {
		if(!this.wasDown) {
			if(!this.controller.enabled) {
				return false;
			} else if(this.isLStick || this.isRStick) {
				var tmp;
				if(!this.controller.enabled) {
					tmp = 0.;
				} else {
					var tmp1;
					if(!hxd_Key.isDown(this.keyboardPos)) {
						var _this = this.controller;
						var padButton = this.padPos;
						tmp1 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
					} else {
						tmp1 = true;
					}
					if(tmp1) {
						tmp = 1.;
					} else {
						var tmp1;
						if(!hxd_Key.isDown(this.keyboardNeg)) {
							var _this = this.controller;
							var padButton = this.padNeg;
							tmp1 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
						} else {
							tmp1 = true;
						}
						tmp = tmp1 ? -1. : this.padPos == null && this.isLStick && this.isX ? pad.get_xAxis() * this.sign : this.padPos == null && this.isLStick && !this.isX ? pad.get_yAxis() * this.sign : this.padPos == null && this.isRStick && this.isX ? pad.get_rxAxis() * this.sign : this.padPos == null && this.isRStick && !this.isX ? pad.get_ryAxis() * this.sign : 0.;
					}
				}
				return tmp > Binding.deadZone;
			} else {
				var _this = this.controller;
				var padButton = this.padButton;
				if(!(pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1) || hxd_Key.isDown(this.keyboardPos))) {
					return hxd_Key.isDown(this.keyboardNeg);
				} else {
					return true;
				}
			}
		} else {
			return false;
		}
	}
	,isReleased: function(pad) {
		if(this.wasDown) {
			var tmp;
			if(!this.controller.enabled) {
				tmp = false;
			} else if(this.isLStick || this.isRStick) {
				var tmp1;
				if(!this.controller.enabled) {
					tmp1 = 0.;
				} else {
					var tmp2;
					if(!hxd_Key.isDown(this.keyboardPos)) {
						var _this = this.controller;
						var padButton = this.padPos;
						tmp2 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
					} else {
						tmp2 = true;
					}
					if(tmp2) {
						tmp1 = 1.;
					} else {
						var tmp2;
						if(!hxd_Key.isDown(this.keyboardNeg)) {
							var _this = this.controller;
							var padButton = this.padNeg;
							tmp2 = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1);
						} else {
							tmp2 = true;
						}
						tmp1 = tmp2 ? -1. : this.padPos == null && this.isLStick && this.isX ? pad.get_xAxis() * this.sign : this.padPos == null && this.isLStick && !this.isX ? pad.get_yAxis() * this.sign : this.padPos == null && this.isRStick && this.isX ? pad.get_rxAxis() * this.sign : this.padPos == null && this.isRStick && !this.isX ? pad.get_ryAxis() * this.sign : 0.;
					}
				}
				tmp = tmp1 > Binding.deadZone;
			} else {
				var _this = this.controller;
				var padButton = this.padButton;
				tmp = pad.isDown(padButton != null && _this.padButtonToId.h.hasOwnProperty(padButton) ? _this.padButtonToId.h[padButton] : -1) || hxd_Key.isDown(this.keyboardPos) || hxd_Key.isDown(this.keyboardNeg);
			}
			return !tmp;
		} else {
			return false;
		}
	}
	,__class__: Binding
};
var _$CustomSpriteBatch_ElementsIterator = function(e) {
	this.e = e;
};
$hxClasses["_CustomSpriteBatch.ElementsIterator"] = _$CustomSpriteBatch_ElementsIterator;
_$CustomSpriteBatch_ElementsIterator.__name__ = "_CustomSpriteBatch.ElementsIterator";
_$CustomSpriteBatch_ElementsIterator.prototype = {
	hasNext: function() {
		return this.e != null;
	}
	,next: function() {
		var n = this.e;
		this.e = this.e.next;
		return n;
	}
	,__class__: _$CustomSpriteBatch_ElementsIterator
};
var BatchElement = function(t) {
	this.visible = true;
	this.a = 1;
	this.b = 1;
	this.g = 1;
	this.r = 1;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.t = t;
};
$hxClasses["BatchElement"] = BatchElement;
BatchElement.__name__ = "BatchElement";
BatchElement.prototype = {
	set_scale: function(v) {
		return this.scaleX = this.scaleY = v;
	}
	,get_alpha: function() {
		return this.a;
	}
	,set_alpha: function(v) {
		return this.a = v;
	}
	,update: function(dt) {
		return true;
	}
	,remove: function() {
		if(this.batch != null) {
			this.batch.delete(this);
		}
	}
	,__class__: BatchElement
};
var CustomSpriteBatch = function(t,parent) {
	this.hasUpdate = false;
	this.hasRotationScale = false;
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.state = new h2d_impl_BatchDrawState();
};
$hxClasses["CustomSpriteBatch"] = CustomSpriteBatch;
CustomSpriteBatch.__name__ = "CustomSpriteBatch";
CustomSpriteBatch.__super__ = h2d_Drawable;
CustomSpriteBatch.prototype = $extend(h2d_Drawable.prototype,{
	add: function(e,before) {
		if(before == null) {
			before = false;
		}
		e.batch = this;
		if(this.first == null) {
			this.first = this.last = e;
			e.prev = e.next = null;
		} else if(before) {
			e.prev = null;
			e.next = this.first;
			this.first.prev = e;
			this.first = e;
		} else {
			this.last.next = e;
			e.prev = this.last;
			e.next = null;
			this.last = e;
		}
		return e;
	}
	,clear: function() {
		this.first = this.last = null;
		this.flush();
	}
	,alloc: function(t) {
		return this.add(new BatchElement(t));
	}
	,'delete': function(e) {
		if(e.prev == null) {
			if(this.first == e) {
				this.first = e.next;
			}
		} else {
			e.prev.next = e.next;
		}
		if(e.next == null) {
			if(this.last == e) {
				this.last = e.prev;
			}
		} else {
			e.next.prev = e.prev;
		}
		e.batch = null;
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		this.flush();
	}
	,update: function(dt) {
		if(!this.hasUpdate) {
			return;
		}
		var e = this.first;
		while(e != null) {
			if(!e.update(dt)) {
				e.remove();
			}
			e = e.next;
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		var e = this.first;
		while(e != null) {
			var t = e.t;
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				var x = px * ca - py * sa + e.x;
				var y = py * ca + px * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				x = px1 * ca - py1 * sa + e.x;
				y = py1 * ca + px1 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				x = px2 * ca - py2 * sa + e.x;
				y = py2 * ca + px2 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				x = px3 * ca - py3 * sa + e.x;
				y = py3 * ca + px3 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
			} else {
				this.addBounds(relativeTo,out,e.x + t.dx,e.y + t.dy,t.width,t.height);
			}
			e = e.next;
		}
	}
	,flush: function() {
		if(this.first == null) {
			return;
		}
		if(this.tmpBuf == null) {
			this.tmpBuf = hxd__$FloatBuffer_Float32Expand._new(0);
		}
		var pos = 0;
		var e = this.first;
		var tmp = this.tmpBuf;
		var bufferVertices = 0;
		this.state.clear();
		while(e != null) {
			if(!e.visible) {
				e = e.next;
				continue;
			}
			var t = e.t;
			if(t != null) {
				this.state.setTexture(t.innerTex);
			}
			var _this = this.state;
			_this.tail.count += 4;
			_this.totalCount += 4;
			var _g = tmp.pos;
			var _g1 = pos + 32;
			while(_g < _g1) {
				var i = _g++;
				if(tmp.pos == tmp.array.length) {
					var newSize = tmp.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(tmp.array);
					tmp.array = newArray;
				}
				tmp.array[tmp.pos++] = 0.;
			}
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				tmp.array[pos++] = px * ca - py * sa + e.x;
				tmp.array[pos++] = py * ca + px * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				tmp.array[pos++] = px1 * ca - py1 * sa + e.x;
				tmp.array[pos++] = py1 * ca + px1 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px2 * ca - py2 * sa + e.x;
				tmp.array[pos++] = py2 * ca + px2 * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px3 * ca - py3 * sa + e.x;
				tmp.array[pos++] = py3 * ca + px3 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			} else {
				var sx = e.x + t.dx;
				var sy = e.y + t.dy;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			}
			e = e.next;
		}
		bufferVertices = pos >> 3;
		if(this.buffer != null && this.buffer.vbuf != null) {
			if(this.buffer.vertices >= bufferVertices) {
				this.buffer.uploadFloats(this.tmpBuf,0,bufferVertices);
				return;
			}
			this.buffer.dispose();
			this.buffer = null;
		}
		this.empty = bufferVertices == 0;
		if(bufferVertices > 0) {
			this.buffer = h3d_Buffer.ofSubFloats(this.tmpBuf,bufferVertices,hxd_BufferFormat.get_XY_UV_RGBA(),[h3d_BufferFlag.Dynamic]);
		}
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,drawWith: function(ctx,obj) {
		if(this.first == null || this.buffer == null || this.buffer.vbuf == null || this.empty) {
			return;
		}
		if(!ctx.beginDrawBatchState(obj)) {
			return;
		}
		var engine = ctx.engine;
		this.state.drawQuads(ctx,this.buffer);
	}
	,isEmpty: function() {
		return this.first == null;
	}
	,getElements: function() {
		return new _$CustomSpriteBatch_ElementsIterator(this.first);
	}
	,onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		this.state.clear();
	}
	,__class__: CustomSpriteBatch
});
var SoundDef = {};
SoundDef.get_name = function(this1) {
	return this1.name;
};
SoundDef.get_variationCount = function(this1) {
	return this1.variationCount;
};
SoundDef.get_volume = function(this1) {
	return this1.volume;
};
SoundDef.get_scaleVolume = function(this1) {
	return this1.scaleVolume;
};
var MusicDef = {};
MusicDef.get_name = function(this1) {
	return this1.name;
};
MusicDef.get_playNext = function(this1) {
	return this1.playNext;
};
MusicDef.get_loop = function(this1) {
	return this1.loop;
};
MusicDef.get_continueDuringPause = function(this1) {
	return this1.continueDuringPause;
};
MusicDef.get_volume = function(this1) {
	return this1.volume;
};
var Difficulty = $hxEnums["Difficulty"] = { __ename__:"Difficulty",__constructs__:null
	,Easy: {_hx_name:"Easy",_hx_index:0,__enum__:"Difficulty",toString:$estr}
	,Normal: {_hx_name:"Normal",_hx_index:1,__enum__:"Difficulty",toString:$estr}
	,Hard: {_hx_name:"Hard",_hx_index:2,__enum__:"Difficulty",toString:$estr}
	,Insane: {_hx_name:"Insane",_hx_index:3,__enum__:"Difficulty",toString:$estr}
};
Difficulty.__constructs__ = [Difficulty.Easy,Difficulty.Normal,Difficulty.Hard,Difficulty.Insane];
Difficulty.__empty_constructs__ = [Difficulty.Easy,Difficulty.Normal,Difficulty.Hard,Difficulty.Insane];
var DifficultyBuilder = function() { };
$hxClasses["DifficultyBuilder"] = DifficultyBuilder;
DifficultyBuilder.__name__ = "DifficultyBuilder";
DifficultyBuilder.build = function(v) {
	switch(v[0]) {
	case 0:
		return Difficulty.Easy;
	case 1:
		return Difficulty.Normal;
	case 2:
		return Difficulty.Hard;
	case 3:
		return Difficulty.Insane;
	default:
		throw haxe_Exception.thrown("Invalid value " + Std.string(v));
	}
};
var Data = function() { };
$hxClasses["Data"] = Data;
Data.__name__ = "Data";
Data.applyLang = function(xml,reference,onMissing) {
	var c = new cdb_Lang(Data.root);
	if(onMissing != null) {
		c.onMissing = onMissing;
	}
	return c.apply(xml,reference);
};
Data.load = function(content,allowReload) {
	if(allowReload == null) {
		allowReload = false;
	}
	Data.root = cdb_Parser.parse(content,false);
	Data.soundDef = new cdb_Index(Data.root,"soundDef");
	Data.musicDef = new cdb_Index(Data.root,"musicDef");
};
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = "DateTools";
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new haxe_exceptions_NotImplementedException("Date.format %" + e + "- not implemented yet.",null,{ fileName : "DateTools.hx", lineNumber : 101, className : "DateTools", methodName : "__format_get"});
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len = f.length - p;
	r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,__class__: EReg
};
var GameState = $hxEnums["GameState"] = { __ename__:"GameState",__constructs__:null
	,TransitionIn: {_hx_name:"TransitionIn",_hx_index:0,__enum__:"GameState",toString:$estr}
	,Play: {_hx_name:"Play",_hx_index:1,__enum__:"GameState",toString:$estr}
	,Dead: {_hx_name:"Dead",_hx_index:2,__enum__:"GameState",toString:$estr}
	,TransitionOut: {_hx_name:"TransitionOut",_hx_index:3,__enum__:"GameState",toString:$estr}
};
GameState.__constructs__ = [GameState.TransitionIn,GameState.Play,GameState.Dead,GameState.TransitionOut];
GameState.__empty_constructs__ = [GameState.TransitionIn,GameState.Play,GameState.Dead,GameState.TransitionOut];
var Scene = function(masking) {
	if(masking == null) {
		masking = false;
	}
	this.deleted = false;
	this.maskUpdate = true;
	this.masking = false;
	this.masking = masking;
	SceneManager.add(this);
	this.world = new PixelPerfectScene();
	this.world.set_scaleMode(h2d_ScaleMode.Stretch(320,180));
	this.hud = new PixelPerfectScene();
	this.hud.set_scaleMode(h2d_ScaleMode.Stretch(320,180));
	Main.inst.sevents.addScene(this.world);
	Main.inst.sevents.addScene(this.hud);
};
$hxClasses["Scene"] = Scene;
Scene.__name__ = "Scene";
Scene.prototype = {
	'delete': function() {
		this.deleted = true;
		Main.inst.sevents.removeScene(this.hud);
		Main.inst.sevents.removeScene(this.world);
		var _this = this.hud;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var _this = this.world;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		if(this.onDelete != null) {
			this.onDelete();
		}
		SceneManager.remove(this);
	}
	,update: function(dt) {
	}
	,updateBack: function(dt) {
	}
	,updateAfter: function(dt) {
	}
	,updateConstantRate: function(dt) {
	}
	,renderWorld: function(e) {
		this.world.render(e);
	}
	,renderHUD: function(e) {
		this.hud.render(e);
	}
	,__class__: Scene
};
var Game = function(initial,globalLevelId) {
	this.justCompletedGame = false;
	this.playerMoved = false;
	this.playTimer = 0;
	this.stateTimer = 0.;
	this.levelId = 1;
	Scene.call(this);
	if(Game.inst != null) {
		throw haxe_Exception.thrown("Game scene already exists");
	}
	Game.inst = this;
	this.completedAllLevels = save_Save.gameData.data.areAllLevelsCompleted();
	this.camera = new Camera();
	this.level = new Level();
	this.background = new background_Background();
	this.winGraphics = new h2d_Graphics();
	this.world.add(this.winGraphics,Game.LAYER_WIN);
	this.winGraphics.set_visible(false);
	this.set_state(GameState.Play);
	this.levelId = globalLevelId;
	this.loadLevelById(this.levelId);
	this.fx = new fx_Fx(this.world,this.world,this.world,Game.LAYER_FX_FRONT,Game.LAYER_FX_MID,Game.LAYER_FX_BACK);
	this.camera.update(0);
	this.touchInput = new ui_TouchInput();
	this.touchInput.hide();
	this.mouseInput = new ui_MouseInput();
	if(isUsingMobile()) {
		this.touchInput.show();
		this.mouseInput.enabled = false;
	}
	this.timerText = new h2d_Text(Assets.font);
	this.world.add(this.timerText,Game.LAYER_TIMER);
	this.timerText.set_text(Game.formatTimer(this.playTimer));
	this.timerText.set_visible(this.completedAllLevels);
	this.justCompletedGame = !this.completedAllLevels;
};
$hxClasses["Game"] = Game;
Game.__name__ = "Game";
Game.formatTimer = function(frames) {
	var minutes = frames / 60 / 60 | 0;
	var seconds = (frames / 60 | 0) % 60;
	var ms = frames % 60 / 60 * 1000.;
	return minutes + ":" + (seconds < 10 ? "0" : "") + seconds + "." + (ms / 10 | 0);
};
Game.__super__ = Scene;
Game.prototype = $extend(Scene.prototype,{
	'delete': function() {
		Scene.prototype.delete.call(this);
		Game.inst = null;
		this.level.delete();
		entities_Entity.deleteAll();
		entities_Border.deleteAll();
		entities_Gem.deleteAll();
		if(this.deathFx != null) {
			this.deathFx.delete();
		}
		this.background.delete();
		this.touchInput.delete();
		this.mouseInput.delete();
	}
	,update: function(dt) {
		dt *= .9;
		Scene.prototype.update.call(this,dt);
		this.stateTimer += dt;
		if(this.state == GameState.Play) {
			this.updatePlayTimer();
			entities_Entity.updateAll(dt);
			entities_Border.updateAll(dt);
			entities_Gem.updateAll(dt);
			this.camera.update(dt);
			if(Main.inst.controller.isPressed(3)) {
				this.retry();
			}
			if(Main.inst.controller.isPressed(4)) {
				this.delete();
				new Title(this.levelId);
				return;
			}
		} else if(this.state == GameState.TransitionOut) {
			this.updateTransitionOut(dt);
			if(this.stateTimer >= Game.TRANSITION_OUT_TIME) {
				var group = this.getLevelGroup();
				var maskX = this.winGraphics.x + this.world.x;
				var maskY = this.winGraphics.y + this.world.y;
				new LevelComplete(group,this.levelId - group * 3 * 3,this.levelId,maskX,maskY,this.playTimer,this.justCompletedGame);
				audio_Audio.playSound("levelComplete");
				this.delete();
				return;
			}
		} else if(this.state == GameState.TransitionIn) {
			if(this.stateTimer >= Game.TRANSITION_IN_TIME) {
				this.set_state(GameState.Play);
			}
		} else if(this.state == GameState.Dead) {
			this.updatePlayTimer();
			var t = this.stateTimer / Game.DEAD_TIME;
			this.deathFx.update(dt,t);
			this.camera.targetX = this.level.heroSpawnX + 4;
			this.camera.targetY = this.level.heroSpawnY + 8;
			var targetPos = this.camera.getClampedPosition(this.level.getCameraBounds());
			if(t < .4) {
				t = 0.;
			} else {
				var x = (t - .4) / .6;
				t = -2. * x * x * x + 3. * x * x + 0. * x;
			}
			var x = t * targetPos.x + (1. - t) * this.prevCameraPos.x;
			var y = t * targetPos.y + (1. - t) * this.prevCameraPos.y;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var pos_x = x1;
			var pos_y = y1;
			this.camera.clampedTargetX = pos_x;
			this.camera.clampedTargetY = pos_y;
			this.camera.update(dt);
			if(this.stateTimer >= Game.DEAD_TIME) {
				this.retry();
			}
		}
		this.fx.update(dt);
		this.touchInput.afterUpdate();
		this.mouseInput.afterUpdate();
	}
	,updateConstantRate: function(dt) {
		if(this.state == GameState.Dead) {
			if(this.deathFx != null) {
				this.deathFx.updateConstantRate(dt);
			}
		}
		this.fx.updateConstantRate(dt);
		this.camera.updateConstantRate(dt);
		this.background.update(dt);
		var _this = this.timerText;
		_this.posChanged = true;
		_this.x = -this.world.x + 3;
		var _this = this.timerText;
		_this.posChanged = true;
		_this.y = -this.world.y + 1;
	}
	,levelComplete: function() {
		this.fx.gem();
		save_Save.gameData.data.completeLevel(this.levelId,this.playTimer);
		if(!save_Save.gameData.data.areAllLevelsCompleted()) {
			this.justCompletedGame = false;
		}
		this.updateRamp();
		this.set_state(GameState.TransitionOut);
		audio_Audio.stopMusic(audio_Audio.MUSIC_FADE_IN_TIME);
		audio_Audio.playMusic(Title.GROUP_MUSIC_NAMES[this.getLevelGroup()] + "Back",null,audio_Audio.MUSIC_FADE_OUT_TIME);
	}
	,updateRamp: function() {
		var rampTile = Assets.getTile("entities","ramp" + this.getLevelGroup());
		var rampTile1 = rampTile.innerTex;
		var x0 = Math.floor(rampTile.x);
		var y0 = Math.floor(rampTile.y);
		var width = Math.ceil(rampTile.width + rampTile.x) - Math.floor(rampTile.x);
		var height = Math.ceil(rampTile.height + rampTile.y) - Math.floor(rampTile.y);
		var b = new h2d_col_IBounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		this.ramp = rampTile1.capturePixels(0,0,b);
		return this.ramp;
	}
	,loadFirstLevel: function() {
		this.levelId = 1;
		this.level.loadLevelById(this.levelId);
	}
	,loadLastLevel: function() {
		this.levelId = 27;
	}
	,loadNextLevel: function() {
		if(this.level.loadLevelById(this.levelId + 1)) {
			this.levelId++;
		} else {
			this.loadFirstLevel();
		}
	}
	,loadPreviousLevel: function() {
		if(this.level.loadLevelById(this.levelId - 1)) {
			this.levelId--;
		} else {
			this.loadLastLevel();
		}
	}
	,loadLevelById: function(id) {
		this.levelId = id;
		this.level.loadLevelById(this.levelId);
	}
	,onLevelLoaded: function() {
		this.hero.spawn();
		var bounds = this.level.getCameraBounds();
		this.camera.setBounds(bounds);
		this.camera.setTarget(this.hero,true);
		this.background.loadLevel(this.levelId,bounds.xMax - bounds.xMin,bounds.yMax - bounds.yMin);
	}
	,retry: function() {
		this.set_state(GameState.Play);
		this.loadLevelById(this.levelId);
		this.camera.update(0);
		this.playTimer = 0;
		this.playerMoved = false;
		this.updatePlayTimer();
	}
	,onDeath: function(dx,dy) {
		this.set_state(GameState.Dead);
		if(this.deathFx != null) {
			this.deathFx.delete();
		}
		this.deathFx = new fx_Death(this.hero.x,this.hero.y,this.level.heroSpawnX,this.level.heroSpawnY,dx,dy);
		this.prevCameraPos = this.camera.getClampedPosition(this.level.getCameraBounds());
		this.camera.resetTarget();
		Main.inst.hitStop(.1);
	}
	,getLevelGroup: function(levelId) {
		if(levelId == null) {
			levelId = -1;
		}
		if(levelId == -1) {
			levelId = this.levelId;
		}
		return (levelId - 1) / 9 | 0;
	}
	,set_state: function(v) {
		this.state = v;
		this.stateTimer = 0.;
		if(this.state == GameState.TransitionOut) {
			this.winGraphics.set_visible(true);
			var _g = 0;
			var _g1 = entities_Gem.all;
			while(_g < _g1.length) {
				var g = _g1[_g];
				++_g;
				var _this = this.winGraphics;
				_this.posChanged = true;
				_this.x = g.anim.x;
				var _this1 = this.winGraphics;
				_this1.posChanged = true;
				_this1.y = g.anim.y;
			}
		} else {
			this.winGraphics.set_visible(false);
		}
		if(this.state != GameState.Dead && this.deathFx != null) {
			this.deathFx.delete();
			this.deathFx = null;
		}
		return v;
	}
	,updateTransitionOut: function(dt) {
		var _gthis = this;
		var drawRect = function(col,r) {
			var c = col & 16777215;
			var al = (col >>> 24) / 255.;
			_gthis.winGraphics.beginFill(c,al);
			var _this = _gthis.winGraphics;
			var y = -r;
			_this.flush();
			_this.addVertex(0,y,_this.curR,_this.curG,_this.curB,_this.curA,0 * _this.ma + y * _this.mc + _this.mx,0 * _this.mb + y * _this.md + _this.my);
			var _this = _gthis.winGraphics;
			_this.addVertex(r,0,_this.curR,_this.curG,_this.curB,_this.curA,r * _this.ma + 0 * _this.mc + _this.mx,r * _this.mb + 0 * _this.md + _this.my);
			var _this = _gthis.winGraphics;
			_this.addVertex(0,r,_this.curR,_this.curG,_this.curB,_this.curA,0 * _this.ma + r * _this.mc + _this.mx,0 * _this.mb + r * _this.md + _this.my);
			var _this = _gthis.winGraphics;
			var x = -r;
			_this.addVertex(x,0,_this.curR,_this.curG,_this.curB,_this.curA,x * _this.ma + 0 * _this.mc + _this.mx,x * _this.mb + 0 * _this.md + _this.my);
			var _this = _gthis.winGraphics;
			var y = -r;
			_this.addVertex(0,y,_this.curR,_this.curG,_this.curB,_this.curA,0 * _this.ma + y * _this.mc + _this.mx,0 * _this.mb + y * _this.md + _this.my);
			_gthis.winGraphics.endFill();
		};
		var endTime = Game.TRANSITION_OUT_TIME - .5;
		var t = this.stateTimer / endTime;
		var _g = 0;
		var _g1 = this.ramp.width;
		while(_g < _g1) {
			var i = _g++;
			var tt = i / this.ramp.width;
			var col = this.ramp.getPixel(i,0);
			var dt = t - tt;
			if(dt <= 0) {
				continue;
			}
			dt = 1. - Math.pow(1. - dt,2);
			var r = dt * 1.5 * 320;
			drawRect(col,r);
		}
	}
	,forceCompleteLevel: function() {
		var _g = 0;
		var _g1 = entities_Gem.all;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.hero.x = g.anim.x | 0;
			this.hero.y = g.anim.y | 0;
		}
	}
	,onPlayerMoved: function() {
		if(this.playerMoved) {
			return;
		}
		this.playerMoved = true;
	}
	,updatePlayTimer: function() {
		if(this.playerMoved) {
			this.playTimer++;
		}
		this.timerText.set_text(Game.formatTimer(this.playTimer));
	}
	,debugState: function(hero,boxes,borders) {
		if(borders == null) {
			borders = true;
		}
		if(boxes == null) {
			boxes = false;
		}
		if(hero == null) {
			hero = true;
		}
		haxe_Log.trace("START GAME STATE",{ fileName : "src/Game.hx", lineNumber : 341, className : "Game", methodName : "debugState"});
		if(hero) {
			var _g = 0;
			var _g1 = entities_Entity.all;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e.canPushBorders) {
					haxe_Log.trace(e,{ fileName : "src/Game.hx", lineNumber : 345, className : "Game", methodName : "debugState"});
				}
			}
		}
		if(boxes) {
			haxe_Log.trace("BOXES",{ fileName : "src/Game.hx", lineNumber : 350, className : "Game", methodName : "debugState"});
			var _g = 0;
			var _g1 = entities_Entity.all;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(!e.canPushBorders) {
					haxe_Log.trace(e,{ fileName : "src/Game.hx", lineNumber : 353, className : "Game", methodName : "debugState"});
				}
			}
		}
		if(borders) {
			haxe_Log.trace("BORDERS",{ fileName : "src/Game.hx", lineNumber : 358, className : "Game", methodName : "debugState"});
			var _g = 0;
			var _g1 = entities_Border.all;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				haxe_Log.trace(b,{ fileName : "src/Game.hx", lineNumber : 360, className : "Game", methodName : "debugState"});
			}
		}
		haxe_Log.trace("END GAME STATE",{ fileName : "src/Game.hx", lineNumber : 363, className : "Game", methodName : "debugState"});
	}
	,__class__: Game
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
var LevelRender = function(level) {
	level.load();
	var _this = Reflect.field(level,"l_Decoration");
	var target = null;
	if(target == null) {
		var _this1 = _this.untypedProject._untypedTilesets.h[_this.tilesetUid];
		var target1;
		if(_this1._cachedAtlasTile != null) {
			target1 = _this1._cachedAtlasTile;
		} else {
			var bytes = _this1.untypedProject.getAsset(_this1.relPath);
			_this1._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
			if(_this1._cachedAtlasTile == null) {
				_this1._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this1.pxWid,_this1.pxHei);
			}
			target1 = _this1._cachedAtlasTile;
		}
		target = new h2d_TileGroup(target1);
	}
	var _g = 0;
	var _g1 = _this.cHei;
	while(_g < _g1) {
		var cy = _g++;
		var _g2 = 0;
		var _g3 = _this.cWid;
		while(_g2 < _g3) {
			var cx = _g2++;
			if(_this.tiles.h.hasOwnProperty(cx + cy * _this.cWid)) {
				var _g4 = 0;
				var _g5 = cx >= 0 && cx < _this.cWid && cy >= 0 && cy < _this.cHei && _this.tiles.h.hasOwnProperty(cx + cy * _this.cWid) ? _this.tiles.h[cx + cy * _this.cWid] : [];
				while(_g4 < _g5.length) {
					var tile = _g5[_g4];
					++_g4;
					var x = cx * _this.gridSize + _this.pxTotalOffsetX;
					var y = cy * _this.gridSize + _this.pxTotalOffsetY;
					var _this1 = _this.untypedProject._untypedTilesets.h[_this.tilesetUid];
					var tileId = tile.tileId;
					var flipBits = tile.flipBits;
					if(flipBits == null) {
						flipBits = 0;
					}
					var t;
					if(tileId < 0) {
						t = null;
					} else {
						var atlas;
						if(_this1._cachedAtlasTile != null) {
							atlas = _this1._cachedAtlasTile;
						} else {
							var bytes = _this1.untypedProject.getAsset(_this1.relPath);
							_this1._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
							if(_this1._cachedAtlasTile == null) {
								_this1._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this1.pxWid,_this1.pxHei);
							}
							atlas = _this1._cachedAtlasTile;
						}
						var t1 = atlas.sub((tileId - (tileId / Math.ceil(_this1.pxWid / _this1.tileGridSize) | 0) * Math.ceil(_this1.pxWid / _this1.tileGridSize)) * _this1.tileGridSize,(tileId / Math.ceil(_this1.pxWid / _this1.tileGridSize) | 0) * _this1.tileGridSize,_this1.tileGridSize,_this1.tileGridSize);
						switch(flipBits) {
						case 0:
							t = t1;
							break;
						case 1:
							t1.flipX();
							var px = 0;
							var py = 0;
							if(py == null) {
								py = 0.5;
							}
							if(px == null) {
								px = 0.5;
							}
							t1.dx = -(px * t1.width);
							t1.dy = -(py * t1.height);
							t = t1;
							break;
						case 2:
							t1.flipY();
							var px1 = 0;
							var py1 = 0;
							if(py1 == null) {
								py1 = 0.5;
							}
							if(px1 == null) {
								px1 = 0.5;
							}
							t1.dx = -(px1 * t1.width);
							t1.dy = -(py1 * t1.height);
							t = t1;
							break;
						case 3:
							t1.flipX();
							t1.flipY();
							var px2 = 0;
							var py2 = 0;
							if(py2 == null) {
								py2 = 0.5;
							}
							if(px2 == null) {
								px2 = 0.5;
							}
							t1.dx = -(px2 * t1.width);
							t1.dy = -(py2 * t1.height);
							t = t1;
							break;
						default:
							ldtk_Project.error("Unsupported flipBits value");
							t = null;
						}
					}
					target.content.add(x,y,target.curColor.x,target.curColor.y,target.curColor.z,target.curColor.w,t);
				}
			}
		}
	}
	this.decoration = target;
	Game.inst.world.add(this.decoration,Game.LAYER_DECORATION);
	level.load();
	var _this = Reflect.field(level,"l_Walls");
	var target = null;
	if(target == null) {
		var _this1 = _this.untypedProject._untypedTilesets.h[_this.tilesetUid];
		var target1;
		if(_this1._cachedAtlasTile != null) {
			target1 = _this1._cachedAtlasTile;
		} else {
			var bytes = _this1.untypedProject.getAsset(_this1.relPath);
			_this1._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
			if(_this1._cachedAtlasTile == null) {
				_this1._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this1.pxWid,_this1.pxHei);
			}
			target1 = _this1._cachedAtlasTile;
		}
		target = new h2d_TileGroup(target1);
	}
	var _g = 0;
	var _g1 = _this.autoTiles;
	while(_g < _g1.length) {
		var autoTile = _g1[_g];
		++_g;
		var x = autoTile.renderX + _this.pxTotalOffsetX;
		var y = autoTile.renderY + _this.pxTotalOffsetY;
		var a = autoTile.alpha;
		var _this1 = _this.untypedProject._untypedTilesets.h[_this.tilesetUid];
		var t;
		if(autoTile.tileId < 0) {
			t = null;
		} else {
			var tileId = autoTile.tileId;
			var flipBits = autoTile.flips;
			if(flipBits == null) {
				flipBits = 0;
			}
			if(tileId < 0) {
				t = null;
			} else {
				var atlas;
				if(_this1._cachedAtlasTile != null) {
					atlas = _this1._cachedAtlasTile;
				} else {
					var bytes = _this1.untypedProject.getAsset(_this1.relPath);
					_this1._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
					if(_this1._cachedAtlasTile == null) {
						_this1._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this1.pxWid,_this1.pxHei);
					}
					atlas = _this1._cachedAtlasTile;
				}
				var t1 = atlas.sub((tileId - (tileId / Math.ceil(_this1.pxWid / _this1.tileGridSize) | 0) * Math.ceil(_this1.pxWid / _this1.tileGridSize)) * _this1.tileGridSize,(tileId / Math.ceil(_this1.pxWid / _this1.tileGridSize) | 0) * _this1.tileGridSize,_this1.tileGridSize,_this1.tileGridSize);
				switch(flipBits) {
				case 0:
					t = t1;
					break;
				case 1:
					t1.flipX();
					var px = 0;
					var py = 0;
					if(py == null) {
						py = 0.5;
					}
					if(px == null) {
						px = 0.5;
					}
					t1.dx = -(px * t1.width);
					t1.dy = -(py * t1.height);
					t = t1;
					break;
				case 2:
					t1.flipY();
					var px1 = 0;
					var py1 = 0;
					if(py1 == null) {
						py1 = 0.5;
					}
					if(px1 == null) {
						px1 = 0.5;
					}
					t1.dx = -(px1 * t1.width);
					t1.dy = -(py1 * t1.height);
					t = t1;
					break;
				case 3:
					t1.flipX();
					t1.flipY();
					var px2 = 0;
					var py2 = 0;
					if(py2 == null) {
						py2 = 0.5;
					}
					if(px2 == null) {
						px2 = 0.5;
					}
					t1.dx = -(px2 * t1.width);
					t1.dy = -(py2 * t1.height);
					t = t1;
					break;
				default:
					ldtk_Project.error("Unsupported flipBits value");
					t = null;
				}
			}
		}
		target.content.add(x,y,target.curColor.x,target.curColor.y,target.curColor.z,a,t);
	}
	this.walls = target;
	Game.inst.world.add(this.walls,Game.LAYER_WALLS);
	level.load();
	var _this = Reflect.field(level,"l_BackWalls");
	var target = null;
	if(target == null) {
		var _this1 = _this.untypedProject._untypedTilesets.h[_this.tilesetUid];
		var target1;
		if(_this1._cachedAtlasTile != null) {
			target1 = _this1._cachedAtlasTile;
		} else {
			var bytes = _this1.untypedProject.getAsset(_this1.relPath);
			_this1._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
			if(_this1._cachedAtlasTile == null) {
				_this1._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this1.pxWid,_this1.pxHei);
			}
			target1 = _this1._cachedAtlasTile;
		}
		target = new h2d_TileGroup(target1);
	}
	var _g = 0;
	var _g1 = _this.autoTiles;
	while(_g < _g1.length) {
		var autoTile = _g1[_g];
		++_g;
		var x = autoTile.renderX + _this.pxTotalOffsetX;
		var y = autoTile.renderY + _this.pxTotalOffsetY;
		var a = autoTile.alpha;
		var _this1 = _this.untypedProject._untypedTilesets.h[_this.tilesetUid];
		var t;
		if(autoTile.tileId < 0) {
			t = null;
		} else {
			var tileId = autoTile.tileId;
			var flipBits = autoTile.flips;
			if(flipBits == null) {
				flipBits = 0;
			}
			if(tileId < 0) {
				t = null;
			} else {
				var atlas;
				if(_this1._cachedAtlasTile != null) {
					atlas = _this1._cachedAtlasTile;
				} else {
					var bytes = _this1.untypedProject.getAsset(_this1.relPath);
					_this1._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
					if(_this1._cachedAtlasTile == null) {
						_this1._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this1.pxWid,_this1.pxHei);
					}
					atlas = _this1._cachedAtlasTile;
				}
				var t1 = atlas.sub((tileId - (tileId / Math.ceil(_this1.pxWid / _this1.tileGridSize) | 0) * Math.ceil(_this1.pxWid / _this1.tileGridSize)) * _this1.tileGridSize,(tileId / Math.ceil(_this1.pxWid / _this1.tileGridSize) | 0) * _this1.tileGridSize,_this1.tileGridSize,_this1.tileGridSize);
				switch(flipBits) {
				case 0:
					t = t1;
					break;
				case 1:
					t1.flipX();
					var px = 0;
					var py = 0;
					if(py == null) {
						py = 0.5;
					}
					if(px == null) {
						px = 0.5;
					}
					t1.dx = -(px * t1.width);
					t1.dy = -(py * t1.height);
					t = t1;
					break;
				case 2:
					t1.flipY();
					var px1 = 0;
					var py1 = 0;
					if(py1 == null) {
						py1 = 0.5;
					}
					if(px1 == null) {
						px1 = 0.5;
					}
					t1.dx = -(px1 * t1.width);
					t1.dy = -(py1 * t1.height);
					t = t1;
					break;
				case 3:
					t1.flipX();
					t1.flipY();
					var px2 = 0;
					var py2 = 0;
					if(py2 == null) {
						py2 = 0.5;
					}
					if(px2 == null) {
						px2 = 0.5;
					}
					t1.dx = -(px2 * t1.width);
					t1.dy = -(py2 * t1.height);
					t = t1;
					break;
				default:
					ldtk_Project.error("Unsupported flipBits value");
					t = null;
				}
			}
		}
		target.content.add(x,y,target.curColor.x,target.curColor.y,target.curColor.z,a,t);
	}
	this.backWalls = target;
	Game.inst.world.add(this.backWalls,Game.LAYER_BACK_WALLS);
};
$hxClasses["LevelRender"] = LevelRender;
LevelRender.__name__ = "LevelRender";
LevelRender.prototype = {
	'delete': function() {
		var _this = this.decoration;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var _this = this.walls;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var _this = this.backWalls;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,__class__: LevelRender
};
var Level = function() {
	this.render = null;
	this.level = null;
	this.hasTightHoles = false;
	this.backgroundOffsetY = 0.;
	this.heroSpawnY = 0;
	this.heroSpawnX = 0;
};
$hxClasses["Level"] = Level;
Level.__name__ = "Level";
Level.init = function() {
	Level.project = new assets_LevelProject();
	Level.tileIdToCollision = new Array(1024);
	var _g = 0;
	while(_g < 1024) {
		var tileId = _g++;
		var tags = Level.project.all_tilesets.Tileset.getAllTags(tileId);
		if(tags.length != 1) {
			Level.tileIdToCollision[tileId] = assets_Enum_$Collision.None;
		} else {
			Level.tileIdToCollision[tileId] = tags[0];
		}
	}
};
Level.prototype = {
	'delete': function() {
		if(this.render != null) {
			this.render.delete();
		}
	}
	,clear: function() {
		if(this.render != null) {
			this.render.delete();
		}
		entities_Entity.deleteAll();
		entities_Solid.deleteAll();
		entities_Gem.deleteAll();
		entities_Border.deleteAll();
	}
	,loadLevelById: function(id) {
		var levelName = "Main_" + id;
		var world = Level.project.all_worlds.Default;
		var level = world.getLevel(null,levelName);
		if(level == null) {
			return false;
		}
		this.loadLevel(level);
		return true;
	}
	,loadLevel: function(newLevel) {
		this.clear();
		this.level = newLevel;
		var _this = this.level;
		_this.load();
		this.widthTiles = Reflect.field(_this,"l_Walls").cWid;
		var _this = this.level;
		_this.load();
		this.heightTiles = Reflect.field(_this,"l_Walls").cHei;
		this.widthPixels = this.widthTiles * 8;
		this.heightPixels = this.heightTiles * 8;
		this.render = new LevelRender(this.level);
		this.backgroundOffsetY = this.level.f_BackgroundOffsetY;
		this.hasTightHoles = this.level.f_HasTightHoles;
		this.loadCollisions();
		this.loadEntities();
		Game.inst.onLevelLoaded();
		haxe_Log.trace("Solid count: " + entities_Solid.all.length,{ fileName : "src/Level.hx", lineNumber : 110, className : "Level", methodName : "loadLevel"});
		haxe_Log.trace("Entity count: " + entities_Entity.all.length,{ fileName : "src/Level.hx", lineNumber : 111, className : "Level", methodName : "loadLevel"});
	}
	,loadEntities: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.heightTiles;
		while(_g < _g1) {
			var i = _g++;
			var curTag = this.levelCollisions[i][0];
			var l = 0;
			var _g2 = 0;
			var _g3 = this.widthTiles;
			while(_g2 < _g3) {
				var r = _g2++;
				var tag = this.levelCollisions[i][r];
				if(tag != curTag) {
					if(curTag == assets_Enum_$Collision.Full || curTag == assets_Enum_$Collision.PlatformLeft || curTag == assets_Enum_$Collision.PlatformRight || curTag == assets_Enum_$Collision.PlatformUp || curTag == assets_Enum_$Collision.PlatformDown) {
						var x = l * 8;
						var width = (r - l) * 8;
						if(x == 0) {
							x -= 8;
							width += 8;
						}
						if(x + width == _gthis.widthPixels) {
							width += 8;
						}
						new entities_Solid(x,i * 8,width,8,curTag);
					}
					curTag = tag;
					l = r;
				}
			}
			if(curTag == assets_Enum_$Collision.Full || curTag == assets_Enum_$Collision.PlatformLeft || curTag == assets_Enum_$Collision.PlatformRight || curTag == assets_Enum_$Collision.PlatformUp || curTag == assets_Enum_$Collision.PlatformDown) {
				var x1 = l * 8;
				var width1 = (this.widthTiles - l) * 8;
				if(x1 == 0) {
					x1 -= 8;
					width1 += 8;
				}
				if(x1 + width1 == _gthis.widthPixels) {
					width1 += 8;
				}
				new entities_Solid(x1,i * 8,width1,8,curTag);
			}
		}
		var x = 0;
		var width = this.widthPixels;
		if(x == 0) {
			x -= 8;
			width += 8;
		}
		if(x + width == _gthis.widthPixels) {
			width += 8;
		}
		new entities_Solid(x,-22,width,8,assets_Enum_$Collision.Full);
		var _g = 0;
		var _this = this.level;
		_this.load();
		var _g1 = Reflect.field(_this,"l_Entities").all_Border;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var x0 = b.cx * 8;
			var y0 = b.cy * 8;
			var width = b.width;
			var height = b.height;
			var b1 = new h2d_col_IBounds();
			b1.xMin = x0;
			b1.yMin = y0;
			b1.xMax = x0 + width;
			b1.yMax = y0 + height;
			new entities_Border(b1);
		}
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.updateWalls();
			b.render();
			b.renderMask();
			b.update(0);
		}
		var _g = 0;
		var _this = this.level;
		_this.load();
		var _g1 = Reflect.field(_this,"l_Entities").all_Hero;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			this.heroSpawnX = e.cx * 8;
			this.heroSpawnY = e.cy * 8;
		}
		Game.inst.hero = new entities_Hero();
		var _g = 0;
		var _this = this.level;
		_this.load();
		var _g1 = Reflect.field(_this,"l_Entities").all_Box;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			new entities_Box(b.cx * 8,b.cy * 8,b.width,b.height);
		}
		var _g = 0;
		var _this = this.level;
		_this.load();
		var _g1 = Reflect.field(_this,"l_Entities").all_Gem;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			new entities_Gem(Game.inst.getLevelGroup(),g.pixelX,g.pixelY);
		}
	}
	,loadCollisions: function() {
		this.levelCollisions = new Array(this.heightTiles);
		var _g = 0;
		var _g1 = this.heightTiles;
		while(_g < _g1) {
			var y = _g++;
			this.levelCollisions[y] = new Array(this.widthTiles);
			var _g2 = 0;
			var _g3 = this.widthTiles;
			while(_g2 < _g3) {
				var x = _g2++;
				this.levelCollisions[y][x] = assets_Enum_$Collision.None;
			}
		}
		var _g = 0;
		var _this = this.level;
		_this.load();
		var _g1 = Reflect.field(_this,"l_Walls").autoTiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			var tx = tile.renderX / 8 | 0;
			var ty = tile.renderY / 8 | 0;
			var tag = Level.tileIdToCollision[tile.tileId];
			this.levelCollisions[ty][tx] = tag;
		}
	}
	,getCameraBounds: function() {
		var width = this.widthPixels;
		var height = this.heightPixels;
		var b = new h2d_col_IBounds();
		b.xMin = 0;
		b.yMin = 0;
		b.xMax = width;
		b.yMax = height;
		return b;
	}
	,entityTouchesDeath: function(e) {
		if(e.x + e.hitbox.xMax < 0) {
			return { dx : -1, dy : 0};
		} else if(e.x + e.hitbox.xMin > this.widthPixels) {
			return { dx : 1, dy : 0};
		} else if(e.y + e.hitbox.yMin > this.heightPixels) {
			return { dx : 0, dy : 1};
		}
		var margin = 2;
		var spikeLength = 3;
		var x0 = e.x + e.hitbox.xMin + margin;
		var y0 = e.y + e.hitbox.yMin + margin;
		var _this = e.hitbox;
		var _this1 = e.hitbox;
		var bounds_xMin = 2147483647;
		var bounds_yMin = 2147483647;
		var bounds_xMax = -2147483648;
		var bounds_yMax = -2147483648;
		bounds_xMin = x0;
		bounds_yMin = y0;
		bounds_xMax = x0 + (_this.xMax - _this.xMin - margin * 2);
		bounds_yMax = y0 + (_this1.yMax - _this1.yMin - margin * 2);
		var tx1 = bounds_xMin / 8 | 0;
		var ty1 = bounds_yMin / 8 | 0;
		var tx2 = bounds_xMax / 8 | 0;
		var ty2 = bounds_yMax / 8 | 0;
		var _g = tx1;
		var _g1 = tx2 + 1;
		while(_g < _g1) {
			var tx = _g++;
			if(tx < 0 || tx >= this.widthTiles) {
				continue;
			}
			var _g2 = ty1;
			var _g3 = ty2 + 1;
			while(_g2 < _g3) {
				var ty = _g2++;
				if(ty < 0 || ty >= this.heightTiles) {
					continue;
				}
				var x0 = tx * 8;
				var y0 = ty * 8;
				var boundsUp_xMin = 2147483647;
				var boundsUp_yMin = 2147483647;
				var boundsUp_xMax = -2147483648;
				var boundsUp_yMax = -2147483648;
				boundsUp_xMin = x0;
				boundsUp_yMin = y0;
				boundsUp_xMax = x0 + 8;
				boundsUp_yMax = y0 + spikeLength;
				var x01 = tx * 8;
				var y01 = ty * 8 + 8 - spikeLength;
				var boundsDown_xMin = 2147483647;
				var boundsDown_yMin = 2147483647;
				var boundsDown_xMax = -2147483648;
				var boundsDown_yMax = -2147483648;
				boundsDown_xMin = x01;
				boundsDown_yMin = y01;
				boundsDown_xMax = x01 + 8;
				boundsDown_yMax = y01 + spikeLength;
				var x02 = tx * 8;
				var y02 = ty * 8;
				var boundsLeft_xMin = 2147483647;
				var boundsLeft_yMin = 2147483647;
				var boundsLeft_xMax = -2147483648;
				var boundsLeft_yMax = -2147483648;
				boundsLeft_xMin = x02;
				boundsLeft_yMin = y02;
				boundsLeft_xMax = x02 + spikeLength;
				boundsLeft_yMax = y02 + 8;
				var x03 = tx * 8 + 8 - spikeLength;
				var y03 = ty * 8;
				var boundsRight_xMin = 2147483647;
				var boundsRight_yMin = 2147483647;
				var boundsRight_xMax = -2147483648;
				var boundsRight_yMax = -2147483648;
				boundsRight_xMin = x03;
				boundsRight_yMin = y03;
				boundsRight_xMax = x03 + spikeLength;
				boundsRight_yMax = y03 + 8;
				var col = this.levelCollisions[ty][tx];
				if(col == assets_Enum_$Collision.SpikeU && !(boundsUp_xMin > bounds_xMax || boundsUp_yMin > bounds_yMax || boundsUp_xMax < bounds_xMin || boundsUp_yMax < bounds_yMin)) {
					return { dx : 0, dy : -1};
				} else if(col == assets_Enum_$Collision.SpikeD && !(boundsDown_xMin > bounds_xMax || boundsDown_yMin > bounds_yMax || boundsDown_xMax < bounds_xMin || boundsDown_yMax < bounds_yMin)) {
					return { dx : 0, dy : 1};
				} else if(col == assets_Enum_$Collision.SpikeL && !(boundsLeft_xMin > bounds_xMax || boundsLeft_yMin > bounds_yMax || boundsLeft_xMax < bounds_xMin || boundsLeft_yMax < bounds_yMin)) {
					return { dx : -1, dy : 0};
				} else if(col == assets_Enum_$Collision.SpikeR && !(boundsRight_xMin > bounds_xMax || boundsRight_yMin > bounds_yMax || boundsRight_xMax < bounds_xMin || boundsRight_yMax < bounds_yMin)) {
					return { dx : 1, dy : 0};
				} else if(col == assets_Enum_$Collision.SpikeUL && (!(boundsUp_xMin > bounds_xMax || boundsUp_yMin > bounds_yMax || boundsUp_xMax < bounds_xMin || boundsUp_yMax < bounds_yMin) || !(boundsLeft_xMin > bounds_xMax || boundsLeft_yMin > bounds_yMax || boundsLeft_xMax < bounds_xMin || boundsLeft_yMax < bounds_yMin))) {
					return { dx : -1, dy : -1};
				} else if(col == assets_Enum_$Collision.SpikeUR && (!(boundsUp_xMin > bounds_xMax || boundsUp_yMin > bounds_yMax || boundsUp_xMax < bounds_xMin || boundsUp_yMax < bounds_yMin) || !(boundsRight_xMin > bounds_xMax || boundsRight_yMin > bounds_yMax || boundsRight_xMax < bounds_xMin || boundsRight_yMax < bounds_yMin))) {
					return { dx : 1, dy : -1};
				} else if(col == assets_Enum_$Collision.SpikeDL && (!(boundsDown_xMin > bounds_xMax || boundsDown_yMin > bounds_yMax || boundsDown_xMax < bounds_xMin || boundsDown_yMax < bounds_yMin) || !(boundsLeft_xMin > bounds_xMax || boundsLeft_yMin > bounds_yMax || boundsLeft_xMax < bounds_xMin || boundsLeft_yMax < bounds_yMin))) {
					return { dx : -1, dy : 1};
				} else if(col == assets_Enum_$Collision.SpikeDR && (!(boundsDown_xMin > bounds_xMax || boundsDown_yMin > bounds_yMax || boundsDown_xMax < bounds_xMin || boundsDown_yMax < bounds_yMin) || !(boundsRight_xMin > bounds_xMax || boundsRight_yMin > bounds_yMax || boundsRight_xMax < bounds_xMin || boundsRight_yMax < bounds_yMin))) {
					return { dx : 1, dy : 1};
				}
			}
		}
		return { dx : 0, dy : 0};
	}
	,__class__: Level
};
var h2d_Flow = function(parent) {
	this.realMinHeight = -1;
	this.realMinWidth = -1;
	this.realMaxHeight = -1;
	this.realMaxWidth = -1;
	this.constraintHeight = -1;
	this.constraintWidth = -1;
	this.contentHeight = 0.;
	this.contentWidth = 0.;
	this.calculatedHeight = 0.;
	this.calculatedWidth = 0.;
	this.properties = [];
	this.scrollPosY = 0.;
	this.scrollWheelSpeed = 30.;
	this.fillHeight = false;
	this.fillWidth = false;
	this.reverse = false;
	this.multiline = false;
	this.isInline = true;
	this.layout = h2d_FlowLayout.Horizontal;
	this.borderBottom = 0;
	this.borderTop = 0;
	this.borderRight = 0;
	this.borderLeft = 0;
	this.verticalSpacing = 0;
	this.horizontalSpacing = 0;
	this.paddingBottom = 0;
	this.paddingTop = 0;
	this.paddingRight = 0;
	this.paddingLeft = 0;
	this.overflow = h2d_FlowOverflow.Expand;
	this.needReflow = true;
	this.tmpBounds = new h2d_col_Bounds();
	h2d_Object.call(this,parent);
};
$hxClasses["h2d.Flow"] = h2d_Flow;
h2d_Flow.__name__ = "h2d.Flow";
h2d_Flow.__super__ = h2d_Object;
h2d_Flow.prototype = $extend(h2d_Object.prototype,{
	getProperties: function(e) {
		this.set_needReflow(true);
		return this.properties[this.getChildIndex(e)];
	}
	,flowCeil: function(f) {
		return Math.ceil(f - 1e-10);
	}
	,flowFloor: function(f) {
		return Math.floor(f + 1e-10);
	}
	,set_layout: function(v) {
		if(this.layout == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.layout = v == null ? h2d_FlowLayout.Horizontal : v;
	}
	,get_isVertical: function() {
		return this.layout == h2d_FlowLayout.Vertical;
	}
	,set_isVertical: function(v) {
		this.set_layout(v ? h2d_FlowLayout.Vertical : h2d_FlowLayout.Horizontal);
		return v;
	}
	,set_horizontalAlign: function(v) {
		if(this.horizontalAlign == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.horizontalAlign = v;
	}
	,set_debug: function(v) {
		if(this.debug == v) {
			return v;
		}
		this.set_needReflow(true);
		if(v) {
			this.debugGraphics = new h2d_Graphics(this);
			this.getProperties(this.debugGraphics).set_isAbsolute(true);
		} else {
			var _this = this.debugGraphics;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.debugGraphics = null;
		}
		return this.debug = v;
	}
	,set_verticalAlign: function(v) {
		if(this.verticalAlign == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.verticalAlign = v;
	}
	,makeScrollBar: function() {
		var bar = new h2d_Flow();
		bar.set_backgroundTile(h2d_Tile.fromColor(0));
		bar.alpha = 0.5;
		return bar;
	}
	,makeScrollBarCursor: function() {
		var cursor = new h2d_Flow();
		cursor.set_minWidth(10);
		cursor.set_minHeight(20);
		cursor.set_backgroundTile(h2d_Tile.fromColor(-1));
		return cursor;
	}
	,set_overflow: function(v) {
		var _gthis = this;
		if(this.overflow == v) {
			return v;
		}
		this.set_needReflow(true);
		if(v == h2d_FlowOverflow.Scroll) {
			this.set_enableInteractive(true);
			if(this.scrollBar == null) {
				this.scrollBar = this.makeScrollBar();
				this.addChild(this.scrollBar);
				this.scrollBar.set_verticalAlign(h2d_FlowAlign.Top);
				this.scrollBar.set_enableInteractive(true);
				var setCursor = function(e) {
					var cursorY = e.relY - _gthis.scrollBarCursor.minHeight * 0.5;
					if(cursorY < 0) {
						cursorY = 0;
					}
					_gthis.set_scrollPosY(cursorY / (_gthis.scrollBar.minHeight - _gthis.scrollBarCursor.minHeight) * (_gthis.contentHeight - _gthis.calculatedHeight));
				};
				var pushed = false;
				this.scrollBar.interactive.set_cursor(hxd_Cursor.Button);
				this.scrollBar.interactive.onPush = function(e) {
					var scene = _gthis.getScene();
					if(scene == null) {
						return;
					}
					_gthis.scrollBar.interactive.startCapture(function(e) {
						switch(e.kind._hx_index) {
						case 0:case 2:
							setCursor(e);
							break;
						case 1:case 10:
							scene.stopCapture();
							break;
						default:
						}
						e.propagate = false;
					});
					setCursor(e);
				};
				var p = this.getProperties(this.scrollBar);
				p.set_isAbsolute(true);
				p.horizontalAlign = h2d_FlowAlign.Right;
				p.verticalAlign = h2d_FlowAlign.Top;
				this.scrollBarCursor = this.makeScrollBarCursor();
				this.scrollBar.addChild(this.scrollBarCursor);
			}
		} else if(this.scrollBar != null) {
			var _this = this.scrollBar;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.scrollBar = null;
			this.scrollBarCursor = null;
		}
		return this.overflow = v;
	}
	,set_multiline: function(v) {
		if(this.multiline == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.multiline = v;
	}
	,set_reverse: function(v) {
		if(this.reverse == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.reverse = v;
	}
	,set_needReflow: function(v) {
		if(this.needReflow == v) {
			return v;
		}
		if(v) {
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
		return this.needReflow = v;
	}
	,set_lineHeight: function(v) {
		if(this.lineHeight == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.lineHeight = v;
	}
	,set_colWidth: function(v) {
		if(this.colWidth == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.colWidth = v;
	}
	,set_padding: function(v) {
		this.set_paddingLeft(v);
		this.set_paddingTop(v);
		this.set_paddingRight(v);
		this.set_paddingBottom(v);
		return v;
	}
	,set_scrollPosY: function(v) {
		if(this.needReflow) {
			this.reflow();
		}
		if(v < 0) {
			v = 0;
		}
		if(v > this.contentHeight - this.calculatedHeight) {
			v = this.contentHeight - this.calculatedHeight;
		}
		if(this.scrollPosY == v) {
			return v;
		}
		var delta = (v | 0) - (this.scrollPosY | 0);
		var i = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var p = this.properties[i++];
			if(p.isAbsolute) {
				continue;
			}
			c.posChanged = true;
			c.y -= delta;
		}
		this.scrollPosY = v;
		this.updateScrollCursor();
		return v;
	}
	,updateScrollCursor: function() {
		if(this.scrollBarCursor == null) {
			return;
		}
		var prev = this.needReflow;
		var p = this.scrollBar.getProperties(this.scrollBarCursor);
		p.paddingTop = this.scrollPosY * (this.calculatedHeight - this.scrollBarCursor.minHeight) / (this.contentHeight - this.calculatedHeight) | 0;
		this.set_needReflow(prev);
	}
	,set_paddingHorizontal: function(v) {
		this.set_paddingLeft(v);
		this.set_paddingRight(v);
		return v;
	}
	,set_paddingVertical: function(v) {
		this.set_paddingTop(v);
		this.set_paddingBottom(v);
		return v;
	}
	,get_outerWidth: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedWidth - 1e-10);
	}
	,get_outerHeight: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedHeight - 1e-10);
	}
	,get_innerWidth: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedWidth - 1e-10) - (this.paddingLeft + this.paddingRight);
	}
	,get_innerHeight: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedHeight - 1e-10) - (this.paddingTop + this.paddingBottom);
	}
	,set_paddingLeft: function(v) {
		if(this.paddingLeft == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingLeft = v;
	}
	,set_paddingRight: function(v) {
		if(this.paddingRight == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingRight = v;
	}
	,set_paddingTop: function(v) {
		if(this.paddingTop == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingTop = v;
	}
	,set_paddingBottom: function(v) {
		if(this.paddingBottom == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingBottom = v;
	}
	,set_fillWidth: function(v) {
		if(this.fillWidth == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.fillWidth = v;
	}
	,set_fillHeight: function(v) {
		if(this.fillHeight == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.fillHeight = v;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.constraintHeight = height;
		this.isConstraint = true;
		this.updateConstraint();
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		this.isConstraint = false;
		this.constraintWidth = -1;
		this.constraintHeight = -1;
		this.updateConstraint();
	}
	,contentChanged: function(s) {
		while(s.parent != this) s = s.parent;
		var p = this.getProperties(s);
		if(p != null && p.isAbsolute) {
			return;
		}
		this.set_needReflow(true);
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,addSpacing: function(v) {
		var last = this.properties.length - 1;
		while(last >= 0 && this.properties[last].isAbsolute) --last;
		switch(this.layout._hx_index) {
		case 0:
			if(last >= 0) {
				this.properties[last].paddingRight += v;
			} else {
				this.set_paddingLeft(this.paddingLeft + v);
			}
			break;
		case 1:
			if(last >= 0) {
				this.properties[last].paddingBottom += v;
			} else {
				this.set_paddingTop(this.paddingTop + v);
			}
			break;
		case 2:
			break;
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.needReflow) {
			this.reflow();
		}
		if(forSize) {
			if(!this.isInline) {
				h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,true);
			}
			if(this.calculatedWidth != 0) {
				if(this.posChanged) {
					this.calcAbsPos();
					var _g = 0;
					var _g1 = this.children;
					while(_g < _g1.length) {
						var c = _g1[_g];
						++_g;
						c.posChanged = true;
					}
					this.posChanged = false;
				}
				this.addBounds(relativeTo,out,0,0,this.calculatedWidth,this.calculatedHeight);
			}
		} else {
			h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
	}
	,addChildAt: function(s,pos) {
		if(this.background != null) {
			++pos;
		}
		if(this.interactive != null) {
			++pos;
		}
		if(this.scrollBar != null && pos == this.children.length) {
			--pos;
		}
		var fp = this.getProperties(s);
		h2d_Object.prototype.addChildAt.call(this,s,pos);
		if(fp == null) {
			fp = new h2d_FlowProperties(s);
		} else {
			HxOverrides.remove(this.properties,fp);
		}
		this.properties.splice(pos,0,fp);
		this.set_needReflow(true);
		s.setParentContainer(this);
	}
	,removeChild: function(s) {
		var index = this.getChildIndex(s);
		h2d_Object.prototype.removeChild.call(this,s);
		if(index >= 0) {
			this.set_needReflow(true);
			this.properties.splice(index,1);
			s.constraintSize(-1,-1);
		}
		if(s != null) {
			if(s == this.background) {
				this.set_backgroundTile(null);
			}
			if(s == this.interactive) {
				this.set_enableInteractive(false);
			}
		}
	}
	,removeChildren: function() {
		var k = 0;
		while(this.children.length > k) {
			var c = this.getChildAt(k);
			if(c == this.background || c == this.interactive || c == this.debugGraphics || c == this.scrollBar) {
				++k;
			} else {
				this.removeChild(c);
			}
		}
	}
	,sync: function(ctx) {
		if(!this.isConstraint && (this.fillWidth || this.fillHeight)) {
			var scene = ctx.scene;
			var cw = this.fillWidth ? scene.width : -1;
			var ch = this.fillHeight ? scene.height : -1;
			if(cw != this.constraintWidth || ch != this.constraintHeight) {
				this.set_needReflow(true);
			}
		}
		if(this.needReflow) {
			this.reflow();
		}
		h2d_Object.prototype.sync.call(this,ctx);
	}
	,drawRec: function(ctx) {
		if(this.overflow == h2d_FlowOverflow.Hidden || this.overflow == h2d_FlowOverflow.Scroll) {
			if(this.posChanged) {
				this.calcAbsPos();
				var _g = 0;
				var _g1 = this.children;
				while(_g < _g1.length) {
					var c = _g1[_g];
					++_g;
					c.posChanged = true;
				}
				this.posChanged = false;
			}
			h2d_Mask.maskWith(ctx,this,Math.ceil(this.calculatedWidth - 1e-10),Math.ceil(this.calculatedHeight - 1e-10),0,0);
			h2d_Object.prototype.drawRec.call(this,ctx);
			h2d_Mask.unmask(ctx);
		} else {
			h2d_Object.prototype.drawRec.call(this,ctx);
		}
	}
	,set_maxWidth: function(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	,set_maxHeight: function(h) {
		if(this.maxHeight == h) {
			return h;
		}
		this.maxHeight = h;
		this.updateConstraint();
		return h;
	}
	,updateConstraint: function() {
		var oldW = this.realMaxWidth;
		var oldH = this.realMaxHeight;
		var tmp;
		if(this.maxWidth == null) {
			tmp = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			tmp = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			tmp = a > b ? b : a;
		}
		this.realMaxWidth = tmp;
		var tmp;
		if(this.maxHeight == null) {
			tmp = this.constraintHeight;
		} else if(this.constraintHeight < 0) {
			tmp = this.maxHeight;
		} else {
			var a = this.maxHeight;
			var b = this.constraintHeight;
			tmp = a > b ? b : a;
		}
		this.realMaxHeight = tmp;
		if(this.minWidth != null && this.realMaxWidth < this.minWidth && this.realMaxWidth >= 0) {
			this.realMaxWidth = this.minWidth;
		}
		if(this.minHeight != null && this.realMaxHeight < this.minHeight && this.realMaxWidth >= 0) {
			this.realMaxHeight = this.minHeight;
		}
		if(this.realMaxWidth != oldW || this.realMaxHeight != oldH) {
			this.set_needReflow(true);
		}
		var oldW = this.realMinWidth;
		var oldH = this.realMinHeight;
		var tmp;
		if(this.fillWidth) {
			var a = Math.ceil(this.constraintWidth - 1e-10);
			var b = this.minWidth != null ? this.minWidth : -1;
			tmp = a < b ? b : a;
		} else {
			tmp = this.minWidth != null ? this.minWidth : -1;
		}
		this.realMinWidth = tmp;
		var tmp;
		if(this.fillHeight) {
			var a = Math.ceil(this.constraintHeight - 1e-10);
			var b = this.minHeight != null ? this.minHeight : -1;
			tmp = a < b ? b : a;
		} else {
			tmp = this.minHeight != null ? this.minHeight : -1;
		}
		this.realMinHeight = tmp;
		if(this.realMinWidth != oldW || this.realMinHeight != oldH) {
			this.set_needReflow(true);
		}
	}
	,set_minWidth: function(w) {
		if(this.minWidth == w) {
			return w;
		}
		this.set_needReflow(true);
		this.minWidth = w;
		this.updateConstraint();
		return w;
	}
	,set_minHeight: function(h) {
		if(this.minHeight == h) {
			return h;
		}
		this.set_needReflow(true);
		this.minHeight = h;
		this.updateConstraint();
		return h;
	}
	,set_horizontalSpacing: function(s) {
		if(this.horizontalSpacing == s) {
			return s;
		}
		this.set_needReflow(true);
		return this.horizontalSpacing = s;
	}
	,set_verticalSpacing: function(s) {
		if(this.verticalSpacing == s) {
			return s;
		}
		this.set_needReflow(true);
		return this.verticalSpacing = s;
	}
	,set_enableInteractive: function(b) {
		if(this.enableInteractive == b) {
			return b;
		}
		if(b) {
			if(this.interactive == null) {
				var interactive = new h2d_Interactive(0,0);
				this.addChildAt(interactive,0);
				this.interactive = interactive;
				interactive.set_cursor(hxd_Cursor.Default);
				this.getProperties(interactive).set_isAbsolute(true);
				if(!this.needReflow) {
					interactive.width = this.calculatedWidth;
					interactive.height = this.calculatedHeight;
				}
				interactive.onWheel = $bind(this,this.onMouseWheel);
			}
		} else if(this.interactive != null) {
			var _this = this.interactive;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.interactive = null;
		}
		return this.enableInteractive = b;
	}
	,onMouseWheel: function(e) {
		if(this.overflow == h2d_FlowOverflow.Scroll) {
			this.set_scrollPosY(this.scrollPosY + e.wheelDelta * this.scrollWheelSpeed);
			e.propagate = false;
		}
	}
	,set_backgroundTile: function(t) {
		if(this.backgroundTile == t) {
			return t;
		}
		if(t != null) {
			if(this.background == null) {
				var background = new h2d_ScaleGrid(t,this.borderLeft,this.borderTop,this.borderRight,this.borderBottom);
				this.addChildAt(background,0);
				this.getProperties(background).set_isAbsolute(true);
				this.background = background;
				if(!this.needReflow) {
					background.set_width(Math.ceil(this.calculatedWidth - 1e-10));
					background.set_height(Math.ceil(this.calculatedHeight - 1e-10));
				}
			}
			this.background.tile = t;
		} else if(this.background != null) {
			var _this = this.background;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.background = null;
		}
		return this.backgroundTile = t;
	}
	,set_borderWidth: function(v) {
		if(this.borderLeft == v) {
			return v;
		}
		return this.set_borderLeft(this.set_borderRight(v));
	}
	,set_borderLeft: function(v) {
		if(this.background != null) {
			this.background.set_borderLeft(v);
		}
		return this.borderLeft = v;
	}
	,set_borderRight: function(v) {
		if(this.borderRight == v) {
			return v;
		}
		if(this.background != null) {
			this.background.set_borderRight(v);
		}
		return this.borderRight = v;
	}
	,set_borderHeight: function(v) {
		if(this.borderTop == v) {
			return v;
		}
		return this.set_borderTop(this.set_borderBottom(v));
	}
	,set_borderTop: function(v) {
		if(this.borderTop == v) {
			return v;
		}
		if(this.background != null) {
			this.background.set_borderTop(v);
		}
		return this.borderTop = v;
	}
	,set_borderBottom: function(v) {
		if(this.borderBottom == v) {
			return v;
		}
		if(this.background != null) {
			this.background.set_borderBottom(v);
		}
		return this.borderBottom = v;
	}
	,reflow: function() {
		var _gthis = this;
		this.onBeforeReflow();
		this.syncPos();
		if(!this.isConstraint && (this.fillWidth || this.fillHeight)) {
			var scene = this.getScene();
			var cw = this.fillWidth ? scene.width : -1;
			var ch = this.fillHeight ? scene.height : -1;
			if(cw != this.constraintWidth || ch != this.constraintHeight) {
				this.constraintSize(cw,ch);
				this.isConstraint = false;
			}
		}
		var borderTop = 0;
		var borderBottom = 0;
		var borderLeft = 0;
		var borderRight = 0;
		var tmpBounds = this.tmpBounds;
		if(tmpBounds == null) {
			throw haxe_Exception.thrown("Recursive reflow");
		}
		this.tmpBounds = null;
		var isConstraintWidth = this.realMaxWidth >= 0;
		var isConstraintHeight = this.realMaxHeight >= 0;
		var maxTotWidth = this.realMaxWidth < 0 ? 100000000 : Math.floor(this.realMaxWidth + 1e-10);
		var maxTotHeight = this.realMaxHeight < 0 ? 100000000 : Math.floor(this.realMaxHeight + 1e-10);
		var maxInWidth = maxTotWidth - (this.paddingLeft + this.paddingRight + (borderLeft + borderRight));
		var maxInHeight = maxTotHeight - (this.paddingTop + this.paddingBottom + (borderTop + borderBottom));
		if(this.debug) {
			this.debugGraphics.clear();
		}
		var cw;
		var ch;
		switch(this.layout._hx_index) {
		case 0:
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Bottom : this.verticalAlign;
			var startX = this.paddingLeft + borderLeft;
			var x = startX;
			var y = this.paddingTop + borderTop;
			cw = x;
			var maxLineHeight = 0;
			var minLineHeight = this.lineHeight != null ? this.lineHeight : this.realMinHeight >= 0 && !this.multiline ? this.realMinHeight - (this.paddingTop + this.paddingBottom + borderTop + borderBottom) : 0;
			var lastIndex = 0;
			var autoWidth = maxInWidth;
			var autoSum = 0.0;
			var count = 0;
			var _g = 0;
			var _g1 = _gthis.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute && p.horizontalAlign == null && p.verticalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(count > 0 && !p.isAbsolute) {
					autoWidth -= _gthis.horizontalSpacing;
				}
				if(p.autoSizeWidth == null) {
					var pw = p.paddingLeft + p.paddingRight;
					var ph = p.paddingTop + p.paddingBottom;
					if(!p.isAbsolute) {
						c.constraintSize(isConstraintWidth && p.constraint ? ((p.autoSizeWidth != null ? Math.floor(autoWidth * p.autoSizeWidth / autoSum + 1e-10) : maxInWidth) - pw) / Math.abs(c.scaleX) : -1,isConstraintHeight && p.constraint ? ((p.autoSizeHeight != null ? (maxLineHeight < minLineHeight ? minLineHeight : maxLineHeight) * p.autoSizeHeight : maxInHeight) - ph) / Math.abs(c.scaleY) : -1);
					}
					var b = tmpBounds;
					b.xMin = 1e20;
					b.yMin = 1e20;
					b.xMax = -1e20;
					b.yMax = -1e20;
					c.getBoundsRec(_gthis,b,true);
					if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
						if(0 < b.xMin) {
							b.xMin = 0;
						}
						if(0 > b.xMax) {
							b.xMax = 0;
						}
						if(0 < b.yMin) {
							b.yMin = 0;
						}
						if(0 > b.yMax) {
							b.yMax = 0;
						}
					} else {
						var dx = -c.x;
						var dy = -c.y;
						b.xMin += dx;
						b.xMax += dx;
						b.yMin += dy;
						b.yMax += dy;
					}
					var b1 = b;
					p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
					p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
					if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
						p.calculatedWidth = p.minWidth;
					}
					if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
						p.calculatedHeight = p.minHeight;
					}
					if(!p.isAbsolute) {
						if(p.calculatedHeight > maxLineHeight) {
							maxLineHeight = p.calculatedHeight;
						}
						autoWidth -= p.calculatedWidth;
					}
				} else {
					autoSum += p.autoSizeWidth;
				}
				++count;
			}
			var _g = 0;
			var _g1 = _gthis.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute && p.horizontalAlign == null && p.verticalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.autoSizeWidth != null || p.autoSizeHeight != null) {
					var pw = p.paddingLeft + p.paddingRight;
					var ph = p.paddingTop + p.paddingBottom;
					if(!p.isAbsolute) {
						c.constraintSize(isConstraintWidth && p.constraint ? ((p.autoSizeWidth != null ? Math.floor(autoWidth * p.autoSizeWidth / autoSum + 1e-10) : maxInWidth) - pw) / Math.abs(c.scaleX) : -1,isConstraintHeight && p.constraint ? ((p.autoSizeHeight != null ? (maxLineHeight < minLineHeight ? minLineHeight : maxLineHeight) * p.autoSizeHeight : maxInHeight) - ph) / Math.abs(c.scaleY) : -1);
					}
					var b = tmpBounds;
					b.xMin = 1e20;
					b.yMin = 1e20;
					b.xMax = -1e20;
					b.yMax = -1e20;
					c.getBoundsRec(_gthis,b,true);
					if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
						if(0 < b.xMin) {
							b.xMin = 0;
						}
						if(0 > b.xMax) {
							b.xMax = 0;
						}
						if(0 < b.yMin) {
							b.yMin = 0;
						}
						if(0 > b.yMax) {
							b.yMax = 0;
						}
					} else {
						var dx = -c.x;
						var dy = -c.y;
						b.xMin += dx;
						b.xMax += dx;
						b.yMin += dy;
						b.yMax += dy;
					}
					var b1 = b;
					p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
					p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
					if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
						p.calculatedWidth = p.minWidth;
					}
					if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
						p.calculatedHeight = p.minHeight;
					}
				}
				if(!p.isAbsolute) {
					var br = false;
					if((_gthis.multiline && x - startX + p.calculatedWidth > maxInWidth || p.lineBreak) && x - startX > 0) {
						br = true;
						if(maxLineHeight < minLineHeight) {
							maxLineHeight = minLineHeight;
						} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minLineHeight != 0) {
							maxLineHeight = minLineHeight;
						}
						var absHeight = maxLineHeight > maxInHeight && _gthis.overflow != h2d_FlowOverflow.Expand ? maxInHeight : maxLineHeight;
						var _g2 = lastIndex;
						var _g3 = i;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var p1 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
							if(p1.isAbsolute && p1.verticalAlign == null) {
								continue;
							}
							var c1 = _gthis.children[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
							if(!c1.visible) {
								continue;
							}
							var a = p1.verticalAlign != null ? p1.verticalAlign : valign;
							c1.posChanged = true;
							c1.y = y + p1.offsetY + p1.paddingTop;
							var height = p1.isAbsolute ? absHeight : maxLineHeight;
							if(a != null) {
								switch(a._hx_index) {
								case 3:
									c1.posChanged = true;
									c1.y += (height - p1.calculatedHeight) * 0.5 | 0;
									break;
								case 4:
									c1.posChanged = true;
									c1.y += height - (p1.calculatedHeight | 0);
									break;
								default:
								}
							}
						}
						lastIndex = i;
						y += maxLineHeight + _gthis.verticalSpacing;
						maxLineHeight = 0;
						x = startX;
					}
					p.isBreak = br;
					x += p.calculatedWidth;
					if(x > cw) {
						cw = x;
					}
					x += _gthis.horizontalSpacing;
					if(p.calculatedHeight > maxLineHeight) {
						maxLineHeight = p.calculatedHeight;
					}
				}
			}
			var maxIndex = this.children.length;
			if(maxLineHeight < minLineHeight) {
				maxLineHeight = minLineHeight;
			} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minLineHeight != 0) {
				maxLineHeight = minLineHeight;
			}
			var absHeight = maxLineHeight > maxInHeight && _gthis.overflow != h2d_FlowOverflow.Expand ? maxInHeight : maxLineHeight;
			var _g = lastIndex;
			var _g1 = maxIndex;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute && p.verticalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var a = p.verticalAlign != null ? p.verticalAlign : valign;
				c.posChanged = true;
				c.y = y + p.offsetY + p.paddingTop;
				var height = p.isAbsolute ? absHeight : maxLineHeight;
				if(a != null) {
					switch(a._hx_index) {
					case 3:
						c.posChanged = true;
						c.y += (height - p.calculatedHeight) * 0.5 | 0;
						break;
					case 4:
						c.posChanged = true;
						c.y += height - (p.calculatedHeight | 0);
						break;
					default:
					}
				}
			}
			lastIndex = maxIndex;
			cw += this.paddingRight + borderRight;
			ch = y + maxLineHeight + this.paddingBottom + borderBottom;
			if(this.realMinWidth >= 0 && cw < this.realMinWidth) {
				cw = this.realMinWidth;
			}
			var endX = cw - (this.paddingRight + borderRight);
			var xmin = startX;
			var xmax = endX;
			var midSpace = 0;
			var curAlign = null;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.isAbsolute) {
					var _g2 = p.horizontalAlign;
					if(_g2 != null) {
						switch(_g2._hx_index) {
						case 1:
							c.posChanged = true;
							c.x = startX + p.offsetX;
							break;
						case 2:
							c.posChanged = true;
							c.x = endX - p.calculatedWidth + p.offsetX;
							break;
						case 3:
							c.posChanged = true;
							c.x = startX + ((endX - startX - p.calculatedWidth) * 0.5 | 0) + p.offsetX + startX;
							break;
						default:
						}
					}
					continue;
				}
				if(p.isBreak) {
					xmin = startX;
					xmax = endX;
					midSpace = 0;
				}
				var px;
				var align = p.horizontalAlign == null ? halign : p.horizontalAlign;
				if(curAlign != align) {
					curAlign = align;
					midSpace = 0;
				}
				if(align == null) {
					px = xmin;
					xmin += p.calculatedWidth + this.horizontalSpacing;
				} else {
					switch(align._hx_index) {
					case 2:
						if(midSpace == 0) {
							var p1 = p.calculatedWidth;
							var size = 0;
							var _g3 = i + 1;
							var _g4 = _gthis.children.length;
							while(_g3 < _g4) {
								var j = _g3++;
								var p2 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j - 1 : j];
								if(p2.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j - 1 : j].visible) {
									continue;
								}
								if(p2.isBreak) {
									break;
								}
								size += _gthis.horizontalSpacing + p2.calculatedWidth;
							}
							var remSize = p1 + size;
							midSpace = xmax - xmin - remSize;
							xmin += midSpace;
						}
						px = xmin;
						xmin += p.calculatedWidth + this.horizontalSpacing;
						break;
					case 3:
						if(midSpace == 0) {
							var p3 = p.calculatedWidth;
							var size1 = 0;
							var _g5 = i + 1;
							var _g6 = _gthis.children.length;
							while(_g5 < _g6) {
								var j1 = _g5++;
								var p4 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1];
								if(p4.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1].visible) {
									continue;
								}
								if(p4.isBreak) {
									break;
								}
								size1 += _gthis.horizontalSpacing + p4.calculatedWidth;
							}
							var remSize1 = p3 + size1;
							midSpace = (xmax - xmin - remSize1) * 0.5 | 0;
							xmin += midSpace;
						}
						px = xmin;
						xmin += p.calculatedWidth + this.horizontalSpacing;
						break;
					default:
						px = xmin;
						xmin += p.calculatedWidth + this.horizontalSpacing;
					}
				}
				c.posChanged = true;
				c.x = px + p.offsetX + p.paddingLeft;
				if(p.isAbsolute) {
					xmin = px;
				}
			}
			break;
		case 1:
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Top : this.verticalAlign;
			var startY = this.paddingTop + borderTop;
			var y = startY;
			var x = this.paddingLeft + borderLeft;
			ch = y;
			var maxColWidth = 0;
			var minColWidth = this.colWidth != null ? this.colWidth : this.realMinWidth >= 0 && !this.multiline ? this.realMinWidth - (this.paddingLeft + this.paddingRight + borderLeft + borderRight) : 0;
			var lastIndex = 0;
			var autoHeight = maxInHeight;
			var autoSum = 0.0;
			var count = 0;
			var _g = 0;
			var _g1 = _gthis.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute && p.horizontalAlign == null && p.verticalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(count > 0 && !p.isAbsolute) {
					autoHeight -= _gthis.verticalSpacing;
				}
				if(p.autoSizeHeight == null) {
					var pw = p.paddingLeft + p.paddingRight;
					var ph = p.paddingTop + p.paddingBottom;
					if(!p.isAbsolute) {
						c.constraintSize(isConstraintWidth && p.constraint ? ((p.autoSizeWidth != null ? (maxColWidth < minColWidth ? minColWidth : maxColWidth) * p.autoSizeWidth : maxInWidth) - pw) / Math.abs(c.scaleX) : -1,isConstraintHeight && p.constraint ? ((p.autoSizeHeight != null ? Math.floor(autoHeight * p.autoSizeHeight / autoSum + 1e-10) : maxInHeight) - ph) / Math.abs(c.scaleY) : -1);
					}
					var b = tmpBounds;
					b.xMin = 1e20;
					b.yMin = 1e20;
					b.xMax = -1e20;
					b.yMax = -1e20;
					c.getBoundsRec(_gthis,b,true);
					if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
						if(0 < b.xMin) {
							b.xMin = 0;
						}
						if(0 > b.xMax) {
							b.xMax = 0;
						}
						if(0 < b.yMin) {
							b.yMin = 0;
						}
						if(0 > b.yMax) {
							b.yMax = 0;
						}
					} else {
						var dx = -c.x;
						var dy = -c.y;
						b.xMin += dx;
						b.xMax += dx;
						b.yMin += dy;
						b.yMax += dy;
					}
					var b1 = b;
					p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
					p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
					if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
						p.calculatedWidth = p.minWidth;
					}
					if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
						p.calculatedHeight = p.minHeight;
					}
					if(!p.isAbsolute) {
						if(p.calculatedWidth > maxColWidth) {
							maxColWidth = p.calculatedWidth;
						}
						autoHeight -= p.calculatedHeight;
					}
				} else {
					autoSum += p.autoSizeHeight;
				}
				++count;
			}
			var _g = 0;
			var _g1 = _gthis.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute && p.horizontalAlign == null && p.verticalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.autoSizeWidth != null || p.autoSizeHeight != null) {
					var pw = p.paddingLeft + p.paddingRight;
					var ph = p.paddingTop + p.paddingBottom;
					if(!p.isAbsolute) {
						c.constraintSize(isConstraintWidth && p.constraint ? ((p.autoSizeWidth != null ? (maxColWidth < minColWidth ? minColWidth : maxColWidth) * p.autoSizeWidth : maxInWidth) - pw) / Math.abs(c.scaleX) : -1,isConstraintHeight && p.constraint ? ((p.autoSizeHeight != null ? Math.floor(autoHeight * p.autoSizeHeight / autoSum + 1e-10) : maxInHeight) - ph) / Math.abs(c.scaleY) : -1);
					}
					var b = tmpBounds;
					b.xMin = 1e20;
					b.yMin = 1e20;
					b.xMax = -1e20;
					b.yMax = -1e20;
					c.getBoundsRec(_gthis,b,true);
					if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
						if(0 < b.xMin) {
							b.xMin = 0;
						}
						if(0 > b.xMax) {
							b.xMax = 0;
						}
						if(0 < b.yMin) {
							b.yMin = 0;
						}
						if(0 > b.yMax) {
							b.yMax = 0;
						}
					} else {
						var dx = -c.x;
						var dy = -c.y;
						b.xMin += dx;
						b.xMax += dx;
						b.yMin += dy;
						b.yMax += dy;
					}
					var b1 = b;
					p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
					p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
					if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
						p.calculatedWidth = p.minWidth;
					}
					if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
						p.calculatedHeight = p.minHeight;
					}
				}
				if(!p.isAbsolute) {
					var br = false;
					if((_gthis.multiline && y - startY + p.calculatedHeight > maxInHeight || p.lineBreak) && y - startY > 0) {
						br = true;
						if(maxColWidth < minColWidth) {
							maxColWidth = minColWidth;
						} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minColWidth != 0) {
							maxColWidth = minColWidth;
						}
						var absWidth = maxColWidth > maxInWidth && _gthis.overflow != h2d_FlowOverflow.Expand ? maxInWidth : maxColWidth;
						var _g2 = lastIndex;
						var _g3 = i;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var p1 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
							if(p1.isAbsolute && p1.horizontalAlign == null) {
								continue;
							}
							var c1 = _gthis.children[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
							if(!c1.visible) {
								continue;
							}
							var a = p1.horizontalAlign != null ? p1.horizontalAlign : halign;
							c1.posChanged = true;
							c1.x = x + p1.offsetX + p1.paddingLeft;
							var width = p1.isAbsolute ? absWidth : maxColWidth;
							if(a != null) {
								switch(a._hx_index) {
								case 2:
									c1.posChanged = true;
									c1.x += width - p1.calculatedWidth;
									break;
								case 3:
									c1.posChanged = true;
									c1.x += (width - p1.calculatedWidth) * 0.5 | 0;
									break;
								default:
								}
							}
						}
						lastIndex = i;
						x += maxColWidth + _gthis.horizontalSpacing;
						maxColWidth = 0;
						y = startY;
					}
					p.isBreak = br;
					c.posChanged = true;
					c.y = y + p.offsetY + p.paddingTop;
					y += p.calculatedHeight;
					if(y > ch) {
						ch = y;
					}
					y += _gthis.verticalSpacing;
					if(p.calculatedWidth > maxColWidth) {
						maxColWidth = p.calculatedWidth;
					}
				}
			}
			var maxIndex = this.children.length;
			if(maxColWidth < minColWidth) {
				maxColWidth = minColWidth;
			} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minColWidth != 0) {
				maxColWidth = minColWidth;
			}
			var absWidth = maxColWidth > maxInWidth && _gthis.overflow != h2d_FlowOverflow.Expand ? maxInWidth : maxColWidth;
			var _g = lastIndex;
			var _g1 = maxIndex;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute && p.horizontalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var a = p.horizontalAlign != null ? p.horizontalAlign : halign;
				c.posChanged = true;
				c.x = x + p.offsetX + p.paddingLeft;
				var width = p.isAbsolute ? absWidth : maxColWidth;
				if(a != null) {
					switch(a._hx_index) {
					case 2:
						c.posChanged = true;
						c.x += width - p.calculatedWidth;
						break;
					case 3:
						c.posChanged = true;
						c.x += (width - p.calculatedWidth) * 0.5 | 0;
						break;
					default:
					}
				}
			}
			lastIndex = maxIndex;
			ch += this.paddingBottom + borderBottom;
			cw = x + maxColWidth + this.paddingRight + borderRight;
			if(this.realMinHeight >= 0 && ch < this.realMinHeight) {
				ch = this.realMinHeight;
			}
			var endY = ch - (this.paddingBottom + borderBottom);
			var ymin = startY;
			var ymax = endY;
			var midSpace = 0;
			var curAlign = null;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.isAbsolute) {
					var _g2 = p.verticalAlign;
					if(_g2 != null) {
						switch(_g2._hx_index) {
						case 0:
							c.posChanged = true;
							c.y = startY + p.offsetY;
							break;
						case 3:
							c.posChanged = true;
							c.y = startY + ((endY - startY - p.calculatedHeight) * 0.5 | 0) + p.offsetY + startY;
							break;
						case 4:
							c.posChanged = true;
							c.y = endY - p.calculatedHeight + p.offsetY;
							break;
						default:
						}
					}
					continue;
				}
				if(p.isBreak) {
					ymin = startY;
					ymax = endY;
					midSpace = 0;
				}
				var py;
				var align = p.verticalAlign == null ? valign : p.verticalAlign;
				if(curAlign != align) {
					curAlign = align;
					midSpace = 0;
				}
				if(align == null) {
					py = ymin;
					ymin += p.calculatedHeight + this.verticalSpacing;
				} else {
					switch(align._hx_index) {
					case 3:
						if(midSpace == 0) {
							var p1 = p.calculatedHeight;
							var size = 0;
							var _g3 = i + 1;
							var _g4 = _gthis.children.length;
							while(_g3 < _g4) {
								var j = _g3++;
								var p2 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j - 1 : j];
								if(p2.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j - 1 : j].visible) {
									continue;
								}
								if(p2.isBreak) {
									break;
								}
								size += _gthis.verticalSpacing + p2.calculatedHeight;
							}
							var remSize = p1 + size;
							midSpace = (ymax - ymin - remSize) * 0.5 | 0;
							ymin += midSpace;
						}
						py = ymin;
						ymin += p.calculatedHeight + this.verticalSpacing;
						break;
					case 4:
						if(midSpace == 0) {
							var p3 = p.calculatedHeight;
							var size1 = 0;
							var _g5 = i + 1;
							var _g6 = _gthis.children.length;
							while(_g5 < _g6) {
								var j1 = _g5++;
								var p4 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1];
								if(p4.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1].visible) {
									continue;
								}
								if(p4.isBreak) {
									break;
								}
								size1 += _gthis.verticalSpacing + p4.calculatedHeight;
							}
							var remSize1 = p3 + size1;
							midSpace = ymax - ymin - remSize1;
							ymin += midSpace;
						}
						py = ymin;
						ymin += p.calculatedHeight + this.verticalSpacing;
						break;
					default:
						py = ymin;
						ymin += p.calculatedHeight + this.verticalSpacing;
					}
				}
				c.posChanged = true;
				c.y = py + p.offsetY + p.paddingTop;
			}
			break;
		case 2:
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Top : this.verticalAlign;
			var maxChildW = 0;
			var maxChildH = 0;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var isAbs = p.isAbsolute;
				if(isAbs && p.verticalAlign == null && p.horizontalAlign == null) {
					continue;
				}
				var pw = p.paddingLeft + p.paddingRight;
				var ph = p.paddingTop + p.paddingBottom;
				if(!isAbs) {
					c.constraintSize(isConstraintWidth && p.constraint ? (maxInWidth - pw) / Math.abs(c.scaleX) : -1,isConstraintHeight && p.constraint ? (maxInHeight - ph) / Math.abs(c.scaleY) : -1);
				}
				var b = tmpBounds;
				b.xMin = 1e20;
				b.yMin = 1e20;
				b.xMax = -1e20;
				b.yMax = -1e20;
				c.getBoundsRec(_gthis,b,true);
				if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
					if(0 < b.xMin) {
						b.xMin = 0;
					}
					if(0 > b.xMax) {
						b.xMax = 0;
					}
					if(0 < b.yMin) {
						b.yMin = 0;
					}
					if(0 > b.yMax) {
						b.yMax = 0;
					}
				} else {
					var dx = -c.x;
					var dy = -c.y;
					b.xMin += dx;
					b.xMax += dx;
					b.yMin += dy;
					b.yMax += dy;
				}
				var b1 = b;
				p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
				p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
				if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
					p.calculatedWidth = p.minWidth;
				}
				if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
					p.calculatedHeight = p.minHeight;
				}
				if(isAbs) {
					continue;
				}
				if(p.calculatedWidth > maxChildW) {
					maxChildW = p.calculatedWidth;
				}
				if(p.calculatedHeight > maxChildH) {
					maxChildH = p.calculatedHeight;
				}
			}
			var xmin = this.paddingLeft + borderLeft;
			var ymin = this.paddingTop + borderTop;
			var xmax;
			if(this.realMaxWidth > 0 && this.overflow != h2d_FlowOverflow.Expand) {
				xmax = Math.floor(this.realMaxWidth - (this.paddingRight + borderRight) + 1e-10);
			} else {
				var a = xmin + maxChildW;
				var b = this.realMinWidth - (this.paddingRight + borderRight);
				xmax = a < b ? b : a;
			}
			var ymax;
			if(this.realMaxWidth > 0 && this.overflow != h2d_FlowOverflow.Expand) {
				ymax = Math.floor(this.realMaxHeight - (this.paddingBottom + borderBottom) + 1e-10);
			} else {
				var a = ymin + maxChildH;
				var b = this.realMinHeight - (this.paddingBottom + borderBottom);
				ymax = a < b ? b : a;
			}
			cw = xmax + this.paddingRight + borderRight;
			ch = ymax + this.paddingBottom + borderBottom;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var isAbs = p.isAbsolute;
				if(isAbs && p.verticalAlign == null && p.horizontalAlign == null) {
					continue;
				}
				var valign1 = p.verticalAlign == null ? valign : p.verticalAlign;
				var halign1 = p.horizontalAlign == null ? halign : p.horizontalAlign;
				var px;
				if(halign1 == null) {
					px = xmin;
				} else {
					switch(halign1._hx_index) {
					case 2:
						px = xmax - p.calculatedWidth;
						break;
					case 3:
						px = xmin + ((xmax - xmin - p.calculatedWidth) * 0.5 | 0);
						break;
					default:
						px = xmin;
					}
				}
				var py;
				if(valign1 == null) {
					py = ymin;
				} else {
					switch(valign1._hx_index) {
					case 3:
						py = ymin + ((ymax - ymin - p.calculatedHeight) * 0.5 | 0);
						break;
					case 4:
						py = ymax - p.calculatedHeight;
						break;
					default:
						py = ymin;
					}
				}
				if(!isAbs || p.horizontalAlign != null) {
					c.posChanged = true;
					c.x = px + p.offsetX + p.paddingLeft;
				}
				if(!isAbs || p.verticalAlign != null) {
					c.posChanged = true;
					c.y = py + p.offsetY + p.paddingTop;
				}
			}
			break;
		}
		if(this.scrollPosY != 0) {
			var i = 0;
			var sy = this.scrollPosY | 0;
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var p = this.properties[i++];
				if(p.isAbsolute) {
					continue;
				}
				c.posChanged = true;
				c.y -= sy;
			}
		}
		if(this.realMinWidth >= 0 && cw < this.realMinWidth) {
			cw = this.realMinWidth;
		}
		if(this.realMinHeight >= 0 && ch < this.realMinHeight) {
			ch = this.realMinHeight;
		}
		this.contentWidth = cw;
		this.contentHeight = ch;
		if(this.overflow != h2d_FlowOverflow.Expand) {
			if(isConstraintWidth && cw > maxTotWidth) {
				cw = maxTotWidth;
			}
			if(isConstraintHeight && ch > maxTotHeight) {
				ch = maxTotHeight;
			}
		}
		if(this.interactive != null) {
			this.interactive.width = cw;
			this.interactive.height = ch;
		}
		if(this.background != null) {
			this.background.set_width(Math.ceil(cw - 1e-10));
			this.background.set_height(Math.ceil(ch - 1e-10));
		}
		this.calculatedWidth = cw;
		this.calculatedHeight = ch;
		if(this.scrollBar != null) {
			if(this.contentHeight <= this.calculatedHeight) {
				this.scrollBar.set_visible(false);
			} else {
				this.scrollBar.set_visible(true);
				this.scrollBar.set_minHeight(Math.ceil(this.calculatedHeight - 1e-10));
				var b = this.calculatedHeight * (1 - (this.contentHeight - this.calculatedHeight) / this.contentHeight) | 0;
				this.scrollBarCursor.set_minHeight(1 < b ? b : 1);
				this.updateScrollCursor();
			}
		}
		this.set_needReflow(false);
		if(this.overflow == h2d_FlowOverflow.Scroll || this.overflow == h2d_FlowOverflow.Hidden) {
			this.posChanged = true;
		}
		if(this.debug) {
			if(this.debugGraphics != this.children[this.children.length - 1]) {
				this.addChild(this.debugGraphics);
				this.set_needReflow(false);
			}
			if(this.paddingLeft != 0 || this.paddingRight != 0 || this.paddingTop != 0 || this.paddingBottom != 0) {
				this.debugGraphics.lineStyle(1,65280);
				this.debugGraphics.drawRect(this.paddingLeft,this.paddingTop,this.get_innerWidth(),this.get_innerHeight());
			}
			this.debugGraphics.lineStyle(1,33023);
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute || !c.visible) {
					continue;
				}
				this.debugGraphics.drawRect(c.x - p.offsetX - p.paddingLeft,c.y - p.offsetY - p.paddingTop,p.calculatedWidth,p.calculatedHeight);
			}
			this.debugGraphics.lineStyle(1,16711680);
			this.debugGraphics.drawRect(0,0,cw,ch);
		}
		this.tmpBounds = tmpBounds;
		this.onAfterReflow();
	}
	,onBeforeReflow: function() {
	}
	,onAfterReflow: function() {
	}
	,__class__: h2d_Flow
});
var MenuLine = function(str,parent,onPress,onOver,onOut) {
	this.selected = false;
	this.onPress = onPress;
	h2d_Flow.call(this,parent);
	var text = new h2d_Text(Assets.font,this);
	text.set_text(str);
	this.set_borderWidth(this.set_borderHeight(6));
	this.set_paddingBottom(3);
	this.set_paddingTop(2);
	this.set_minWidth(70);
	this.set_horizontalAlign(h2d_FlowAlign.Middle);
	this.set_enableInteractive(true);
	this.interactive.set_cursor(hxd_Cursor.Button);
	this.interactive.onClick = function(e) {
		onPress();
	};
	this.interactive.onOver = function(e) {
		if(!Main.inst.selectWithMouse) {
			return;
		}
		onOver();
	};
	this.interactive.onOut = function(e) {
		onOut();
	};
};
$hxClasses["MenuLine"] = MenuLine;
MenuLine.__name__ = "MenuLine";
MenuLine.__super__ = h2d_Flow;
MenuLine.prototype = $extend(h2d_Flow.prototype,{
	set_selected: function(v) {
		if(v) {
			this.set_backgroundTile(Assets.getTile("entities","buttonSelected"));
		} else {
			this.set_backgroundTile(Assets.getTile("entities","button"));
		}
		this.selected = v;
		return v;
	}
	,press: function() {
		this.onPress();
	}
	,__class__: MenuLine
});
var LevelComplete = function(groupId,levelId,globalLevelId,maskX,maskY,playTimer,justCompletedGame) {
	this.timer = 0.;
	this.lines = [];
	this.lastMovementAction = 9;
	this.repeatTimer = 0.;
	this.holdTimer = 0.;
	this.curId = 0;
	var _gthis = this;
	Scene.call(this);
	if(LevelComplete.inst != null) {
		throw haxe_Exception.thrown("LevelComplete scene already exists");
	}
	this.groupId = groupId;
	this.levelId = levelId;
	this.globalLevelId = globalLevelId;
	this.maskX = maskX;
	this.maskY = maskY;
	var back = new h2d_Graphics(this.world);
	back.beginFill(1578021);
	back.drawRect(0,0,320,180);
	back.endFill();
	this.container = new h2d_Flow(this.hud);
	this.container.set_minWidth(320);
	this.container.set_minHeight(180);
	this.container.set_layout(h2d_FlowLayout.Vertical);
	this.container.set_horizontalAlign(h2d_FlowAlign.Middle);
	this.container.set_paddingTop(30);
	this.container.set_backgroundTile(h2d_Tile.fromColor(1578021,1,1));
	var title = new h2d_Text(Assets.fontLarge,this.container);
	title.set_text(Title.GROUP_NAMES[groupId]);
	title.set_textColor(Title.GROUP_COLORS[groupId]);
	var complete = new h2d_Text(Assets.font,this.container);
	complete.set_text("LEVEL " + globalLevelId + " CLEARED!");
	var props = this.container.getProperties(complete);
	props.paddingTop = 10;
	var menu = new h2d_Flow(this.container);
	menu.set_paddingTop(9);
	menu.set_layout(h2d_FlowLayout.Vertical);
	menu.set_verticalSpacing(4);
	menu.set_horizontalAlign(h2d_FlowAlign.Middle);
	var addLine = function(str,onPressed,onOver) {
		var flow = new MenuLine(str,menu,onPressed,onOver,function() {
		});
		_gthis.lines.push(flow);
	};
	if(levelId < 9) {
		addLine("Continue",$bind(this,this.onContinuePressed),$bind(this,this.onContinueOver));
		addLine("Restart",$bind(this,this.onRestartPressed),$bind(this,this.onRestartOver));
		addLine("Level select",$bind(this,this.onTitlePressed),$bind(this,this.onTitleOver));
	} else {
		addLine("Level select",$bind(this,this.onTitlePressed),$bind(this,this.onTitleOver));
		addLine("Restart",$bind(this,this.onRestartPressed),$bind(this,this.onRestartOver));
	}
	this.updateSelected();
	this.hud.set_visible(false);
	this.speedrunFlow = new ui_KeyValueFlow(this.container,120);
	this.speedrunFlow.set_paddingTop(10);
	var timeValueText = this.speedrunFlow.addLine("Time:",Game.formatTimer(playTimer)).value;
	var bestTimeValueText = this.speedrunFlow.addLine("Best time:").value;
	bestTimeValueText.set_text("99:99:999");
	var bestTimer = save_Save.gameData.data.levelBestTimes.h[globalLevelId];
	if(bestTimer != null && bestTimer != -1) {
		bestTimeValueText.set_text(Game.formatTimer(bestTimer));
		if(playTimer > bestTimer) {
			this.curId = 1;
			this.updateSelected();
			timeValueText.set_textColor(12470831);
		} else {
			timeValueText.set_textColor(6539085);
		}
	}
	this.speedrunFlow.set_visible(save_Save.gameData.data.areAllLevelsCompleted() && !justCompletedGame);
};
$hxClasses["LevelComplete"] = LevelComplete;
LevelComplete.__name__ = "LevelComplete";
LevelComplete.__super__ = Scene;
LevelComplete.prototype = $extend(Scene.prototype,{
	onContinueOver: function() {
		this.curId = 0;
		audio_Audio.playSound("menuMove");
		this.updateSelected();
	}
	,onContinuePressed: function() {
		this.delete();
		audio_Audio.stopMusic(audio_Audio.MUSIC_FADE_IN_TIME);
		audio_Audio.playMusic(Title.GROUP_MUSIC_NAMES[this.groupId],null,audio_Audio.MUSIC_FADE_IN_TIME);
		new Game(false,this.globalLevelId + 1);
	}
	,onRestartOver: function() {
		this.curId = 1;
		audio_Audio.playSound("menuMove");
		this.updateSelected();
	}
	,onRestartPressed: function() {
		this.delete();
		audio_Audio.stopMusic(audio_Audio.MUSIC_FADE_IN_TIME);
		audio_Audio.playMusic(Title.GROUP_MUSIC_NAMES[this.groupId],null,audio_Audio.MUSIC_FADE_IN_TIME);
		new Game(true,this.globalLevelId);
	}
	,onTitleOver: function() {
		this.curId = this.lines.length < 3 ? 0 : 2;
		audio_Audio.playSound("menuMove");
		this.updateSelected();
	}
	,onTitlePressed: function() {
		this.delete();
		new Title(this.globalLevelId);
	}
	,'delete': function() {
		Scene.prototype.delete.call(this);
		LevelComplete.inst = null;
	}
	,update: function(dt) {
		var _gthis = this;
		Scene.prototype.update.call(this,dt);
		var controller = Main.inst.controller;
		if(controller.isPressed(5)) {
			this.lastMovementAction = 5;
			this.holdTimer = 0;
			this.moveSelection(-1);
		}
		if(controller.isPressed(7)) {
			this.lastMovementAction = 7;
			this.holdTimer = 0;
			this.moveSelection(1);
		}
		var checkHoldAction = function(action,dir) {
			if(_gthis.lastMovementAction == action) {
				if(controller.isDown(action)) {
					_gthis.holdTimer += dt;
					if(_gthis.holdTimer > .22) {
						_gthis.repeatTimer += dt;
						if(_gthis.repeatTimer > .08) {
							_gthis.repeatTimer -= .08;
							_gthis.moveSelection(dir);
						}
					}
				} else {
					_gthis.holdTimer = 0;
				}
			}
		};
		checkHoldAction(5,-1);
		checkHoldAction(7,1);
		if(controller.isPressed(9)) {
			this.lines[this.curId].press();
			audio_Audio.playSound("menuSelect");
		}
		if(controller.isPressed(10) || controller.isPressed(4)) {
			this.onTitlePressed();
			audio_Audio.playSound("menuSelect");
		}
		this.timer += dt;
		var t = this.timer / .5;
		if(t > 1) {
			t = 1.;
		}
		var scale = 1. - Math.pow(1. - t,2.);
		var _this = this.hud;
		var _this1 = this.hud;
		_this1.posChanged = true;
		_this.posChanged = true;
		_this.scaleX = _this1.scaleY = scale;
		this.hud.set_visible(true);
		var _this = this.hud;
		_this.posChanged = true;
		_this.x = this.maskX * (1. - scale);
		var _this = this.hud;
		_this.posChanged = true;
		_this.y = this.maskY * (1. - scale);
	}
	,moveSelection: function(dir) {
		var moved = false;
		if(dir == -1) {
			if(this.curId > 0) {
				this.curId--;
				moved = true;
			}
		} else if(dir == 1) {
			if(this.curId < this.lines.length - 1) {
				this.curId++;
				moved = true;
			}
		}
		if(moved) {
			audio_Audio.playSound("menuMove");
		}
		this.updateSelected();
	}
	,updateSelected: function() {
		var _g = 0;
		var _g1 = this.lines.length;
		while(_g < _g1) {
			var i = _g++;
			this.lines[i].set_selected(this.curId == i);
		}
	}
	,__class__: LevelComplete
});
var h3d_IDrawable = function() { };
$hxClasses["h3d.IDrawable"] = h3d_IDrawable;
h3d_IDrawable.__name__ = "h3d.IDrawable";
h3d_IDrawable.__isInterface__ = true;
h3d_IDrawable.prototype = {
	__class__: h3d_IDrawable
};
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
$hxClasses["hxd.App"] = hxd_App;
hxd_App.__name__ = "hxd.App";
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	onResize: function() {
	}
	,setScene: function(scene,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		var new2D = ((scene) instanceof h2d_Scene) ? scene : null;
		var new3D = ((scene) instanceof h3d_scene_Scene) ? scene : null;
		if(new2D != null) {
			this.sevents.removeScene(this.s2d);
			this.sevents.addScene(scene,0);
		} else {
			if(new3D != null) {
				this.sevents.removeScene(this.s3d);
			}
			this.sevents.addScene(scene);
		}
		if(disposePrevious) {
			if(new2D != null) {
				this.s2d.dispose();
			} else if(new3D != null) {
				this.s3d.dispose();
			} else {
				throw haxe_Exception.thrown("Can't dispose previous scene");
			}
		}
		if(new2D != null) {
			this.s2d = new2D;
		}
		if(new3D != null) {
			this.s3d = new3D;
		}
	}
	,setCurrent: function() {
		var _gthis = this;
		this.engine = h3d_Engine.CURRENT;
		this.isDisposed = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onContextLost = $bind(this,this.onContextLost);
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			_gthis.onResize();
		};
		hxd_System.setLoop($bind(this,this.mainLoop));
	}
	,onContextLost: function() {
		if(this.s3d != null) {
			this.s3d.onContextLost();
		}
	}
	,setScene2D: function(s2d,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		this.sevents.removeScene(this.s2d);
		this.sevents.addScene(s2d,0);
		if(disposePrevious) {
			this.s2d.dispose();
		}
		this.s2d = s2d;
	}
	,setScene3D: function(s3d,disposePrevious) {
		if(disposePrevious == null) {
			disposePrevious = true;
		}
		this.sevents.removeScene(this.s3d);
		this.sevents.addScene(s3d);
		if(disposePrevious) {
			this.s3d.dispose();
		}
		this.s3d = s3d;
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onContextLost = $bind(this,this.onContextLost);
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,dispose: function() {
		this.engine.onResized = hxd_App.staticHandler;
		this.engine.onContextLost = hxd_App.staticHandler;
		this.isDisposed = true;
		if(this.s2d != null) {
			this.s2d.dispose();
		}
		if(this.s3d != null) {
			this.s3d.dispose();
		}
		if(this.sevents != null) {
			this.sevents.dispose();
		}
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.dt);
		if(this.isDisposed) {
			return;
		}
		var dt = hxd_Timer.dt;
		if(this.s2d != null) {
			this.s2d.setElapsedTime(dt);
		}
		if(this.s3d != null) {
			this.s3d.setElapsedTime(dt);
		}
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var Main = function() {
	this.counter = 0;
	this.selectWithMouse = false;
	this.onHitStopDone = null;
	this.hitStopTimer = 0.;
	this.doubleTick = false;
	this.maxDrawCalls = 0;
	this.started = false;
	this.timeToSimulateConstantRate = 0.;
	this.timeToSimulate = 0.;
	this.hasFocus = true;
	hxd_App.call(this);
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	var loader = new hxd_net_BinaryLoader("res.pak");
	loader.load();
	loader.onProgress = function(cur,max) {
		var p = Math.floor(100 * cur / max);
		updateProgress(p);
	};
	loader.onLoaded = function(bytes) {
		var fs = new hxd_fmt_pak_FileSystem();
		fs.addPak(new hxd_fmt_pak_FileInput(bytes));
		hxd_Res.set_loader(new hxd_res_Loader(fs));
		onGameLoaded();
		Main.onAssetsLoaded();
	};
};
Main.onAssetsLoaded = function() {
	hxd_Timer.skip();
	Main.inst = new Main();
};
Main.println = function(v) {
	console.log(Std.string(v));
};
Main.__super__ = hxd_App;
Main.prototype = $extend(hxd_App.prototype,{
	init: function() {
		this.initController();
		Assets.init();
		audio_Audio.init();
		Level.init();
		this.engine.set_fullScreen(false);
		this.engine.autoResize = true;
		this.engine.backgroundColor = 0;
		this.screenTexture = new h3d_mat_Texture(320,180,[h3d_mat_TextureFlags.Target]);
		this.screen = new h2d_Bitmap(h2d_Tile.fromTexture(this.screenTexture),this.s2d);
		this.hudTexture = new h3d_mat_Texture(320,180,[h3d_mat_TextureFlags.Target]);
		this.hud = new h2d_Bitmap(h2d_Tile.fromTexture(this.hudTexture),this.s2d);
		this.updateScale();
		var $window = hxd_Window.getInstance();
		$window.addEventTarget($bind(this,this.onEvent));
		$window.set_title("Boxed Boxes");
		SceneManager.init();
		this.fpsCounter = new ui_FPSCounter(Assets.font);
		this.fpsCounter.hide();
		this.initSave();
	}
	,initSave: function() {
		var _gthis = this;
		save_Save.init(function(success) {
			ui_Mute.init();
			_gthis.startGame();
		});
	}
	,startGame: function() {
		this.started = true;
		new Title(1);
	}
	,initController: function() {
		this.controller = new Controller();
		this.controller.bindKeyAsStickXY(0,1,70,84,83,82);
		this.controller.bindKey(2,78);
		this.controller.bindKey(3,68);
		this.controller.bindKey(4,80);
		this.controller.bindKey(5,70);
		this.controller.bindKey(6,84);
		this.controller.bindKey(7,83);
		this.controller.bindKey(8,82);
		this.controller.bindKey(9,78);
		this.controller.bindKey(10,69);
		this.controller.bindPadLStick(0,1);
		this.controller.bindPadRStick(0,1);
		var _this = this.controller;
		_this.bindPadButtonsAsStick(0,true,14,12);
		_this.bindPadButtonsAsStick(1,false,11,13);
		this.controller.bindPad(2,null,[1,3]);
		this.controller.bindPad(3,null,[2,4]);
		this.controller.bindPad(4,null,[5,6]);
		this.controller.bindPad(5,null,[11,19,25]);
		this.controller.bindPad(6,null,[12,20,26]);
		this.controller.bindPad(7,null,[13,21,27]);
		this.controller.bindPad(8,null,[14,22,28]);
		this.controller.bindPad(9,null,[1,3]);
		this.controller.bindPad(10,null,[2,4]);
	}
	,onEvent: function(event) {
		if(!this.started) {
			return;
		}
		if(event.kind == hxd_EventKind.EFocus) {
			this.hasFocus = true;
		} else if(event.kind == hxd_EventKind.EFocusLost) {
			this.hasFocus = false;
		} else if(event.kind == hxd_EventKind.EMove || event.kind == hxd_EventKind.EPush || event.kind == hxd_EventKind.ERelease) {
			this.selectWithMouse = true;
		}
	}
	,setFullscreen: function(v) {
		if(this.engine.fullScreen == v) {
			return;
		}
		this.engine.set_fullScreen(v);
	}
	,setVSync: function(v) {
		if(!v) {
			return;
		}
		var $window = hxd_Window.getInstance();
		$window.set_vsync(v);
	}
	,onResize: function() {
		hxd_Timer.skip();
		if(this.fpsCounter != null) {
			this.fpsCounter.onResize();
		}
		this.updateScale();
	}
	,updateScale: function() {
		this.scale = Math.min(this.s2d.width / 320,this.s2d.height / 180) | 0;
		var _this = this.screen;
		var v = this.scale;
		_this.posChanged = true;
		_this.scaleX = v;
		_this.posChanged = true;
		_this.scaleY = v;
		var _this = this.hud;
		var v = this.scale;
		_this.posChanged = true;
		_this.scaleX = v;
		_this.posChanged = true;
		_this.scaleY = v;
		var x = this.s2d.width * .5 - 320 * this.scale * .5;
		var step = this.scale;
		var sx = (step == 0 ? x : Math.round(x / step) * step) | 0;
		var x = this.s2d.height * .5 - 180 * this.scale * .5;
		var step = this.scale;
		var sy = (step == 0 ? x : Math.round(x / step) * step) | 0;
		var _this = this.screen;
		var _this1 = this.hud;
		_this1.posChanged = true;
		_this.posChanged = true;
		_this.x = _this1.x = sx;
		var _this = this.screen;
		var _this1 = this.hud;
		_this1.posChanged = true;
		_this.posChanged = true;
		_this.y = _this1.y = sy;
	}
	,tick: function() {
		var dt = 0.0166666666666666664;
		if(hxd_Key.isDown(86)) {
			dt *= .1;
		}
		SceneManager.update(dt);
		SceneManager.updateBack(dt);
	}
	,tickConstantRate: function() {
		var dt = 0.0166666666666666664;
		SceneManager.updateConstantRate(dt);
		ui_Mute.update(dt);
	}
	,update: function(dt) {
		if(!this.started) {
			return;
		}
		this.updateUsingMouse();
		this.controller.update(dt);
		if(this.hasFocus) {
			this.timeToSimulateConstantRate += dt;
			if(this.hitStopTimer > 0) {
				var y = this.hitStopTimer;
				var rem = dt < y ? dt : y;
				dt -= rem;
				this.hitStopTimer -= rem;
				if(this.hitStopTimer == 0 && this.onHitStopDone != null) {
					this.onHitStopDone();
					this.onHitStopDone = null;
				}
			}
			if(hxd_Key.isDown(67)) {
				dt *= .1;
			}
			this.timeToSimulate += dt;
			if(this.timeToSimulate > 1.) {
				this.timeToSimulate = 1.;
			}
			var ticks = 5;
			while(this.timeToSimulate >= 0.0166666666666666664 && ticks > 0) {
				this.timeToSimulate -= 0.0166666666666666664;
				this.tick();
				if(SceneManager.scenes.length == 0) {
					hxd_System.exit();
				}
				this.controller.afterUpdate();
				--ticks;
			}
			if(this.doubleTick) {
				this.tick();
				this.doubleTick = false;
			}
			ticks = 5;
			while(this.timeToSimulateConstantRate >= 0.0166666666666666664 && ticks > 0) {
				this.timeToSimulateConstantRate -= 0.0166666666666666664;
				this.tickConstantRate();
				--ticks;
			}
			SceneManager.updateAfter(dt);
		}
		var cnt = this.engine.drawCalls;
		if(cnt > this.maxDrawCalls) {
			this.maxDrawCalls = cnt;
			haxe_Log.trace("Draw calls: " + this.maxDrawCalls,{ fileName : "src/Main.hx", lineNumber : 243, className : "Main", methodName : "update"});
		}
		if(hxd_Key.isPressed(27)) {
			hxd_System.exit();
		}
		if(Game.inst != null) {
			if(hxd_Key.isPressed(69)) {
				if(hxd_Key.isDown(16)) {
					Game.inst.loadPreviousLevel();
				} else {
					Game.inst.loadNextLevel();
				}
			}
			if(hxd_Key.isPressed(71)) {
				Game.inst.forceCompleteLevel();
			}
		}
		if(Title.inst != null) {
			if(hxd_Key.isPressed(71)) {
				Title.inst.forceCompleteLevel();
			}
		}
		if(hxd_Key.isPressed(87)) {
			this.setFullscreen(!this.engine.fullScreen);
		}
		this.fpsCounter.update();
		if(hxd_Key.isPressed(77)) {
			ui_Mute.mute();
		}
	}
	,hitStop: function(duration) {
		this.hitStopTimer = duration;
	}
	,render: function(e) {
		e.pushTarget(this.screenTexture);
		e.clear(this.engine.backgroundColor,1);
		SceneManager.renderWorld(e);
		e.popTarget();
		e.pushTarget(this.hudTexture);
		e.clear(this.engine.backgroundColor,1);
		SceneManager.renderHUD(e);
		e.popTarget();
		this.s2d.render(e);
	}
	,updateUsingMouse: function() {
		var _g = 0;
		while(_g < 20) {
			var i = _g++;
			try {
				var action = js_Boot.__cast(i , Int);
				if(this.controller.isDown(action)) {
					this.selectWithMouse = false;
					return;
				}
			} catch( _g1 ) {
				break;
			}
		}
	}
	,__class__: Main
});
Math.__name__ = "Math";
var Palette = function() { };
$hxClasses["Palette"] = Palette;
Palette.__name__ = "Palette";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var h2d_Layers = function(parent) {
	h2d_Object.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
$hxClasses["h2d.Layers"] = h2d_Layers;
h2d_Layers.__name__ = "h2d.Layers";
h2d_Layers.__super__ = h2d_Object;
h2d_Layers.prototype = $extend(h2d_Object.prototype,{
	addChild: function(s) {
		this.add(s,-1);
	}
	,add: function(s,layer,index) {
		if(index == null) {
			index = -1;
		}
		if(layer == null) {
			layer = -1;
		}
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		if(layer == -1) {
			layer = this.layerCount == 0 ? 0 : this.layerCount - 1;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		if(index != -1) {
			if(layer == 0) {
				var b = this.layersIndexes[layer];
				var b1 = index > b ? b : index;
				h2d_Object.prototype.addChildAt.call(this,s,0 < b1 ? b1 : 0);
			} else if(index < 0) {
				h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer - 1]);
			} else {
				var a = this.layersIndexes[layer - 1] + index;
				var b = this.layersIndexes[layer];
				h2d_Object.prototype.addChildAt.call(this,s,a > b ? b : a);
			}
		} else {
			h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		}
		var _g = layer;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			this.layersIndexes[i]++;
		}
	}
	,addChildAt: function(s,index) {
		this.add(s,-1,index);
	}
	,removeChild: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
	,under: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				var pos = 0;
				var _g2 = 0;
				var _g3 = this.layersIndexes;
				while(_g2 < _g3.length) {
					var l = _g3[_g2];
					++_g2;
					if(l > i) {
						break;
					} else {
						pos = l;
					}
				}
				var p = i;
				while(p > pos) {
					this.children[p] = this.children[p - 1];
					--p;
				}
				this.children[pos] = s;
				if(s.allocated) {
					s.onHierarchyMoved(false);
				}
				return;
			}
		}
	}
	,over: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				var _g2 = 0;
				var _g3 = this.layersIndexes;
				while(_g2 < _g3.length) {
					var l = _g3[_g2];
					++_g2;
					if(l > i) {
						var _g4 = i;
						var _g5 = l - 1;
						while(_g4 < _g5) {
							var p = _g4++;
							this.children[p] = this.children[p + 1];
						}
						this.children[l - 1] = s;
						if(s.allocated) {
							s.onHierarchyMoved(false);
						}
						return;
					}
				}
				return;
			}
		}
	}
	,getLayer: function(layer) {
		var a;
		if(layer >= this.layerCount) {
			a = [];
		} else {
			var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
			var max = this.layersIndexes[layer];
			a = this.children.slice(start,max);
		}
		return new hxd_impl_ArrayIterator_$h2d_$Object(a);
	}
	,getChildAtLayer: function(n,layer) {
		if(layer == -1) {
			layer = this.layerCount == 0 ? 0 : this.layerCount - 1;
		}
		if(layer >= this.layerCount || n < 0 || n >= this.layersIndexes[layer]) {
			return null;
		}
		if(layer == 0) {
			return this.children[n];
		}
		return this.children[this.layersIndexes[layer - 1] + n];
	}
	,getChildLayer: function(s) {
		if(s.parent != this) {
			return -1;
		}
		var index = this.children.indexOf(s);
		var _g = 0;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			if(this.layersIndexes[i] > index) {
				return i;
			}
		}
		return -1;
	}
	,getChildIndexInLayer: function(o) {
		if(o.parent != this) {
			return -1;
		}
		var index = this.children.indexOf(o);
		if(index < this.layersIndexes[0]) {
			return index;
		}
		var _g = 1;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			if(this.layersIndexes[i] > index) {
				return index - this.layersIndexes[i - 1];
			}
		}
		return -1;
	}
	,drawLayer: function(ctx,layer) {
		if(layer >= this.layerCount) {
			return;
		}
		var old = ctx.globalAlpha;
		ctx.globalAlpha *= this.alpha;
		var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
		var max = this.layersIndexes[layer];
		if(ctx.front2back) {
			var _g = start;
			var _g1 = max;
			while(_g < _g1) {
				var i = _g++;
				this.children[max - 1 - i].drawRec(ctx);
			}
		} else {
			var _g = start;
			var _g1 = max;
			while(_g < _g1) {
				var i = _g++;
				this.children[i].drawRec(ctx);
			}
		}
		ctx.globalAlpha = old;
	}
	,ysort: function(layer) {
		if(layer >= this.layerCount) {
			return;
		}
		var start = layer == 0 ? 0 : this.layersIndexes[layer - 1];
		var max = this.layersIndexes[layer];
		if(start == max) {
			return;
		}
		var pos = start;
		var ymax = this.children[pos++].y;
		while(pos < max) {
			var c = this.children[pos];
			if(c.y < ymax) {
				var p = pos - 1;
				while(p >= start) {
					var c2 = this.children[p];
					if(c.y >= c2.y) {
						break;
					}
					this.children[p + 1] = c2;
					--p;
				}
				this.children[p + 1] = c;
				if(c.allocated) {
					c.onHierarchyMoved(false);
				}
			} else {
				ymax = c.y;
			}
			++pos;
		}
	}
	,__class__: h2d_Layers
});
var hxd_InteractiveScene = function() { };
$hxClasses["hxd.InteractiveScene"] = hxd_InteractiveScene;
hxd_InteractiveScene.__name__ = "hxd.InteractiveScene";
hxd_InteractiveScene.__isInterface__ = true;
hxd_InteractiveScene.prototype = {
	__class__: hxd_InteractiveScene
};
var h2d_Scene = function() {
	this.scaleMode = h2d_ScaleMode.Resize;
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this._cameras = [];
	new h2d_Camera(this);
	this.set_interactiveCamera(this._cameras[0]);
	this.width = e.width;
	this.height = e.height;
	this.viewportA = 2 / e.width;
	this.viewportD = 2 / e.height;
	this.viewportX = -1;
	this.viewportY = -1;
	this.viewportScaleX = 1;
	this.viewportScaleY = 1;
	this.offsetX = 0;
	this.offsetY = 0;
	this.interactive = [];
	this.eventListeners = [];
	this.shapePoint = new h2d_col_PointImpl(0.,0.);
	this.window = hxd_Window.getInstance();
	this.posChanged = true;
};
$hxClasses["h2d.Scene"] = h2d_Scene;
h2d_Scene.__name__ = "h2d.Scene";
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	get_defaultSmooth: function() {
		return this.ctx.defaultSmooth;
	}
	,set_defaultSmooth: function(v) {
		return this.ctx.defaultSmooth = v;
	}
	,setEvents: function(events) {
		this.events = events;
	}
	,get_zoom: function() {
		var _g = this.scaleMode;
		if(_g._hx_index == 4) {
			var level = _g.level;
			return level | 0;
		} else {
			return 0;
		}
	}
	,set_zoom: function(v) {
		this.set_scaleMode(h2d_ScaleMode.Zoom(v));
		return v;
	}
	,set_scaleMode: function(v) {
		this.scaleMode = v;
		this.checkResize();
		return v;
	}
	,get_renderer: function() {
		return this.ctx;
	}
	,set_renderer: function(v) {
		this.ctx = v;
		return v;
	}
	,get_camera: function() {
		return this._cameras[0];
	}
	,get_cameras: function() {
		return this._cameras;
	}
	,set_interactiveCamera: function(cam) {
		if(cam == null) {
			throw haxe_Exception.thrown("Interactive cammera cannot be null!");
		}
		if(cam.scene != this) {
			this.addCamera(cam);
		}
		return this.interactiveCamera = cam;
	}
	,addCamera: function(cam,pos) {
		if(cam.scene != null) {
			cam.scene.removeCamera(cam);
		}
		cam.scene = this;
		cam.posChanged = true;
		if(pos != null) {
			this._cameras.splice(pos,0,cam);
		} else {
			this._cameras.push(cam);
		}
	}
	,removeCamera: function(cam) {
		if(cam == this.interactiveCamera) {
			throw haxe_Exception.thrown("Current interactive Camera cannot be removed from camera list!");
		}
		cam.scene = null;
		HxOverrides.remove(this._cameras,cam);
	}
	,setFixedSize: function(w,h) {
		this.set_scaleMode(h2d_ScaleMode.Stretch(w,h));
	}
	,checkResize: function() {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		if(engine == null) {
			return;
		}
		var _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			var w = engine.width;
			var h = engine.height;
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = 1;
			_gthis.viewportScaleY = 1;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 1:
			var _width = _g.width;
			var _height = _g.height;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = engine.width / _width;
			_gthis.viewportScaleY = engine.height / _height;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 2:
			var _width = _g.width;
			var _height = _g.height;
			var integerScale = _g.integerScale;
			var horizontalAlign = _g.horizontalAlign;
			var verticalAlign = _g.verticalAlign;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			var a = engine.width / _width;
			var b = engine.height / _height;
			var zoom = a > b ? b : a;
			if(integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			_gthis.viewportA = zoom * 2 / engine.width;
			_gthis.viewportD = zoom * 2 / engine.height;
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom) / (zoom * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom) / 2);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom) / (zoom * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom) / 2);
			}
			break;
		case 3:
			var _width = _g.width;
			var _height = _g.height;
			var zoom = _g.zoom;
			var horizontalAlign = _g.horizontalAlign;
			var verticalAlign = _g.verticalAlign;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			_gthis.viewportA = zoom * 2 / engine.width;
			_gthis.viewportD = zoom * 2 / engine.height;
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom) / (zoom * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom) / 2);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom) / (zoom * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom) / 2);
			}
			break;
		case 4:
			var level = _g.level;
			var w = Math.ceil(engine.width / level);
			var h = Math.ceil(engine.height / level);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = level;
			_gthis.viewportScaleY = level;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 5:
			var minWidth = _g.minWidth;
			var minHeight = _g.minHeight;
			var integerScaling = _g.integerScaling;
			var a = engine.width / minWidth;
			var b = engine.height / minHeight;
			var zoom = a > b ? b : a;
			if(integerScaling) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			var w = Math.ceil(engine.width / zoom);
			var h = Math.ceil(engine.height / zoom);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		}
	}
	,screenXToViewport: function(mx) {
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		return (((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matD - ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matC) * _this.invDet;
	}
	,screenYToViewport: function(my) {
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		return (-((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matB + ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matA) * _this.invDet;
	}
	,get_mouseX: function() {
		this.syncPos();
		var mx = this.window.get_mouseX();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dx = (((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matD - ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matC) * _this.invDet - this.absX;
		if(this.matC == 0) {
			return dx / this.matA;
		}
		var my = this.window.get_mouseY();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dy = (-((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matB + ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matA) * _this.invDet - this.absY;
		return (dx * this.matD - dy * this.matC) / (this.matA * this.matD - this.matB * this.matC);
	}
	,get_mouseY: function() {
		this.syncPos();
		var my = this.window.get_mouseY();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dy = (-((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matB + ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matA) * _this.invDet - this.absY;
		if(this.matB == 0) {
			return dy / this.matD;
		}
		var mx = this.window.get_mouseX();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dx = (((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matD - ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matC) * _this.invDet - this.absX;
		return (dy * this.matA - dx * this.matB) / (this.matA * this.matD - this.matB * this.matC);
	}
	,dispatchListeners: function(event) {
		this.screenToViewport(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,getInteractive: function(x,y) {
		var pt = this.shapePoint;
		var _g = 0;
		var _g1 = this.interactive;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.posChanged) {
				i.syncPos();
			}
			var dx = x - i.absX;
			var dy = y - i.absY;
			var rx = (dx * i.matD - dy * i.matC) * i.invDet;
			var ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				var x1 = rx + i.shapeX;
				var y1 = ry + i.shapeY;
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				pt.x = x1;
				pt.y = y1;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			return i;
		}
		return null;
	}
	,screenToViewport: function(e) {
		this.interactiveCamera.eventToCamera(e);
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToViewport(event);
		var dx = event.relX - i.absX;
		var dy = event.relY - i.absY;
		var rx = (dx * i.matD - dy * i.matC) * i.invDet;
		var ry = (dy * i.matA - dx * i.matB) * i.invDet;
		event.relX = rx;
		event.relY = ry;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToViewport(event);
		var ex = event.relX;
		var ey = event.relY;
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var pt = this.shapePoint;
		var _g = index;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var idx = _g++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			if(i.invDet == 0) {
				continue;
			}
			var dx = ex - i.absX;
			var dy = ey - i.absY;
			var rx = (dx * i.matD - dy * i.matC) * i.invDet;
			var ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				var x = rx + i.shapeX;
				var y = ry + i.shapeY;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				pt.x = x;
				pt.y = y;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = rx;
			event.relY = ry;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,addEventListener: function(f) {
		this.eventListeners.push(f);
	}
	,removeEventListener: function(f) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e == f) {
				HxOverrides.remove(this.eventListeners,e);
				return true;
			}
		}
		return false;
	}
	,startCapture: function(onEvent,onCancel,touchId) {
		var _gthis = this;
		this.events.startCapture(function(e) {
			_gthis.screenToViewport(e);
			onEvent(e);
		},onCancel,touchId);
	}
	,stopCapture: function() {
		this.events.stopCapture();
	}
	,startDrag: function(onEvent,onCancel,refEvent) {
		this.startCapture(onEvent,onCancel,refEvent != null ? refEvent.touchId : null);
	}
	,stopDrag: function() {
		this.stopCapture();
	}
	,getFocus: function() {
		if(this.events == null) {
			return null;
		}
		var f = this.events.getFocus();
		if(f == null) {
			return null;
		}
		var i = ((f) instanceof h2d_Interactive) ? f : null;
		if(i == null) {
			return null;
		}
		return this.interactive[this.interactive.indexOf(i)];
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g = 0;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var index = _g++;
			var i1 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv;
			}
			var lv2 = lv;
			var p1 = i1;
			var p2 = i2;
			while(lv1 > lv2) {
				i1 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv2 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv2;
			}
			while(p1 != p2) {
				i1 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g2 = 0;
			var _g3 = p1.children.length;
			while(_g2 < _g3) {
				var k = _g2++;
				if(p1.children[k] == i1) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g4 = 0;
			var _g5 = p2.children.length;
			while(_g4 < _g5) {
				var k1 = _g4++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,dispose: function() {
		if(this.allocated) {
			this.onRemove();
		}
		this.ctx.dispose();
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,drawImplTo: function(s,texs,outputs) {
		var _g = 0;
		while(_g < texs.length) {
			var t = texs[_g];
			++_g;
			if((t.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) == 0) {
				throw haxe_Exception.thrown("Can only draw to texture created with Target flag");
			}
		}
		this.ctx.engine = h3d_Engine.CURRENT;
		var oldBG = this.ctx.engine.backgroundColor;
		var inRender = this.ctx.engine.inRender;
		this.ctx.engine.backgroundColor = null;
		this.ctx.globalAlpha = this.alpha;
		var prevCtx = h3d_impl_RenderContext.get();
		if(!inRender) {
			this.ctx.engine.begin();
			this.ctx.begin();
		} else if(this.ctx.targetFlipY == 0) {
			this.ctx.begin();
		}
		this.ctx.pushTargets(texs);
		if(outputs != null) {
			this.ctx.output.setOutput(outputs);
		}
		s.drawRec(this.ctx);
		if(outputs != null) {
			this.ctx.output.setOutput();
		}
		this.ctx.popTarget();
		this.ctx.engine.backgroundColor = oldBG;
		if(!inRender) {
			this.ctx.end();
			this.ctx.engine.end();
		}
		if(prevCtx != null) {
			prevCtx.setCurrent();
		}
	}
	,syncOnly: function(et) {
		var engine = h3d_Engine.CURRENT;
		this.setElapsedTime(et);
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	,sync: function(ctx) {
		var forceCamSync = this.posChanged;
		if(!this.allocated) {
			this.onAdd();
		}
		h2d_Layers.prototype.sync.call(this,ctx);
		var _g = 0;
		var _g1 = this._cameras;
		while(_g < _g1.length) {
			var cam = _g1[_g];
			++_g;
			cam.sync(ctx,forceCamSync);
		}
	}
	,clipBounds: function(ctx,bounds,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1.;
		}
		if(scaleX == null) {
			scaleX = 1.;
		}
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			var tmpA = this.matA * f1.x + this.matB * f1.y;
			var tmpB = this.matA * f2.x + this.matB * f2.y;
			var tmpC = this.matC * f1.x + this.matD * f1.y;
			var tmpD = this.matC * f2.x + this.matD * f2.y;
			var tmpX = this.absX * f1.x + this.absY * f1.y + f1.z;
			var tmpY = this.absX * f2.x + this.absY * f2.y + f2.z;
			matA = (tmpA * ctx.viewA + tmpB * ctx.viewC) / scaleX;
			matB = (tmpA * ctx.viewB + tmpB * ctx.viewD) / scaleY;
			matC = (tmpC * ctx.viewA + tmpD * ctx.viewC) / scaleX;
			matD = (tmpC * ctx.viewB + tmpD * ctx.viewD) / scaleY;
			absX = tmpX * ctx.viewA + tmpY * ctx.viewC + ctx.viewX;
			absY = tmpX * ctx.viewB + tmpY * ctx.viewD + ctx.viewY;
		} else {
			matA = (this.matA * ctx.viewA + this.matB * ctx.viewC) / scaleX;
			matB = (this.matA * ctx.viewB + this.matB * ctx.viewD) / scaleY;
			matC = (this.matC * ctx.viewA + this.matD * ctx.viewC) / scaleX;
			matD = (this.matC * ctx.viewB + this.matD * ctx.viewD) / scaleY;
			absX = this.absX * ctx.viewA + this.absY * ctx.viewC + ctx.viewX;
			absY = this.absX * ctx.viewB + this.absY * ctx.viewD + ctx.viewY;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		bounds.xMin = ((-1 - absX) * matD + (absY + 1) * matC) * invDet;
		bounds.yMin = ((absX + 1) * matB + (-1 - absY) * matA) * invDet;
		bounds.xMax = ((1 - absX) * matD + (absY - 1) * matC) * invDet;
		bounds.yMax = ((absX - 1) * matB + (1 - absY) * matA) * invDet;
	}
	,drawContent: function(ctx) {
		if(ctx.front2back) {
			var _g = 0;
			var _g1 = this._cameras;
			while(_g < _g1.length) {
				var cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				var i = this.children.length;
				var l = this.layerCount;
				cam.enter(ctx);
				while(l-- > 0) {
					var top = l == 0 ? 0 : this.layersIndexes[l - 1];
					if(cam.layerVisible(l)) {
						while(i >= top) this.children[i--].drawRec(ctx);
					} else {
						i = top - 1;
					}
				}
				cam.exit(ctx);
			}
			this.draw(ctx);
		} else {
			this.draw(ctx);
			var _g = 0;
			var _g1 = this._cameras;
			while(_g < _g1.length) {
				var cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				var i = 0;
				var l = 0;
				cam.enter(ctx);
				while(l < this.layerCount) {
					var top = this.layersIndexes[l++];
					if(cam.layerVisible(l - 1)) {
						while(i < top) this.children[i++].drawRec(ctx);
					} else {
						i = top;
					}
				}
				cam.exit(ctx);
			}
		}
	}
	,onAdd: function() {
		this.checkResize();
		h2d_Layers.prototype.onAdd.call(this);
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	,onRemove: function() {
		h2d_Layers.prototype.onRemove.call(this);
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
	,captureBitmap: function(target) {
		var engine = h3d_Engine.CURRENT;
		if(target == null) {
			var tex = new h3d_mat_Texture(this.width,this.height,[h3d_mat_TextureFlags.Target]);
			target = new h2d_Tile(tex,0,0,this.width,this.height);
		}
		engine.begin();
		engine.setRenderZone(target.x | 0,target.y | 0,Math.ceil(target.width),Math.ceil(target.height));
		var tex = target.innerTex;
		engine.pushTarget(tex);
		var ow = this.width;
		var oh = this.height;
		var ova = this.viewportA;
		var ovd = this.viewportD;
		var ovx = this.viewportX;
		var ovy = this.viewportY;
		this.width = tex.width;
		this.height = tex.height;
		this.viewportA = 2 / this.width;
		this.viewportD = 2 / this.height;
		this.viewportX = -1;
		this.viewportY = -1;
		this.posChanged = true;
		this.render(engine);
		engine.popTarget();
		this.width = ow;
		this.height = oh;
		this.viewportA = ova;
		this.viewportD = ovd;
		this.viewportX = ovx;
		this.viewportY = ovy;
		this.posChanged = true;
		engine.setRenderZone();
		engine.end();
		return new h2d_Bitmap(target);
	}
	,__class__: h2d_Scene
});
var PixelPerfectScene = function() {
	h2d_Scene.call(this);
};
$hxClasses["PixelPerfectScene"] = PixelPerfectScene;
PixelPerfectScene.__name__ = "PixelPerfectScene";
PixelPerfectScene.__super__ = h2d_Scene;
PixelPerfectScene.prototype = $extend(h2d_Scene.prototype,{
	screenToViewport: function(e) {
		e.relX = (e.relX - Main.inst.screen.x) / Main.inst.scale;
		e.relY = (e.relY - Main.inst.screen.y) / Main.inst.scale;
	}
	,__class__: PixelPerfectScene
});
var SceneManager = function() { };
$hxClasses["SceneManager"] = SceneManager;
SceneManager.__name__ = "SceneManager";
SceneManager.init = function() {
	SceneManager.scenes = [];
	SceneManager.updateLastMaskingId();
};
SceneManager.deleteAll = function() {
	while(SceneManager.scenes.length > 0) {
		SceneManager.scenes[SceneManager.scenes.length - 1].delete();
		SceneManager.scenes.pop();
	}
	SceneManager.updateLastMaskingId();
};
SceneManager.update = function(dt) {
	var i = SceneManager.scenes.length - 1;
	while(i >= 0) {
		var scene = SceneManager.scenes[i];
		scene.update(dt);
		if(scene.maskUpdate) {
			break;
		}
		--i;
	}
	var i = 0;
	while(i < SceneManager.scenes.length) if(SceneManager.scenes[i].deleted) {
		SceneManager.remove(SceneManager.scenes[i]);
		SceneManager.scenes.splice(i,1);
	} else {
		++i;
	}
};
SceneManager.updateBack = function(dt) {
	var _g = 0;
	var _g1 = SceneManager.scenes;
	while(_g < _g1.length) {
		var scene = _g1[_g];
		++_g;
		scene.updateBack(dt);
	}
	var i = 0;
	while(i < SceneManager.scenes.length) if(SceneManager.scenes[i].deleted) {
		SceneManager.remove(SceneManager.scenes[i]);
		SceneManager.scenes.splice(i,1);
	} else {
		++i;
	}
};
SceneManager.updateConstantRate = function(dt) {
	var i = SceneManager.scenes.length - 1;
	while(i >= 0) {
		var scene = SceneManager.scenes[i];
		scene.updateConstantRate(dt);
		if(scene.maskUpdate) {
			break;
		}
		--i;
	}
	var i = 0;
	while(i < SceneManager.scenes.length) if(SceneManager.scenes[i].deleted) {
		SceneManager.remove(SceneManager.scenes[i]);
		SceneManager.scenes.splice(i,1);
	} else {
		++i;
	}
};
SceneManager.updateAfter = function(dt) {
	var i = SceneManager.scenes.length - 1;
	while(i >= 0) {
		var scene = SceneManager.scenes[i];
		scene.updateAfter(dt);
		if(scene.maskUpdate) {
			break;
		}
		--i;
	}
};
SceneManager.checkDeletedScenes = function() {
	var i = 0;
	while(i < SceneManager.scenes.length) if(SceneManager.scenes[i].deleted) {
		SceneManager.remove(SceneManager.scenes[i]);
		SceneManager.scenes.splice(i,1);
	} else {
		++i;
	}
};
SceneManager.updateLastMaskingId = function() {
	if(SceneManager.scenes.length == 0) {
		SceneManager.lastMaskingId = -1;
		return;
	}
	SceneManager.lastMaskingId = 0;
	var _g = 0;
	var _g1 = SceneManager.scenes.length;
	while(_g < _g1) {
		var i = _g++;
		if(SceneManager.scenes[i].masking) {
			SceneManager.lastMaskingId = i;
		}
	}
};
SceneManager.renderWorld = function(e) {
	if(SceneManager.lastMaskingId == -1) {
		return;
	}
	var _g = SceneManager.lastMaskingId;
	var _g1 = SceneManager.scenes.length;
	while(_g < _g1) {
		var i = _g++;
		SceneManager.scenes[i].renderWorld(e);
	}
};
SceneManager.renderHUD = function(e) {
	if(SceneManager.lastMaskingId == -1) {
		return;
	}
	var _g = SceneManager.lastMaskingId;
	var _g1 = SceneManager.scenes.length;
	while(_g < _g1) {
		var i = _g++;
		SceneManager.scenes[i].renderHUD(e);
	}
};
SceneManager.add = function(scene) {
	if(SceneManager.scenes.length > 0) {
		if(SceneManager.scenes[SceneManager.scenes.length - 1].onFocusLoss != null) {
			SceneManager.scenes[SceneManager.scenes.length - 1].onFocusLoss();
		}
	}
	SceneManager.scenes.push(scene);
	SceneManager.updateLastMaskingId();
};
SceneManager.remove = function(scene) {
	HxOverrides.remove(SceneManager.scenes,scene);
	if(SceneManager.scenes.length > 0) {
		if(SceneManager.scenes[SceneManager.scenes.length - 1].onFocusGain != null) {
			SceneManager.scenes[SceneManager.scenes.length - 1].onFocusGain();
		}
	}
	SceneManager.updateLastMaskingId();
};
var StableKind = $hxEnums["StableKind"] = { __ename__:"StableKind",__constructs__:null
	,Fast: {_hx_name:"Fast",_hx_index:0,__enum__:"StableKind",toString:$estr}
	,Precise: {_hx_name:"Precise",_hx_index:1,__enum__:"StableKind",toString:$estr}
};
StableKind.__constructs__ = [StableKind.Fast,StableKind.Precise];
StableKind.__empty_constructs__ = [StableKind.Fast,StableKind.Precise];
var SecondOrderDynamics = function(f,z,r,initialPos,stableKind) {
	this.reset(initialPos);
	var ft = 6.28318530718 * f;
	this.k1 = 2 * z / ft;
	this.k2 = 1 / (ft * ft);
	this.k3 = r * z / ft;
	this.dtCrit = .8 * (Math.sqrt(4 * this.k2 + this.k1 * this.k1) - this.k1);
	this.stableKind = stableKind;
};
$hxClasses["SecondOrderDynamics"] = SecondOrderDynamics;
SecondOrderDynamics.__name__ = "SecondOrderDynamics";
SecondOrderDynamics.prototype = {
	reset: function(initialPos) {
		this.prevTargetPos = this.pos = initialPos;
		this.vel = 0;
	}
	,update: function(dt,targetPos,targetVel) {
		var _gthis = this;
		if(dt == 0) {
			return;
		}
		if(targetVel == null) {
			targetVel = (targetPos - this.prevTargetPos) / dt;
			this.prevTargetPos = targetPos;
		}
		switch(this.stableKind._hx_index) {
		case 0:
			var k2Stable = Math.max(this.k2,1.1 * (dt * dt / 4 + dt * this.k1 / 2));
			var _g = 0;
			var _g1 = 1;
			while(_g < _g1) {
				var i = _g++;
				_gthis.pos += dt * _gthis.vel;
				_gthis.vel += dt * (targetPos + _gthis.k3 * targetVel - _gthis.pos - _gthis.k1 * _gthis.vel) / k2Stable;
			}
			break;
		case 1:
			var iterations = Math.ceil(dt / this.dtCrit);
			var dt1 = dt / iterations;
			var k2 = this.k2;
			var _g = 0;
			var _g1 = iterations;
			while(_g < _g1) {
				var i = _g++;
				_gthis.pos += dt1 * _gthis.vel;
				_gthis.vel += dt1 * (targetPos + _gthis.k3 * targetVel - _gthis.pos - _gthis.k1 * _gthis.vel) / k2;
			}
			break;
		}
	}
	,getKineticEnergy: function() {
		return .5 * this.k2 * this.vel * this.vel;
	}
	,getPotentialEnergy: function() {
		var dpos = this.pos - this.prevTargetPos;
		return .5 * this.k1 * dpos * dpos;
	}
	,getEnergy: function() {
		var dpos = this.pos - this.prevTargetPos;
		return .5 * this.k2 * this.vel * this.vel + .5 * this.k1 * dpos * dpos;
	}
	,__class__: SecondOrderDynamics
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var LevelCellState = $hxEnums["LevelCellState"] = { __ename__:"LevelCellState",__constructs__:null
	,Locked: {_hx_name:"Locked",_hx_index:0,__enum__:"LevelCellState",toString:$estr}
	,Unlocking: {_hx_name:"Unlocking",_hx_index:1,__enum__:"LevelCellState",toString:$estr}
	,Unlocked: {_hx_name:"Unlocked",_hx_index:2,__enum__:"LevelCellState",toString:$estr}
	,Completing: {_hx_name:"Completing",_hx_index:3,__enum__:"LevelCellState",toString:$estr}
	,Completed: {_hx_name:"Completed",_hx_index:4,__enum__:"LevelCellState",toString:$estr}
};
LevelCellState.__constructs__ = [LevelCellState.Locked,LevelCellState.Unlocking,LevelCellState.Unlocked,LevelCellState.Completing,LevelCellState.Completed];
LevelCellState.__empty_constructs__ = [LevelCellState.Locked,LevelCellState.Unlocking,LevelCellState.Unlocked,LevelCellState.Completing,LevelCellState.Completed];
var LevelCell = function(id,parent,group,i,j,state,onClick,onOver,onOut,onCompleted) {
	this.timer = 0.;
	this.state = LevelCellState.Locked;
	this.selected = false;
	var _gthis = this;
	h2d_Flow.call(this,parent);
	this.id = id;
	this.group = group;
	this.cellI = i;
	this.cellJ = j;
	this.onCompleted = onCompleted;
	this.lockedTiles = Assets.getAnimData("entities","levelCellLocked").tiles;
	this.set_backgroundTile(Assets.getTile("entities","levelCell"));
	this.set_borderWidth(this.set_borderHeight(6));
	this.set_minWidth(this.set_minHeight(26));
	this.set_horizontalAlign(this.set_verticalAlign(h2d_FlowAlign.Middle));
	this.lockBitmap = new h2d_Bitmap(this.lockedTiles[0],this);
	this.levelText = new h2d_Text(Assets.fontLarge,this);
	this.levelText.set_text(id == null ? "null" : "" + id);
	var props = this.getProperties(this.levelText);
	props.offsetX = 1;
	props.offsetY = -1;
	this.set_enableInteractive(true);
	this.interactive.onClick = function(e) {
		if(_gthis.state == LevelCellState.Locked) {
			return;
		}
		onClick();
	};
	this.interactive.onOver = function(e) {
		if(_gthis.state == LevelCellState.Locked) {
			return;
		}
		if(!Main.inst.selectWithMouse) {
			return;
		}
		onOver();
	};
	this.interactive.onOut = function(e) {
		if(_gthis.state == LevelCellState.Locked) {
			return;
		}
		onOut();
	};
	this.set_state(state);
	this.interactive.name = "levelCell" + id;
	var data = Assets.getAnimData("entities","cellBorder");
	this.selectedBorder = new Anim(data.tiles,data.fps,true,this);
	props = this.getProperties(this.selectedBorder);
	props.set_isAbsolute(true);
	this.over = new h2d_ScaleGrid(Assets.getTile("entities","levelCellOver"),6,6,6,6,this);
	this.over.set_width(this.over.set_height(26));
	props = this.getProperties(this.over);
	props.set_isAbsolute(true);
	this.over.set_visible(false);
	this.updateGraphics();
};
$hxClasses["LevelCell"] = LevelCell;
LevelCell.__name__ = "LevelCell";
LevelCell.__super__ = h2d_Flow;
LevelCell.prototype = $extend(h2d_Flow.prototype,{
	set_selected: function(v) {
		this.selectedBorder.set_visible(this.state != LevelCellState.Locked && v);
		if(this.state == LevelCellState.Locked) {
			return v;
		}
		this.selected = v;
		this.updateGraphics();
		return v;
	}
	,update: function(dt) {
		this.selectedBorder.update(dt);
		if(this.state == LevelCellState.Unlocking) {
			this.timer += dt;
			if(this.timer > .2) {
				this.set_state(LevelCellState.Unlocked);
			}
			this.updateGraphics();
		} else if(this.state == LevelCellState.Completing) {
			this.timer += dt;
			if(this.timer > .5) {
				this.set_state(LevelCellState.Completed);
				this.over.set_visible(false);
				this.onCompleted();
			} else {
				var t = this.timer / .5;
				this.over.alpha = 1. - t;
			}
			this.updateGraphics();
		}
	}
	,unlock: function() {
		if(this.state != LevelCellState.Locked) {
			return;
		}
		this.set_state(LevelCellState.Unlocking);
		this.timer = 0;
		this.updateGraphics();
	}
	,complete: function() {
		if(this.state != LevelCellState.Unlocked) {
			return;
		}
		this.set_state(LevelCellState.Completing);
		this.timer = 0;
		this.over.set_visible(true);
		var pos = Title.inst.getCellPos(this.group,this.cellI,this.cellJ);
		Title.inst.fx.levelCellCompleted(pos.x,pos.y);
		this.updateGraphics();
		audio_Audio.playSound("cellComplete");
	}
	,updateGraphics: function() {
		switch(this.state._hx_index) {
		case 0:
			this.lockBitmap.set_visible(true);
			this.levelText.set_visible(false);
			this.set_backgroundTile(h2d_Tile.fromColor(0,1,1,0));
			break;
		case 1:
			var x = this.timer / .2;
			var t = x < .99 ? x : .99;
			this.lockBitmap.set_visible(true);
			this.levelText.set_visible(false);
			this.set_backgroundTile(this.lockedTiles[t * this.lockedTiles.length | 0]);
			break;
		case 2:
			this.lockBitmap.set_visible(false);
			this.levelText.set_visible(true);
			this.set_backgroundTile(Assets.getTile("entities",this.selected ? "levelCellSelected" : "levelCell"));
			this.levelText.set_textColor(9149364);
			break;
		case 3:
			this.lockBitmap.set_visible(false);
			this.levelText.set_visible(true);
			this.set_backgroundTile(Assets.getTile("entities",(this.selected ? "levelCellCompletedSelected" : "levelCellCompleted") + this.group));
			this.levelText.set_textColor(16777215);
			break;
		case 4:
			this.lockBitmap.set_visible(false);
			this.levelText.set_visible(true);
			this.set_backgroundTile(Assets.getTile("entities",(this.selected ? "levelCellCompletedSelected" : "levelCellCompleted") + this.group));
			this.levelText.set_textColor(16777215);
			break;
		}
		if(this.levelText.visible) {
			this.levelText.alpha = this.selected ? 1 : .85;
		}
	}
	,set_state: function(v) {
		this.state = v;
		this.interactive.set_cursor(this.state == LevelCellState.Locked ? hxd_Cursor.Default : hxd_Cursor.Button);
		return v;
	}
	,__class__: LevelCell
});
var Title = function(curLevelId) {
	this.curMusicName = null;
	this.timer = 0.;
	this.toShowUnlocked = [];
	this.toShowComplete = [];
	this.lastMovementAction = 9;
	this.repeatTimer = 0.;
	this.holdTimer = 0.;
	this.cells = [];
	this.curGroup = 0;
	this.curJ = 0;
	this.curI = 0;
	Scene.call(this);
	if(Title.inst != null) {
		throw haxe_Exception.thrown("Title scene already exists");
	}
	Title.inst = this;
	this.fx = new fx_Fx(this.hud,this.hud,this.hud,Title.LAYER_FX_FRONT,Title.LAYER_FX_MID,Title.LAYER_FX_BACK);
	var allLevelsCompleted = save_Save.gameData.data.areAllLevelsCompleted();
	this.container = new h2d_Flow();
	this.hud.add(this.container,Title.LAYER_HUD);
	this.container.set_minWidth(320);
	this.container.set_minHeight(180);
	this.container.set_layout(h2d_FlowLayout.Vertical);
	this.container.set_horizontalAlign(h2d_FlowAlign.Middle);
	this.container.set_paddingTop(allLevelsCompleted ? 8 : 16);
	this.container.set_backgroundTile(h2d_Tile.fromColor(1578021,1,1));
	var title = new h2d_Text(Assets.fontLarge,this.container);
	title.set_text(allLevelsCompleted ? "ALL LEVELS CLEARED!" : "SELECT A LEVEL");
	title.set_textColor(16705377);
	this.gameText = new h2d_Text(Assets.font,this.hud);
	this.gameText.set_textColor(3818598);
	this.gameText.set_text("Boxed Boxes v" + "1.1.1");
	var _this = this.gameText;
	_this.posChanged = true;
	_this.x = 1;
	var _this = this.gameText;
	var v = 180 - this.gameText.get_textHeight() + 1;
	_this.posChanged = true;
	_this.y = v;
	this.authorText = new h2d_Text(Assets.font,this.hud);
	this.authorText.set_textColor(3818598);
	this.authorText.set_text("by jebouin");
	var _this = this.authorText;
	var v = 320 - this.authorText.get_textWidth();
	_this.posChanged = true;
	_this.x = v;
	var _this = this.authorText;
	var v = 180 - this.authorText.get_textHeight() + 1;
	_this.posChanged = true;
	_this.y = v;
	this.createSpeedrunFlow();
	this.createMenu();
	this.curI = (curLevelId - 1) % 9 / 3 | 0;
	this.curJ = (curLevelId - 1) % 3;
	this.curGroup = (curLevelId - 1) / 9 | 0;
	this.updateSelected();
};
$hxClasses["Title"] = Title;
Title.__name__ = "Title";
Title.__super__ = Scene;
Title.prototype = $extend(Scene.prototype,{
	createSpeedrunFlow: function() {
		this.speedrunFlow = new ui_KeyValueFlow(this.hud,120);
		var _this = this.speedrunFlow;
		var v = 160 - this.speedrunFlow.get_outerWidth() * .5;
		_this.posChanged = true;
		_this.x = v;
		var _this = this.speedrunFlow;
		_this.posChanged = true;
		_this.y = 145;
		var levelTimeLine = this.speedrunFlow.addLine();
		this.levelTimeText = levelTimeLine.key;
		this.levelTimeValueText = levelTimeLine.value;
		var timeSumLine = this.speedrunFlow.addLine("Sum of best:",Game.formatTimer(save_Save.gameData.data.getLevelTimeSum()));
		this.timeSumText = timeSumLine.key;
		this.timeSumValueText = timeSumLine.value;
	}
	,createMenu: function() {
		var _gthis = this;
		if(this.menu != null) {
			var _this = this.menu;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.cells = [];
		}
		this.menu = new h2d_Flow(this.container);
		this.menu.set_paddingTop(15);
		this.menu.set_horizontalSpacing(12);
		var completedCount = 0;
		var _g = 0;
		while(_g < 3) {
			var k = [_g++];
			this.cells.push([]);
			var group = new h2d_Flow(this.menu);
			group.set_layout(h2d_FlowLayout.Vertical);
			group.set_horizontalAlign(h2d_FlowAlign.Middle);
			group.set_verticalSpacing(5);
			group.set_backgroundTile(Assets.getTile("entities","groupBorder" + k[0]));
			group.set_borderWidth(group.set_borderHeight(6));
			group.set_paddingTop(3);
			group.set_paddingBottom(3);
			var v = 3;
			group.set_paddingLeft(v);
			group.set_paddingRight(v);
			var groupTitle = new h2d_Text(Assets.font,group);
			groupTitle.set_text(Title.GROUP_NAMES[k[0]]);
			groupTitle.set_textColor(Title.GROUP_COLORS[k[0]]);
			var prevCompletedCount = completedCount;
			var groupLocked = completedCount < Title.GROUP_COMPLETED_TO_UNLOCK[k[0]];
			var groupMenu = new h2d_Flow(group);
			groupMenu.set_layout(h2d_FlowLayout.Vertical);
			groupMenu.set_verticalSpacing(1);
			var _g1 = 0;
			while(_g1 < 3) {
				var i = [_g1++];
				this.cells[k[0]].push([]);
				var row = new h2d_Flow(groupMenu);
				row.set_horizontalSpacing(1);
				var _g2 = 0;
				while(_g2 < 3) {
					var j = [_g2++];
					var levelId = [k[0] * 3 * 3 + i[0] * 3 + j[0] + 1];
					var completed = save_Save.gameData.data.levelsCompleted.h[levelId[0]];
					var completedShown = save_Save.gameData.data.levelsCompletedShown.h[levelId[0]];
					var topCompleted = i[0] > 0 && save_Save.gameData.data.levelsCompleted.h[levelId[0] - 3];
					var leftCompleted = j[0] > 0 && save_Save.gameData.data.levelsCompleted.h[levelId[0] - 1];
					var bottomCompleted = i[0] < 2 && save_Save.gameData.data.levelsCompleted.h[levelId[0] + 3];
					var rightCompleted = j[0] < 2 && save_Save.gameData.data.levelsCompleted.h[levelId[0] + 1];
					var topCompletedShown = i[0] > 0 && save_Save.gameData.data.levelsCompletedShown.h[levelId[0] - 3];
					var leftCompletedShown = j[0] > 0 && save_Save.gameData.data.levelsCompletedShown.h[levelId[0] - 1];
					var bottomCompletedShown = i[0] < 2 && save_Save.gameData.data.levelsCompletedShown.h[levelId[0] + 3];
					var rightCompletedShown = j[0] < 2 && save_Save.gameData.data.levelsCompletedShown.h[levelId[0] + 1];
					var locked = groupLocked || (i[0] > 0 || j[0] > 0) && !topCompleted && !leftCompleted && !rightCompleted && !bottomCompleted && !completed;
					var lockedShown = groupLocked || (i[0] > 0 || j[0] > 0) && !topCompletedShown && !leftCompletedShown && !rightCompletedShown && !bottomCompletedShown && !completedShown;
					var state = lockedShown && !completed ? LevelCellState.Locked : completedShown ? LevelCellState.Completed : LevelCellState.Unlocked;
					var cell = new LevelCell(levelId[0],row,k[0],i[0],j[0],state,(function(j,i,k) {
						return function() {
							_gthis.chooseLevel(k[0],i[0],j[0]);
						};
					})(j,i,k),(function(j,i,k) {
						return function() {
							_gthis.curI = i[0];
							_gthis.curJ = j[0];
							_gthis.curGroup = k[0];
							audio_Audio.playSound("menuMove");
							_gthis.updateSelected();
						};
					})(j,i,k),(function() {
						return function() {
						};
					})(),(function(levelId) {
						return function() {
							save_Save.gameData.data.showCompletedLevel(levelId[0]);
						};
					})(levelId));
					if(state == LevelCellState.Unlocked && completed) {
						this.toShowComplete.push(cell);
					}
					if(state == LevelCellState.Locked && !locked) {
						this.toShowUnlocked.push(cell);
					}
					this.cells[k[0]][i[0]].push(cell);
					if(completed) {
						++completedCount;
					}
				}
			}
			if(groupLocked) {
				var width = group.get_outerWidth();
				var height = group.get_outerHeight();
				groupTitle.set_visible(groupMenu.set_visible(false));
				var lockText = new h2d_Text(Assets.font,group);
				lockText.set_text("LOCKED\n" + prevCompletedCount + "/" + Title.GROUP_COMPLETED_TO_UNLOCK[k[0]]);
				lockText.set_maxWidth(36);
				lockText.set_textColor(3818598);
				lockText.set_textAlign(h2d_Align.Center);
				group.set_minWidth(width);
				group.set_minHeight(height);
			}
		}
	}
	,'delete': function() {
		Scene.prototype.delete.call(this);
		this.fx.clear();
		Title.inst = null;
	}
	,update: function(dt) {
		var _gthis = this;
		Scene.prototype.update.call(this,dt);
		this.cells[0][0][0].update(dt);
		this.cells[0][0][1].update(dt);
		this.cells[0][0][2].update(dt);
		this.cells[0][1][0].update(dt);
		this.cells[0][1][1].update(dt);
		this.cells[0][1][2].update(dt);
		this.cells[0][2][0].update(dt);
		this.cells[0][2][1].update(dt);
		this.cells[0][2][2].update(dt);
		this.cells[1][0][0].update(dt);
		this.cells[1][0][1].update(dt);
		this.cells[1][0][2].update(dt);
		this.cells[1][1][0].update(dt);
		this.cells[1][1][1].update(dt);
		this.cells[1][1][2].update(dt);
		this.cells[1][2][0].update(dt);
		this.cells[1][2][1].update(dt);
		this.cells[1][2][2].update(dt);
		this.cells[2][0][0].update(dt);
		this.cells[2][0][1].update(dt);
		this.cells[2][0][2].update(dt);
		this.cells[2][1][0].update(dt);
		this.cells[2][1][1].update(dt);
		this.cells[2][1][2].update(dt);
		this.cells[2][2][0].update(dt);
		this.cells[2][2][1].update(dt);
		this.cells[2][2][2].update(dt);
		this.timer += dt;
		if(this.toShowComplete.length > 0) {
			if(this.timer > Title.SHOW_COMPLETED_DELAY) {
				this.timer -= Title.SHOW_COMPLETED_INTERVAL;
				var cell = this.toShowComplete.shift();
				cell.complete();
				if(this.toShowComplete.length == 0) {
					this.timer = 0.;
				}
			}
		} else if(this.toShowUnlocked.length > 0) {
			var unlocked = false;
			while(this.toShowUnlocked.length > 0 && this.timer > Title.SHOW_UNLOCKED_DELAY) {
				unlocked = true;
				this.timer -= Title.SHOW_UNLOCKED_INTERVAL;
				var cell = this.toShowUnlocked.shift();
				cell.unlock();
				if(this.toShowUnlocked.length == 0) {
					this.timer = 0.;
				}
			}
			if(unlocked) {
				audio_Audio.playSound("cellUnlock");
			}
		}
		var controller = Main.inst.controller;
		if(controller.isPressed(8)) {
			this.lastMovementAction = 8;
			this.holdTimer = 0;
			this.tryMoveSelection(0,-1);
		}
		if(controller.isPressed(6)) {
			this.lastMovementAction = 6;
			this.holdTimer = 0;
			this.tryMoveSelection(0,1);
		}
		if(controller.isPressed(5)) {
			this.lastMovementAction = 5;
			this.holdTimer = 0;
			this.tryMoveSelection(-1,0);
		}
		if(controller.isPressed(7)) {
			this.lastMovementAction = 7;
			this.holdTimer = 0;
			this.tryMoveSelection(1,0);
		}
		var checkHoldAction = function(action,di,dj) {
			if(_gthis.lastMovementAction == action) {
				if(controller.isDown(action)) {
					_gthis.holdTimer += dt;
					if(_gthis.holdTimer > .22) {
						_gthis.repeatTimer += dt;
						if(_gthis.repeatTimer > .08) {
							_gthis.repeatTimer -= .08;
							_gthis.tryMoveSelection(di,dj);
						}
					}
				} else {
					_gthis.holdTimer = 0;
				}
			}
		};
		checkHoldAction(8,0,-1);
		checkHoldAction(6,0,1);
		checkHoldAction(5,-1,0);
		checkHoldAction(7,1,0);
		if(controller.isPressed(9)) {
			this.chooseLevel(this.curGroup,this.curI,this.curJ);
		}
		this.fx.update(dt);
	}
	,updateConstantRate: function(dt) {
		this.fx.updateConstantRate(dt);
		save_Save.gameData.data.update(dt);
	}
	,chooseLevel: function(curGroup,curI,curJ) {
		audio_Audio.playSound("menuSelect");
		this.delete();
		audio_Audio.stopMusic(audio_Audio.MUSIC_FADE_IN_TIME);
		audio_Audio.playMusic(Title.GROUP_MUSIC_NAMES[curGroup],null,audio_Audio.MUSIC_FADE_IN_TIME);
		new Game(true,1 + curGroup * 3 * 3 + curI * 3 + curJ);
	}
	,moveSelection: function(di,dj) {
		if(dj < 0) {
			if(this.curJ > 0) {
				this.curJ--;
			} else if(this.curGroup > 0) {
				this.curGroup--;
				this.curJ = 2;
			} else {
				return false;
			}
		} else if(dj > 0) {
			if(this.curJ < 2) {
				this.curJ++;
			} else if(this.curGroup < 2) {
				this.curGroup++;
				this.curJ = 0;
			} else {
				return false;
			}
		} else if(di < 0) {
			if(this.curI > 0) {
				this.curI--;
			} else {
				return false;
			}
		} else if(di > 0) {
			if(this.curI < 2) {
				this.curI++;
			} else {
				return false;
			}
		}
		return true;
	}
	,tryMoveSelection: function(di,dj) {
		var prevI = this.curI;
		var prevJ = this.curJ;
		var prevGroup = this.curGroup;
		if(!this.moveSelection(di,dj)) {
			return;
		}
		var moved = true;
		while(this.cells[this.curGroup][this.curI][this.curJ].state == LevelCellState.Locked) if(!this.moveSelection(di,dj)) {
			this.curI = prevI;
			this.curJ = prevJ;
			this.curGroup = prevGroup;
			moved = false;
			break;
		}
		if(moved) {
			audio_Audio.playSound("menuMove");
		}
		this.updateSelected();
	}
	,updateSelected: function() {
		this.cells[0][0][0].set_selected(this.curGroup == 0 && this.curI == 0 && this.curJ == 0);
		this.cells[0][0][1].set_selected(this.curGroup == 0 && this.curI == 0 && this.curJ == 1);
		this.cells[0][0][2].set_selected(this.curGroup == 0 && this.curI == 0 && this.curJ == 2);
		this.cells[0][1][0].set_selected(this.curGroup == 0 && this.curI == 1 && this.curJ == 0);
		this.cells[0][1][1].set_selected(this.curGroup == 0 && this.curI == 1 && this.curJ == 1);
		this.cells[0][1][2].set_selected(this.curGroup == 0 && this.curI == 1 && this.curJ == 2);
		this.cells[0][2][0].set_selected(this.curGroup == 0 && this.curI == 2 && this.curJ == 0);
		this.cells[0][2][1].set_selected(this.curGroup == 0 && this.curI == 2 && this.curJ == 1);
		this.cells[0][2][2].set_selected(this.curGroup == 0 && this.curI == 2 && this.curJ == 2);
		this.cells[1][0][0].set_selected(this.curGroup == 1 && this.curI == 0 && this.curJ == 0);
		this.cells[1][0][1].set_selected(this.curGroup == 1 && this.curI == 0 && this.curJ == 1);
		this.cells[1][0][2].set_selected(this.curGroup == 1 && this.curI == 0 && this.curJ == 2);
		this.cells[1][1][0].set_selected(this.curGroup == 1 && this.curI == 1 && this.curJ == 0);
		this.cells[1][1][1].set_selected(this.curGroup == 1 && this.curI == 1 && this.curJ == 1);
		this.cells[1][1][2].set_selected(this.curGroup == 1 && this.curI == 1 && this.curJ == 2);
		this.cells[1][2][0].set_selected(this.curGroup == 1 && this.curI == 2 && this.curJ == 0);
		this.cells[1][2][1].set_selected(this.curGroup == 1 && this.curI == 2 && this.curJ == 1);
		this.cells[1][2][2].set_selected(this.curGroup == 1 && this.curI == 2 && this.curJ == 2);
		this.cells[2][0][0].set_selected(this.curGroup == 2 && this.curI == 0 && this.curJ == 0);
		this.cells[2][0][1].set_selected(this.curGroup == 2 && this.curI == 0 && this.curJ == 1);
		this.cells[2][0][2].set_selected(this.curGroup == 2 && this.curI == 0 && this.curJ == 2);
		this.cells[2][1][0].set_selected(this.curGroup == 2 && this.curI == 1 && this.curJ == 0);
		this.cells[2][1][1].set_selected(this.curGroup == 2 && this.curI == 1 && this.curJ == 1);
		this.cells[2][1][2].set_selected(this.curGroup == 2 && this.curI == 1 && this.curJ == 2);
		this.cells[2][2][0].set_selected(this.curGroup == 2 && this.curI == 2 && this.curJ == 0);
		this.cells[2][2][1].set_selected(this.curGroup == 2 && this.curI == 2 && this.curJ == 1);
		this.cells[2][2][2].set_selected(this.curGroup == 2 && this.curI == 2 && this.curJ == 2);
		this.updateMusic();
		this.updateLevelTimeText();
	}
	,forceCompleteLevel: function() {
		var levelId = 1 + this.curGroup * 3 * 3 + this.curI * 3 + this.curJ;
		save_Save.gameData.data.completeLevel(levelId,5000 + Std.random(15001));
		this.createMenu();
		this.updateSelected();
	}
	,getCellPos: function(k,i,j) {
		var baseX = 30;
		var baseY = 71;
		var x = baseX + 6 + k * 98 + j * 26;
		var y = baseY + 6 + i * 26;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,updateMusic: function() {
		var musicName = Title.GROUP_MUSIC_NAMES[this.curGroup];
		if(musicName != this.curMusicName) {
			this.curMusicName = musicName;
			audio_Audio.stopMusic(Title.MUSIC_FADE_TIME);
			audio_Audio.playMusic(musicName + "Back",null,Title.MUSIC_FADE_TIME);
		}
	}
	,updateLevelTimeText: function() {
		this.speedrunFlow.set_visible(save_Save.gameData.data.areAllLevelsCompleted());
		var levelId = 1 + this.curGroup * 3 * 3 + this.curI * 3 + this.curJ;
		var timer = save_Save.gameData.data.levelBestTimes.h[levelId];
		var timeText = timer == null || timer == -1 ? "N/A" : Game.formatTimer(timer);
		this.levelTimeText.set_text("Level " + levelId + " time:");
		this.levelTimeValueText.set_text(timeText);
	}
	,__class__: Title
});
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr,__params__:function(){ return [this.c];}}; },$_._hx_name="TClass",$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="TEnum",$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c;
	var _g = e.__constructs__[index];
	if(_g == null) {
		c = null;
	} else {
		var ctor = _g;
		c = ctor._hx_name;
	}
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var aparams = a.__params__();
		var bparams = b.__params__();
		var _g = 0;
		var _g1 = aparams.length;
		while(_g < _g1) {
			var i = _g++;
			if(!Type.enumEq(aparams[i],bparams[i])) {
				return false;
			}
		}
	} catch( _g ) {
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	if(e.__params__ != null) {
		return e.__params__();
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
var Util = function() { };
$hxClasses["Util"] = Util;
Util.__name__ = "Util";
Util.wrap = function(x,min,max) {
	if(x < min) {
		return x - min + max + 1;
	} else if(x > max) {
		return x - max + min - 1;
	} else {
		return x;
	}
};
Util.frac = function(x) {
	if(x >= 0) {
		return x - (x | 0);
	} else {
		return (x | 0) - x;
	}
};
Util.fmin = function(x,y) {
	if(x < y) {
		return x;
	} else {
		return y;
	}
};
Util.fmax = function(x,y) {
	if(x > y) {
		return x;
	} else {
		return y;
	}
};
Util.fclamp = function(x,mini,maxi) {
	if(x < mini) {
		return mini;
	} else if(x > maxi) {
		return maxi;
	} else {
		return x;
	}
};
Util.vclamp = function(x,mini,maxi) {
	var x1 = x.x;
	var mini1 = mini.x;
	var maxi1 = maxi.x;
	var x2 = x1 < mini1 ? mini1 : x1 > maxi1 ? maxi1 : x1;
	var x1 = x.y;
	var mini1 = mini.y;
	var maxi1 = maxi.y;
	var y = x1 < mini1 ? mini1 : x1 > maxi1 ? maxi1 : x1;
	var x1 = x.z;
	var mini1 = mini.z;
	var maxi1 = maxi.z;
	var z = x1 < mini1 ? mini1 : x1 > maxi1 ? maxi1 : x1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x2 == null) {
		x2 = 0.;
	}
	return new h3d_VectorImpl(x2,y,z);
};
Util.imin = function(x,y) {
	if(x < y) {
		return x;
	} else {
		return y;
	}
};
Util.imax = function(x,y) {
	if(x > y) {
		return x;
	} else {
		return y;
	}
};
Util.iclamp = function(x,mini,maxi) {
	if(x < mini) {
		return mini;
	} else if(x > maxi) {
		return maxi;
	} else {
		return x;
	}
};
Util.fpow2 = function(x) {
	return x * x;
};
Util.fpow3 = function(x) {
	return x * x * x;
};
Util.clampAngle = function(x,mini,maxi) {
	if(x < mini) {
		var x1 = (mini - x) / 6.28318530718;
		var x2;
		if(x1 >= 0) {
			x2 = x1 | 0;
		} else {
			var i = x1 | 0;
			x2 = x1 == i ? i : i - 1;
		}
		x += x2 * 6.28318530718;
	}
	if(x > maxi) {
		var x1 = (x - maxi) / 6.28318530718;
		var x2;
		if(x1 >= 0) {
			x2 = x1 | 0;
		} else {
			var i = x1 | 0;
			x2 = x1 == i ? i : i - 1;
		}
		x -= x2 * 6.28318530718;
	}
	if(x < mini) {
		return mini;
	} else if(x > maxi) {
		return maxi;
	} else {
		return x;
	}
};
Util.floor = function(x) {
	if(x >= 0) {
		return x | 0;
	} else {
		var i = x | 0;
		if(x == i) {
			return i;
		} else {
			return i - 1;
		}
	}
};
Util.fabs = function(x) {
	if(x < 0) {
		return -x;
	} else {
		return x;
	}
};
Util.iabs = function(x) {
	if(x < 0) {
		return -x;
	} else {
		return x;
	}
};
Util.sign = function(x) {
	if(x < 0) {
		return -1;
	} else if(x > 0) {
		return 1;
	} else {
		return 0;
	}
};
Util.lerp = function(x1,x2,t) {
	return (1 - t) * x1 + t * x2;
};
Util.bezier = function(x1,x2,x3,x4,t) {
	var x = 1 - t;
	var x5 = 1 - t;
	return x * x * x * x1 + 3 * t * (x5 * x5) * x2 + 3 * (t * t) * (1 - t) * x3 + t * t * t * x4;
};
Util.radDistance = function(a,b) {
	var a1 = a;
	var b1 = b;
	var a = a1;
	while(a < -Math.PI) a += 6.28318530718;
	while(a > Math.PI) a -= 6.28318530718;
	a1 = a;
	var a = b1;
	while(a < -Math.PI) a += 6.28318530718;
	while(a > Math.PI) a -= 6.28318530718;
	b1 = a;
	var a = a1 - b1;
	while(a < -Math.PI) a += 6.28318530718;
	while(a > Math.PI) a -= 6.28318530718;
	var x = a;
	if(x < 0) {
		return -x;
	} else {
		return x;
	}
};
Util.radCloseTo = function(curAng,target,maxAngDist) {
	var a = curAng;
	var b = target;
	var a1 = a;
	while(a1 < -Math.PI) a1 += 6.28318530718;
	while(a1 > Math.PI) a1 -= 6.28318530718;
	a = a1;
	var a1 = b;
	while(a1 < -Math.PI) a1 += 6.28318530718;
	while(a1 > Math.PI) a1 -= 6.28318530718;
	b = a1;
	var a1 = a - b;
	while(a1 < -Math.PI) a1 += 6.28318530718;
	while(a1 > Math.PI) a1 -= 6.28318530718;
	var x = a1;
	return (x < 0 ? -x : x) <= (maxAngDist < 0 ? -maxAngDist : maxAngDist);
};
Util.radClosestTo = function(curAng,target) {
	if(Math.abs(curAng - target) <= Math.PI) {
		return curAng;
	}
	if(curAng > target) {
		return curAng - Math.PI * 2;
	} else {
		return curAng + Math.PI * 2;
	}
};
Util.radSubstract = function(a,b) {
	var a1 = a;
	while(a1 < -Math.PI) a1 += 6.28318530718;
	while(a1 > Math.PI) a1 -= 6.28318530718;
	a = a1;
	var a1 = b;
	while(a1 < -Math.PI) a1 += 6.28318530718;
	while(a1 > Math.PI) a1 -= 6.28318530718;
	b = a1;
	var a1 = a - b;
	while(a1 < -Math.PI) a1 += 6.28318530718;
	while(a1 > Math.PI) a1 -= 6.28318530718;
	return a1;
};
Util.normalizeRad = function(a) {
	while(a < -Math.PI) a += 6.28318530718;
	while(a > Math.PI) a -= 6.28318530718;
	return a;
};
Util.normalizeRad2 = function(a) {
	return (a % 6.28318530718 + 6.28318530718) % 6.28318530718;
};
Util.randi = function(lo,hi) {
	return lo + Std.random(hi - lo + 1);
};
Util.randf = function(lo,hi) {
	return lo + Math.random() * (hi - lo);
};
Util.randCircle = function(rmin,rmax) {
	var d = rmin + Math.random() * (rmax - rmin);
	var a = Math.random() * 6.28318530718;
	var x = d * Math.cos(a);
	var y = d * Math.sin(a);
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h2d_col_PointImpl(x,y);
};
Util.randSphere = function(rmin,rmax) {
	var z = -1 + Math.random() * 2;
	var rxy = Math.sqrt(1 - z * z);
	var phi = Math.random() * 6.28318530718;
	var x = rxy * Math.cos(phi);
	var y = rxy * Math.sin(phi);
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	return new h3d_VectorImpl(x1,y1,z1);
};
Util.randSign = function() {
	return Std.random(2) * 2 - 1;
};
Util.distSq = function(x1,y1,x2,y2) {
	var dx = x1 - x2;
	var dy = y1 - y2;
	return dx * dx + dy * dy;
};
Util.drawProfilePart = function(g,pts,r) {
	var cnt = pts.length;
	var totalLen = 0.;
	var _g = 1;
	var _g1 = cnt;
	while(_g < _g1) {
		var i = _g++;
		var _this = pts[i - 1];
		var p = pts[i];
		var dx = _this.x - p.x;
		var dy = _this.y - p.y;
		totalLen += Math.sqrt(dx * dx + dy * dy);
	}
	var x = pts[0].x;
	var y = pts[0].y;
	g.flush();
	g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
	var remLen = r * totalLen;
	var _g = 1;
	var _g1 = cnt;
	while(_g < _g1) {
		var i = _g++;
		if(remLen == 0) {
			break;
		}
		var _this = pts[i - 1];
		var p = pts[i];
		var dx = _this.x - p.x;
		var dy = _this.y - p.y;
		var dist = Math.sqrt(dx * dx + dy * dy);
		var use = remLen < dist ? remLen : dist;
		if(dist <= remLen) {
			var x = pts[i].x;
			var y = pts[i].y;
			g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
			remLen -= dist;
		} else {
			var t = remLen / dist;
			var x1 = (1 - t) * pts[i - 1].x + t * pts[i].x;
			var y1 = (1 - t) * pts[i - 1].y + t * pts[i].y;
			g.addVertex(x1,y1,g.curR,g.curG,g.curB,g.curA,x1 * g.ma + y1 * g.mc + g.mx,x1 * g.mb + y1 * g.md + g.my);
			remLen = 0;
		}
	}
};
Util.colorFromRGB = function(r,g,b) {
	return (r << 16) + (g << 8) + b;
};
Util.formatFloat = function(x,precision) {
	if(precision <= 0) {
		return "" + Math.round(x);
	}
	var neg = false;
	if(x < 0) {
		neg = true;
		x *= -1;
	}
	x = Math.round(x * Math.pow(10,precision));
	var s = "" + x;
	if(s.length <= precision) {
		while(s.length < precision) s = "0" + s;
		s = "0." + s;
	} else {
		s = HxOverrides.substr(s,0,s.length - precision) + "." + HxOverrides.substr(s,s.length - precision,null);
	}
	if(neg) {
		s = "-" + s;
	}
	return s;
};
Util.quantize = function(x,step) {
	if(step == 0) {
		return x;
	} else {
		return Math.round(x / step) * step;
	}
};
Util.smoothStepK = function(x,k) {
	if(k == null) {
		k = 0.;
	}
	return 2 * (k - 1) * x * x * x + 3 * (1 - k) * x * x + k * x;
};
Util.smoothStepsK = function(x,step,k) {
	if(k == null) {
		k = 0.;
	}
	var x1 = x / step;
	var fx;
	if(x1 >= 0) {
		fx = x1 | 0;
	} else {
		var i = x1 | 0;
		fx = x1 == i ? i : i - 1;
	}
	var x1 = x / step - fx;
	var k1 = k;
	if(k1 == null) {
		k1 = 0.;
	}
	return step * (2 * (k1 - 1) * x1 * x1 * x1 + 3 * (1 - k1) * x1 * x1 + k1 * x1) + step * fx;
};
Util.smoothStep = function(x) {
	return -2. * x * x * x + 3. * x * x + 0. * x;
};
Util.smoothSteps = function(x,step) {
	var x1 = x / step;
	var fx;
	if(x1 >= 0) {
		fx = x1 | 0;
	} else {
		var i = x1 | 0;
		fx = x1 == i ? i : i - 1;
	}
	var x1 = x / step - fx;
	return step * (-2. * x1 * x1 * x1 + 3. * x1 * x1 + 0. * x1) + step * fx;
};
Util.smootherStep = function(x) {
	return 6 * x * x * x * x * x - 15 * x * x * x * x + 10 * x * x * x;
};
Util.smootherSteps = function(x,step) {
	var x1 = x / step;
	var fx;
	if(x1 >= 0) {
		fx = x1 | 0;
	} else {
		var i = x1 | 0;
		fx = x1 == i ? i : i - 1;
	}
	var x1 = x / step - fx;
	return step * (6 * x1 * x1 * x1 * x1 * x1 - 15 * x1 * x1 * x1 * x1 + 10 * x1 * x1 * x1) + step * fx;
};
Util.steps = function(x,step,f) {
	var x1 = x / step;
	var fx;
	if(x1 >= 0) {
		fx = x1 | 0;
	} else {
		var i = x1 | 0;
		fx = x1 == i ? i : i - 1;
	}
	return step * f(x / step - fx) + step * fx;
};
Util.bresenham = function(x1,y1,x2,y2) {
	var x = x2 - x1;
	var dx = x < 0 ? -x : x;
	var sx = x1 < x2 ? 1 : -1;
	var x = y2 - y1;
	var dy = -(x < 0 ? -x : x);
	var sy = y1 < y2 ? 1 : -1;
	var error = dx + dy;
	var ans = [];
	while(true) {
		ans.push({ x : x1, y : y1});
		if(x1 == x2 && y1 == y2) {
			break;
		}
		var e2 = 2 * error;
		if(e2 >= dy) {
			if(x1 == x2) {
				break;
			}
			error += dy;
			x1 += sx;
		}
		if(e2 <= dx) {
			if(y1 == y2) {
				break;
			}
			error += dx;
			y1 += sy;
		}
	}
	return ans;
};
Util.rasterPolygon = function(points) {
	var lines = [];
	var edges = [];
	var _g = 0;
	var _g1 = points.length;
	while(_g < _g1) {
		var i = _g++;
		var p1 = points[i];
		var p2 = i == points.length - 1 ? points[0] : points[i + 1];
		var p1p2 = Util.bresenham(p1.x,p1.y,p2.x,p2.y);
		edges = edges.concat(p1p2);
	}
	var yToXs = new haxe_ds_IntMap();
	var _g = 0;
	while(_g < edges.length) {
		var point = edges[_g];
		++_g;
		var s = yToXs.h[point.y];
		if(s != null) {
			s.push(point.x);
		} else {
			yToXs.h[point.y] = [point.x];
		}
	}
	var key = yToXs.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var arr = yToXs.h[key1];
		var mini = arr[0];
		var maxi = arr[0];
		var _g = 0;
		while(_g < arr.length) {
			var x = arr[_g];
			++_g;
			if(x < mini) {
				mini = x;
			}
			if(x > maxi) {
				maxi = x;
			}
		}
		lines.push({ y : key1, x1 : mini, x2 : maxi});
	}
	return lines;
};
Util.easeOutBack = function(x) {
	var c1 = 1.70158;
	var c3 = c1 + 1;
	return 1 + c3 * Math.pow(x - 1,3) + c1 * Math.pow(x - 1,2);
};
Util.rotateAround = function(pt,center,angle) {
	var s = Math.sin(angle);
	var c = Math.cos(angle);
	var x = pt.x - center.x;
	var y = pt.y - center.y;
	var x1 = x * c - y * s + center.x;
	var y1 = x * s + y * c + center.y;
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	return new h2d_col_PointImpl(x1,y1);
};
Util.sodStep = function(from,to,acc,dt) {
	return to + (from - to) * Math.pow(1. - acc,dt);
};
Util.boundsFromIntervals = function(xMin,xMax,yMin,yMax) {
	var b = new h2d_col_Bounds();
	b.xMin = xMin;
	b.yMin = yMin;
	b.xMax = xMin + (xMax - xMin);
	b.yMax = yMin + (yMax - yMin);
	return b;
};
Util.shrinkBounds = function(bounds,dx,dy) {
	var xMin = bounds.xMin + dx;
	var xMax = bounds.xMax - dx;
	var yMin = bounds.yMin + dy;
	var yMax = bounds.yMax - dy;
	var b = new h2d_col_Bounds();
	b.xMin = xMin;
	b.yMin = yMin;
	b.xMax = xMin + (xMax - xMin);
	b.yMax = yMin + (yMax - yMin);
	return b;
};
Util.hslToRGB = function(h,s,l) {
	if(s == 0) {
		return { r : l, g : l, b : l};
	}
	var hue2rgb = function(p,q,t) {
		if(t < 0) {
			++t;
		}
		if(t > 1) {
			--t;
		}
		if(t < 0.166666666666666657) {
			return p + (q - p) * 6 * t;
		}
		if(t < 0.5) {
			return q;
		}
		if(t < 0.66666666666666663) {
			return p + (q - p) * (0.66666666666666663 - t) * 6;
		}
		return p;
	};
	var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	var p = 2 * l - q;
	var r = hue2rgb(p,q,h + 0.333333333333333315);
	var g = hue2rgb(p,q,h);
	var b = hue2rgb(p,q,h - 0.333333333333333315);
	return { r : r, g : g, b : b};
};
Util.rgbToHSL = function(col) {
	var r = (col >> 16 & 255) / 255;
	var g = (col >> 8 & 255) / 255;
	var b = (col & 255) / 255;
	var y = g > b ? g : b;
	var max = r > y ? r : y;
	var y = g < b ? g : b;
	var min = r < y ? r : y;
	var h = 0.;
	var s = 0.;
	var l = (max + min) / 2;
	if(max != min) {
		var d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		if(max == r) {
			h = (g - b) / d + (g < b ? 6 : 0);
		} else if(max == g) {
			h = (b - r) / d + 2;
		} else {
			h = (r - g) / d + 4;
		}
		h /= 6;
	}
	return { h : h, s : s, l : l};
};
Util.adjustColor = function(col,hue,hueMult,lumMult) {
	var alpha = col >> 24 & 255;
	var r = (col >> 16 & 255) / 255;
	var g = (col >> 8 & 255) / 255;
	var b = (col & 255) / 255;
	var y = g > b ? g : b;
	var max = r > y ? r : y;
	var y = g < b ? g : b;
	var min = r < y ? r : y;
	var h = 0.;
	var s = 0.;
	var l = (max + min) / 2;
	if(max != min) {
		var d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		if(max == r) {
			h = (g - b) / d + (g < b ? 6 : 0);
		} else if(max == g) {
			h = (b - r) / d + 2;
		} else {
			h = (r - g) / d + 4;
		}
		h /= 6;
	}
	var hsl_h = h;
	var hsl_s = s;
	var hsl_l = l;
	var dist = 0.;
	var add = true;
	if(hsl_h < hue) {
		if(hue - hsl_h > .5) {
			dist = 1. - (hue - hsl_h);
			add = false;
		} else {
			dist = hue - hsl_h;
			add = true;
		}
	} else if(hsl_h - hue > .5) {
		dist = 1. - (hsl_h - hue);
		add = true;
	} else {
		dist = hsl_h - hue;
		add = false;
	}
	hsl_h += (add ? 1 : -1) * hueMult * dist;
	while(hsl_h < 0) hsl_h += 1.;
	while(hsl_h > 1) hsl_h -= 1.;
	var x = hsl_l * lumMult;
	hsl_l = x < 0 ? 0 : x > 1 ? 1 : x;
	var h = hsl_h;
	var s = hsl_s;
	var l = hsl_l;
	var rgb;
	if(s == 0) {
		rgb = { r : l, g : l, b : l};
	} else {
		var hue2rgb = function(p,q,t) {
			if(t < 0) {
				++t;
			}
			if(t > 1) {
				--t;
			}
			if(t < 0.166666666666666657) {
				return p + (q - p) * 6 * t;
			}
			if(t < 0.5) {
				return q;
			}
			if(t < 0.66666666666666663) {
				return p + (q - p) * (0.66666666666666663 - t) * 6;
			}
			return p;
		};
		var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
		var p = 2 * l - q;
		var r = hue2rgb(p,q,h + 0.333333333333333315);
		var g = hue2rgb(p,q,h);
		var b = hue2rgb(p,q,h - 0.333333333333333315);
		rgb = { r : r, g : g, b : b};
	}
	var alpha1 = alpha;
	if(alpha1 == null) {
		alpha1 = 255;
	}
	return alpha1 << 24 | (rgb.r * 255 | 0) << 16 | (rgb.g * 255 | 0) << 8 | (rgb.b * 255 | 0);
};
Util.rgbToInt = function(rgb,alpha) {
	if(alpha == null) {
		alpha = 255;
	}
	return alpha << 24 | (rgb.r * 255 | 0) << 16 | (rgb.g * 255 | 0) << 8 | (rgb.b * 255 | 0);
};
Util.interpolateColors = function(col1,col2,t) {
	var alpha1 = col1 >> 24 & 255;
	var alpha2 = col2 >> 24 & 255;
	var r = (col1 >> 16 & 255) / 255;
	var g = (col1 >> 8 & 255) / 255;
	var b = (col1 & 255) / 255;
	var y = g > b ? g : b;
	var max = r > y ? r : y;
	var y = g < b ? g : b;
	var min = r < y ? r : y;
	var h = 0.;
	var s = 0.;
	var l = (max + min) / 2;
	if(max != min) {
		var d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		if(max == r) {
			h = (g - b) / d + (g < b ? 6 : 0);
		} else if(max == g) {
			h = (b - r) / d + 2;
		} else {
			h = (r - g) / d + 4;
		}
		h /= 6;
	}
	var hsl1_h = h;
	var hsl1_s = s;
	var hsl1_l = l;
	var r = (col2 >> 16 & 255) / 255;
	var g = (col2 >> 8 & 255) / 255;
	var b = (col2 & 255) / 255;
	var y = g > b ? g : b;
	var max = r > y ? r : y;
	var y = g < b ? g : b;
	var min = r < y ? r : y;
	var h = 0.;
	var s = 0.;
	var l = (max + min) / 2;
	if(max != min) {
		var d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		if(max == r) {
			h = (g - b) / d + (g < b ? 6 : 0);
		} else if(max == g) {
			h = (b - r) / d + 2;
		} else {
			h = (r - g) / d + 4;
		}
		h /= 6;
	}
	var hsl2_h = h;
	var hsl2_s = s;
	var hsl2_l = l;
	if(hsl1_h < hsl2_h && hsl2_h - hsl1_h > .5) {
		++hsl1_h;
	}
	if(hsl2_h < hsl1_h && hsl1_h - hsl2_h > .5) {
		++hsl2_h;
	}
	var h = hsl1_h * (1 - t) + hsl2_h * t;
	if(h > 1) {
		--h;
	}
	var s = hsl1_s * (1 - t) + hsl2_s * t;
	var l = hsl1_l * (1 - t) + hsl2_l * t;
	var rgb;
	if(s == 0) {
		rgb = { r : l, g : l, b : l};
	} else {
		var hue2rgb = function(p,q,t) {
			if(t < 0) {
				++t;
			}
			if(t > 1) {
				--t;
			}
			if(t < 0.166666666666666657) {
				return p + (q - p) * 6 * t;
			}
			if(t < 0.5) {
				return q;
			}
			if(t < 0.66666666666666663) {
				return p + (q - p) * (0.66666666666666663 - t) * 6;
			}
			return p;
		};
		var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
		var p = 2 * l - q;
		var r = hue2rgb(p,q,h + 0.333333333333333315);
		var g = hue2rgb(p,q,h);
		var b = hue2rgb(p,q,h - 0.333333333333333315);
		rgb = { r : r, g : g, b : b};
	}
	var alpha = alpha1 * (1 - t) + alpha2 * t | 0;
	return alpha << 24 | (rgb.r * 255 | 0) << 16 | (rgb.g * 255 | 0) << 8 | (rgb.b * 255 | 0);
};
Util.rotateSpherical = function(coords,axis,alpha) {
	var x = Math.cos(coords.phi) * Math.cos(coords.theta);
	var y = Math.cos(coords.phi) * Math.sin(coords.theta);
	var z = Math.sin(coords.phi);
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var pos_x = x1;
	var pos_y = y1;
	var pos_z = z1;
	var x = pos_x;
	var y = pos_y;
	var z = pos_z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var add1_x = x1;
	var add1_y = y1;
	var add1_z = z1;
	var v = Math.cos(alpha);
	add1_x *= v;
	add1_y *= v;
	add1_z *= v;
	var x = axis.y * pos_z - axis.z * pos_y;
	var y = axis.z * pos_x - axis.x * pos_z;
	var z = axis.x * pos_y - axis.y * pos_x;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var add2_x = x1;
	var add2_y = y1;
	var add2_z = z1;
	var v = Math.sin(alpha);
	add2_x *= v;
	add2_y *= v;
	add2_z *= v;
	var x = axis.x;
	var y = axis.y;
	var z = axis.z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var add3_x = x1;
	var add3_y = y1;
	var add3_z = z1;
	var v = (axis.x * pos_x + axis.y * pos_y + axis.z * pos_z) * (1. - Math.cos(alpha));
	add3_x *= v;
	add3_y *= v;
	add3_z *= v;
	var x = add1_x + add2_x;
	var y = add1_y + add2_y;
	var z = add1_z + add2_z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var this_x = x1;
	var this_y = y1;
	var this_z = z1;
	var x = this_x + add3_x;
	var y = this_y + add3_y;
	var z = this_z + add3_z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var resultPos_x = x1;
	var resultPos_y = y1;
	var resultPos_z = z1;
	coords.theta = Math.atan2(resultPos_y,resultPos_x);
	coords.phi = Math.atan2(resultPos_z,Math.sqrt(resultPos_x * resultPos_x + resultPos_y * resultPos_y));
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,iterator: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_iterators_ArrayIterator(this.children);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,insertChild: function(x,pos) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			HxOverrides.remove(x.parent.children,x);
		}
		this.children.splice(pos,0,x);
		x.parent = this;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var assets_Enum_$Collision = $hxEnums["assets.Enum_Collision"] = { __ename__:"assets.Enum_Collision",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"assets.Enum_Collision",toString:$estr}
	,Full: {_hx_name:"Full",_hx_index:1,__enum__:"assets.Enum_Collision",toString:$estr}
	,SpikeUL: {_hx_name:"SpikeUL",_hx_index:2,__enum__:"assets.Enum_Collision",toString:$estr}
	,SpikeU: {_hx_name:"SpikeU",_hx_index:3,__enum__:"assets.Enum_Collision",toString:$estr}
	,SpikeUR: {_hx_name:"SpikeUR",_hx_index:4,__enum__:"assets.Enum_Collision",toString:$estr}
	,SpikeR: {_hx_name:"SpikeR",_hx_index:5,__enum__:"assets.Enum_Collision",toString:$estr}
	,SpikeDR: {_hx_name:"SpikeDR",_hx_index:6,__enum__:"assets.Enum_Collision",toString:$estr}
	,SpikeD: {_hx_name:"SpikeD",_hx_index:7,__enum__:"assets.Enum_Collision",toString:$estr}
	,SpikeDL: {_hx_name:"SpikeDL",_hx_index:8,__enum__:"assets.Enum_Collision",toString:$estr}
	,SpikeL: {_hx_name:"SpikeL",_hx_index:9,__enum__:"assets.Enum_Collision",toString:$estr}
	,PlatformLeft: {_hx_name:"PlatformLeft",_hx_index:10,__enum__:"assets.Enum_Collision",toString:$estr}
	,PlatformRight: {_hx_name:"PlatformRight",_hx_index:11,__enum__:"assets.Enum_Collision",toString:$estr}
	,PlatformUp: {_hx_name:"PlatformUp",_hx_index:12,__enum__:"assets.Enum_Collision",toString:$estr}
	,PlatformDown: {_hx_name:"PlatformDown",_hx_index:13,__enum__:"assets.Enum_Collision",toString:$estr}
};
assets_Enum_$Collision.__constructs__ = [assets_Enum_$Collision.None,assets_Enum_$Collision.Full,assets_Enum_$Collision.SpikeUL,assets_Enum_$Collision.SpikeU,assets_Enum_$Collision.SpikeUR,assets_Enum_$Collision.SpikeR,assets_Enum_$Collision.SpikeDR,assets_Enum_$Collision.SpikeD,assets_Enum_$Collision.SpikeDL,assets_Enum_$Collision.SpikeL,assets_Enum_$Collision.PlatformLeft,assets_Enum_$Collision.PlatformRight,assets_Enum_$Collision.PlatformUp,assets_Enum_$Collision.PlatformDown];
assets_Enum_$Collision.__empty_constructs__ = [assets_Enum_$Collision.None,assets_Enum_$Collision.Full,assets_Enum_$Collision.SpikeUL,assets_Enum_$Collision.SpikeU,assets_Enum_$Collision.SpikeUR,assets_Enum_$Collision.SpikeR,assets_Enum_$Collision.SpikeDR,assets_Enum_$Collision.SpikeD,assets_Enum_$Collision.SpikeDL,assets_Enum_$Collision.SpikeL,assets_Enum_$Collision.PlatformLeft,assets_Enum_$Collision.PlatformRight,assets_Enum_$Collision.PlatformUp,assets_Enum_$Collision.PlatformDown];
var assets_LevelProject_$EntityEnum = $hxEnums["assets.LevelProject_EntityEnum"] = { __ename__:"assets.LevelProject_EntityEnum",__constructs__:null
	,Hero: {_hx_name:"Hero",_hx_index:0,__enum__:"assets.LevelProject_EntityEnum",toString:$estr}
	,Box: {_hx_name:"Box",_hx_index:1,__enum__:"assets.LevelProject_EntityEnum",toString:$estr}
	,Border: {_hx_name:"Border",_hx_index:2,__enum__:"assets.LevelProject_EntityEnum",toString:$estr}
	,Gem: {_hx_name:"Gem",_hx_index:3,__enum__:"assets.LevelProject_EntityEnum",toString:$estr}
};
assets_LevelProject_$EntityEnum.__constructs__ = [assets_LevelProject_$EntityEnum.Hero,assets_LevelProject_$EntityEnum.Box,assets_LevelProject_$EntityEnum.Border,assets_LevelProject_$EntityEnum.Gem];
assets_LevelProject_$EntityEnum.__empty_constructs__ = [assets_LevelProject_$EntityEnum.Hero,assets_LevelProject_$EntityEnum.Box,assets_LevelProject_$EntityEnum.Border,assets_LevelProject_$EntityEnum.Gem];
var ldtk_Entity = function(p,json) {
	this._fields = new haxe_ds_StringMap();
	this.untypedProject = p;
	this.json = json;
	this.defJson = p.searchDef(p.defs.entities,json.defUid,null);
	this.identifier = json.__identifier;
	this.iid = json.iid;
	this.cx = json.__grid[0];
	this.cy = json.__grid[1];
	this.pixelX = json.px[0];
	this.pixelY = json.px[1];
	this.pivotX = json.__pivot == null ? 0 : json.__pivot[0];
	this.pivotY = json.__pivot == null ? 0 : json.__pivot[1];
	this.worldPixelX = json.__worldX;
	this.worldPixelY = json.__worldY;
	this.width = json.width;
	this.height = json.height;
	this.tileInfos = json.__tile;
	p._assignFieldInstanceValues(this,json.fieldInstances);
};
$hxClasses["ldtk.Entity"] = ldtk_Entity;
ldtk_Entity.__name__ = "ldtk.Entity";
ldtk_Entity.prototype = {
	getTile: function() {
		if(this.tileInfos == null) {
			return null;
		}
		var tileset = this.untypedProject._untypedTilesets.h[this.tileInfos.tilesetUid];
		if(tileset == null) {
			return null;
		}
		var x = this.tileInfos.x;
		var y = this.tileInfos.y;
		var wid = this.tileInfos.w;
		var hei = this.tileInfos.h;
		var atlas;
		if(tileset._cachedAtlasTile != null) {
			atlas = tileset._cachedAtlasTile;
		} else {
			var bytes = tileset.untypedProject.getAsset(tileset.relPath);
			tileset._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
			if(tileset._cachedAtlasTile == null) {
				tileset._cachedAtlasTile = h2d_Tile.fromColor(16711680,tileset.pxWid,tileset.pxHei);
			}
			atlas = tileset._cachedAtlasTile;
		}
		if(atlas == null) {
			return null;
		} else {
			return atlas.sub(x,y,wid,hei);
		}
	}
	,__class__: ldtk_Entity
};
var assets_LevelProject_$Entity = function(p,json) {
	ldtk_Entity.call(this,p,json);
	this.entityType = Type.createEnum(assets_LevelProject_$EntityEnum,p.capitalize(json.__identifier));
};
$hxClasses["assets.LevelProject_Entity"] = assets_LevelProject_$Entity;
assets_LevelProject_$Entity.__name__ = "assets.LevelProject_Entity";
assets_LevelProject_$Entity.__super__ = ldtk_Entity;
assets_LevelProject_$Entity.prototype = $extend(ldtk_Entity.prototype,{
	is: function(e) {
		return this.entityType == e;
	}
	,__class__: assets_LevelProject_$Entity
});
var assets_Entity_$Hero = function(p,json) {
	assets_LevelProject_$Entity.call(this,p,json);
};
$hxClasses["assets.Entity_Hero"] = assets_Entity_$Hero;
assets_Entity_$Hero.__name__ = "assets.Entity_Hero";
assets_Entity_$Hero.__super__ = assets_LevelProject_$Entity;
assets_Entity_$Hero.prototype = $extend(assets_LevelProject_$Entity.prototype,{
	__class__: assets_Entity_$Hero
});
var assets_Entity_$Box = function(p,json) {
	assets_LevelProject_$Entity.call(this,p,json);
};
$hxClasses["assets.Entity_Box"] = assets_Entity_$Box;
assets_Entity_$Box.__name__ = "assets.Entity_Box";
assets_Entity_$Box.__super__ = assets_LevelProject_$Entity;
assets_Entity_$Box.prototype = $extend(assets_LevelProject_$Entity.prototype,{
	__class__: assets_Entity_$Box
});
var assets_Entity_$Border = function(p,json) {
	assets_LevelProject_$Entity.call(this,p,json);
};
$hxClasses["assets.Entity_Border"] = assets_Entity_$Border;
assets_Entity_$Border.__name__ = "assets.Entity_Border";
assets_Entity_$Border.__super__ = assets_LevelProject_$Entity;
assets_Entity_$Border.prototype = $extend(assets_LevelProject_$Entity.prototype,{
	__class__: assets_Entity_$Border
});
var assets_Entity_$Gem = function(p,json) {
	assets_LevelProject_$Entity.call(this,p,json);
};
$hxClasses["assets.Entity_Gem"] = assets_Entity_$Gem;
assets_Entity_$Gem.__name__ = "assets.Entity_Gem";
assets_Entity_$Gem.__super__ = assets_LevelProject_$Entity;
assets_Entity_$Gem.prototype = $extend(assets_LevelProject_$Entity.prototype,{
	__class__: assets_Entity_$Gem
});
var ldtk_Tileset = function(p,json) {
	this.json = json;
	this.untypedProject = p;
	this.identifier = json.identifier;
	this.tileGridSize = json.tileGridSize;
	this.relPath = json.relPath;
	this.pxWid = json.pxWid;
	this.pxHei = json.pxHei;
	this.padding = json.padding;
	this.spacing = json.spacing;
	this.untypedTags = new haxe_ds_StringMap();
	if(json.enumTags != null) {
		var _g = 0;
		var _g1 = json.enumTags;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			var this1 = this.untypedTags;
			var key = p.capitalize(t.enumValueId);
			var value = new haxe_ds_IntMap();
			this1.h[key] = value;
			var _g2 = 0;
			var _g3 = t.tileIds;
			while(_g2 < _g3.length) {
				var tid = _g3[_g2];
				++_g2;
				var this2 = this.untypedTags;
				var key1 = p.capitalize(t.enumValueId);
				this2.h[key1].h[tid] = tid;
			}
		}
	}
};
$hxClasses["ldtk.Tileset"] = ldtk_Tileset;
ldtk_Tileset.__name__ = "ldtk.Tileset";
ldtk_Tileset.prototype = {
	get_cWid: function() {
		return Math.ceil(this.pxWid / this.tileGridSize);
	}
	,toString: function() {
		return "ldtk.Tileset[#" + this.identifier + ", path=" + this.relPath + "]";
	}
	,getAtlasX: function(tileId) {
		return (tileId - (tileId / Math.ceil(this.pxWid / this.tileGridSize) | 0) * Math.ceil(this.pxWid / this.tileGridSize)) * this.tileGridSize;
	}
	,getAtlasY: function(tileId) {
		return (tileId / Math.ceil(this.pxWid / this.tileGridSize) | 0) * this.tileGridSize;
	}
	,getTileIdFromCoords: function(pixelX,pixelY) {
		return ((pixelX - this.padding) / this.tileGridSize | 0) + Math.ceil(this.pxWid / this.tileGridSize) * (pixelY / this.tileGridSize | 0);
	}
	,getAtlasTile: function() {
		if(this._cachedAtlasTile != null) {
			return this._cachedAtlasTile;
		} else {
			var bytes = this.untypedProject.getAsset(this.relPath);
			this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
			if(this._cachedAtlasTile == null) {
				this._cachedAtlasTile = h2d_Tile.fromColor(16711680,this.pxWid,this.pxHei);
			}
			return this._cachedAtlasTile;
		}
	}
	,getTile: function(tileId,flipBits) {
		if(flipBits == null) {
			flipBits = 0;
		}
		if(tileId < 0) {
			return null;
		} else {
			var atlas;
			if(this._cachedAtlasTile != null) {
				atlas = this._cachedAtlasTile;
			} else {
				var bytes = this.untypedProject.getAsset(this.relPath);
				this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
				if(this._cachedAtlasTile == null) {
					this._cachedAtlasTile = h2d_Tile.fromColor(16711680,this.pxWid,this.pxHei);
				}
				atlas = this._cachedAtlasTile;
			}
			var t = atlas.sub((tileId - (tileId / Math.ceil(this.pxWid / this.tileGridSize) | 0) * Math.ceil(this.pxWid / this.tileGridSize)) * this.tileGridSize,(tileId / Math.ceil(this.pxWid / this.tileGridSize) | 0) * this.tileGridSize,this.tileGridSize,this.tileGridSize);
			switch(flipBits) {
			case 0:
				return t;
			case 1:
				t.flipX();
				var px = 0;
				var py = 0;
				if(py == null) {
					py = 0.5;
				}
				if(px == null) {
					px = 0.5;
				}
				t.dx = -(px * t.width);
				t.dy = -(py * t.height);
				return t;
			case 2:
				t.flipY();
				var px = 0;
				var py = 0;
				if(py == null) {
					py = 0.5;
				}
				if(px == null) {
					px = 0.5;
				}
				t.dx = -(px * t.width);
				t.dy = -(py * t.height);
				return t;
			case 3:
				t.flipX();
				t.flipY();
				var px = 0;
				var py = 0;
				if(py == null) {
					py = 0.5;
				}
				if(px == null) {
					px = 0.5;
				}
				t.dx = -(px * t.width);
				t.dy = -(py * t.height);
				return t;
			default:
				ldtk_Project.error("Unsupported flipBits value");
				return null;
			}
		}
	}
	,getFreeTile: function(x,y,wid,hei) {
		var atlas;
		if(this._cachedAtlasTile != null) {
			atlas = this._cachedAtlasTile;
		} else {
			var bytes = this.untypedProject.getAsset(this.relPath);
			this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
			if(this._cachedAtlasTile == null) {
				this._cachedAtlasTile = h2d_Tile.fromColor(16711680,this.pxWid,this.pxHei);
			}
			atlas = this._cachedAtlasTile;
		}
		if(atlas == null) {
			return null;
		} else {
			return atlas.sub(x,y,wid,hei);
		}
	}
	,getHeapsTile: function(oldAtlasTile,tileId,flipBits) {
		if(flipBits == null) {
			flipBits = 0;
		}
		var flipBits1 = flipBits;
		if(flipBits1 == null) {
			flipBits1 = 0;
		}
		if(tileId < 0) {
			return null;
		} else {
			var atlas;
			if(this._cachedAtlasTile != null) {
				atlas = this._cachedAtlasTile;
			} else {
				var bytes = this.untypedProject.getAsset(this.relPath);
				this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
				if(this._cachedAtlasTile == null) {
					this._cachedAtlasTile = h2d_Tile.fromColor(16711680,this.pxWid,this.pxHei);
				}
				atlas = this._cachedAtlasTile;
			}
			var t = atlas.sub((tileId - (tileId / Math.ceil(this.pxWid / this.tileGridSize) | 0) * Math.ceil(this.pxWid / this.tileGridSize)) * this.tileGridSize,(tileId / Math.ceil(this.pxWid / this.tileGridSize) | 0) * this.tileGridSize,this.tileGridSize,this.tileGridSize);
			switch(flipBits1) {
			case 0:
				return t;
			case 1:
				t.flipX();
				var px = 0;
				var py = 0;
				if(py == null) {
					py = 0.5;
				}
				if(px == null) {
					px = 0.5;
				}
				t.dx = -(px * t.width);
				t.dy = -(py * t.height);
				return t;
			case 2:
				t.flipY();
				var px = 0;
				var py = 0;
				if(py == null) {
					py = 0.5;
				}
				if(px == null) {
					px = 0.5;
				}
				t.dx = -(px * t.width);
				t.dy = -(py * t.height);
				return t;
			case 3:
				t.flipX();
				t.flipY();
				var px = 0;
				var py = 0;
				if(py == null) {
					py = 0.5;
				}
				if(px == null) {
					px = 0.5;
				}
				t.dx = -(px * t.width);
				t.dy = -(py * t.height);
				return t;
			default:
				ldtk_Project.error("Unsupported flipBits value");
				return null;
			}
		}
	}
	,getAutoLayerTile: function(autoLayerTile) {
		if(autoLayerTile.tileId < 0) {
			return null;
		} else {
			var tileId = autoLayerTile.tileId;
			var flipBits = autoLayerTile.flips;
			if(flipBits == null) {
				flipBits = 0;
			}
			if(tileId < 0) {
				return null;
			} else {
				var atlas;
				if(this._cachedAtlasTile != null) {
					atlas = this._cachedAtlasTile;
				} else {
					var bytes = this.untypedProject.getAsset(this.relPath);
					this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
					if(this._cachedAtlasTile == null) {
						this._cachedAtlasTile = h2d_Tile.fromColor(16711680,this.pxWid,this.pxHei);
					}
					atlas = this._cachedAtlasTile;
				}
				var t = atlas.sub((tileId - (tileId / Math.ceil(this.pxWid / this.tileGridSize) | 0) * Math.ceil(this.pxWid / this.tileGridSize)) * this.tileGridSize,(tileId / Math.ceil(this.pxWid / this.tileGridSize) | 0) * this.tileGridSize,this.tileGridSize,this.tileGridSize);
				switch(flipBits) {
				case 0:
					return t;
				case 1:
					t.flipX();
					var px = 0;
					var py = 0;
					if(py == null) {
						py = 0.5;
					}
					if(px == null) {
						px = 0.5;
					}
					t.dx = -(px * t.width);
					t.dy = -(py * t.height);
					return t;
				case 2:
					t.flipY();
					var px = 0;
					var py = 0;
					if(py == null) {
						py = 0.5;
					}
					if(px == null) {
						px = 0.5;
					}
					t.dx = -(px * t.width);
					t.dy = -(py * t.height);
					return t;
				case 3:
					t.flipX();
					t.flipY();
					var px = 0;
					var py = 0;
					if(py == null) {
						py = 0.5;
					}
					if(px == null) {
						px = 0.5;
					}
					t.dx = -(px * t.width);
					t.dy = -(py * t.height);
					return t;
				default:
					ldtk_Project.error("Unsupported flipBits value");
					return null;
				}
			}
		}
	}
	,getAutoLayerHeapsTile: function(oldAtlasTile,autoLayerTile) {
		if(autoLayerTile.tileId < 0) {
			return null;
		} else {
			var tileId = autoLayerTile.tileId;
			var flipBits = autoLayerTile.flips;
			if(flipBits == null) {
				flipBits = 0;
			}
			if(tileId < 0) {
				return null;
			} else {
				var atlas;
				if(this._cachedAtlasTile != null) {
					atlas = this._cachedAtlasTile;
				} else {
					var bytes = this.untypedProject.getAsset(this.relPath);
					this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
					if(this._cachedAtlasTile == null) {
						this._cachedAtlasTile = h2d_Tile.fromColor(16711680,this.pxWid,this.pxHei);
					}
					atlas = this._cachedAtlasTile;
				}
				var t = atlas.sub((tileId - (tileId / Math.ceil(this.pxWid / this.tileGridSize) | 0) * Math.ceil(this.pxWid / this.tileGridSize)) * this.tileGridSize,(tileId / Math.ceil(this.pxWid / this.tileGridSize) | 0) * this.tileGridSize,this.tileGridSize,this.tileGridSize);
				switch(flipBits) {
				case 0:
					return t;
				case 1:
					t.flipX();
					var px = 0;
					var py = 0;
					if(py == null) {
						py = 0.5;
					}
					if(px == null) {
						px = 0.5;
					}
					t.dx = -(px * t.width);
					t.dy = -(py * t.height);
					return t;
				case 2:
					t.flipY();
					var px = 0;
					var py = 0;
					if(py == null) {
						py = 0.5;
					}
					if(px == null) {
						px = 0.5;
					}
					t.dx = -(px * t.width);
					t.dy = -(py * t.height);
					return t;
				case 3:
					t.flipX();
					t.flipY();
					var px = 0;
					var py = 0;
					if(py == null) {
						py = 0.5;
					}
					if(px == null) {
						px = 0.5;
					}
					t.dx = -(px * t.width);
					t.dy = -(py * t.height);
					return t;
				default:
					ldtk_Project.error("Unsupported flipBits value");
					return null;
				}
			}
		}
	}
	,__class__: ldtk_Tileset
};
var assets_Tileset_$Tileset = function(p,json) {
	ldtk_Tileset.call(this,p,json);
};
$hxClasses["assets.Tileset_Tileset"] = assets_Tileset_$Tileset;
assets_Tileset_$Tileset.__name__ = "assets.Tileset_Tileset";
assets_Tileset_$Tileset.__super__ = ldtk_Tileset;
assets_Tileset_$Tileset.prototype = $extend(ldtk_Tileset.prototype,{
	hasTag: function(tileId,tag) {
		var allTileIds = this.untypedTags.h[$hxEnums[tag.__enum__].__constructs__[tag._hx_index]._hx_name];
		if(allTileIds == null) {
			return false;
		} else {
			return allTileIds.h.hasOwnProperty(tileId);
		}
	}
	,getAllTags: function(tileId) {
		var all = [];
		var h = this.untypedTags.h;
		var t_h = h;
		var t_keys = Object.keys(h);
		var t_length = t_keys.length;
		var t_current = 0;
		while(t_current < t_length) {
			var t = t_keys[t_current++];
			if(this.untypedTags.h[t].h.hasOwnProperty(tileId)) {
				all.push(Type.createEnum(assets_Enum_$Collision,t));
			}
		}
		return all;
	}
	,__class__: assets_Tileset_$Tileset
});
var assets_Tileset_$Collision = function(p,json) {
	ldtk_Tileset.call(this,p,json);
};
$hxClasses["assets.Tileset_Collision"] = assets_Tileset_$Collision;
assets_Tileset_$Collision.__name__ = "assets.Tileset_Collision";
assets_Tileset_$Collision.__super__ = ldtk_Tileset;
assets_Tileset_$Collision.prototype = $extend(ldtk_Tileset.prototype,{
	__class__: assets_Tileset_$Collision
});
var assets_Tileset_$Entities = function(p,json) {
	ldtk_Tileset.call(this,p,json);
};
$hxClasses["assets.Tileset_Entities"] = assets_Tileset_$Entities;
assets_Tileset_$Entities.__name__ = "assets.Tileset_Entities";
assets_Tileset_$Entities.__super__ = ldtk_Tileset;
assets_Tileset_$Entities.prototype = $extend(ldtk_Tileset.prototype,{
	__class__: assets_Tileset_$Entities
});
var ldtk_Layer = function(p,json) {
	this.json = json;
	this.defJson = p.getLayerDefJson(json.layerDefUid);
	this.untypedProject = p;
	this.identifier = json.__identifier;
	var tmp;
	try {
		tmp = Type.createEnum(ldtk_LayerType,json.__type,null);
	} catch( _g ) {
		throw haxe_Exception.thrown("Unknown layer type " + json.__type + " in " + this.identifier);
	}
	this.type = tmp;
	this.iid = json.iid;
	this.gridSize = json.__gridSize;
	this.cWid = json.__cWid;
	this.cHei = json.__cHei;
	this.pxWid = this.cWid * json.__gridSize;
	this.pxHei = this.cHei * json.__gridSize;
	this.pxTotalOffsetX = json.__pxTotalOffsetX;
	this.pxTotalOffsetY = json.__pxTotalOffsetY;
	this.opacity = json.__opacity;
	this.visible = json.visible == true;
};
$hxClasses["ldtk.Layer"] = ldtk_Layer;
ldtk_Layer.__name__ = "ldtk.Layer";
ldtk_Layer.prototype = {
	toString: function() {
		return "ldtk.Layer[#" + this.identifier + ", type=" + Std.string(this.type) + "]";
	}
	,isCoordValid: function(cx,cy) {
		if(cx >= 0 && cx < this.cWid && cy >= 0) {
			return cy < this.cHei;
		} else {
			return false;
		}
	}
	,getCx: function(coordId) {
		return coordId - (coordId / this.cWid | 0) * this.cWid;
	}
	,getCy: function(coordId) {
		return coordId / this.cWid | 0;
	}
	,getCoordId: function(cx,cy) {
		return cx + cy * this.cWid;
	}
	,__class__: ldtk_Layer
};
var ldtk_Layer_$Entities = function(p,json) {
	this._entities = [];
	ldtk_Layer.call(this,p,json);
	var _g = 0;
	var _g1 = json.entityInstances;
	while(_g < _g1.length) {
		var json = _g1[_g];
		++_g;
		var e = this._instanciateEntity(json);
		this._entities.push(e);
		if(Reflect.field(this,"all_" + e.identifier) == null) {
			this["all_" + e.identifier] = [];
		}
		var arr = Reflect.field(this,"all_" + e.identifier);
		arr.push(e);
	}
};
$hxClasses["ldtk.Layer_Entities"] = ldtk_Layer_$Entities;
ldtk_Layer_$Entities.__name__ = "ldtk.Layer_Entities";
ldtk_Layer_$Entities.__super__ = ldtk_Layer;
ldtk_Layer_$Entities.prototype = $extend(ldtk_Layer.prototype,{
	_instanciateEntity: function(json) {
		return null;
	}
	,__class__: ldtk_Layer_$Entities
});
var assets_Layer_$Entities = function(p,json) {
	var f = "all_Hero";
	this[f] = [];
	var f = "all_Box";
	this[f] = [];
	var f = "all_Border";
	this[f] = [];
	var f = "all_Gem";
	this[f] = [];
	ldtk_Layer_$Entities.call(this,p,json);
};
$hxClasses["assets.Layer_Entities"] = assets_Layer_$Entities;
assets_Layer_$Entities.__name__ = "assets.Layer_Entities";
assets_Layer_$Entities.__super__ = ldtk_Layer_$Entities;
assets_Layer_$Entities.prototype = $extend(ldtk_Layer_$Entities.prototype,{
	_instanciateEntity: function(json) {
		var name = "assets.Entity_" + (json.__identifier == null ? "null" : "" + json.__identifier);
		var c = $hxClasses[name];
		if(c == null) {
			return null;
		} else {
			return Type.createInstance(c,[this.untypedProject,json]);
		}
	}
	,getAllUntyped: function() {
		return this._entities;
	}
	,__class__: assets_Layer_$Entities
});
var ldtk_Layer_$Tiles = function(p,json) {
	ldtk_Layer.call(this,p,json);
	this.tilesetUid = json.__tilesetDefUid;
	this.tiles = new haxe_ds_IntMap();
	var _g = 0;
	var _g1 = json.gridTiles;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		if(!this.tiles.h.hasOwnProperty(t.d[0])) {
			this.tiles.h[t.d[0]] = [{ tileId : t.t, flipBits : t.f}];
		} else {
			this.tiles.h[t.d[0]].push({ tileId : t.t, flipBits : t.f});
		}
	}
};
$hxClasses["ldtk.Layer_Tiles"] = ldtk_Layer_$Tiles;
ldtk_Layer_$Tiles.__name__ = "ldtk.Layer_Tiles";
ldtk_Layer_$Tiles.__super__ = ldtk_Layer;
ldtk_Layer_$Tiles.prototype = $extend(ldtk_Layer.prototype,{
	get_untypedTileset: function() {
		return this.untypedProject._untypedTilesets.h[this.tilesetUid];
	}
	,getTileStackAt: function(cx,cy) {
		if(cx >= 0 && cx < this.cWid && cy >= 0 && cy < this.cHei && this.tiles.h.hasOwnProperty(cx + cy * this.cWid)) {
			return this.tiles.h[cx + cy * this.cWid];
		} else {
			return [];
		}
	}
	,hasAnyTileAt: function(cx,cy) {
		return this.tiles.h.hasOwnProperty(cx + cy * this.cWid);
	}
	,render: function(target) {
		if(target == null) {
			var _this = this.untypedProject._untypedTilesets.h[this.tilesetUid];
			var target1;
			if(_this._cachedAtlasTile != null) {
				target1 = _this._cachedAtlasTile;
			} else {
				var bytes = _this.untypedProject.getAsset(_this.relPath);
				_this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
				if(_this._cachedAtlasTile == null) {
					_this._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this.pxWid,_this.pxHei);
				}
				target1 = _this._cachedAtlasTile;
			}
			target = new h2d_TileGroup(target1);
		}
		var _g = 0;
		var _g1 = this.cHei;
		while(_g < _g1) {
			var cy = _g++;
			var _g2 = 0;
			var _g3 = this.cWid;
			while(_g2 < _g3) {
				var cx = _g2++;
				if(this.tiles.h.hasOwnProperty(cx + cy * this.cWid)) {
					var _g4 = 0;
					var _g5 = cx >= 0 && cx < this.cWid && cy >= 0 && cy < this.cHei && this.tiles.h.hasOwnProperty(cx + cy * this.cWid) ? this.tiles.h[cx + cy * this.cWid] : [];
					while(_g4 < _g5.length) {
						var tile = _g5[_g4];
						++_g4;
						var x = cx * this.gridSize + this.pxTotalOffsetX;
						var y = cy * this.gridSize + this.pxTotalOffsetY;
						var _this = this.untypedProject._untypedTilesets.h[this.tilesetUid];
						var tileId = tile.tileId;
						var flipBits = tile.flipBits;
						if(flipBits == null) {
							flipBits = 0;
						}
						var t;
						if(tileId < 0) {
							t = null;
						} else {
							var atlas;
							if(_this._cachedAtlasTile != null) {
								atlas = _this._cachedAtlasTile;
							} else {
								var bytes = _this.untypedProject.getAsset(_this.relPath);
								_this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
								if(_this._cachedAtlasTile == null) {
									_this._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this.pxWid,_this.pxHei);
								}
								atlas = _this._cachedAtlasTile;
							}
							var t1 = atlas.sub((tileId - (tileId / Math.ceil(_this.pxWid / _this.tileGridSize) | 0) * Math.ceil(_this.pxWid / _this.tileGridSize)) * _this.tileGridSize,(tileId / Math.ceil(_this.pxWid / _this.tileGridSize) | 0) * _this.tileGridSize,_this.tileGridSize,_this.tileGridSize);
							switch(flipBits) {
							case 0:
								t = t1;
								break;
							case 1:
								t1.flipX();
								var px = 0;
								var py = 0;
								if(py == null) {
									py = 0.5;
								}
								if(px == null) {
									px = 0.5;
								}
								t1.dx = -(px * t1.width);
								t1.dy = -(py * t1.height);
								t = t1;
								break;
							case 2:
								t1.flipY();
								var px1 = 0;
								var py1 = 0;
								if(py1 == null) {
									py1 = 0.5;
								}
								if(px1 == null) {
									px1 = 0.5;
								}
								t1.dx = -(px1 * t1.width);
								t1.dy = -(py1 * t1.height);
								t = t1;
								break;
							case 3:
								t1.flipX();
								t1.flipY();
								var px2 = 0;
								var py2 = 0;
								if(py2 == null) {
									py2 = 0.5;
								}
								if(px2 == null) {
									px2 = 0.5;
								}
								t1.dx = -(px2 * t1.width);
								t1.dy = -(py2 * t1.height);
								t = t1;
								break;
							default:
								ldtk_Project.error("Unsupported flipBits value");
								t = null;
							}
						}
						target.content.add(x,y,target.curColor.x,target.curColor.y,target.curColor.z,target.curColor.w,t);
					}
				}
			}
		}
		return target;
	}
	,__class__: ldtk_Layer_$Tiles
});
var assets_Layer_$Decoration = function(p,json) {
	ldtk_Layer_$Tiles.call(this,p,json);
};
$hxClasses["assets.Layer_Decoration"] = assets_Layer_$Decoration;
assets_Layer_$Decoration.__name__ = "assets.Layer_Decoration";
assets_Layer_$Decoration.__super__ = ldtk_Layer_$Tiles;
assets_Layer_$Decoration.prototype = $extend(ldtk_Layer_$Tiles.prototype,{
	get_tileset: function() {
		return this.untypedProject._untypedTilesets.h[this.tilesetUid];
	}
	,__class__: assets_Layer_$Decoration
});
var ldtk_Layer_$IntGrid = function(p,json) {
	this.intGrid = new haxe_ds_IntMap();
	this.valueInfos = new haxe_ds_IntMap();
	ldtk_Layer.call(this,p,json);
	if(json.intGridCsv != null) {
		var _g = 0;
		var _g1 = json.intGridCsv.length;
		while(_g < _g1) {
			var i = _g++;
			if(json.intGridCsv[i] >= 0) {
				this.intGrid.h[i] = json.intGridCsv[i];
			}
		}
	} else {
		var _g = 0;
		var _g1 = json.intGrid;
		while(_g < _g1.length) {
			var ig = _g1[_g];
			++_g;
			this.intGrid.h[ig.coordId] = ig.v + 1;
		}
	}
};
$hxClasses["ldtk.Layer_IntGrid"] = ldtk_Layer_$IntGrid;
ldtk_Layer_$IntGrid.__name__ = "ldtk.Layer_IntGrid";
ldtk_Layer_$IntGrid.__super__ = ldtk_Layer;
ldtk_Layer_$IntGrid.prototype = $extend(ldtk_Layer.prototype,{
	getInt: function(cx,cy) {
		if(cx >= 0 && cx < this.cWid && cy >= 0 && cy < this.cHei) {
			return this.intGrid.h[cx + cy * this.cWid];
		} else {
			return 0;
		}
	}
	,hasValue: function(cx,cy,val) {
		if(val == null) {
			val = 0;
		}
		if(!(cx >= 0 && cx < this.cWid && cy >= 0 && cy < this.cHei)) {
			return false;
		} else if(val == 0) {
			return this.intGrid.h[cx + cy * this.cWid] > 0;
		} else {
			return this.intGrid.h[cx + cy * this.cWid] == val;
		}
	}
	,getValueInfos: function(v) {
		return this.valueInfos.h[v];
	}
	,getName: function(cx,cy) {
		if(!(!(cx >= 0 && cx < this.cWid && cy >= 0 && cy < this.cHei) ? false : this.intGrid.h[cx + cy * this.cWid] > 0)) {
			return null;
		} else {
			return this.valueInfos.h[cx >= 0 && cx < this.cWid && cy >= 0 && cy < this.cHei ? this.intGrid.h[cx + cy * this.cWid] : 0].identifier;
		}
	}
	,getColorInt: function(cx,cy) {
		if(!(!(cx >= 0 && cx < this.cWid && cy >= 0 && cy < this.cHei) ? false : this.intGrid.h[cx + cy * this.cWid] > 0)) {
			return null;
		} else {
			return this.valueInfos.h[cx >= 0 && cx < this.cWid && cy >= 0 && cy < this.cHei ? this.intGrid.h[cx + cy * this.cWid] : 0].color;
		}
	}
	,getColorHex: function(cx,cy) {
		if(!(!(cx >= 0 && cx < this.cWid && cy >= 0 && cy < this.cHei) ? false : this.intGrid.h[cx + cy * this.cWid] > 0)) {
			return null;
		} else {
			var h = StringTools.hex(this.valueInfos.h[cx >= 0 && cx < this.cWid && cy >= 0 && cy < this.cHei ? this.intGrid.h[cx + cy * this.cWid] : 0].color);
			while(h.length < 6) h = "0" + h;
			return "#" + h;
		}
	}
	,__class__: ldtk_Layer_$IntGrid
});
var ldtk_Layer_$IntGrid_$AutoLayer = function(p,json) {
	ldtk_Layer_$IntGrid.call(this,p,json);
	this.autoTiles = [];
	this.tilesetUid = json.__tilesetDefUid;
	var _g = 0;
	var _g1 = json.autoLayerTiles;
	while(_g < _g1.length) {
		var jsonAutoTile = _g1[_g];
		++_g;
		this.autoTiles.push({ tileId : jsonAutoTile.t, flips : jsonAutoTile.f, alpha : jsonAutoTile.a, renderX : jsonAutoTile.px[0], renderY : jsonAutoTile.px[1], ruleId : jsonAutoTile.d[0], coordId : jsonAutoTile.d[1]});
	}
};
$hxClasses["ldtk.Layer_IntGrid_AutoLayer"] = ldtk_Layer_$IntGrid_$AutoLayer;
ldtk_Layer_$IntGrid_$AutoLayer.__name__ = "ldtk.Layer_IntGrid_AutoLayer";
ldtk_Layer_$IntGrid_$AutoLayer.__super__ = ldtk_Layer_$IntGrid;
ldtk_Layer_$IntGrid_$AutoLayer.prototype = $extend(ldtk_Layer_$IntGrid.prototype,{
	get_untypedTileset: function() {
		return this.untypedProject._untypedTilesets.h[this.tilesetUid];
	}
	,render: function(target) {
		if(target == null) {
			var _this = this.untypedProject._untypedTilesets.h[this.tilesetUid];
			var target1;
			if(_this._cachedAtlasTile != null) {
				target1 = _this._cachedAtlasTile;
			} else {
				var bytes = _this.untypedProject.getAsset(_this.relPath);
				_this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
				if(_this._cachedAtlasTile == null) {
					_this._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this.pxWid,_this.pxHei);
				}
				target1 = _this._cachedAtlasTile;
			}
			target = new h2d_TileGroup(target1);
		}
		var _g = 0;
		var _g1 = this.autoTiles;
		while(_g < _g1.length) {
			var autoTile = _g1[_g];
			++_g;
			var x = autoTile.renderX + this.pxTotalOffsetX;
			var y = autoTile.renderY + this.pxTotalOffsetY;
			var a = autoTile.alpha;
			var _this = this.untypedProject._untypedTilesets.h[this.tilesetUid];
			var t;
			if(autoTile.tileId < 0) {
				t = null;
			} else {
				var tileId = autoTile.tileId;
				var flipBits = autoTile.flips;
				if(flipBits == null) {
					flipBits = 0;
				}
				if(tileId < 0) {
					t = null;
				} else {
					var atlas;
					if(_this._cachedAtlasTile != null) {
						atlas = _this._cachedAtlasTile;
					} else {
						var bytes = _this.untypedProject.getAsset(_this.relPath);
						_this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
						if(_this._cachedAtlasTile == null) {
							_this._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this.pxWid,_this.pxHei);
						}
						atlas = _this._cachedAtlasTile;
					}
					var t1 = atlas.sub((tileId - (tileId / Math.ceil(_this.pxWid / _this.tileGridSize) | 0) * Math.ceil(_this.pxWid / _this.tileGridSize)) * _this.tileGridSize,(tileId / Math.ceil(_this.pxWid / _this.tileGridSize) | 0) * _this.tileGridSize,_this.tileGridSize,_this.tileGridSize);
					switch(flipBits) {
					case 0:
						t = t1;
						break;
					case 1:
						t1.flipX();
						var px = 0;
						var py = 0;
						if(py == null) {
							py = 0.5;
						}
						if(px == null) {
							px = 0.5;
						}
						t1.dx = -(px * t1.width);
						t1.dy = -(py * t1.height);
						t = t1;
						break;
					case 2:
						t1.flipY();
						var px1 = 0;
						var py1 = 0;
						if(py1 == null) {
							py1 = 0.5;
						}
						if(px1 == null) {
							px1 = 0.5;
						}
						t1.dx = -(px1 * t1.width);
						t1.dy = -(py1 * t1.height);
						t = t1;
						break;
					case 3:
						t1.flipX();
						t1.flipY();
						var px2 = 0;
						var py2 = 0;
						if(py2 == null) {
							py2 = 0.5;
						}
						if(px2 == null) {
							px2 = 0.5;
						}
						t1.dx = -(px2 * t1.width);
						t1.dy = -(py2 * t1.height);
						t = t1;
						break;
					default:
						ldtk_Project.error("Unsupported flipBits value");
						t = null;
					}
				}
			}
			target.content.add(x,y,target.curColor.x,target.curColor.y,target.curColor.z,a,t);
		}
		return target;
	}
	,__class__: ldtk_Layer_$IntGrid_$AutoLayer
});
var assets_Layer_$Walls = function(p,json) {
	ldtk_Layer_$IntGrid_$AutoLayer.call(this,p,json);
	var v_groupUid = 1;
	var v_color = "#000000";
	var v_identifier = "Wood";
	var v_value = 1;
	var v_tile_tilesetUid = 1;
	var v_tile_w = 8;
	var v_tile_y = 16;
	var v_tile_h = 8;
	var v_tile_x = 32;
	this.valueInfos.h[v_value] = { value : v_value, identifier : v_identifier, color : Std.parseInt("0x" + HxOverrides.substr(v_color,1,null))};
	var v_groupUid = 1;
	var v_color = "#EAD4AA";
	var v_identifier = "Coral";
	var v_value = 4;
	var v_tile_tilesetUid = 1;
	var v_tile_w = 8;
	var v_tile_y = 40;
	var v_tile_h = 8;
	var v_tile_x = 32;
	this.valueInfos.h[v_value] = { value : v_value, identifier : v_identifier, color : Std.parseInt("0x" + HxOverrides.substr(v_color,1,null))};
	var v_groupUid = 1;
	var v_color = "#E4A672";
	var v_identifier = "Rock";
	var v_value = 5;
	var v_tile_tilesetUid = 1;
	var v_tile_w = 8;
	var v_tile_y = 88;
	var v_tile_h = 8;
	var v_tile_x = 32;
	this.valueInfos.h[v_value] = { value : v_value, identifier : v_identifier, color : Std.parseInt("0x" + HxOverrides.substr(v_color,1,null))};
	var v_groupUid = 0;
	var v_color = "#BE4A2F";
	var v_identifier = "Branch";
	var v_value = 2;
	var v_tile_tilesetUid = 1;
	var v_tile_w = 8;
	var v_tile_y = 64;
	var v_tile_h = 8;
	var v_tile_x = 8;
	this.valueInfos.h[v_value] = { value : v_value, identifier : v_identifier, color : Std.parseInt("0x" + HxOverrides.substr(v_color,1,null))};
	var v_groupUid = 0;
	var v_color = "#D77643";
	var v_identifier = "Spikes";
	var v_value = 3;
	var v_tile_tilesetUid = 1;
	var v_tile_w = 8;
	var v_tile_y = 16;
	var v_tile_h = 8;
	var v_tile_x = 88;
	this.valueInfos.h[v_value] = { value : v_value, identifier : v_identifier, color : Std.parseInt("0x" + HxOverrides.substr(v_color,1,null))};
	var v_groupUid = 2;
	var v_color = "#000000";
	var v_identifier = "PlatformLeft";
	var v_value = 7;
	var v_tile_tilesetUid = 1;
	var v_tile_w = 8;
	var v_tile_y = 8;
	var v_tile_h = 8;
	var v_tile_x = 128;
	this.valueInfos.h[v_value] = { value : v_value, identifier : v_identifier, color : Std.parseInt("0x" + HxOverrides.substr(v_color,1,null))};
	var v_groupUid = 2;
	var v_color = "#000000";
	var v_identifier = "PlatformRight";
	var v_value = 8;
	var v_tile_tilesetUid = 1;
	var v_tile_w = 8;
	var v_tile_y = 8;
	var v_tile_h = 8;
	var v_tile_x = 136;
	this.valueInfos.h[v_value] = { value : v_value, identifier : v_identifier, color : Std.parseInt("0x" + HxOverrides.substr(v_color,1,null))};
	var v_groupUid = 2;
	var v_color = "#000000";
	var v_identifier = "PlatformUp";
	var v_value = 6;
	var v_tile_tilesetUid = 1;
	var v_tile_w = 8;
	var v_tile_y = 0;
	var v_tile_h = 8;
	var v_tile_x = 112;
	this.valueInfos.h[v_value] = { value : v_value, identifier : v_identifier, color : Std.parseInt("0x" + HxOverrides.substr(v_color,1,null))};
	var v_groupUid = 2;
	var v_color = "#000000";
	var v_identifier = "PlatformDown";
	var v_value = 9;
	var v_tile_tilesetUid = 1;
	var v_tile_w = 8;
	var v_tile_y = 8;
	var v_tile_h = 8;
	var v_tile_x = 112;
	this.valueInfos.h[v_value] = { value : v_value, identifier : v_identifier, color : Std.parseInt("0x" + HxOverrides.substr(v_color,1,null))};
};
$hxClasses["assets.Layer_Walls"] = assets_Layer_$Walls;
assets_Layer_$Walls.__name__ = "assets.Layer_Walls";
assets_Layer_$Walls.__super__ = ldtk_Layer_$IntGrid_$AutoLayer;
assets_Layer_$Walls.prototype = $extend(ldtk_Layer_$IntGrid_$AutoLayer.prototype,{
	get_tileset: function() {
		return this.untypedProject._untypedTilesets.h[this.tilesetUid];
	}
	,__class__: assets_Layer_$Walls
});
var assets_Layer_$BackWalls = function(p,json) {
	ldtk_Layer_$IntGrid_$AutoLayer.call(this,p,json);
	var v_groupUid = 0;
	var v_color = "#4553B5";
	var v_identifier = "Wood";
	var v_value = 1;
	var v_tile_tilesetUid = 1;
	var v_tile_w = 8;
	var v_tile_y = 104;
	var v_tile_h = 8;
	var v_tile_x = 16;
	this.valueInfos.h[v_value] = { value : v_value, identifier : v_identifier, color : Std.parseInt("0x" + HxOverrides.substr(v_color,1,null))};
	var v_groupUid = 0;
	var v_color = "#000000";
	var v_identifier = "Rock";
	var v_value = 2;
	var v_tile_tilesetUid = 1;
	var v_tile_w = 8;
	var v_tile_y = 128;
	var v_tile_h = 8;
	var v_tile_x = 16;
	this.valueInfos.h[v_value] = { value : v_value, identifier : v_identifier, color : Std.parseInt("0x" + HxOverrides.substr(v_color,1,null))};
};
$hxClasses["assets.Layer_BackWalls"] = assets_Layer_$BackWalls;
assets_Layer_$BackWalls.__name__ = "assets.Layer_BackWalls";
assets_Layer_$BackWalls.__super__ = ldtk_Layer_$IntGrid_$AutoLayer;
assets_Layer_$BackWalls.prototype = $extend(ldtk_Layer_$IntGrid_$AutoLayer.prototype,{
	get_tileset: function() {
		return this.untypedProject._untypedTilesets.h[this.tilesetUid];
	}
	,__class__: assets_Layer_$BackWalls
});
var ldtk_Level = function(project,arrayIdx,json) {
	this.untypedProject = project;
	this.arrayIndex = arrayIdx;
	this.fromJson(json);
	project._assignFieldInstanceValues(this,json.fieldInstances);
};
$hxClasses["ldtk.Level"] = ldtk_Level;
ldtk_Level.__name__ = "ldtk.Level";
ldtk_Level.prototype = {
	get_bgColor: function() {
		return this.bgColor_int;
	}
	,toString: function() {
		return "ldtk.Level[#" + this.identifier + ", " + this.pxWid + "x" + this.pxHei + "]";
	}
	,fromJson: function(json) {
		this.json = json;
		this.neighbours = [];
		this.allUntypedLayers = [];
		this.iid = json.iid;
		this.uid = json.uid;
		this.identifier = json.identifier;
		this.pxWid = json.pxWid;
		this.pxHei = json.pxHei;
		this.worldX = json.worldX;
		this.worldY = json.worldY;
		this.bgColor_hex = json.__bgColor;
		var hex = json.__bgColor;
		this.bgColor_int = hex == null ? 0 : Std.parseInt("0x" + HxOverrides.substr(hex,1,null));
		this.bgImageInfos = json.bgRelPath == null || json.__bgPos == null ? null : { relFilePath : json.bgRelPath, topLeftX : json.__bgPos.topLeftPx[0], topLeftY : json.__bgPos.topLeftPx[1], scaleX : json.__bgPos.scale[0], scaleY : json.__bgPos.scale[1], cropRect : { x : json.__bgPos.cropRect[0], y : json.__bgPos.cropRect[1], w : json.__bgPos.cropRect[2], h : json.__bgPos.cropRect[3]}};
		this.externalRelPath = json.externalRelPath;
		if(json.layerInstances != null) {
			var _g = 0;
			var _g1 = json.layerInstances;
			while(_g < _g1.length) {
				var json1 = _g1[_g];
				++_g;
				this.allUntypedLayers.push(this._instanciateLayer(json1));
			}
		}
		if(json.__neighbours != null) {
			var _g = 0;
			var _g1 = json.__neighbours;
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				var tmp = this.neighbours;
				var n1 = n.levelIid;
				var tmp1;
				switch(n.dir) {
				case "<":
					tmp1 = ldtk_NeighbourDir.DepthBelow;
					break;
				case ">":
					tmp1 = ldtk_NeighbourDir.DepthAbove;
					break;
				case "e":
					tmp1 = ldtk_NeighbourDir.East;
					break;
				case "n":
					tmp1 = ldtk_NeighbourDir.North;
					break;
				case "o":
					tmp1 = ldtk_NeighbourDir.SameDepthOverlap;
					break;
				case "s":
					tmp1 = ldtk_NeighbourDir.South;
					break;
				case "w":
					tmp1 = ldtk_NeighbourDir.West;
					break;
				default:
					haxe_Log.trace("WARNING: unknown neighbour level dir: " + n.dir,{ fileName : "ldtk/Level.hx", lineNumber : 133, className : "ldtk.Level", methodName : "fromJson"});
					tmp1 = ldtk_NeighbourDir.North;
				}
				tmp.push({ levelIid : n1, dir : tmp1});
			}
		}
	}
	,_instanciateLayer: function(json) {
		return null;
	}
	,isLoaded: function() {
		if(this.externalRelPath != null) {
			if(this.allUntypedLayers != null) {
				return this.allUntypedLayers.length > 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,load: function() {
		if(this.externalRelPath == null || this.allUntypedLayers != null && this.allUntypedLayers.length > 0) {
			return true;
		}
		var bytes = this.untypedProject.getAsset(this.externalRelPath);
		try {
			var raw = bytes.toString();
			var json = JSON.parse(raw);
			this.fromJson(json);
			return true;
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			ldtk_Project.error("Failed to parse external level " + this.identifier + ": " + this.externalRelPath + " (" + Std.string(e) + ")");
			return false;
		}
	}
	,hasBgImage: function() {
		return this.bgImageInfos != null;
	}
	,getRawBgImageTile: function() {
		if(this.bgImageInfos == null) {
			return null;
		}
		if(this._cachedBgTile == null) {
			var bytes = this.untypedProject.getAsset(this.bgImageInfos.relFilePath);
			this._cachedBgTile = dn_ImageDecoder.decodeTile(bytes);
			if(this._cachedBgTile == null) {
				this._cachedBgTile = h2d_Tile.fromColor(16711680,this.pxWid,this.pxHei);
			}
		}
		return this._cachedBgTile;
	}
	,getBgBitmap: function(parent) {
		var t = this.getRawBgImageTile();
		if(t == null) {
			return null;
		}
		t = t.sub(this.bgImageInfos.cropRect.x,this.bgImageInfos.cropRect.y,this.bgImageInfos.cropRect.w,this.bgImageInfos.cropRect.h);
		var bmp = new h2d_Bitmap(t,parent);
		bmp.posChanged = true;
		bmp.x = this.bgImageInfos.topLeftX;
		bmp.posChanged = true;
		bmp.y = this.bgImageInfos.topLeftY;
		bmp.posChanged = true;
		bmp.scaleX = this.bgImageInfos.scaleX;
		bmp.posChanged = true;
		bmp.scaleY = this.bgImageInfos.scaleY;
		return bmp;
	}
	,__class__: ldtk_Level
};
var assets_LevelProject_$Level = function(project,arrayIdx,json) {
	ldtk_Level.call(this,project,arrayIdx,json);
};
$hxClasses["assets.LevelProject_Level"] = assets_LevelProject_$Level;
assets_LevelProject_$Level.__name__ = "assets.LevelProject_Level";
assets_LevelProject_$Level.__super__ = ldtk_Level;
assets_LevelProject_$Level.prototype = $extend(ldtk_Level.prototype,{
	fromJson: function(json) {
		ldtk_Level.prototype.fromJson.call(this,json);
		var _g = 0;
		var _g1 = this.allUntypedLayers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			this["l_" + l.identifier] = l;
		}
	}
	,_instanciateLayer: function(json) {
		var name = "assets.Layer_" + json.__identifier;
		var c = $hxClasses[name];
		if(c == null) {
			ldtk_Project.error("Couldn't instanciate layer " + json.__identifier);
			return null;
		} else {
			return Type.createInstance(c,[this.untypedProject,json]);
		}
	}
	,resolveLayer: function(id) {
		this.load();
		var _g = 0;
		var _g1 = this.allUntypedLayers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.identifier == id) {
				return l;
			}
		}
		return null;
	}
	,get_l_Entities: function() {
		this.load();
		return Reflect.field(this,"l_Entities");
	}
	,get_l_Decoration: function() {
		this.load();
		return Reflect.field(this,"l_Decoration");
	}
	,get_l_Walls: function() {
		this.load();
		return Reflect.field(this,"l_Walls");
	}
	,get_l_BackWalls: function() {
		this.load();
		return Reflect.field(this,"l_BackWalls");
	}
	,__class__: assets_LevelProject_$Level
});
var ldtk_World = function(project,arrayIdx,json) {
	this.untypedProject = project;
	this.arrayIndex = arrayIdx;
	if(json != null) {
		this.fromJson(json);
	}
};
$hxClasses["ldtk.World"] = ldtk_World;
ldtk_World.__name__ = "ldtk.World";
ldtk_World.createDummyJson = function(projectJson) {
	var untypedJson = projectJson;
	return { iid : "Default_iid", identifier : "Default", worldLayout : Type.createEnum(ldtk_WorldLayout,Std.string(untypedJson.worldLayout),null), worldGridWidth : projectJson.worldGridWidth, worldGridHeight : projectJson.worldGridHeight, defaultLevelWidth : projectJson.defaultLevelWidth, defaultLevelHeight : projectJson.defaultLevelHeight, levels : projectJson.levels};
};
ldtk_World.prototype = {
	toString: function() {
		return "ldtk.World[" + this.identifier + ", " + Std.string(this.layout) + ", " + this._untypedLevels.length + " levels]";
	}
	,fromJson: function(untypedJson) {
		this.json = untypedJson;
		this.iid = this.json.iid;
		this.identifier = this.json.identifier;
		this.layout = Type.createEnum(ldtk_WorldLayout,Std.string(untypedJson.worldLayout),null);
		this.gridWid = this.json.worldGridWidth;
		this.gridHei = this.json.worldGridHeight;
		this._untypedLevels = [];
		var idx = 0;
		var _g = 0;
		var _g1 = this.json.levels;
		while(_g < _g1.length) {
			var json = _g1[_g];
			++_g;
			this._untypedLevels.push(this._instanciateLevel(this.untypedProject,idx++,json));
		}
	}
	,_instanciateLevel: function(project,arrayIndex,json) {
		return null;
	}
	,__class__: ldtk_World
};
var assets_LevelProject_$World = function(project,arrayIndex,json) {
	this.levels = [];
	ldtk_World.call(this,project,arrayIndex,json);
};
$hxClasses["assets.LevelProject_World"] = assets_LevelProject_$World;
assets_LevelProject_$World.__name__ = "assets.LevelProject_World";
assets_LevelProject_$World.__super__ = ldtk_World;
assets_LevelProject_$World.prototype = $extend(ldtk_World.prototype,{
	fromJson: function(json) {
		ldtk_World.prototype.fromJson.call(this,json);
		this.levels = this._untypedLevels.slice();
	}
	,_instanciateLevel: function(project,arrayIndex,json) {
		return new assets_LevelProject_$Level(project,arrayIndex,json);
	}
	,getLevel: function(uid,idOrIid) {
		if(uid == null && idOrIid == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this._untypedLevels;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(idOrIid != null && (l.identifier == idOrIid || l.iid == idOrIid) || uid != null && l.uid == uid) {
				return l;
			}
		}
		return null;
	}
	,getLevelAt: function(worldX,worldY) {
		var _g = 0;
		var _g1 = this._untypedLevels;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(worldX >= l.worldX && worldX < l.worldX + l.pxWid && worldY >= l.worldY && worldY < l.worldY + l.pxHei) {
				return l;
			}
		}
		return null;
	}
	,__class__: assets_LevelProject_$World
});
var assets_LevelProject_$World_$Default = function(project,arrayIndex,json) {
	assets_LevelProject_$World.call(this,project,arrayIndex,json);
};
$hxClasses["assets.LevelProject_World_Default"] = assets_LevelProject_$World_$Default;
assets_LevelProject_$World_$Default.__name__ = "assets.LevelProject_World_Default";
assets_LevelProject_$World_$Default.__super__ = assets_LevelProject_$World;
assets_LevelProject_$World_$Default.prototype = $extend(assets_LevelProject_$World.prototype,{
	fromJson: function(json) {
		assets_LevelProject_$World.prototype.fromJson.call(this,json);
		this.all_levels = { };
		var _g = 0;
		var _g1 = this._untypedLevels;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			this.all_levels[l.identifier] = l;
		}
	}
	,__class__: assets_LevelProject_$World_$Default
});
var ldtk_Project = function() {
};
$hxClasses["ldtk.Project"] = ldtk_Project;
ldtk_Project.__name__ = "ldtk.Project";
ldtk_Project.error = function(str) {
	throw haxe_Exception.thrown("[ldtk-api] " + str);
};
ldtk_Project.hexToInt = function(hex) {
	if(hex == null) {
		return 0;
	} else {
		return Std.parseInt("0x" + HxOverrides.substr(hex,1,null));
	}
};
ldtk_Project.intToHex = function(c,leadingZeros) {
	if(leadingZeros == null) {
		leadingZeros = 6;
	}
	var h = StringTools.hex(c);
	while(h.length < leadingZeros) h = "0" + h;
	return "#" + h;
};
ldtk_Project.prototype = {
	parseJson: function(jsonString) {
		this._untypedTilesets = new haxe_ds_IntMap();
		this._untypedToc = new haxe_ds_StringMap();
		this.assetCache = new haxe_ds_StringMap();
		var untypedJson = JSON.parse(jsonString);
		var json = untypedJson;
		this.defs = json.defs;
		this.bgColor_hex = json.bgColor;
		var hex = json.bgColor;
		this.bgColor_int = hex == null ? 0 : Std.parseInt("0x" + HxOverrides.substr(hex,1,null));
		if(json.worlds == null || json.worlds.length == 0) {
			json.worlds = [ldtk_World.createDummyJson(json)];
		}
		this._untypedWorlds = [];
		var idx = 0;
		var _g = 0;
		var _g1 = json.worlds;
		while(_g < _g1.length) {
			var json1 = _g1[_g];
			++_g;
			this._untypedWorlds.push(this._instanciateWorld(this,idx++,json1));
		}
		this["all_tilesets"] = { };
		var _g = 0;
		var _g1 = json.defs.tilesets;
		while(_g < _g1.length) {
			var tsJson = _g1[_g];
			++_g;
			var this1 = this._untypedTilesets;
			var key = tsJson.uid;
			var value = this._instanciateTileset(this,tsJson);
			this1.h[key] = value;
			Reflect.field(this,"all_tilesets")[tsJson.identifier] = this._instanciateTileset(this,tsJson);
		}
		var classToc = Reflect.field(this,"toc");
		var _g = 0;
		var _g1 = Reflect.fields(classToc);
		while(_g < _g1.length) {
			var k = _g1[_g];
			++_g;
			classToc[k] = [];
		}
		if(json.toc != null) {
			var jsonToc = json.toc;
			var _g = 0;
			while(_g < jsonToc.length) {
				var te = jsonToc[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(classToc,te.identifier)) {
					classToc[te.identifier] = te.instances.slice();
				}
			}
		}
	}
	,capitalize: function(id) {
		if(id == null) {
			id = "";
		}
		var reg = new EReg("^(_*)([a-z])([a-zA-Z0-9_]*)","g");
		if(reg.match(id)) {
			id = reg.matched(1) + reg.matched(2).toUpperCase() + reg.matched(3);
		}
		return id;
	}
	,_resolveExternalEnumValue: function(name,enumValueId) {
		return null;
	}
	,_assignFieldInstanceValues: function(target,fieldInstances) {
		var _gthis = this;
		var arrayReg = new EReg("Array<(.*)>","gi");
		var _g = 0;
		while(_g < fieldInstances.length) {
			var f = fieldInstances[_g];
			++_g;
			if(f.__value == null) {
				continue;
			}
			var isArray = arrayReg.match(f.__type);
			var typeName = isArray ? arrayReg.matched(1) : f.__type;
			var _hx_tmp;
			var _hx_tmp1;
			switch(typeName) {
			case "Color":
				target["f_" + f.__identifier + "_hex"] = f.__value;
				if(!isArray) {
					var hex = f.__value;
					target["f_" + f.__identifier + "_int"] = hex == null ? 0 : Std.parseInt("0x" + HxOverrides.substr(hex,1,null));
				} else {
					var arr = f.__value;
					var field = "f_" + f.__identifier + "_int";
					var result = new Array(arr.length);
					var _g1 = 0;
					var _g2 = arr.length;
					while(_g1 < _g2) {
						var i = _g1++;
						var c = arr[i];
						result[i] = c == null ? 0 : Std.parseInt("0x" + HxOverrides.substr(c,1,null));
					}
					target[field] = result;
				}
				break;
			case "EntityRef":
				target["f_" + f.__identifier] = f.__value;
				break;
			case "FilePath":
				target["f_" + f.__identifier] = f.__value;
				break;
			case "Point":
				if(!isArray) {
					target["f_" + f.__identifier] = new ldtk_Point(f.__value.cx,f.__value.cy);
				} else {
					var arr1 = f.__value;
					var field1 = "f_" + f.__identifier;
					var result1 = new Array(arr1.length);
					var _g3 = 0;
					var _g4 = arr1.length;
					while(_g3 < _g4) {
						var i1 = _g3++;
						var pt = arr1[i1];
						result1[i1] = new ldtk_Point(pt.cx,pt.cy);
					}
					target[field1] = result1;
				}
				break;
			case "Bool":case "Float":case "Int":case "String":
				target["f_" + f.__identifier] = f.__value;
				break;
			case "Tile":
				_hx_tmp = typeName.indexOf("LocalEnum.");
				if(_hx_tmp == 0) {
					var type = this._enumTypePrefix + HxOverrides.substr(typeName,typeName.indexOf(".") + 1,null);
					var e = $hxEnums[type];
					if(!isArray) {
						target["f_" + f.__identifier] = Type.createEnum(e,this.capitalize(f.__value));
					} else {
						var arr2 = f.__value;
						var field2 = "f_" + f.__identifier;
						var result2 = new Array(arr2.length);
						var _g5 = 0;
						var _g6 = arr2.length;
						while(_g5 < _g6) {
							var i2 = _g5++;
							result2[i2] = Type.createEnum(e,_gthis.capitalize(arr2[i2]));
						}
						target[field2] = result2;
					}
				} else {
					_hx_tmp1 = typeName.indexOf("ExternEnum.");
					if(_hx_tmp1 == 0) {
						var type1 = HxOverrides.substr(typeName,typeName.indexOf(".") + 1,null);
						if(!isArray) {
							target["f_" + f.__identifier] = this._resolveExternalEnumValue(type1,f.__value);
						} else {
							var arr3 = f.__value;
							var field3 = "f_" + f.__identifier;
							var result3 = new Array(arr3.length);
							var _g7 = 0;
							var _g8 = arr3.length;
							while(_g7 < _g8) {
								var i3 = _g7++;
								result3[i3] = _gthis._resolveExternalEnumValue(type1,arr3[i3]);
							}
							target[field3] = result3;
						}
					} else {
						var _checkTile = (function() {
							return function(tileRect) {
								var _checkTile;
								if(tileRect != null) {
									var v = tileRect.x;
									_checkTile = !(v != null && !isNaN(v) && isFinite(v));
								} else {
									_checkTile = true;
								}
								if(_checkTile) {
									return null;
								} else {
									return tileRect;
								}
							};
						})();
						var _heapsTileGetter = [(function() {
							return function(tileRect) {
								var _heapsTileGetter;
								if(tileRect != null) {
									var v = tileRect.x;
									_heapsTileGetter = !(v != null && !isNaN(v) && isFinite(v));
								} else {
									_heapsTileGetter = true;
								}
								if(_heapsTileGetter || !_gthis._untypedTilesets.h.hasOwnProperty(tileRect.tilesetUid)) {
									return null;
								}
								var tileset = _gthis._untypedTilesets.h[tileRect.tilesetUid];
								var x = tileRect.x;
								var y = tileRect.y;
								var wid = tileRect.w;
								var hei = tileRect.h;
								var atlas;
								if(tileset._cachedAtlasTile != null) {
									atlas = tileset._cachedAtlasTile;
								} else {
									var bytes = tileset.untypedProject.getAsset(tileset.relPath);
									tileset._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
									if(tileset._cachedAtlasTile == null) {
										tileset._cachedAtlasTile = h2d_Tile.fromColor(16711680,tileset.pxWid,tileset.pxHei);
									}
									atlas = tileset._cachedAtlasTile;
								}
								var tile = atlas == null ? null : atlas.sub(x,y,wid,hei);
								return tile;
							};
						})()];
						if(isArray) {
							var arr4 = f.__value;
							var field4 = "f_" + f.__identifier + "_infos";
							var result4 = new Array(arr4.length);
							var _g9 = 0;
							var _g10 = arr4.length;
							while(_g9 < _g10) {
								var i4 = _g9++;
								result4[i4] = _checkTile(arr4[i4]);
							}
							target[field4] = result4;
							var field5 = "f_" + f.__identifier + "_getTile";
							var result5 = new Array(arr4.length);
							var _g11 = 0;
							var _g12 = arr4.length;
							while(_g11 < _g12) {
								var i5 = _g11++;
								result5[i5] = (function(tileRect,_heapsTileGetter) {
									return function() {
										return _heapsTileGetter[0](tileRect[0]);
									};
								})([arr4[i5]],_heapsTileGetter);
							}
							target[field5] = result5;
						} else {
							target["f_" + f.__identifier + "_infos"] = _checkTile(f.__value);
							target["f_" + f.__identifier + "_getTile"] = (function(tileRect,_heapsTileGetter) {
								return function() {
									return _heapsTileGetter[0](tileRect[0]);
								};
							})([f.__value],_heapsTileGetter);
						}
					}
				}
				break;
			default:
				_hx_tmp = typeName.indexOf("LocalEnum.");
				if(_hx_tmp == 0) {
					var type2 = this._enumTypePrefix + HxOverrides.substr(typeName,typeName.indexOf(".") + 1,null);
					var e1 = $hxEnums[type2];
					if(!isArray) {
						target["f_" + f.__identifier] = Type.createEnum(e1,this.capitalize(f.__value));
					} else {
						var arr5 = f.__value;
						var field6 = "f_" + f.__identifier;
						var result6 = new Array(arr5.length);
						var _g13 = 0;
						var _g14 = arr5.length;
						while(_g13 < _g14) {
							var i6 = _g13++;
							result6[i6] = Type.createEnum(e1,_gthis.capitalize(arr5[i6]));
						}
						target[field6] = result6;
					}
				} else {
					_hx_tmp1 = typeName.indexOf("ExternEnum.");
					if(_hx_tmp1 == 0) {
						var type3 = HxOverrides.substr(typeName,typeName.indexOf(".") + 1,null);
						if(!isArray) {
							target["f_" + f.__identifier] = this._resolveExternalEnumValue(type3,f.__value);
						} else {
							var arr6 = f.__value;
							var field7 = "f_" + f.__identifier;
							var result7 = new Array(arr6.length);
							var _g15 = 0;
							var _g16 = arr6.length;
							while(_g15 < _g16) {
								var i7 = _g15++;
								result7[i7] = _gthis._resolveExternalEnumValue(type3,arr6[i7]);
							}
							target[field7] = result7;
						}
					} else {
						ldtk_Project.error("Unknown field type " + typeName + " at runtime");
					}
				}
			}
		}
	}
	,toString: function() {
		return "ldtk.Project[" + this._untypedWorlds.length + " worlds]";
	}
	,getAsset: function(projectRelativePath) {
		if(Object.prototype.hasOwnProperty.call(this.assetCache.h,projectRelativePath)) {
			return this.assetCache.h[projectRelativePath];
		} else {
			var bytes = this.loadAssetBytes(projectRelativePath);
			this.assetCache.h[projectRelativePath] = bytes;
			return bytes;
		}
	}
	,makeAssetRelativePath: function(projectRelativePath) {
		var p = StringTools.replace(this.projectFilePath,"\\","/");
		var projectFileName = p.lastIndexOf("/") < 0 ? p : HxOverrides.substr(p,p.lastIndexOf("/") + 1,null);
		var pendingDirs = [hxd_Res.get_loader().fs.getRoot()];
		while(pendingDirs.length > 0) {
			var curDir = pendingDirs.shift();
			var _g = curDir.iterator();
			while(_g.i < _g.l) {
				var f = _g.a[_g.i++];
				if(f.get_isDirectory()) {
					pendingDirs.push(f);
				} else if(f.name == projectFileName) {
					var path = (f.get_directory().length == 0 ? "" : f.get_directory() + "/") + projectRelativePath;
					var p = new dn_FilePath();
					p.parse(path,true);
					var p1 = p;
					return (p1.isWindowsNetworkDrive && !p1._useWinNetDriveUriFormat ? p1.backslashes ? "\\" : "/" : p1.uriScheme != null ? p1.uriAuthority == null ? "" + p1.uriScheme + ":/" : "" + p1.uriScheme + "://" + p1.uriAuthority + "/" : "") + (p1.directory == null ? "" : p1.fileName == null && p1.extension == null || p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory == null ? null : p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory + (p1.backslashes ? "\\" : "/")) + ((p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == null ? "" : p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension));
				}
			}
		}
		ldtk_Project.error("Project file is not in Heaps res/ folder!");
		return "";
	}
	,loadAssetBytes: function(projectRelativePath) {
		var resPath = this.makeAssetRelativePath(projectRelativePath);
		if(!hxd_Res.get_loader().exists(resPath)) {
			ldtk_Project.error("Asset not found in Heaps res/ folder: " + resPath);
		}
		var res = hxd_Res.load(resPath);
		return res.entry.getBytes();
	}
	,_instanciateWorld: function(project,arrayIndex,json) {
		return null;
	}
	,_instanciateTileset: function(project,json) {
		return null;
	}
	,searchDef: function(arr,uid,identifier) {
		if(uid == null && identifier == null) {
			return null;
		}
		var _g = 0;
		while(_g < arr.length) {
			var e = arr[_g];
			++_g;
			if(uid != null && e.uid == uid || identifier != null && e.identifier == identifier) {
				return e;
			}
		}
		return null;
	}
	,getLayerDefJson: function(uid,identifier) {
		return this.searchDef(this.defs.layers,uid,identifier);
	}
	,getLayerDef: function(uid,identifier) {
		return this.getLayerDefJson(uid,identifier);
	}
	,getEntityDefJson: function(uid,identifier) {
		return this.searchDef(this.defs.entities,uid,identifier);
	}
	,getEntityDef: function(uid,identifier) {
		return this.searchDef(this.defs.entities,uid,identifier);
	}
	,getTilesetDefJson: function(uid,identifier) {
		return this.searchDef(this.defs.tilesets,uid,identifier);
	}
	,getTilesetDef: function(uid,identifier) {
		return this.searchDef(this.defs.tilesets,uid,identifier);
	}
	,getEnumDefJson: function(uid,identifier) {
		var e = this.searchDef(this.defs.enums,uid,identifier);
		if(e != null) {
			return e;
		} else {
			return this.searchDef(this.defs.externalEnums,uid,identifier);
		}
	}
	,getEnumDef: function(uid,identifier) {
		var e = this.searchDef(this.defs.enums,uid,identifier);
		if(e != null) {
			return e;
		} else {
			return this.searchDef(this.defs.externalEnums,uid,identifier);
		}
	}
	,getEnumDefFromValue: function(v) {
		try {
			var e = Type.getEnum(v);
			var name = e.__ename__;
			var defId = HxOverrides.substr(name,name.indexOf("_") + 1,null);
			defId = HxOverrides.substr(defId,defId.lastIndexOf(".") + 1,null);
			var uid = null;
			var e = this.searchDef(this.defs.enums,uid,defId);
			if(e != null) {
				return e;
			} else {
				return this.searchDef(this.defs.externalEnums,uid,defId);
			}
		} catch( _g ) {
			return null;
		}
	}
	,getEnumTileInfosFromValue: function(v) {
		var ed = this.getEnumDefFromValue(v);
		if(ed == null) {
			return null;
		}
		var _g = 0;
		var _g1 = ed.values;
		while(_g < _g1.length) {
			var ev = _g1[_g];
			++_g;
			if(ev.id == $hxEnums[v.__enum__].__constructs__[v._hx_index]._hx_name && ev.__tileSrcRect != null) {
				return { tilesetUid : ed.iconTilesetUid, x : ev.__tileSrcRect[0], y : ev.__tileSrcRect[1], w : ev.__tileSrcRect[2], h : ev.__tileSrcRect[3]};
			}
		}
		return null;
	}
	,getEnumTile: function(enumValue) {
		var tileInfos = this.getEnumTileInfosFromValue(enumValue);
		if(tileInfos == null) {
			return null;
		}
		var tileset = this._untypedTilesets.h[tileInfos.tilesetUid];
		if(tileset == null) {
			return null;
		}
		var x = tileInfos.x;
		var y = tileInfos.y;
		var wid = tileInfos.w;
		var hei = tileInfos.h;
		var atlas;
		if(tileset._cachedAtlasTile != null) {
			atlas = tileset._cachedAtlasTile;
		} else {
			var bytes = tileset.untypedProject.getAsset(tileset.relPath);
			tileset._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
			if(tileset._cachedAtlasTile == null) {
				tileset._cachedAtlasTile = h2d_Tile.fromColor(16711680,tileset.pxWid,tileset.pxHei);
			}
			atlas = tileset._cachedAtlasTile;
		}
		if(atlas == null) {
			return null;
		} else {
			return atlas.sub(x,y,wid,hei);
		}
	}
	,getEnumColor: function(enumValue) {
		var ed = this.getEnumDefFromValue(enumValue);
		var _g = 0;
		var _g1 = ed.values;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(v.id == $hxEnums[enumValue.__enum__].__constructs__[enumValue._hx_index]._hx_name) {
				return v.color;
			}
		}
		return 16711935;
	}
	,__class__: ldtk_Project
};
var assets_LevelProject = function(overrideEmbedJson) {
	this.toc = { Hero : [], Box : [], Border : [], Gem : []};
	this.all_worlds = { Default : null};
	ldtk_Project.call(this);
	this._enumTypePrefix = "assets.Enum_";
	this.projectDir = "res";
	this.projectFilePath = "res/LevelProject.ldtk";
	this.parseJson(overrideEmbedJson != null ? overrideEmbedJson : "{\n\t\"__header__\": {\n\t\t\"fileType\": \"LDtk Project JSON\",\n\t\t\"app\": \"LDtk\",\n\t\t\"doc\": \"https://ldtk.io/json\",\n\t\t\"schema\": \"https://ldtk.io/files/JSON_SCHEMA.json\",\n\t\t\"appAuthor\": \"Sebastien 'deepnight' Benard\",\n\t\t\"appVersion\": \"1.4.1\",\n\t\t\"url\": \"https://ldtk.io\"\n\t},\n\t\"iid\": \"7799c960-3b70-11ee-b552-83fdf9fa10c0\",\n\t\"jsonVersion\": \"1.4.1\",\n\t\"appBuildId\": 471015,\n\t\"nextUid\": 221,\n\t\"identifierStyle\": \"Capitalize\",\n\t\"toc\": [],\n\t\"worldLayout\": \"Free\",\n\t\"worldGridWidth\": 256,\n\t\"worldGridHeight\": 256,\n\t\"defaultLevelWidth\": 256,\n\t\"defaultLevelHeight\": 256,\n\t\"defaultPivotX\": 0,\n\t\"defaultPivotY\": 0,\n\t\"defaultGridSize\": 8,\n\t\"defaultEntityWidth\": 16,\n\t\"defaultEntityHeight\": 16,\n\t\"bgColor\": \"#40465B\",\n\t\"defaultLevelBgColor\": \"#696A79\",\n\t\"minifyJson\": false,\n\t\"externalLevels\": true,\n\t\"exportTiled\": false,\n\t\"simplifiedExport\": false,\n\t\"imageExportMode\": \"None\",\n\t\"exportLevelBg\": true,\n\t\"pngFilePattern\": null,\n\t\"backupOnSave\": true,\n\t\"backupLimit\": 10,\n\t\"backupRelPath\": null,\n\t\"levelNamePattern\": \"Level_%idx\",\n\t\"tutorialDesc\": null,\n\t\"customCommands\": [],\n\t\"flags\": [],\n\t\"defs\": { \"layers\": [\n\t\t{\n\t\t\t\"__type\": \"Entities\",\n\t\t\t\"identifier\": \"Entities\",\n\t\t\t\"type\": \"Entities\",\n\t\t\t\"uid\": 22,\n\t\t\t\"doc\": null,\n\t\t\t\"uiColor\": null,\n\t\t\t\"gridSize\": 8,\n\t\t\t\"guideGridWid\": 0,\n\t\t\t\"guideGridHei\": 0,\n\t\t\t\"displayOpacity\": 1,\n\t\t\t\"inactiveOpacity\": 0.6,\n\t\t\t\"hideInList\": false,\n\t\t\t\"hideFieldsWhenInactive\": true,\n\t\t\t\"canSelectWhenInactive\": true,\n\t\t\t\"renderInWorldView\": true,\n\t\t\t\"pxOffsetX\": 0,\n\t\t\t\"pxOffsetY\": 0,\n\t\t\t\"parallaxFactorX\": 0,\n\t\t\t\"parallaxFactorY\": 0,\n\t\t\t\"parallaxScaling\": true,\n\t\t\t\"requiredTags\": [],\n\t\t\t\"excludedTags\": [],\n\t\t\t\"intGridValues\": [],\n\t\t\t\"intGridValuesGroups\": [],\n\t\t\t\"autoRuleGroups\": [],\n\t\t\t\"autoSourceLayerDefUid\": null,\n\t\t\t\"tilesetDefUid\": null,\n\t\t\t\"tilePivotX\": 0,\n\t\t\t\"tilePivotY\": 0\n\t\t},\n\t\t{\n\t\t\t\"__type\": \"Tiles\",\n\t\t\t\"identifier\": \"Decoration\",\n\t\t\t\"type\": \"Tiles\",\n\t\t\t\"uid\": 190,\n\t\t\t\"doc\": null,\n\t\t\t\"uiColor\": null,\n\t\t\t\"gridSize\": 8,\n\t\t\t\"guideGridWid\": 0,\n\t\t\t\"guideGridHei\": 0,\n\t\t\t\"displayOpacity\": 1,\n\t\t\t\"inactiveOpacity\": 1,\n\t\t\t\"hideInList\": false,\n\t\t\t\"hideFieldsWhenInactive\": false,\n\t\t\t\"canSelectWhenInactive\": true,\n\t\t\t\"renderInWorldView\": true,\n\t\t\t\"pxOffsetX\": 0,\n\t\t\t\"pxOffsetY\": 0,\n\t\t\t\"parallaxFactorX\": 0,\n\t\t\t\"parallaxFactorY\": 0,\n\t\t\t\"parallaxScaling\": true,\n\t\t\t\"requiredTags\": [],\n\t\t\t\"excludedTags\": [],\n\t\t\t\"intGridValues\": [],\n\t\t\t\"intGridValuesGroups\": [],\n\t\t\t\"autoRuleGroups\": [],\n\t\t\t\"autoSourceLayerDefUid\": null,\n\t\t\t\"tilesetDefUid\": 1,\n\t\t\t\"tilePivotX\": 0,\n\t\t\t\"tilePivotY\": 0\n\t\t},\n\t\t{\n\t\t\t\"__type\": \"IntGrid\",\n\t\t\t\"identifier\": \"Walls\",\n\t\t\t\"type\": \"IntGrid\",\n\t\t\t\"uid\": 4,\n\t\t\t\"doc\": null,\n\t\t\t\"uiColor\": null,\n\t\t\t\"gridSize\": 8,\n\t\t\t\"guideGridWid\": 0,\n\t\t\t\"guideGridHei\": 0,\n\t\t\t\"displayOpacity\": 1,\n\t\t\t\"inactiveOpacity\": 1,\n\t\t\t\"hideInList\": false,\n\t\t\t\"hideFieldsWhenInactive\": false,\n\t\t\t\"canSelectWhenInactive\": true,\n\t\t\t\"renderInWorldView\": true,\n\t\t\t\"pxOffsetX\": 0,\n\t\t\t\"pxOffsetY\": 0,\n\t\t\t\"parallaxFactorX\": 0,\n\t\t\t\"parallaxFactorY\": 0,\n\t\t\t\"parallaxScaling\": true,\n\t\t\t\"requiredTags\": [],\n\t\t\t\"excludedTags\": [],\n\t\t\t\"intGridValues\": [\n\t\t\t\t{ \"value\": 1, \"identifier\": \"Wood\", \"color\": \"#000000\", \"tile\": { \"tilesetUid\": 1, \"x\": 32, \"y\": 16, \"w\": 8, \"h\": 8 }, \"groupUid\": 1 },\n\t\t\t\t{ \"value\": 4, \"identifier\": \"Coral\", \"color\": \"#EAD4AA\", \"tile\": { \"tilesetUid\": 1, \"x\": 32, \"y\": 40, \"w\": 8, \"h\": 8 }, \"groupUid\": 1 },\n\t\t\t\t{ \"value\": 5, \"identifier\": \"Rock\", \"color\": \"#E4A672\", \"tile\": { \"tilesetUid\": 1, \"x\": 32, \"y\": 88, \"w\": 8, \"h\": 8 }, \"groupUid\": 1 },\n\t\t\t\t{ \"value\": 2, \"identifier\": \"Branch\", \"color\": \"#BE4A2F\", \"tile\": { \"tilesetUid\": 1, \"x\": 8, \"y\": 64, \"w\": 8, \"h\": 8 }, \"groupUid\": 0 },\n\t\t\t\t{ \"value\": 3, \"identifier\": \"Spikes\", \"color\": \"#D77643\", \"tile\": { \"tilesetUid\": 1, \"x\": 88, \"y\": 16, \"w\": 8, \"h\": 8 }, \"groupUid\": 0 },\n\t\t\t\t{ \"value\": 7, \"identifier\": \"PlatformLeft\", \"color\": \"#000000\", \"tile\": { \"tilesetUid\": 1, \"x\": 128, \"y\": 8, \"w\": 8, \"h\": 8 }, \"groupUid\": 2 },\n\t\t\t\t{ \"value\": 8, \"identifier\": \"PlatformRight\", \"color\": \"#000000\", \"tile\": { \"tilesetUid\": 1, \"x\": 136, \"y\": 8, \"w\": 8, \"h\": 8 }, \"groupUid\": 2 },\n\t\t\t\t{ \"value\": 6, \"identifier\": \"PlatformUp\", \"color\": \"#000000\", \"tile\": { \"tilesetUid\": 1, \"x\": 112, \"y\": 0, \"w\": 8, \"h\": 8 }, \"groupUid\": 2 },\n\t\t\t\t{ \"value\": 9, \"identifier\": \"PlatformDown\", \"color\": \"#000000\", \"tile\": { \"tilesetUid\": 1, \"x\": 112, \"y\": 8, \"w\": 8, \"h\": 8 }, \"groupUid\": 2 }\n\t\t\t],\n\t\t\t\"intGridValuesGroups\": [ { \"uid\": 1, \"identifier\": \"Wall\", \"color\": null }, { \"uid\": 2, \"identifier\": \"Platforms\", \"color\": null } ],\n\t\t\t\"autoRuleGroups\": [\n\t\t\t\t{ \"uid\": 113, \"name\": \"Platforms\", \"color\": null, \"icon\": null, \"active\": true, \"isOptional\": false, \"rules\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 115,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [16],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2000,0,0,7,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 2679837,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 121,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [80],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,7,0,0,2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 2679837,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 122,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 1,\n\t\t\t\t\t\t\"tileIds\": [48],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [7],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 2679837,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 124,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [17],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2000,0,0,8,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6195865,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 116,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [81],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,8,0,0,2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6195865,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 123,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 1,\n\t\t\t\t\t\t\"tileIds\": [49],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [8],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6195865,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 118,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [15],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,6,2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 7189583,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 119,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [13],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,2000,6,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 7189583,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 120,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 1,\n\t\t\t\t\t\t\"tileIds\": [14],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [6],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 7189583,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 114,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [45],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,2000,9,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 8945784,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 125,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [47],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,9,2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 8945784,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 126,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 1,\n\t\t\t\t\t\t\"tileIds\": [46],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [9],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 8945784,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t}\n\t\t\t\t], \"usesWizard\": false },\n\t\t\t\t{ \"uid\": 66, \"name\": \"Spikes\", \"color\": null, \"icon\": null, \"active\": true, \"isOptional\": false, \"rules\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 71,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [10],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2000,0,2000,3,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 493617,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 72,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [12],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2000,0,0,3,2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 493617,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 73,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [76],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,3,2000,0,2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 493617,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 74,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [74],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,2000,3,0,0,2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 493617,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 67,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [75],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,3,0,0,2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 493617,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 68,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [11],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2000,0,0,3,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 493617,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 69,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [44],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,3,2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 493617,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 70,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [42],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,2000,3,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 493617,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 107,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 1,\n\t\t\t\t\t\t\"tileIds\": [43],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [3],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 7041344,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t}\n\t\t\t\t], \"usesWizard\": false },\n\t\t\t\t{ \"uid\": 30, \"name\": \"Branches\", \"color\": null, \"icon\": null, \"active\": true, \"isOptional\": false, \"rules\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 34,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [258],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,2,-1000001,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 7984890,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 33,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [256],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,-1000001,2,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 7984890,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 32,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 1,\n\t\t\t\t\t\t\"tileIds\": [257],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [2],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 7984890,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t}\n\t\t\t\t], \"usesWizard\": false },\n\t\t\t\t{ \"uid\": 5, \"name\": \"Wood\", \"color\": null, \"icon\": null, \"active\": true, \"isOptional\": false, \"rules\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 15,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [4],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,1,1,0,1,-2000],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 16,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [5],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,1,1,0,-2000,1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 17,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [37],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [-2000,1,0,1,1,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 18,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [36],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,1,-2000,0,1,1,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 6,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [6],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,8,0,-2000,1,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 129,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [6],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,9,1,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 130,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [1],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,-2000,1,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 7,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [7],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,7,0,0,1,-2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 128,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [7],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,1,9,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 127,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [3],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,1,-2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 8,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [39],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,1,6,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 131,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [39],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,1,-2000,0,7,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 132,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [67],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,1,-2000,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 9,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [38],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,6,1,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 133,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [38],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,-2000,1,0,0,8,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 134,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [65],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,-2000,1,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 10,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [66],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,1,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 11,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [33],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,-2000,1,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 12,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [2],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,1,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 13,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [35],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,1,-2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 14,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 1,\n\t\t\t\t\t\t\"tileIds\": [34],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [1],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 845930,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t}\n\t\t\t\t], \"usesWizard\": false },\n\t\t\t\t{ \"uid\": 75, \"name\": \"Coral\", \"color\": null, \"icon\": null, \"active\": true, \"isOptional\": false, \"rules\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 76,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [166],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,4,4,0,4,-2000],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 219,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [100],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,4,4,0,4,-2000],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 77,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [101],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,4,4,0,-2000,4,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 217,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [199],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [-2000,4,0,4,4,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 78,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [133],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [-2000,4,0,4,4,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 79,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [132],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,4,-2000,0,4,4,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 80,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [102],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,8,0,-2000,4,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 137,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [102],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,9,4,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 215,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [193],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,-2000,4,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 138,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [97],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,-2000,4,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 81,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [103],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,7,0,0,4,-2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 139,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [103],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,4,9,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 140,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [195],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,4,-2000,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 218,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [99],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,4,-2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 82,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [135],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,4,6,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 141,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [135],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,4,-2000,0,7,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 142,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [163],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,4,-2000,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 83,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [134],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,-2000,4,0,0,8,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 143,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [134],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,9,4,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 144,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [161],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,-2000,4,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 84,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [194],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,4,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 216,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [162],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,4,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 85,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [129],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,-2000,4,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 86,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [98],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,4,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 87,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [131],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,4,-2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 88,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 1,\n\t\t\t\t\t\t\"tileIds\": [130],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [4],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 845930,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t}\n\t\t\t\t], \"usesWizard\": false },\n\t\t\t\t{ \"uid\": 89, \"name\": \"Rock\", \"color\": null, \"icon\": null, \"active\": true, \"isOptional\": false, \"rules\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 90,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [292],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,5,5,0,5,-2000],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 91,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [293],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,5,5,0,-2000,5,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 92,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [325],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [-2000,5,0,5,5,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 93,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [324],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,5,-2000,0,5,5,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9586903,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 94,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [294],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,9,5,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 147,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [294],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,8,0,-2000,5,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 146,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [289],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,-2000,5,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 95,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [295],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,7,0,0,5,-2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 149,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [295],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,5,9,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 148,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [291],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,5,-2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 96,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [327],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,5,6,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 150,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [327],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,5,-2000,0,7,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 151,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [355],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,5,-2000,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 97,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [326],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,-2000,5,0,0,8,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 153,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [326],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,6,5,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 152,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [353],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,-2000,5,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6184819,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 98,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [354],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,5,0,0,-2000,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 99,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [321],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,-2000,5,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 100,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [290],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2000,0,0,5,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 101,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [323],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,5,-2000,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 5200845,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 102,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 1,\n\t\t\t\t\t\t\"tileIds\": [322],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [5],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 845930,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t}\n\t\t\t\t], \"usesWizard\": false }\n\t\t\t],\n\t\t\t\"autoSourceLayerDefUid\": null,\n\t\t\t\"tilesetDefUid\": 1,\n\t\t\t\"tilePivotX\": 0,\n\t\t\t\"tilePivotY\": 0\n\t\t},\n\t\t{\n\t\t\t\"__type\": \"IntGrid\",\n\t\t\t\"identifier\": \"BackWalls\",\n\t\t\t\"type\": \"IntGrid\",\n\t\t\t\"uid\": 23,\n\t\t\t\"doc\": null,\n\t\t\t\"uiColor\": null,\n\t\t\t\"gridSize\": 8,\n\t\t\t\"guideGridWid\": 0,\n\t\t\t\"guideGridHei\": 0,\n\t\t\t\"displayOpacity\": 1,\n\t\t\t\"inactiveOpacity\": 1,\n\t\t\t\"hideInList\": false,\n\t\t\t\"hideFieldsWhenInactive\": false,\n\t\t\t\"canSelectWhenInactive\": true,\n\t\t\t\"renderInWorldView\": true,\n\t\t\t\"pxOffsetX\": 0,\n\t\t\t\"pxOffsetY\": 0,\n\t\t\t\"parallaxFactorX\": 0,\n\t\t\t\"parallaxFactorY\": 0,\n\t\t\t\"parallaxScaling\": true,\n\t\t\t\"requiredTags\": [],\n\t\t\t\"excludedTags\": [],\n\t\t\t\"intGridValues\": [\n\t\t\t\t{ \"value\": 1, \"identifier\": \"Wood\", \"color\": \"#4553B5\", \"tile\": { \"tilesetUid\": 1, \"x\": 16, \"y\": 104, \"w\": 8, \"h\": 8 }, \"groupUid\": 0 },\n\t\t\t\t{ \"value\": 2, \"identifier\": \"Rock\", \"color\": \"#000000\", \"tile\": { \"tilesetUid\": 1, \"x\": 16, \"y\": 128, \"w\": 8, \"h\": 8 }, \"groupUid\": 0 }\n\t\t\t],\n\t\t\t\"intGridValuesGroups\": [],\n\t\t\t\"autoRuleGroups\": [\n\t\t\t\t{ \"uid\": 164, \"name\": \"Wood\", \"color\": null, \"icon\": null, \"active\": true, \"isOptional\": false, \"rules\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 173,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [421],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [-1,1,0,1,1,1,0,1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3089346,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 174,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [420],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,1,-1,1,1,1,0,1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3089346,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 175,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [388],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,1,0,1,1,1,0,1,-1],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3089346,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 176,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [389],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,1,0,1,1,1,-1,1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3089346,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 170,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [417],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,1,0,-1,1,1,0,1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 1294116,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 171,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [419],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,1,0,1,1,-1,0,1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 1294116,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 169,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [386],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-1,0,1,1,1,0,1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 2175299,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 172,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [450],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,1,0,1,1,1,0,-1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 2175299,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 167,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [451],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,1,0,1,1,-1,0,-1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6467604,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 165,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [385],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-1,0,-1,1,1,0,1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9807515,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 166,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [387],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-1,0,1,1,-1,0,1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9807515,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 168,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [449],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,1,0,-1,1,1,0,-1,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9807515,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 177,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [452],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,-1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 182,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [453],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,-1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 178,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [452],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,-1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 183,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [453],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,-1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 179,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [452],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,0,0,1,1,-1,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 184,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [453],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,0,0,1,1,-1,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 180,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [452],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,-1,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 181,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [453],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,-1,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 185,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 1,\n\t\t\t\t\t\t\"tileIds\": [418],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [1],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 2682069,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t}\n\t\t\t\t], \"usesWizard\": false },\n\t\t\t\t{ \"uid\": 193, \"name\": \"Rock\", \"color\": null, \"icon\": null, \"active\": true, \"isOptional\": false, \"rules\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 194,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [517],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [-2,2,0,2,2,2,0,2,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3089346,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 195,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [516],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2,-2,2,2,2,0,2,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3089346,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 196,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [484],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2,0,2,2,2,0,2,-2],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3089346,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 197,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [485],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2,0,2,2,2,-2,2,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3089346,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 198,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [513],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2,0,-2,2,2,0,2,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 1294116,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 199,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [515],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2,0,2,2,-2,0,2,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 1294116,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 200,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [482],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2,0,2,2,2,0,2,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 2175299,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 201,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [546],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2,0,2,2,2,0,-2,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 2175299,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 202,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [547],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2,0,2,2,-2,0,-2,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 6467604,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 203,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [481],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2,0,-2,2,2,0,2,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9807515,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 204,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [483],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,-2,0,2,2,-2,0,2,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9807515,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 205,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 3,\n\t\t\t\t\t\t\"tileIds\": [545],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,2,0,-2,2,2,0,-2,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 9807515,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 206,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [548],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,-2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 207,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [549],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,-2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 208,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [548],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,-2,2,2,0,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 209,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [549],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,-2,2,2,0,0,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 210,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [548],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,0,0,2,2,-2,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 211,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [549],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,0,0,2,2,-2,0,0,0,0,0,0,0,0,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 212,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [548],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,-2,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 213,\n\t\t\t\t\t\t\"active\": false,\n\t\t\t\t\t\t\"size\": 5,\n\t\t\t\t\t\t\"tileIds\": [549],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 0.2,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,-2,0,0],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 3361982,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"uid\": 214,\n\t\t\t\t\t\t\"active\": true,\n\t\t\t\t\t\t\"size\": 1,\n\t\t\t\t\t\t\"tileIds\": [514],\n\t\t\t\t\t\t\"alpha\": 1,\n\t\t\t\t\t\t\"chance\": 1,\n\t\t\t\t\t\t\"breakOnMatch\": true,\n\t\t\t\t\t\t\"pattern\": [2],\n\t\t\t\t\t\t\"flipX\": false,\n\t\t\t\t\t\t\"flipY\": false,\n\t\t\t\t\t\t\"xModulo\": 1,\n\t\t\t\t\t\t\"yModulo\": 1,\n\t\t\t\t\t\t\"xOffset\": 0,\n\t\t\t\t\t\t\"yOffset\": 0,\n\t\t\t\t\t\t\"tileXOffset\": 0,\n\t\t\t\t\t\t\"tileYOffset\": 0,\n\t\t\t\t\t\t\"tileRandomXMin\": 0,\n\t\t\t\t\t\t\"tileRandomXMax\": 0,\n\t\t\t\t\t\t\"tileRandomYMin\": 0,\n\t\t\t\t\t\t\"tileRandomYMax\": 0,\n\t\t\t\t\t\t\"checker\": \"None\",\n\t\t\t\t\t\t\"tileMode\": \"Single\",\n\t\t\t\t\t\t\"pivotX\": 0,\n\t\t\t\t\t\t\"pivotY\": 0,\n\t\t\t\t\t\t\"outOfBoundsValue\": null,\n\t\t\t\t\t\t\"perlinActive\": false,\n\t\t\t\t\t\t\"perlinSeed\": 2682069,\n\t\t\t\t\t\t\"perlinScale\": 0.2,\n\t\t\t\t\t\t\"perlinOctaves\": 2\n\t\t\t\t\t}\n\t\t\t\t], \"usesWizard\": false }\n\t\t\t],\n\t\t\t\"autoSourceLayerDefUid\": null,\n\t\t\t\"tilesetDefUid\": 1,\n\t\t\t\"tilePivotX\": 0,\n\t\t\t\"tilePivotY\": 0\n\t\t}\n\t], \"entities\": [\n\t\t{\n\t\t\t\"identifier\": \"Hero\",\n\t\t\t\"uid\": 21,\n\t\t\t\"tags\": [],\n\t\t\t\"exportToToc\": false,\n\t\t\t\"doc\": null,\n\t\t\t\"width\": 8,\n\t\t\t\"height\": 8,\n\t\t\t\"resizableX\": false,\n\t\t\t\"resizableY\": false,\n\t\t\t\"minWidth\": null,\n\t\t\t\"maxWidth\": null,\n\t\t\t\"minHeight\": null,\n\t\t\t\"maxHeight\": null,\n\t\t\t\"keepAspectRatio\": false,\n\t\t\t\"tileOpacity\": 1,\n\t\t\t\"fillOpacity\": 0.08,\n\t\t\t\"lineOpacity\": 0,\n\t\t\t\"hollow\": false,\n\t\t\t\"color\": \"#BE4A2F\",\n\t\t\t\"renderMode\": \"Tile\",\n\t\t\t\"showName\": true,\n\t\t\t\"tilesetId\": 20,\n\t\t\t\"tileRenderMode\": \"FitInside\",\n\t\t\t\"tileRect\": { \"tilesetUid\": 20, \"x\": 0, \"y\": 32, \"w\": 8, \"h\": 8 },\n\t\t\t\"uiTileRect\": null,\n\t\t\t\"nineSliceBorders\": [],\n\t\t\t\"maxCount\": 1,\n\t\t\t\"limitScope\": \"PerLevel\",\n\t\t\t\"limitBehavior\": \"MoveLastOne\",\n\t\t\t\"pivotX\": 0,\n\t\t\t\"pivotY\": 0,\n\t\t\t\"fieldDefs\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Box\",\n\t\t\t\"uid\": 26,\n\t\t\t\"tags\": [],\n\t\t\t\"exportToToc\": false,\n\t\t\t\"doc\": null,\n\t\t\t\"width\": 8,\n\t\t\t\"height\": 8,\n\t\t\t\"resizableX\": true,\n\t\t\t\"resizableY\": true,\n\t\t\t\"minWidth\": 8,\n\t\t\t\"maxWidth\": null,\n\t\t\t\"minHeight\": 8,\n\t\t\t\"maxHeight\": null,\n\t\t\t\"keepAspectRatio\": false,\n\t\t\t\"tileOpacity\": 1,\n\t\t\t\"fillOpacity\": 0.08,\n\t\t\t\"lineOpacity\": 0,\n\t\t\t\"hollow\": false,\n\t\t\t\"color\": \"#D77643\",\n\t\t\t\"renderMode\": \"Tile\",\n\t\t\t\"showName\": true,\n\t\t\t\"tilesetId\": 20,\n\t\t\t\"tileRenderMode\": \"NineSlice\",\n\t\t\t\"tileRect\": { \"tilesetUid\": 20, \"x\": 80, \"y\": 8, \"w\": 24, \"h\": 24 },\n\t\t\t\"uiTileRect\": null,\n\t\t\t\"nineSliceBorders\": [6,6,6,6],\n\t\t\t\"maxCount\": 0,\n\t\t\t\"limitScope\": \"PerLevel\",\n\t\t\t\"limitBehavior\": \"MoveLastOne\",\n\t\t\t\"pivotX\": 0,\n\t\t\t\"pivotY\": 0,\n\t\t\t\"fieldDefs\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Border\",\n\t\t\t\"uid\": 28,\n\t\t\t\"tags\": [],\n\t\t\t\"exportToToc\": false,\n\t\t\t\"doc\": null,\n\t\t\t\"width\": 8,\n\t\t\t\"height\": 8,\n\t\t\t\"resizableX\": true,\n\t\t\t\"resizableY\": true,\n\t\t\t\"minWidth\": 12,\n\t\t\t\"maxWidth\": null,\n\t\t\t\"minHeight\": 12,\n\t\t\t\"maxHeight\": null,\n\t\t\t\"keepAspectRatio\": false,\n\t\t\t\"tileOpacity\": 1,\n\t\t\t\"fillOpacity\": 0.08,\n\t\t\t\"lineOpacity\": 0,\n\t\t\t\"hollow\": true,\n\t\t\t\"color\": \"#D77643\",\n\t\t\t\"renderMode\": \"Tile\",\n\t\t\t\"showName\": true,\n\t\t\t\"tilesetId\": 20,\n\t\t\t\"tileRenderMode\": \"NineSlice\",\n\t\t\t\"tileRect\": { \"tilesetUid\": 20, \"x\": 8, \"y\": 32, \"w\": 16, \"h\": 16 },\n\t\t\t\"uiTileRect\": null,\n\t\t\t\"nineSliceBorders\": [6,6,6,6],\n\t\t\t\"maxCount\": 0,\n\t\t\t\"limitScope\": \"PerLevel\",\n\t\t\t\"limitBehavior\": \"MoveLastOne\",\n\t\t\t\"pivotX\": 0,\n\t\t\t\"pivotY\": 0,\n\t\t\t\"fieldDefs\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Gem\",\n\t\t\t\"uid\": 41,\n\t\t\t\"tags\": [],\n\t\t\t\"exportToToc\": false,\n\t\t\t\"doc\": null,\n\t\t\t\"width\": 16,\n\t\t\t\"height\": 16,\n\t\t\t\"resizableX\": false,\n\t\t\t\"resizableY\": false,\n\t\t\t\"minWidth\": null,\n\t\t\t\"maxWidth\": null,\n\t\t\t\"minHeight\": null,\n\t\t\t\"maxHeight\": null,\n\t\t\t\"keepAspectRatio\": false,\n\t\t\t\"tileOpacity\": 1,\n\t\t\t\"fillOpacity\": 0.08,\n\t\t\t\"lineOpacity\": 0,\n\t\t\t\"hollow\": false,\n\t\t\t\"color\": \"#EAD4AA\",\n\t\t\t\"renderMode\": \"Tile\",\n\t\t\t\"showName\": true,\n\t\t\t\"tilesetId\": 20,\n\t\t\t\"tileRenderMode\": \"FitInside\",\n\t\t\t\"tileRect\": { \"tilesetUid\": 20, \"x\": 0, \"y\": 120, \"w\": 16, \"h\": 16 },\n\t\t\t\"uiTileRect\": null,\n\t\t\t\"nineSliceBorders\": [],\n\t\t\t\"maxCount\": 1,\n\t\t\t\"limitScope\": \"PerLevel\",\n\t\t\t\"limitBehavior\": \"MoveLastOne\",\n\t\t\t\"pivotX\": 0.5,\n\t\t\t\"pivotY\": 0.5,\n\t\t\t\"fieldDefs\": []\n\t\t}\n\t], \"tilesets\": [\n\t\t{\n\t\t\t\"__cWid\": 32,\n\t\t\t\"__cHei\": 32,\n\t\t\t\"identifier\": \"Tileset\",\n\t\t\t\"uid\": 1,\n\t\t\t\"relPath\": \"gfx/tileset.png\",\n\t\t\t\"embedAtlas\": null,\n\t\t\t\"pxWid\": 256,\n\t\t\t\"pxHei\": 256,\n\t\t\t\"tileGridSize\": 8,\n\t\t\t\"spacing\": 0,\n\t\t\t\"padding\": 0,\n\t\t\t\"tags\": [],\n\t\t\t\"tagsSourceEnumUid\": 2,\n\t\t\t\"enumTags\": [\n\t\t\t\t{ \"enumValueId\": \"None\", \"tileIds\": [] },\n\t\t\t\t{\n\t\t\t\t\t\"enumValueId\": \"Full\",\n\t\t\t\t\t\"tileIds\": [\n\t\t\t\t\t\t1,\n\t\t\t\t\t\t2,\n\t\t\t\t\t\t3,\n\t\t\t\t\t\t4,\n\t\t\t\t\t\t5,\n\t\t\t\t\t\t6,\n\t\t\t\t\t\t7,\n\t\t\t\t\t\t33,\n\t\t\t\t\t\t34,\n\t\t\t\t\t\t35,\n\t\t\t\t\t\t36,\n\t\t\t\t\t\t37,\n\t\t\t\t\t\t38,\n\t\t\t\t\t\t39,\n\t\t\t\t\t\t65,\n\t\t\t\t\t\t66,\n\t\t\t\t\t\t67,\n\t\t\t\t\t\t68,\n\t\t\t\t\t\t97,\n\t\t\t\t\t\t98,\n\t\t\t\t\t\t99,\n\t\t\t\t\t\t100,\n\t\t\t\t\t\t101,\n\t\t\t\t\t\t102,\n\t\t\t\t\t\t103,\n\t\t\t\t\t\t129,\n\t\t\t\t\t\t130,\n\t\t\t\t\t\t131,\n\t\t\t\t\t\t132,\n\t\t\t\t\t\t133,\n\t\t\t\t\t\t134,\n\t\t\t\t\t\t135,\n\t\t\t\t\t\t161,\n\t\t\t\t\t\t162,\n\t\t\t\t\t\t163,\n\t\t\t\t\t\t164,\n\t\t\t\t\t\t166,\n\t\t\t\t\t\t167,\n\t\t\t\t\t\t193,\n\t\t\t\t\t\t194,\n\t\t\t\t\t\t195,\n\t\t\t\t\t\t198,\n\t\t\t\t\t\t199,\n\t\t\t\t\t\t256,\n\t\t\t\t\t\t257,\n\t\t\t\t\t\t258,\n\t\t\t\t\t\t289,\n\t\t\t\t\t\t290,\n\t\t\t\t\t\t291,\n\t\t\t\t\t\t292,\n\t\t\t\t\t\t293,\n\t\t\t\t\t\t294,\n\t\t\t\t\t\t295,\n\t\t\t\t\t\t321,\n\t\t\t\t\t\t322,\n\t\t\t\t\t\t323,\n\t\t\t\t\t\t324,\n\t\t\t\t\t\t325,\n\t\t\t\t\t\t326,\n\t\t\t\t\t\t327,\n\t\t\t\t\t\t353,\n\t\t\t\t\t\t354,\n\t\t\t\t\t\t355,\n\t\t\t\t\t\t356\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{ \"enumValueId\": \"SpikeUL\", \"tileIds\": [10] },\n\t\t\t\t{ \"enumValueId\": \"SpikeU\", \"tileIds\": [11] },\n\t\t\t\t{ \"enumValueId\": \"SpikeUR\", \"tileIds\": [12] },\n\t\t\t\t{ \"enumValueId\": \"SpikeR\", \"tileIds\": [44] },\n\t\t\t\t{ \"enumValueId\": \"SpikeDR\", \"tileIds\": [76] },\n\t\t\t\t{ \"enumValueId\": \"SpikeD\", \"tileIds\": [75] },\n\t\t\t\t{ \"enumValueId\": \"SpikeDL\", \"tileIds\": [74] },\n\t\t\t\t{ \"enumValueId\": \"SpikeL\", \"tileIds\": [42] },\n\t\t\t\t{ \"enumValueId\": \"PlatformLeft\", \"tileIds\": [16,48,80] },\n\t\t\t\t{ \"enumValueId\": \"PlatformRight\", \"tileIds\": [17,49,81] },\n\t\t\t\t{ \"enumValueId\": \"PlatformUp\", \"tileIds\": [13,14,15] },\n\t\t\t\t{ \"enumValueId\": \"PlatformDown\", \"tileIds\": [45,46,47] }\n\t\t\t],\n\t\t\t\"customData\": [],\n\t\t\t\"savedSelections\": [],\n\t\t\t\"cachedPixelData\": {\n\t\t\t\t\"opaqueTilesn\t\t\t\t\"averageColors\": \"f346fe93fd73fe83fb43fb43eda7eda7000000004dde3dde4dde5bcc4bbc5bcc5bcc5bcc00000000000000000000000000000000000000000000000000000000f234fd73f423fd62fb43fb43ed97ed97000000003dde2fff3dde5bcc4bbc5bcc4bbc4bbc000000000000000000000000000000000000000000000000000000000000fe83fd62fe72ef93000000000000000000004dde3dde4dde0000000000005bcc5bcc000000000000000000000000000000000000000000000000000000000000f736f635f636f424f424e979e9790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f635f112f535f424f424e879e8790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f636f535f636e7470000f635f6350000000000000000000005683568000000002568356805680000356800000000000000000000000000000000000000000000f736f636f73600000000f535f53500000000000000000000356825680000256835687568a56885683568000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005568000045680000556845683568456835680000000000000000000000000000000000000000eb85fa75ea85000000000000000000000000000000000000000065685568000000000000456800002568000000000000000000000000000000000000000000000000f99bf89af89bf679f679eaabeaab0000000000000000000065686568000000000000000000000000000000000000000000000000000000000000000000000000f89af346f78af679f679e9abe9ab0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f89bf78af89ae9ab0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000132273221322d422d3220000f134f244f3450000f134f134f134f134f134f134f134f134b13400000000000000000000000000000000000000000000000000007322f4227422d322d3220000f134f345f244f134f244f134f134f456f355f134f134f134b1340000000000000000000000000000000000000000000000000000132274221432c322e3220000f134f356f134f345f134f134f134f456f345f134f134f134b1340000000000000000000000000000000000000000000000000000100170011001d111d0010000f134f134f134f134f134f134f134f134f134f134f1342144000000000000000000000000000000000000000000000000000000007001f0017111d001d0010000f134f134f134f134f134f134f134f134f134f134f134a13481340000000000000000000000000000000000000000000000000000100171111112c111e11100000000000000009134f134f245f345f244f134f345f134f134d13400000000000000000000000000000000000000000000000000000000000000000000000000000000000000009134f134f345f456f457f456f345f134f134d13400000000000000000000000000000000000000000000000000000000000000000000000000000000000000009134f134f356f345f345f345f345f134f134d13400000000000000000000000000000000000000000000000000000000000000000000000000000000000000009134f134f134f345f134f244f134f134f134dn\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"__cWid\": 32,\n\t\t\t\"__cHei\": 32,\n\t\t\t\"identifier\": \"Collision\",\n\t\t\t\"uid\": 3,\n\t\t\t\"relPath\": \"gfx/collision.png\",\n\t\t\t\"embedAtlas\": null,\n\t\t\t\"pxWid\": 256,\n\t\t\t\"pxHei\": 256,\n\t\t\t\"tileGridSize\": 8,\n\t\t\t\"spacing\": 0,\n\t\t\t\"padding\": 0,\n\t\t\t\"tags\": [],\n\t\t\t\"tagsSourceEnumUid\": null,\n\t\t\t\"enumTags\": [],\n\t\t\t\"customData\": [],\n\t\t\t\"savedSelections\": [],\n\t\t\t\"cachedPixelData\": {\n\t\t\t\t\"opaqueTilesn\t\t\t\t\"averageColors\": \"0000ffff2fff2fff2fff2fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d562d563d56000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d5600002d56000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d562d563dn\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"__cWid\": 64,\n\t\t\t\"__cHei\": 64,\n\t\t\t\"identifier\": \"Entities\",\n\t\t\t\"uid\": 20,\n\t\t\t\"relPath\": \"gfx/entities.png\",\n\t\t\t\"embedAtlas\": null,\n\t\t\t\"pxWid\": 512,\n\t\t\t\"pxHei\": 512,\n\t\t\t\"tileGridSize\": 8,\n\t\t\t\"spacing\": 0,\n\t\t\t\"padding\": 0,\n\t\t\t\"tags\": [],\n\t\t\t\"tagsSourceEnumUid\": null,\n\t\t\t\"enumTags\": [],\n\t\t\t\"customData\": [],\n\t\t\t\"savedSelections\": [],\n\t\t\t\"cachedPixelData\": {\n\t\t\t\t\"opaqueTilesn\t\t\t\t\"averageColors\": \"f7bef5aef5aef5aef5aef7be00000000fac500000000000000002fff1fff2fff3fff2fff3fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f5aef09ef09ef09ef09ef5ae00000000fac50000f89af89af89a1fff00001fff2fff00002fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f5aef09ef09ef09ef09ef5ae0000000000000000f89af89bf89a2fff1fff2fff3fff2fff3fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f7bef5aef5aef5aef5aef7be0000f9c56bc60000f89af89af89a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cfff3fff3fff0000000000000000f9c56bc50000f667f456f66700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003fff3fff0000000000000000000000000000f456f234f4560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f667f456f667000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f346f346f778f778134613460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f346f346f778f778134613460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4a4f4a4f9c8f9c8f16bf16bf7aef7aefc23fc23fe88fe880000000000000000000000000000fab7f484f484f36400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4a4f4a4f9c8f9c8f16bf16bf7aef7aefc23fc23fe88fe880000000000000000000000000000f5acf158f158f147000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe86fd34fd34fb33000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004346434643464346434643460000f456f456fabcfabc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004346434643464346434643460000f456f456fabcfabc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079b975947aca75a57bcb76a67cdc77a77ccc79b97bca7bcb7ac97ccc78b77bcb77a679b977a678a877a676a677a675a577a6759477a675940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007484736474857364758573647797736479a973647bbb74647ccc77887bbb79a979a97bbb78a87ddd75857bcb74857aaa748477987484736400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077bc717b79bc737b7bbc748b7ccd769c7bdd79ac79cd7bbc77cd7ccc73bc7bbc72ac79ab72ac779b72ac747b72ac737b72ac717b72ac717b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000071587147735871477469714776797147799a71477bbb73477ccc77787bbb799a799a7bbb778a7ddd74697bbc735879ab71587789715871470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007db87d837dba7d847dcb7d957dcc7d967ddb7db97dca7dbb7dc87dcc7db57dbb7db57da97db57d977db57d857db57d847db57d837db57d830000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c4479437c5479437c6579437c7679437c9979437dbb79447dcc7a777dbb7b997c997cbb7c887ddd7c657cbb7c547caa7c447a877c4479430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000317b8a9821697aa911125ba9398755687aa83146a9992147a99921477988398746665ba801128a981158a9991146989a5777557a89980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a378c3787267c4893135d3893235b3887279a486c2797485d2794486e3896169d388847a6377a39a4265e3894365d3896375d378838700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a974795256458960000889601128aa711124ba8398728865a98011278861363678612535997478537866a9800007a9800006ba811120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b59a7579648aa68a2112e59a1112d48a4158b49983797498c47a2483d58a1112c68a4158959a8478527ab48a4364e49b3353d48a4278000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076855695548468962483758436855494499723535886348368863594968525a4848531586584768753747896125377872265546532680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000779b85790000c78a0000968b757a617ba68a427ad68a3124d69b1158c79b6257768a817b3468d38a0000e6991135a48b6257768a817b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000227955940000b37643647594000094843494637455a4011294950000649745946377449613537494000023640000648424946377449600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003777b89a0000b9990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003257b4980000e3780000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc66fb65fb653c98fc66fb65fb653c9800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb65fb43fb434c88fb65fb43fb434c8800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb65fb43fb434c88fb65fb43fb434c88000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c984c884c881d993c984c884c881dn\t\t\t}\n\t\t}\n\t], \"enums\": [{ \"identifier\": \"Collision\", \"uid\": 2, \"values\": [\n\t\t{ \"id\": \"None\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 0, \"y\": 0, \"w\": 8, \"h\": 8 }, \"color\": 12470831 },\n\t\t{ \"id\": \"Full\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 8, \"y\": 0, \"w\": 8, \"h\": 8 }, \"color\": 14120515 },\n\t\t{ \"id\": \"SpikeUL\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 0, \"y\": 8, \"w\": 8, \"h\": 8 }, \"color\": 15389866 },\n\t\t{ \"id\": \"SpikeU\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 8, \"y\": 8, \"w\": 8, \"h\": 8 }, \"color\": 14984818 },\n\t\t{ \"id\": \"SpikeUR\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 16, \"y\": 8, \"w\": 8, \"h\": 8 }, \"color\": 7552569 },\n\t\t{ \"id\": \"SpikeR\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 16, \"y\": 16, \"w\": 8, \"h\": 8 }, \"color\": 4073265 },\n\t\t{ \"id\": \"SpikeDR\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 16, \"y\": 24, \"w\": 8, \"h\": 8 }, \"color\": 16690740 },\n\t\t{ \"id\": \"SpikeD\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 8, \"y\": 24, \"w\": 8, \"h\": 8 }, \"color\": 16705377 },\n\t\t{ \"id\": \"SpikeDL\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 0, \"y\": 24, \"w\": 8, \"h\": 8 }, \"color\": 6539085 },\n\t\t{ \"id\": \"SpikeL\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 0, \"y\": 16, \"w\": 8, \"h\": 8 }, \"color\": 4098376 },\n\t\t{ \"id\": \"PlatformLeft\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 16, \"y\": 0, \"w\": 8, \"h\": 8 }, \"color\": 1199753 },\n\t\t{ \"id\": \"PlatformRight\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 24, \"y\": 0, \"w\": 8, \"h\": 8 }, \"color\": 39387 },\n\t\t{ \"id\": \"PlatformUp\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 32, \"y\": 0, \"w\": 8, \"h\": 8 }, \"color\": 2943221 },\n\t\t{ \"id\": \"PlatformDown\", \"tileRect\": { \"tilesetUid\": 3, \"x\": 40, \"y\": 0, \"w\": 8, \"h\": 8 }, \"color\": 16777215 }\n\t], \"iconTilesetUid\": 3, \"externalRelPath\": null, \"externalFileChecksum\": null, \"tags\": [] }], \"externalEnums\": [], \"levelFields\": [\n\t\t{\n\t\t\t\"identifier\": \"Info\",\n\t\t\t\"doc\": null,\n\t\t\t\"__type\": \"String\",\n\t\t\t\"uid\": 111,\n\t\t\t\"type\": \"F_String\",\n\t\t\t\"isArray\": false,\n\t\t\t\"canBeNull\": true,\n\t\t\t\"arrayMinLength\": null,\n\t\t\t\"arrayMaxLength\": null,\n\t\t\t\"editorDisplayMode\": \"ValueOnly\",\n\t\t\t\"editorDisplayScale\": 1,\n\t\t\t\"editorDisplayPos\": \"Above\",\n\t\t\t\"editorLinkStyle\": \"StraightArrow\",\n\t\t\t\"editorDisplayColor\": null,\n\t\t\t\"editorAlwaysShow\": true,\n\t\t\t\"editorShowInWorld\": true,\n\t\t\t\"editorCutLongValues\": true,\n\t\t\t\"editorTextSuffix\": null,\n\t\t\t\"editorTextPrefix\": null,\n\t\t\t\"useForSmartColor\": false,\n\t\t\t\"min\": null,\n\t\t\t\"max\": null,\n\t\t\t\"regex\": null,\n\t\t\t\"acceptFileTypes\": null,\n\t\t\t\"defaultOverride\": null,\n\t\t\t\"textLanguageMode\": null,\n\t\t\t\"symmetricalRef\": false,\n\t\t\t\"autoChainRef\": true,\n\t\t\t\"allowOutOfLevelRef\": true,\n\t\t\t\"allowedRefs\": \"OnlySame\",\n\t\t\t\"allowedRefsEntityUid\": null,\n\t\t\t\"allowedRefTags\": [],\n\t\t\t\"tilesetUid\": null\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"BackgroundOffsetY\",\n\t\t\t\"doc\": null,\n\t\t\t\"__type\": \"Float\",\n\t\t\t\"uid\": 191,\n\t\t\t\"type\": \"F_Float\",\n\t\t\t\"isArray\": false,\n\t\t\t\"canBeNull\": false,\n\t\t\t\"arrayMinLength\": null,\n\t\t\t\"arrayMaxLength\": null,\n\t\t\t\"editorDisplayMode\": \"NameAndValue\",\n\t\t\t\"editorDisplayScale\": 1,\n\t\t\t\"editorDisplayPos\": \"Above\",\n\t\t\t\"editorLinkStyle\": \"StraightArrow\",\n\t\t\t\"editorDisplayColor\": null,\n\t\t\t\"editorAlwaysShow\": false,\n\t\t\t\"editorShowInWorld\": false,\n\t\t\t\"editorCutLongValues\": true,\n\t\t\t\"editorTextSuffix\": null,\n\t\t\t\"editorTextPrefix\": null,\n\t\t\t\"useForSmartColor\": false,\n\t\t\t\"min\": null,\n\t\t\t\"max\": null,\n\t\t\t\"regex\": null,\n\t\t\t\"acceptFileTypes\": null,\n\t\t\t\"defaultOverride\": null,\n\t\t\t\"textLanguageMode\": null,\n\t\t\t\"symmetricalRef\": false,\n\t\t\t\"autoChainRef\": true,\n\t\t\t\"allowOutOfLevelRef\": true,\n\t\t\t\"allowedRefs\": \"OnlySame\",\n\t\t\t\"allowedRefsEntityUid\": null,\n\t\t\t\"allowedRefTags\": [],\n\t\t\t\"tilesetUid\": null\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"HasTightHoles\",\n\t\t\t\"doc\": \"Hacky field since wiggling boxes in tight holes can be buggy with many boxes\",\n\t\t\t\"__type\": \"Bool\",\n\t\t\t\"uid\": 220,\n\t\t\t\"type\": \"F_Bool\",\n\t\t\t\"isArray\": false,\n\t\t\t\"canBeNull\": false,\n\t\t\t\"arrayMinLength\": null,\n\t\t\t\"arrayMaxLength\": null,\n\t\t\t\"editorDisplayMode\": \"Hidden\",\n\t\t\t\"editorDisplayScale\": 1,\n\t\t\t\"editorDisplayPos\": \"Above\",\n\t\t\t\"editorLinkStyle\": \"StraightArrow\",\n\t\t\t\"editorDisplayColor\": null,\n\t\t\t\"editorAlwaysShow\": false,\n\t\t\t\"editorShowInWorld\": true,\n\t\t\t\"editorCutLongValues\": true,\n\t\t\t\"editorTextSuffix\": null,\n\t\t\t\"editorTextPrefix\": null,\n\t\t\t\"useForSmartColor\": false,\n\t\t\t\"min\": null,\n\t\t\t\"max\": null,\n\t\t\t\"regex\": null,\n\t\t\t\"acceptFileTypes\": null,\n\t\t\t\"defaultOverride\": null,\n\t\t\t\"textLanguageMode\": null,\n\t\t\t\"symmetricalRef\": false,\n\t\t\t\"autoChainRef\": true,\n\t\t\t\"allowOutOfLevelRef\": true,\n\t\t\t\"allowedRefs\": \"OnlySame\",\n\t\t\t\"allowedRefsEntityUid\": null,\n\t\t\t\"allowedRefTags\": [],\n\t\t\t\"tilesetUid\": null\n\t\t}\n\t] },\n\t\"levels\": [\n\t\t{\n\t\t\t\"identifier\": \"Main_1\",\n\t\t\t\"iid\": \"7799f070-3b70-11ee-b552-cdde230abbc1\",\n\t\t\t\"uid\": 0,\n\t\t\t\"worldX\": 112,\n\t\t\t\"worldY\": 184,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 600,\n\t\t\t\"pxHei\": 248,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_1.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"platformer\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"platformer\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": -30, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [{ \"id\": \"V_Float\", \"params\": [-30] }] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": true, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_Bool\",\n\t\t\t\t\t\"params\": [ true ]\n\t\t\t\t}] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_2\",\n\t\t\t\"iid\": \"ebc1f1a0-3b70-11ee-927a-e9050f9a2523\",\n\t\t\t\"uid\": 105,\n\t\t\t\"worldX\": 856,\n\t\t\t\"worldY\": 200,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 472,\n\t\t\t\"pxHei\": 240,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_2.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"first box\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"first box\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": -20, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [{ \"id\": \"V_Float\", \"params\": [-20] }] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_3\",\n\t\t\t\"iid\": \"66447570-3b70-11ee-927a-ebdeaf7a94fc\",\n\t\t\t\"uid\": 103,\n\t\t\t\"worldX\": 1472,\n\t\t\t\"worldY\": 192,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 448,\n\t\t\t\"pxHei\": 288,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_3.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"int box\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"int box\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": -20, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [{ \"id\": \"V_Float\", \"params\": [-20] }] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Test\",\n\t\t\t\"iid\": \"6a160270-3b70-11ee-b552-b3fe560a54e3\",\n\t\t\t\"uid\": 29,\n\t\t\t\"worldX\": 432,\n\t\t\t\"worldY\": 2864,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 392,\n\t\t\t\"pxHei\": 288,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Test.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": null, \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_20\",\n\t\t\t\"iid\": \"9581daf0-3b70-11ee-b552-73a94ffe6e9d\",\n\t\t\t\"uid\": 19,\n\t\t\t\"worldX\": 5096,\n\t\t\t\"worldY\": 208,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 328,\n\t\t\t\"pxHei\": 272,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_20.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"easy push boxes out + in\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"easy push boxes out + in\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_A\",\n\t\t\t\"iid\": \"49d7ea50-3b70-11ee-8473-51687225215d\",\n\t\t\t\"uid\": 37,\n\t\t\t\"worldX\": 216,\n\t\t\t\"worldY\": 2104,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 400,\n\t\t\t\"pxHei\": 368,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_A.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": null, \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_19\",\n\t\t\t\"iid\": \"befd37c0-3b70-11ee-8473-af1b9fa68b68\",\n\t\t\t\"uid\": 38,\n\t\t\t\"worldX\": 4384,\n\t\t\t\"worldY\": 232,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 408,\n\t\t\t\"pxHei\": 256,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_19.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"suspend and shoes\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"suspend and shoes\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_12\",\n\t\t\t\"iid\": \"81c844c0-3b70-11ee-8473-cb4f806a5137\",\n\t\t\t\"uid\": 40,\n\t\t\t\"worldX\": 3392,\n\t\t\t\"worldY\": 224,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 320,\n\t\t\t\"pxHei\": 248,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_12.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"border wall jump\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"border wall jump\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_5\",\n\t\t\t\"iid\": \"89a78390-3b70-11ee-8473-1f32aa98dcbe\",\n\t\t\t\"uid\": 42,\n\t\t\t\"worldX\": 872,\n\t\t\t\"worldY\": 736,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 352,\n\t\t\t\"pxHei\": 216,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_5.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"box ledge jump\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"box ledge jump\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": -112, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [{ \"id\": \"V_Float\", \"params\": [-112] }] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_8\",\n\t\t\t\"iid\": \"cf1f5890-6280-11ee-b338-f14eba9b6da0\",\n\t\t\t\"uid\": 154,\n\t\t\t\"worldX\": 864,\n\t\t\t\"worldY\": 1216,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 328,\n\t\t\t\"pxHei\": 256,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_8.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"test parallax\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"test parallax\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": -130, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [{ \"id\": \"V_Float\", \"params\": [-130] }] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_9\",\n\t\t\t\"iid\": \"bba970e0-6280-11ee-a1b1-450280ac9f2a\",\n\t\t\t\"uid\": 192,\n\t\t\t\"worldX\": 1504,\n\t\t\t\"worldY\": 1224,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 328,\n\t\t\t\"pxHei\": 312,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_9.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"test parallax\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"test parallax\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": -140, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [{ \"id\": \"V_Float\", \"params\": [-140] }] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Bug\",\n\t\t\t\"iid\": \"09809bb0-6280-11ee-b338-ed89ef0a80b0\",\n\t\t\t\"uid\": 157,\n\t\t\t\"worldX\": 1224,\n\t\t\t\"worldY\": 2992,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 360,\n\t\t\t\"pxHei\": 288,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Bug.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"some boxes disappear\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"some boxes disappear\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_4\",\n\t\t\t\"iid\": \"d46d12b0-6280-11ee-b338-d59dd620fdf8\",\n\t\t\t\"uid\": 155,\n\t\t\t\"worldX\": 256,\n\t\t\t\"worldY\": 704,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 328,\n\t\t\t\"pxHei\": 232,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_4.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"first walk over spikes\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"first walk over spikes\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": -20, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [{ \"id\": \"V_Float\", \"params\": [-20] }] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_18\",\n\t\t\t\"iid\": \"d5d0c160-6280-11ee-b338-552002566844\",\n\t\t\t\"uid\": 156,\n\t\t\t\"worldX\": 3480,\n\t\t\t\"worldY\": 1152,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 368,\n\t\t\t\"pxHei\": 232,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_18.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"precise push border\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"precise push border\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_6\",\n\t\t\t\"iid\": \"7138f010-3b70-11ee-927a-bdedd3c99778\",\n\t\t\t\"uid\": 106,\n\t\t\t\"worldX\": 1520,\n\t\t\t\"worldY\": 688,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 320,\n\t\t\t\"pxHei\": 304,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_6.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"box tight\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"box tight\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": -20, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [{ \"id\": \"V_Float\", \"params\": [-20] }] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": true, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_Bool\",\n\t\t\t\t\t\"params\": [ true ]\n\t\t\t\t}] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_16\",\n\t\t\t\"iid\": \"b2af5bf0-3b70-11ee-8473-b958353bfa84\",\n\t\t\t\"uid\": 46,\n\t\t\t\"worldX\": 2472,\n\t\t\t\"worldY\": 1160,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 320,\n\t\t\t\"pxHei\": 208,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_16.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"interesting merge\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"interesting merge\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": -110, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [{ \"id\": \"V_Float\", \"params\": [-110] }] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_14\",\n\t\t\t\"iid\": \"e6c0a9d0-3b70-11ee-927a-e568b1068606\",\n\t\t\t\"uid\": 104,\n\t\t\t\"worldX\": 2952,\n\t\t\t\"worldY\": 688,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 320,\n\t\t\t\"pxHei\": 200,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_14.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"first merge\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"first merge\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_23\",\n\t\t\t\"iid\": \"b410c0b0-3b70-11ee-8473-3d052cae6c5f\",\n\t\t\t\"uid\": 47,\n\t\t\t\"worldX\": 5064,\n\t\t\t\"worldY\": 688,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 352,\n\t\t\t\"pxHei\": 216,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_23.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"easy merge + spikes\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"easy merge + spikes\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_7\",\n\t\t\t\"iid\": \"b5319a00-3b70-11ee-8473-2fc6c671f183\",\n\t\t\t\"uid\": 48,\n\t\t\t\"worldX\": 256,\n\t\t\t\"worldY\": 1224,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 320,\n\t\t\t\"pxHei\": 216,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_7.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"many boxes out but easy\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"many boxes out but easy\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": -20, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [{ \"id\": \"V_Float\", \"params\": [-20] }] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_13\",\n\t\t\t\"iid\": \"b8c80730-3b70-11ee-8473-2d816d6d59f2\",\n\t\t\t\"uid\": 49,\n\t\t\t\"worldX\": 2456,\n\t\t\t\"worldY\": 704,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 336,\n\t\t\t\"pxHei\": 216,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_13.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"first push border\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"first push border\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_15\",\n\t\t\t\"iid\": \"209ee1d0-6280-11ee-b338-93b36455061a\",\n\t\t\t\"uid\": 158,\n\t\t\t\"worldX\": 3464,\n\t\t\t\"worldY\": 616,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 320,\n\t\t\t\"pxHei\": 328,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_15.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"push box between borders\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"push box between borders\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": true, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_Bool\",\n\t\t\t\t\t\"params\": [ true ]\n\t\t\t\t}] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_25\",\n\t\t\t\"iid\": \"32169f70-6280-11ee-b338-5106a1e13b1e\",\n\t\t\t\"uid\": 159,\n\t\t\t\"worldX\": 4296,\n\t\t\t\"worldY\": 1104,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 592,\n\t\t\t\"pxHei\": 264,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_25.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"stitch borders\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"stitch borders\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_22\",\n\t\t\t\"iid\": \"c13550d0-3b70-11ee-8473-e3abe2bd0612\",\n\t\t\t\"uid\": 53,\n\t\t\t\"worldX\": 4304,\n\t\t\t\"worldY\": 672,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 552,\n\t\t\t\"pxHei\": 256,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_22.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"tank\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"tank\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_17\",\n\t\t\t\"iid\": \"38c04010-6280-11ee-b338-c34eaa6cfed6\",\n\t\t\t\"uid\": 161,\n\t\t\t\"worldX\": 2928,\n\t\t\t\"worldY\": 1112,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 432,\n\t\t\t\"pxHei\": 344,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_17.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"tricky merges\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"tricky merges\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 140, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [{ \"id\": \"V_Float\", \"params\": [140] }] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": true, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_Bool\",\n\t\t\t\t\t\"params\": [ true ]\n\t\t\t\t}] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_27\",\n\t\t\t\"iid\": \"0232dfa0-6280-11ee-8593-373729bb0820\",\n\t\t\t\"uid\": 187,\n\t\t\t\"worldX\": 5776,\n\t\t\t\"worldY\": 1072,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 320,\n\t\t\t\"pxHei\": 264,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_27.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"tricky one way platform with merge\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"tricky one way platform with merge\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_26\",\n\t\t\t\"iid\": \"65aa6d40-6280-11ee-98fd-b51c52b7805d\",\n\t\t\t\"uid\": 189,\n\t\t\t\"worldX\": 5048,\n\t\t\t\"worldY\": 1056,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 496,\n\t\t\t\"pxHei\": 296,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_26.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"ceiling tank\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"ceiling tank\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_24\",\n\t\t\t\"iid\": \"c6d0b5c0-3b70-11ee-8473-e9d725a90317\",\n\t\t\t\"uid\": 58,\n\t\t\t\"worldX\": 5680,\n\t\t\t\"worldY\": 680,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 432,\n\t\t\t\"pxHei\": 216,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_24.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"make stair from fallen parts\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"make stair from fallen parts\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_B\",\n\t\t\t\"iid\": \"54ac2830-3b70-11ee-8473-25918171e340\",\n\t\t\t\"uid\": 39,\n\t\t\t\"worldX\": 952,\n\t\t\t\"worldY\": 2208,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 320,\n\t\t\t\"pxHei\": 256,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_B.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": null, \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_11\",\n\t\t\t\"iid\": \"ac4199f0-3b70-11ee-927a-75670fe02a1f\",\n\t\t\t\"uid\": 108,\n\t\t\t\"worldX\": 2936,\n\t\t\t\"worldY\": 192,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 320,\n\t\t\t\"pxHei\": 296,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_11.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"first wall jump\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"first wall jump\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_21\",\n\t\t\t\"iid\": \"2fa4a660-3b70-11ee-8473-1396735bdff1\",\n\t\t\t\"uid\": 36,\n\t\t\t\"worldX\": 5680,\n\t\t\t\"worldY\": 176,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 440,\n\t\t\t\"pxHei\": 344,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_21.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"int border wall jump\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"int border wall jump\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": true, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_Bool\",\n\t\t\t\t\t\"params\": [ true ]\n\t\t\t\t}] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Main_10\",\n\t\t\t\"iid\": \"2f77bc40-3b70-11ee-8473-bd6d6a0f21eb\",\n\t\t\t\"uid\": 35,\n\t\t\t\"worldX\": 2472,\n\t\t\t\"worldY\": 248,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 336,\n\t\t\t\"pxHei\": 184,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Main_10.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": \"interesting box out\", \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [{\n\t\t\t\t\t\"id\": \"V_String\",\n\t\t\t\t\t\"params\": [\"interesting box out\"]\n\t\t\t\t}] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": []\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Platform_Test_C\",\n\t\t\t\"iid\": \"ca6d71a0-6280-11ee-b338-eb1e5f53ef69\",\n\t\t\t\"uid\": 112,\n\t\t\t\"worldX\": 1680,\n\t\t\t\"worldY\": 2504,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 328,\n\t\t\t\"pxHei\": 208,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Platform_Test_C.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": null, \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": [{ \"levelIid\": \"801c61b0-6280-11ee-b338-bd548a4f61df\", \"dir\": \"n\" }]\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Platform_Test_B\",\n\t\t\t\"iid\": \"801c61b0-6280-11ee-b338-bd548a4f61df\",\n\t\t\t\"uid\": 145,\n\t\t\t\"worldX\": 1680,\n\t\t\t\"worldY\": 2296,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 328,\n\t\t\t\"pxHei\": 208,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Platform_Test_B.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": null, \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": [ { \"levelIid\": \"ca6d71a0-6280-11ee-b338-eb1e5f53ef69\", \"dir\": \"s\" }, { \"levelIid\": \"794c69d0-6280-11ee-b338-99140bf7634a\", \"dir\": \"n\" } ]\n\t\t},\n\t\t{\n\t\t\t\"identifier\": \"Platform_Test_A\",\n\t\t\t\"iid\": \"794c69d0-6280-11ee-b338-99140bf7634a\",\n\t\t\t\"uid\": 135,\n\t\t\t\"worldX\": 1680,\n\t\t\t\"worldY\": 2088,\n\t\t\t\"worldDepth\": 0,\n\t\t\t\"pxWid\": 328,\n\t\t\t\"pxHei\": 208,\n\t\t\t\"__bgColor\": \"#696A79\",\n\t\t\t\"bgColor\": null,\n\t\t\t\"useAutoIdentifier\": false,\n\t\t\t\"bgRelPath\": null,\n\t\t\t\"bgPos\": null,\n\t\t\t\"bgPivotX\": 0.5,\n\t\t\t\"bgPivotY\": 0.5,\n\t\t\t\"__smartColor\": \"#ADADB5\",\n\t\t\t\"__bgPos\": null,\n\t\t\t\"externalRelPath\": \"LevelProject/Platform_Test_A.ldtkl\",\n\t\t\t\"fieldInstances\": [\n\t\t\t\t{ \"__identifier\": \"Info\", \"__type\": \"String\", \"__value\": null, \"__tile\": null, \"defUid\": 111, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"BackgroundOffsetY\", \"__type\": \"Float\", \"__value\": 0, \"__tile\": null, \"defUid\": 191, \"realEditorValues\": [] },\n\t\t\t\t{ \"__identifier\": \"HasTightHoles\", \"__type\": \"Bool\", \"__value\": false, \"__tile\": null, \"defUid\": 220, \"realEditorValues\": [] }\n\t\t\t],\n\t\t\t\"layerInstances\": null,\n\t\t\t\"__neighbours\": [{ \"levelIid\": \"801c61b0-6280-11ee-b338-bd548a4f61df\", \"dir\": \"s\" }]\n\t\t}\n\t],\n\t\"worlds\": [],\n\t\"dummyWorldIid\": \"7799c961-3b70-11ee-b552-c78978c0970b\"\n}");
};
$hxClasses["assets.LevelProject"] = assets_LevelProject;
assets_LevelProject.__name__ = "assets.LevelProject";
assets_LevelProject.__super__ = ldtk_Project;
assets_LevelProject.prototype = $extend(ldtk_Project.prototype,{
	get_worlds: function() {
		return this._untypedWorlds;
	}
	,parseJson: function(json) {
		ldtk_Project.prototype.parseJson.call(this,json);
		var _g = 0;
		var _g1 = this._untypedWorlds;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			this.all_worlds[w.identifier] = w;
		}
	}
	,getWorld: function(iid) {
		var _g = 0;
		var _g1 = this._untypedWorlds;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			if(w.iid == iid) {
				return w;
			}
		}
		return null;
	}
	,_instanciateTileset: function(project,json) {
		var name = "assets.Tileset_" + (json.identifier == null ? "null" : "" + json.identifier);
		var c = $hxClasses[name];
		if(c == null) {
			return null;
		} else {
			return Type.createInstance(c,[project,json]);
		}
	}
	,_instanciateWorld: function(untypedProject,arrayIndex,json) {
		var classId = "assets.LevelProject_World_" + (json.identifier == null ? "null" : "" + json.identifier);
		var c = $hxClasses[classId];
		if(c == null) {
			ldtk_Project.error("Couldn't instanciate World class " + classId);
			return null;
		} else {
			return Type.createInstance(c,[untypedProject,arrayIndex,json]);
		}
	}
	,_resolveExternalEnumValue: function(name,enumValueId) {
		ldtk_Project.error("Unknown external enum name: " + name);
		return null;
	}
	,get_all_levels: function() {
		return this.all_worlds.Default.all_levels;
	}
	,get_levels: function() {
		return this.all_worlds.Default.levels;
	}
	,get_worldLayout: function() {
		return this.all_worlds.Default.layout;
	}
	,getLevel: function(uid,idOrIid) {
		return this.all_worlds.Default.getLevel(uid,idOrIid);
	}
	,getLevelAt: function(x,y) {
		return this.all_worlds.Default.getLevelAt(x,y);
	}
	,__class__: assets_LevelProject
});
var audio_Audio = function() { };
$hxClasses["audio.Audio"] = audio_Audio;
audio_Audio.__name__ = "audio.Audio";
audio_Audio.init = function() {
	audio_Audio.manager = hxd_snd_Manager.get();
	audio_Audio.soundGroup = new hxd_snd_ChannelGroup("sound");
	audio_Audio.musicGroup = new hxd_snd_ChannelGroup("music");
	audio_Audio.musicGroup.set_volume(audio_Audio.MUSIC_VOLUME_MULT);
};
audio_Audio.setMasterVolume = function(v) {
	audio_Audio.manager.masterVolume = v;
};
audio_Audio.setMusicVolume = function(v) {
	audio_Audio.musicGroup.set_volume(v * audio_Audio.MUSIC_VOLUME_MULT);
};
audio_Audio.setSoundEffectVolume = function(v) {
	audio_Audio.soundGroup.set_volume(v);
};
audio_Audio.mute = function() {
	audio_Audio.manager.masterVolume = 0;
};
audio_Audio.unmute = function() {
	audio_Audio.manager.masterVolume = 1;
};
audio_Audio.playMusic = function(name,next,fadeTime) {
	if(fadeTime == null) {
		fadeTime = 0.;
	}
	if(audio_Audio.music != null && audio_Audio.music.name == name) {
		return;
	}
	audio_Audio.stopMusic();
	audio_Audio.music = Assets.nameToMusic.h[name];
	if(audio_Audio.music == null) {
		haxe_Log.trace("Invalid music name",{ fileName : "src/audio/Audio.hx", lineNumber : 45, className : "audio.Audio", methodName : "playMusic", customParams : [name]});
		return;
	}
	var volume = audio_Audio.music.def.volume;
	audio_Audio.musicChannel = audio_Audio.music.sound.play(true,fadeTime > 0 ? 0 : volume,audio_Audio.musicGroup);
	audio_Audio.musicChannel.priority = 1.;
	if(fadeTime > 0) {
		audio_Audio.musicChannel.fadeTo(volume,fadeTime);
		if(audio_Audio.musicBackChannel != null) {
			audio_Audio.musicChannel.set_position(audio_Audio.musicBackChannel.position % audio_Audio.musicChannel.duration);
		}
	}
	if(next == null && audio_Audio.music.def.playNext != null && audio_Audio.music.def.playNext != "") {
		next = audio_Audio.music.def.playNext;
	}
	if(next != null) {
		audio_Audio.musicChannel.loop = false;
		audio_Audio.musicChannel.onEnd = function() {
			audio_Audio.playMusic(next);
		};
	}
};
audio_Audio.stopMusic = function(fadeTime) {
	if(fadeTime == null) {
		fadeTime = 0.;
	}
	if(audio_Audio.musicChannel == null) {
		return;
	}
	if(audio_Audio.musicBackChannel != null) {
		audio_Audio.musicBackChannel.stop();
	}
	audio_Audio.musicBackChannel = audio_Audio.musicChannel;
	audio_Audio.musicBack = audio_Audio.music;
	audio_Audio.musicChannel = null;
	audio_Audio.music = null;
	if(fadeTime > 0) {
		audio_Audio.musicBackChannel.fadeTo(0.,fadeTime,function() {
			audio_Audio.musicBackChannel.stop();
			audio_Audio.musicBackChannel = null;
			audio_Audio.musicBack = null;
		});
	} else {
		audio_Audio.musicBackChannel.stop();
		audio_Audio.musicBackChannel = null;
		audio_Audio.musicBack = null;
	}
};
audio_Audio.pauseMusic = function() {
	if(audio_Audio.musicChannel == null) {
		return;
	}
	audio_Audio.musicChannel.set_pause(true);
};
audio_Audio.resumeMusic = function() {
	if(audio_Audio.musicChannel == null) {
		return;
	}
	audio_Audio.musicChannel.set_pause(false);
};
audio_Audio.playSound = function(name,loop,vol) {
	if(vol == null) {
		vol = 1.;
	}
	if(loop == null) {
		loop = false;
	}
	var sound = Assets.nameToSound.h[name];
	if(sound == null) {
		return null;
	}
	return sound.play(loop,vol,audio_Audio.soundGroup);
};
audio_Audio.onQuit = function() {
	audio_Audio.stopMusic();
};
audio_Audio.onPause = function(force) {
	if(force == null) {
		force = false;
	}
	if(audio_Audio.music != null && (force || !audio_Audio.music.def.continueDuringPause) && audio_Audio.musicChannel != null) {
		audio_Audio.musicChannel.set_pause(true);
	}
};
audio_Audio.onResume = function() {
	if(audio_Audio.music != null && audio_Audio.musicChannel != null) {
		audio_Audio.musicChannel.set_pause(false);
	}
};
audio_Audio.isMusicPlaying = function() {
	return audio_Audio.musicChannel != null;
};
var audio_Music = function(def) {
	this.name = def.name;
	this.def = def;
	var prefix = "music/exportMP3/";
	var suffix = ".mp3";
	this.sound = hxd_Res.load(prefix + def.name + suffix).toSound();
	this.sound.getData();
};
$hxClasses["audio.Music"] = audio_Music;
audio_Music.__name__ = "audio.Music";
audio_Music.prototype = {
	__class__: audio_Music
};
var audio_VariedSound = function(def) {
	this.def = def;
	this.sounds = [];
	if(def.variationCount > 1) {
		var _g = 1;
		var _g1 = def.variationCount + 1;
		while(_g < _g1) {
			var i = _g++;
			var sound = hxd_Res.load("sfx/" + (def.name + i) + ".wav").toSound();
			sound.getData();
			this.sounds.push(sound);
		}
	} else {
		var sound = hxd_Res.load("sfx/" + def.name + ".wav").toSound();
		sound.getData();
		this.sounds.push(sound);
	}
};
$hxClasses["audio.VariedSound"] = audio_VariedSound;
audio_VariedSound.__name__ = "audio.VariedSound";
audio_VariedSound.prototype = {
	loadSound: function(name) {
		var sound = hxd_Res.load("sfx/" + name + ".wav").toSound();
		sound.getData();
		this.sounds.push(sound);
	}
	,getSound: function(vol) {
		if(this.sounds.length == 0) {
			throw haxe_Exception.thrown("No sounds loaded!");
		}
		if(this.sounds.length == 1) {
			return this.sounds[0];
		}
		if(this.def.scaleVolume) {
			var i = vol * this.sounds.length | 0;
			if(i > this.sounds.length - 1) {
				i = this.sounds.length - 1;
			}
			return this.sounds[i];
		}
		return this.sounds[Std.random(this.sounds.length)];
	}
	,play: function(loop,volumeMult,group) {
		var sound = this.getSound(volumeMult);
		if(this.def.scaleVolume) {
			volumeMult = 1.;
		}
		return sound.play(loop,volumeMult * this.def.volume,group);
	}
	,__class__: audio_VariedSound
};
var background_Background = function() {
	this.parallaxes = [];
	this.timer = 0;
};
$hxClasses["background.Background"] = background_Background;
background_Background.__name__ = "background.Background";
background_Background.prototype = {
	addSlicedParallax: function(zone,frame,speed,levelWidth,levelHeight,displace) {
		var r = hxd_Res.load("gfx/backgrounds/back" + zone + ".png");
		var tile = r.toTile();
		var sub = tile.sub(frame * 320,0,320,Math.ceil(tile.height + tile.y) - Math.floor(tile.y));
		var p = new background_SlicedParallax(sub,180,Game.LAYER_BACK,speed,levelWidth,levelHeight,displace);
		this.parallaxes.push(p);
		return p;
	}
	,addTiledParallax: function(zone,frame,speed,levelWidth,levelHeight) {
		var r = hxd_Res.load("gfx/backgrounds/back" + zone + ".png");
		var tile = r.toTile();
		var sub = tile.sub(frame * 320,0,320,Math.ceil(tile.height + tile.y) - Math.floor(tile.y));
		var p = new background_TiledParallax(sub,Game.LAYER_BACK,speed,levelWidth,levelHeight);
		this.parallaxes.push(p);
		return p;
	}
	,loadLevel: function(globalLevelId,levelWidth,levelHeight) {
		var _g = 0;
		var _g1 = this.parallaxes;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p != null && p.parent != null) {
				p.parent.removeChild(p);
			}
		}
		this.parallaxes = [];
		var zone = (globalLevelId - 1) / 9 | 0;
		var tile = hxd_Res.load("gfx/backgrounds/back" + zone + ".png").toTile();
		var count = (Math.ceil(tile.width + tile.x) - Math.floor(tile.x)) / 320 | 0;
		if(zone == 0) {
			var p = this.addSlicedParallax(zone,0,.05,levelWidth,levelHeight,false);
			p.scrollX = -6;
			this.addSlicedParallax(zone,1,.4,levelWidth,levelHeight,false);
			p = this.addSlicedParallax(zone,2,.4,levelWidth,levelHeight,true);
			p.displaceMultX = p.displaceMultY = 5;
			p.displaceTop = p.displaceBottom = false;
			p = this.addSlicedParallax(zone,3,.6,levelWidth,levelHeight,true);
			p.displaceMultX = p.displaceMultY = 10;
			p.displaceTop = p.displaceBottom = false;
			this.addSlicedParallax(zone,4,.8,levelWidth,levelHeight,false);
		} else if(zone == 1) {
			this.addSlicedParallax(zone,0,0,levelWidth,levelHeight,false);
			var p = this.addSlicedParallax(zone,1,.1,levelWidth,levelHeight,true);
			p.displaceMultX = 10;
			p.displaceTop = false;
			this.addSlicedParallax(zone,2,.1,levelWidth,levelHeight,false);
			this.addSlicedParallax(zone,3,.1,levelWidth,levelHeight,false);
			this.addSlicedParallax(zone,4,.8,levelWidth,levelHeight,false);
		} else if(zone == 2) {
			this.addTiledParallax(zone,0,0,levelWidth,levelHeight);
			this.addTiledParallax(zone,1,.2,levelWidth,levelHeight);
			this.addTiledParallax(zone,2,.5,levelWidth,levelHeight);
			this.addTiledParallax(zone,3,.8,levelWidth,levelHeight);
		}
	}
	,'delete': function() {
		var _g = 0;
		var _g1 = this.parallaxes;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p != null && p.parent != null) {
				p.parent.removeChild(p);
			}
		}
	}
	,update: function(dt) {
		this.timer += dt;
		var _g = 0;
		var _g1 = this.parallaxes;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.update(dt);
		}
	}
	,__class__: background_Background
};
var background_Parallax = function(layer,speed,levelWidth,levelHeight) {
	this.speed = speed;
	this.levelWidth = levelWidth;
	this.levelHeight = levelHeight;
	h2d_Object.call(this);
	Game.inst.world.add(this,layer);
};
$hxClasses["background.Parallax"] = background_Parallax;
background_Parallax.__name__ = "background.Parallax";
background_Parallax.__super__ = h2d_Object;
background_Parallax.prototype = $extend(h2d_Object.prototype,{
	update: function(dt) {
		if(Game.inst == null) {
			return false;
		}
		return true;
	}
	,__class__: background_Parallax
});
var background_SlicedParallax = function(tile,sliceHeight,layer,speed,levelWidth,levelHeight,displace) {
	this.scrollY = 0.;
	this.scrollX = 0.;
	this.displaceScrollY = 20.;
	this.displaceScrollX = 40.;
	this.displaceMultY = 0.;
	this.displaceMultX = 0.;
	this.timer = 0.;
	this.tiles = [];
	this.displaceBottom = true;
	this.displaceTop = true;
	this.rightElements = [];
	this.leftElements = [];
	background_Parallax.call(this,layer,speed,levelWidth,levelHeight);
	this.displace = displace;
	this.parallaxWidth = Math.ceil(tile.width + tile.x) - Math.floor(tile.x);
	this.parallaxHeight = sliceHeight;
	this.levelWidth = levelWidth;
	this.levelHeight = levelHeight;
	this.atlasSliceCount = (Math.ceil(tile.height + tile.y) - Math.floor(tile.y)) / sliceHeight | 0;
	var _g = 0;
	var _g1 = this.atlasSliceCount;
	while(_g < _g1) {
		var i = _g++;
		var sub = tile.sub(0,i * sliceHeight,Math.ceil(tile.width + tile.x) - Math.floor(tile.x),sliceHeight);
		var sub1 = sub.innerTex;
		var x0 = Math.floor(sub.x);
		var y0 = Math.floor(sub.y);
		var width = Math.ceil(sub.width + sub.x) - Math.floor(sub.x);
		var height = Math.ceil(sub.height + sub.y) - Math.floor(sub.y);
		var b = new h2d_col_IBounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		var pixels = sub1.capturePixels(0,0,b);
		var square = hxd_Pixels.alloc(512,256,hxd_PixelFormat.ARGB);
		square.blit(0,0,pixels,0,0,Math.ceil(sub.width + sub.x) - Math.floor(sub.x),Math.ceil(sub.height + sub.y) - Math.floor(sub.y));
		this.tiles.push(h2d_Tile.fromPixels(square));
		square.dispose();
		pixels.dispose();
	}
	this.displayedSliceCount = Math.ceil(180 / sliceHeight) + 1;
	var _g = 0;
	var _g1 = this.displayedSliceCount;
	while(_g < _g1) {
		var i = _g++;
		var g = new h2d_Graphics(this);
		g.set_tileWrap(true);
		this.leftElements.push(g);
		g = new h2d_Graphics(this);
		g.set_tileWrap(true);
		this.rightElements.push(g);
	}
	this.midSlicePos = Game.inst.level.heroSpawnY - sliceHeight * .75 + Game.inst.level.backgroundOffsetY;
	this.sliceIndexMid = Math.floor(this.midSlicePos / sliceHeight);
	this.centerOffY = this.midSlicePos - this.sliceIndexMid * sliceHeight;
	if(displace) {
		this.disp = new Array(10);
		this.disp[0] = new Array(17);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][0] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][1] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][2] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][3] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][4] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][5] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][6] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][7] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][8] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][9] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][10] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][11] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][12] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][13] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][14] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][15] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[0][16] = new h2d_col_PointImpl(x,y);
		this.disp[1] = new Array(17);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][0] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][1] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][2] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][3] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][4] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][5] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][6] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][7] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][8] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][9] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][10] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][11] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][12] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][13] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][14] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][15] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[1][16] = new h2d_col_PointImpl(x,y);
		this.disp[2] = new Array(17);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][0] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][1] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][2] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][3] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][4] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][5] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][6] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][7] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][8] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][9] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][10] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][11] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][12] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][13] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][14] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][15] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[2][16] = new h2d_col_PointImpl(x,y);
		this.disp[3] = new Array(17);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][0] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][1] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][2] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][3] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][4] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][5] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][6] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][7] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][8] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][9] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][10] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][11] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][12] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][13] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][14] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][15] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[3][16] = new h2d_col_PointImpl(x,y);
		this.disp[4] = new Array(17);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][0] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][1] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][2] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][3] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][4] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][5] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][6] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][7] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][8] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][9] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][10] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][11] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][12] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][13] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][14] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][15] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[4][16] = new h2d_col_PointImpl(x,y);
		this.disp[5] = new Array(17);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][0] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][1] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][2] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][3] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][4] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][5] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][6] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][7] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][8] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][9] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][10] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][11] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][12] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][13] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][14] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][15] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[5][16] = new h2d_col_PointImpl(x,y);
		this.disp[6] = new Array(17);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][0] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][1] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][2] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][3] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][4] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][5] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][6] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][7] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][8] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][9] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][10] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][11] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][12] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][13] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][14] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][15] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[6][16] = new h2d_col_PointImpl(x,y);
		this.disp[7] = new Array(17);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][0] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][1] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][2] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][3] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][4] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][5] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][6] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][7] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][8] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][9] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][10] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][11] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][12] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][13] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][14] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][15] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[7][16] = new h2d_col_PointImpl(x,y);
		this.disp[8] = new Array(17);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][0] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][1] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][2] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][3] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][4] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][5] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][6] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][7] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][8] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][9] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][10] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][11] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][12] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][13] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][14] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][15] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[8][16] = new h2d_col_PointImpl(x,y);
		this.disp[9] = new Array(17);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][0] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][1] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][2] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][3] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][4] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][5] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][6] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][7] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][8] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][9] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][10] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][11] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][12] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][13] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][14] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][15] = new h2d_col_PointImpl(x,y);
		var x = 0;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.disp[9][16] = new h2d_col_PointImpl(x,y);
	}
};
$hxClasses["background.SlicedParallax"] = background_SlicedParallax;
background_SlicedParallax.__name__ = "background.SlicedParallax";
background_SlicedParallax.__super__ = background_Parallax;
background_SlicedParallax.prototype = $extend(background_Parallax.prototype,{
	update: function(dt) {
		if(!background_Parallax.prototype.update.call(this,dt)) {
			return false;
		}
		var cameraClampedTargetX = -Game.inst.world.x + 160;
		var cameraClampedTargetY = -Game.inst.world.y + 90;
		var xMin = cameraClampedTargetX - 160;
		var yMin = cameraClampedTargetY - 90;
		var xOff = (cameraClampedTargetX - this.levelWidth * .5 + this.timer * this.scrollX) * (1. - this.speed);
		xMin = Math.floor((xMin - xOff) / this.parallaxWidth) * this.parallaxWidth + xOff;
		var yOff = this.midSlicePos + (cameraClampedTargetY - this.levelHeight * .5 + this.timer * this.scrollY) * (1. - this.speed);
		var sliceIndexBase = Math.floor((yMin - yOff) / this.parallaxHeight);
		yMin = sliceIndexBase * this.parallaxHeight + yOff;
		var _g = 0;
		var _g1 = this.displayedSliceCount;
		while(_g < _g1) {
			var i = _g++;
			var sliceIndex = sliceIndexBase + i;
			var x = (this.atlasSliceCount >> 1) + sliceIndex;
			var maxi = this.atlasSliceCount - 1;
			var atlasIndex = x < 0 ? 0 : x > maxi ? maxi : x;
			var displace = this.displace;
			if(!this.displaceTop && atlasIndex == 0) {
				displace = false;
			}
			if(!this.displaceBottom && atlasIndex == this.atlasSliceCount - 1) {
				displace = false;
			}
			var displaceBelow = this.displaceBottom && atlasIndex == this.atlasSliceCount - 2 || displace && atlasIndex == this.atlasSliceCount - 3;
			this.renderTile(this.leftElements[i],this.tiles[atlasIndex],displace,displaceBelow);
			this.renderTile(this.rightElements[i],this.tiles[atlasIndex],displace,displaceBelow);
			var _this = this.leftElements[i];
			var v = Math.round(xMin);
			_this.posChanged = true;
			_this.x = v;
			var _this1 = this.rightElements[i];
			var v1 = Math.round(xMin + this.parallaxWidth);
			_this1.posChanged = true;
			_this1.x = v1;
			var _this2 = this.leftElements[i];
			var _this3 = this.rightElements[i];
			var v2 = Math.round(yMin + i * this.parallaxHeight);
			_this3.posChanged = true;
			_this2.posChanged = true;
			_this2.y = _this3.y = v2;
		}
		this.timer += dt;
		if(this.displace) {
			var _g = 0;
			while(_g < 10) {
				var i = _g++;
				var _g1 = 0;
				while(_g1 < 17) {
					var j = _g1++;
					var nx = (j / 16 * Assets.noiseWidth + this.timer * this.displaceScrollX * this.displaceMultX / 10 | 0) % Assets.noiseWidth;
					var ny = (i / 9 * Assets.noiseHeight + this.timer * this.displaceScrollY * this.displaceMultY / 10 | 0) % Assets.noiseHeight;
					this.disp[i][j].x = Assets.noiseMapX[ny][nx] * this.displaceMultX;
					this.disp[i][j].y = Assets.noiseMapY[ny][nx] * this.displaceMultY;
				}
			}
		}
		return true;
	}
	,renderTile: function(g,t,displace,displaceBelow) {
		g.clear();
		if(displace) {
			var uMax = this.parallaxWidth / 512;
			var vMax = this.parallaxHeight / 256;
			var cntX = 16;
			var cntY = 9;
			var _g = 0;
			var _g1 = cntY;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = 0;
				var _g3 = cntX;
				while(_g2 < _g3) {
					var j = _g2++;
					var x1 = j * this.parallaxWidth / cntX;
					var y1 = i * this.parallaxHeight / cntY;
					var x2 = (j + 1) * this.parallaxWidth / cntX;
					var y2 = (i + 1) * this.parallaxHeight / cntY;
					var u1 = j / cntX * uMax;
					var v1 = i / cntY * vMax;
					var u2 = (j + 1) / cntX * uMax;
					var v2 = (i + 1) / cntY * vMax;
					g.beginTileFill(0,0,1,1,t);
					g.addVertex(x1 + this.disp[i][j].x,y1 + this.disp[i][j].y,1,1,1,1,u1,v1);
					g.addVertex(x2 + this.disp[i][j + 1].x,y1 + this.disp[i][j + 1].y,1,1,1,1,u2,v1);
					g.addVertex(x2 + this.disp[i + 1][j + 1].x,y2 + (displaceBelow || i < cntY - 1 ? this.disp[i + 1][j + 1].y : 0),1,1,1,1,u2,v2);
					g.addVertex(x1 + this.disp[i + 1][j].x,y2 + (displaceBelow || i < cntY - 1 ? this.disp[i + 1][j].y : 0),1,1,1,1,u1,v2);
					g.endFill();
				}
			}
		} else {
			g.beginTileFill(0,0,1,1,t);
			g.drawRect(0,0,this.parallaxWidth,this.parallaxHeight);
			g.endFill();
		}
	}
	,__class__: background_SlicedParallax
});
var background_TiledParallax = function(tile,layer,speed,levelWidth,levelHeight) {
	background_Parallax.call(this,layer,speed,levelWidth,levelHeight);
	this.batch = new CustomSpriteBatch(tile,this);
	this.parallaxWidth = Math.ceil(tile.width + tile.x) - Math.floor(tile.x);
	this.parallaxHeight = Math.ceil(tile.height + tile.y) - Math.floor(tile.y);
	this.batch.add(new BatchElement(tile));
	this.batch.add(new BatchElement(tile));
	this.batch.add(new BatchElement(tile));
	this.batch.add(new BatchElement(tile));
};
$hxClasses["background.TiledParallax"] = background_TiledParallax;
background_TiledParallax.__name__ = "background.TiledParallax";
background_TiledParallax.__super__ = background_Parallax;
background_TiledParallax.prototype = $extend(background_Parallax.prototype,{
	update: function(dt) {
		if(!background_Parallax.prototype.update.call(this,dt)) {
			return false;
		}
		var cameraClampedTargetX = -Game.inst.world.x + 160;
		var cameraClampedTargetY = -Game.inst.world.y + 90;
		var xMin = cameraClampedTargetX - 160;
		var yMin = cameraClampedTargetY - 90;
		var xOff = (cameraClampedTargetX - this.levelWidth * .5) * (1. - this.speed);
		xMin = Math.floor((xMin - xOff) / this.parallaxWidth) * this.parallaxWidth + xOff;
		var yOff = (cameraClampedTargetY - this.levelHeight * .5) * (1. - this.speed);
		yMin = Math.floor((yMin - yOff) / this.parallaxHeight) * this.parallaxHeight + yOff;
		var i = 0;
		var _g_e = this.batch.first;
		while(_g_e != null) {
			var n = _g_e;
			_g_e = _g_e.next;
			var e = n;
			e.x = xMin + i % 2 * (this.parallaxWidth - 1);
			e.y = yMin + (i / 2 | 0) * (this.parallaxHeight - 1);
			++i;
		}
		return true;
	}
	,__class__: background_TiledParallax
});
var cdb_ColumnType = $hxEnums["cdb.ColumnType"] = { __ename__:"cdb.ColumnType",__constructs__:null
	,TId: {_hx_name:"TId",_hx_index:0,__enum__:"cdb.ColumnType",toString:$estr}
	,TString: {_hx_name:"TString",_hx_index:1,__enum__:"cdb.ColumnType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:2,__enum__:"cdb.ColumnType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:3,__enum__:"cdb.ColumnType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:4,__enum__:"cdb.ColumnType",toString:$estr}
	,TEnum: ($_=function(values) { return {_hx_index:5,values:values,__enum__:"cdb.ColumnType",toString:$estr,__params__:function(){ return [this.values];}}; },$_._hx_name="TEnum",$_)
	,TRef: ($_=function(sheet) { return {_hx_index:6,sheet:sheet,__enum__:"cdb.ColumnType",toString:$estr,__params__:function(){ return [this.sheet];}}; },$_._hx_name="TRef",$_)
	,TImage: {_hx_name:"TImage",_hx_index:7,__enum__:"cdb.ColumnType",toString:$estr}
	,TList: {_hx_name:"TList",_hx_index:8,__enum__:"cdb.ColumnType",toString:$estr}
	,TCustom: ($_=function(name) { return {_hx_index:9,name:name,__enum__:"cdb.ColumnType",toString:$estr,__params__:function(){ return [this.name];}}; },$_._hx_name="TCustom",$_)
	,TFlags: ($_=function(values) { return {_hx_index:10,values:values,__enum__:"cdb.ColumnType",toString:$estr,__params__:function(){ return [this.values];}}; },$_._hx_name="TFlags",$_)
	,TColor: {_hx_name:"TColor",_hx_index:11,__enum__:"cdb.ColumnType",toString:$estr}
	,TLayer: ($_=function(type) { return {_hx_index:12,type:type,__enum__:"cdb.ColumnType",toString:$estr,__params__:function(){ return [this.type];}}; },$_._hx_name="TLayer",$_)
	,TFile: {_hx_name:"TFile",_hx_index:13,__enum__:"cdb.ColumnType",toString:$estr}
	,TTilePos: {_hx_name:"TTilePos",_hx_index:14,__enum__:"cdb.ColumnType",toString:$estr}
	,TTileLayer: {_hx_name:"TTileLayer",_hx_index:15,__enum__:"cdb.ColumnType",toString:$estr}
	,TDynamic: {_hx_name:"TDynamic",_hx_index:16,__enum__:"cdb.ColumnType",toString:$estr}
	,TProperties: {_hx_name:"TProperties",_hx_index:17,__enum__:"cdb.ColumnType",toString:$estr}
};
cdb_ColumnType.__constructs__ = [cdb_ColumnType.TId,cdb_ColumnType.TString,cdb_ColumnType.TBool,cdb_ColumnType.TInt,cdb_ColumnType.TFloat,cdb_ColumnType.TEnum,cdb_ColumnType.TRef,cdb_ColumnType.TImage,cdb_ColumnType.TList,cdb_ColumnType.TCustom,cdb_ColumnType.TFlags,cdb_ColumnType.TColor,cdb_ColumnType.TLayer,cdb_ColumnType.TFile,cdb_ColumnType.TTilePos,cdb_ColumnType.TTileLayer,cdb_ColumnType.TDynamic,cdb_ColumnType.TProperties];
cdb_ColumnType.__empty_constructs__ = [cdb_ColumnType.TId,cdb_ColumnType.TString,cdb_ColumnType.TBool,cdb_ColumnType.TInt,cdb_ColumnType.TFloat,cdb_ColumnType.TImage,cdb_ColumnType.TList,cdb_ColumnType.TColor,cdb_ColumnType.TFile,cdb_ColumnType.TTilePos,cdb_ColumnType.TTileLayer,cdb_ColumnType.TDynamic,cdb_ColumnType.TProperties];
var cdb_TileMode = {};
cdb_TileMode._new = function(s) {
	return s;
};
cdb_TileMode.ofString = function(s) {
	return cdb_TileMode._new(s);
};
cdb_TileMode.toString = function(this1) {
	return this1;
};
var cdb_LocField = $hxEnums["cdb.LocField"] = { __ename__:"cdb.LocField",__constructs__:null
	,LName: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"cdb.LocField",toString:$estr,__params__:function(){ return [this.c];}}; },$_._hx_name="LName",$_)
	,LSub: ($_=function(c,s,e) { return {_hx_index:1,c:c,s:s,e:e,__enum__:"cdb.LocField",toString:$estr,__params__:function(){ return [this.c,this.s,this.e];}}; },$_._hx_name="LSub",$_)
	,LSingle: ($_=function(c,e) { return {_hx_index:2,c:c,e:e,__enum__:"cdb.LocField",toString:$estr,__params__:function(){ return [this.c,this.e];}}; },$_._hx_name="LSingle",$_)
};
cdb_LocField.__constructs__ = [cdb_LocField.LName,cdb_LocField.LSub,cdb_LocField.LSingle];
cdb_LocField.__empty_constructs__ = [];
var cdb_LangXml = function() {
};
$hxClasses["cdb.LangXml"] = cdb_LangXml;
cdb_LangXml.__name__ = "cdb.LangXml";
cdb_LangXml.prototype = {
	unescape: function() {
		if(this._html == null) {
			throw haxe_Exception.thrown("assert");
		}
		return this._html;
	}
	,elements: function() {
		return this._elements;
	}
	,__class__: cdb_LangXml
};
var cdb_Ref = function(e) {
	this.e = e;
};
$hxClasses["cdb.Ref"] = cdb_Ref;
cdb_Ref.__name__ = "cdb.Ref";
cdb_Ref.prototype = {
	__class__: cdb_Ref
};
var cdb_Lang = function(root) {
	this.root = root;
	this.dataSheets = new haxe_ds_StringMap();
};
$hxClasses["cdb.Lang"] = cdb_Lang;
cdb_Lang.__name__ = "cdb.Lang";
cdb_Lang.toLangXml = function(xml) {
	var l = new cdb_LangXml();
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	var name = xml.nodeName;
	l.nodeName = cdb_Lang.NODES.h[name];
	if(l.nodeName == null) {
		l.nodeName = name;
		cdb_Lang.NODES.h[name] = name;
	}
	var hasText = false;
	if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	var _g_current = 0;
	var _g_array = xml.children;
	while(_g_current < _g_array.length) {
		var e = _g_array[_g_current++];
		var tmp;
		if(e.nodeType == 1) {
			var tmp1 = cdb_Lang.r_spaces;
			if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			tmp = !tmp1.match(e.nodeValue);
		} else {
			tmp = false;
		}
		if(tmp) {
			hasText = true;
			break;
		}
	}
	if(hasText) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var html = haxe_xml_Access.get_innerHTML(xml);
		var _this_r = new RegExp("<br/>","gi".split("u").join(""));
		html = html.replace(_this_r,"\n");
		l._html = StringTools.htmlUnescape(html);
	} else {
		l._elements = [];
		var e = xml.elements();
		while(e.hasNext()) {
			var e1 = e.next();
			l._elements.push(cdb_Lang.toLangXml(e1));
		}
	}
	return l;
};
cdb_Lang.getObjParent = function(obj,data) {
	return null;
};
cdb_Lang.prototype = {
	onMissing: function(s) {
		haxe_Log.trace(s,{ fileName : "cdb/Lang.hx", lineNumber : 49, className : "cdb.Lang", methodName : "onMissing"});
	}
	,getSub: function(s,c) {
		return this.getSheet(s.name + "@" + c.name);
	}
	,getSheet: function(name) {
		var _g = 0;
		var _g1 = this.root.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.name == name) {
				return s;
			}
		}
		return null;
	}
	,makeLocField: function(c,s) {
		switch(c.type._hx_index) {
		case 1:
			if(c.kind == "localizable") {
				return cdb_LocField.LName(c);
			} else {
				return null;
			}
			break;
		case 8:case 17:
			var ssub = this.getSub(s,c);
			var fl = this.makeSheetFields(ssub);
			if(fl.length == 0) {
				return null;
			}
			return cdb_LocField.LSub(c,ssub,fl);
		default:
			return null;
		}
	}
	,makeSheetFields: function(s) {
		var fields = [];
		var _g = 0;
		var _g1 = s.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var f = this.makeLocField(c,s);
			if(f != null) {
				if(f._hx_index == 1) {
					var c1 = f.c;
					var fl = f.e;
					if(c1.type == cdb_ColumnType.TProperties) {
						var _g2 = 0;
						while(_g2 < fl.length) {
							var f1 = fl[_g2];
							++_g2;
							fields.push(cdb_LocField.LSingle(c1,f1));
						}
					} else {
						fields.push(f);
					}
				} else {
					fields.push(f);
				}
			}
		}
		return fields;
	}
	,apply: function(xml,reference) {
		var x = Xml.parse(xml).firstElement();
		var ref = reference == null ? null : Xml.parse(reference).firstElement();
		var xsheets_h = Object.create(null);
		cdb_Lang.NODES = new haxe_ds_StringMap();
		var e = x.elements();
		while(e.hasNext()) {
			var e1 = e.next();
			xsheets_h[e1.get("name")] = new cdb_Ref(cdb_Lang.toLangXml(e1));
		}
		if(ref != null) {
			var e = ref.elements();
			while(e.hasNext()) {
				var e1 = e.next();
				var s = xsheets_h[e1.get("name")];
				if(s != null) {
					s.ref = cdb_Lang.toLangXml(e1);
				}
			}
		}
		cdb_Lang.NODES = null;
		var out = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.root.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.props.hide) {
				continue;
			}
			var x = xsheets_h[s.name];
			if(s.props.dataFiles != null) {
				var fields = this.makeSheetFields(s);
				if(fields.length > 0) {
					var idField = null;
					var _g2 = 0;
					var _g3 = s.columns;
					while(_g2 < _g3.length) {
						var c = _g3[_g2];
						++_g2;
						if(c.type == cdb_ColumnType.TId) {
							idField = c.name;
							break;
						}
					}
					if(idField == null) {
						continue;
					}
					if(x == null) {
						this.onMissing("Missing sheet " + s.name);
						continue;
					}
					var this1 = this.dataSheets;
					var key = s.name;
					var value = { sheet : s, idField : idField, fields : fields, refs : this.makeIdMap(x)};
					this1.h[key] = value;
				}
				continue;
			}
			if(x == null) {
				if(s.lines.length > 0 && this.makeSheetFields(s).length > 0) {
					this.onMissing("Missing sheet " + s.name);
				}
				continue;
			}
			var path = [s.name];
			var outLines = [];
			this.applySheet(path,s,this.makeSheetFields(s),s.lines,x,outLines);
			if(Object.prototype.hasOwnProperty.call(out.h,s.name)) {
				throw haxe_Exception.thrown("assert");
			}
			out.h[s.name] = outLines;
		}
		return out;
	}
	,'delete': function(l) {
		var _g = 0;
		var _g1 = this.root.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var sdel = l.h[s.name];
			if(sdel == null) {
				continue;
			}
			this.deleteSheet(s,this.makeSheetFields(s),sdel,s.lines);
		}
	}
	,deleteSheet: function(s,loc,del,lines) {
		var inf = this.getSheetHelpers(s);
		if(inf.id == null) {
			var _g = 0;
			var _g1 = lines.length;
			while(_g < _g1) {
				var i = _g++;
				if(del[i] != null && lines[i] != null) {
					this.deleteObj(loc,del[i],lines[i]);
				}
			}
		} else {
			var byID_h = Object.create(null);
			var _g = 0;
			while(_g < del.length) {
				var d = del[_g];
				++_g;
				byID_h[Reflect.field(d,inf.id)] = d;
			}
			var _g = 0;
			while(_g < lines.length) {
				var o = lines[_g];
				++_g;
				var id = Reflect.field(o,inf.id);
				if(id == null || !Object.prototype.hasOwnProperty.call(byID_h,id)) {
					continue;
				}
				this.deleteObj(loc,byID_h[id],o);
			}
		}
	}
	,deleteObj: function(loc,del,obj) {
		var _g = 0;
		while(_g < loc.length) {
			var l = loc[_g];
			++_g;
			switch(l._hx_index) {
			case 0:
				var c = l.c;
				if(Object.prototype.hasOwnProperty.call(del,c.name)) {
					obj[c.name] = "";
				}
				break;
			case 1:
				var c1 = l.c;
				var s = l.s;
				var el = l.e;
				var ol = Reflect.field(obj,c1.name);
				var dl = Reflect.field(del,c1.name);
				if(ol == null || dl == null) {
					continue;
				}
				this.deleteSheet(s,el,dl,ol);
				break;
			case 2:
				var c2 = l.c;
				var e = l.e;
				var o = Reflect.field(obj,c2.name);
				var d = Reflect.field(del,c2.name);
				if(o == null || d == null) {
					continue;
				}
				this.deleteObj([e],d,o);
				break;
			}
		}
	}
	,applySheet: function(path,s,fields,objects,x,out) {
		var inf = this.getSheetHelpers(s);
		if(inf.id == null) {
			var byIndex = [];
			if(x != null) {
				var _g = 0;
				var _g1 = x.e._elements;
				while(_g < _g1.length) {
					var e = _g1[_g];
					++_g;
					var m = new haxe_ds_StringMap();
					var _g2 = 0;
					var _g3 = e._elements;
					while(_g2 < _g3.length) {
						var e1 = _g3[_g2];
						++_g2;
						var key = e1.nodeName;
						var value = new cdb_Ref(e1);
						m.h[key] = value;
					}
					var name = e.nodeName;
					if(StringTools.startsWith(name,"line")) {
						name = HxOverrides.substr(name,4,null);
					}
					byIndex[Std.parseInt(name)] = m;
				}
				if(x.ref != null) {
					var _g = 0;
					var _g1 = x.ref._elements;
					while(_g < _g1.length) {
						var e = _g1[_g];
						++_g;
						var name = e.nodeName;
						if(StringTools.startsWith(name,"line")) {
							name = HxOverrides.substr(name,4,null);
						}
						var m = byIndex[Std.parseInt(name)];
						if(m != null) {
							var _g2 = 0;
							var _g3 = e._elements;
							while(_g2 < _g3.length) {
								var e1 = _g3[_g2];
								++_g2;
								var r = m.h[e1.nodeName];
								if(r != null) {
									r.ref = e1;
								}
							}
						}
					}
				}
			}
			var _g = 0;
			var _g1 = objects.length;
			while(_g < _g1) {
				var i = _g++;
				var outSub = { };
				var o = objects[i];
				var _g2 = 0;
				while(_g2 < fields.length) {
					var f = fields[_g2];
					++_g2;
					path.push("[" + i + "]");
					this.applyRec(path,f,o,byIndex[i],outSub);
					path.pop();
				}
				if(Reflect.fields(outSub).length > 0) {
					var _g3 = 0;
					var _g4 = inf.helpers;
					while(_g3 < _g4.length) {
						var c = _g4[_g3];
						++_g3;
						var hid = Reflect.field(o,c.name);
						if(hid != null) {
							outSub[c.name] = hid;
						}
					}
					out[i] = outSub;
				}
			}
		} else {
			var byID = this.makeIdMap(x);
			var _g = 0;
			while(_g < objects.length) {
				var o = objects[_g];
				++_g;
				var outSub = { };
				var id = Reflect.field(o,inf.id);
				if(id == null) {
					id = "null";
				}
				path.push(id);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var f = fields[_g1];
					++_g1;
					this.applyRec(path,f,o,byID.h[id],outSub);
				}
				path.pop();
				if(Reflect.fields(outSub).length > 0) {
					outSub[inf.id] = id;
					out.push(outSub);
				}
			}
		}
	}
	,makeIdMap: function(x) {
		var byID = new haxe_ds_StringMap();
		if(x == null) {
			return byID;
		}
		var _g = 0;
		var _g1 = x.e._elements;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var m = new haxe_ds_StringMap();
			var _g2 = 0;
			var _g3 = e._elements;
			while(_g2 < _g3.length) {
				var e1 = _g3[_g2];
				++_g2;
				var key = e1.nodeName;
				var value = new cdb_Ref(e1);
				m.h[key] = value;
			}
			byID.h[e.nodeName] = m;
		}
		if(x.ref != null) {
			var _g = 0;
			var _g1 = x.ref._elements;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				var m = byID.h[e.nodeName];
				if(m != null) {
					var _g2 = 0;
					var _g3 = e._elements;
					while(_g2 < _g3.length) {
						var e1 = _g3[_g2];
						++_g2;
						var r = m.h[e1.nodeName];
						if(r != null) {
							r.ref = e1;
						}
					}
				}
			}
		}
		return byID;
	}
	,applyRec: function(path,f,o,data,out) {
		var prevMissing = this.skipMissing;
		if(Object.prototype.hasOwnProperty.call(o,cdb_Lang.IGNORE_EXPORT_FIELD)) {
			this.skipMissing = true;
		}
		this._applyRec(path,f,o,data,out);
		this.skipMissing = prevMissing;
	}
	,_applyRec: function(path,f,o,data,out) {
		switch(f._hx_index) {
		case 0:
			var c = f.c;
			var v = data == null ? null : data.h[c.name];
			if(v != null) {
				var _this = v.e;
				if(_this._html == null) {
					throw haxe_Exception.thrown("assert");
				}
				var str = _this._html;
				var ref;
				if(v.ref == null) {
					ref = null;
				} else {
					var _this = v.ref;
					if(_this._html == null) {
						throw haxe_Exception.thrown("assert");
					}
					ref = _this._html;
				}
				var oname = Reflect.field(o,c.name);
				if(ref != null && (oname == null || StringTools.trim(ref) != StringTools.trim(oname))) {
					path.push(c.name);
					this.onMissing("Ignored since has changed " + path.join("."));
					path.pop();
				} else {
					o[c.name] = str;
				}
			} else {
				var v = Reflect.field(o,c.name);
				if(v != null && v != "") {
					if(!this.skipMissing) {
						path.push(c.name);
						out[c.name] = v;
						this.onMissing("Missing " + path.join("."));
						path.pop();
					}
					if(this.missingSetLocKey) {
						path.push(c.name);
						o[c.name] = "#" + path.join(".");
						path.pop();
					}
				}
			}
			break;
		case 1:
			var c = f.c;
			var s = f.s;
			var fl = f.e;
			var v = Reflect.field(o,c.name);
			if(v == null) {
				return;
			}
			path.push(c.name);
			var outSub = [];
			this.applySheet(path,s,fl,v,data == null ? null : data.h[c.name],outSub);
			if(outSub.length > 0) {
				out[c.name] = outSub;
			}
			path.pop();
			break;
		case 2:
			var c = f.c;
			var f1 = f.e;
			var v = Reflect.field(o,c.name);
			if(v == null) {
				return;
			}
			path.push(c.name);
			var outSub = { };
			var tmp;
			if(data == null) {
				tmp = null;
			} else {
				var _g = new haxe_ds_StringMap();
				var h = data.h;
				var e_h = h;
				var e_keys = Object.keys(h);
				var e_length = e_keys.length;
				var e_current = 0;
				while(e_current < e_length) {
					var e = e_keys[e_current++];
					if(StringTools.startsWith(e,c.name + ".")) {
						_g.h[HxOverrides.substr(e,c.name.length + 1,null)] = data.h[e];
					}
				}
				tmp = _g;
			}
			this.applyRec(path,f1,v,tmp,outSub);
			path.pop();
			if(Reflect.fields(outSub).length > 0) {
				out[c.name] = outSub;
			}
			break;
		}
	}
	,buildXML: function(diff) {
		var buf_b = "";
		buf_b += "<cdb>\n";
		var _g = 0;
		var _g1 = this.root.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.props.hide) {
				continue;
			}
			var locFields = this.makeSheetFields(s);
			if(locFields.length == 0) {
				continue;
			}
			var lines = this.getLines(s,diff);
			if(lines.length == 0) {
				continue;
			}
			buf_b += Std.string("\t<sheet name=\"" + s.name + "\">\n");
			buf_b += Std.string(this.buildSheetXml(s,"\t\t",lines,s.linesData,locFields,diff));
			buf_b += "\t</sheet>\n";
		}
		buf_b += "</cdb>\n";
		return buf_b;
	}
	,getLines: function(s,diff) {
		if(diff != null) {
			var m = diff.h[s.name];
			if(m == null) {
				throw haxe_Exception.thrown("Missing diff for " + s.name);
			}
			return m;
		}
		return s.lines;
	}
	,getLocText: function(tabs,o,f,diff) {
		switch(f._hx_index) {
		case 0:
			var c = f.c;
			var v = Reflect.field(o,c.name);
			if(v != null) {
				v = StringTools.htmlEscape(v).split("\n").join("<br/>").split("\r").join("");
			}
			return { name : c.name, value : v};
		case 1:
			var c = f.c;
			var ssub = f.s;
			var fl = f.e;
			var v = Reflect.field(o,c.name);
			var content = this.buildSheetXml(ssub,tabs + "\t\t",v == null ? [] : v,null,fl,diff);
			return { name : c.name, value : content};
		case 2:
			var c = f.c;
			var f1 = f.e;
			var v = this.getLocText(tabs,Reflect.field(o,c.name),f1,diff);
			return { name : c.name + "." + v.name, value : v.value};
		}
	}
	,getSheetHelpers: function(s) {
		var id = null;
		var helpers = [];
		var _g = 0;
		var _g1 = s.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var _g2 = c.type;
			switch(_g2._hx_index) {
			case 0:
				if(id == null) {
					id = c;
				}
				break;
			case 1:
				if(c.kind != "localizable") {
					helpers.push({ label : c.name, name : c.name, map : null});
				}
				break;
			case 6:
				var sheet = _g2.sheet;
				var map = null;
				var s = this.getSheet(sheet);
				if(s.props.displayColumn != null) {
					var idCol = null;
					var _g3 = 0;
					var _g4 = s.columns;
					while(_g3 < _g4.length) {
						var c1 = _g4[_g3];
						++_g3;
						if(c1.type == cdb_ColumnType.TId) {
							idCol = c1;
							break;
						}
					}
					if(idCol != null) {
						map = new haxe_ds_StringMap();
						var _g5 = 0;
						var _g6 = s.lines;
						while(_g5 < _g6.length) {
							var o = _g6[_g5];
							++_g5;
							var id1 = Reflect.field(o,idCol.name);
							var name = Reflect.field(o,s.props.displayColumn);
							if(id1 != null && id1 != "" && name != null && name != "") {
								map.h[id1] = name;
							}
						}
					}
				}
				helpers.push({ label : c.name, name : c.name, map : map});
				break;
			default:
			}
		}
		if(id != null) {
			helpers = [];
		}
		return { id : id == null ? null : id.name, idOpt : id == null ? false : id.opt, helpers : helpers};
	}
	,resolveField: function(obj,path,linesData) {
		var o = obj;
		var _g = 0;
		var _g1 = path.split(".");
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s == "$root") {
				if(linesData == null) {
					return null;
				}
				var prefab = cdb_Lang.getObjParent(obj,linesData);
				if(prefab == null) {
					return null;
				}
				o = prefab;
			} else {
				if(!Object.prototype.hasOwnProperty.call(o,s)) {
					return null;
				}
				o = Reflect.field(o,s);
			}
		}
		if(o == null) {
			return null;
		} else {
			return Std.string(o);
		}
	}
	,buildSheetXml: function(s,tabs,values,linesData,locFields,diff) {
		var inf = this.getSheetHelpers(s);
		var attr = cdb_Lang.LANG_CONFIG != null ? cdb_Lang.LANG_CONFIG[s.name] : null;
		if(attr != null) {
			var access = attr;
			var _g_access = access;
			var _g_keys = Reflect.fields(access);
			var _g_index = 0;
			while(_g_index < _g_keys.length) {
				var key = _g_keys[_g_index++];
				var _g_value = _g_access[key];
				var _g_key = key;
				var k = _g_key;
				var v = _g_value;
				inf.helpers.push({ label : k, name : v, map : null});
			}
		}
		var buf_b = "";
		var index = 0;
		var prevData = this.currentLineData;
		var _g_current = 0;
		var _g_array = values;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var o = _g_value;
			if(Object.prototype.hasOwnProperty.call(o,cdb_Lang.IGNORE_EXPORT_FIELD)) {
				continue;
			}
			if(linesData != null) {
				this.currentLineData = linesData[i];
			}
			var id;
			if(inf.id == null) {
				id = "line" + index++;
			} else {
				id = Reflect.field(o,inf.id);
				if(id == "") {
					continue;
				}
				if(id == null) {
					if(!inf.idOpt) {
						continue;
					}
					id = "null";
				}
			}
			var _g = [];
			var _g1 = 0;
			while(_g1 < locFields.length) {
				var f = locFields[_g1];
				++_g1;
				var l = this.getLocText(tabs,o,f,diff);
				_g.push({ f : f, value : l.value, name : l.name});
			}
			var locs = _g;
			var hasLoc = false;
			var _g2 = 0;
			while(_g2 < locs.length) {
				var l1 = locs[_g2];
				++_g2;
				if(l1.value != null && l1.value != "") {
					hasLoc = true;
					break;
				}
			}
			if(!hasLoc) {
				continue;
			}
			buf_b += Std.string("" + tabs + "<" + id);
			var _g3 = 0;
			var _g4 = inf.helpers;
			while(_g3 < _g4.length) {
				var c = _g4[_g3];
				++_g3;
				var hid = this.resolveField(o,c.name,s.linesData != null ? s.linesData[i] : null);
				if(hid != null) {
					if(c.map != null) {
						var v = c.map.h[hid];
						if(v != null) {
							hid = v;
						}
					}
					var _this_r = new RegExp("\\$","g".split("u").join(""));
					var label = c.label.replace(_this_r,"_");
					buf_b += Std.string(" " + label + "=\"" + StringTools.htmlEscape(hid,true) + "\"");
				}
			}
			buf_b += ">\n";
			var _g5 = 0;
			while(_g5 < locs.length) {
				var l2 = locs[_g5];
				++_g5;
				if(l2.value != null && l2.value != "") {
					if(l2.f._hx_index == 0 || l2.value.indexOf("<") < 0) {
						buf_b += Std.string("" + tabs + "\t<" + l2.name + ">" + l2.value + "</" + l2.name + ">\n");
					} else {
						buf_b += Std.string("" + tabs + "\t<" + l2.name + ">\n");
						buf_b += Std.string("" + tabs + "\t\t" + StringTools.trim(l2.value) + "\n");
						buf_b += Std.string("" + tabs + "\t</" + l2.name + ">\n");
					}
				}
			}
			buf_b += Std.string("" + tabs + "</" + id + ">\n");
		}
		this.currentLineData = prevData;
		return buf_b;
	}
	,__class__: cdb_Lang
};
var cdb_Lz4Reader = function() {
};
$hxClasses["cdb.Lz4Reader"] = cdb_Lz4Reader;
cdb_Lz4Reader.__name__ = "cdb.Lz4Reader";
cdb_Lz4Reader.uncompress = function(src,srcPos,srcLen,out,outPos) {
	var outSave = outPos;
	var srcEnd = srcPos + srcLen;
	if(srcLen == 0) {
		return [srcPos,outPos,0];
	}
	var outLen = out.length;
	while(true) {
		var start = srcPos;
		var tk = src.b[srcPos++];
		var litLen = tk >> 4;
		var matchLen = tk & 15;
		if(litLen == 15) {
			var b;
			do {
				b = src.b[srcPos++];
				litLen += b;
			} while(b == 255);
		}
		if(outPos + litLen > outLen) {
			return [start,outPos,litLen + matchLen];
		}
		switch(litLen) {
		case 0:
			break;
		case 1:
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			break;
		case 2:
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			break;
		case 3:
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			break;
		default:
			out.blit(outPos,src,srcPos,litLen);
			outPos += litLen;
			srcPos += litLen;
		}
		if(srcPos >= srcEnd) {
			break;
		}
		var offset = src.b[srcPos++];
		offset |= src.b[srcPos++] << 8;
		if(matchLen == 15) {
			var b1;
			do {
				b1 = src.b[srcPos++];
				matchLen += b1;
			} while(b1 == 255);
		}
		matchLen += 4;
		if(outPos + matchLen > outLen) {
			return [start,outPos - litLen,litLen + matchLen];
		}
		if(matchLen >= 64 && matchLen <= offset) {
			out.blit(outPos,out,outPos - offset,matchLen);
			outPos += matchLen;
		} else {
			var copyEnd = outPos + matchLen;
			while(outPos < copyEnd) {
				out.b[outPos] = out.b[outPos - offset];
				++outPos;
			}
		}
	}
	if(srcPos != srcEnd) {
		throw haxe_Exception.thrown("Read too much data " + (srcPos - srcLen));
	}
	return [srcPos,outPos,0];
};
cdb_Lz4Reader.decodeString = function(s) {
	if(s == "") {
		return new haxe_io_Bytes(new ArrayBuffer(0));
	}
	var k = haxe_crypto_Base64.decode(s);
	if(k.b[0] != 4 || k.b[1] != 34 || k.b[2] != 77 || k.b[3] != 24) {
		return k;
	}
	return new cdb_Lz4Reader().read(k);
};
cdb_Lz4Reader.encodeBytes = function(b,compress) {
	var tmp = compress && b.length > 0;
	return haxe_crypto_Base64.encode(b);
};
cdb_Lz4Reader.prototype = {
	b: function() {
		return this.bytes.b[this.pos++];
	}
	,grow: function(out,pos,len) {
		var size = out.length;
		do size = size * 3 >> 1; while(size < pos + len);
		var out2 = new haxe_io_Bytes(new ArrayBuffer(size));
		out2.blit(0,out,0,pos);
		return out2;
	}
	,read: function(bytes) {
		this.bytes = bytes;
		this.pos = 0;
		if(this.bytes.b[this.pos++] != 4 || this.bytes.b[this.pos++] != 34 || this.bytes.b[this.pos++] != 77 || this.bytes.b[this.pos++] != 24) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var flags = this.bytes.b[this.pos++];
		if(flags >> 6 != 1) {
			throw haxe_Exception.thrown("Invalid version " + (flags >> 6));
		}
		var blockChecksum = (flags & 16) != 0;
		var streamSize = (flags & 8) != 0;
		var streamChecksum = (flags & 4) != 0;
		if((flags & 2) != 0) {
			throw haxe_Exception.thrown("assert");
		}
		var presetDict = (flags & 1) != 0;
		var bd = this.bytes.b[this.pos++];
		if((bd & 128) != 0) {
			throw haxe_Exception.thrown("assert");
		}
		var maxBlockSize = [0,0,0,0,65536,262144,1048576,4194304][bd >> 4 & 7];
		if(maxBlockSize == 0) {
			throw haxe_Exception.thrown("assert");
		}
		if((bd & 15) != 0) {
			throw haxe_Exception.thrown("assert");
		}
		if(streamSize) {
			this.pos += 8;
		}
		if(presetDict) {
			throw haxe_Exception.thrown("Preset dictionary not supported");
		}
		var headerChk = this.bytes.b[this.pos++];
		var out = new haxe_io_Bytes(new ArrayBuffer(128));
		var outPos = 0;
		while(true) {
			var size = this.bytes.b[this.pos++] | this.bytes.b[this.pos++] << 8 | this.bytes.b[this.pos++] << 16 | this.bytes.b[this.pos++] << 24;
			if(size == 0) {
				break;
			}
			if((size & -16) == 407710288) {
				var dataSize = this.bytes.b[this.pos++] | this.bytes.b[this.pos++] << 8 | this.bytes.b[this.pos++] << 16 | this.bytes.b[this.pos++] << 24;
				this.pos += dataSize;
				continue;
			}
			if((size & -2147483648) != 0) {
				size &= 2147483647;
				if(outPos + out.length < size) {
					out = this.grow(out,outPos,size);
				}
				out.blit(outPos,bytes,this.pos,size);
				outPos += size;
				this.pos += size;
			} else {
				var srcEnd = this.pos + size;
				while(this.pos < srcEnd) {
					var r = cdb_Lz4Reader.uncompress(bytes,this.pos,srcEnd - this.pos,out,outPos);
					this.pos = r[0];
					outPos = r[1];
					var req = r[2];
					if(req > 0) {
						out = this.grow(out,outPos,req);
					}
				}
			}
			if(blockChecksum) {
				this.pos += 4;
			}
		}
		return out.sub(0,outPos);
	}
	,__class__: cdb_Lz4Reader
};
var cdb_Parser = function() { };
$hxClasses["cdb.Parser"] = cdb_Parser;
cdb_Parser.__name__ = "cdb.Parser";
cdb_Parser.saveType = function(t) {
	switch(t._hx_index) {
	case 5:
		var values = t.values;
		return t._hx_index + ":" + values.join(",");
	case 6:
		return t._hx_index + ":" + Std.string(Type.enumParameters(t)[0]);
	case 9:
		return t._hx_index + ":" + Std.string(Type.enumParameters(t)[0]);
	case 10:
		var values = t.values;
		return t._hx_index + ":" + values.join(",");
	case 12:
		return t._hx_index + ":" + Std.string(Type.enumParameters(t)[0]);
	case 0:case 1:case 2:case 3:case 4:case 7:case 8:case 11:case 13:case 14:case 15:case 16:case 17:
		if(t._hx_index == null) {
			return "null";
		} else {
			return "" + t._hx_index;
		}
		break;
	}
};
cdb_Parser.getType = function(str) {
	var _g = Std.parseInt(str);
	if(_g == null) {
		throw haxe_Exception.thrown("Unknown type " + str);
	} else {
		switch(_g) {
		case 0:
			return cdb_ColumnType.TId;
		case 1:
			return cdb_ColumnType.TString;
		case 2:
			return cdb_ColumnType.TBool;
		case 3:
			return cdb_ColumnType.TInt;
		case 4:
			return cdb_ColumnType.TFloat;
		case 5:
			return cdb_ColumnType.TEnum(HxOverrides.substr(str,str.indexOf(":") + 1,null).split(","));
		case 6:
			return cdb_ColumnType.TRef(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 7:
			return cdb_ColumnType.TImage;
		case 8:
			return cdb_ColumnType.TList;
		case 9:
			return cdb_ColumnType.TCustom(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 10:
			return cdb_ColumnType.TFlags(HxOverrides.substr(str,str.indexOf(":") + 1,null).split(","));
		case 11:
			return cdb_ColumnType.TColor;
		case 12:
			return cdb_ColumnType.TLayer(HxOverrides.substr(str,str.indexOf(":") + 1,null));
		case 13:
			return cdb_ColumnType.TFile;
		case 14:
			return cdb_ColumnType.TTilePos;
		case 15:
			return cdb_ColumnType.TTileLayer;
		case 16:
			return cdb_ColumnType.TDynamic;
		case 17:
			return cdb_ColumnType.TProperties;
		default:
			throw haxe_Exception.thrown("Unknown type " + str);
		}
	}
};
cdb_Parser.parse = function(content,editMode) {
	if(content == null) {
		throw haxe_Exception.thrown("CDB content is null");
	}
	var data = JSON.parse(content);
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = s.columns;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			c.type = cdb_Parser.getType(c.typeStr);
			c.typeStr = null;
		}
	}
	var _g = 0;
	var _g1 = data.customTypes;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = t.cases;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			var _g4 = 0;
			var _g5 = c.args;
			while(_g4 < _g5.length) {
				var a = _g5[_g4];
				++_g4;
				a.type = cdb_Parser.getType(a.typeStr);
				a.typeStr = null;
			}
		}
	}
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(!(editMode || s.props.hasGroup)) {
			continue;
		}
		if(s.separators == null) {
			var ids = Reflect.field(s,"separatorIds");
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < ids.length) {
				var i = ids[_g3];
				++_g3;
				if(typeof(i) == "number" && ((i | 0) === i)) {
					_g2.push({ index : i});
				} else {
					_g2.push({ id : i});
				}
			}
			s.separators = _g2;
			Reflect.deleteField(s,"separatorIds");
		}
		var indexMap = null;
		var _g4 = 0;
		var _g5 = s.separators.length;
		while(_g4 < _g5) {
			var i1 = _g4++;
			var sep = s.separators[i1];
			if(typeof(sep) == "number" && ((sep | 0) === sep)) {
				s.separators[i1] = { index : sep};
			} else if(sep.id != null) {
				if(indexMap == null) {
					var idField = null;
					var _g6 = 0;
					var _g7 = s.columns;
					while(_g6 < _g7.length) {
						var c = _g7[_g6];
						++_g6;
						if(c.type == cdb_ColumnType.TId) {
							idField = c.name;
							break;
						}
					}
					indexMap = new haxe_ds_StringMap();
					var _g8 = 0;
					var _g9 = s.lines.length;
					while(_g8 < _g9) {
						var i2 = _g8++;
						var l = s.lines[i2];
						var id = Reflect.field(l,idField);
						if(id != null) {
							indexMap.h[id] = i2;
						}
					}
				}
				sep.index = indexMap.h[sep.id];
				Reflect.deleteField(sep,"id");
			}
		}
		var titles = Reflect.field(s.props,"separatorTitles");
		if(titles != null) {
			Reflect.deleteField(s.props,"separatorTitles");
			var _g10 = 0;
			var _g11 = titles.length;
			while(_g10 < _g11) {
				var i3 = _g10++;
				if(titles[i3] != null) {
					s.separators[i3].title = titles[i3];
				}
			}
		}
	}
	return data;
};
cdb_Parser.save = function(data) {
	var save = [];
	var seps = [];
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var idField = null;
		var _g2 = 0;
		var _g3 = s.columns;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			if(c.type == cdb_ColumnType.TId && idField == null) {
				idField = c.name;
			}
			save.push(c.type);
			if(c.typeStr == null) {
				c.typeStr = cdb_Parser.saveType(c.type);
			}
			Reflect.deleteField(c,"type");
		}
		var oldSeps = null;
		if(idField != null && s.separators.length > 0) {
			var uniqueIDs = true;
			var uids_h = Object.create(null);
			var _g4 = 0;
			var _g5 = s.lines;
			while(_g4 < _g5.length) {
				var l = _g5[_g4];
				++_g4;
				var id = Reflect.field(l,idField);
				if(id != null) {
					if(uids_h[id]) {
						uniqueIDs = false;
						break;
					}
					uids_h[id] = true;
				}
			}
			if(uniqueIDs) {
				oldSeps = s.separators;
				s.separators = [];
				var _g6 = 0;
				while(_g6 < oldSeps.length) {
					var sep = oldSeps[_g6];
					++_g6;
					var obj = s.lines[sep.index];
					var id1 = obj != null ? Reflect.field(obj,idField) : null;
					var sep1 = sep;
					if(id1 != null) {
						sep1 = Reflect.copy(sep1);
						Reflect.deleteField(sep1,"index");
						sep1.id = id1;
					}
					s.separators.push(sep1);
				}
			}
		}
		seps.push(oldSeps);
	}
	var _g = 0;
	var _g1 = data.customTypes;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = t.cases;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			var _g4 = 0;
			var _g5 = c.args;
			while(_g4 < _g5.length) {
				var a = _g5[_g4];
				++_g4;
				save.push(a.type);
				if(a.typeStr == null) {
					a.typeStr = cdb_Parser.saveType(a.type);
				}
				Reflect.deleteField(a,"type");
			}
		}
	}
	var str = JSON.stringify(data,null,"\t");
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = s.columns;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			c.type = save.shift();
		}
		var oldSeps = seps.shift();
		if(oldSeps != null) {
			s.separators = oldSeps;
		}
	}
	var _g = 0;
	var _g1 = data.customTypes;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = t.cases;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			var _g4 = 0;
			var _g5 = c.args;
			while(_g4 < _g5.length) {
				var a = _g5[_g4];
				++_g4;
				a.type = save.shift();
			}
		}
	}
	return str;
};
var cdb__$Types_ArrayIterator = function(a) {
	this.a = a;
	this.pos = 0;
};
$hxClasses["cdb._Types.ArrayIterator"] = cdb__$Types_ArrayIterator;
cdb__$Types_ArrayIterator.__name__ = "cdb._Types.ArrayIterator";
cdb__$Types_ArrayIterator.prototype = {
	hasNext: function() {
		return this.pos < this.a.length;
	}
	,next: function() {
		return this.a[this.pos++];
	}
	,__class__: cdb__$Types_ArrayIterator
};
var cdb__$Types_FlagsIterator = function(flags) {
	this.flags = flags;
	this.k = 0;
};
$hxClasses["cdb._Types.FlagsIterator"] = cdb__$Types_FlagsIterator;
cdb__$Types_FlagsIterator.__name__ = "cdb._Types.FlagsIterator";
cdb__$Types_FlagsIterator.prototype = {
	hasNext: function() {
		return this.flags >= 1 << this.k;
	}
	,next: function() {
		while((this.flags & 1 << this.k) == 0) this.k++;
		return this.k++;
	}
	,__class__: cdb__$Types_FlagsIterator
};
var cdb_ArrayRead = {};
cdb_ArrayRead._new = function(a) {
	return a;
};
cdb_ArrayRead.get_length = function(this1) {
	return this1.length;
};
cdb_ArrayRead.toIterable = function(this1) {
	return this1;
};
cdb_ArrayRead.iterator = function(this1) {
	return new cdb__$Types_ArrayIterator(this1);
};
cdb_ArrayRead.castArray = function(this1) {
	return this1;
};
cdb_ArrayRead.toArrayCopy = function(this1) {
	return this1.slice();
};
cdb_ArrayRead.getIndex = function(this1,v) {
	return this1[v];
};
var cdb_Flags = {};
cdb_Flags._new = function(x) {
	return x;
};
cdb_Flags.has = function(this1,t) {
	return (this1 & 1 << t) != 0;
};
cdb_Flags.set = function(this1,t) {
	this1 |= 1 << t;
};
cdb_Flags.unset = function(this1,t) {
	this1 &= ~(1 << t);
};
cdb_Flags.iterator = function(this1) {
	return new cdb__$Types_FlagsIterator(this1);
};
cdb_Flags.toInt = function(this1) {
	return this1;
};
var cdb_Layer = {};
cdb_Layer._new = function(x) {
	return x;
};
cdb_Layer.decode = function(this1,all) {
	var k = cdb_Lz4Reader.decodeString(this1);
	var _g = [];
	var _g1 = 0;
	var _g2 = k.length;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(all[k.b[i]]);
	}
	return _g;
};
cdb_Layer.encode = function(a,compress) {
	var b = new haxe_io_Bytes(new ArrayBuffer(a.length));
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		b.b[i] = a[i];
	}
	return cdb_Lz4Reader.encodeBytes(b,compress);
};
var cdb_TileLayerData = {};
cdb_TileLayerData._new = function(v) {
	return v;
};
cdb_TileLayerData.decode = function(this1) {
	var k = cdb_Lz4Reader.decodeString(this1);
	var _g = [];
	var _g1 = 0;
	var _g2 = k.length >> 1;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(k.b[i << 1] | k.b[(i << 1) + 1] << 8);
	}
	return _g;
};
cdb_TileLayerData.encode = function(a,compress) {
	var b = new haxe_io_Bytes(new ArrayBuffer(a.length * 2));
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		var v = a[i];
		b.b[i << 1] = v & 255;
		b.b[(i << 1) + 1] = v >> 8 & 255;
	}
	return cdb_TileLayerData._new(cdb_Lz4Reader.encodeBytes(b,compress));
};
var cdb_LevelPropsAccess = {};
cdb_LevelPropsAccess.get_tileSize = function(this1) {
	return this1.tileSize;
};
cdb_LevelPropsAccess.getTileset = function(this1,i,name) {
	return Reflect.field(i.sheet.props.level.tileSets,name);
};
cdb_LevelPropsAccess.getLayer = function(this1,name) {
	if(this1 == null || this1.layers == null) {
		return null;
	}
	var _g = 0;
	var _g1 = this1.layers;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.l == name) {
			return l.p;
		}
	}
	return null;
};
var cdb_Index = function(data,name) {
	this.name = name;
	this.initSheet(data);
	if(this.sheet == null) {
		throw haxe_Exception.thrown("'" + name + "' not found in CDB data");
	}
};
$hxClasses["cdb.Index"] = cdb_Index;
cdb_Index.__name__ = "cdb.Index";
cdb_Index.prototype = {
	initSheet: function(data) {
		var _g = 0;
		var _g1 = data.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.name == this.name) {
				this.all = s.lines;
				this.sheet = s;
				if(s.props.hasIndex) {
					var _g2 = 0;
					var _g3 = this.all.length;
					while(_g2 < _g3) {
						var i = _g2++;
						this.all[i].index = i;
					}
				}
				if(s.props.hasGroup) {
					var gid = -1;
					var sindex = 0;
					while(true) {
						var s1 = s.separators[sindex];
						if(s1 == null || s1.index != 0) {
							break;
						}
						++sindex;
						if(s1.title != null) {
							++gid;
						}
					}
					if(gid < 0) {
						++gid;
					}
					var _g4 = 0;
					var _g5 = this.all.length;
					while(_g4 < _g5) {
						var i1 = _g4++;
						while(true) {
							var s2 = s.separators[sindex];
							if(s2 == null || s2.index != i1) {
								break;
							}
							if(s2.title != null) {
								++gid;
							}
							++sindex;
						}
						this.all[i1].group = gid;
					}
				}
				break;
			}
		}
	}
	,__class__: cdb_Index
};
var cdb_IndexId = function(data,name) {
	cdb_Index.call(this,data,name);
};
$hxClasses["cdb.IndexId"] = cdb_IndexId;
cdb_IndexId.__name__ = "cdb.IndexId";
cdb_IndexId.__super__ = cdb_Index;
cdb_IndexId.prototype = $extend(cdb_Index.prototype,{
	initSheet: function(data) {
		cdb_Index.prototype.initSheet.call(this,data);
		this.byId = new haxe_ds_StringMap();
		this.byIndex = [];
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.type._hx_index == 0) {
				var cname = c.name;
				var _g2 = 0;
				var _g3 = this.sheet.lines;
				while(_g2 < _g3.length) {
					var a = _g3[_g2];
					++_g2;
					var id = Reflect.field(a,cname);
					if(id != null && id != "") {
						this.byId.h[id] = a;
						this.byIndex.push(a);
					}
				}
				break;
			}
		}
	}
	,reload: function(data) {
		var oldId = this.byId;
		var oldIndex = this.byIndex;
		this.initSheet(data);
		var h = this.byId.h;
		var id_h = h;
		var id_keys = Object.keys(h);
		var id_length = id_keys.length;
		var id_current = 0;
		while(id_current < id_length) {
			var id = id_keys[id_current++];
			var oldObj = oldId.h[id];
			if(oldObj == null) {
				continue;
			}
			var newObj = this.byId.h[id];
			var fields = Reflect.fields(oldObj);
			var _g = 0;
			var _g1 = Reflect.fields(newObj);
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				oldObj[f] = Reflect.field(newObj,f);
				HxOverrides.remove(fields,f);
			}
			var _g2 = 0;
			while(_g2 < fields.length) {
				var f1 = fields[_g2];
				++_g2;
				Reflect.deleteField(oldObj,f1);
			}
			var idx = this.byIndex.indexOf(newObj);
			if(idx >= 0) {
				this.byIndex[idx] = oldObj;
			}
			this.sheet.lines[this.sheet.lines.indexOf(newObj)] = oldObj;
			this.byId.h[id] = oldObj;
		}
	}
	,get: function(k) {
		return this.byId.h[k];
	}
	,resolve: function(id,opt,approximate) {
		if(id == null) {
			return null;
		}
		var v = this.byId.h[id];
		if(v == null && approximate) {
			id = id.toLowerCase();
			var best = 1000;
			var h = this.byId.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var k = _g_key;
				var value = _g_value;
				if(StringTools.startsWith(k.toLowerCase(),id) && k.length < best) {
					v = value;
					best = k.length;
				}
			}
		}
		if(v == null && !opt) {
			throw haxe_Exception.thrown("Missing " + this.name + "." + id);
		} else {
			return v;
		}
	}
	,__class__: cdb_IndexId
});
var dn_CiAssert = function() { };
$hxClasses["dn.CiAssert"] = dn_CiAssert;
dn_CiAssert.__name__ = "dn.CiAssert";
dn_CiAssert.printOk = function(v) {
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println(Std.string(v) + "  <Ok>");
	}
};
dn_CiAssert.printIfVerbose = function(v) {
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println(v);
	}
};
dn_CiAssert.fail = function(filePos,desc,reason,extraInfos) {
	var desc1 = desc == null ? "null" : "" + desc;
	var _g = [];
	var _g1 = 0;
	var _g2 = desc1.length + 11;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push("*");
	}
	var sep = _g;
	dn_Lib.println(sep.join(""));
	dn_Lib.println(desc1 + "  <FAILED!>");
	if(extraInfos != null) {
		var _g = 0;
		while(_g < extraInfos.length) {
			var str = extraInfos[_g];
			++_g;
			dn_Lib.println("\t" + str);
		}
	}
	dn_Lib.println("ERROR: " + reason);
	dn_Lib.println(sep.join(""));
	throw new Error("Failed in " + filePos.file);
};
var dn_Cooldown = function(fps,maxSize) {
	if(dn_Cooldown.INDEXES == null) {
		if(haxe_rtti_Meta.getType(dn_Cooldown).indexes != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = haxe_rtti_Meta.getType(dn_Cooldown).indexes;
			while(_g1 < _g2.length) {
				var str = _g2[_g1];
				++_g1;
				_g.push(Std.string(str));
			}
			dn_Cooldown.INDEXES = _g;
		}
	}
	this.baseFps = fps;
	this.changeMaxSizeAndReset(maxSize == null ? dn_Cooldown.DEFAULT_COUNT_LIMIT : maxSize);
};
$hxClasses["dn.Cooldown"] = dn_Cooldown;
dn_Cooldown.__name__ = "dn.Cooldown";
dn_Cooldown.__test = function() {
	var fps = 10;
	var cd = new dn_Cooldown(fps);
	var _advanceTimeS = function(sec) {
		var _g = 0;
		var x = sec * fps;
		var _g1;
		if(x > .0) {
			var t = x + .5 | 0;
			_g1 = t < x ? t + 1 : t;
		} else if(x < .0) {
			var t = x - .5 | 0;
			_g1 = t < x ? t + 1 : t;
		} else {
			_g1 = 0;
		}
		while(_g < _g1) {
			var i = _g++;
			cd.update(1);
		}
	};
	var frames = cd.baseFps;
	var allowLower = true;
	var onComplete = null;
	if(allowLower == null) {
		allowLower = true;
	}
	var cur = cd._getCdObject(0);
	if(!(cur != null && frames < cur.frames && !allowLower)) {
		if(frames <= 0) {
			if(cur != null) {
				cd.fastCheck.remove(cur.k);
				var _this = cd.cds;
				var _g = 0;
				var _g1 = _this.nalloc;
				while(_g < _g1) {
					var i = _g++;
					if(_this.pool[i] == cur) {
						if(i >= 0 && i < _this.nalloc) {
							if(i == _this.nalloc - 1) {
								_this.nalloc--;
							} else {
								var tmp = _this.pool[i];
								_this.pool[i] = _this.pool[_this.nalloc - 1];
								_this.pool[_this.nalloc - 1] = tmp;
								_this.nalloc--;
							}
						}
						break;
					}
				}
			}
		} else {
			cd.fastCheck.h[0] = true;
			if(cur != null) {
				cur.frames = frames;
				cur.initial = frames;
			} else {
				var _this = cd.cds;
				if(_this.nalloc >= _this.size) {
					_this.garbageCollectNow();
					if(_this.nalloc >= _this.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this.size + ")");
					}
				}
				var e = _this.pool[_this.nalloc++];
				e.recycle();
				var cd1 = e;
				cd1.k = 0;
				cd1.frames = frames;
				cd1.initial = frames;
			}
		}
		if(onComplete != null) {
			if(frames <= 0) {
				onComplete();
			} else {
				var cd1 = cd._getCdObject(0);
				if(cd1 == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 0 + "): cooldown " + 0 + " isn't running");
				}
				cd1.onCompleteOnce = onComplete;
			}
		}
	}
	if(cd.fastCheck.h.hasOwnProperty(0) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"test\")" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 519},"[JS|dn.Cooldown] cd.has(\"test\")","This expression should be TRUE");
	}
	if(cd._getRatio(0) == 1 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.getRatio(\"test\") == 1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 520},"[JS|dn.Cooldown] cd.getRatio(\"test\") == 1","This expression should be TRUE");
	}
	_advanceTimeS(1);
	if(cd.fastCheck.h.hasOwnProperty(0) != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"test\")" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 522},"[JS|dn.Cooldown] cd.has(\"test\")","This expression should be FALSE");
	}
	if(cd._getRatio(0) == 0 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.getRatio(\"test\") == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 523},"[JS|dn.Cooldown] cd.getRatio(\"test\") == 0","This expression should be TRUE");
	}
	var allowLower = true;
	var onComplete = null;
	if(allowLower == null) {
		allowLower = true;
	}
	var cur = cd._getCdObject(4194306);
	if(!(cur != null && 5 < cur.frames && !allowLower)) {
		cd.fastCheck.h[4194306] = true;
		if(cur != null) {
			cur.frames = 5;
			cur.initial = 5;
		} else {
			var _this = cd.cds;
			if(_this.nalloc >= _this.size) {
				_this.garbageCollectNow();
				if(_this.nalloc >= _this.size) {
					throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this.size + ")");
				}
			}
			var e = _this.pool[_this.nalloc++];
			e.recycle();
			var cd1 = e;
			cd1.k = 4194306;
			cd1.frames = 5;
			cd1.initial = 5;
		}
		if(onComplete != null) {
			var cd1 = cd._getCdObject(4194306);
			if(cd1 == null) {
				throw haxe_Exception.thrown("cannot bind onComplete(" + 4194306 + "): cooldown " + 4194306 + " isn't running");
			}
			cd1.onCompleteOnce = onComplete;
		}
	}
	if(cd.fastCheck.h.hasOwnProperty(4194304) != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"jump\")" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 527},"[JS|dn.Cooldown] cd.has(\"jump\")","This expression should be FALSE");
	}
	if(cd.fastCheck.h.hasOwnProperty(4194306) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"jump\" + 2)" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 528},"[JS|dn.Cooldown] cd.has(\"jump\" + 2)","This expression should be TRUE");
	}
	var id = 2;
	if(cd.fastCheck.h.hasOwnProperty(4194304 | id & 4194303) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"jump\" + id)" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 530},"[JS|dn.Cooldown] cd.has(\"jump\" + id)","This expression should be TRUE");
	}
	var frames = cd.baseFps;
	var allowLower = true;
	var onComplete = null;
	if(allowLower == null) {
		allowLower = true;
	}
	var cur = cd._getCdObject(8388608);
	if(!(cur != null && frames < cur.frames && !allowLower)) {
		if(frames <= 0) {
			if(cur != null) {
				cd.fastCheck.remove(cur.k);
				var _this = cd.cds;
				var _g = 0;
				var _g1 = _this.nalloc;
				while(_g < _g1) {
					var i = _g++;
					if(_this.pool[i] == cur) {
						if(i >= 0 && i < _this.nalloc) {
							if(i == _this.nalloc - 1) {
								_this.nalloc--;
							} else {
								var tmp = _this.pool[i];
								_this.pool[i] = _this.pool[_this.nalloc - 1];
								_this.pool[_this.nalloc - 1] = tmp;
								_this.nalloc--;
							}
						}
						break;
					}
				}
			}
		} else {
			cd.fastCheck.h[8388608] = true;
			if(cur != null) {
				cur.frames = frames;
				cur.initial = frames;
			} else {
				var _this = cd.cds;
				if(_this.nalloc >= _this.size) {
					_this.garbageCollectNow();
					if(_this.nalloc >= _this.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this.size + ")");
					}
				}
				var e = _this.pool[_this.nalloc++];
				e.recycle();
				var cd1 = e;
				cd1.k = 8388608;
				cd1.frames = frames;
				cd1.initial = frames;
			}
		}
		if(onComplete != null) {
			if(frames <= 0) {
				onComplete();
			} else {
				var cd1 = cd._getCdObject(8388608);
				if(cd1 == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 8388608 + "): cooldown " + 8388608 + " isn't running");
				}
				cd1.onCompleteOnce = onComplete;
			}
		}
	}
	var frames = 10 * cd.baseFps;
	var allowLower = true;
	var onComplete = null;
	if(allowLower == null) {
		allowLower = true;
	}
	var cur = cd._getCdObject(12582912);
	if(!(cur != null && frames < cur.frames && !allowLower)) {
		if(frames <= 0) {
			if(cur != null) {
				cd.fastCheck.remove(cur.k);
				var _this = cd.cds;
				var _g = 0;
				var _g1 = _this.nalloc;
				while(_g < _g1) {
					var i = _g++;
					if(_this.pool[i] == cur) {
						if(i >= 0 && i < _this.nalloc) {
							if(i == _this.nalloc - 1) {
								_this.nalloc--;
							} else {
								var tmp = _this.pool[i];
								_this.pool[i] = _this.pool[_this.nalloc - 1];
								_this.pool[_this.nalloc - 1] = tmp;
								_this.nalloc--;
							}
						}
						break;
					}
				}
			}
		} else {
			cd.fastCheck.h[12582912] = true;
			if(cur != null) {
				cur.frames = frames;
				cur.initial = frames;
			} else {
				var _this = cd.cds;
				if(_this.nalloc >= _this.size) {
					_this.garbageCollectNow();
					if(_this.nalloc >= _this.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this.size + ")");
					}
				}
				var e = _this.pool[_this.nalloc++];
				e.recycle();
				var cd1 = e;
				cd1.k = 12582912;
				cd1.frames = frames;
				cd1.initial = frames;
			}
		}
		if(onComplete != null) {
			if(frames <= 0) {
				onComplete();
			} else {
				var cd1 = cd._getCdObject(12582912);
				if(cd1 == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 12582912 + "): cooldown " + 12582912 + " isn't running");
				}
				cd1.onCompleteOnce = onComplete;
			}
		}
	}
	cd.cds.nalloc = 0;
	cd.fastCheck = new haxe_ds_IntMap();
	if(cd.cds.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.cds.allocated == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 536},"[JS|dn.Cooldown] cd.cds.allocated == 0","These 2 expressions should be EQUAL",[cd.cds.nalloc + " != " + 0]);
	}
	var frames = 0.5 * cd.baseFps;
	var allowLower = true;
	var onComplete = null;
	if(allowLower == null) {
		allowLower = true;
	}
	var cur = cd._getCdObject(8388608);
	if(!(cur != null && frames < cur.frames && !allowLower)) {
		if(frames <= 0) {
			if(cur != null) {
				cd.fastCheck.remove(cur.k);
				var _this = cd.cds;
				var _g = 0;
				var _g1 = _this.nalloc;
				while(_g < _g1) {
					var i = _g++;
					if(_this.pool[i] == cur) {
						if(i >= 0 && i < _this.nalloc) {
							if(i == _this.nalloc - 1) {
								_this.nalloc--;
							} else {
								var tmp = _this.pool[i];
								_this.pool[i] = _this.pool[_this.nalloc - 1];
								_this.pool[_this.nalloc - 1] = tmp;
								_this.nalloc--;
							}
						}
						break;
					}
				}
			}
		} else {
			cd.fastCheck.h[8388608] = true;
			if(cur != null) {
				cur.frames = frames;
				cur.initial = frames;
			} else {
				var _this = cd.cds;
				if(_this.nalloc >= _this.size) {
					_this.garbageCollectNow();
					if(_this.nalloc >= _this.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this.size + ")");
					}
				}
				var e = _this.pool[_this.nalloc++];
				e.recycle();
				var cd1 = e;
				cd1.k = 8388608;
				cd1.frames = frames;
				cd1.initial = frames;
			}
		}
		if(onComplete != null) {
			if(frames <= 0) {
				onComplete();
			} else {
				var cd1 = cd._getCdObject(8388608);
				if(cd1 == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 8388608 + "): cooldown " + 8388608 + " isn't running");
				}
				cd1.onCompleteOnce = onComplete;
			}
		}
	}
	var frames = 0.75 * cd.baseFps;
	var allowLower = true;
	var onComplete = null;
	if(allowLower == null) {
		allowLower = true;
	}
	var cur = cd._getCdObject(12582912);
	if(!(cur != null && frames < cur.frames && !allowLower)) {
		if(frames <= 0) {
			if(cur != null) {
				cd.fastCheck.remove(cur.k);
				var _this = cd.cds;
				var _g = 0;
				var _g1 = _this.nalloc;
				while(_g < _g1) {
					var i = _g++;
					if(_this.pool[i] == cur) {
						if(i >= 0 && i < _this.nalloc) {
							if(i == _this.nalloc - 1) {
								_this.nalloc--;
							} else {
								var tmp = _this.pool[i];
								_this.pool[i] = _this.pool[_this.nalloc - 1];
								_this.pool[_this.nalloc - 1] = tmp;
								_this.nalloc--;
							}
						}
						break;
					}
				}
			}
		} else {
			cd.fastCheck.h[12582912] = true;
			if(cur != null) {
				cur.frames = frames;
				cur.initial = frames;
			} else {
				var _this = cd.cds;
				if(_this.nalloc >= _this.size) {
					_this.garbageCollectNow();
					if(_this.nalloc >= _this.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this.size + ")");
					}
				}
				var e = _this.pool[_this.nalloc++];
				e.recycle();
				var cd1 = e;
				cd1.k = 12582912;
				cd1.frames = frames;
				cd1.initial = frames;
			}
		}
		if(onComplete != null) {
			if(frames <= 0) {
				onComplete();
			} else {
				var cd1 = cd._getCdObject(12582912);
				if(cd1 == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 12582912 + "): cooldown " + 12582912 + " isn't running");
				}
				cd1.onCompleteOnce = onComplete;
			}
		}
	}
	var frames = cd.baseFps;
	var allowLower = true;
	var onComplete = null;
	if(allowLower == null) {
		allowLower = true;
	}
	var cur = cd._getCdObject(16777216);
	if(!(cur != null && frames < cur.frames && !allowLower)) {
		if(frames <= 0) {
			if(cur != null) {
				cd.fastCheck.remove(cur.k);
				var _this = cd.cds;
				var _g = 0;
				var _g1 = _this.nalloc;
				while(_g < _g1) {
					var i = _g++;
					if(_this.pool[i] == cur) {
						if(i >= 0 && i < _this.nalloc) {
							if(i == _this.nalloc - 1) {
								_this.nalloc--;
							} else {
								var tmp = _this.pool[i];
								_this.pool[i] = _this.pool[_this.nalloc - 1];
								_this.pool[_this.nalloc - 1] = tmp;
								_this.nalloc--;
							}
						}
						break;
					}
				}
			}
		} else {
			cd.fastCheck.h[16777216] = true;
			if(cur != null) {
				cur.frames = frames;
				cur.initial = frames;
			} else {
				var _this = cd.cds;
				if(_this.nalloc >= _this.size) {
					_this.garbageCollectNow();
					if(_this.nalloc >= _this.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this.size + ")");
					}
				}
				var e = _this.pool[_this.nalloc++];
				e.recycle();
				var cd1 = e;
				cd1.k = 16777216;
				cd1.frames = frames;
				cd1.initial = frames;
			}
		}
		if(onComplete != null) {
			if(frames <= 0) {
				onComplete();
			} else {
				var cd1 = cd._getCdObject(16777216);
				if(cd1 == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + 16777216 + "): cooldown " + 16777216 + " isn't running");
				}
				cd1.onCompleteOnce = onComplete;
			}
		}
	}
	if(cd.fastCheck.h.hasOwnProperty(8388608) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"a\") == true" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(8388608)) + " != " + "true";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 542},"[JS|dn.Cooldown] cd.has(\"a\") == true","These 2 expressions should be EQUAL",[tmp]);
	}
	if(cd.fastCheck.h.hasOwnProperty(12582912) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"b\") == true" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(12582912)) + " != " + "true";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 543},"[JS|dn.Cooldown] cd.has(\"b\") == true","These 2 expressions should be EQUAL",[tmp]);
	}
	if(cd.fastCheck.h.hasOwnProperty(16777216) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"c\") == true" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(16777216)) + " != " + "true";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 544},"[JS|dn.Cooldown] cd.has(\"c\") == true","These 2 expressions should be EQUAL",[tmp]);
	}
	_advanceTimeS(0.25);
	if(cd.fastCheck.h.hasOwnProperty(8388608) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"a\") == true" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(8388608)) + " != " + "true";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 547},"[JS|dn.Cooldown] cd.has(\"a\") == true","These 2 expressions should be EQUAL",[tmp]);
	}
	if(cd.fastCheck.h.hasOwnProperty(12582912) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"b\") == true" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(12582912)) + " != " + "true";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 548},"[JS|dn.Cooldown] cd.has(\"b\") == true","These 2 expressions should be EQUAL",[tmp]);
	}
	if(cd.fastCheck.h.hasOwnProperty(16777216) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"c\") == true" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(16777216)) + " != " + "true";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 549},"[JS|dn.Cooldown] cd.has(\"c\") == true","These 2 expressions should be EQUAL",[tmp]);
	}
	_advanceTimeS(0.25);
	if(cd.fastCheck.h.hasOwnProperty(8388608) == false) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"a\") == false" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(8388608)) + " != " + "false";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 552},"[JS|dn.Cooldown] cd.has(\"a\") == false","These 2 expressions should be EQUAL",[tmp]);
	}
	if(cd.fastCheck.h.hasOwnProperty(12582912) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"b\") == true" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(12582912)) + " != " + "true";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 553},"[JS|dn.Cooldown] cd.has(\"b\") == true","These 2 expressions should be EQUAL",[tmp]);
	}
	if(cd.fastCheck.h.hasOwnProperty(16777216) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"c\") == true" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(16777216)) + " != " + "true";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 554},"[JS|dn.Cooldown] cd.has(\"c\") == true","These 2 expressions should be EQUAL",[tmp]);
	}
	_advanceTimeS(0.25);
	if(cd.fastCheck.h.hasOwnProperty(12582912) == false) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"b\") == false" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(12582912)) + " != " + "false";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 557},"[JS|dn.Cooldown] cd.has(\"b\") == false","These 2 expressions should be EQUAL",[tmp]);
	}
	if(cd.fastCheck.h.hasOwnProperty(16777216) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"c\") == true" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(16777216)) + " != " + "true";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 558},"[JS|dn.Cooldown] cd.has(\"c\") == true","These 2 expressions should be EQUAL",[tmp]);
	}
	_advanceTimeS(0.25);
	if(cd.fastCheck.h.hasOwnProperty(16777216) == false) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.has(\"c\") == false" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(cd.fastCheck.h.hasOwnProperty(16777216)) + " != " + "false";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 561},"[JS|dn.Cooldown] cd.has(\"c\") == false","These 2 expressions should be EQUAL",[tmp]);
	}
	if(cd.cds.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Cooldown] cd.cds.allocated == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Cooldown.hx", line : 562},"[JS|dn.Cooldown] cd.cds.allocated == 0","These 2 expressions should be EQUAL",[cd.cds.nalloc + " != " + 0]);
	}
};
dn_Cooldown.prototype = {
	msToFrames: function(ms) {
		return ms * this.baseFps / 1000.;
	}
	,secToFrames: function(s) {
		return s * this.baseFps;
	}
	,changeMaxSizeAndReset: function(newMaxSize) {
		this.cds = new dn_struct_RecyclablePool(newMaxSize,function() {
			return new dn__$Cooldown_CdInst();
		});
		this.cds.nalloc = 0;
		this.fastCheck = new haxe_ds_IntMap();
	}
	,dispose: function() {
		this.cds.dispose(null);
		this.cds = null;
		this.fastCheck = null;
	}
	,destroy: function() {
		this.dispose();
	}
	,toString: function() {
		return "Cooldowns(" + this.cds.nalloc + "/" + this.cds.size + ")";
	}
	,count: function() {
		return this.cds.nalloc;
	}
	,reset: function() {
		this.cds.nalloc = 0;
		this.fastCheck = new haxe_ds_IntMap();
	}
	,_getF: function(k) {
		var cd = this._getCdObject(k);
		if(cd == null) {
			return 0;
		} else {
			return cd.frames;
		}
	}
	,_getInitialValueF: function(k) {
		var cd = this._getCdObject(k);
		if(cd == null) {
			return 0;
		} else {
			return cd.initial;
		}
	}
	,_getRatio: function(k) {
		var cd = this._getCdObject(k);
		var max = cd == null ? 0 : cd.initial;
		if(max <= 0) {
			return 0;
		} else {
			var cd = this._getCdObject(k);
			return (cd == null ? 0 : cd.frames) / max;
		}
	}
	,_onComplete: function(k,onceCB) {
		var cd = this._getCdObject(k);
		if(cd == null) {
			throw haxe_Exception.thrown("cannot bind onComplete(" + k + "): cooldown " + k + " isn't running");
		}
		cd.onCompleteOnce = onceCB;
	}
	,_setF: function(k,frames,allowLower,onComplete) {
		if(allowLower == null) {
			allowLower = true;
		}
		var cur = this._getCdObject(k);
		if(cur != null && frames < cur.frames && !allowLower) {
			return;
		}
		if(frames <= 0) {
			if(cur != null) {
				this.fastCheck.remove(cur.k);
				var _this = this.cds;
				var _g = 0;
				var _g1 = _this.nalloc;
				while(_g < _g1) {
					var i = _g++;
					if(_this.pool[i] == cur) {
						if(i >= 0 && i < _this.nalloc) {
							if(i == _this.nalloc - 1) {
								_this.nalloc--;
							} else {
								var tmp = _this.pool[i];
								_this.pool[i] = _this.pool[_this.nalloc - 1];
								_this.pool[_this.nalloc - 1] = tmp;
								_this.nalloc--;
							}
						}
						break;
					}
				}
			}
		} else {
			this.fastCheck.h[k] = true;
			if(cur != null) {
				cur.frames = frames;
				cur.initial = frames;
			} else {
				var _this = this.cds;
				if(_this.nalloc >= _this.size) {
					_this.garbageCollectNow();
					if(_this.nalloc >= _this.size) {
						throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this.size + ")");
					}
				}
				var e = _this.pool[_this.nalloc++];
				e.recycle();
				var cd = e;
				cd.k = k;
				cd.frames = frames;
				cd.initial = frames;
			}
		}
		if(onComplete != null) {
			if(frames <= 0) {
				onComplete();
			} else {
				var cd = this._getCdObject(k);
				if(cd == null) {
					throw haxe_Exception.thrown("cannot bind onComplete(" + k + "): cooldown " + k + " isn't running");
				}
				cd.onCompleteOnce = onComplete;
			}
		}
	}
	,_unset: function(k) {
		var _g = 0;
		var _g1 = this.cds.nalloc;
		while(_g < _g1) {
			var i = _g++;
			var _this = this.cds;
			if((i < 0 || i >= _this.nalloc ? null : _this.pool[i]).k == k) {
				var _this1 = this.cds;
				this.fastCheck.remove((i < 0 || i >= _this1.nalloc ? null : _this1.pool[i]).k);
				var _this2 = this.cds;
				if(i >= 0 && i < _this2.nalloc) {
					if(i == _this2.nalloc - 1) {
						_this2.nalloc--;
					} else {
						var tmp = _this2.pool[i];
						_this2.pool[i] = _this2.pool[_this2.nalloc - 1];
						_this2.pool[_this2.nalloc - 1] = tmp;
						_this2.nalloc--;
					}
				}
				break;
			}
		}
	}
	,_has: function(k) {
		return this.fastCheck.h.hasOwnProperty(k);
	}
	,_hasSetF: function(k,frames) {
		if(this.fastCheck.h.hasOwnProperty(k)) {
			return true;
		} else {
			var onComplete = null;
			var cur = this._getCdObject(k);
			if(!(cur != null && frames < cur.frames && false)) {
				if(frames <= 0) {
					if(cur != null) {
						this.fastCheck.remove(cur.k);
						var _this = this.cds;
						var _g = 0;
						var _g1 = _this.nalloc;
						while(_g < _g1) {
							var i = _g++;
							if(_this.pool[i] == cur) {
								if(i >= 0 && i < _this.nalloc) {
									if(i == _this.nalloc - 1) {
										_this.nalloc--;
									} else {
										var tmp = _this.pool[i];
										_this.pool[i] = _this.pool[_this.nalloc - 1];
										_this.pool[_this.nalloc - 1] = tmp;
										_this.nalloc--;
									}
								}
								break;
							}
						}
					}
				} else {
					this.fastCheck.h[k] = true;
					if(cur != null) {
						cur.frames = frames;
						cur.initial = frames;
					} else {
						var _this = this.cds;
						if(_this.nalloc >= _this.size) {
							_this.garbageCollectNow();
							if(_this.nalloc >= _this.size) {
								throw haxe_Exception.thrown("RecyclablePool limit reached (" + _this.size + ")");
							}
						}
						var e = _this.pool[_this.nalloc++];
						e.recycle();
						var cd = e;
						cd.k = k;
						cd.frames = frames;
						cd.initial = frames;
					}
				}
				if(onComplete != null) {
					if(frames <= 0) {
						onComplete();
					} else {
						var cd = this._getCdObject(k);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + k + "): cooldown " + k + " isn't running");
						}
						cd.onCompleteOnce = onComplete;
					}
				}
			}
			return false;
		}
	}
	,_getCdObject: function(k) {
		var _g_rpool = this.cds;
		var _g_i = 0;
		while(_g_i < _g_rpool.nalloc) {
			var cd = _g_rpool.pool[_g_i++];
			if(cd.k == k) {
				return cd;
			}
		}
		return null;
	}
	,unsetCdInst: function(cd) {
		this.fastCheck.remove(cd.k);
		var _this = this.cds;
		var _g = 0;
		var _g1 = _this.nalloc;
		while(_g < _g1) {
			var i = _g++;
			if(_this.pool[i] == cd) {
				if(i >= 0 && i < _this.nalloc) {
					if(i == _this.nalloc - 1) {
						_this.nalloc--;
					} else {
						var tmp = _this.pool[i];
						_this.pool[i] = _this.pool[_this.nalloc - 1];
						_this.pool[_this.nalloc - 1] = tmp;
						_this.nalloc--;
					}
				}
				break;
			}
		}
	}
	,unsetIndex: function(idx) {
		var _this = this.cds;
		this.fastCheck.remove((idx < 0 || idx >= _this.nalloc ? null : _this.pool[idx]).k);
		var _this = this.cds;
		if(idx >= 0 && idx < _this.nalloc) {
			if(idx == _this.nalloc - 1) {
				_this.nalloc--;
			} else {
				var tmp = _this.pool[idx];
				_this.pool[idx] = _this.pool[_this.nalloc - 1];
				_this.pool[_this.nalloc - 1] = tmp;
				_this.nalloc--;
			}
		}
	}
	,debug: function() {
		var _g = [];
		var _g_rpool = this.cds;
		var _g_i = 0;
		while(_g_i < _g_rpool.nalloc) {
			var cd = _g_rpool.pool[_g_i++];
			_g.push(cd.toString());
		}
		return _g.join("\n");
	}
	,update: function(tmod) {
		var i = 0;
		var cd;
		var cb = null;
		while(i < this.cds.nalloc) {
			var _this = this.cds;
			cd = i < 0 || i >= _this.nalloc ? null : _this.pool[i];
			cd.frames -= tmod;
			if(cd.frames <= 0) {
				cb = cd.onCompleteOnce;
				var _this1 = this.cds;
				this.fastCheck.remove((i < 0 || i >= _this1.nalloc ? null : _this1.pool[i]).k);
				var _this2 = this.cds;
				if(i >= 0 && i < _this2.nalloc) {
					if(i == _this2.nalloc - 1) {
						_this2.nalloc--;
					} else {
						var tmp = _this2.pool[i];
						_this2.pool[i] = _this2.pool[_this2.nalloc - 1];
						_this2.pool[_this2.nalloc - 1] = tmp;
						_this2.nalloc--;
					}
				}
				if(cb != null) {
					cb();
				}
			} else {
				++i;
			}
		}
	}
	,__class__: dn_Cooldown
};
var dn_struct_Recyclable = function() { };
$hxClasses["dn.struct.Recyclable"] = dn_struct_Recyclable;
dn_struct_Recyclable.__name__ = "dn.struct.Recyclable";
dn_struct_Recyclable.__isInterface__ = true;
dn_struct_Recyclable.prototype = {
	__class__: dn_struct_Recyclable
};
var dn__$Cooldown_CdInst = function() {
};
$hxClasses["dn._Cooldown.CdInst"] = dn__$Cooldown_CdInst;
dn__$Cooldown_CdInst.__name__ = "dn._Cooldown.CdInst";
dn__$Cooldown_CdInst.__interfaces__ = [dn_struct_Recyclable];
dn__$Cooldown_CdInst.prototype = {
	set: function(key,frames) {
		this.k = key;
		this.frames = frames;
		this.initial = frames;
	}
	,recycle: function() {
		this.onCompleteOnce = null;
	}
	,getRemainingRatio: function() {
		if(this.initial == 0) {
			return 0;
		} else {
			return this.frames / this.initial;
		}
	}
	,getProgressRatio: function() {
		if(this.initial == 0) {
			return 0;
		} else {
			return 1 - (this.initial == 0 ? 0 : this.frames / this.initial);
		}
	}
	,toString: function() {
		var x = (this.initial == 0 ? 0 : 1 - (this.initial == 0 ? 0 : this.frames / this.initial)) * 100;
		return dn_Cooldown.INDEXES[this.k >>> 22] + "|" + (this.k & 4194303) + (": " + this.frames + "/" + this.initial + " (" + ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) + "%)");
	}
	,__class__: dn__$Cooldown_CdInst
};
var dn__$Delayer_Task = function(id,t,cb) {
	this.t = t;
	this.cb = cb;
	this.id = id;
};
$hxClasses["dn._Delayer.Task"] = dn__$Delayer_Task;
dn__$Delayer_Task.__name__ = "dn._Delayer.Task";
dn__$Delayer_Task.prototype = {
	toString: function() {
		return this.t + " " + Std.string(this.cb);
	}
	,__class__: dn__$Delayer_Task
};
var dn_Delayer = function(fps) {
	this.fps = fps;
	this.delays = [];
};
$hxClasses["dn.Delayer"] = dn_Delayer;
dn_Delayer.__name__ = "dn.Delayer";
dn_Delayer.__test = function() {
	var fps = 30;
	var delayer = new dn_Delayer(fps);
	var done = false;
	delayer.addS("test",function() {
		done = true;
	},2);
	if(delayer.hasId("test") == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Delayer] delayer.hasId(\"test\")" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Delayer.hx", line : 125},"[JS|dn.Delayer] delayer.hasId(\"test\")","This expression should be TRUE");
	}
	if(done != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Delayer] done" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Delayer.hx", line : 126},"[JS|dn.Delayer] done","This expression should be FALSE");
	}
	var _g = 0;
	var _g1 = fps;
	while(_g < _g1) {
		var i = _g++;
		delayer.update(1);
	}
	if(done != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Delayer] done" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Delayer.hx", line : 129},"[JS|dn.Delayer] done","This expression should be FALSE");
	}
	var _g = 0;
	var _g1 = fps;
	while(_g < _g1) {
		var i = _g++;
		delayer.update(1);
	}
	if(delayer.hasId("test") != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Delayer] delayer.hasId(\"test\")" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Delayer.hx", line : 132},"[JS|dn.Delayer] delayer.hasId(\"test\")","This expression should be FALSE");
	}
	if(done == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Delayer] done" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Delayer.hx", line : 133},"[JS|dn.Delayer] done","This expression should be TRUE");
	}
	delayer.addF("test",function() {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Delayer.hx", line : 135},"[JS|dn.Delayer] true","This expression should be FALSE");
	},1);
	delayer.cancelById("test");
	delayer.update(1);
};
dn_Delayer.prototype = {
	toString: function() {
		var _this = this.delays;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].t;
		}
		return "Delayer(timers=" + result.join(",") + ")";
	}
	,isDestroyed: function() {
		return this.delays == null;
	}
	,destroy: function() {
		this.delays = null;
	}
	,skip: function() {
		var limit = this.delays.length + 100;
		while(this.delays.length > 0 && limit-- > 0) {
			var d = this.delays.shift();
			d.cb();
			d.cb = null;
		}
	}
	,cancelEverything: function() {
		this.delays = [];
	}
	,hasId: function(id) {
		var _g = 0;
		var _g1 = this.delays;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.id == id) {
				return true;
			}
		}
		return false;
	}
	,cancelById: function(id) {
		var i = 0;
		while(i < this.delays.length) if(this.delays[i].id == id) {
			this.delays.splice(i,1);
		} else {
			++i;
		}
	}
	,runImmediately: function(id) {
		var i = 0;
		while(i < this.delays.length) if(this.delays[i].id == id) {
			var cb = this.delays[i].cb;
			this.delays.splice(i,1);
			cb();
		} else {
			++i;
		}
	}
	,cmp: function(a,b) {
		if(a.t < b.t) {
			return -1;
		} else if(a.t > b.t) {
			return 1;
		} else {
			return 0;
		}
	}
	,addMs: function(id,cb,ms) {
		this.delays.push(new dn__$Delayer_Task(id,ms / 1000 * this.fps,cb));
		haxe_ds_ArraySort.sort(this.delays,$bind(this,this.cmp));
	}
	,addS: function(id,cb,sec) {
		this.delays.push(new dn__$Delayer_Task(id,sec * this.fps,cb));
		haxe_ds_ArraySort.sort(this.delays,$bind(this,this.cmp));
	}
	,addF: function(id,cb,frames) {
		this.delays.push(new dn__$Delayer_Task(id,frames,cb));
		haxe_ds_ArraySort.sort(this.delays,$bind(this,this.cmp));
	}
	,hasAny: function() {
		if(this.delays != null) {
			return this.delays.length > 0;
		} else {
			return false;
		}
	}
	,update: function(dt) {
		var i = 0;
		while(i < this.delays.length) {
			this.delays[i].t -= dt;
			if(this.delays[i].t <= 0) {
				this.delays[i].cb();
				if(this.delays == null || this.delays[i] == null) {
					break;
				}
				this.delays[i].cb = null;
				this.delays.shift();
			} else {
				++i;
			}
		}
	}
	,__class__: dn_Delayer
};
var dn_PathSlashMode = $hxEnums["dn.PathSlashMode"] = { __ename__:"dn.PathSlashMode",__constructs__:null
	,Preserve: {_hx_name:"Preserve",_hx_index:0,__enum__:"dn.PathSlashMode",toString:$estr}
	,OnlyBackslashes: {_hx_name:"OnlyBackslashes",_hx_index:1,__enum__:"dn.PathSlashMode",toString:$estr}
	,OnlySlashes: {_hx_name:"OnlySlashes",_hx_index:2,__enum__:"dn.PathSlashMode",toString:$estr}
};
dn_PathSlashMode.__constructs__ = [dn_PathSlashMode.Preserve,dn_PathSlashMode.OnlyBackslashes,dn_PathSlashMode.OnlySlashes];
dn_PathSlashMode.__empty_constructs__ = [dn_PathSlashMode.Preserve,dn_PathSlashMode.OnlyBackslashes,dn_PathSlashMode.OnlySlashes];
var dn_FilePath = function() {
	this._useWinNetDriveUriFormat = false;
	this.isWindowsNetworkDrive = false;
	this.init();
};
$hxClasses["dn.FilePath"] = dn_FilePath;
dn_FilePath.__name__ = "dn.FilePath";
dn_FilePath.convertToSlashes = function(path) {
	return StringTools.replace(path,"\\","/");
};
dn_FilePath.convertToBackslashes = function(path) {
	return StringTools.replace(path,"/","\\");
};
dn_FilePath.sameDriveLetter = function(pathA,pathB) {
	if(pathA == null || pathB == null) {
		return true;
	} else {
		var p = new dn_FilePath();
		p.parse(pathA,false);
		var tmp = p.getDriveLetter();
		var p = new dn_FilePath();
		p.parse(pathB,false);
		return tmp == p.getDriveLetter();
	}
};
dn_FilePath.cleanUpFileName = function(fileName,replaceWith) {
	if(replaceWith == null) {
		replaceWith = "_";
	}
	if(fileName == null) {
		return "";
	} else {
		var _this_r = new RegExp("[*{}/\\\\<>?|:]","g".split("u").join(""));
		return fileName.replace(_this_r,replaceWith);
	}
};
dn_FilePath.fromFile = function(path) {
	var p = new dn_FilePath();
	p.parse(path,true);
	return p;
};
dn_FilePath.fromDir = function(path) {
	var p = new dn_FilePath();
	p.parse(path,false);
	return p;
};
dn_FilePath.cleanUp = function(path,isFile) {
	var p;
	if(isFile) {
		var p1 = new dn_FilePath();
		p1.parse(path,true);
		p = p1;
	} else {
		var p1 = new dn_FilePath();
		p1.parse(path,false);
		p = p1;
	}
	return (p.isWindowsNetworkDrive && !p._useWinNetDriveUriFormat ? p.backslashes ? "\\" : "/" : p.uriScheme != null ? p.uriAuthority == null ? "" + p.uriScheme + ":/" : "" + p.uriScheme + "://" + p.uriAuthority + "/" : "") + (p.directory == null ? "" : p.fileName == null && p.extension == null || p.directory == (p.backslashes ? "\\" : "/") ? p.directory : p.directory == null ? null : p.directory == (p.backslashes ? "\\" : "/") ? p.directory : p.directory + (p.backslashes ? "\\" : "/")) + ((p.fileName == null && p.extension == null ? null : (p.fileName == null ? "" : p.fileName) + (p.extension == null ? "" : "." + p.extension)) == null ? "" : p.fileName == null && p.extension == null ? null : (p.fileName == null ? "" : p.fileName) + (p.extension == null ? "" : "." + p.extension));
};
dn_FilePath.extractFileWithExt = function(path) {
	var p = new dn_FilePath();
	p.parse(path,true);
	var _this = p;
	if(_this.fileName == null && _this.extension == null) {
		return null;
	} else {
		return (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension);
	}
};
dn_FilePath.extractFileName = function(path) {
	var p = new dn_FilePath();
	p.parse(path,true);
	return p.fileName;
};
dn_FilePath.extractExtension = function(path,lowercase) {
	if(lowercase == null) {
		lowercase = false;
	}
	var p = new dn_FilePath();
	p.parse(path,true);
	var e = p.extension;
	if(lowercase && e != null) {
		return e.toLowerCase();
	} else {
		return e;
	}
};
dn_FilePath.extractDirectoryWithoutSlash = function(path,containsFileName) {
	if(containsFileName) {
		var p = new dn_FilePath();
		p.parse(path,true);
		return p.directory;
	} else {
		var p = new dn_FilePath();
		p.parse(path,false);
		return p.directory;
	}
};
dn_FilePath.extractDirectoryWithSlash = function(path,containsFileName) {
	if(containsFileName) {
		var p = new dn_FilePath();
		p.parse(path,true);
		var _this = p;
		if(_this.directory == null) {
			return null;
		} else if(_this.directory == (_this.backslashes ? "\\" : "/")) {
			return _this.directory;
		} else {
			return _this.directory + (_this.backslashes ? "\\" : "/");
		}
	} else {
		var p = new dn_FilePath();
		p.parse(path,false);
		var _this = p;
		if(_this.directory == null) {
			return null;
		} else if(_this.directory == (_this.backslashes ? "\\" : "/")) {
			return _this.directory;
		} else {
			return _this.directory + (_this.backslashes ? "\\" : "/");
		}
	}
};
dn_FilePath.fullPath = function(v) {
	var p = new dn_FilePath();
	p.parse(v,true);
	var _this = p;
	return (_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension));
};
dn_FilePath.fileAndExt = function(v) {
	var p = new dn_FilePath();
	p.parse(v,true);
	var _this = p;
	if(_this.fileName == null && _this.extension == null) {
		return null;
	} else {
		return (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension);
	}
};
dn_FilePath.__test = function() {
	if(new dn_FilePath() != null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] new FilePath()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 791},"[JS|dn.FilePath] new FilePath()","This expression should NOT be NULL");
	}
	var p = new dn_FilePath();
	p.parse("/user/.htaccess",true);
	var _this = p;
	var p = new dn_FilePath();
	p.backslashes = _this.backslashes;
	p.directory = _this.directory;
	p.set_fileName(_this.fileName);
	p.set_extension(_this.extension);
	var _this = p;
	var tmp = _this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "";
	var tmp1 = _this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/");
	var tmp2 = (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension);
	var p = new dn_FilePath();
	p.parse("/user/.htaccess",true);
	var _this = p;
	var p = new dn_FilePath();
	p.backslashes = _this.backslashes;
	p.directory = _this.directory;
	p.set_fileName(_this.fileName);
	p.set_extension(_this.extension);
	var _this = p;
	if(tmp + tmp1 + tmp2 == (_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... ...er/.htaccess\").clone().full == FilePath.fromFile(\"/user/.htaccess\").clone().full" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 792},"[JS|dn.FilePath] FilePath.f... ...er/.htaccess\").clone().full == FilePath.fromFile(\"/user/.htaccess\").clone().full","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/foo",false);
	if(p.directory == "/user/foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/user/foo\").directory == \"/user/foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/user/foo",false);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 795},"[JS|dn.FilePath] FilePath.fromDir(\"/user/foo\").directory == \"/user/foo\"","These 2 expressions should be EQUAL",[p.directory + " != " + "/user/foo"]);
	}
	var p = new dn_FilePath();
	p.parse("/user/foo.png",false);
	if(p.directory == "/user/foo.png") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/user/foo.png\").directory == \"/user/foo.png\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/user/foo.png",false);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 796},"[JS|dn.FilePath] FilePath.fromDir(\"/user/foo.png\").directory == \"/user/foo.png\"","These 2 expressions should be EQUAL",[p.directory + " != " + "/user/foo.png"]);
	}
	var p = new dn_FilePath();
	p.parse("/",false);
	if(p.directory == "/") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/\").directory == \"/\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/",false);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 797},"[JS|dn.FilePath] FilePath.fromDir(\"/\").directory == \"/\"","These 2 expressions should be EQUAL",[p.directory + " != " + "/"]);
	}
	var p = new dn_FilePath();
	p.parse("/",false);
	var _this = p;
	if((_this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) == "/") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/\").directoryWithSlash == \"/\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/",false);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 798},"[JS|dn.FilePath] FilePath.fromDir(\"/\").directoryWithSlash == \"/\"","These 2 expressions should be EQUAL",[(_this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + " != " + "/"]);
	}
	var p = new dn_FilePath();
	p.parse("",false);
	if(p.directory == null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"\").directory == null" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("",false);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 799},"[JS|dn.FilePath] FilePath.fromDir(\"\").directory == null","These 2 expressions should be EQUAL",[p.directory + " != " + Std.string(null)]);
	}
	var p = new dn_FilePath();
	p.parse("",false);
	var _this = p;
	if((_this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) == null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"\").directoryWithSlash == null" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("",false);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 800},"[JS|dn.FilePath] FilePath.fromDir(\"\").directoryWithSlash == null","These 2 expressions should be EQUAL",[(_this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + " != " + Std.string(null)]);
	}
	var p = new dn_FilePath();
	p.parse("/user",false);
	var _this = p;
	if((_this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) == "/user/") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/user\").directoryWithSlash == \"/user/\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/user",false);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 801},"[JS|dn.FilePath] FilePath.fromDir(\"/user\").directoryWithSlash == \"/user/\"","These 2 expressions should be EQUAL",[(_this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + " != " + "/user/"]);
	}
	var p = new dn_FilePath();
	p.parse("",false);
	if(p.fileName == null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"\").fileName == null" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("",false);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 802},"[JS|dn.FilePath] FilePath.fromDir(\"\").fileName == null","These 2 expressions should be EQUAL",[p.fileName + " != " + Std.string(null)]);
	}
	var p = new dn_FilePath();
	p.parse("",false);
	if(p.extension == null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"\").extension == null" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("",false);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 803},"[JS|dn.FilePath] FilePath.fromDir(\"\").extension == null","These 2 expressions should be EQUAL",[p.extension + " != " + Std.string(null)]);
	}
	var p = new dn_FilePath();
	p.parse("",false);
	var _this = p;
	if(((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension))).length == 0 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"\").isEmpty()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 804},"[JS|dn.FilePath] FilePath.fromDir(\"\").isEmpty()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse(null,false);
	var _this = p;
	if(((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension))).length == 0 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(null).isEmpty()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 805},"[JS|dn.FilePath] FilePath.fromDir(null).isEmpty()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse(null,true);
	var _this = p;
	if(((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension))).length == 0 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(null).isEmpty()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 806},"[JS|dn.FilePath] FilePath.fromFile(null).isEmpty()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("user/?/test",false);
	if(p.directory == "user/_/test") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"user/?/test\").directory == \"user/_/test\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("user/?/test",false);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 807},"[JS|dn.FilePath] FilePath.fromDir(\"user/?/test\").directory == \"user/_/test\"","These 2 expressions should be EQUAL",[p.directory + " != " + "user/_/test"]);
	}
	var p = new dn_FilePath();
	p.parse("/user/foo",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "/user/foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/user/foo\").full == \"/user/foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/user/foo",false);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 808},"[JS|dn.FilePath] FilePath.fromDir(\"/user/foo\").full == \"/user/foo\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "/user/foo"]);
	}
	var p = new dn_FilePath();
	p.parse("/user/foo/",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "/user/foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/user/foo/\").full == \"/user/foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/user/foo/",false);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 809},"[JS|dn.FilePath] FilePath.fromDir(\"/user/foo/\").full == \"/user/foo\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "/user/foo"]);
	}
	var p = new dn_FilePath();
	p.parse("user//foo",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "user/foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"user//foo\").full == \"user/foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("user//foo",false);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 810},"[JS|dn.FilePath] FilePath.fromDir(\"user//foo\").full == \"user/foo\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "user/foo"]);
	}
	var p = new dn_FilePath();
	p.parse("..",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "..") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"..\").full == \"..\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("..",false);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 811},"[JS|dn.FilePath] FilePath.fromDir(\"..\").full == \"..\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + ".."]);
	}
	var p = new dn_FilePath();
	p.parse("/..",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "/..") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/..\").full == \"/..\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/..",false);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 812},"[JS|dn.FilePath] FilePath.fromDir(\"/..\").full == \"/..\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "/.."]);
	}
	var p = new dn_FilePath();
	p.parse("a/../..",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "..") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"a/../..\").full == \"..\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("a/../..",false);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 813},"[JS|dn.FilePath] FilePath.fromDir(\"a/../..\").full == \"..\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + ".."]);
	}
	var p = new dn_FilePath();
	p.parse("",false);
	if(p.directory == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.extractDirectoryWithoutSlash(\"\", false) == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 815},"[JS|dn.FilePath] FilePath.extractDirectoryWithoutSlash(\"\", false) == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/",false);
	if(p.directory == "/" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.extractDirectoryWithoutSlash(\"/\", false) == \"/\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 816},"[JS|dn.FilePath] FilePath.extractDirectoryWithoutSlash(\"/\", false) == \"/\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("user/test.png",true);
	if(p.directory == "user" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.extractDirectoryWithoutSlash(\"user/test.png\", true) == \"user\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 817},"[JS|dn.FilePath] FilePath.extractDirectoryWithoutSlash(\"user/test.png\", true) == \"user\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("test.png",true);
	if(p.directory == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.extractDirectoryWithoutSlash(\"test.png\", true) == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 818},"[JS|dn.FilePath] FilePath.extractDirectoryWithoutSlash(\"test.png\", true) == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("",false);
	var _this = p;
	if((_this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.extractDirectoryWithSlash(\"\", false) == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 819},"[JS|dn.FilePath] FilePath.extractDirectoryWithSlash(\"\", false) == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("..",false);
	var _this = p;
	if((_this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) == "../" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.extractDirectoryWithSlash(\"..\", false) == \"../\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 820},"[JS|dn.FilePath] FilePath.extractDirectoryWithSlash(\"..\", false) == \"../\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("user",false);
	var _this = p;
	if((_this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) == "user/" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.extractDirectoryWithSlash(\"user\", false) == \"user/\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 821},"[JS|dn.FilePath] FilePath.extractDirectoryWithSlash(\"user\", false) == \"user/\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("test.txt",true);
	var _this = p.appendDirectory("foo");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "foo/test.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"test.txt\").appendDirectory(\"foo\").full == \"foo/test.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("test.txt",true);
		var _this = p.appendDirectory("foo");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 824},"[JS|dn.FilePath] FilePath.fromFile(\"test.txt\").appendDirectory(\"foo\").full == \"foo/test.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "foo/test.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("hello/test.txt",true);
	var _this = p.appendDirectory("foo");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "hello/foo/test.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"hello/test.txt\").appendDirectory(\"foo\").full == \"hello/foo/test.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("hello/test.txt",true);
		var _this = p.appendDirectory("foo");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 825},"[JS|dn.FilePath] FilePath.fromFile(\"hello/test.txt\").appendDirectory(\"foo\").full == \"hello/foo/test.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "hello/foo/test.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("hello/world/test.txt",true);
	var _this = p.appendDirectory("foo");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "hello/world/foo/test.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... ...hello/world/test.txt\").appendDirectory(\"foo\").full == \"hello/world/foo/test.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("hello/world/test.txt",true);
		var _this = p.appendDirectory("foo");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 826},"[JS|dn.FilePath] FilePath.f... ...hello/world/test.txt\").appendDirectory(\"foo\").full == \"hello/world/foo/test.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "hello/world/foo/test.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("hello/world",false);
	var _this = p.appendDirectory("foo");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "hello/world/foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"hello/world\").appendDirectory(\"foo\").full == \"hello/world/foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("hello/world",false);
		var _this = p.appendDirectory("foo");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 827},"[JS|dn.FilePath] FilePath.fromDir(\"hello/world\").appendDirectory(\"foo\").full == \"hello/world/foo\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "hello/world/foo"]);
	}
	var p = new dn_FilePath();
	p.parse("",false);
	var _this = p.appendDirectory("foo");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"\").appendDirectory(\"foo\").full == \"foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("",false);
		var _this = p.appendDirectory("foo");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 828},"[JS|dn.FilePath] FilePath.fromDir(\"\").appendDirectory(\"foo\").full == \"foo\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "foo"]);
	}
	var p = new dn_FilePath();
	p.parse("hello/world",false);
	var _this = p.appendDirectory(null);
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "hello/world") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"hello/world\").appendDirectory(null).full == \"hello/world\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("hello/world",false);
		var _this = p.appendDirectory(null);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 829},"[JS|dn.FilePath] FilePath.fromDir(\"hello/world\").appendDirectory(null).full == \"hello/world\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "hello/world"]);
	}
	var p = new dn_FilePath();
	p.parse("test.txt",true);
	var _this = p.prependDirectory("foo");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "foo/test.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"test.txt\").prependDirectory(\"foo\").full == \"foo/test.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("test.txt",true);
		var _this = p.prependDirectory("foo");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 831},"[JS|dn.FilePath] FilePath.fromFile(\"test.txt\").prependDirectory(\"foo\").full == \"foo/test.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "foo/test.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("hello/test.txt",true);
	var _this = p.prependDirectory("foo");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "foo/hello/test.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"hello/test.txt\").prependDirectory(\"foo\").full == \"foo/hello/test.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("hello/test.txt",true);
		var _this = p.prependDirectory("foo");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 832},"[JS|dn.FilePath] FilePath.fromFile(\"hello/test.txt\").prependDirectory(\"foo\").full == \"foo/hello/test.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "foo/hello/test.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("hello/world/test.txt",true);
	var _this = p.prependDirectory("foo");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "foo/hello/world/test.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... ...ello/world/test.txt\").prependDirectory(\"foo\").full == \"foo/hello/world/test.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("hello/world/test.txt",true);
		var _this = p.prependDirectory("foo");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 833},"[JS|dn.FilePath] FilePath.f... ...ello/world/test.txt\").prependDirectory(\"foo\").full == \"foo/hello/world/test.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "foo/hello/world/test.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("hello/world",false);
	var _this = p.prependDirectory("foo");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "foo/hello/world") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"hello/world\").prependDirectory(\"foo\").full == \"foo/hello/world\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("hello/world",false);
		var _this = p.prependDirectory("foo");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 834},"[JS|dn.FilePath] FilePath.fromDir(\"hello/world\").prependDirectory(\"foo\").full == \"foo/hello/world\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "foo/hello/world"]);
	}
	var p = new dn_FilePath();
	p.parse("",false);
	var _this = p.prependDirectory("foo");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"\").prependDirectory(\"foo\").full == \"foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("",false);
		var _this = p.prependDirectory("foo");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 835},"[JS|dn.FilePath] FilePath.fromDir(\"\").prependDirectory(\"foo\").full == \"foo\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "foo"]);
	}
	var p = new dn_FilePath();
	p.parse("hello/world",false);
	var _this = p.prependDirectory(null);
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "hello/world") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"hello/world\").prependDirectory(null).full == \"hello/world\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("hello/world",false);
		var _this = p.prependDirectory(null);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 836},"[JS|dn.FilePath] FilePath.fromDir(\"hello/world\").prependDirectory(null).full == \"hello/world\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "hello/world"]);
	}
	var p = new dn_FilePath();
	p.parse("test.txt",true);
	if(p.setDirectory("foo").directory == "foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"test.txt\").setDirectory(\"foo\").directory == \"foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("test.txt",true);
		var tmp = p.setDirectory("foo").directory + " != " + "foo";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 838},"[JS|dn.FilePath] FilePath.fromFile(\"test.txt\").setDirectory(\"foo\").directory == \"foo\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("bar/test.txt",true);
	if(p.setDirectory("foo").directory == "foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"bar/test.txt\").setDirectory(\"foo\").directory == \"foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("bar/test.txt",true);
		var tmp = p.setDirectory("foo").directory + " != " + "foo";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 839},"[JS|dn.FilePath] FilePath.fromFile(\"bar/test.txt\").setDirectory(\"foo\").directory == \"foo\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("c:",false);
	if(p.getDirectoryArray().length == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:\").getDirectoryArray().length == 1" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:",false);
		var tmp = p.getDirectoryArray().length + " != " + 1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 842},"[JS|dn.FilePath] FilePath.fromDir(\"c:\").getDirectoryArray().length == 1","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("/user",false);
	if(p.getDirectoryArray().length == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/user\").getDirectoryArray().length == 2" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/user",false);
		var tmp = p.getDirectoryArray().length + " != " + 2;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 843},"[JS|dn.FilePath] FilePath.fromDir(\"/user\").getDirectoryArray().length == 2","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("c:/foo/bar",false);
	if(p.getSubDirectories(true).length == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/foo/bar\").getSubDirectories(true).length == 2" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/foo/bar",false);
		var tmp = p.getSubDirectories(true).length + " != " + 2;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 845},"[JS|dn.FilePath] FilePath.fromDir(\"c:/foo/bar\").getSubDirectories(true).length == 2","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("c:/foo/bar",false);
	if(p.getSubDirectories(false).length == 3) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/foo/bar\").getSubDirectories(false).length == 3" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/foo/bar",false);
		var tmp = p.getSubDirectories(false).length + " != " + 3;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 846},"[JS|dn.FilePath] FilePath.fromDir(\"c:/foo/bar\").getSubDirectories(false).length == 3","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("c:/foo/bar",false);
	if(p.getSubDirectories(false)[0] == "c:") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/foo/bar\").getSubDirectories(false)[0] == \"c:\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/foo/bar",false);
		var tmp = p.getSubDirectories(false)[0] + " != " + "c:";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 847},"[JS|dn.FilePath] FilePath.fromDir(\"c:/foo/bar\").getSubDirectories(false)[0] == \"c:\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("c:/foo/bar",false);
	if(p.getSubDirectories(true)[0] == "c:/foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/foo/bar\").getSubDirectories(true)[0] == \"c:/foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/foo/bar",false);
		var tmp = p.getSubDirectories(true)[0] + " != " + "c:/foo";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 848},"[JS|dn.FilePath] FilePath.fromDir(\"c:/foo/bar\").getSubDirectories(true)[0] == \"c:/foo\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("c:/foo/bar",false);
	if(p.getSubDirectories(true)[1] == "c:/foo/bar") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/foo/bar\").getSubDirectories(true)[1] == \"c:/foo/bar\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/foo/bar",false);
		var tmp = p.getSubDirectories(true)[1] + " != " + "c:/foo/bar";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 849},"[JS|dn.FilePath] FilePath.fromDir(\"c:/foo/bar\").getSubDirectories(true)[1] == \"c:/foo/bar\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("/",false);
	if(p.getSubDirectories(false)[0] == "/") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/\").getSubDirectories(false)[0] == \"/\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/",false);
		var tmp = p.getSubDirectories(false)[0] + " != " + "/";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 850},"[JS|dn.FilePath] FilePath.fromDir(\"/\").getSubDirectories(false)[0] == \"/\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("/user",false);
	if(p.getSubDirectories(false)[0] == "/") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/user\").getSubDirectories(false)[0] == \"/\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/user",false);
		var tmp = p.getSubDirectories(false)[0] + " != " + "/";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 851},"[JS|dn.FilePath] FilePath.fromDir(\"/user\").getSubDirectories(false)[0] == \"/\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("/user",false);
	if(p.getSubDirectories(false)[1] == "/user") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/user\").getSubDirectories(false)[1] == \"/user\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/user",false);
		var tmp = p.getSubDirectories(false)[1] + " != " + "/user";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 852},"[JS|dn.FilePath] FilePath.fromDir(\"/user\").getSubDirectories(false)[1] == \"/user\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("/user/foo",true);
	if(p.directory == "/user" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/foo\").directory == \"/user\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 855},"[JS|dn.FilePath] FilePath.fromFile(\"/user/foo\").directory == \"/user\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/foo.png",true);
	if(p.directory == "/user" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").directory == \"/user\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 856},"[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").directory == \"/user\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/foo.png",true);
	if(p.fileName == "foo" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").fileName == \"foo\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 857},"[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").fileName == \"foo\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/foo.png",true);
	if(p.extension == "png" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").extension == \"png\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 858},"[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").extension == \"png\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/foo.png",true);
	var _this = p;
	if((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "foo.png" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").fileWithExt == \"foo.png\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 859},"[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").fileWithExt == \"foo.png\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/foo.png",true);
	var _this = p;
	if((_this.extension == null ? null : "." + _this.extension) == ".png" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").extWithDot == \".png\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 860},"[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").extWithDot == \".png\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/foo",true);
	var _this = p;
	if((_this.extension == null ? null : "." + _this.extension) == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/foo\").extWithDot == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 861},"[JS|dn.FilePath] FilePath.fromFile(\"/user/foo\").extWithDot == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse(".htaccess",true);
	if(p.fileName == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\".htaccess\").fileName == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 862},"[JS|dn.FilePath] FilePath.fromFile(\".htaccess\").fileName == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse(".htaccess",true);
	if(p.extension == "htaccess" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\".htaccess\").extension == \"htaccess\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 863},"[JS|dn.FilePath] FilePath.fromFile(\".htaccess\").extension == \"htaccess\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/test.foo.png",true);
	if(p.extension == "png" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/test.foo.png\").extension == \"png\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 864},"[JS|dn.FilePath] FilePath.fromFile(\"/user/test.foo.png\").extension == \"png\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/.foo.png",true);
	if(p.fileName == ".foo" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/.foo.png\").fileName == \".foo\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 865},"[JS|dn.FilePath] FilePath.fromFile(\"/user/.foo.png\").fileName == \".foo\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/.foo.png",true);
	if(p.extension == "png" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/.foo.png\").extension == \"png\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 866},"[JS|dn.FilePath] FilePath.fromFile(\"/user/.foo.png\").extension == \"png\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/.foo.png",true);
	var _this = p;
	if((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == ".foo.png" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/.foo.png\").fileWithExt == \".foo.png\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 867},"[JS|dn.FilePath] FilePath.fromFile(\"/user/.foo.png\").fileWithExt == \".foo.png\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/.foo.",true);
	if(p.extension == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/.foo.\").extension == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 868},"[JS|dn.FilePath] FilePath.fromFile(\"/user/.foo.\").extension == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/.foo.",true);
	if(p.fileName == ".foo" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/.foo.\").fileName == \".foo\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 869},"[JS|dn.FilePath] FilePath.fromFile(\"/user/.foo.\").fileName == \".foo\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/",true);
	if(p.fileName == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/\").fileName == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 870},"[JS|dn.FilePath] FilePath.fromFile(\"/user/\").fileName == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/",true);
	if(p.extension == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/\").extension == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 871},"[JS|dn.FilePath] FilePath.fromFile(\"/user/\").extension == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("",true);
	if(p.directory == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"\").directory == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 872},"[JS|dn.FilePath] FilePath.fromFile(\"\").directory == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("",true);
	if(p.fileName == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"\").fileName == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 873},"[JS|dn.FilePath] FilePath.fromFile(\"\").fileName == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("",true);
	if(p.extension == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"\").extension == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 874},"[JS|dn.FilePath] FilePath.fromFile(\"\").extension == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/foo.png",true);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "/user/foo.png" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").full == \"/user/foo.png\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 875},"[JS|dn.FilePath] FilePath.fromFile(\"/user/foo.png\").full == \"/user/foo.png\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/",true);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "/user" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/user/\").full == \"/user\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 876},"[JS|dn.FilePath] FilePath.fromFile(\"/user/\").full == \"/user\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("file.txt",true);
	if(p.directory == null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file.txt\").directory == null" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 877},"[JS|dn.FilePath] FilePath.fromFile(\"file.txt\").directory == null","These 2 expressions should be EQUAL",[p.directory + " != " + Std.string(null)]);
	}
	var p = new dn_FilePath();
	p.parse("/file.txt",true);
	if(p.directory == "/") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/file.txt\").directory == \"/\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/file.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 878},"[JS|dn.FilePath] FilePath.fromFile(\"/file.txt\").directory == \"/\"","These 2 expressions should be EQUAL",[p.directory + " != " + "/"]);
	}
	var p = new dn_FilePath();
	p.parse("./file.txt",true);
	if(p.directory == ".") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"./file.txt\").directory == \".\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("./file.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 879},"[JS|dn.FilePath] FilePath.fromFile(\"./file.txt\").directory == \".\"","These 2 expressions should be EQUAL",[p.directory + " != " + "."]);
	}
	var p = new dn_FilePath();
	p.parse("/user/test.png",true);
	if(p.fileName == "test" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.extractFileName(\"/user/test.png\") == \"test\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 882},"[JS|dn.FilePath] FilePath.extractFileName(\"/user/test.png\") == \"test\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/test.png",true);
	var e = p.extension;
	if(e == "png" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.extractExtension(\"/user/test.png\") == \"png\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 883},"[JS|dn.FilePath] FilePath.extractExtension(\"/user/test.png\") == \"png\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/user/test",true);
	var e = p.extension;
	if(e == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.extractExtension(\"/user/test\") == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 884},"[JS|dn.FilePath] FilePath.extractExtension(\"/user/test\") == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("user/file.xml.meta",true);
	var e = p.extension;
	if(e == "meta") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.extractExtension(\"user/file.xml.meta\") == \"meta\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("user/file.xml.meta",true);
		var e = p.extension;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 887},"[JS|dn.FilePath] FilePath.extractExtension(\"user/file.xml.meta\") == \"meta\"","These 2 expressions should be EQUAL",[e + " != " + "meta"]);
	}
	var p = new dn_FilePath();
	p.parse("noExt",true);
	var _this = p;
	if(((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) != null && (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).indexOf(".") != (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).lastIndexOf(".")) == false) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"noExt\").hasMultipleExtensions() == false" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("noExt",true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 889},"[JS|dn.FilePath] FilePath.fromFile(\"noExt\").hasMultipleExtensions() == false","These 2 expressions should be EQUAL",[Std.string((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) != null && (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).indexOf(".") != (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).lastIndexOf(".")) + " != " + "false"]);
	}
	var p = new dn_FilePath();
	p.parse(".htaccess",true);
	var _this = p;
	if(((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) != null && (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).indexOf(".") != (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).lastIndexOf(".")) == false) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\".htaccess\").hasMultipleExtensions() == false" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse(".htaccess",true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 890},"[JS|dn.FilePath] FilePath.fromFile(\".htaccess\").hasMultipleExtensions() == false","These 2 expressions should be EQUAL",[Std.string((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) != null && (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).indexOf(".") != (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).lastIndexOf(".")) + " != " + "false"]);
	}
	var p = new dn_FilePath();
	p.parse("user/file.tar",true);
	var _this = p;
	if(((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) != null && (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).indexOf(".") != (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).lastIndexOf(".")) == false) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"user/file.tar\").hasMultipleExtensions() == false" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("user/file.tar",true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 891},"[JS|dn.FilePath] FilePath.fromFile(\"user/file.tar\").hasMultipleExtensions() == false","These 2 expressions should be EQUAL",[Std.string((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) != null && (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).indexOf(".") != (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).lastIndexOf(".")) + " != " + "false"]);
	}
	var p = new dn_FilePath();
	p.parse("user/file.tar.gz",true);
	var _this = p;
	if(((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) != null && (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).indexOf(".") != (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).lastIndexOf(".")) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"user/file.tar.gz\").hasMultipleExtensions() == true" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("user/file.tar.gz",true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 892},"[JS|dn.FilePath] FilePath.fromFile(\"user/file.tar.gz\").hasMultipleExtensions() == true","These 2 expressions should be EQUAL",[Std.string((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) != null && (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).indexOf(".") != (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).lastIndexOf(".")) + " != " + "true"]);
	}
	var p = new dn_FilePath();
	p.parse("noExt",true);
	var _this = p;
	var tmp;
	if((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null) {
		tmp = [];
	} else {
		var parts = (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).split(".");
		parts.shift();
		tmp = parts;
	}
	if(tmp.join(",") == "") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"noExt\").getMultipleExtensions().join(\",\") == \"\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("noExt",true);
		var _this = p;
		var tmp;
		if((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null) {
			tmp = [];
		} else {
			var parts = (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).split(".");
			parts.shift();
			tmp = parts;
		}
		var tmp1 = tmp.join(",") + " != " + "";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 894},"[JS|dn.FilePath] FilePath.fromFile(\"noExt\").getMultipleExtensions().join(\",\") == \"\"","These 2 expressions should be EQUAL",[tmp1]);
	}
	var p = new dn_FilePath();
	p.parse(".htaccess",true);
	var _this = p;
	var tmp;
	if((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null) {
		tmp = [];
	} else {
		var parts = (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).split(".");
		parts.shift();
		tmp = parts;
	}
	if(tmp.join(",") == "htaccess") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\".htaccess\").getMultipleExtensions().join(\",\") == \"htaccess\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse(".htaccess",true);
		var _this = p;
		var tmp;
		if((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null) {
			tmp = [];
		} else {
			var parts = (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).split(".");
			parts.shift();
			tmp = parts;
		}
		var tmp1 = tmp.join(",") + " != " + "htaccess";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 895},"[JS|dn.FilePath] FilePath.fromFile(\".htaccess\").getMultipleExtensions().join(\",\") == \"htaccess\"","These 2 expressions should be EQUAL",[tmp1]);
	}
	var p = new dn_FilePath();
	p.parse("user/file.tar",true);
	var _this = p;
	var tmp;
	if((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null) {
		tmp = [];
	} else {
		var parts = (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).split(".");
		parts.shift();
		tmp = parts;
	}
	if(tmp.join(",") == "tar") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"user/file.tar\").getMultipleExtensions().join(\",\") == \"tar\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("user/file.tar",true);
		var _this = p;
		var tmp;
		if((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null) {
			tmp = [];
		} else {
			var parts = (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).split(".");
			parts.shift();
			tmp = parts;
		}
		var tmp1 = tmp.join(",") + " != " + "tar";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 896},"[JS|dn.FilePath] FilePath.fromFile(\"user/file.tar\").getMultipleExtensions().join(\",\") == \"tar\"","These 2 expressions should be EQUAL",[tmp1]);
	}
	var p = new dn_FilePath();
	p.parse("user/file.tar.gz",true);
	var _this = p;
	var tmp;
	if((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null) {
		tmp = [];
	} else {
		var parts = (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).split(".");
		parts.shift();
		tmp = parts;
	}
	if(tmp.join(",") == "tar,gz") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"user/file.tar.gz\").getMultipleExtensions().join(\",\") == \"tar,gz\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("user/file.tar.gz",true);
		var _this = p;
		var tmp;
		if((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null) {
			tmp = [];
		} else {
			var parts = (_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)).split(".");
			parts.shift();
			tmp = parts;
		}
		var tmp1 = tmp.join(",") + " != " + "tar,gz";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 897},"[JS|dn.FilePath] FilePath.fromFile(\"user/file.tar.gz\").getMultipleExtensions().join(\",\") == \"tar,gz\"","These 2 expressions should be EQUAL",[tmp1]);
	}
	var p = new dn_FilePath();
	p.parse("/some/Dir~#%/foo.txt",true);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "/some/Dir~#%/foo.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/some/Dir~#%/foo.txt\").full == \"/some/Dir~#%/foo.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/some/Dir~#%/foo.txt",true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 900},"[JS|dn.FilePath] FilePath.fromFile(\"/some/Dir~#%/foo.txt\").full == \"/some/Dir~#%/foo.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "/some/Dir~#%/foo.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("/some/Dir:/foo.txt",true);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "/some/Dir_/foo.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/some/Dir:/foo.txt\").full == \"/some/Dir_/foo.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/some/Dir:/foo.txt",true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 901},"[JS|dn.FilePath] FilePath.fromFile(\"/some/Dir:/foo.txt\").full == \"/some/Dir_/foo.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "/some/Dir_/foo.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("/some/Dir*?:/foo.txt",true);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "/some/Dir___/foo.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/some/Dir*?:/foo.txt\").full == \"/some/Dir___/foo.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/some/Dir*?:/foo.txt",true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 902},"[JS|dn.FilePath] FilePath.fromFile(\"/some/Dir*?:/foo.txt\").full == \"/some/Dir___/foo.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "/some/Dir___/foo.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("foo/bar/../../test",false);
	if(p.directory == "test" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"foo/bar/../../test\").directory == \"test\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 905},"[JS|dn.FilePath] FilePath.fromDir(\"foo/bar/../../test\").directory == \"test\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("../test",false);
	if(p.directory == "../test" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"../test\").directory == \"../test\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 906},"[JS|dn.FilePath] FilePath.fromDir(\"../test\").directory == \"../test\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("test/..",false);
	if(p.directory == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"test/..\").directory == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 907},"[JS|dn.FilePath] FilePath.fromDir(\"test/..\").directory == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("foo/test/../..",false);
	if(p.directory == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"foo/test/../..\").directory == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 908},"[JS|dn.FilePath] FilePath.fromDir(\"foo/test/../..\").directory == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("foo/test/../../",false);
	if(p.directory == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"foo/test/../../\").directory == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 909},"[JS|dn.FilePath] FilePath.fromDir(\"foo/test/../../\").directory == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/foo/test/../../",false);
	if(p.directory == "/" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/foo/test/../../\").directory == \"/\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 910},"[JS|dn.FilePath] FilePath.fromDir(\"/foo/test/../../\").directory == \"/\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/foo/test/../../",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "/" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/foo/test/../../\").full == \"/\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 911},"[JS|dn.FilePath] FilePath.fromDir(\"/foo/test/../../\").full == \"/\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/foo/test/../../test.png",true);
	if(p.directory == "/" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/foo/test/../../test.png\").directory == \"/\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 912},"[JS|dn.FilePath] FilePath.fromFile(\"/foo/test/../../test.png\").directory == \"/\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/foo/test/../../test.png",true);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "/test.png" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/foo/test/../../test.png\").full == \"/test.png\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 913},"[JS|dn.FilePath] FilePath.fromFile(\"/foo/test/../../test.png\").full == \"/test.png\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/foo/test/../../test.png",true);
	if(p.getDirectoryArray()[0] == "/" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/foo/test/../../test.png\").getDirectoryArray()[0] == \"/\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 914},"[JS|dn.FilePath] FilePath.fromFile(\"/foo/test/../../test.png\").getDirectoryArray()[0] == \"/\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("foo/test/../../test.png",true);
	if(p.getDirectoryArray()[0] == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"foo/test/../../test.png\").getDirectoryArray()[0] == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 915},"[JS|dn.FilePath] FilePath.fromFile(\"foo/test/../../test.png\").getDirectoryArray()[0] == null","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/",false);
	if(p.getDirectoryArray()[0] == "/" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/\").getDirectoryArray()[0] == \"/\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 916},"[JS|dn.FilePath] FilePath.fromDir(\"/\").getDirectoryArray()[0] == \"/\"","This expression should be TRUE");
	}
	dn_FilePath.SLASH_MODE = dn_PathSlashMode.OnlySlashes;
	var p = new dn_FilePath();
	p.parse("\\",false);
	if(p.directory == "/" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"\\\\\").directory == \"/\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 920},"[JS|dn.FilePath] FilePath.fromDir(\"\\\\\").directory == \"/\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("c:\\windows\\system\\",false);
	if(p.directory == "c:/windows/system" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:\\\\windows\\\\system\\\\\").directory == \"c:/windows/system\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 921},"[JS|dn.FilePath] FilePath.fromDir(\"c:\\\\windows\\\\system\\\\\").directory == \"c:/windows/system\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("c:\\windows/system\\/",false);
	if(p.directory == "c:/windows/system" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:\\\\windows/system\\\\/\").directory == \"c:/windows/system\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 922},"[JS|dn.FilePath] FilePath.fromDir(\"c:\\\\windows/system\\\\/\").directory == \"c:/windows/system\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("c:\\windows/system\\/",false);
	if(p.getDirectoryArray().length == 3 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:\\\\windows/system\\\\/\").getDirectoryArray().length == 3" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 923},"[JS|dn.FilePath] FilePath.fromDir(\"c:\\\\windows/system\\\\/\").getDirectoryArray().length == 3","This expression should be TRUE");
	}
	dn_FilePath.SLASH_MODE = dn_PathSlashMode.OnlyBackslashes;
	var p = new dn_FilePath();
	p.parse("c:\\windows/system\\/",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "c:\\windows\\system" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:\\\\windows/system\\\\/\").full == \"c:\\\\windows\\\\system\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 925},"[JS|dn.FilePath] FilePath.fromDir(\"c:\\\\windows/system\\\\/\").full == \"c:\\\\windows\\\\system\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("c:/windows/system",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "c:\\windows\\system" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/windows/system\").full == \"c:\\\\windows\\\\system\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 926},"[JS|dn.FilePath] FilePath.fromDir(\"c:/windows/system\").full == \"c:\\\\windows\\\\system\"","This expression should be TRUE");
	}
	dn_FilePath.SLASH_MODE = dn_PathSlashMode.Preserve;
	var p = new dn_FilePath();
	p.parse("c:\\windows/system\\/",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "c:\\windows\\system" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:\\\\windows/system\\\\/\").full == \"c:\\\\windows\\\\system\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 928},"[JS|dn.FilePath] FilePath.fromDir(\"c:\\\\windows/system\\\\/\").full == \"c:\\\\windows\\\\system\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("c:/windows/system",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "c:/windows/system" == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/windows/system\").full == \"c:/windows/system\"" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 929},"[JS|dn.FilePath] FilePath.fromDir(\"c:/windows/system\").full == \"c:/windows/system\"","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("c:/windows/system/foo.txt",true);
	if(p.getFirstDirectory() == "windows") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"c:/windows/system/foo.txt\").getFirstDirectory() == \"windows\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/windows/system/foo.txt",true);
		var tmp = p.getFirstDirectory() + " != " + "windows";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 932},"[JS|dn.FilePath] FilePath.fromFile(\"c:/windows/system/foo.txt\").getFirstDirectory() == \"windows\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("/windows/system/foo.txt",true);
	if(p.getFirstDirectory() == "") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/windows/system/foo.txt\").getFirstDirectory() == \"\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/windows/system/foo.txt",true);
		var tmp = p.getFirstDirectory() + " != " + "";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 933},"[JS|dn.FilePath] FilePath.fromFile(\"/windows/system/foo.txt\").getFirstDirectory() == \"\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("./windows/system/foo.txt",true);
	if(p.getFirstDirectory() == ".") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"./windows/system/foo.txt\").getFirstDirectory() == \".\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("./windows/system/foo.txt",true);
		var tmp = p.getFirstDirectory() + " != " + ".";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 934},"[JS|dn.FilePath] FilePath.fromFile(\"./windows/system/foo.txt\").getFirstDirectory() == \".\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("ftp://a@b.com:21/foo/bar/pouet.txt",true);
	if(p.getFirstDirectory() == "foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"ftp://a@b.com:21/foo/bar/pouet.txt\").getFirstDirectory() == \"foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("ftp://a@b.com:21/foo/bar/pouet.txt",true);
		var tmp = p.getFirstDirectory() + " != " + "foo";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 935},"[JS|dn.FilePath] FilePath.fromFile(\"ftp://a@b.com:21/foo/bar/pouet.txt\").getFirstDirectory() == \"foo\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("c:/windows/system",false);
	if(p.getLastDirectory() == "system") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/windows/system\").getLastDirectory() == \"system\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/windows/system",false);
		var tmp = p.getLastDirectory() + " != " + "system";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 938},"[JS|dn.FilePath] FilePath.fromDir(\"c:/windows/system\").getLastDirectory() == \"system\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("c:/windows/system/foo.txt",true);
	if(p.getLastDirectory() == "system") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"c:/windows/system/foo.txt\").getLastDirectory() == \"system\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/windows/system/foo.txt",true);
		var tmp = p.getLastDirectory() + " != " + "system";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 939},"[JS|dn.FilePath] FilePath.fromFile(\"c:/windows/system/foo.txt\").getLastDirectory() == \"system\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("c:/windows/system/./foo.txt",true);
	if(p.getLastDirectory() == "system") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"c:/windows/system/./foo.txt\").getLastDirectory() == \"system\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/windows/system/./foo.txt",true);
		var tmp = p.getLastDirectory() + " != " + "system";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 940},"[JS|dn.FilePath] FilePath.fromFile(\"c:/windows/system/./foo.txt\").getLastDirectory() == \"system\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("c:/windows/system/../foo.txt",true);
	if(p.getLastDirectory() == "windows") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"c:/windows/system/../foo.txt\").getLastDirectory() == \"windows\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/windows/system/../foo.txt",true);
		var tmp = p.getLastDirectory() + " != " + "windows";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 941},"[JS|dn.FilePath] FilePath.fromFile(\"c:/windows/system/../foo.txt\").getLastDirectory() == \"windows\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("foo/bar/file.txt",true);
	var _this = p.removeFirstDirectory();
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "bar/file.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"foo/bar/file.txt\").removeFirstDirectory().full == \"bar/file.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("foo/bar/file.txt",true);
		var _this = p.removeFirstDirectory();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 943},"[JS|dn.FilePath] FilePath.fromFile(\"foo/bar/file.txt\").removeFirstDirectory().full == \"bar/file.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "bar/file.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("foo/bar/file.txt",true);
	var _this = p.removeLastDirectory();
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "foo/file.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"foo/bar/file.txt\").removeLastDirectory().full == \"foo/file.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("foo/bar/file.txt",true);
		var _this = p.removeLastDirectory();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 944},"[JS|dn.FilePath] FilePath.fromFile(\"foo/bar/file.txt\").removeLastDirectory().full == \"foo/file.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "foo/file.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("c:/windows/system/foo.txt",true);
	var _this = p.removeFirstDirectory();
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "c:/system/foo.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... ...(\"c:/windows/system/foo.txt\").removeFirstDirectory().full == \"c:/system/foo.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/windows/system/foo.txt",true);
		var _this = p.removeFirstDirectory();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 945},"[JS|dn.FilePath] FilePath.f... ...(\"c:/windows/system/foo.txt\").removeFirstDirectory().full == \"c:/system/foo.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "c:/system/foo.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("ftp://a@b.com:21/foo/bar/pouet.txt",true);
	var _this = p.removeFirstDirectory();
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "ftp://a@b.com:21/bar/pouet.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... .../bar/pouet.txt\").removeFirstDirectory().full == \"ftp://a@b.com:21/bar/pouet.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("ftp://a@b.com:21/foo/bar/pouet.txt",true);
		var _this = p.removeFirstDirectory();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 946},"[JS|dn.FilePath] FilePath.f... .../bar/pouet.txt\").removeFirstDirectory().full == \"ftp://a@b.com:21/bar/pouet.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "ftp://a@b.com:21/bar/pouet.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("/dir/foo/bar",false);
	var _this = p.makeRelativeTo("/dir");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "foo/bar") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/dir/foo/bar\").makeRelativeTo(\"/dir\").full == \"foo/bar\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/dir/foo/bar",false);
		var _this = p.makeRelativeTo("/dir");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 949},"[JS|dn.FilePath] FilePath.fromDir(\"/dir/foo/bar\").makeRelativeTo(\"/dir\").full == \"foo/bar\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "foo/bar"]);
	}
	var p = new dn_FilePath();
	p.parse("/dir/a",false);
	var _this = p.makeRelativeTo("/dir/b");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "../a") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/dir/a\").makeRelativeTo(\"/dir/b\").full == \"../a\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/dir/a",false);
		var _this = p.makeRelativeTo("/dir/b");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 950},"[JS|dn.FilePath] FilePath.fromDir(\"/dir/a\").makeRelativeTo(\"/dir/b\").full == \"../a\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "../a"]);
	}
	var p = new dn_FilePath();
	p.parse("/dir/a1/a2",false);
	var _this = p.makeRelativeTo("/dir/b");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "../a1/a2") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/dir/a1/a2\").makeRelativeTo(\"/dir/b\").full == \"../a1/a2\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/dir/a1/a2",false);
		var _this = p.makeRelativeTo("/dir/b");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 951},"[JS|dn.FilePath] FilePath.fromDir(\"/dir/a1/a2\").makeRelativeTo(\"/dir/b\").full == \"../a1/a2\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "../a1/a2"]);
	}
	var p = new dn_FilePath();
	p.parse("/dir/a1/a2",false);
	var _this = p.makeRelativeTo("/dir/b1/b2");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "../../a1/a2") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/dir/a1/a2\").makeRelativeTo(\"/dir/b1/b2\").full == \"../../a1/a2\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/dir/a1/a2",false);
		var _this = p.makeRelativeTo("/dir/b1/b2");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 952},"[JS|dn.FilePath] FilePath.fromDir(\"/dir/a1/a2\").makeRelativeTo(\"/dir/b1/b2\").full == \"../../a1/a2\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "../../a1/a2"]);
	}
	var p = new dn_FilePath();
	p.parse("c:/dir",false);
	var _this = p.makeRelativeTo("d:/dir");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "c:/dir") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/dir\").makeRelativeTo(\"d:/dir\").full == \"c:/dir\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/dir",false);
		var _this = p.makeRelativeTo("d:/dir");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 953},"[JS|dn.FilePath] FilePath.fromDir(\"c:/dir\").makeRelativeTo(\"d:/dir\").full == \"c:/dir\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "c:/dir"]);
	}
	var p = new dn_FilePath();
	p.parse("c:/",false);
	var _this = p.makeRelativeTo("d:/");
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "c:") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/\").makeRelativeTo(\"d:/\").full == \"c:\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/",false);
		var _this = p.makeRelativeTo("d:/");
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 954},"[JS|dn.FilePath] FilePath.fromDir(\"c:/\").makeRelativeTo(\"d:/\").full == \"c:\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "c:"]);
	}
	var p = new dn_FilePath();
	p.parse("c:/windows/system",false);
	if(p.isAbsolute() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/windows/system\").isAbsolute()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 957},"[JS|dn.FilePath] FilePath.fromDir(\"c:/windows/system\").isAbsolute()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("file:///windows/system",false);
	if(p.isAbsolute() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"file:///windows/system\").isAbsolute()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 958},"[JS|dn.FilePath] FilePath.fromDir(\"file:///windows/system\").isAbsolute()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("file://host/windows/system",false);
	if(p.isAbsolute() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"file://host/windows/system\").isAbsolute()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 959},"[JS|dn.FilePath] FilePath.fromDir(\"file://host/windows/system\").isAbsolute()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("file:/windows/system",false);
	if(p.isAbsolute() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"file:/windows/system\").isAbsolute()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 960},"[JS|dn.FilePath] FilePath.fromDir(\"file:/windows/system\").isAbsolute()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/windows/system",false);
	if(p.isAbsolute() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/windows/system\").isAbsolute()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 961},"[JS|dn.FilePath] FilePath.fromDir(\"/windows/system\").isAbsolute()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("/windows/file.txt",true);
	if(p.isAbsolute() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"/windows/file.txt\").isAbsolute()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 962},"[JS|dn.FilePath] FilePath.fromFile(\"/windows/file.txt\").isAbsolute()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("windows/file.txt",true);
	if(!p.isAbsolute() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] !FilePath.fromFile(\"windows/file.txt\").isAbsolute()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 963},"[JS|dn.FilePath] !FilePath.fromFile(\"windows/file.txt\").isAbsolute()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("./windows/file.txt",true);
	if(!p.isAbsolute() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] !FilePath.fromFile(\"./windows/file.txt\").isAbsolute()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 964},"[JS|dn.FilePath] !FilePath.fromFile(\"./windows/file.txt\").isAbsolute()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("../windows/file.txt",true);
	if(!p.isAbsolute() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] !FilePath.fromFile(\"../windows/file.txt\").isAbsolute()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 965},"[JS|dn.FilePath] !FilePath.fromFile(\"../windows/file.txt\").isAbsolute()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("windows",false);
	if(!p.isAbsolute() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] !FilePath.fromDir(\"windows\").isAbsolute()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 966},"[JS|dn.FilePath] !FilePath.fromDir(\"windows\").isAbsolute()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("file.txt",true);
	if(!p.isAbsolute() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] !FilePath.fromFile(\"file.txt\").isAbsolute()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 967},"[JS|dn.FilePath] !FilePath.fromFile(\"file.txt\").isAbsolute()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("c:/dir",false);
	if(p.getDriveLetter() == "c") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/dir\").getDriveLetter() == \"c\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/dir",false);
		var tmp = p.getDriveLetter() + " != " + "c";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 971},"[JS|dn.FilePath] FilePath.fromDir(\"c:/dir\").getDriveLetter() == \"c\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("c:/dir",false);
	if(p.directory == "c:/dir") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/dir\").directory == \"c:/dir\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/dir",false);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 972},"[JS|dn.FilePath] FilePath.fromDir(\"c:/dir\").directory == \"c:/dir\"","These 2 expressions should be EQUAL",[p.directory + " != " + "c:/dir"]);
	}
	var p = new dn_FilePath();
	p.parse("c:/dir",false);
	if(p.directory == "c:/dir") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"c:/dir\").directory == \"c:/dir\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/dir",false);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 973},"[JS|dn.FilePath] FilePath.fromDir(\"c:/dir\").directory == \"c:/dir\"","These 2 expressions should be EQUAL",[p.directory + " != " + "c:/dir"]);
	}
	var p = new dn_FilePath();
	p.parse("/dir",false);
	if(p.getDriveLetter() != null != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"/dir\").hasDriveLetter()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 974},"[JS|dn.FilePath] FilePath.fromDir(\"/dir\").hasDriveLetter()","This expression should be FALSE");
	}
	var p = new dn_FilePath();
	p.parse("c:/file.png",true);
	if(p.getDriveLetter() == "c") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"c:/file.png\").getDriveLetter() == \"c\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("c:/file.png",true);
		var tmp = p.getDriveLetter() + " != " + "c";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 975},"[JS|dn.FilePath] FilePath.fromFile(\"c:/file.png\").getDriveLetter() == \"c\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("file:///C:/foo/bar/pouet.txt",true);
	if(p.getDriveLetter() == "c") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").getDriveLetter() == \"c\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file:///C:/foo/bar/pouet.txt",true);
		var tmp = p.getDriveLetter() + " != " + "c";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 976},"[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").getDriveLetter() == \"c\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("file://someone@domain.com:21/C:/foo/bar/pouet.txt",true);
	if(p.getDriveLetter() == "c") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... ...ile(\"file://someone@domain.com:21/C:/foo/bar/pouet.txt\").getDriveLetter() == \"c\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file://someone@domain.com:21/C:/foo/bar/pouet.txt",true);
		var tmp = p.getDriveLetter() + " != " + "c";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 977},"[JS|dn.FilePath] FilePath.f... ...ile(\"file://someone@domain.com:21/C:/foo/bar/pouet.txt\").getDriveLetter() == \"c\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("file://localhost/c$/foo/bar.txt",true);
	if(p.getDriveLetter() == "c") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file://localhost/c$/foo/bar.txt\").getDriveLetter() == \"c\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file://localhost/c$/foo/bar.txt",true);
		var tmp = p.getDriveLetter() + " != " + "c";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 978},"[JS|dn.FilePath] FilePath.fromFile(\"file://localhost/c$/foo/bar.txt\").getDriveLetter() == \"c\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("file:/c$/foo/bar.txt",true);
	if(p.getDriveLetter() == "c") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:/c$/foo/bar.txt\").getDriveLetter() == \"c\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file:/c$/foo/bar.txt",true);
		var tmp = p.getDriveLetter() + " != " + "c";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 979},"[JS|dn.FilePath] FilePath.fromFile(\"file:/c$/foo/bar.txt\").getDriveLetter() == \"c\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var filePath = "file://someone@domain.com:21/C:/foo/bar/pouet.txt";
	var p = new dn_FilePath();
	p.parse(filePath,true);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == filePath) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(filePath).full == filePath" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse(filePath,true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 982},"[JS|dn.FilePath] FilePath.fromFile(filePath).full == filePath","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + filePath]);
	}
	var p = new dn_FilePath();
	p.parse("file:///C:/foo/bar/pouet.txt",true);
	if(p.uriScheme != null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").isUri()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 985},"[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").isUri()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("file:/C:/foo/bar/pouet.txt",true);
	if(p.uriScheme != null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:/C:/foo/bar/pouet.txt\").isUri()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 986},"[JS|dn.FilePath] FilePath.fromFile(\"file:/C:/foo/bar/pouet.txt\").isUri()","This expression should be TRUE");
	}
	var p = new dn_FilePath();
	p.parse("C:/foo/bar/pouet.txt",true);
	if(p.uriScheme != null != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"C:/foo/bar/pouet.txt\").isUri()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 987},"[JS|dn.FilePath] FilePath.fromFile(\"C:/foo/bar/pouet.txt\").isUri()","This expression should be FALSE");
	}
	var p = new dn_FilePath();
	p.parse("C://foo///bar/pouet.txt",true);
	if(p.uriScheme != null != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"C://foo///bar/pouet.txt\").isUri()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 988},"[JS|dn.FilePath] FilePath.fromFile(\"C://foo///bar/pouet.txt\").isUri()","This expression should be FALSE");
	}
	var p = new dn_FilePath();
	p.parse("file:/C:/foo/bar/pouet.txt",true);
	if(p.uriScheme == "file") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:/C:/foo/bar/pouet.txt\").uriScheme == \"file\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file:/C:/foo/bar/pouet.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 989},"[JS|dn.FilePath] FilePath.fromFile(\"file:/C:/foo/bar/pouet.txt\").uriScheme == \"file\"","These 2 expressions should be EQUAL",[p.uriScheme + " != " + "file"]);
	}
	var p = new dn_FilePath();
	p.parse("file:///C:/foo/bar/pouet.txt",true);
	if(p.fileName == "pouet") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").fileName == \"pouet\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file:///C:/foo/bar/pouet.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 990},"[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").fileName == \"pouet\"","These 2 expressions should be EQUAL",[p.fileName + " != " + "pouet"]);
	}
	var p = new dn_FilePath();
	p.parse("file:///C:/foo/bar/pouet.txt",true);
	if(p.extension == "txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").extension == \"txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file:///C:/foo/bar/pouet.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 991},"[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").extension == \"txt\"","These 2 expressions should be EQUAL",[p.extension + " != " + "txt"]);
	}
	var p = new dn_FilePath();
	p.parse("file:///C:/foo/bar/pouet.txt",true);
	if(p.getDriveLetter() == "c") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").getDriveLetter() == \"c\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file:///C:/foo/bar/pouet.txt",true);
		var tmp = p.getDriveLetter() + " != " + "c";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 992},"[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").getDriveLetter() == \"c\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("file:///foo/bar/pouet.txt",true);
	if(p.getDriveLetter() == null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:///foo/bar/pouet.txt\").getDriveLetter() == null" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file:///foo/bar/pouet.txt",true);
		var tmp = p.getDriveLetter() + " != ";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 993},"[JS|dn.FilePath] FilePath.fromFile(\"file:///foo/bar/pouet.txt\").getDriveLetter() == null","These 2 expressions should be EQUAL",[tmp + Std.string(null)]);
	}
	var p = new dn_FilePath();
	p.parse("file:///C:/foo/bar/pouet.txt",true);
	if(p.uriScheme == "file") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").uriScheme == \"file\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file:///C:/foo/bar/pouet.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 994},"[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").uriScheme == \"file\"","These 2 expressions should be EQUAL",[p.uriScheme + " != " + "file"]);
	}
	var p = new dn_FilePath();
	p.parse("file:///C:/foo/bar/pouet.txt",true);
	if(p.uriAuthority == null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").uriAuthority == null" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file:///C:/foo/bar/pouet.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 996},"[JS|dn.FilePath] FilePath.fromFile(\"file:///C:/foo/bar/pouet.txt\").uriAuthority == null","These 2 expressions should be EQUAL",[p.uriAuthority + " != " + Std.string(null)]);
	}
	var p = new dn_FilePath();
	p.parse("file://localhost/C:/foo/bar/pouet.txt",true);
	if(p.uriAuthority == "localhost") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file://localhost/C:/foo/bar/pouet.txt\").uriAuthority == \"localhost\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file://localhost/C:/foo/bar/pouet.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 997},"[JS|dn.FilePath] FilePath.fromFile(\"file://localhost/C:/foo/bar/pouet.txt\").uriAuthority == \"localhost\"","These 2 expressions should be EQUAL",[p.uriAuthority + " != " + "localhost"]);
	}
	var p = new dn_FilePath();
	p.parse("file://a@b.com:21/C:/foo/bar/pouet.txt",true);
	if(p.uriAuthority == "a@b.com:21") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file://a@b.com:21/C:/foo/bar/pouet.txt\").uriAuthority == \"a@b.com:21\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file://a@b.com:21/C:/foo/bar/pouet.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 998},"[JS|dn.FilePath] FilePath.fromFile(\"file://a@b.com:21/C:/foo/bar/pouet.txt\").uriAuthority == \"a@b.com:21\"","These 2 expressions should be EQUAL",[p.uriAuthority + " != " + "a@b.com:21"]);
	}
	var p = new dn_FilePath();
	p.parse("ftp://a@b.com:21/foo/bar//pouet.txt",true);
	if(p.uriScheme == "ftp") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"ftp://a@b.com:21/foo/bar//pouet.txt\").uriScheme == \"ftp\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("ftp://a@b.com:21/foo/bar//pouet.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 999},"[JS|dn.FilePath] FilePath.fromFile(\"ftp://a@b.com:21/foo/bar//pouet.txt\").uriScheme == \"ftp\"","These 2 expressions should be EQUAL",[p.uriScheme + " != " + "ftp"]);
	}
	var p = new dn_FilePath();
	p.parse("ftp://a@b.com:21/foo/bar//pouet.txt",true);
	if(p.uriAuthority == "a@b.com:21") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"ftp://a@b.com:21/foo/bar//pouet.txt\").uriAuthority == \"a@b.com:21\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("ftp://a@b.com:21/foo/bar//pouet.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1000},"[JS|dn.FilePath] FilePath.fromFile(\"ftp://a@b.com:21/foo/bar//pouet.txt\").uriAuthority == \"a@b.com:21\"","These 2 expressions should be EQUAL",[p.uriAuthority + " != " + "a@b.com:21"]);
	}
	var p = new dn_FilePath();
	p.parse("https://domain.com/foo/bar//pouet.txt",true);
	if(p.uriScheme == "https") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"https://domain.com/foo/bar//pouet.txt\").uriScheme == \"https\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("https://domain.com/foo/bar//pouet.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1001},"[JS|dn.FilePath] FilePath.fromFile(\"https://domain.com/foo/bar//pouet.txt\").uriScheme == \"https\"","These 2 expressions should be EQUAL",[p.uriScheme + " != " + "https"]);
	}
	var p = new dn_FilePath();
	p.parse("https://domain.com/foo/bar//pouet.txt",true);
	if(p.uriAuthority == "domain.com") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"https://domain.com/foo/bar//pouet.txt\").uriAuthority == \"domain.com\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("https://domain.com/foo/bar//pouet.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1002},"[JS|dn.FilePath] FilePath.fromFile(\"https://domain.com/foo/bar//pouet.txt\").uriAuthority == \"domain.com\"","These 2 expressions should be EQUAL",[p.uriAuthority + " != " + "domain.com"]);
	}
	var p = new dn_FilePath();
	p.parse("file://localhost/foo//pouet.txt",true);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "file://localhost/foo/pouet.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... ...File(\"file://localhost/foo//pouet.txt\").full == \"file://localhost/foo/pouet.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file://localhost/foo//pouet.txt",true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1004},"[JS|dn.FilePath] FilePath.f... ...File(\"file://localhost/foo//pouet.txt\").full == \"file://localhost/foo/pouet.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "file://localhost/foo/pouet.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("file:/foo//pouet.txt",true);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "file:/foo/pouet.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:/foo//pouet.txt\").full == \"file:/foo/pouet.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file:/foo//pouet.txt",true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1005},"[JS|dn.FilePath] FilePath.fromFile(\"file:/foo//pouet.txt\").full == \"file:/foo/pouet.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "file:/foo/pouet.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("file:///pouet.txt",true);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "file:/pouet.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"file:///pouet.txt\").full == \"file:/pouet.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file:///pouet.txt",true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1006},"[JS|dn.FilePath] FilePath.fromFile(\"file:///pouet.txt\").full == \"file:/pouet.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "file:/pouet.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("\\\\foo\\bar\\test.txt",true);
	if(p.isWindowsNetworkDrive == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"\\\\\\\\foo\\\\bar\\\\test.txt\").isWindowsNetworkDrive == true" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("\\\\foo\\bar\\test.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1009},"[JS|dn.FilePath] FilePath.fromFile(\"\\\\\\\\foo\\\\bar\\\\test.txt\").isWindowsNetworkDrive == true","These 2 expressions should be EQUAL",[Std.string(p.isWindowsNetworkDrive) + " != " + "true"]);
	}
	var p = new dn_FilePath();
	p.parse("\\\\host-abc5\\dir",false);
	if(p.isWindowsNetworkDrive == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"\\\\\\\\host-abc5\\\\dir\").isWindowsNetworkDrive == true" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("\\\\host-abc5\\dir",false);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1010},"[JS|dn.FilePath] FilePath.fromDir(\"\\\\\\\\host-abc5\\\\dir\").isWindowsNetworkDrive == true","These 2 expressions should be EQUAL",[Std.string(p.isWindowsNetworkDrive) + " != " + "true"]);
	}
	var p = new dn_FilePath();
	p.parse("\\\\host-abc5\\dir",false);
	if(p.convertWindowsNetworkDriveToUri().isWindowsNetworkDrive == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... ...host-abc5\\\\dir\").convertWindowsNetworkDriveToUri().isWindowsNetworkDrive == true" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("\\\\host-abc5\\dir",false);
		var tmp = Std.string(p.convertWindowsNetworkDriveToUri().isWindowsNetworkDrive) + " != " + "true";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1011},"[JS|dn.FilePath] FilePath.f... ...host-abc5\\\\dir\").convertWindowsNetworkDriveToUri().isWindowsNetworkDrive == true","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("\\\\foo\\bar\\test.txt",true);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "\\\\foo\\bar\\test.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"\\\\\\\\foo\\\\bar\\\\test.txt\").full == \"\\\\\\\\foo\\\\bar\\\\test.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("\\\\foo\\bar\\test.txt",true);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1013},"[JS|dn.FilePath] FilePath.fromFile(\"\\\\\\\\foo\\\\bar\\\\test.txt\").full == \"\\\\\\\\foo\\\\bar\\\\test.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "\\\\foo\\bar\\test.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("\\\\foo\\bar\\test.txt",true);
	if(p.uriAuthority == "foo") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromFile(\"\\\\\\\\foo\\\\bar\\\\test.txt\").uriAuthority == \"foo\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("\\\\foo\\bar\\test.txt",true);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1014},"[JS|dn.FilePath] FilePath.fromFile(\"\\\\\\\\foo\\\\bar\\\\test.txt\").uriAuthority == \"foo\"","These 2 expressions should be EQUAL",[p.uriAuthority + " != " + "foo"]);
	}
	var p = new dn_FilePath();
	p.parse("\\\\host-abc5\\dir",false);
	var _this = p;
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "\\\\host-abc5\\dir") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.fromDir(\"\\\\\\\\host-abc5\\\\dir\").full == \"\\\\\\\\host-abc5\\\\dir\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("\\\\host-abc5\\dir",false);
		var _this = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1015},"[JS|dn.FilePath] FilePath.fromDir(\"\\\\\\\\host-abc5\\\\dir\").full == \"\\\\\\\\host-abc5\\\\dir\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "\\\\host-abc5\\dir"]);
	}
	var p = new dn_FilePath();
	p.parse("\\\\foo\\bar\\test.txt",true);
	var _this = p.convertWindowsNetworkDriveToUri();
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "file://foo/bar/test.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... ...\\\\test.txt\").convertWindowsNetworkDriveToUri().full == \"file://foo/bar/test.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("\\\\foo\\bar\\test.txt",true);
		var _this = p.convertWindowsNetworkDriveToUri();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1017},"[JS|dn.FilePath] FilePath.f... ...\\\\test.txt\").convertWindowsNetworkDriveToUri().full == \"file://foo/bar/test.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "file://foo/bar/test.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("\\\\host-abc5\\dir\\test.txt",true);
	var _this = p.convertWindowsNetworkDriveToUri();
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "file://host-abc5/dir/test.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... ....txt\").convertWindowsNetworkDriveToUri().full == \"file://host-abc5/dir/test.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("\\\\host-abc5\\dir\\test.txt",true);
		var _this = p.convertWindowsNetworkDriveToUri();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1018},"[JS|dn.FilePath] FilePath.f... ....txt\").convertWindowsNetworkDriveToUri().full == \"file://host-abc5/dir/test.txt\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "file://host-abc5/dir/test.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("\\\\host-abc5\\dir\\test.txt",true);
	if(p.convertWindowsNetworkDriveToUri().uriAuthority == "host-abc5") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... ...5\\\\dir\\\\test.txt\").convertWindowsNetworkDriveToUri().uriAuthority == \"host-abc5\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("\\\\host-abc5\\dir\\test.txt",true);
		var tmp = p.convertWindowsNetworkDriveToUri().uriAuthority + " != " + "host-abc5";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1019},"[JS|dn.FilePath] FilePath.f... ...5\\\\dir\\\\test.txt\").convertWindowsNetworkDriveToUri().uriAuthority == \"host-abc5\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var p = new dn_FilePath();
	p.parse("\\\\host-abc5\\dir",false);
	var _this = p.convertWindowsNetworkDriveToUri();
	if((_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == "file://host-abc5/dir") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.f... ...ost-abc5\\\\dir\").convertWindowsNetworkDriveToUri().full == \"file://host-abc5/dir\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("\\\\host-abc5\\dir",false);
		var _this = p.convertWindowsNetworkDriveToUri();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1020},"[JS|dn.FilePath] FilePath.f... ...ost-abc5\\\\dir\").convertWindowsNetworkDriveToUri().full == \"file://host-abc5/dir\"","These 2 expressions should be EQUAL",[(_this.isWindowsNetworkDrive && !_this._useWinNetDriveUriFormat ? _this.backslashes ? "\\" : "/" : _this.uriScheme != null ? _this.uriAuthority == null ? "" + _this.uriScheme + ":/" : "" + _this.uriScheme + "://" + _this.uriAuthority + "/" : "") + (_this.directory == null ? "" : _this.fileName == null && _this.extension == null || _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory == null ? null : _this.directory == (_this.backslashes ? "\\" : "/") ? _this.directory : _this.directory + (_this.backslashes ? "\\" : "/")) + ((_this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) == null ? "" : _this.fileName == null && _this.extension == null ? null : (_this.fileName == null ? "" : _this.fileName) + (_this.extension == null ? "" : "." + _this.extension)) + " != " + "file://host-abc5/dir"]);
	}
	var p = new dn_FilePath();
	p.parse("/home//dir/./foo.txt",true);
	var p1 = p;
	if((p1.isWindowsNetworkDrive && !p1._useWinNetDriveUriFormat ? p1.backslashes ? "\\" : "/" : p1.uriScheme != null ? p1.uriAuthority == null ? "" + p1.uriScheme + ":/" : "" + p1.uriScheme + "://" + p1.uriAuthority + "/" : "") + (p1.directory == null ? "" : p1.fileName == null && p1.extension == null || p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory == null ? null : p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory + (p1.backslashes ? "\\" : "/")) + ((p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == null ? "" : p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == "/home/dir/foo.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.cleanUp(\"/home//dir/./foo.txt\", true) == \"/home/dir/foo.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("/home//dir/./foo.txt",true);
		var p1 = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1024},"[JS|dn.FilePath] FilePath.cleanUp(\"/home//dir/./foo.txt\", true) == \"/home/dir/foo.txt\"","These 2 expressions should be EQUAL",[(p1.isWindowsNetworkDrive && !p1._useWinNetDriveUriFormat ? p1.backslashes ? "\\" : "/" : p1.uriScheme != null ? p1.uriAuthority == null ? "" + p1.uriScheme + ":/" : "" + p1.uriScheme + "://" + p1.uriAuthority + "/" : "") + (p1.directory == null ? "" : p1.fileName == null && p1.extension == null || p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory == null ? null : p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory + (p1.backslashes ? "\\" : "/")) + ((p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == null ? "" : p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) + " != " + "/home/dir/foo.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("./home//\\dir/./foo.txt",true);
	var p1 = p;
	if((p1.isWindowsNetworkDrive && !p1._useWinNetDriveUriFormat ? p1.backslashes ? "\\" : "/" : p1.uriScheme != null ? p1.uriAuthority == null ? "" + p1.uriScheme + ":/" : "" + p1.uriScheme + "://" + p1.uriAuthority + "/" : "") + (p1.directory == null ? "" : p1.fileName == null && p1.extension == null || p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory == null ? null : p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory + (p1.backslashes ? "\\" : "/")) + ((p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == null ? "" : p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == "./home/dir/foo.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.cleanUp(\"./home//\\\\dir/./foo.txt\", true) == \"./home/dir/foo.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("./home//\\dir/./foo.txt",true);
		var p1 = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1025},"[JS|dn.FilePath] FilePath.cleanUp(\"./home//\\\\dir/./foo.txt\", true) == \"./home/dir/foo.txt\"","These 2 expressions should be EQUAL",[(p1.isWindowsNetworkDrive && !p1._useWinNetDriveUriFormat ? p1.backslashes ? "\\" : "/" : p1.uriScheme != null ? p1.uriAuthority == null ? "" + p1.uriScheme + ":/" : "" + p1.uriScheme + "://" + p1.uriAuthority + "/" : "") + (p1.directory == null ? "" : p1.fileName == null && p1.extension == null || p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory == null ? null : p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory + (p1.backslashes ? "\\" : "/")) + ((p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == null ? "" : p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) + " != " + "./home/dir/foo.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("//home/dir/foo.txt",true);
	var p1 = p;
	if((p1.isWindowsNetworkDrive && !p1._useWinNetDriveUriFormat ? p1.backslashes ? "\\" : "/" : p1.uriScheme != null ? p1.uriAuthority == null ? "" + p1.uriScheme + ":/" : "" + p1.uriScheme + "://" + p1.uriAuthority + "/" : "") + (p1.directory == null ? "" : p1.fileName == null && p1.extension == null || p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory == null ? null : p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory + (p1.backslashes ? "\\" : "/")) + ((p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == null ? "" : p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == "/home/dir/foo.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.cleanUp(\"//home/dir/foo.txt\", true) == \"/home/dir/foo.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("//home/dir/foo.txt",true);
		var p1 = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1026},"[JS|dn.FilePath] FilePath.cleanUp(\"//home/dir/foo.txt\", true) == \"/home/dir/foo.txt\"","These 2 expressions should be EQUAL",[(p1.isWindowsNetworkDrive && !p1._useWinNetDriveUriFormat ? p1.backslashes ? "\\" : "/" : p1.uriScheme != null ? p1.uriAuthority == null ? "" + p1.uriScheme + ":/" : "" + p1.uriScheme + "://" + p1.uriAuthority + "/" : "") + (p1.directory == null ? "" : p1.fileName == null && p1.extension == null || p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory == null ? null : p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory + (p1.backslashes ? "\\" : "/")) + ((p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == null ? "" : p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) + " != " + "/home/dir/foo.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("file://home/dir/foo.txt",true);
	var p1 = p;
	if((p1.isWindowsNetworkDrive && !p1._useWinNetDriveUriFormat ? p1.backslashes ? "\\" : "/" : p1.uriScheme != null ? p1.uriAuthority == null ? "" + p1.uriScheme + ":/" : "" + p1.uriScheme + "://" + p1.uriAuthority + "/" : "") + (p1.directory == null ? "" : p1.fileName == null && p1.extension == null || p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory == null ? null : p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory + (p1.backslashes ? "\\" : "/")) + ((p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == null ? "" : p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == "file://home/dir/foo.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.cleanUp(\"file://home/dir/foo.txt\", true) == \"file://home/dir/foo.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("file://home/dir/foo.txt",true);
		var p1 = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1027},"[JS|dn.FilePath] FilePath.cleanUp(\"file://home/dir/foo.txt\", true) == \"file://home/dir/foo.txt\"","These 2 expressions should be EQUAL",[(p1.isWindowsNetworkDrive && !p1._useWinNetDriveUriFormat ? p1.backslashes ? "\\" : "/" : p1.uriScheme != null ? p1.uriAuthority == null ? "" + p1.uriScheme + ":/" : "" + p1.uriScheme + "://" + p1.uriAuthority + "/" : "") + (p1.directory == null ? "" : p1.fileName == null && p1.extension == null || p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory == null ? null : p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory + (p1.backslashes ? "\\" : "/")) + ((p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == null ? "" : p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) + " != " + "file://home/dir/foo.txt"]);
	}
	var p = new dn_FilePath();
	p.parse("https://domain.com/foo/bar//pouet.txt",true);
	var p1 = p;
	if((p1.isWindowsNetworkDrive && !p1._useWinNetDriveUriFormat ? p1.backslashes ? "\\" : "/" : p1.uriScheme != null ? p1.uriAuthority == null ? "" + p1.uriScheme + ":/" : "" + p1.uriScheme + "://" + p1.uriAuthority + "/" : "") + (p1.directory == null ? "" : p1.fileName == null && p1.extension == null || p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory == null ? null : p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory + (p1.backslashes ? "\\" : "/")) + ((p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == null ? "" : p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == "https://domain.com/foo/bar/pouet.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.c... .../domain.com/foo/bar//pouet.txt\", true) == \"https://domain.com/foo/bar/pouet.txt\"" + "  <Ok>");
		}
	} else {
		var p = new dn_FilePath();
		p.parse("https://domain.com/foo/bar//pouet.txt",true);
		var p1 = p;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1028},"[JS|dn.FilePath] FilePath.c... .../domain.com/foo/bar//pouet.txt\", true) == \"https://domain.com/foo/bar/pouet.txt\"","These 2 expressions should be EQUAL",[(p1.isWindowsNetworkDrive && !p1._useWinNetDriveUriFormat ? p1.backslashes ? "\\" : "/" : p1.uriScheme != null ? p1.uriAuthority == null ? "" + p1.uriScheme + ":/" : "" + p1.uriScheme + "://" + p1.uriAuthority + "/" : "") + (p1.directory == null ? "" : p1.fileName == null && p1.extension == null || p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory == null ? null : p1.directory == (p1.backslashes ? "\\" : "/") ? p1.directory : p1.directory + (p1.backslashes ? "\\" : "/")) + ((p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) == null ? "" : p1.fileName == null && p1.extension == null ? null : (p1.fileName == null ? "" : p1.fileName) + (p1.extension == null ? "" : "." + p1.extension)) + " != " + "https://domain.com/foo/bar/pouet.txt"]);
	}
	if(dn_FilePath.cleanUpFileName("My file/name is*cool:.txt") == "My file_name is_cool_.txt") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.FilePath] FilePath.cleanUpFileName(\"My file/name is*cool:.txt\") == \"My file_name is_cool_.txt\"" + "  <Ok>");
		}
	} else {
		var tmp = dn_FilePath.cleanUpFileName("My file/name is*cool:.txt") + " != " + "My file_name is_cool_.txt";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/FilePath.hx", line : 1030},"[JS|dn.FilePath] FilePath.cleanUpFileName(\"My file/name is*cool:.txt\") == \"My file_name is_cool_.txt\"","These 2 expressions should be EQUAL",[tmp]);
	}
};
dn_FilePath.prototype = {
	init: function() {
		this.backslashes = false;
		this.directory = null;
		this.set_fileName(null);
		this.set_extension(null);
	}
	,isEmpty: function() {
		return ((this.isWindowsNetworkDrive && !this._useWinNetDriveUriFormat ? this.backslashes ? "\\" : "/" : this.uriScheme != null ? this.uriAuthority == null ? "" + this.uriScheme + ":/" : "" + this.uriScheme + "://" + this.uriAuthority + "/" : "") + (this.directory == null ? "" : this.fileName == null && this.extension == null || this.directory == (this.backslashes ? "\\" : "/") ? this.directory : this.directory == null ? null : this.directory == (this.backslashes ? "\\" : "/") ? this.directory : this.directory + (this.backslashes ? "\\" : "/")) + ((this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension)) == null ? "" : this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension))).length == 0;
	}
	,clone: function() {
		var p = new dn_FilePath();
		p.backslashes = this.backslashes;
		p.directory = this.directory;
		p.set_fileName(this.fileName);
		p.set_extension(this.extension);
		return p;
	}
	,removeTrailingSlashes: function(path) {
		while(path.charAt(path.length - 1) == (this.backslashes ? "\\" : "/")) path = HxOverrides.substr(path,0,path.length - 1);
		return path;
	}
	,parseFilePath: function(filePath) {
		this.parse(filePath,true);
		return this;
	}
	,appendDirectory: function(extraDirs) {
		if(extraDirs == null || extraDirs.length == 0) {
			return this;
		}
		var p = new dn_FilePath();
		p.parse(extraDirs,false);
		var fp = p;
		if(fp.directory != null) {
			if(this.directory == null) {
				this.directory = fp.directory;
			} else {
				this.directory += (this.backslashes ? "\\" : "/") + fp.directory;
			}
		}
		return this;
	}
	,prependDirectory: function(extraDirs) {
		if(extraDirs == null || extraDirs.length == 0) {
			return this;
		}
		var p = new dn_FilePath();
		p.parse(extraDirs,false);
		var fp = p;
		if(fp.directory != null) {
			if(this.directory == null) {
				this.directory = fp.directory;
			} else {
				this.directory = fp.directory + (this.backslashes ? "\\" : "/") + this.directory;
			}
		}
		return this;
	}
	,setDirectory: function(dir) {
		this.directory = dir;
		return this;
	}
	,parseDirPath: function(dirPath) {
		this.parse(dirPath,false);
		return this;
	}
	,useSlashes: function() {
		if(this.isWindowsNetworkDrive && !this._useWinNetDriveUriFormat) {
			return this;
		} else {
			if(this.directory != null) {
				this.directory = StringTools.replace(this.directory,"\\","/");
			}
			this.backslashes = false;
			return this;
		}
	}
	,useBackslashes: function() {
		if(this.directory != null) {
			this.directory = StringTools.replace(this.directory,"/","\\");
		}
		this.backslashes = true;
		return this;
	}
	,convertWindowsNetworkDriveToUri: function() {
		if(!this._useWinNetDriveUriFormat && this.isWindowsNetworkDrive) {
			this._useWinNetDriveUriFormat = true;
			this.removeFirstDirectory();
			this.removeFirstDirectory();
			this.useSlashes();
		}
		return this;
	}
	,hasDriveLetter: function() {
		return this.getDriveLetter() != null;
	}
	,getDriveLetter: function(forceLowerCase) {
		if(forceLowerCase == null) {
			forceLowerCase = true;
		}
		var letterReg = this.uriScheme != null ? new EReg("([^a-z]|^)([a-z])[:$][/\\\\]?","gi") : new EReg("([^a-z]|^)([a-z]):[/\\\\]?","gi");
		if(this.directory != null && letterReg.match(this.directory)) {
			if(forceLowerCase) {
				return letterReg.matched(2).toLowerCase();
			} else {
				return letterReg.matched(2);
			}
		} else {
			return null;
		}
	}
	,isUri: function() {
		return this.uriScheme != null;
	}
	,isAbsolute: function() {
		if(!(this.uriScheme != null || this.directory != null && this.getDirectoryArray()[0] == "")) {
			return this.getDriveLetter() != null;
		} else {
			return true;
		}
	}
	,makeRelativeTo: function(dirPath) {
		var cur = this.getDirectoryArray();
		var p = new dn_FilePath();
		p.parse(dirPath,false);
		var other = p;
		if(this.uriScheme != other.uriScheme || this.getDriveLetter() != other.getDriveLetter()) {
			return this;
		}
		var ref = other.getDirectoryArray();
		if(cur[0] != ref[0]) {
			return this;
		}
		while(cur.length > 0 && ref.length > 0 && cur[0] == ref[0]) {
			cur.shift();
			ref.shift();
		}
		var i = 0;
		while(i < ref.length) {
			cur.splice(0,0,"..");
			++i;
		}
		this.directory = cur.length == 0 ? null : cur.join(this.backslashes ? "\\" : "/");
		return this;
	}
	,parseFileName: function(raw) {
		if(raw.indexOf(".") < 0) {
			this.set_fileName(raw);
			this.set_extension(null);
		} else if(raw.indexOf(".") == 0 && raw.lastIndexOf(".") == 0) {
			this.set_fileName(null);
			this.set_extension(HxOverrides.substr(raw,1,null));
		} else {
			this.set_fileName(HxOverrides.substr(raw,0,raw.lastIndexOf(".")));
			this.set_extension(HxOverrides.substr(raw,raw.lastIndexOf(".") + 1,null));
		}
	}
	,parse: function(rawPath,containsFileName) {
		this.init();
		if(rawPath == null || rawPath.length == 0) {
			return;
		}
		switch(dn_FilePath.SLASH_MODE._hx_index) {
		case 0:
			break;
		case 1:
			rawPath = StringTools.replace(rawPath,"/","\\");
			break;
		case 2:
			rawPath = StringTools.replace(rawPath,"\\","/");
			break;
		}
		if(rawPath.indexOf("\\") >= 0) {
			if(rawPath.indexOf("/") >= 0) {
				this.backslashes = rawPath.indexOf("\\") < rawPath.indexOf("/");
			} else {
				this.backslashes = true;
			}
		}
		rawPath = StringTools.replace(rawPath,this.backslashes ? "/" : "\\",this.backslashes ? "\\" : "/");
		if(containsFileName && rawPath.indexOf(this.backslashes ? "\\" : "/") < 0) {
			this.parseFileName(rawPath);
		} else {
			var uriSchemeReg = new EReg("^([a-z]{2,}):[/]{2}(.*?)/|^([a-z]{2,}):[/]{1}","gi");
			if(uriSchemeReg.match(rawPath)) {
				if(uriSchemeReg.matched(3) != null) {
					this.uriScheme = uriSchemeReg.matched(3);
					this.uriAuthority = null;
				} else {
					this.uriScheme = uriSchemeReg.matched(1);
					this.uriAuthority = uriSchemeReg.matched(2);
					if(this.uriAuthority == "") {
						this.uriAuthority = null;
					}
				}
				rawPath = uriSchemeReg.matchedRight();
			}
			this.isWindowsNetworkDrive = false;
			if(dn_FilePath.WIN_NETWORK_DRIVE_REG.match(rawPath)) {
				this.isWindowsNetworkDrive = true;
				this.uriScheme = "file";
				this.uriAuthority = dn_FilePath.WIN_NETWORK_DRIVE_REG.matched(1);
			}
			while(rawPath.indexOf((this.backslashes ? "\\" : "/") + (this.backslashes ? "\\" : "/")) >= 0) rawPath = StringTools.replace(rawPath,(this.backslashes ? "\\" : "/") + (this.backslashes ? "\\" : "/"),this.backslashes ? "\\" : "/");
			if(!containsFileName && rawPath.length > 1 && rawPath.charAt(rawPath.length - 1) == (this.backslashes ? "\\" : "/")) {
				rawPath = HxOverrides.substr(rawPath,0,rawPath.length - 1);
			}
			if(rawPath.indexOf(this.backslashes ? "\\" : "/") < 0) {
				this.directory = containsFileName ? null : rawPath;
			} else {
				this.directory = containsFileName ? HxOverrides.substr(rawPath,0,rawPath.lastIndexOf(this.backslashes ? "\\" : "/")) : rawPath;
				if(this.directory.length == 0 && containsFileName && rawPath.charAt(0) == (this.backslashes ? "\\" : "/")) {
					this.directory = "/";
				} else if(this.directory.length == 0) {
					this.directory = null;
				}
			}
			if(containsFileName && rawPath.lastIndexOf(this.backslashes ? "\\" : "/") < rawPath.length - 1) {
				var rawFile = HxOverrides.substr(rawPath,rawPath.lastIndexOf(this.backslashes ? "\\" : "/") + 1,null);
				this.parseFileName(rawFile);
			}
			var dirs = this.getDirectoryArray();
			if(dirs.length > 0) {
				var i = 0;
				while(i < dirs.length) if(dirs[i] == ".." && i > 0 && dirs[i - 1] != ".." && dirs[i - 1] != "") {
					dirs.splice(i - 1,2);
					--i;
				} else {
					++i;
				}
				if(dirs.length == 0) {
					this.directory = null;
				} else if(dirs.length == 1 && dirs[0] == "") {
					this.directory = this.backslashes ? "\\" : "/";
				} else {
					this.directory = dirs.join(this.backslashes ? "\\" : "/");
				}
			}
			var dirs = this.getDirectoryArray();
			if(dirs.length > 1) {
				var i = 1;
				while(i < dirs.length) if(dirs[i] == ".") {
					dirs.splice(i,1);
				} else {
					++i;
				}
				if(dirs.length == 0) {
					this.directory = null;
				} else {
					this.directory = dirs.join(this.backslashes ? "\\" : "/");
				}
			}
			if(this.directory != (this.backslashes ? "\\" : "/") && this.directory != null) {
				var ignore = 0;
				if(this.getDriveLetter() != null) {
					++ignore;
				}
				var dirs = this.getDirectoryArray();
				var _g = 0;
				var _g1 = dirs.length;
				while(_g < _g1) {
					var i = _g++;
					dirs[i] = i < ignore ? this.sanitize(dirs[i],true) : this.sanitize(dirs[i]);
				}
				this.directory = dirs.join(this.backslashes ? "\\" : "/");
			}
		}
	}
	,slash: function() {
		if(this.backslashes) {
			return "\\";
		} else {
			return "/";
		}
	}
	,sanitize: function(v,ignoreDoubleDots) {
		if(ignoreDoubleDots == null) {
			ignoreDoubleDots = false;
		}
		if(ignoreDoubleDots) {
			var _this_r = new RegExp("[*{}/\\\\<>?|]","g".split("u").join(""));
			return v.replace(_this_r,"_");
		} else {
			var _this_r = new RegExp("[*{}/\\\\<>?|:]","g".split("u").join(""));
			return v.replace(_this_r,"_");
		}
	}
	,set_extension: function(v) {
		if(v == null) {
			return this.extension = null;
		} else {
			while(v.charAt(0) == ".") v = HxOverrides.substr(v,1,null);
			v = StringTools.replace(v," ","_");
			if(v.length == 0) {
				return this.extension = null;
			}
			return this.extension = this.sanitize(v);
		}
	}
	,set_fileName: function(v) {
		if(v == null) {
			return this.fileName = null;
		}
		v = this.sanitize(v);
		return this.fileName = v;
	}
	,get_fileWithExt: function() {
		if(this.fileName == null && this.extension == null) {
			return null;
		} else {
			return (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension);
		}
	}
	,set_fileWithExt: function(v) {
		if(v == null) {
			this.set_fileName(null);
			this.set_extension(null);
		} else {
			v = this.sanitize(v);
			this.parseFileName(v);
		}
		if(this.fileName == null && this.extension == null) {
			return null;
		} else {
			return (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension);
		}
	}
	,get_extWithDot: function() {
		if(this.extension == null) {
			return null;
		} else {
			return "." + this.extension;
		}
	}
	,get_full: function() {
		return (this.isWindowsNetworkDrive && !this._useWinNetDriveUriFormat ? this.backslashes ? "\\" : "/" : this.uriScheme != null ? this.uriAuthority == null ? "" + this.uriScheme + ":/" : "" + this.uriScheme + "://" + this.uriAuthority + "/" : "") + (this.directory == null ? "" : this.fileName == null && this.extension == null || this.directory == (this.backslashes ? "\\" : "/") ? this.directory : this.directory == null ? null : this.directory == (this.backslashes ? "\\" : "/") ? this.directory : this.directory + (this.backslashes ? "\\" : "/")) + ((this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension)) == null ? "" : this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension));
	}
	,get_directoryWithSlash: function() {
		if(this.directory == null) {
			return null;
		} else if(this.directory == (this.backslashes ? "\\" : "/")) {
			return this.directory;
		} else {
			return this.directory + (this.backslashes ? "\\" : "/");
		}
	}
	,getDirectoryArray: function() {
		if(this.directory == null) {
			return [];
		} else if(this.directory == (this.backslashes ? "\\" : "/")) {
			return [this.backslashes ? "\\" : "/"];
		} else {
			return this.directory.split(this.backslashes ? "\\" : "/");
		}
	}
	,getSubDirectories: function(discardDriveLetter) {
		var parts = this.getDirectoryArray();
		if(parts.length == 0) {
			return [];
		}
		var subs = [];
		var _g = 0;
		var _g1 = parts.length;
		while(_g < _g1) {
			var i = _g++;
			if(discardDriveLetter && i == 0 && this.getDriveLetter() != null) {
				continue;
			}
			var sub = [];
			var _g2 = 0;
			var _g3 = i + 1;
			while(_g2 < _g3) {
				var j = _g2++;
				sub.push(parts[j]);
			}
			var p = sub.join(this.backslashes ? "\\" : "/");
			if(p == "") {
				p = this.backslashes ? "\\" : "/";
			}
			subs.push(p);
		}
		return subs;
	}
	,getDirectoryAndFileArray: function() {
		var out = this.getDirectoryArray();
		if((this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension)) != null) {
			out.push(this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension));
		}
		return out;
	}
	,getLastDirectory: function() {
		if(this.directory == null) {
			return null;
		}
		var arr = this.getDirectoryArray();
		return arr[arr.length - 1];
	}
	,removeLastDirectory: function() {
		if(this.directory == null) {
			return this;
		}
		var arr = this.getDirectoryArray();
		arr.pop();
		if(arr.length == 0) {
			this.directory = null;
		} else {
			this.directory = arr.join(this.backslashes ? "\\" : "/");
		}
		return this;
	}
	,getFirstDirectory: function() {
		if(this.directory == null) {
			return null;
		}
		var arr = this.getDirectoryArray();
		if(this.getDriveLetter() != null) {
			return arr[1];
		} else {
			return arr[0];
		}
	}
	,removeFirstDirectory: function() {
		if(this.directory == null) {
			return this;
		}
		var arr = this.getDirectoryArray();
		if(this.getDriveLetter() != null) {
			arr.splice(1,1);
		} else {
			arr.shift();
		}
		if(arr.length == 0) {
			this.directory = null;
		} else {
			this.directory = arr.join(this.backslashes ? "\\" : "/");
		}
		return this;
	}
	,toString: function() {
		return (this.isWindowsNetworkDrive && !this._useWinNetDriveUriFormat ? this.backslashes ? "\\" : "/" : this.uriScheme != null ? this.uriAuthority == null ? "" + this.uriScheme + ":/" : "" + this.uriScheme + "://" + this.uriAuthority + "/" : "") + (this.directory == null ? "" : this.fileName == null && this.extension == null || this.directory == (this.backslashes ? "\\" : "/") ? this.directory : this.directory == null ? null : this.directory == (this.backslashes ? "\\" : "/") ? this.directory : this.directory + (this.backslashes ? "\\" : "/")) + ((this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension)) == null ? "" : this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension));
	}
	,debug: function() {
		return "dir=" + this.directory + ", fileName=" + this.fileName + ", ext=" + this.extension + ", uri=" + this.uriScheme + "+" + this.uriAuthority + ", drive=" + this.getDriveLetter();
	}
	,hasMultipleExtensions: function() {
		if((this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension)) != null) {
			return (this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension)).indexOf(".") != (this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension)).lastIndexOf(".");
		} else {
			return false;
		}
	}
	,getMultipleExtensions: function() {
		if((this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension)) == null) {
			return [];
		}
		var parts = (this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension)).split(".");
		parts.shift();
		return parts;
	}
	,fromString: function(v) {
		var p = new dn_FilePath();
		p.parse(v,true);
		return p;
	}
	,getFull: function() {
		return (this.isWindowsNetworkDrive && !this._useWinNetDriveUriFormat ? this.backslashes ? "\\" : "/" : this.uriScheme != null ? this.uriAuthority == null ? "" + this.uriScheme + ":/" : "" + this.uriScheme + "://" + this.uriAuthority + "/" : "") + (this.directory == null ? "" : this.fileName == null && this.extension == null || this.directory == (this.backslashes ? "\\" : "/") ? this.directory : this.directory == null ? null : this.directory == (this.backslashes ? "\\" : "/") ? this.directory : this.directory + (this.backslashes ? "\\" : "/")) + ((this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension)) == null ? "" : this.fileName == null && this.extension == null ? null : (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension));
	}
	,getFileAndExt: function() {
		if(this.fileName == null && this.extension == null) {
			return null;
		} else {
			return (this.fileName == null ? "" : this.fileName) + (this.extension == null ? "" : "." + this.extension);
		}
	}
	,get_path: function() {
		return this.directory;
	}
	,get_file: function() {
		return this.fileName;
	}
	,get_ext: function() {
		return this.extension;
	}
	,set_ext: function(v) {
		return this.set_extension(v);
	}
	,__class__: dn_FilePath
};
var dn_IdentifyFormat = $hxEnums["dn.IdentifyFormat"] = { __ename__:"dn.IdentifyFormat",__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"dn.IdentifyFormat",toString:$estr}
	,Png: {_hx_name:"Png",_hx_index:1,__enum__:"dn.IdentifyFormat",toString:$estr}
	,Jpeg: {_hx_name:"Jpeg",_hx_index:2,__enum__:"dn.IdentifyFormat",toString:$estr}
	,Gif: {_hx_name:"Gif",_hx_index:3,__enum__:"dn.IdentifyFormat",toString:$estr}
	,Bmp: {_hx_name:"Bmp",_hx_index:4,__enum__:"dn.IdentifyFormat",toString:$estr}
	,Aseprite: {_hx_name:"Aseprite",_hx_index:5,__enum__:"dn.IdentifyFormat",toString:$estr}
};
dn_IdentifyFormat.__constructs__ = [dn_IdentifyFormat.Unknown,dn_IdentifyFormat.Png,dn_IdentifyFormat.Jpeg,dn_IdentifyFormat.Gif,dn_IdentifyFormat.Bmp,dn_IdentifyFormat.Aseprite];
dn_IdentifyFormat.__empty_constructs__ = [dn_IdentifyFormat.Unknown,dn_IdentifyFormat.Png,dn_IdentifyFormat.Jpeg,dn_IdentifyFormat.Gif,dn_IdentifyFormat.Bmp,dn_IdentifyFormat.Aseprite];
var dn_Identify = function() { };
$hxClasses["dn.Identify"] = dn_Identify;
dn_Identify.__name__ = "dn.Identify";
dn_Identify.getType = function(b) {
	if(b == null) {
		return dn_IdentifyFormat.Unknown;
	}
	var _g = 0;
	var _g1 = dn_Identify.headers;
	while(_g < _g1.length) {
		var h = _g1[_g];
		++_g;
		if(dn_Identify.matchHeader(b,h)) {
			return h.id;
		}
	}
	return dn_IdentifyFormat.Unknown;
};
dn_Identify.is64BitsExe = function(first1024bytes) {
	if(first1024bytes == null) {
		return false;
	}
	var _this = "PE".split("");
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = HxOverrides.cca(_this[i],0);
	}
	var header = result;
	var i = 0;
	while(i < first1024bytes.length - 6) if(first1024bytes.b[i] == header[0] && first1024bytes.b[i + 1] == header[1] && first1024bytes.getUInt16(i + 4) == 34404) {
		return true;
	} else {
		++i;
	}
	return false;
};
dn_Identify.matchHeader = function(b,h) {
	var skip = h.skipBytes == null ? 0 : h.skipBytes;
	var _g = 0;
	var _g1 = h.magic.length;
	while(_g < _g1) {
		var i = _g++;
		if(i + skip >= b.length || h.magic[i] >= 0 && h.magic[i] != b.b[i + skip]) {
			return false;
		}
	}
	return true;
};
var dn_ImageDecoder = function() { };
$hxClasses["dn.ImageDecoder"] = dn_ImageDecoder;
dn_ImageDecoder.__name__ = "dn.ImageDecoder";
dn_ImageDecoder.decode = function(fileContent) {
	dn_ImageDecoder.lastError = null;
	try {
		switch(dn_Identify.getType(fileContent)._hx_index) {
		case 1:
			return dn_ImageDecoder.decodePng(fileContent);
		case 2:
			return dn_ImageDecoder.decodeJpeg(fileContent);
		case 3:
			return dn_ImageDecoder.decodeGif(fileContent);
		case 5:
			throw haxe_Exception.thrown("[ImageDecoder] Aseprite decoding requires both \"heaps-aseprite\" and \"ase\" libs (run \"haxelib install ase\" and \"haxelib install heaps-aseprite\").");
		default:
			return null;
		}
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		if(typeof(_g1) == "string") {
			var err = _g1;
			dn_ImageDecoder.lastError = err;
			return null;
		} else {
			throw _g;
		}
	}
};
dn_ImageDecoder.decodePixels = function(fileContent) {
	var img = dn_ImageDecoder.decode(fileContent);
	if(img == null) {
		return null;
	} else {
		return new hxd_Pixels(img.width,img.height,img.decodedBytes,hxd_PixelFormat.BGRA);
	}
};
dn_ImageDecoder.decodeTexture = function(fileContent) {
	var pixels = dn_ImageDecoder.decodePixels(fileContent);
	if(pixels == null) {
		return null;
	} else {
		return h3d_mat_Texture.fromPixels(pixels);
	}
};
dn_ImageDecoder.decodeTile = function(fileContent) {
	var pixels = dn_ImageDecoder.decodePixels(fileContent);
	if(pixels == null) {
		return null;
	} else {
		return h2d_Tile.fromPixels(pixels);
	}
};
dn_ImageDecoder.decodePng = function(b) {
	try {
		var i = new haxe_io_BytesInput(b);
		var reader = new format_png_Reader(i);
		var data = reader.read();
		var wid = 0;
		var hei = 0;
		var _g_head = data.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e._hx_index == 1) {
				var h = e.h;
				wid = h.width;
				hei = h.height;
			}
		}
		var _g_head = data.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e._hx_index == 2) {
				var bytes = e.b;
				var dst = new haxe_io_Bytes(new ArrayBuffer(wid * hei * 4));
				format_png_Tools.extract32(data,dst,false);
				return { width : wid, height : hei, decodedBytes : dst};
			}
		}
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		throw haxe_Exception.thrown("Failed to read PNG, err=" + Std.string(e));
	}
	return null;
};
dn_ImageDecoder.decodeGif = function(b) {
	try {
		var i = new haxe_io_BytesInput(b);
		var reader = new format_gif_Reader(i);
		var data = reader.read();
		return { width : data.logicalScreenDescriptor.width, height : data.logicalScreenDescriptor.height, decodedBytes : format_gif_Tools.extractFullBGRA(data,0)};
	} catch( _g ) {
		throw haxe_Exception.thrown("Failed to read GIF");
	}
};
dn_ImageDecoder.decodeJpeg = function(encoded) {
	var d = hxd_res_NanoJpeg.decode(encoded);
	return { width : d.width, height : d.height, decodedBytes : d.pixels};
};
var dn_WeekDay = $hxEnums["dn.WeekDay"] = { __ename__:"dn.WeekDay",__constructs__:null
	,Sunday: {_hx_name:"Sunday",_hx_index:0,__enum__:"dn.WeekDay",toString:$estr}
	,Monday: {_hx_name:"Monday",_hx_index:1,__enum__:"dn.WeekDay",toString:$estr}
	,Tuesday: {_hx_name:"Tuesday",_hx_index:2,__enum__:"dn.WeekDay",toString:$estr}
	,Wednesday: {_hx_name:"Wednesday",_hx_index:3,__enum__:"dn.WeekDay",toString:$estr}
	,Thursday: {_hx_name:"Thursday",_hx_index:4,__enum__:"dn.WeekDay",toString:$estr}
	,Friday: {_hx_name:"Friday",_hx_index:5,__enum__:"dn.WeekDay",toString:$estr}
	,Saturday: {_hx_name:"Saturday",_hx_index:6,__enum__:"dn.WeekDay",toString:$estr}
};
dn_WeekDay.__constructs__ = [dn_WeekDay.Sunday,dn_WeekDay.Monday,dn_WeekDay.Tuesday,dn_WeekDay.Wednesday,dn_WeekDay.Thursday,dn_WeekDay.Friday,dn_WeekDay.Saturday];
dn_WeekDay.__empty_constructs__ = [dn_WeekDay.Sunday,dn_WeekDay.Monday,dn_WeekDay.Tuesday,dn_WeekDay.Wednesday,dn_WeekDay.Thursday,dn_WeekDay.Friday,dn_WeekDay.Saturday];
var dn_Lib = function() { };
$hxClasses["dn.Lib"] = dn_Lib;
dn_Lib.__name__ = "dn.Lib";
dn_Lib.p = function(v) {
	dn_Lib.println(v);
};
dn_Lib.println = function(v) {
	console.log(Std.string(v));
};
dn_Lib.print = function(v) {
	console.log(Std.string(v));
};
dn_Lib.printArray = function(v) {
	var _g = 0;
	while(_g < v.length) {
		var e = v[_g];
		++_g;
		dn_Lib.println(e);
	}
};
dn_Lib.safeEscape = function(str,escapedChar) {
	var r_r = new RegExp("([^\\\\]|^)\\" + escapedChar,"gim".split("u").join(""));
	return str.replace(r_r,"$1\\" + escapedChar);
};
dn_Lib.countDaysUntil = function(now,day) {
	var delta = day._hx_index - now.getDay();
	if(delta < 0) {
		return 7 + delta;
	} else {
		return delta;
	}
};
dn_Lib.getWeekDay = function(date) {
	return Type.createEnumIndex(dn_WeekDay,date.getDay());
};
dn_Lib.setTime = function(date,h,m,s) {
	if(s == null) {
		s = 0;
	}
	if(m == null) {
		m = 0;
	}
	var str = "%Y-%m-%d " + StringTools.lpad("" + h,"0",2) + ":" + StringTools.lpad("" + m,"0",2) + ":" + StringTools.lpad("" + s,"0",2);
	return HxOverrides.strDate(DateTools.format(date,str));
};
dn_Lib.countDeltaDays = function(now,next) {
	var str = "%Y-%m-%d " + StringTools.lpad("" + 5,"0",2) + ":" + StringTools.lpad("" + 0,"0",2) + ":" + StringTools.lpad("" + 0,"0",2);
	var now1 = HxOverrides.strDate(DateTools.format(now,str));
	var str = "%Y-%m-%d " + StringTools.lpad("" + 5,"0",2) + ":" + StringTools.lpad("" + 0,"0",2) + ":" + StringTools.lpad("" + 0,"0",2);
	var next1 = HxOverrides.strDate(DateTools.format(next,str));
	var x = (next1.getTime() - now1.getTime()) / 86400000.;
	return (x | 0) + (x >= 0 || x == (x | 0) ? 0 : -1);
};
dn_Lib.leadingZeros = function(s,zeros) {
	if(zeros == null) {
		zeros = 2;
	}
	var str = Std.string(s);
	while(str.length < zeros) str = "0" + str;
	return str;
};
dn_Lib.wtrim = function(str) {
	if(str == null) {
		return "";
	} else {
		str = str.replace(dn_Lib.L_WHITESPACE_TRIM.r,"");
		str = str.replace(dn_Lib.R_WHITESPACE_TRIM.r,"");
		return str;
	}
};
dn_Lib.repeatChar = function(c,n) {
	var out = "";
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		out += c;
	}
	return out;
};
dn_Lib.padLeft = function(str,minLen,padChar) {
	if(padChar == null) {
		padChar = " ";
	}
	while(str.length < minLen) str = padChar + str;
	return str;
};
dn_Lib.padRight = function(str,minLen,padChar) {
	if(padChar == null) {
		padChar = " ";
	}
	while(str.length < minLen) str += padChar;
	return str;
};
dn_Lib.padCenter = function(str,minLen,padChar) {
	if(padChar == null) {
		padChar = " ";
	}
	var side = true;
	while(str.length < minLen) {
		if(side) {
			str += padChar;
		} else {
			str = padChar + str;
		}
		side = !side;
	}
	return str;
};
dn_Lib.redirectTracesToH2dConsole = function(c) {
	haxe_Log.trace = function(m,pos) {
		if(pos != null && pos.customParams == null) {
			pos.customParams = ["debug"];
		}
		c.log(pos.fileName + "(" + pos.lineNumber + ") : " + Std.string(m));
	};
};
dn_Lib.shuffleArray = function(arr,randFunc) {
	var m = arr.length;
	var i = 0;
	var tmp = null;
	while(m > 0) {
		i = randFunc(m--);
		tmp = arr[m];
		arr[m] = arr[i];
		arr[i] = tmp;
	}
};
dn_Lib.shuffleVector = function(arr,randFunc) {
	var m = arr.length;
	var i = 0;
	var tmp = null;
	while(m > 0) {
		i = randFunc(m);
		--m;
		tmp = arr[m];
		arr[m] = arr[i];
		arr[i] = tmp;
	}
};
dn_Lib.findInArray = function(arr,checkElement,defaultIfNotFound) {
	var _g = 0;
	while(_g < arr.length) {
		var e = arr[_g];
		++_g;
		if(checkElement(e)) {
			return e;
		}
	}
	return defaultIfNotFound;
};
dn_Lib.arrayContains = function(arr,v,checkElement) {
	var _g = 0;
	while(_g < arr.length) {
		var e = arr[_g];
		++_g;
		if(checkElement != null && checkElement(e) || e == v) {
			return true;
		}
	}
	return false;
};
dn_Lib.findBestInArray = function(arr,scoreElement) {
	if(arr.length == 0) {
		return null;
	}
	var best = arr[0];
	var _g = 0;
	while(_g < arr.length) {
		var e = arr[_g];
		++_g;
		if(scoreElement(e) > scoreElement(best)) {
			best = e;
		}
	}
	return best;
};
dn_Lib.findMostFrequentValueInArray = function(arr,isEqual) {
	if(arr.length == 0) {
		return null;
	}
	var bestCount = 1;
	var best = arr[0];
	var _g = 0;
	while(_g < arr.length) {
		var e = arr[_g];
		++_g;
		if(isEqual == null && e == best || isEqual != null && isEqual(e,best)) {
			continue;
		}
		var count = 0;
		var _g1 = 0;
		while(_g1 < arr.length) {
			var ee = arr[_g1];
			++_g1;
			if(isEqual == null && ee == e || isEqual != null && isEqual(e,ee)) {
				++count;
			}
		}
		if(count > bestCount) {
			bestCount = count;
			best = e;
		}
	}
	return best;
};
dn_Lib.randomSpread = function(total,nbStacks,maxStackValue,randFunc) {
	if(total <= 0 || nbStacks <= 0) {
		return [];
	}
	if(maxStackValue != null && total / nbStacks > maxStackValue) {
		var a = [];
		var _g = 0;
		var _g1 = nbStacks;
		while(_g < _g1) {
			var i = _g++;
			a.push(maxStackValue);
		}
		return a;
	}
	if(nbStacks > total) {
		var a = [];
		var _g = 0;
		var _g1 = total;
		while(_g < _g1) {
			var i = _g++;
			a.push(1);
		}
		return a;
	}
	var plist = [];
	var _g = 0;
	var _g1 = nbStacks;
	while(_g < _g1) {
		var i = _g++;
		plist[i] = 1;
	}
	var remain = total - plist.length;
	while(remain > 0) {
		var x = total * (randFunc(8) + 1) / 100;
		var move;
		if(x > .0) {
			var t = x + .5 | 0;
			move = t < x ? t + 1 : t;
		} else if(x < .0) {
			var t1 = x - .5 | 0;
			move = t1 < x ? t1 + 1 : t1;
		} else {
			move = 0;
		}
		if(move > remain) {
			move = remain;
		}
		var p = randFunc(nbStacks);
		if(maxStackValue != null && plist[p] + move > maxStackValue) {
			move = maxStackValue - plist[p];
		}
		plist[p] += move;
		remain -= move;
	}
	return plist;
};
dn_Lib.replaceTag = function(str,char,open,close) {
	var char1 = "\\" + char.split("").join("\\");
	var re = char1 + "([^" + char1 + "]+)" + char1;
	try {
		var _this_r = new RegExp(re,"g".split("u").join(""));
		return str.replace(_this_r,open + "$1" + close);
	} catch( _g ) {
		if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
			return str;
		} else {
			throw _g;
		}
	}
};
dn_Lib.getNextPower2_32bits = function(n) {
	--n;
	n |= n >> 1;
	n |= n >> 2;
	n |= n >> 4;
	n |= n >> 8;
	n |= n >> 16;
	return n + 1;
};
dn_Lib.getNextPower2_8bits = function(n) {
	--n;
	n |= n >> 1;
	n |= n >> 2;
	n |= n >> 4;
	return n + 1;
};
dn_Lib.rnd = function(min,max,sign) {
	if(sign == null) {
		sign = false;
	}
	if(sign) {
		return (min + Math.random() * (max - min)) * (Std.random(2) * 2 - 1);
	} else {
		return min + Math.random() * (max - min);
	}
};
dn_Lib.irnd = function(min,max,sign) {
	if(sign == null) {
		sign = false;
	}
	if(sign) {
		return (min + Std.random(max - min + 1)) * (Std.random(2) * 2 - 1);
	} else {
		return min + Std.random(max - min + 1);
	}
};
dn_Lib.prettyTime = function(t) {
	if(t <= 31536000000.) {
		var s = (t < 0 ? -t : t) / 1000;
		var m = s / 60;
		var h = m / 60;
		h = h % 24 | 0;
		var tmp = (t < 0 ? "-" : "") + (h > 0 ? h + "h " : "");
		var str = Std.string(m % 60 | 0);
		while(str.length < 2) str = "0" + str;
		var tmp1 = tmp + str + "m ";
		var str = Std.string(s % 60 | 0);
		while(str.length < 2) str = "0" + str;
		return tmp1 + str + "s";
	} else {
		return DateTools.format(new Date(t),"%Hh %Mm %Ss (%Y-%m-%d)");
	}
};
dn_Lib.ludumProtection = function(p,allowLocal) {
	if(allowLocal == null) {
		allowLocal = true;
	}
	var ok = false;
	var s = "d" + "e" + "e" + "p" + "" + "n" + "i" + "" + "g" + "" + "h" + "t";
	var d = window.document.URL;
	ok = d.indexOf(s + "." + "n" + "e" + "t") >= 0 || allowLocal && d.indexOf("file://") == 0;
	ok = true;
	if(!ok) {
		p.delayer.addS(null,function() {
			p.cd = null;
		},4 + Math.random() * 3);
	}
	return ok;
};
dn_Lib.getEnumMetaFloat = function(e,varName,def) {
	if(def == null) {
		def = 0.;
	}
	var meta = haxe_rtti_Meta.getFields(Type.getEnum(e));
	if(meta == null) {
		return def;
	}
	var f = Reflect.field(meta,$hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name);
	if(f == null || !Object.prototype.hasOwnProperty.call(f,varName) || typeof(Reflect.field(f,varName)[0]) != "number") {
		return def;
	}
	var v = Reflect.field(f,varName)[0];
	if(isNaN(v)) {
		return def;
	} else {
		return v;
	}
};
dn_Lib.getEnumMetaInt = function(e,varName,def) {
	if(def == null) {
		def = 0;
	}
	return dn_Lib.getEnumMetaFloat(e,varName,def) | 0;
};
dn_Lib.enableFullscreen = function(scene,p,alternativeKey,button) {
	if(dn_Lib.fullscreenEnabled) {
		return;
	}
	dn_Lib.fullscreenEnabled = true;
	var canvas = window.document.getElementById("webgl");
	if(button) {
		var w = 24;
		var g = new h2d_Graphics(scene);
		g.alpha = 0.7;
		g.blendMode = h2d_BlendMode.None;
		g.beginFill(0,1);
		g.drawRect(0,0,w,w);
		g.endFill();
		g.lineStyle(2,16777215,1);
		var x = w * 0.1;
		var y = w * 0.3;
		g.flush();
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.1;
		var y = w * 0.1;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.3;
		var y = w * 0.1;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.1;
		var y = w * 0.1;
		g.flush();
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.35;
		var y = w * 0.35;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.7;
		var y = w * 0.1;
		g.flush();
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.9;
		var y = w * 0.1;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.9;
		var y = w * 0.3;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.9;
		var y = w * 0.1;
		g.flush();
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.65;
		var y = w * 0.35;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.9;
		var y = w * 0.7;
		g.flush();
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.9;
		var y = w * 0.9;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.7;
		var y = w * 0.9;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.9;
		var y = w * 0.9;
		g.flush();
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.65;
		var y = w * 0.65;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.1;
		var y = w * 0.7;
		g.flush();
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.1;
		var y = w * 0.9;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.3;
		var y = w * 0.9;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.1;
		var y = w * 0.9;
		g.flush();
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		var x = w * 0.35;
		var y = w * 0.65;
		g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
		canvas.addEventListener("click",function(e) {
			var rect = canvas.getBoundingClientRect();
			var x = e.clientX - rect.left;
			var y = e.clientY - rect.top;
			if(!window.document.fullscreen && x >= g.x && x < g.x + w && y >= g.y && y < g.y + w) {
				dn_Lib.toggleFullscreen();
			}
		});
		p.createChildProcess(function(_) {
			var v = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) - w - 2;
			g.posChanged = true;
			g.x = v;
			g.posChanged = true;
			g.y = 2;
			g.set_visible(!window.document.fullscreen);
		});
	}
	canvas.addEventListener("keydown",function(e) {
		if(alternativeKey != null && e.keyCode == alternativeKey || e.keyCode == 13 && e.altKey || e.keyCode == 122) {
			dn_Lib.toggleFullscreen();
		}
	});
};
dn_Lib.isFullscreen = function() {
	return window.document.fullscreen;
};
dn_Lib.toggleFullscreen = function() {
	if(window.document.fullscreen) {
		window.document.exitFullscreen();
	} else {
		window.document.getElementById("webgl").requestFullscreen();
	}
};
dn_Lib.getArrayIndex = function(v,arr) {
	if(arr.length == 0) {
		return -1;
	}
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		if(arr[i] == v) {
			return i;
		}
	}
	return -1;
};
dn_Lib.prettyBytesSize = function(bytesCount) {
	if(bytesCount <= 1024) {
		return "" + bytesCount + " bytes";
	} else if(bytesCount <= 1048576) {
		var v = bytesCount / 1024;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		return "" + tmp + " Kb";
	} else {
		var v = bytesCount / 1048576;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		return "" + tmp + " Mb";
	}
};
dn_Lib.parseSignedInt = function(v) {
	return Std.parseInt(v) & -1;
};
dn_Lib.rectangleTouches = function(aX,aY,aWid,aHei,bX,bY,bWid,bHei) {
	if(aY + aHei < bY || bY + bHei < aY) {
		return false;
	} else if(aX + aWid < bX || bX + bWid < aX) {
		return false;
	} else {
		return true;
	}
};
dn_Lib.rectangleOverlaps = function(aX,aY,aWid,aHei,bX,bY,bWid,bHei) {
	if(aY + aHei <= bY || bY + bHei <= aY) {
		return false;
	} else if(aX + aWid <= bX || bX + bWid <= aX) {
		return false;
	} else {
		return true;
	}
};
dn_Lib.iterateArrayRec = function(arr,cb) {
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = [_g++];
		var _g2 = Type.typeof(arr[i[0]]);
		switch(_g2._hx_index) {
		case 4:
			dn_Lib.iterateObjectRec(arr[i[0]],cb);
			break;
		case 6:
			if(_g2.c == Array) {
				dn_Lib.iterateArrayRec(arr[i[0]],cb);
			}
			break;
		default:
		}
		cb(arr[i[0]],(function(i) {
			return function(v) {
				arr[i[0]] = v;
			};
		})(i));
	}
};
dn_Lib.iterateObjectRec = function(obj,cb) {
	if(obj == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(obj);
	while(_g < _g1.length) {
		var k = [_g1[_g]];
		++_g;
		var f = Reflect.field(obj,k[0]);
		var _g2 = Type.typeof(f);
		switch(_g2._hx_index) {
		case 4:
			dn_Lib.iterateObjectRec(f,cb);
			break;
		case 6:
			if(_g2.c == Array) {
				dn_Lib.iterateArrayRec(f,cb);
			}
			break;
		default:
		}
		cb(f,(function(k) {
			return function(v) {
				obj[k[0]] = v;
			};
		})(k));
	}
};
dn_Lib.trimEmptyLines = function(str) {
	var lines = str.split("\n");
	while(lines.length > 0 && StringTools.trim(lines[0]).length == 0) lines.shift();
	while(lines.length > 0 && StringTools.trim(lines[lines.length - 1]).length == 0) lines.pop();
	return lines.join("\n");
};
dn_Lib.isVowel = function(c) {
	if(c != null && c.length >= 1) {
		return Object.prototype.hasOwnProperty.call(dn_Lib.VOWELS.h,c.charAt(0).toLowerCase());
	} else {
		return false;
	}
};
dn_Lib.isConsonant = function(c) {
	if(c != null && c.length >= 1 && !Object.prototype.hasOwnProperty.call(dn_Lib.VOWELS.h,c.charAt(0).toLowerCase())) {
		if(!(c >= "a" && c <= "z")) {
			if(c >= "A") {
				return c <= "Z";
			} else {
				return false;
			}
		} else {
			return true;
		}
	} else {
		return false;
	}
};
dn_Lib.buildShortName = function(longName,maxLen) {
	if(maxLen == null) {
		maxLen = 8;
	}
	var out = "";
	var i = 0;
	var c = "";
	while(out.length < maxLen && i < longName.length) {
		c = longName.charAt(i);
		if(i == 0) {
			out += c;
		} else if(c != null && c.length >= 1 && !Object.prototype.hasOwnProperty.call(dn_Lib.VOWELS.h,c.charAt(0).toLowerCase()) && (c >= "a" && c <= "z" || c >= "A" && c <= "Z")) {
			out += c;
		} else if(c >= "A" && c <= "Z") {
			out += c;
		}
		++i;
	}
	return out;
};
dn_Lib.__test = function() {
	if(dn_Lib.findMostFrequentValueInArray([0,0,1,0,1]) == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] findMostFrequentValueInArray([0, 0, 1, 0, 1]) == 0" + "  <Ok>");
		}
	} else {
		var tmp = dn_Lib.findMostFrequentValueInArray([0,0,1,0,1]) + " != " + 0;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 759},"[JS|dn.Lib] findMostFrequentValueInArray([0, 0, 1, 0, 1]) == 0","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_Lib.findMostFrequentValueInArray([5,0,1,0,1]) == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] findMostFrequentValueInArray([5, 0, 1, 0, 1]) == 0" + "  <Ok>");
		}
	} else {
		var tmp = dn_Lib.findMostFrequentValueInArray([5,0,1,0,1]) + " != " + 0;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 760},"[JS|dn.Lib] findMostFrequentValueInArray([5, 0, 1, 0, 1]) == 0","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_Lib.findMostFrequentValueInArray([5,1,0,0,1]) == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] findMostFrequentValueInArray([5, 1, 0, 0, 1]) == 1" + "  <Ok>");
		}
	} else {
		var tmp = dn_Lib.findMostFrequentValueInArray([5,1,0,0,1]) + " != " + 1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 761},"[JS|dn.Lib] findMostFrequentValueInArray([5, 1, 0, 0, 1]) == 1","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_Lib.findMostFrequentValueInArray(["a","b","c","b"]) == "b") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] findMostFrequentValueInArray([\"a\", \"b\", \"c\", \"b\"]) == \"b\"" + "  <Ok>");
		}
	} else {
		var tmp = dn_Lib.findMostFrequentValueInArray(["a","b","c","b"]) + " != " + "b";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 762},"[JS|dn.Lib] findMostFrequentValueInArray([\"a\", \"b\", \"c\", \"b\"]) == \"b\"","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_Lib.findMostFrequentValueInArray([{ v : 1},{ v : 2},{ v : 2}],function(a,b) {
		return a.v == b.v;
	}).v == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] findMostFr... ...uentValueInArray([{ v : 1 }, { v : 2 }, { v : 2 }], (a, b) -> a.v == b.v).v == 2" + "  <Ok>");
		}
	} else {
		var tmp = dn_Lib.findMostFrequentValueInArray([{ v : 1},{ v : 2},{ v : 2}],function(a,b) {
			return a.v == b.v;
		}).v + " != " + 2;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 763},"[JS|dn.Lib] findMostFr... ...uentValueInArray([{ v : 1 }, { v : 2 }, { v : 2 }], (a, b) -> a.v == b.v).v == 2","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_Lib.findMostFrequentValueInArray([{ v : 1},{ v : 2},{ v : 1}],function(a,b) {
		return a.v == b.v;
	}).v == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] findMostFr... ...uentValueInArray([{ v : 1 }, { v : 2 }, { v : 1 }], (a, b) -> a.v == b.v).v == 1" + "  <Ok>");
		}
	} else {
		var tmp = dn_Lib.findMostFrequentValueInArray([{ v : 1},{ v : 2},{ v : 1}],function(a,b) {
			return a.v == b.v;
		}).v + " != " + 1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 764},"[JS|dn.Lib] findMostFr... ...uentValueInArray([{ v : 1 }, { v : 2 }, { v : 1 }], (a, b) -> a.v == b.v).v == 1","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_Lib.getArrayIndex(7,[4,9,10,7,14]) == 3) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] getArrayIndex(7, [4, 9, 10, 7, 14]) == 3" + "  <Ok>");
		}
	} else {
		var tmp = dn_Lib.getArrayIndex(7,[4,9,10,7,14]) + " != " + 3;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 766},"[JS|dn.Lib] getArrayIndex(7, [4, 9, 10, 7, 14]) == 3","These 2 expressions should be EQUAL",[tmp]);
	}
	var zeros = 4;
	if(zeros == null) {
		zeros = 2;
	}
	var str = "14";
	while(str.length < zeros) str = "0" + str;
	if(str == "0014") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] leadingZeros(14, 4) == \"0014\"" + "  <Ok>");
		}
	} else {
		var zeros = 4;
		if(zeros == null) {
			zeros = 2;
		}
		var str = "14";
		while(str.length < zeros) str = "0" + str;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 767},"[JS|dn.Lib] leadingZeros(14, 4) == \"0014\"","These 2 expressions should be EQUAL",[str + " != " + "0014"]);
	}
	var zeros = 0;
	if(zeros == null) {
		zeros = 2;
	}
	var str = "14";
	while(str.length < zeros) str = "0" + str;
	if(str == "14") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] leadingZeros(14, 0) == \"14\"" + "  <Ok>");
		}
	} else {
		var zeros = 0;
		if(zeros == null) {
			zeros = 2;
		}
		var str = "14";
		while(str.length < zeros) str = "0" + str;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 768},"[JS|dn.Lib] leadingZeros(14, 0) == \"14\"","These 2 expressions should be EQUAL",[str + " != " + "14"]);
	}
	if((Std.parseInt("0xaaffcc00") & -1) == -1426076672) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] parseSignedInt(\"0xaaffcc00\") == 0xaaffcc00" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 770},"[JS|dn.Lib] parseSignedInt(\"0xaaffcc00\") == 0xaaffcc00","These 2 expressions should be EQUAL",[(Std.parseInt("0xaaffcc00") & -1) + " != " + (-1426076672)]);
	}
	if((Std.parseInt("0xffffffff") & -1) == -1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] parseSignedInt(\"0xffffffff\") == 0xffffffff" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 771},"[JS|dn.Lib] parseSignedInt(\"0xffffffff\") == 0xffffffff","These 2 expressions should be EQUAL",[(Std.parseInt("0xffffffff") & -1) + " != " + (-1)]);
	}
	if((Std.parseInt("0xffffff") & -1) == 16777215) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] parseSignedInt(\"0xffffff\") == 0xffffff" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 772},"[JS|dn.Lib] parseSignedInt(\"0xffffff\") == 0xffffff","These 2 expressions should be EQUAL",[(Std.parseInt("0xffffff") & -1) + " != " + 16777215]);
	}
	if((Std.parseInt("0x00ffffff") & -1) == 16777215) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] parseSignedInt(\"0x00ffffff\") == 0x00ffffff" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 773},"[JS|dn.Lib] parseSignedInt(\"0x00ffffff\") == 0x00ffffff","These 2 expressions should be EQUAL",[(Std.parseInt("0x00ffffff") & -1) + " != " + 16777215]);
	}
	if(Type.createEnumIndex(dn_WeekDay,HxOverrides.strDate("2020-11-03 10:44:37").getDay()) == dn_WeekDay.Tuesday) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] getWeekDay(Date.fromString(\"2020-11-03 10:44:37\")) == Tuesday" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(Type.createEnumIndex(dn_WeekDay,HxOverrides.strDate("2020-11-03 10:44:37").getDay())) + " != ";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 775},"[JS|dn.Lib] getWeekDay(Date.fromString(\"2020-11-03 10:44:37\")) == Tuesday","These 2 expressions should be EQUAL",[tmp + Std.string(dn_WeekDay.Tuesday)]);
	}
	if(Type.createEnumIndex(dn_WeekDay,HxOverrides.strDate("2020-11-04 00:00:00").getDay()) == dn_WeekDay.Wednesday) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] getWeekDay(Date.fromString(\"2020-11-04 00:00:00\")) == Wednesday" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(Type.createEnumIndex(dn_WeekDay,HxOverrides.strDate("2020-11-04 00:00:00").getDay())) + " != ";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 776},"[JS|dn.Lib] getWeekDay(Date.fromString(\"2020-11-04 00:00:00\")) == Wednesday","These 2 expressions should be EQUAL",[tmp + Std.string(dn_WeekDay.Wednesday)]);
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.Lib] rectangleTouches(0, 0, 5, 5, 0, 5, 1, 1)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.Lib] rectangleTouches(0, 0, 5, 5, 5, 5, 1, 1)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.Lib] rectangleTouches(0, 0, 5, 5, 2, 2, 1, 1)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.Lib] rectangleTouches(2, 2, 1, 1, 0, 0, 5, 5)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.Lib] rectangleTouches(0, 0, 5, 5, 0, 6, 1, 1)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.Lib] rectangleTouches(0, 0, 5, 5, -3, -3, 1, 1)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.Lib] rectangleOverlaps(0, 0, 5, 5, 0, 5, 1, 1)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.Lib] rectangleOverlaps(0, 0, 5, 5, -1, 0, 1, 1)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.Lib] rectangleOverlaps(0, 0, 5, 5, 2, 2, 1, 1)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.Lib] rectangleOverlaps(2, 2, 1, 1, 0, 0, 5, 5)" + "  <Ok>");
	}
	var r_r = new RegExp("([^\\\\]|^)\\" + "\"","gim".split("u").join(""));
	if(" \"hello\" ".replace(r_r,"$1\\" + "\"") == " \\\"hello\\\" ") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] safeEscape(' \\\"hello\\\" ', '\\\"') == ' \\\\\\\"hello\\\\\\\" '" + "  <Ok>");
		}
	} else {
		var r_r = new RegExp("([^\\\\]|^)\\" + "\"","gim".split("u").join(""));
		var tmp = " \"hello\" ".replace(r_r,"$1\\" + "\"") + " != " + " \\\"hello\\\" ";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 790},"[JS|dn.Lib] safeEscape(' \\\"hello\\\" ', '\\\"') == ' \\\\\\\"hello\\\\\\\" '","These 2 expressions should be EQUAL",[tmp]);
	}
	var r_r = new RegExp("([^\\\\]|^)\\" + "\"","gim".split("u").join(""));
	if(" \"hello\" ".replace(r_r,"$1\\" + "\"") == " \\\"hello\\\" ") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] safeEscape(' \\\"hello\\\" ', '\\\"') == ' \\\\\\\"hello\\\\\\\" '" + "  <Ok>");
		}
	} else {
		var r_r = new RegExp("([^\\\\]|^)\\" + "\"","gim".split("u").join(""));
		var tmp = " \"hello\" ".replace(r_r,"$1\\" + "\"") + " != " + " \\\"hello\\\" ";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 791},"[JS|dn.Lib] safeEscape(' \\\"hello\\\" ', '\\\"') == ' \\\\\\\"hello\\\\\\\" '","These 2 expressions should be EQUAL",[tmp]);
	}
	var r_r = new RegExp("([^\\\\]|^)\\" + "\"","gim".split("u").join(""));
	if(" \"hello\" \"world\" ".replace(r_r,"$1\\" + "\"") == " \\\"hello\\\" \\\"world\\\" ") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] safeEscape(' \\\"hello\\\" \\\"world\\\" ', '\\\"') == ' \\\\\\\"hello\\\\\\\" \\\\\\\"world\\\\\\\" '" + "  <Ok>");
		}
	} else {
		var r_r = new RegExp("([^\\\\]|^)\\" + "\"","gim".split("u").join(""));
		var tmp = " \"hello\" \"world\" ".replace(r_r,"$1\\" + "\"") + " != " + " \\\"hello\\\" \\\"world\\\" ";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 792},"[JS|dn.Lib] safeEscape(' \\\"hello\\\" \\\"world\\\" ', '\\\"') == ' \\\\\\\"hello\\\\\\\" \\\\\\\"world\\\\\\\" '","These 2 expressions should be EQUAL",[tmp]);
	}
	var str = "  \thello  \t  \r\n";
	var tmp;
	if(str == null) {
		tmp = "";
	} else {
		str = str.replace(dn_Lib.L_WHITESPACE_TRIM.r,"");
		str = str.replace(dn_Lib.R_WHITESPACE_TRIM.r,"");
		tmp = str;
	}
	if(tmp == "hello") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] wtrim('  \\thello  \\t  \\r\\n') == 'hello'" + "  <Ok>");
		}
	} else {
		var str = "  \thello  \t  \r\n";
		var tmp;
		if(str == null) {
			tmp = "";
		} else {
			str = str.replace(dn_Lib.L_WHITESPACE_TRIM.r,"");
			str = str.replace(dn_Lib.R_WHITESPACE_TRIM.r,"");
			tmp = str;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 794},"[JS|dn.Lib] wtrim('  \\thello  \\t  \\r\\n') == 'hello'","These 2 expressions should be EQUAL",[tmp + " != " + "hello"]);
	}
	var str = " \t ";
	var tmp;
	if(str == null) {
		tmp = "";
	} else {
		str = str.replace(dn_Lib.L_WHITESPACE_TRIM.r,"");
		str = str.replace(dn_Lib.R_WHITESPACE_TRIM.r,"");
		tmp = str;
	}
	if(tmp == "") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] wtrim(' \\t ') == ''" + "  <Ok>");
		}
	} else {
		var str = " \t ";
		var tmp;
		if(str == null) {
			tmp = "";
		} else {
			str = str.replace(dn_Lib.L_WHITESPACE_TRIM.r,"");
			str = str.replace(dn_Lib.R_WHITESPACE_TRIM.r,"");
			tmp = str;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 795},"[JS|dn.Lib] wtrim(' \\t ') == ''","These 2 expressions should be EQUAL",[tmp + " != " + ""]);
	}
	var str = "";
	var tmp;
	if(str == null) {
		tmp = "";
	} else {
		str = str.replace(dn_Lib.L_WHITESPACE_TRIM.r,"");
		str = str.replace(dn_Lib.R_WHITESPACE_TRIM.r,"");
		tmp = str;
	}
	if(tmp == "") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] wtrim('') == ''" + "  <Ok>");
		}
	} else {
		var str = "";
		var tmp;
		if(str == null) {
			tmp = "";
		} else {
			str = str.replace(dn_Lib.L_WHITESPACE_TRIM.r,"");
			str = str.replace(dn_Lib.R_WHITESPACE_TRIM.r,"");
			tmp = str;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 796},"[JS|dn.Lib] wtrim('') == ''","These 2 expressions should be EQUAL",[tmp + " != " + ""]);
	}
	var str = null;
	var tmp;
	if(str == null) {
		tmp = "";
	} else {
		str = str.replace(dn_Lib.L_WHITESPACE_TRIM.r,"");
		str = str.replace(dn_Lib.R_WHITESPACE_TRIM.r,"");
		tmp = str;
	}
	if(tmp == "") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Lib] wtrim(null) == ''" + "  <Ok>");
		}
	} else {
		var str = null;
		var tmp;
		if(str == null) {
			tmp = "";
		} else {
			str = str.replace(dn_Lib.L_WHITESPACE_TRIM.r,"");
			str = str.replace(dn_Lib.R_WHITESPACE_TRIM.r,"");
			tmp = str;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Lib.hx", line : 797},"[JS|dn.Lib] wtrim(null) == ''","These 2 expressions should be EQUAL",[tmp + " != " + ""]);
	}
};
var dn_M = function() { };
$hxClasses["dn.M"] = dn_M;
dn_M.__name__ = "dn.M";
dn_M.NaN = function() {
	return NaN;
};
dn_M.POSITIVE_INFINITY = function() {
	return Infinity;
};
dn_M.NEGATIVE_INFINITY = function() {
	return -Infinity;
};
dn_M.toRad = function(deg) {
	return deg * 0.0174532925199432955;
};
dn_M.toDeg = function(rad) {
	return rad * 57.2957795130823229;
};
dn_M.imin = function(x,y) {
	if(x < y) {
		return x;
	} else {
		return y;
	}
};
dn_M.imax = function(x,y) {
	if(x > y) {
		return x;
	} else {
		return y;
	}
};
dn_M.iabs = function(x) {
	if(x < 0) {
		return -x;
	} else {
		return x;
	}
};
dn_M.sign = function(x) {
	if(x > 0) {
		return 1;
	} else if(x < 0) {
		return -1;
	} else {
		return 0;
	}
};
dn_M.signEq = function(x,y) {
	return (x > 0 ? 1 : x < 0 ? -1 : 0) == (y > 0 ? 1 : y < 0 ? -1 : 0);
};
dn_M.notZero = function(v,ifZero) {
	if(ifZero == null) {
		ifZero = 0.000001;
	}
	if(v == 0) {
		return ifZero;
	} else {
		return v;
	}
};
dn_M.iclamp = function(x,min,max) {
	if(x < min) {
		return min;
	} else if(x > max) {
		return max;
	} else {
		return x;
	}
};
dn_M.clampSym = function(x,i) {
	if(x < -i) {
		return -i;
	} else if(x > i) {
		return i;
	} else {
		return x;
	}
};
dn_M.wrap = function(x,min,max) {
	if(x < min) {
		return x - min + max + 1;
	} else if(x > max) {
		return x - max + min - 1;
	} else {
		return x;
	}
};
dn_M.fmin = function(x,y) {
	if(x < y) {
		return x;
	} else {
		return y;
	}
};
dn_M.fmax = function(x,y) {
	if(x > y) {
		return x;
	} else {
		return y;
	}
};
dn_M.fabs = function(x) {
	if(x < 0) {
		return -x;
	} else {
		return x;
	}
};
dn_M.fsgn = function(x) {
	if(x > 0.) {
		return 1;
	} else if(x < 0.) {
		return -1;
	} else {
		return 0;
	}
};
dn_M.fclamp = function(x,min,max) {
	if(x < min) {
		return min;
	} else if(x > max) {
		return max;
	} else {
		return x;
	}
};
dn_M.fclampSym = function(x,i) {
	if(x < -i) {
		return -i;
	} else if(x > i) {
		return i;
	} else {
		return x;
	}
};
dn_M.fwrap = function(value,lower,upper) {
	return value - ((value - lower) / (upper - lower) | 0) * (upper - lower);
};
dn_M.eqSgn = function(x,y) {
	return (x ^ y) >= 0;
};
dn_M.feqSgn = function(x,y) {
	return x * y >= 0;
};
dn_M.isEven = function(x) {
	return (x & 1) == 0;
};
dn_M.isPow2 = function(x) {
	if(x > 0) {
		return (x & x - 1) == 0;
	} else {
		return false;
	}
};
dn_M.nearestPow2 = function(x) {
	return Math.pow(2,Math.round(Math.log(x) / Math.log(2)));
};
dn_M.lerp = function(a,b,t) {
	return a + (b - a) * t;
};
dn_M.slerp = function(a,b,t) {
	var m = Math;
	var c1 = m.sin(a * .5);
	var r1 = m.cos(a * .5);
	var c2 = m.sin(b * .5);
	var r2 = m.cos(b * .5);
	var c = r1 * r2 + c1 * c2;
	if(c < 0.) {
		if(1. + c > 1e-6) {
			var o = m.acos(-c);
			var s = m.sin(o);
			var s0 = m.sin((1 - t) * o) / s;
			var s1 = m.sin(t * o) / s;
			return m.atan2(s0 * c1 - s1 * c2,s0 * r1 - s1 * r2) * 2.;
		} else {
			var s0 = 1 - t;
			var s1 = t;
			return m.atan2(s0 * c1 - s1 * c2,s0 * r1 - s1 * r2) * 2;
		}
	} else if(1 - c > 1e-6) {
		var o = m.acos(c);
		var s = m.sin(o);
		var s0 = m.sin((1 - t) * o) / s;
		var s1 = m.sin(t * o) / s;
		return m.atan2(s0 * c1 + s1 * c2,s0 * r1 + s1 * r2) * 2.;
	} else {
		var s0 = 1 - t;
		var s1 = t;
		return m.atan2(s0 * c1 + s1 * c2,s0 * r1 + s1 * r2) * 2;
	}
};
dn_M.nextPow2 = function(x) {
	var t = x;
	t |= t >> 1;
	t |= t >> 2;
	t |= t >> 3;
	t |= t >> 4;
	t |= t >> 5;
	return t + 1;
};
dn_M.exp = function(a,n) {
	var t = 1;
	var r = 0;
	while(true) {
		if((n & 1) != 0) {
			t = a * t;
		}
		n >>= 1;
		if(n == 0) {
			r = t;
			break;
		} else {
			a *= a;
		}
	}
	return r;
};
dn_M.decimals = function(x) {
	var x1 = x - (x | 0);
	if(x1 < 0) {
		return -x1;
	} else {
		return x1;
	}
};
dn_M.roundTo = function(x,y) {
	var x1 = x / y;
	return ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) * y;
};
dn_M.round = function(x) {
	return (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
};
dn_M.ceil = function(x) {
	if(x > .0) {
		var t = x + .5 | 0;
		if(t < x) {
			return t + 1;
		} else {
			return t;
		}
	} else if(x < .0) {
		var t = x - .5 | 0;
		if(t < x) {
			return t + 1;
		} else {
			return t;
		}
	} else {
		return 0;
	}
};
dn_M.floor = function(x) {
	return (x | 0) + (x >= 0 || x == (x | 0) ? 0 : -1);
};
dn_M.invSqrt = function(x) {
	return 1 / Math.sqrt(x);
};
dn_M.cmpAbs = function(x,y,eps) {
	var d = x - y;
	if(d > 0) {
		return d < eps;
	} else {
		return -d < eps;
	}
};
dn_M.cmpZero = function(x,eps) {
	if(x > 0) {
		return x < eps;
	} else {
		return -x < eps;
	}
};
dn_M.snap = function(x,y) {
	var x1 = (x + y * .5) / y;
	return (x1 | 0) + (x1 >= 0 || x1 == (x1 | 0) ? 0 : -1);
};
dn_M.inRange = function(x,min,max) {
	if(x >= min) {
		return x <= max;
	} else {
		return false;
	}
};
dn_M.randSeedCoords = function(seed,x,y,max) {
	var h = seed + x * 374761393 + y * 668265263;
	h = (h ^ h >> 13) * 1274126177;
	return (h ^ h >> 16) % max;
};
dn_M.rand = function(max,rnd) {
	if(max == null) {
		max = 2147483647;
	}
	return (rnd == null ? Math.random() : rnd()) * max | 0;
};
dn_M.randRange = function(min,max,rnd) {
	var l = min - .4999;
	var h = max + .4999;
	var x = l + (h - l) * (rnd == null ? Math.random() : rnd());
	return (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
};
dn_M.randRangeSym = function(range,rnd) {
	var l = -range - .4999;
	var h = range + .4999;
	var x = l + (h - l) * (rnd == null ? Math.random() : rnd());
	return (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
};
dn_M.frand = function(rnd) {
	if(rnd == null) {
		return Math.random();
	} else {
		return rnd();
	}
};
dn_M.frandRange = function(min,max,rnd) {
	return min + (max - min) * (rnd == null ? Math.random() : rnd());
};
dn_M.frandRangeSym = function(range,rnd) {
	var min = -range;
	return min + (range - min) * (rnd == null ? Math.random() : rnd());
};
dn_M.wrapToPi = function(x) {
	var x1 = x / 6.283185307179586;
	var t = (x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0;
	if(x < -3.14159265358979312) {
		return x - t * 6.283185307179586;
	} else if(x > 3.141592653589793) {
		return x - t * 6.283185307179586;
	} else {
		return x;
	}
};
dn_M.wrapTo = function(n,mod) {
	var x = n / mod;
	var t = (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
	if(n < -2 * mod) {
		return n - t * mod;
	} else if(n > 2 * mod) {
		return n - t * mod;
	} else {
		return n;
	}
};
dn_M.sMod = function(n,mod) {
	if(mod != 0.0) {
		while(n >= mod) n -= mod;
		while(n < 0) n += mod;
	}
	return n;
};
dn_M.hMod = function(n,mod) {
	while(n > mod) n -= mod * 2;
	while(n < -mod) n += mod * 2;
	return n;
};
dn_M.gcd = function(x,y) {
	var d = 0;
	var r = 0;
	if(x < 0) {
		x = -x;
	}
	if(y < 0) {
		y = -y;
	}
	while(true) if(y == 0) {
		d = x;
		break;
	} else {
		r = x % y;
		x = y;
		y = r;
	}
	return d;
};
dn_M.maxPrecision = function(x,precision) {
	if(x == 0) {
		return x;
	} else {
		var correction = 10;
		var _g = 0;
		var _g1 = precision - 1;
		while(_g < _g1) {
			var i = _g++;
			correction *= 10;
		}
		var x1 = correction * x;
		return ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / correction;
	}
};
dn_M.ofBool = function(x) {
	if(x) {
		return 1;
	} else {
		return 0;
	}
};
dn_M.posMod = function(i,m) {
	var mod = i % m;
	if(mod >= 0) {
		return mod;
	} else {
		return mod + m;
	}
};
dn_M.distSqr = function(ax,ay,bx,by) {
	return (ax - bx) * (ax - bx) + (ay - by) * (ay - by);
};
dn_M.idistSqr = function(ax,ay,bx,by) {
	return (ax - bx) * (ax - bx) + (ay - by) * (ay - by);
};
dn_M.dist = function(ax,ay,bx,by) {
	return Math.sqrt((ax - bx) * (ax - bx) + (ay - by) * (ay - by));
};
dn_M.distSegment = function(x,y,ax,ay,bx,by) {
	var l2 = (ax - bx) * (ax - bx) + (ay - by) * (ay - by);
	var tmp;
	if(l2 == 0) {
		tmp = (x - ax) * (x - ax) + (y - ay) * (y - ay);
	} else {
		var x1 = ((x - ax) * (bx - ax) + (y - ay) * (by - ay)) / l2;
		var t = x1 < 0 ? 0 : x1 > 1 ? 1 : x1;
		var bx1 = ax + t * (bx - ax);
		var by1 = ay + t * (by - ay);
		tmp = (x - bx1) * (x - bx1) + (y - by1) * (y - by1);
	}
	return Math.sqrt(tmp);
};
dn_M.distSegmentSqr = function(x,y,ax,ay,bx,by) {
	var l2 = (ax - bx) * (ax - bx) + (ay - by) * (ay - by);
	if(l2 == 0) {
		return (x - ax) * (x - ax) + (y - ay) * (y - ay);
	}
	var x1 = ((x - ax) * (bx - ax) + (y - ay) * (by - ay)) / l2;
	var t = x1 < 0 ? 0 : x1 > 1 ? 1 : x1;
	var bx1 = ax + t * (bx - ax);
	var by1 = ay + t * (by - ay);
	return (x - bx1) * (x - bx1) + (y - by1) * (y - by1);
};
dn_M.factorial = function(v) {
	var r = 1;
	var _g = 1;
	var _g1 = v + 1;
	while(_g < _g1) {
		var i = _g++;
		r *= i;
	}
	return r;
};
dn_M.normalizeDeg = function(a) {
	while(a < -180) a += 360;
	while(a > 180) a -= 360;
	return a;
};
dn_M.normalizeRad = function(a) {
	while(a < -3.14159265358979312) a += 6.283185307179586;
	while(a > 3.141592653589793) a -= 6.283185307179586;
	return a;
};
dn_M.degDistance = function(a,b) {
	var a1 = a;
	while(a1 < -180) a1 += 360;
	while(a1 > 180) a1 -= 360;
	var a = a1;
	var a1 = b;
	while(a1 < -180) a1 += 360;
	while(a1 > 180) a1 -= 360;
	var a2 = a - a1;
	while(a2 < -180) a2 += 360;
	while(a2 > 180) a2 -= 360;
	var x = a2;
	if(x < 0) {
		return -x;
	} else {
		return x;
	}
};
dn_M.degSubstract = function(a,b) {
	var a1 = a;
	while(a1 < -180) a1 += 360;
	while(a1 > 180) a1 -= 360;
	var a = a1;
	var a1 = b;
	while(a1 < -180) a1 += 360;
	while(a1 > 180) a1 -= 360;
	var a2 = a - a1;
	while(a2 < -180) a2 += 360;
	while(a2 > 180) a2 -= 360;
	return a2;
};
dn_M.radClamp = function(a,refAng,maxDelta) {
	var a1 = a;
	var b = refAng;
	var a2 = a1;
	while(a2 < -3.14159265358979312) a2 += 6.283185307179586;
	while(a2 > 3.141592653589793) a2 -= 6.283185307179586;
	a1 = a2;
	var a2 = b;
	while(a2 < -3.14159265358979312) a2 += 6.283185307179586;
	while(a2 > 3.141592653589793) a2 -= 6.283185307179586;
	b = a2;
	var a2 = a1 - b;
	while(a2 < -3.14159265358979312) a2 += 6.283185307179586;
	while(a2 > 3.141592653589793) a2 -= 6.283185307179586;
	var d = a2;
	if(d > maxDelta) {
		return refAng + maxDelta;
	}
	if(d < -maxDelta) {
		return refAng - maxDelta;
	}
	return a;
};
dn_M.radDistance = function(a,b) {
	var a1 = a;
	var b1 = b;
	var a = a1;
	while(a < -3.14159265358979312) a += 6.283185307179586;
	while(a > 3.141592653589793) a -= 6.283185307179586;
	a1 = a;
	var a = b1;
	while(a < -3.14159265358979312) a += 6.283185307179586;
	while(a > 3.141592653589793) a -= 6.283185307179586;
	b1 = a;
	var a = a1 - b1;
	while(a < -3.14159265358979312) a += 6.283185307179586;
	while(a > 3.141592653589793) a -= 6.283185307179586;
	var x = a;
	if(x < 0) {
		return -x;
	} else {
		return x;
	}
};
dn_M.radCloseTo = function(curAng,target,maxAngDist) {
	var a = curAng;
	var b = target;
	var a1 = a;
	while(a1 < -3.14159265358979312) a1 += 6.283185307179586;
	while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
	a = a1;
	var a1 = b;
	while(a1 < -3.14159265358979312) a1 += 6.283185307179586;
	while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
	b = a1;
	var a1 = a - b;
	while(a1 < -3.14159265358979312) a1 += 6.283185307179586;
	while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
	var x = a1;
	return (x < 0 ? -x : x) <= (maxAngDist < 0 ? -maxAngDist : maxAngDist);
};
dn_M.radSubstract = function(a,b) {
	var a1 = a;
	while(a1 < -3.14159265358979312) a1 += 6.283185307179586;
	while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
	a = a1;
	var a1 = b;
	while(a1 < -3.14159265358979312) a1 += 6.283185307179586;
	while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
	b = a1;
	var a1 = a - b;
	while(a1 < -3.14159265358979312) a1 += 6.283185307179586;
	while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
	return a1;
};
dn_M.angTo = function(fx,fy,tx,ty) {
	return Math.atan2(ty - fy,tx - fx);
};
dn_M.pretty = function(v,precision) {
	if(precision == null) {
		precision = 2;
	}
	if(precision <= 0) {
		return (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = v * d;
		return ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
};
dn_M.truncateStr = function(v,maxPrecision) {
	if(maxPrecision == null) {
		maxPrecision = 2;
	}
	if(maxPrecision <= 0) {
		return Std.string(v | 0);
	} else {
		var d = Math.pow(10,maxPrecision);
		return Std.string((v * d | 0) / d);
	}
};
dn_M.prettyPad = function(v,precision) {
	if(precision == null) {
		precision = 2;
	}
	var precision1 = precision;
	if(precision1 == null) {
		precision1 = 2;
	}
	var str;
	if(precision1 <= 0) {
		str = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision1);
		var x = v * d;
		str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	var str1 = Std.string(str);
	if(precision == 0) {
		return str1;
	} else {
		var idx = str1.lastIndexOf(".");
		var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
		if(idx < 0) {
			str1 += ".";
		}
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			str1 += "0";
		}
		return str1;
	}
};
dn_M.groupNumbers = function(v,sep) {
	if(sep == null) {
		sep = " ";
	}
	var str = v == null ? "null" : "" + v;
	if(str.length <= 3) {
		return str;
	} else {
		var i = 1;
		var out = "";
		while(i <= str.length) {
			out = HxOverrides.substr(str,-i,1) + out;
			if(i % 3 == 0 && i < str.length) {
				out = sep + out;
			}
			++i;
		}
		return out;
	}
};
dn_M.unit = function(v,precision) {
	if(precision == null) {
		precision = 1;
	}
	if((v < 0 ? -v : v) < 1000) {
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var tmp;
		if(precision1 <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		return Std.string(tmp);
	} else if((v < 0 ? -v : v) < 1000000) {
		var v1 = v / 1000;
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var tmp;
		if(precision1 <= 0) {
			tmp = (v1 > 0 ? v1 + .5 : v1 < 0 ? v1 - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = v1 * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		return tmp + "K";
	} else {
		var v1 = v / 1000000;
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var tmp;
		if(precision1 <= 0) {
			tmp = (v1 > 0 ? v1 + .5 : v1 < 0 ? v1 - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = v1 * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		return tmp + "M";
	}
};
dn_M.unitMega = function(v,precision) {
	if(precision == null) {
		precision = 1;
	}
	var v1 = v / 1000000;
	var precision1 = precision;
	if(precision1 == null) {
		precision1 = 2;
	}
	var tmp;
	if(precision1 <= 0) {
		tmp = (v1 > 0 ? v1 + .5 : v1 < 0 ? v1 - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision1);
		var x = v1 * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	return tmp + "M";
};
dn_M.intToBitString = function(v,pad) {
	if(pad == null) {
		pad = 8;
	}
	var out = "";
	var i = 0;
	while((0 | 1 << i) <= v && i < 31) out = ((v & 1 << i++) != 0 ? "1" : "0") + out;
	while(out.length < pad) out = "0" + out;
	return out;
};
dn_M.uIntToBitString = function(v,pad) {
	if(pad == null) {
		pad = 8;
	}
	var out = "";
	var i = 0;
	while(UInt.gte(v,0 | 1 << i) && UInt.gte(31,i)) {
		var one = 1;
		out = ((v & one << i++) != 0 ? "1" : "0") + out;
	}
	while(out.length < pad) out = "0" + out;
	return out;
};
dn_M.setBit = function(baseValue,bitIdx) {
	return baseValue | 1 << bitIdx;
};
dn_M.unsetBit = function(baseValue,bitIdx) {
	return baseValue & ~(1 << bitIdx);
};
dn_M.makeBitsFromArray = function(bools) {
	if(bools.length > 32) {
		throw haxe_Exception.thrown("Too many values (32bits max)");
	}
	var v = 0;
	var _g = 0;
	var _g1 = bools.length;
	while(_g < _g1) {
		var i = _g++;
		if(bools[i] == true) {
			v |= 1 << i;
		}
	}
	return v;
};
dn_M.makeBitsFromBools = function(b0,b1,b2,b3,b4,b5,b6,b7) {
	if(b7 == null) {
		b7 = false;
	}
	if(b6 == null) {
		b6 = false;
	}
	if(b5 == null) {
		b5 = false;
	}
	if(b4 == null) {
		b4 = false;
	}
	if(b3 == null) {
		b3 = false;
	}
	if(b2 == null) {
		b2 = false;
	}
	if(b1 == null) {
		b1 = false;
	}
	if(b0 == null) {
		b0 = false;
	}
	var v = 0;
	if(b0) {
		v |= 1;
	}
	if(b1) {
		v |= 2;
	}
	if(b2) {
		v |= 4;
	}
	if(b3) {
		v |= 8;
	}
	if(b4) {
		v |= 16;
	}
	if(b5) {
		v |= 32;
	}
	if(b6) {
		v |= 64;
	}
	if(b7) {
		v |= 128;
	}
	return v;
};
dn_M.hasBit = function(v,bitIdx) {
	return (v & 1 << bitIdx) != 0;
};
dn_M.setUnsignedBit = function(baseValue,bitIdx) {
	return baseValue | 1 << bitIdx;
};
dn_M.hasUnsignedBit = function(v,bitIdx) {
	var one = 1;
	return (v & one << bitIdx) != 0;
};
dn_M.isValidNumber = function(v) {
	if(v != null && !isNaN(v)) {
		return isFinite(v);
	} else {
		return false;
	}
};
dn_M.parseInt = function(str,defaultIfInvalid) {
	if(str == null) {
		return defaultIfInvalid;
	} else {
		var v = Std.parseInt(str);
		if(v != null && !isNaN(v) && isFinite(v)) {
			return v;
		} else {
			return defaultIfInvalid;
		}
	}
};
dn_M.bezier4 = function(t,p0,p1,p2,p3) {
	if(t < 0) {
		t = 0;
	} else if(t > 1) {
		t = 1;
	}
	var n = 1 - t;
	var n1 = 1 - t;
	return n * n * n * p0 + 3 * t * (n1 * n1) * p1 + 3 * (t * t) * (1 - t) * p2 + t * t * t * p3;
};
dn_M.bezier3 = function(t,p0,p1,p2) {
	if(t < 0) {
		t = 0;
	} else if(t > 1) {
		t = 1;
	}
	var n = 1 - t;
	return n * n * p0 + 2 * t * (1 - t) * p1 + t * t * p2;
};
dn_M.bezierFull4 = function(t,x0,x1,x2,x3,y0,y1,y2,y3) {
	var t1 = t;
	if(t1 < 0) {
		t1 = 0;
	} else if(t1 > 1) {
		t1 = 1;
	}
	var n = 1 - t1;
	var n1 = 1 - t1;
	var t = n * n * n * x0 + 3 * t1 * (n1 * n1) * x1 + 3 * (t1 * t1) * (1 - t1) * x2 + t1 * t1 * t1 * x3;
	if(t < 0) {
		t = 0;
	} else if(t > 1) {
		t = 1;
	}
	var n = 1 - t;
	var n1 = 1 - t;
	return n * n * n * y0 + 3 * t * (n1 * n1) * y1 + 3 * (t * t) * (1 - t) * y2 + t * t * t * y3;
};
dn_M.fastPow2 = function(n) {
	return n * n;
};
dn_M.fastPow3 = function(n) {
	return n * n * n;
};
dn_M.rotateX = function(x,y,rotCenterX,rotCenterY,ang) {
	return rotCenterX + (x - rotCenterX) * Math.cos(ang) + (y - rotCenterY) * Math.sin(ang);
};
dn_M.rotateY = function(x,y,rotCenterX,rotCenterY,ang) {
	return rotCenterY - (x - rotCenterX) * Math.sin(ang) + (y - rotCenterY) * Math.cos(ang);
};
dn_M.subRatio = function(r,min,max) {
	var x = (r - min) / (max - min);
	if(x < 0) {
		return 0;
	} else if(x > 1) {
		return 1;
	} else {
		return x;
	}
};
dn_M.__test = function() {
	if((1.7 | 0) == 1 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.round(1.2) == 1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1055},"[JS|dn.M] M.round(1.2) == 1","This expression should be TRUE");
	}
	if((2. | 0) == 2 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.round(1.5) == 2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1056},"[JS|dn.M] M.round(1.5) == 2","This expression should be TRUE");
	}
	if((-2. | 0) == -2 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.round(-1.5) == -2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1057},"[JS|dn.M] M.round(-1.5) == -2","This expression should be TRUE");
	}
	var t = -2. | 0;
	if((t < -1.5 ? t + 1 : t) == -1 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.ceil(-1.5) == -1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1058},"[JS|dn.M] M.ceil(-1.5) == -1","This expression should be TRUE");
	}
	if((!isNaN(1.5) && isFinite(1.5)) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.isValidNumber(1.5)" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1059},"[JS|dn.M] M.isValidNumber(1.5)","This expression should be TRUE");
	}
	var v = null;
	if(!(v != null && !isNaN(v) && isFinite(v)) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] !M.isValidNumber(null)" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1060},"[JS|dn.M] !M.isValidNumber(null)","This expression should be TRUE");
	}
	var v = 1 / 0;
	if(!(v != null && !isNaN(v) && isFinite(v)) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] !M.isValidNumber(1 / 0)" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1061},"[JS|dn.M] !M.isValidNumber(1 / 0)","This expression should be TRUE");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.floor(0) == 0" + "  <Ok>");
	}
	if((0.1 | 0) == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.floor(0.1) == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1065},"[JS|dn.M] M.floor(0.1) == 0","These 2 expressions should be EQUAL",[(0.1 | 0) + " != " + 0]);
	}
	if((0.9 | 0) == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.floor(0.9) == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1066},"[JS|dn.M] M.floor(0.9) == 0","These 2 expressions should be EQUAL",[(0.9 | 0) + " != " + 0]);
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.floor(1) == 1" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.floor(50) == 50" + "  <Ok>");
	}
	if((-0.1 | 0) + (-0.1 == (-0.1 | 0) ? 0 : -1) == -1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.floor(-0.1) == -1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1069},"[JS|dn.M] M.floor(-0.1) == -1","These 2 expressions should be EQUAL",[(-0.1 | 0) + (-0.1 == (-0.1 | 0) ? 0 : -1) + " != " + (-1)]);
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.floor(-1) == -1" + "  <Ok>");
	}
	if((-1.1 | 0) + (-1.1 == (-1.1 | 0) ? 0 : -1) == -2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.floor(-1.1) == -2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1071},"[JS|dn.M] M.floor(-1.1) == -2","These 2 expressions should be EQUAL",[(-1.1 | 0) + (-1.1 == (-1.1 | 0) ? 0 : -1) + " != " + (-2)]);
	}
	if((-1.000000001 | 0) + (-1.000000001 == (-1.000000001 | 0) ? 0 : -1) == -2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.floor(-1.000000001) == -2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1072},"[JS|dn.M] M.floor(-1.000000001) == -2","These 2 expressions should be EQUAL",[(-1.000000001 | 0) + (-1.000000001 == (-1.000000001 | 0) ? 0 : -1) + " != " + (-2)]);
	}
	if((-1.5 | 0) + (-1.5 == (-1.5 | 0) ? 0 : -1) == -2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.floor(-1.5) == -2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1073},"[JS|dn.M] M.floor(-1.5) == -2","These 2 expressions should be EQUAL",[(-1.5 | 0) + (-1.5 == (-1.5 | 0) ? 0 : -1) + " != " + (-2)]);
	}
	if((-1.9 | 0) + (-1.9 == (-1.9 | 0) ? 0 : -1) == -2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.floor(-1.9) == -2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1074},"[JS|dn.M] M.floor(-1.9) == -2","These 2 expressions should be EQUAL",[(-1.9 | 0) + (-1.9 == (-1.9 | 0) ? 0 : -1) + " != " + (-2)]);
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.setBit(0, 0) == 1" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.setBit(0, 3) == 8" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.setBit(16, 0) == 17" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.setBit(16, 1) == 18" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.unsetBit(9, 0) == 8" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.unsetBit(9, 3) == 1" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.unsetBit(25, 0) == 24" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.unsetBit(25, 1) == 25" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.unsetBit(25, 3) == 17" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.unsetBit(25, 4) == 9" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.unsetBit(25, 5) == 25" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.unsetBit(1073741824, 30) == 0" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.hasBit(1, 0)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.hasBit(3, 0)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.hasBit(3, 1)" + "  <Ok>");
	}
	if(dn_CiAssert.VERBOSE) {
		dn_Lib.println("[JS|dn.M] M.hasBit(1073741824, 30)" + "  <Ok>");
	}
	var uIntWithBit31 = -2147483648;
	var one = 1;
	if((uIntWithBit31 & one << 31) != 0 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.hasUnsignedBit(uIntWithBit31, 31)" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1100},"[JS|dn.M] M.hasUnsignedBit(uIntWithBit31, 31)","This expression should be TRUE");
	}
	if(UInt.gt(uIntWithBit31,0) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] uIntWithBit31 > 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1101},"[JS|dn.M] uIntWithBit31 > 0","This expression should be TRUE");
	}
	var intWithBit31 = -2147483648;
	var one = 1;
	if((intWithBit31 & one << 31) != 0 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.hasUnsignedBit(intWithBit31, 31)" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1103},"[JS|dn.M] M.hasUnsignedBit(intWithBit31, 31)","This expression should be TRUE");
	}
	if(intWithBit31 < 0 == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] intWithBit31 < 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1104},"[JS|dn.M] intWithBit31 < 0","This expression should be TRUE");
	}
	if(dn_M.intToBitString(17,8) == "00010001") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] intToBitString(17, 8) == \"00010001\"" + "  <Ok>");
		}
	} else {
		var tmp = dn_M.intToBitString(17,8) + " != " + "00010001";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1105},"[JS|dn.M] intToBitString(17, 8) == \"00010001\"","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_M.uIntToBitString(-2147483648) == "10000000000000000000000000000000") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] uIntToBitString(M.setUnsignedBit(0, 31)) == \"10000000000000000000000000000000\"" + "  <Ok>");
		}
	} else {
		var tmp = dn_M.uIntToBitString(-2147483648) + " != " + "10000000000000000000000000000000";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1106},"[JS|dn.M] uIntToBitString(M.setUnsignedBit(0, 31)) == \"10000000000000000000000000000000\"","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_M.intToBitString(-2147483648,0) == "") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] intToBitString(M.setUnsignedBit(0, 31), 0) == \"\"" + "  <Ok>");
		}
	} else {
		var tmp = dn_M.intToBitString(-2147483648,0) + " != " + "";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1107},"[JS|dn.M] intToBitString(M.setUnsignedBit(0, 31), 0) == \"\"","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_M.makeBitsFromBools() == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] makeBitsFromBools() == 0" + "  <Ok>");
		}
	} else {
		var tmp = dn_M.makeBitsFromBools() + " != " + 0;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1108},"[JS|dn.M] makeBitsFromBools() == 0","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_M.makeBitsFromBools(true) == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] makeBitsFromBools(true) == 1" + "  <Ok>");
		}
	} else {
		var tmp = dn_M.makeBitsFromBools(true) + " != " + 1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1110},"[JS|dn.M] makeBitsFromBools(true) == 1","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_M.makeBitsFromBools(true,false,true) == 5) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] makeBitsFromBools(true, false, true) == 5" + "  <Ok>");
		}
	} else {
		var tmp = dn_M.makeBitsFromBools(true,false,true) + " != " + 5;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1111},"[JS|dn.M] makeBitsFromBools(true, false, true) == 5","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_M.makeBitsFromBools(true,true,true,true,true,true,true,true) == 255) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] makeBitsFromBools(true, true, true, true, true, true, true, true) == 0xff" + "  <Ok>");
		}
	} else {
		var tmp = dn_M.makeBitsFromBools(true,true,true,true,true,true,true,true) + " != " + 255;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1112},"[JS|dn.M] makeBitsFromBools(true, true, true, true, true, true, true, true) == 0xff","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_M.makeBitsFromArray([]) == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] makeBitsFromArray([]) == 0" + "  <Ok>");
		}
	} else {
		var tmp = dn_M.makeBitsFromArray([]) + " != " + 0;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1113},"[JS|dn.M] makeBitsFromArray([]) == 0","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_M.makeBitsFromArray([true]) == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] makeBitsFromArray([true]) == 1" + "  <Ok>");
		}
	} else {
		var tmp = dn_M.makeBitsFromArray([true]) + " != " + 1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1114},"[JS|dn.M] makeBitsFromArray([true]) == 1","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_M.makeBitsFromArray([true,true,true,true,true,true,true,true]) == 255) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] makeBitsFromArray([true, true, true, true, true, true, true, true]) == 0xff" + "  <Ok>");
		}
	} else {
		var tmp = dn_M.makeBitsFromArray([true,true,true,true,true,true,true,true]) + " != " + 255;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1115},"[JS|dn.M] makeBitsFromArray([true, true, true, true, true, true, true, true]) == 0xff","These 2 expressions should be EQUAL",[tmp]);
	}
	var v = Std.parseInt("59");
	if((v != null && !isNaN(v) && isFinite(v) ? v : -1) == 59) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] parseInt(\"59\", -1) == 59" + "  <Ok>");
		}
	} else {
		var v = Std.parseInt("59");
		var tmp = v != null && !isNaN(v) && isFinite(v) ? v : -1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1116},"[JS|dn.M] parseInt(\"59\", -1) == 59","These 2 expressions should be EQUAL",[tmp + " != " + 59]);
	}
	var v = Std.parseInt("??");
	if((v != null && !isNaN(v) && isFinite(v) ? v : -1) == -1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] parseInt(\"??\", -1) == -1" + "  <Ok>");
		}
	} else {
		var v = Std.parseInt("??");
		var tmp = v != null && !isNaN(v) && isFinite(v) ? v : -1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1118},"[JS|dn.M] parseInt(\"??\", -1) == -1","These 2 expressions should be EQUAL",[tmp + " != " + (-1)]);
	}
	var v = Std.parseInt("59foo");
	if((v != null && !isNaN(v) && isFinite(v) ? v : -1) == 59) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] parseInt(\"59foo\", -1) == 59" + "  <Ok>");
		}
	} else {
		var v = Std.parseInt("59foo");
		var tmp = v != null && !isNaN(v) && isFinite(v) ? v : -1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1119},"[JS|dn.M] parseInt(\"59foo\", -1) == 59","These 2 expressions should be EQUAL",[tmp + " != " + 59]);
	}
	var v = Std.parseInt("foo59bar");
	if((v != null && !isNaN(v) && isFinite(v) ? v : -1) == -1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] parseInt(\"foo59bar\", -1) == -1" + "  <Ok>");
		}
	} else {
		var v = Std.parseInt("foo59bar");
		var tmp = v != null && !isNaN(v) && isFinite(v) ? v : -1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1120},"[JS|dn.M] parseInt(\"foo59bar\", -1) == -1","These 2 expressions should be EQUAL",[tmp + " != " + (-1)]);
	}
	var v = Std.parseInt("1.9");
	if((v != null && !isNaN(v) && isFinite(v) ? v : -1) == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] parseInt(\"1.9\", -1) == 1" + "  <Ok>");
		}
	} else {
		var v = Std.parseInt("1.9");
		var tmp = v != null && !isNaN(v) && isFinite(v) ? v : -1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1121},"[JS|dn.M] parseInt(\"1.9\", -1) == 1","These 2 expressions should be EQUAL",[tmp + " != " + 1]);
	}
	var v = Std.parseInt("-99");
	if((v != null && !isNaN(v) && isFinite(v) ? v : -1) == -99) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] parseInt(\"-99\", -1) == -99" + "  <Ok>");
		}
	} else {
		var v = Std.parseInt("-99");
		var tmp = v != null && !isNaN(v) && isFinite(v) ? v : -1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1122},"[JS|dn.M] parseInt(\"-99\", -1) == -99","These 2 expressions should be EQUAL",[tmp + " != " + (-99)]);
	}
	var t = 0;
	if(t < 0) {
		t = 0;
	} else if(t > 1) {
		t = 1;
	}
	var n = 1 - t;
	if(n * n * 0 + 2 * t * (1 - t) + t * t * 0.5 == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] bezier3(0, 0, 1, 0.5) == 0" + "  <Ok>");
		}
	} else {
		var t = 0;
		if(t < 0) {
			t = 0;
		} else if(t > 1) {
			t = 1;
		}
		var n = 1 - t;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1123},"[JS|dn.M] bezier3(0, 0, 1, 0.5) == 0","These 2 expressions should be EQUAL",[n * n * 0 + 2 * t * (1 - t) + t * t * 0.5 + " != " + 0]);
	}
	var t = 0.5;
	if(t < 0) {
		t = 0;
	} else if(t > 1) {
		t = 1;
	}
	var n = 1 - t;
	if(n * n * 0 + 2 * t * (1 - t) + t * t * 0.5 == 0.625) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] bezier3(0.5, 0, 1, 0.5) == 0.625" + "  <Ok>");
		}
	} else {
		var t = 0.5;
		if(t < 0) {
			t = 0;
		} else if(t > 1) {
			t = 1;
		}
		var n = 1 - t;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1125},"[JS|dn.M] bezier3(0.5, 0, 1, 0.5) == 0.625","These 2 expressions should be EQUAL",[n * n * 0 + 2 * t * (1 - t) + t * t * 0.5 + " != " + 0.625]);
	}
	var t = 1;
	if(t < 0) {
		t = 0;
	} else if(t > 1) {
		t = 1;
	}
	var n = 1 - t;
	if(n * n * 0 + 2 * t * (1 - t) + t * t * 0.5 == 0.5) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] bezier3(1, 0, 1, 0.5) == 0.5" + "  <Ok>");
		}
	} else {
		var t = 1;
		if(t < 0) {
			t = 0;
		} else if(t > 1) {
			t = 1;
		}
		var n = 1 - t;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1126},"[JS|dn.M] bezier3(1, 0, 1, 0.5) == 0.5","These 2 expressions should be EQUAL",[n * n * 0 + 2 * t * (1 - t) + t * t * 0.5 + " != " + 0.5]);
	}
	var t = 0;
	if(t < 0) {
		t = 0;
	} else if(t > 1) {
		t = 1;
	}
	var n = 1 - t;
	var n1 = 1 - t;
	if(n * n * n * 0 + 3 * t * (n1 * n1) * 0.4 + 3 * (t * t) * (1 - t) * 0.9 + t * t * t == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] bezier4(0, 0, 0.4, 0.9, 1) == 0" + "  <Ok>");
		}
	} else {
		var t = 0;
		if(t < 0) {
			t = 0;
		} else if(t > 1) {
			t = 1;
		}
		var n = 1 - t;
		var n1 = 1 - t;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1127},"[JS|dn.M] bezier4(0, 0, 0.4, 0.9, 1) == 0","These 2 expressions should be EQUAL",[n * n * n * 0 + 3 * t * (n1 * n1) * 0.4 + 3 * (t * t) * (1 - t) * 0.9 + t * t * t + " != " + 0]);
	}
	var t = 0.5;
	if(t < 0) {
		t = 0;
	} else if(t > 1) {
		t = 1;
	}
	var n = 1 - t;
	var n1 = 1 - t;
	if(n * n * n * 0 + 3 * t * (n1 * n1) * 0.4 + 3 * (t * t) * (1 - t) * 0.9 + t * t * t == 0.6125) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] bezier4(0.5, 0, 0.4, 0.9, 1) == 0.6125" + "  <Ok>");
		}
	} else {
		var t = 0.5;
		if(t < 0) {
			t = 0;
		} else if(t > 1) {
			t = 1;
		}
		var n = 1 - t;
		var n1 = 1 - t;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1129},"[JS|dn.M] bezier4(0.5, 0, 0.4, 0.9, 1) == 0.6125","These 2 expressions should be EQUAL",[n * n * n * 0 + 3 * t * (n1 * n1) * 0.4 + 3 * (t * t) * (1 - t) * 0.9 + t * t * t + " != " + 0.6125]);
	}
	var t = 1;
	if(t < 0) {
		t = 0;
	} else if(t > 1) {
		t = 1;
	}
	var n = 1 - t;
	var n1 = 1 - t;
	if(n * n * n * 0 + 3 * t * (n1 * n1) * 0.4 + 3 * (t * t) * (1 - t) * 0.9 + t * t * t == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] bezier4(1, 0, 0.4, 0.9, 1) == 1" + "  <Ok>");
		}
	} else {
		var t = 1;
		if(t < 0) {
			t = 0;
		} else if(t > 1) {
			t = 1;
		}
		var n = 1 - t;
		var n1 = 1 - t;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1130},"[JS|dn.M] bezier4(1, 0, 0.4, 0.9, 1) == 1","These 2 expressions should be EQUAL",[n * n * n * 0 + 3 * t * (n1 * n1) * 0.4 + 3 * (t * t) * (1 - t) * 0.9 + t * t * t + " != " + 1]);
	}
	var precision = 1;
	if(precision == null) {
		precision = 2;
	}
	var tmp;
	if(precision <= 0) {
		tmp = 1.623 | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = 1.123 * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp == 1.1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.pretty(1.123, 1) == 1.1" + "  <Ok>");
		}
	} else {
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = 1.623 | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = 1.123 * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1133},"[JS|dn.M] M.pretty(1.123, 1) == 1.1","These 2 expressions should be EQUAL",[tmp + " != " + 1.1]);
	}
	var precision = 2;
	if(precision == null) {
		precision = 2;
	}
	var tmp;
	if(precision <= 0) {
		tmp = 1.623 | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = 1.123 * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp == 1.12) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.pretty(1.123, 2) == 1.12" + "  <Ok>");
		}
	} else {
		var precision = 2;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = 1.623 | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = 1.123 * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1134},"[JS|dn.M] M.pretty(1.123, 2) == 1.12","These 2 expressions should be EQUAL",[tmp + " != " + 1.12]);
	}
	var precision = 0;
	if(precision == null) {
		precision = 2;
	}
	var precision1 = precision;
	if(precision1 == null) {
		precision1 = 2;
	}
	var str;
	if(precision1 <= 0) {
		str = 1.623 | 0;
	} else {
		var d = Math.pow(10,precision1);
		var x = 1.123 * d;
		str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	var str1 = Std.string(str);
	var tmp;
	if(precision == 0) {
		tmp = str1;
	} else {
		var idx = str1.lastIndexOf(".");
		var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
		if(idx < 0) {
			str1 += ".";
		}
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			str1 += "0";
		}
		tmp = str1;
	}
	if(tmp == "1") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.prettyPad(1.123, 0) == \"1\"" + "  <Ok>");
		}
	} else {
		var precision = 0;
		if(precision == null) {
			precision = 2;
		}
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var str;
		if(precision1 <= 0) {
			str = 1.623 | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = 1.123 * d;
			str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		var str1 = Std.string(str);
		var tmp;
		if(precision == 0) {
			tmp = str1;
		} else {
			var idx = str1.lastIndexOf(".");
			var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
			if(idx < 0) {
				str1 += ".";
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				str1 += "0";
			}
			tmp = str1;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1135},"[JS|dn.M] M.prettyPad(1.123, 0) == \"1\"","These 2 expressions should be EQUAL",[tmp + " != " + "1"]);
	}
	var precision = 2;
	if(precision == null) {
		precision = 2;
	}
	var precision1 = precision;
	if(precision1 == null) {
		precision1 = 2;
	}
	var str;
	if(precision1 <= 0) {
		str = 1.623 | 0;
	} else {
		var d = Math.pow(10,precision1);
		var x = 1.123 * d;
		str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	var str1 = Std.string(str);
	var tmp;
	if(precision == 0) {
		tmp = str1;
	} else {
		var idx = str1.lastIndexOf(".");
		var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
		if(idx < 0) {
			str1 += ".";
		}
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			str1 += "0";
		}
		tmp = str1;
	}
	if(tmp == "1.12") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.prettyPad(1.123, 2) == \"1.12\"" + "  <Ok>");
		}
	} else {
		var precision = 2;
		if(precision == null) {
			precision = 2;
		}
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var str;
		if(precision1 <= 0) {
			str = 1.623 | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = 1.123 * d;
			str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		var str1 = Std.string(str);
		var tmp;
		if(precision == 0) {
			tmp = str1;
		} else {
			var idx = str1.lastIndexOf(".");
			var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
			if(idx < 0) {
				str1 += ".";
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				str1 += "0";
			}
			tmp = str1;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1137},"[JS|dn.M] M.prettyPad(1.123, 2) == \"1.12\"","These 2 expressions should be EQUAL",[tmp + " != " + "1.12"]);
	}
	var precision = 2;
	if(precision == null) {
		precision = 2;
	}
	var precision1 = precision;
	if(precision1 == null) {
		precision1 = 2;
	}
	var str;
	if(precision1 <= 0) {
		str = 1.6 | 0;
	} else {
		var d = Math.pow(10,precision1);
		var x = 1.1 * d;
		str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	var str1 = Std.string(str);
	var tmp;
	if(precision == 0) {
		tmp = str1;
	} else {
		var idx = str1.lastIndexOf(".");
		var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
		if(idx < 0) {
			str1 += ".";
		}
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			str1 += "0";
		}
		tmp = str1;
	}
	if(tmp == "1.10") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.prettyPad(1.1, 2) == \"1.10\"" + "  <Ok>");
		}
	} else {
		var precision = 2;
		if(precision == null) {
			precision = 2;
		}
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var str;
		if(precision1 <= 0) {
			str = 1.6 | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = 1.1 * d;
			str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		var str1 = Std.string(str);
		var tmp;
		if(precision == 0) {
			tmp = str1;
		} else {
			var idx = str1.lastIndexOf(".");
			var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
			if(idx < 0) {
				str1 += ".";
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				str1 += "0";
			}
			tmp = str1;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1138},"[JS|dn.M] M.prettyPad(1.1, 2) == \"1.10\"","These 2 expressions should be EQUAL",[tmp + " != " + "1.10"]);
	}
	var precision = 2;
	if(precision == null) {
		precision = 2;
	}
	var precision1 = precision;
	if(precision1 == null) {
		precision1 = 2;
	}
	var str;
	if(precision1 <= 0) {
		str = 1.5 | 0;
	} else {
		var d = Math.pow(10,precision1);
		var x = d;
		str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	var str1 = Std.string(str);
	var tmp;
	if(precision == 0) {
		tmp = str1;
	} else {
		var idx = str1.lastIndexOf(".");
		var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
		if(idx < 0) {
			str1 += ".";
		}
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			str1 += "0";
		}
		tmp = str1;
	}
	if(tmp == "1.00") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.prettyPad(1, 2) == \"1.00\"" + "  <Ok>");
		}
	} else {
		var precision = 2;
		if(precision == null) {
			precision = 2;
		}
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var str;
		if(precision1 <= 0) {
			str = 1.5 | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = d;
			str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		var str1 = Std.string(str);
		var tmp;
		if(precision == 0) {
			tmp = str1;
		} else {
			var idx = str1.lastIndexOf(".");
			var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
			if(idx < 0) {
				str1 += ".";
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				str1 += "0";
			}
			tmp = str1;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1139},"[JS|dn.M] M.prettyPad(1, 2) == \"1.00\"","These 2 expressions should be EQUAL",[tmp + " != " + "1.00"]);
	}
	var precision = 2;
	if(precision == null) {
		precision = 2;
	}
	var precision1 = precision;
	if(precision1 == null) {
		precision1 = 2;
	}
	var str;
	if(precision1 <= 0) {
		str = 123.5 | 0;
	} else {
		var d = Math.pow(10,precision1);
		var x = 123 * d;
		str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	var str1 = Std.string(str);
	var tmp;
	if(precision == 0) {
		tmp = str1;
	} else {
		var idx = str1.lastIndexOf(".");
		var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
		if(idx < 0) {
			str1 += ".";
		}
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			str1 += "0";
		}
		tmp = str1;
	}
	if(tmp == "123.00") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.prettyPad(123, 2) == \"123.00\"" + "  <Ok>");
		}
	} else {
		var precision = 2;
		if(precision == null) {
			precision = 2;
		}
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var str;
		if(precision1 <= 0) {
			str = 123.5 | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = 123 * d;
			str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		var str1 = Std.string(str);
		var tmp;
		if(precision == 0) {
			tmp = str1;
		} else {
			var idx = str1.lastIndexOf(".");
			var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
			if(idx < 0) {
				str1 += ".";
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				str1 += "0";
			}
			tmp = str1;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1140},"[JS|dn.M] M.prettyPad(123, 2) == \"123.00\"","These 2 expressions should be EQUAL",[tmp + " != " + "123.00"]);
	}
	var precision = 1;
	if(precision == null) {
		precision = 2;
	}
	var precision1 = precision;
	if(precision1 == null) {
		precision1 = 2;
	}
	var str;
	if(precision1 <= 0) {
		str = 2.499 | 0;
	} else {
		var d = Math.pow(10,precision1);
		var x = 1.999 * d;
		str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	var str1 = Std.string(str);
	var tmp;
	if(precision == 0) {
		tmp = str1;
	} else {
		var idx = str1.lastIndexOf(".");
		var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
		if(idx < 0) {
			str1 += ".";
		}
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			str1 += "0";
		}
		tmp = str1;
	}
	if(tmp == "2.0") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.prettyPad(1.999, 1) == \"2.0\"" + "  <Ok>");
		}
	} else {
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var str;
		if(precision1 <= 0) {
			str = 2.499 | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = 1.999 * d;
			str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		var str1 = Std.string(str);
		var tmp;
		if(precision == 0) {
			tmp = str1;
		} else {
			var idx = str1.lastIndexOf(".");
			var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
			if(idx < 0) {
				str1 += ".";
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				str1 += "0";
			}
			tmp = str1;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1141},"[JS|dn.M] M.prettyPad(1.999, 1) == \"2.0\"","These 2 expressions should be EQUAL",[tmp + " != " + "2.0"]);
	}
	var precision = 4;
	if(precision == null) {
		precision = 2;
	}
	var precision1 = precision;
	if(precision1 == null) {
		precision1 = 2;
	}
	var str;
	if(precision1 <= 0) {
		str = 2.499 | 0;
	} else {
		var d = Math.pow(10,precision1);
		var x = 1.999 * d;
		str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	var str1 = Std.string(str);
	var tmp;
	if(precision == 0) {
		tmp = str1;
	} else {
		var idx = str1.lastIndexOf(".");
		var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
		if(idx < 0) {
			str1 += ".";
		}
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			str1 += "0";
		}
		tmp = str1;
	}
	if(tmp == "1.9990") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.prettyPad(1.999, 4) == \"1.9990\"" + "  <Ok>");
		}
	} else {
		var precision = 4;
		if(precision == null) {
			precision = 2;
		}
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var str;
		if(precision1 <= 0) {
			str = 2.499 | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = 1.999 * d;
			str = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		var str1 = Std.string(str);
		var tmp;
		if(precision == 0) {
			tmp = str1;
		} else {
			var idx = str1.lastIndexOf(".");
			var n = idx < 0 ? precision : precision - (str1.length - idx - 1);
			if(idx < 0) {
				str1 += ".";
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				str1 += "0";
			}
			tmp = str1;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1142},"[JS|dn.M] M.prettyPad(1.999, 4) == \"1.9990\"","These 2 expressions should be EQUAL",[tmp + " != " + "1.9990"]);
	}
	var str = "123";
	var tmp;
	if(str.length <= 3) {
		tmp = str;
	} else {
		var i = 1;
		var out = "";
		while(i <= str.length) {
			out = HxOverrides.substr(str,-i,1) + out;
			if(i % 3 == 0 && i < str.length) {
				out = " " + out;
			}
			++i;
		}
		tmp = out;
	}
	if(tmp == "123") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.groupNumbers(123) == \"123\"" + "  <Ok>");
		}
	} else {
		var str = "123";
		var tmp;
		if(str.length <= 3) {
			tmp = str;
		} else {
			var i = 1;
			var out = "";
			while(i <= str.length) {
				out = HxOverrides.substr(str,-i,1) + out;
				if(i % 3 == 0 && i < str.length) {
					out = " " + out;
				}
				++i;
			}
			tmp = out;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1143},"[JS|dn.M] M.groupNumbers(123) == \"123\"","These 2 expressions should be EQUAL",[tmp + " != " + "123"]);
	}
	var str = "1234";
	var tmp;
	if(str.length <= 3) {
		tmp = str;
	} else {
		var i = 1;
		var out = "";
		while(i <= str.length) {
			out = HxOverrides.substr(str,-i,1) + out;
			if(i % 3 == 0 && i < str.length) {
				out = " " + out;
			}
			++i;
		}
		tmp = out;
	}
	if(tmp == "1 234") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.groupNumbers(1234) == \"1 234\"" + "  <Ok>");
		}
	} else {
		var str = "1234";
		var tmp;
		if(str.length <= 3) {
			tmp = str;
		} else {
			var i = 1;
			var out = "";
			while(i <= str.length) {
				out = HxOverrides.substr(str,-i,1) + out;
				if(i % 3 == 0 && i < str.length) {
					out = " " + out;
				}
				++i;
			}
			tmp = out;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1145},"[JS|dn.M] M.groupNumbers(1234) == \"1 234\"","These 2 expressions should be EQUAL",[tmp + " != " + "1 234"]);
	}
	var str = "12345";
	var tmp;
	if(str.length <= 3) {
		tmp = str;
	} else {
		var i = 1;
		var out = "";
		while(i <= str.length) {
			out = HxOverrides.substr(str,-i,1) + out;
			if(i % 3 == 0 && i < str.length) {
				out = " " + out;
			}
			++i;
		}
		tmp = out;
	}
	if(tmp == "12 345") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.groupNumbers(12345) == \"12 345\"" + "  <Ok>");
		}
	} else {
		var str = "12345";
		var tmp;
		if(str.length <= 3) {
			tmp = str;
		} else {
			var i = 1;
			var out = "";
			while(i <= str.length) {
				out = HxOverrides.substr(str,-i,1) + out;
				if(i % 3 == 0 && i < str.length) {
					out = " " + out;
				}
				++i;
			}
			tmp = out;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1146},"[JS|dn.M] M.groupNumbers(12345) == \"12 345\"","These 2 expressions should be EQUAL",[tmp + " != " + "12 345"]);
	}
	var str = "1234567";
	var tmp;
	if(str.length <= 3) {
		tmp = str;
	} else {
		var i = 1;
		var out = "";
		while(i <= str.length) {
			out = HxOverrides.substr(str,-i,1) + out;
			if(i % 3 == 0 && i < str.length) {
				out = " " + out;
			}
			++i;
		}
		tmp = out;
	}
	if(tmp == "1 234 567") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.groupNumbers(1234567) == \"1 234 567\"" + "  <Ok>");
		}
	} else {
		var str = "1234567";
		var tmp;
		if(str.length <= 3) {
			tmp = str;
		} else {
			var i = 1;
			var out = "";
			while(i <= str.length) {
				out = HxOverrides.substr(str,-i,1) + out;
				if(i % 3 == 0 && i < str.length) {
					out = " " + out;
				}
				++i;
			}
			tmp = out;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1147},"[JS|dn.M] M.groupNumbers(1234567) == \"1 234 567\"","These 2 expressions should be EQUAL",[tmp + " != " + "1 234 567"]);
	}
	var v = 1.;
	var precision = 1;
	if(precision == null) {
		precision = 2;
	}
	var tmp;
	if(precision <= 0) {
		tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = v * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp + "K" == "1K") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.unit(1000) == \"1K\"" + "  <Ok>");
		}
	} else {
		var v = 1.;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1148},"[JS|dn.M] M.unit(1000) == \"1K\"","These 2 expressions should be EQUAL",[tmp + "K" + " != " + "1K"]);
	}
	var v = 1.234;
	var precision = 1;
	if(precision == null) {
		precision = 2;
	}
	var tmp;
	if(precision <= 0) {
		tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = v * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp + "K" == "1.2K") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.unit(1234) == \"1.2K\"" + "  <Ok>");
		}
	} else {
		var v = 1.234;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1150},"[JS|dn.M] M.unit(1234) == \"1.2K\"","These 2 expressions should be EQUAL",[tmp + "K" + " != " + "1.2K"]);
	}
	var precision = 2;
	if(precision == null) {
		precision = 1;
	}
	var v = 1.234;
	var precision1 = precision;
	if(precision1 == null) {
		precision1 = 2;
	}
	var tmp;
	if(precision1 <= 0) {
		tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision1);
		var x = v * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp + "K" == "1.23K") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.unit(1234, 2) == \"1.23K\"" + "  <Ok>");
		}
	} else {
		var precision = 2;
		if(precision == null) {
			precision = 1;
		}
		var v = 1.234;
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var tmp;
		if(precision1 <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1151},"[JS|dn.M] M.unit(1234, 2) == \"1.23K\"","These 2 expressions should be EQUAL",[tmp + "K" + " != " + "1.23K"]);
	}
	var v = 1.;
	var precision = 1;
	if(precision == null) {
		precision = 2;
	}
	var tmp;
	if(precision <= 0) {
		tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = v * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp + "M" == "1M") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.unit(1000000) == \"1M\"" + "  <Ok>");
		}
	} else {
		var v = 1.;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1152},"[JS|dn.M] M.unit(1000000) == \"1M\"","These 2 expressions should be EQUAL",[tmp + "M" + " != " + "1M"]);
	}
	var v = 1.5;
	var precision = 1;
	if(precision == null) {
		precision = 2;
	}
	var tmp;
	if(precision <= 0) {
		tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = v * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp + "M" == "1.5M") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.unit(1500000) == \"1.5M\"" + "  <Ok>");
		}
	} else {
		var v = 1.5;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1153},"[JS|dn.M] M.unit(1500000) == \"1.5M\"","These 2 expressions should be EQUAL",[tmp + "M" + " != " + "1.5M"]);
	}
	var v = 0.001234;
	var precision = 1;
	if(precision == null) {
		precision = 2;
	}
	var tmp;
	if(precision <= 0) {
		tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = v * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp + "M" == "0M") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.unitMega(1234) == \"0M\"" + "  <Ok>");
		}
	} else {
		var v = 0.001234;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1154},"[JS|dn.M] M.unitMega(1234) == \"0M\"","These 2 expressions should be EQUAL",[tmp + "M" + " != " + "0M"]);
	}
	var v = 0.123456;
	var precision = 1;
	if(precision == null) {
		precision = 2;
	}
	var tmp;
	if(precision <= 0) {
		tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = v * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp + "M" == "0.1M") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.unitMega(123456) == \"0.1M\"" + "  <Ok>");
		}
	} else {
		var v = 0.123456;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1156},"[JS|dn.M] M.unitMega(123456) == \"0.1M\"","These 2 expressions should be EQUAL",[tmp + "M" + " != " + "0.1M"]);
	}
	var v = 1.234567;
	var precision = 1;
	if(precision == null) {
		precision = 2;
	}
	var tmp;
	if(precision <= 0) {
		tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = v * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp + "M" == "1.2M") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.unitMega(1234567) == \"1.2M\"" + "  <Ok>");
		}
	} else {
		var v = 1.234567;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1157},"[JS|dn.M] M.unitMega(1234567) == \"1.2M\"","These 2 expressions should be EQUAL",[tmp + "M" + " != " + "1.2M"]);
	}
	var precision = 2;
	if(precision == null) {
		precision = 1;
	}
	var v = 1.234567;
	var precision1 = precision;
	if(precision1 == null) {
		precision1 = 2;
	}
	var tmp;
	if(precision1 <= 0) {
		tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision1);
		var x = v * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp + "M" == "1.23M") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.unitMega(1234567, 2) == \"1.23M\"" + "  <Ok>");
		}
	} else {
		var precision = 2;
		if(precision == null) {
			precision = 1;
		}
		var v = 1.234567;
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		var tmp;
		if(precision1 <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1158},"[JS|dn.M] M.unitMega(1234567, 2) == \"1.23M\"","These 2 expressions should be EQUAL",[tmp + "M" + " != " + "1.23M"]);
	}
	var v = 1.5;
	var precision = 1;
	if(precision == null) {
		precision = 2;
	}
	var tmp;
	if(precision <= 0) {
		tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = v * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	if(tmp + "M" == "1.5M") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.unitMega(1500000) == \"1.5M\"" + "  <Ok>");
		}
	} else {
		var v = 1.5;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp;
		if(precision <= 0) {
			tmp = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1159},"[JS|dn.M] M.unitMega(1500000) == \"1.5M\"","These 2 expressions should be EQUAL",[tmp + "M" + " != " + "1.5M"]);
	}
	var x = -2.00000000000000044;
	if((x < 0 ? 0 : x > 1 ? 1 : x) == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.subRatio(0.1, 0.5, 0.7) == 0" + "  <Ok>");
		}
	} else {
		var x = -2.00000000000000044;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1160},"[JS|dn.M] M.subRatio(0.1, 0.5, 0.7) == 0","These 2 expressions should be EQUAL",[(x < 0 ? 0 : x > 1 ? 1 : x) + " != " + 0]);
	}
	var x = 0.;
	if((x < 0 ? 0 : x > 1 ? 1 : x) == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.subRatio(0.5, 0.5, 0.7) == 0" + "  <Ok>");
		}
	} else {
		var x = 0.;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1162},"[JS|dn.M] M.subRatio(0.5, 0.5, 0.7) == 0","These 2 expressions should be EQUAL",[(x < 0 ? 0 : x > 1 ? 1 : x) + " != " + 0]);
	}
	var x = 0.5;
	if((x < 0 ? 0 : x > 1 ? 1 : x) == 0.5) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.subRatio(0.6, 0.5, 0.7) == 0.5" + "  <Ok>");
		}
	} else {
		var x = 0.5;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1163},"[JS|dn.M] M.subRatio(0.6, 0.5, 0.7) == 0.5","These 2 expressions should be EQUAL",[(x < 0 ? 0 : x > 1 ? 1 : x) + " != " + 0.5]);
	}
	var x = 1.;
	if((x < 0 ? 0 : x > 1 ? 1 : x) == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.subRatio(0.7, 0.5, 0.7) == 1" + "  <Ok>");
		}
	} else {
		var x = 1.;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1164},"[JS|dn.M] M.subRatio(0.7, 0.5, 0.7) == 1","These 2 expressions should be EQUAL",[(x < 0 ? 0 : x > 1 ? 1 : x) + " != " + 1]);
	}
	var x = 2.00000000000000044;
	if((x < 0 ? 0 : x > 1 ? 1 : x) == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.subRatio(0.9, 0.5, 0.7) == 1" + "  <Ok>");
		}
	} else {
		var x = 2.00000000000000044;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1165},"[JS|dn.M] M.subRatio(0.9, 0.5, 0.7) == 1","These 2 expressions should be EQUAL",[(x < 0 ? 0 : x > 1 ? 1 : x) + " != " + 1]);
	}
	var x = 2.6 - (2.6 | 0);
	var v = x < 0 ? -x : x;
	var d = Math.pow(10,2);
	var x = v * d;
	var d1 = Math.pow(10,2);
	var x1 = 0.6 * d1;
	if(((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d == ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.pretty(M.decimals(2.6)) == M.pretty(0.6)" + "  <Ok>");
		}
	} else {
		var x = 2.6 - (2.6 | 0);
		var v = x < 0 ? -x : x;
		var d = Math.pow(10,2);
		var x = v * d;
		var d1 = Math.pow(10,2);
		var x1 = 0.6 * d1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1166},"[JS|dn.M] M.pretty(M.decimals(2.6)) == M.pretty(0.6)","These 2 expressions should be EQUAL",[((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d + " != " + ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1]);
	}
	var x = 0.4 - (0.4 | 0);
	var v = x < 0 ? -x : x;
	var d = Math.pow(10,2);
	var x = v * d;
	var d1 = Math.pow(10,2);
	var x1 = 0.4 * d1;
	if(((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d == ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.pretty(M.decimals(0.4)) == M.pretty(0.4)" + "  <Ok>");
		}
	} else {
		var x = 0.4 - (0.4 | 0);
		var v = x < 0 ? -x : x;
		var d = Math.pow(10,2);
		var x = v * d;
		var d1 = Math.pow(10,2);
		var x1 = 0.4 * d1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1168},"[JS|dn.M] M.pretty(M.decimals(0.4)) == M.pretty(0.4)","These 2 expressions should be EQUAL",[((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d + " != " + ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1]);
	}
	var x = -2.9 - (-2.9 | 0);
	var v = x < 0 ? -x : x;
	var d = Math.pow(10,2);
	var x = v * d;
	var d1 = Math.pow(10,2);
	var x1 = 0.9 * d1;
	if(((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d == ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.pretty(M.decimals(-2.9)) == M.pretty(0.9)" + "  <Ok>");
		}
	} else {
		var x = -2.9 - (-2.9 | 0);
		var v = x < 0 ? -x : x;
		var d = Math.pow(10,2);
		var x = v * d;
		var d1 = Math.pow(10,2);
		var x1 = 0.9 * d1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1169},"[JS|dn.M] M.pretty(M.decimals(-2.9)) == M.pretty(0.9)","These 2 expressions should be EQUAL",[((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d + " != " + ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1]);
	}
	var x = -0.2 - (-0.2 | 0);
	var v = x < 0 ? -x : x;
	var d = Math.pow(10,2);
	var x = v * d;
	var d1 = Math.pow(10,2);
	var x1 = 0.2 * d1;
	if(((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d == ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.pretty(M.decimals(-0.2)) == M.pretty(0.2)" + "  <Ok>");
		}
	} else {
		var x = -0.2 - (-0.2 | 0);
		var v = x < 0 ? -x : x;
		var d = Math.pow(10,2);
		var x = v * d;
		var d1 = Math.pow(10,2);
		var x1 = 0.2 * d1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1170},"[JS|dn.M] M.pretty(M.decimals(-0.2)) == M.pretty(0.2)","These 2 expressions should be EQUAL",[((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d + " != " + ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1]);
	}
	var x = 0;
	var v = x < 0 ? -x : x;
	var d = Math.pow(10,2);
	var x = v * d;
	var d1 = Math.pow(10,2);
	var x1 = 0 * d1;
	if(((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d == ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.pretty(M.decimals(0)) == M.pretty(0)" + "  <Ok>");
		}
	} else {
		var x = 0;
		var v = x < 0 ? -x : x;
		var d = Math.pow(10,2);
		var x = v * d;
		var d1 = Math.pow(10,2);
		var x1 = 0 * d1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1171},"[JS|dn.M] M.pretty(M.decimals(0)) == M.pretty(0)","These 2 expressions should be EQUAL",[((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d + " != " + ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1]);
	}
	var x = 0;
	var v = x < 0 ? -x : x;
	var d = Math.pow(10,2);
	var x = v * d;
	var d1 = Math.pow(10,2);
	var x1 = 0 * d1;
	if(((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d == ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.pretty(M.decimals(3)) == M.pretty(0)" + "  <Ok>");
		}
	} else {
		var x = 0;
		var v = x < 0 ? -x : x;
		var d = Math.pow(10,2);
		var x = v * d;
		var d1 = Math.pow(10,2);
		var x1 = 0 * d1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1172},"[JS|dn.M] M.pretty(M.decimals(3)) == M.pretty(0)","These 2 expressions should be EQUAL",[((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d + " != " + ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1]);
	}
	var x = 10.62 - (10.62 | 0);
	var v = x < 0 ? -x : x;
	var d = Math.pow(10,2);
	var x = v * d;
	var d1 = Math.pow(10,2);
	var x1 = 0.62 * d1;
	if(((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d == ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.M] M.pretty(M.decimals(10.62)) == M.pretty(0.62)" + "  <Ok>");
		}
	} else {
		var x = 10.62 - (10.62 | 0);
		var v = x < 0 ? -x : x;
		var d = Math.pow(10,2);
		var x = v * d;
		var d1 = Math.pow(10,2);
		var x1 = 0.62 * d1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/M.hx", line : 1173},"[JS|dn.M] M.pretty(M.decimals(10.62)) == M.pretty(0.62)","These 2 expressions should be EQUAL",[((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d + " != " + ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1]);
	}
};
var dn_struct_FixedArray = function(name,maxSize) {
	this.preserveOrder = false;
	this.autoExpandSize = 0;
	this.name = name;
	this.values = new Array(maxSize);
	this.nalloc = 0;
};
$hxClasses["dn.struct.FixedArray"] = dn_struct_FixedArray;
dn_struct_FixedArray.__name__ = "dn.struct.FixedArray";
dn_struct_FixedArray.fromArray = function(arr) {
	var fa = new dn_struct_FixedArray(null,0);
	fa.loadArray(arr);
	return fa;
};
dn_struct_FixedArray.prototype = {
	get_allocated: function() {
		return this.nalloc;
	}
	,get_maxSize: function() {
		return this.values.length;
	}
	,get_length: function() {
		return this.nalloc;
	}
	,iterator: function() {
		return new dn_struct__$FixedArray_FixedArrayIterator(this);
	}
	,toString: function() {
		var _gthis = this;
		var a = [];
		var _g_arr = this;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var v = _g_arr.values[_g_i++];
			a.push(v);
		}
		var result = new Array(a.length);
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _gthis.toStringValue(a[i]);
		}
		return result.toString() + ("<" + this.nalloc + "/" + this.values.length + ">");
	}
	,shortString: function() {
		var _gthis = this;
		var a = [];
		var _g_arr = this;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var v = _g_arr.values[_g_i++];
			a.push(v);
		}
		var result = new Array(a.length);
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _gthis.toStringValue(a[i]);
		}
		return result.join(",");
	}
	,toStringValue: function(v) {
		return Std.string(v);
	}
	,loadArray: function(arr) {
		this.values = new Array(arr.length);
		this.nalloc = 0;
		var _g = 0;
		while(_g < arr.length) {
			var e = arr[_g];
			++_g;
			this.push(e);
		}
	}
	,mapToArray: function(mapValue) {
		var out = [];
		var _g_arr = this;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var v = _g_arr.values[_g_i++];
			out.push(mapValue(v));
		}
		return out;
	}
	,enableAutoExpand: function(sizeIncrease) {
		this.autoExpandSize = sizeIncrease;
	}
	,isAutoExpandable: function() {
		return this.autoExpandSize > 0;
	}
	,exists: function(idx) {
		if(idx >= 0) {
			return idx < this.nalloc;
		} else {
			return false;
		}
	}
	,get: function(idx) {
		if(idx >= 0 && idx < this.nalloc) {
			return this.values[idx];
		} else {
			return null;
		}
	}
	,pickRandom: function(rndFunc,removeAfterPick) {
		if(removeAfterPick == null) {
			removeAfterPick = false;
		}
		if(this.nalloc == 0) {
			return null;
		} else {
			var idx = (rndFunc == null ? Std.random : rndFunc)(this.nalloc);
			if(removeAfterPick) {
				var e = idx >= 0 && idx < this.nalloc ? this.values[idx] : null;
				this.removeIndex(idx);
				return e;
			} else if(idx >= 0 && idx < this.nalloc) {
				return this.values[idx];
			} else {
				return null;
			}
		}
	}
	,set: function(idx,v) {
		if(idx < 0 || idx >= this.nalloc) {
			throw haxe_Exception.thrown("Out-of-bounds FixedArray set (idx=" + idx + ", allocated=" + this.nalloc + ")");
		}
		return this.values[idx] = v;
	}
	,first: function() {
		return this.values[0];
	}
	,oneRandomly: function() {
		if(this.nalloc > 0) {
			return this.values[Std.random(this.nalloc)];
		} else {
			return null;
		}
	}
	,last: function() {
		return this.values[this.nalloc - 1];
	}
	,pop: function() {
		if(this.nalloc > 0) {
			return this.values[this.nalloc-- - 1];
		} else {
			return null;
		}
	}
	,shift: function() {
		if(this.nalloc == 0) {
			return null;
		} else {
			var v = this.values[0];
			this.removeIndex(0);
			return v;
		}
	}
	,empty: function() {
		this.nalloc = 0;
	}
	,contains: function(search) {
		var _g_arr = this;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var v = _g_arr.values[_g_i++];
			if(v == search) {
				return true;
			}
		}
		return false;
	}
	,push: function(e) {
		if(this.nalloc >= this.values.length) {
			if(this.autoExpandSize <= 0) {
				throw haxe_Exception.thrown("FixedArray limit reached (" + this.values.length + ")");
			} else {
				var newValues = new Array(this.values.length + this.autoExpandSize);
				var _g = 0;
				var _g1 = this.values.length;
				while(_g < _g1) {
					var i = _g++;
					newValues[i] = this.values[i];
				}
				this.values = newValues;
			}
		}
		this.values[this.nalloc] = e;
		this.nalloc++;
	}
	,remove: function(e) {
		var found = false;
		var _g = 0;
		var _g1 = this.nalloc;
		while(_g < _g1) {
			var i = _g++;
			if(this.values[i] == e) {
				this.removeIndex(i);
				found = true;
				break;
			}
		}
		return found;
	}
	,removeIndex: function(i) {
		if(i < this.nalloc) {
			if(this.nalloc == 1) {
				this.nalloc = 0;
			} else if(!this.preserveOrder) {
				this.values[i] = this.values[this.nalloc - 1];
				this.nalloc--;
			} else {
				var _g = i + 1;
				var _g1 = this.nalloc;
				while(_g < _g1) {
					var j = _g++;
					this.values[j - 1] = this.values[j];
				}
				this.nalloc--;
			}
		}
	}
	,dispose: function() {
		this.values = null;
		this.nalloc = 0;
	}
	,bubbleSort: function(getSortWeight) {
		var tmp;
		var _g = 0;
		var _g1 = this.nalloc - 1;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = i + 1;
			var _g3 = this.nalloc;
			while(_g2 < _g3) {
				var j = _g2++;
				if(getSortWeight(i >= 0 && i < this.nalloc ? this.values[i] : null) > getSortWeight(j >= 0 && j < this.nalloc ? this.values[j] : null)) {
					tmp = i >= 0 && i < this.nalloc ? this.values[i] : null;
					var v = j >= 0 && j < this.nalloc ? this.values[j] : null;
					if(i < 0 || i >= this.nalloc) {
						throw haxe_Exception.thrown("Out-of-bounds FixedArray set (idx=" + i + ", allocated=" + this.nalloc + ")");
					}
					this.values[i] = v;
					if(j < 0 || j >= this.nalloc) {
						throw haxe_Exception.thrown("Out-of-bounds FixedArray set (idx=" + j + ", allocated=" + this.nalloc + ")");
					}
					this.values[j] = tmp;
				}
			}
		}
	}
	,shuffle: function(randFunc) {
		if(randFunc == null) {
			randFunc = Std.random;
		}
		var m = this.nalloc;
		var i = 0;
		var tmp;
		while(m > 0) {
			i = randFunc(m--);
			tmp = this.values[m];
			this.values[m] = this.values[i];
			this.values[i] = tmp;
		}
	}
	,__class__: dn_struct_FixedArray
};
var dn_Process = function(parent) {
	this.tmpProfilerTimes = new haxe_ds_StringMap();
	this._initOnceDone = false;
	this._fixedUpdateAccu = 0.;
	this.ignoreTimeMultipliers = false;
	this.baseTimeMul = 1.0;
	this.init();
	if(parent == null) {
		dn_Process.ROOTS.push(this);
	} else {
		parent.addChild(this);
	}
	dn_Process.resizeAll(false);
};
$hxClasses["dn.Process"] = dn_Process;
dn_Process.__name__ = "dn.Process";
dn_Process.rprintAll = function() {
	var all = [];
	var _g_arr = dn_Process.ROOTS;
	var _g_i = 0;
	while(_g_i < _g_arr.nalloc) {
		var p = _g_arr.values[_g_i++];
		all.push(p.rprintChildren());
	}
	return all.join("\n");
};
dn_Process.destroyAllExcept = function(excepts) {
	var _g_arr = dn_Process.ROOTS;
	var _g_i = 0;
	while(_g_i < _g_arr.nalloc) {
		var p = _g_arr.values[_g_i++];
		if(p.destroyed) {
			continue;
		}
		var keep = false;
		var _g = 0;
		while(_g < excepts.length) {
			var e = excepts[_g];
			++_g;
			if(e == p) {
				keep = true;
				break;
			}
		}
		if(!keep) {
			p.destroyed = true;
		}
	}
};
dn_Process.clearProfilingTimes = function() {
	dn_Process.PROFILER_TIMES = new haxe_ds_StringMap();
};
dn_Process.getSortedProfilerTimes = function() {
	var all = [];
	var h = dn_Process.PROFILER_TIMES.h;
	var i_h = h;
	var i_keys = Object.keys(h);
	var i_length = i_keys.length;
	var i_current = 0;
	while(i_current < i_length) {
		var key = i_keys[i_current++];
		var i = { key : key, value : i_h[key]};
		all.push(i);
	}
	all.sort(function(a,b) {
		return -Reflect.compare(a.value,b.value);
	});
	return all;
};
dn_Process.canRun = function(p) {
	if(!p.isPaused()) {
		return !p.destroyed;
	} else {
		return false;
	}
};
dn_Process._doPreUpdate = function(p,utmod) {
	if(!(!p.isPaused() && !p.destroyed)) {
		return;
	}
	p.utmod = utmod;
	p.ftime += p.utmod * p.getComputedTimeMultiplier();
	p.uftime += p.utmod;
	p.delayer.update(p.utmod * p.getComputedTimeMultiplier());
	if(!p.isPaused() && !p.destroyed) {
		p.udelayer.update(p.utmod);
	}
	if(!p.isPaused() && !p.destroyed) {
		p.cd.update(p.utmod * p.getComputedTimeMultiplier());
	}
	if(!p.isPaused() && !p.destroyed) {
		p.ucd.update(p.utmod);
	}
	if(!p.isPaused() && !p.destroyed) {
		p.tw.update(p.utmod * p.getComputedTimeMultiplier());
	}
	if(!p.isPaused() && !p.destroyed) {
		if(!p._initOnceDone) {
			p.initOnceBeforeUpdate();
			p._initOnceDone = true;
		}
		p.preUpdate();
	}
	if(!p.isPaused() && !p.destroyed) {
		var _g_arr = p.children;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var c = _g_arr.values[_g_i++];
			dn_Process._doPreUpdate(c,p.utmod);
		}
	}
};
dn_Process._doMainUpdate = function(p) {
	if(!(!p.isPaused() && !p.destroyed)) {
		return;
	}
	var id = "update";
	if(dn_Process.PROFILING) {
		id = p.getDisplayName() + "." + id;
		p.tmpProfilerTimes.h[id] = HxOverrides.now() / 1000;
	}
	p.update();
	if(p.onUpdateCb != null) {
		p.onUpdateCb();
	}
	var id = "update";
	if(dn_Process.PROFILING) {
		id = p.getDisplayName() + "." + id;
		if(Object.prototype.hasOwnProperty.call(p.tmpProfilerTimes.h,id)) {
			var t = HxOverrides.now() / 1000 - p.tmpProfilerTimes.h[id];
			var _this = p.tmpProfilerTimes;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			if(!Object.prototype.hasOwnProperty.call(dn_Process.PROFILER_TIMES.h,id)) {
				dn_Process.PROFILER_TIMES.h[id] = t;
			} else {
				dn_Process.PROFILER_TIMES.h[id] += t;
			}
		}
	}
	if(!p.isPaused() && !p.destroyed) {
		var _g_arr = p.children;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			dn_Process._doMainUpdate(p);
		}
	}
};
dn_Process._doFixedUpdate = function(p) {
	if(!(!p.isPaused() && !p.destroyed)) {
		return;
	}
	var id = "fixed";
	if(dn_Process.PROFILING) {
		id = p.getDisplayName() + "." + id;
		p.tmpProfilerTimes.h[id] = HxOverrides.now() / 1000;
	}
	p._fixedUpdateAccu += p.utmod * p.getComputedTimeMultiplier();
	while(p._fixedUpdateAccu >= p.getDefaultFrameRate() / dn_Process.FIXED_UPDATE_FPS) {
		p._fixedUpdateAccu -= p.getDefaultFrameRate() / dn_Process.FIXED_UPDATE_FPS;
		if(!p.isPaused() && !p.destroyed) {
			p.fixedUpdate();
			if(p.onFixedUpdateCb != null) {
				p.onFixedUpdateCb();
			}
		}
	}
	var id = "fixed";
	if(dn_Process.PROFILING) {
		id = p.getDisplayName() + "." + id;
		if(Object.prototype.hasOwnProperty.call(p.tmpProfilerTimes.h,id)) {
			var t = HxOverrides.now() / 1000 - p.tmpProfilerTimes.h[id];
			var _this = p.tmpProfilerTimes;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			if(!Object.prototype.hasOwnProperty.call(dn_Process.PROFILER_TIMES.h,id)) {
				dn_Process.PROFILER_TIMES.h[id] = t;
			} else {
				dn_Process.PROFILER_TIMES.h[id] += t;
			}
		}
	}
	if(!p.isPaused() && !p.destroyed) {
		var _g_arr = p.children;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			dn_Process._doFixedUpdate(p);
		}
	}
};
dn_Process._doPostUpdate = function(p) {
	if(!(!p.isPaused() && !p.destroyed)) {
		return;
	}
	var id = "post";
	if(dn_Process.PROFILING) {
		id = p.getDisplayName() + "." + id;
		p.tmpProfilerTimes.h[id] = HxOverrides.now() / 1000;
	}
	p.postUpdate();
	var id = "post";
	if(dn_Process.PROFILING) {
		id = p.getDisplayName() + "." + id;
		if(Object.prototype.hasOwnProperty.call(p.tmpProfilerTimes.h,id)) {
			var t = HxOverrides.now() / 1000 - p.tmpProfilerTimes.h[id];
			var _this = p.tmpProfilerTimes;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
			if(!Object.prototype.hasOwnProperty.call(dn_Process.PROFILER_TIMES.h,id)) {
				dn_Process.PROFILER_TIMES.h[id] = t;
			} else {
				dn_Process.PROFILER_TIMES.h[id] += t;
			}
		}
	}
	if(!p.destroyed) {
		var _g_arr = p.children;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var c = _g_arr.values[_g_i++];
			dn_Process._doPostUpdate(c);
		}
	}
};
dn_Process._garbageCollector = function(plist) {
	var i = 0;
	var p;
	while(i < plist.nalloc) {
		p = i >= 0 && i < plist.nalloc ? plist.values[i] : null;
		if(p.destroyed) {
			dn_Process._disposeProcess(p);
		} else {
			dn_Process._garbageCollector(p.children);
			++i;
		}
	}
};
dn_Process._disposeProcess = function(p) {
	var _g_arr = p.children;
	var _g_i = 0;
	while(_g_i < _g_arr.nalloc) {
		var p1 = _g_arr.values[_g_i++];
		p1.destroyed = true;
	}
	dn_Process._garbageCollector(p.children);
	if(p.parent != null) {
		p.parent.children.remove(p);
	} else {
		dn_Process.ROOTS.remove(p);
	}
	if(p.root != null) {
		var _this = p.root;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	p.onDispose();
	if(p.onDisposeCb != null) {
		p.onDisposeCb();
	}
	p.delayer.destroy();
	p.udelayer.destroy();
	p.cd.dispose();
	p.ucd.dispose();
	p.tw.destroy();
	p.parent = null;
	p.children = null;
	p.cd = null;
	p.ucd = null;
	p.delayer = null;
	p.udelayer = null;
	p.tw = null;
	p.root = null;
};
dn_Process._resizeProcess = function(p) {
	if(!p.destroyed) {
		p.onResize();
		var _g_arr = p.children;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			dn_Process._resizeProcess(p);
		}
	}
};
dn_Process.updateAll = function(utmod) {
	if(dn_Process.BEGINNING_OF_FRAME_CALLBACKS.nalloc > 0) {
		var _g_arr = dn_Process.BEGINNING_OF_FRAME_CALLBACKS;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var cb = _g_arr.values[_g_i++];
			cb();
		}
		dn_Process.BEGINNING_OF_FRAME_CALLBACKS.empty();
	}
	var _g_arr = dn_Process.ROOTS;
	var _g_i = 0;
	while(_g_i < _g_arr.nalloc) {
		var p = _g_arr.values[_g_i++];
		if(!p.isPaused() && !p.destroyed) {
			p.utmod = utmod;
			p.ftime += p.utmod * p.getComputedTimeMultiplier();
			p.uftime += p.utmod;
			p.delayer.update(p.utmod * p.getComputedTimeMultiplier());
			if(!p.isPaused() && !p.destroyed) {
				p.udelayer.update(p.utmod);
			}
			if(!p.isPaused() && !p.destroyed) {
				p.cd.update(p.utmod * p.getComputedTimeMultiplier());
			}
			if(!p.isPaused() && !p.destroyed) {
				p.ucd.update(p.utmod);
			}
			if(!p.isPaused() && !p.destroyed) {
				p.tw.update(p.utmod * p.getComputedTimeMultiplier());
			}
			if(!p.isPaused() && !p.destroyed) {
				if(!p._initOnceDone) {
					p.initOnceBeforeUpdate();
					p._initOnceDone = true;
				}
				p.preUpdate();
			}
			if(!p.isPaused() && !p.destroyed) {
				var _g_arr1 = p.children;
				var _g_i1 = 0;
				while(_g_i1 < _g_arr1.nalloc) {
					var c = _g_arr1.values[_g_i1++];
					var utmod1 = p.utmod;
					if(!c.isPaused() && !c.destroyed) {
						c.utmod = utmod1;
						c.ftime += c.utmod * c.getComputedTimeMultiplier();
						c.uftime += c.utmod;
						c.delayer.update(c.utmod * c.getComputedTimeMultiplier());
						if(!c.isPaused() && !c.destroyed) {
							c.udelayer.update(c.utmod);
						}
						if(!c.isPaused() && !c.destroyed) {
							c.cd.update(c.utmod * c.getComputedTimeMultiplier());
						}
						if(!c.isPaused() && !c.destroyed) {
							c.ucd.update(c.utmod);
						}
						if(!c.isPaused() && !c.destroyed) {
							c.tw.update(c.utmod * c.getComputedTimeMultiplier());
						}
						if(!c.isPaused() && !c.destroyed) {
							if(!c._initOnceDone) {
								c.initOnceBeforeUpdate();
								c._initOnceDone = true;
							}
							c.preUpdate();
						}
						if(!c.isPaused() && !c.destroyed) {
							var _g_arr2 = c.children;
							var _g_i2 = 0;
							while(_g_i2 < _g_arr2.nalloc) {
								var c1 = _g_arr2.values[_g_i2++];
								dn_Process._doPreUpdate(c1,c.utmod);
							}
						}
					}
				}
			}
		}
	}
	var _g_arr = dn_Process.ROOTS;
	var _g_i = 0;
	while(_g_i < _g_arr.nalloc) {
		var p = _g_arr.values[_g_i++];
		dn_Process._doMainUpdate(p);
	}
	var _g_arr = dn_Process.ROOTS;
	var _g_i = 0;
	while(_g_i < _g_arr.nalloc) {
		var p = _g_arr.values[_g_i++];
		dn_Process._doFixedUpdate(p);
	}
	var _g_arr = dn_Process.ROOTS;
	var _g_i = 0;
	while(_g_i < _g_arr.nalloc) {
		var p = _g_arr.values[_g_i++];
		if(!p.isPaused() && !p.destroyed) {
			var id = "post";
			if(dn_Process.PROFILING) {
				id = p.getDisplayName() + "." + id;
				p.tmpProfilerTimes.h[id] = HxOverrides.now() / 1000;
			}
			p.postUpdate();
			var id1 = "post";
			if(dn_Process.PROFILING) {
				id1 = p.getDisplayName() + "." + id1;
				if(Object.prototype.hasOwnProperty.call(p.tmpProfilerTimes.h,id1)) {
					var t = HxOverrides.now() / 1000 - p.tmpProfilerTimes.h[id1];
					var _this = p.tmpProfilerTimes;
					if(Object.prototype.hasOwnProperty.call(_this.h,id1)) {
						delete(_this.h[id1]);
					}
					if(!Object.prototype.hasOwnProperty.call(dn_Process.PROFILER_TIMES.h,id1)) {
						dn_Process.PROFILER_TIMES.h[id1] = t;
					} else {
						dn_Process.PROFILER_TIMES.h[id1] += t;
					}
				}
			}
			if(!p.destroyed) {
				var _g_arr1 = p.children;
				var _g_i1 = 0;
				while(_g_i1 < _g_arr1.nalloc) {
					var c = _g_arr1.values[_g_i1++];
					if(!c.isPaused() && !c.destroyed) {
						var id2 = "post";
						if(dn_Process.PROFILING) {
							id2 = c.getDisplayName() + "." + id2;
							c.tmpProfilerTimes.h[id2] = HxOverrides.now() / 1000;
						}
						c.postUpdate();
						var id3 = "post";
						if(dn_Process.PROFILING) {
							id3 = c.getDisplayName() + "." + id3;
							if(Object.prototype.hasOwnProperty.call(c.tmpProfilerTimes.h,id3)) {
								var t1 = HxOverrides.now() / 1000 - c.tmpProfilerTimes.h[id3];
								var _this1 = c.tmpProfilerTimes;
								if(Object.prototype.hasOwnProperty.call(_this1.h,id3)) {
									delete(_this1.h[id3]);
								}
								if(!Object.prototype.hasOwnProperty.call(dn_Process.PROFILER_TIMES.h,id3)) {
									dn_Process.PROFILER_TIMES.h[id3] = t1;
								} else {
									dn_Process.PROFILER_TIMES.h[id3] += t1;
								}
							}
						}
						if(!c.destroyed) {
							var _g_arr2 = c.children;
							var _g_i2 = 0;
							while(_g_i2 < _g_arr2.nalloc) {
								var c1 = _g_arr2.values[_g_i2++];
								dn_Process._doPostUpdate(c1);
							}
						}
					}
				}
			}
		}
	}
	if(dn_Process.RESIZE_REQUESTED) {
		dn_Process.RESIZE_REQUESTED = false;
		var _g_arr = dn_Process.ROOTS;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			if(!p.destroyed) {
				p.onResize();
				var _g_arr1 = p.children;
				var _g_i1 = 0;
				while(_g_i1 < _g_arr1.nalloc) {
					var p1 = _g_arr1.values[_g_i1++];
					if(!p1.destroyed) {
						p1.onResize();
						var _g_arr2 = p1.children;
						var _g_i2 = 0;
						while(_g_i2 < _g_arr2.nalloc) {
							var p2 = _g_arr2.values[_g_i2++];
							dn_Process._resizeProcess(p2);
						}
					}
				}
			}
		}
	}
	dn_Process._garbageCollector(dn_Process.ROOTS);
	if(dn_Process.END_OF_FRAME_CALLBACKS.nalloc > 0) {
		var _g_arr = dn_Process.END_OF_FRAME_CALLBACKS;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var cb = _g_arr.values[_g_i++];
			cb();
		}
		dn_Process.END_OF_FRAME_CALLBACKS.empty();
	}
};
dn_Process.resizeAll = function(immediately) {
	if(immediately == null) {
		immediately = false;
	}
	if(immediately) {
		var _g_arr = dn_Process.ROOTS;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			if(!p.destroyed) {
				p.onResize();
				var _g_arr1 = p.children;
				var _g_i1 = 0;
				while(_g_i1 < _g_arr1.nalloc) {
					var p1 = _g_arr1.values[_g_i1++];
					if(!p1.destroyed) {
						p1.onResize();
						var _g_arr2 = p1.children;
						var _g_i2 = 0;
						while(_g_i2 < _g_arr2.nalloc) {
							var p2 = _g_arr2.values[_g_i2++];
							dn_Process._resizeProcess(p2);
						}
					}
				}
			}
		}
	} else {
		dn_Process.RESIZE_REQUESTED = true;
	}
};
dn_Process.callAtTheBeginningOfNextFrame = function(cb) {
	dn_Process.BEGINNING_OF_FRAME_CALLBACKS.push(cb);
};
dn_Process.callAtTheEndOfCurrentFrame = function(cb) {
	dn_Process.END_OF_FRAME_CALLBACKS.push(cb);
};
dn_Process.__test = function() {
	var root = new dn_Process();
	if(root != null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 763},"[JS|dn.Process] root","This expression should NOT be NULL");
	}
	if(root.cd != null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.cd" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 764},"[JS|dn.Process] root.cd","This expression should NOT be NULL");
	}
	if(root.ucd != null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.ucd" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 765},"[JS|dn.Process] root.ucd","This expression should NOT be NULL");
	}
	if(root.delayer != null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.delayer" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 766},"[JS|dn.Process] root.delayer","This expression should NOT be NULL");
	}
	if(root.udelayer != null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.udelayer" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 767},"[JS|dn.Process] root.udelayer","This expression should NOT be NULL");
	}
	if(root.tw != null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.tw" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 768},"[JS|dn.Process] root.tw","This expression should NOT be NULL");
	}
	if(root.utmod * root.getComputedTimeMultiplier() == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.tmod == 1" + "  <Ok>");
		}
	} else {
		var tmp = root.utmod * root.getComputedTimeMultiplier() + " != " + 1;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 769},"[JS|dn.Process] root.tmod == 1","These 2 expressions should be EQUAL",[tmp]);
	}
	if(dn_Process.ROOTS.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] ROOTS.allocated == 1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 773},"[JS|dn.Process] ROOTS.allocated == 1","These 2 expressions should be EQUAL",[dn_Process.ROOTS.nalloc + " != " + 1]);
	}
	if(root._manuallyPaused) {
		root.resume();
	} else {
		root.pause();
	}
	if(root._manuallyPaused == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.togglePause() == true" + "  <Ok>");
		}
	} else {
		if(root._manuallyPaused) {
			root.resume();
		} else {
			root.pause();
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 777},"[JS|dn.Process] root.togglePause() == true","These 2 expressions should be EQUAL",[Std.string(root._manuallyPaused) + " != " + "true"]);
	}
	if(root._manuallyPaused) {
		root.resume();
	} else {
		root.pause();
	}
	if(root._manuallyPaused == false) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.togglePause() == false" + "  <Ok>");
		}
	} else {
		if(root._manuallyPaused) {
			root.resume();
		} else {
			root.pause();
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 778},"[JS|dn.Process] root.togglePause() == false","These 2 expressions should be EQUAL",[Std.string(root._manuallyPaused) + " != " + "false"]);
	}
	var c1 = new dn_Process(root);
	if(c1 != null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] c1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 781},"[JS|dn.Process] c1","This expression should NOT be NULL");
	}
	if(root.children.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.countChildren() == 1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 782},"[JS|dn.Process] root.countChildren() == 1","These 2 expressions should be EQUAL",[root.children.nalloc + " != " + 1]);
	}
	if(c1.isPaused() != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] c1.isPaused()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 783},"[JS|dn.Process] c1.isPaused()","This expression should be FALSE");
	}
	root.pause();
	if(c1.isPaused() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] c1.isPaused()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 785},"[JS|dn.Process] c1.isPaused()","This expression should be TRUE");
	}
	root.resume();
	var c2 = new dn_Process(root);
	if(c2 != null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] c2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 789},"[JS|dn.Process] c2","This expression should NOT be NULL");
	}
	if(root.children.nalloc == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.countChildren() == 2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 790},"[JS|dn.Process] root.countChildren() == 2","These 2 expressions should be EQUAL",[root.children.nalloc + " != " + 2]);
	}
	if(c2.parent == root) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] c2.parent == root" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 791},"[JS|dn.Process] c2.parent == root","These 2 expressions should be EQUAL",[Std.string(c2.parent) + " != " + Std.string(root)]);
	}
	if(c2.isPaused() != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] c2.isPaused()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 792},"[JS|dn.Process] c2.isPaused()","This expression should be FALSE");
	}
	root.pause();
	if(c2.isPaused() == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] c2.isPaused()" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 794},"[JS|dn.Process] c2.isPaused()","This expression should be TRUE");
	}
	c2.destroyed = true;
	dn_Process.updateAll(1);
	if(c1.destroyed != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] c1.destroyed" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 799},"[JS|dn.Process] c1.destroyed","This expression should be FALSE");
	}
	if(c2.destroyed == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] c2.destroyed" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 800},"[JS|dn.Process] c2.destroyed","This expression should be TRUE");
	}
	if(root.destroyed != true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.destroyed" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 801},"[JS|dn.Process] root.destroyed","This expression should be FALSE");
	}
	if(root.children.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.countChildren() == 1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 802},"[JS|dn.Process] root.countChildren() == 1","These 2 expressions should be EQUAL",[root.children.nalloc + " != " + 1]);
	}
	root.destroyed = true;
	dn_Process.updateAll(1);
	if(c1.destroyed == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] c1.destroyed" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 805},"[JS|dn.Process] c1.destroyed","This expression should be TRUE");
	}
	if(c2.destroyed == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] c2.destroyed" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 806},"[JS|dn.Process] c2.destroyed","This expression should be TRUE");
	}
	if(root.destroyed == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] root.destroyed" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 807},"[JS|dn.Process] root.destroyed","This expression should be TRUE");
	}
	if(dn_Process.ROOTS.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.Process] ROOTS.allocated == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/Process.hx", line : 811},"[JS|dn.Process] ROOTS.allocated == 0","These 2 expressions should be EQUAL",[dn_Process.ROOTS.nalloc + " != " + 0]);
	}
};
dn_Process.prototype = {
	get_paused: function() {
		return this._manuallyPaused;
	}
	,get_tmod: function() {
		return this.utmod * this.getComputedTimeMultiplier();
	}
	,get_speedMod: function() {
		return this.baseTimeMul;
	}
	,set_speedMod: function(v) {
		return this.baseTimeMul = v;
	}
	,get_dt: function() {
		return this.utmod * this.getComputedTimeMultiplier();
	}
	,init: function() {
		this.uniqId = dn_Process.UNIQ_ID++;
		this.children = new dn_struct_FixedArray(null,dn_Process.MAX_PROCESSES);
		this._manuallyPaused = false;
		this.destroyed = false;
		this.ftime = 0;
		this.uftime = 0;
		this.utmod = 1;
		this.baseTimeMul = 1;
		this.cd = new dn_Cooldown(this.getDefaultFrameRate());
		this.delayer = new dn_Delayer(this.getDefaultFrameRate());
		this.tw = new dn_Tweenie(this.getDefaultFrameRate());
		this.ucd = new dn_Cooldown(this.getDefaultFrameRate());
		this.udelayer = new dn_Delayer(this.getDefaultFrameRate());
	}
	,initOnceBeforeUpdate: function() {
	}
	,createRoot: function(ctx) {
		if(this.root != null) {
			throw haxe_Exception.thrown(Std.string(this) + ": root already created!");
		}
		if(ctx == null) {
			if(this.parent == null || this.parent.root == null) {
				throw haxe_Exception.thrown(Std.string(this) + ": context required");
			}
			ctx = this.parent.root;
		}
		this.root = new h2d_Layers(ctx);
		this.root.name = this.getDisplayName();
	}
	,createRootInNoContext: function() {
		if(this.root != null) {
			throw haxe_Exception.thrown(Std.string(this) + ": root already created!");
		}
		this.root = new h2d_Layers();
		this.root.name = this.getDisplayName();
	}
	,createRootInLayers: function(ctx,plan) {
		if(this.root != null) {
			throw haxe_Exception.thrown(Std.string(this) + ": root already exists");
		}
		this.root = new h2d_Layers();
		this.root.name = this.getDisplayName();
		ctx.add(this.root,plan);
	}
	,rprintChildren: function() {
		var _crawl = null;
		_crawl = function(p,depth) {
			if(depth == null) {
				depth = 0;
			}
			var out = [];
			var indent = depth > 0 ? " |--- " : "";
			var out1 = "";
			var _g = 0;
			var _g1 = 6 * (depth - 1);
			while(_g < _g1) {
				var i = _g++;
				out1 += " ";
			}
			indent = out1 + indent;
			out.push(indent + p.toString());
			var _g_arr = p.children;
			var _g_i = 0;
			while(_g_i < _g_arr.nalloc) {
				var cp = _g_arr.values[_g_i++];
				out = out.concat(_crawl(cp,depth + 1));
			}
			return out;
		};
		return _crawl(this).join("\n");
	}
	,markProfilingStart: function(id) {
		if(dn_Process.PROFILING) {
			id = this.getDisplayName() + "." + id;
			this.tmpProfilerTimes.h[id] = HxOverrides.now() / 1000;
		}
	}
	,markProfilingEnd: function(id) {
		if(dn_Process.PROFILING) {
			id = this.getDisplayName() + "." + id;
			if(Object.prototype.hasOwnProperty.call(this.tmpProfilerTimes.h,id)) {
				var t = HxOverrides.now() / 1000 - this.tmpProfilerTimes.h[id];
				var _this = this.tmpProfilerTimes;
				if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
					delete(_this.h[id]);
				}
				if(!Object.prototype.hasOwnProperty.call(dn_Process.PROFILER_TIMES.h,id)) {
					dn_Process.PROFILER_TIMES.h[id] = t;
				} else {
					dn_Process.PROFILER_TIMES.h[id] += t;
				}
			}
		}
	}
	,countChildren: function() {
		return this.children.nalloc;
	}
	,preUpdate: function() {
	}
	,update: function() {
	}
	,fixedUpdate: function() {
	}
	,getFixedUpdateAccuRatio: function() {
		return this._fixedUpdateAccu / (this.getDefaultFrameRate() / dn_Process.FIXED_UPDATE_FPS);
	}
	,postUpdate: function() {
	}
	,onResize: function() {
		this.onResizeCb();
	}
	,onDispose: function() {
	}
	,onUpdateCb: function() {
	}
	,onFixedUpdateCb: function() {
	}
	,onDisposeCb: function() {
	}
	,onResizeCb: function() {
	}
	,toString: function() {
		return "#" + this.uniqId + " " + this.getDisplayName() + (this.isPaused() ? " [PAUSED]" : "");
	}
	,getDisplayName: function() {
		if(this.name != null) {
			return this.name;
		} else {
			if(this._cachedClassName == null) {
				var c = js_Boot.getClass(this);
				this._cachedClassName = c.__name__;
			}
			return this._cachedClassName;
		}
	}
	,get_itime: function() {
		return this.ftime | 0;
	}
	,get_stime: function() {
		return this.ftime / this.getDefaultFrameRate();
	}
	,get_engine: function() {
		return h3d_Engine.CURRENT;
	}
	,addAlpha: function(c,a) {
		if(a == null) {
			a = 1.0;
		}
		return (a * 255 | 0) << 24 | c;
	}
	,rnd: function(min,max,sign) {
		var sign1 = sign;
		if(sign1 == null) {
			sign1 = false;
		}
		if(sign1) {
			return (min + Math.random() * (max - min)) * (Std.random(2) * 2 - 1);
		} else {
			return min + Math.random() * (max - min);
		}
	}
	,irnd: function(min,max,sign) {
		var sign1 = sign;
		if(sign1 == null) {
			sign1 = false;
		}
		if(sign1) {
			return (min + Std.random(max - min + 1)) * (Std.random(2) * 2 - 1);
		} else {
			return min + Std.random(max - min + 1);
		}
	}
	,rndSign: function() {
		return Std.random(2) * 2 - 1;
	}
	,rndSecondsF: function(min,max,sign) {
		var sign1 = sign;
		if(sign1 == null) {
			sign1 = false;
		}
		return this.secToFrames(sign1 ? (min + Math.random() * (max - min)) * (Std.random(2) * 2 - 1) : min + Math.random() * (max - min));
	}
	,irndSecondsF: function(min,max,sign) {
		var sign1 = sign;
		if(sign1 == null) {
			sign1 = false;
		}
		return this.secToFrames(sign1 ? (min + Math.random() * (max - min)) * (Std.random(2) * 2 - 1) : min + Math.random() * (max - min));
	}
	,pretty: function(v,precision) {
		if(precision == null) {
			precision = 2;
		}
		var precision1 = precision;
		if(precision1 == null) {
			precision1 = 2;
		}
		if(precision1 <= 0) {
			return (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision1);
			var x = v * d;
			return ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
	}
	,secToFrames: function(v) {
		return v * this.getDefaultFrameRate();
	}
	,framesToSec: function(v) {
		return v / this.getDefaultFrameRate();
	}
	,msToFrames: function(v) {
		return v / 1000 * this.getDefaultFrameRate();
	}
	,framesToMs: function(v) {
		return 1000 * v / this.getDefaultFrameRate();
	}
	,getDefaultFrameRate: function() {
		var x = hxd_Timer.wantedFPS;
		return (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
	}
	,setTimeMultiplier: function(v) {
		this.baseTimeMul = v;
	}
	,getComputedTimeMultiplier: function() {
		if(this.ignoreTimeMultipliers) {
			return 1.0;
		} else {
			var y = this.baseTimeMul * (this.parent == null ? 1 : this.parent.getComputedTimeMultiplier());
			if(0 > y) {
				return 0;
			} else {
				return y;
			}
		}
	}
	,w: function() {
		if(dn_Process.CUSTOM_STAGE_WIDTH > 0) {
			return dn_Process.CUSTOM_STAGE_WIDTH;
		}
		return hxd_Window.getInstance().get_width();
	}
	,h: function() {
		if(dn_Process.CUSTOM_STAGE_HEIGHT > 0) {
			return dn_Process.CUSTOM_STAGE_HEIGHT;
		}
		return hxd_Window.getInstance().get_height();
	}
	,anyParentPaused: function() {
		if(this.parent != null) {
			return this.parent.isPaused();
		} else {
			return false;
		}
	}
	,isPaused: function() {
		if(this._manuallyPaused) {
			return true;
		} else if(this.parent != null) {
			return this.parent.isPaused();
		} else {
			return false;
		}
	}
	,pause: function() {
		this._manuallyPaused = true;
	}
	,resume: function() {
		this._manuallyPaused = false;
	}
	,togglePause: function() {
		if(this._manuallyPaused) {
			this.resume();
		} else {
			this.pause();
		}
		return this._manuallyPaused;
	}
	,destroy: function() {
		this.destroyed = true;
	}
	,addChild: function(p) {
		if(p.parent == null) {
			dn_Process.ROOTS.remove(p);
		} else {
			p.parent.children.remove(p);
		}
		p.parent = this;
		this.children.push(p);
	}
	,isRootProcess: function() {
		return this.parent == null;
	}
	,moveChildToRootProcesses: function(p) {
		if(p.parent != this) {
			throw haxe_Exception.thrown("Not a child of this process");
		}
		p.parent = null;
		this.children.remove(p);
		dn_Process.ROOTS.push(p);
	}
	,removeAndDestroyChild: function(p) {
		if(p.parent != this) {
			throw haxe_Exception.thrown("Not a child of this process");
		}
		p.parent = null;
		this.children.remove(p);
		dn_Process.ROOTS.push(p);
		p.destroyed = true;
	}
	,createChildProcess: function(onUpdate,onDispose,runUpdateImmediatly) {
		if(runUpdateImmediatly == null) {
			runUpdateImmediatly = false;
		}
		var p = new dn_Process(this);
		if(onUpdate != null) {
			p.onUpdateCb = function() {
				onUpdate(p);
			};
		}
		if(onDispose != null) {
			p.onDisposeCb = function() {
				onDispose(p);
			};
		}
		if(runUpdateImmediatly) {
			if(!p.isPaused() && !p.destroyed) {
				p.utmod = 1;
				p.ftime += p.utmod * p.getComputedTimeMultiplier();
				p.uftime += p.utmod;
				p.delayer.update(p.utmod * p.getComputedTimeMultiplier());
				if(!p.isPaused() && !p.destroyed) {
					p.udelayer.update(p.utmod);
				}
				if(!p.isPaused() && !p.destroyed) {
					p.cd.update(p.utmod * p.getComputedTimeMultiplier());
				}
				if(!p.isPaused() && !p.destroyed) {
					p.ucd.update(p.utmod);
				}
				if(!p.isPaused() && !p.destroyed) {
					p.tw.update(p.utmod * p.getComputedTimeMultiplier());
				}
				if(!p.isPaused() && !p.destroyed) {
					if(!p._initOnceDone) {
						p.initOnceBeforeUpdate();
						p._initOnceDone = true;
					}
					p.preUpdate();
				}
				if(!p.isPaused() && !p.destroyed) {
					var _g_arr = p.children;
					var _g_i = 0;
					while(_g_i < _g_arr.nalloc) {
						var c = _g_arr.values[_g_i++];
						var utmod = p.utmod;
						if(!c.isPaused() && !c.destroyed) {
							c.utmod = utmod;
							c.ftime += c.utmod * c.getComputedTimeMultiplier();
							c.uftime += c.utmod;
							c.delayer.update(c.utmod * c.getComputedTimeMultiplier());
							if(!c.isPaused() && !c.destroyed) {
								c.udelayer.update(c.utmod);
							}
							if(!c.isPaused() && !c.destroyed) {
								c.cd.update(c.utmod * c.getComputedTimeMultiplier());
							}
							if(!c.isPaused() && !c.destroyed) {
								c.ucd.update(c.utmod);
							}
							if(!c.isPaused() && !c.destroyed) {
								c.tw.update(c.utmod * c.getComputedTimeMultiplier());
							}
							if(!c.isPaused() && !c.destroyed) {
								if(!c._initOnceDone) {
									c.initOnceBeforeUpdate();
									c._initOnceDone = true;
								}
								c.preUpdate();
							}
							if(!c.isPaused() && !c.destroyed) {
								var _g_arr1 = c.children;
								var _g_i1 = 0;
								while(_g_i1 < _g_arr1.nalloc) {
									var c1 = _g_arr1.values[_g_i1++];
									dn_Process._doPreUpdate(c1,c.utmod);
								}
							}
						}
					}
				}
			}
			dn_Process._doMainUpdate(p);
		}
		return p;
	}
	,killAllChildrenProcesses: function() {
		var _g_arr = this.children;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var p = _g_arr.values[_g_i++];
			p.destroyed = true;
		}
	}
	,emitResizeAtEndOfFrame: function() {
		dn_Process.resizeAll(false);
	}
	,emitResizeNow: function() {
		dn_Process.resizeAll(true);
	}
	,__class__: dn_Process
};
var dn_TType = $hxEnums["dn.TType"] = { __ename__:"dn.TType",__constructs__:null
	,TLinear: {_hx_name:"TLinear",_hx_index:0,__enum__:"dn.TType",toString:$estr}
	,TLoop: {_hx_name:"TLoop",_hx_index:1,__enum__:"dn.TType",toString:$estr}
	,TLoopEaseIn: {_hx_name:"TLoopEaseIn",_hx_index:2,__enum__:"dn.TType",toString:$estr}
	,TLoopEaseOut: {_hx_name:"TLoopEaseOut",_hx_index:3,__enum__:"dn.TType",toString:$estr}
	,TEase: {_hx_name:"TEase",_hx_index:4,__enum__:"dn.TType",toString:$estr}
	,TEaseIn: {_hx_name:"TEaseIn",_hx_index:5,__enum__:"dn.TType",toString:$estr}
	,TEaseOut: {_hx_name:"TEaseOut",_hx_index:6,__enum__:"dn.TType",toString:$estr}
	,TBurn: {_hx_name:"TBurn",_hx_index:7,__enum__:"dn.TType",toString:$estr}
	,TBurnIn: {_hx_name:"TBurnIn",_hx_index:8,__enum__:"dn.TType",toString:$estr}
	,TBurnOut: {_hx_name:"TBurnOut",_hx_index:9,__enum__:"dn.TType",toString:$estr}
	,TZigZag: {_hx_name:"TZigZag",_hx_index:10,__enum__:"dn.TType",toString:$estr}
	,TRand: {_hx_name:"TRand",_hx_index:11,__enum__:"dn.TType",toString:$estr}
	,TShake: {_hx_name:"TShake",_hx_index:12,__enum__:"dn.TType",toString:$estr}
	,TShakeBoth: {_hx_name:"TShakeBoth",_hx_index:13,__enum__:"dn.TType",toString:$estr}
	,TJump: {_hx_name:"TJump",_hx_index:14,__enum__:"dn.TType",toString:$estr}
	,TElasticEnd: {_hx_name:"TElasticEnd",_hx_index:15,__enum__:"dn.TType",toString:$estr}
	,TBackOut: {_hx_name:"TBackOut",_hx_index:16,__enum__:"dn.TType",toString:$estr}
};
dn_TType.__constructs__ = [dn_TType.TLinear,dn_TType.TLoop,dn_TType.TLoopEaseIn,dn_TType.TLoopEaseOut,dn_TType.TEase,dn_TType.TEaseIn,dn_TType.TEaseOut,dn_TType.TBurn,dn_TType.TBurnIn,dn_TType.TBurnOut,dn_TType.TZigZag,dn_TType.TRand,dn_TType.TShake,dn_TType.TShakeBoth,dn_TType.TJump,dn_TType.TElasticEnd,dn_TType.TBackOut];
dn_TType.__empty_constructs__ = [dn_TType.TLinear,dn_TType.TLoop,dn_TType.TLoopEaseIn,dn_TType.TLoopEaseOut,dn_TType.TEase,dn_TType.TEaseIn,dn_TType.TEaseOut,dn_TType.TBurn,dn_TType.TBurnIn,dn_TType.TBurnOut,dn_TType.TZigZag,dn_TType.TRand,dn_TType.TShake,dn_TType.TShakeBoth,dn_TType.TJump,dn_TType.TElasticEnd,dn_TType.TBackOut];
var dn_Tween = function(tw) {
	this.tw = tw;
	this.paused = false;
	this.done = false;
	this.n = this.ln = 0;
	this.delay = 0;
	this.speed = 1;
	this.set_type(dn_TType.TEase);
	this.plays = 1;
	this.pixelSnap = false;
};
$hxClasses["dn.Tween"] = dn_Tween;
dn_Tween.__name__ = "dn.Tween";
dn_Tween.prototype = {
	toString: function() {
		return "" + this.from + " => " + this.to + " (" + Std.string(this.type) + "): " + this.ln * 100 + "%";
	}
	,set_type: function(t) {
		var _gthis = this;
		this.type = t;
		var tmp;
		switch(this.type._hx_index) {
		case 0:
			tmp = function(step) {
				return step;
			};
			break;
		case 1:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 1.33 + 3 * (step * step) * (1 - step) * 1.33 + step * step * step * 0;
			};
			break;
		case 2:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) * 2.25 + step * step * step * 0;
			};
			break;
		case 3:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 2.25 + 3 * (step * step) * (1 - step) * 0 + step * step * step * 0;
			};
			break;
		case 4:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) + step * step * step;
			};
			break;
		case 5:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) * 0.5 + step * step * step;
			};
			break;
		case 6:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0.5 + 3 * (step * step) * (1 - step) + step * step * step;
			};
			break;
		case 7:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) + 3 * (step * step) * (1 - step) * 0 + step * step * step;
			};
			break;
		case 8:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) + 3 * (step * step) * (1 - step) + step * step * step;
			};
			break;
		case 9:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) * 0 + step * step * step;
			};
			break;
		case 10:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 2.5 + 3 * (step * step) * (1 - step) * -1.5 + step * step * step;
			};
			break;
		case 11:
			tmp = function(step) {
				return step;
			};
			break;
		case 12:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0.5 + 3 * step * (n1 * n1) * 1.22 + 3 * (step * step) * (1 - step) * 1.25 + step * step * step * 0;
			};
			break;
		case 13:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0.5 + 3 * step * (n1 * n1) * 1.22 + 3 * (step * step) * (1 - step) * 1.25 + step * step * step * 0;
			};
			break;
		case 14:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 2 + 3 * (step * step) * (1 - step) * 2.79 + step * step * step;
			};
			break;
		case 15:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0.7 + 3 * (step * step) * (1 - step) * 1.5 + step * step * step;
			};
			break;
		case 16:
			tmp = function(step) {
				var s = 1.70158;
				step = step / 1 - 1;
				return step * step * ((s + 1) * step + s) + 1;
			};
			break;
		}
		this.interpolate = tmp;
		return this.type;
	}
	,onUpdate: function() {
	}
	,onUpdateT: function(t) {
	}
	,onEnd: function() {
	}
	,onStart: function() {
	}
	,end: function(cb) {
		this.onEnd = cb;
		return this;
	}
	,start: function(cb) {
		this.onStart = cb;
		return this;
	}
	,update: function(cb) {
		this.onUpdate = cb;
		return this;
	}
	,updateT: function(cb) {
		this.onUpdateT = cb;
		return this;
	}
	,chainedEvent: function() {
	}
	,interpolate: function(v) {
		return v;
	}
	,pixel: function() {
		this.pixelSnap = true;
		return this;
	}
	,bezier: function(t,p0,p1,p2,p3) {
		var n = 1 - t;
		var n1 = 1 - t;
		return n * n * n * p0 + 3 * t * (n1 * n1) * p1 + 3 * (t * t) * (1 - t) * p2 + t * t * t * p3;
	}
	,fastPow2: function(n) {
		return n * n;
	}
	,fastPow3: function(n) {
		return n * n * n;
	}
	,delayFrames: function(d) {
		this.delay = d;
	}
	,delayMs: function(d) {
		var x = d * this.tw.baseFps / 1000;
		this.delay = (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
	}
	,chainMs: function(to,ease,duration_ms) {
		var t = this.tw.create_(this.getter,this.setter,null,to,ease,duration_ms,true);
		t.paused = true;
		this.chainedEvent = function() {
			t.paused = false;
			t.from = t.getter();
		};
		return t;
	}
	,endWithoutCallbacks: function() {
		this.done = true;
	}
	,complete: function(fl_allowLoop) {
		if(fl_allowLoop == null) {
			fl_allowLoop = false;
		}
		var v = this.from + (this.to - this.from) * this.interpolate(1);
		if(this.pixelSnap) {
			v = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		}
		this.setter(v);
		this.onUpdate();
		this.onUpdateT(1);
		this.onEnd();
		this.chainedEvent();
		if(fl_allowLoop && (this.plays == -1 || this.plays > 1)) {
			if(this.plays != -1) {
				this.plays--;
			}
			this.n = this.ln = 0;
		} else {
			this.done = true;
		}
	}
	,internalUpdate: function(dt) {
		if(this.done) {
			return true;
		}
		if(this.paused) {
			return false;
		}
		if(this.delay > 0) {
			this.delay -= dt;
			return false;
		}
		if(this.onStart != null) {
			var cb = $bind(this,this.onStart);
			this.onStart = null;
			cb();
		}
		var dist = this.to - this.from;
		if(this.type == dn_TType.TRand) {
			this.ln += Std.random(100) < 33 ? this.speed * dt : 0;
		} else {
			this.ln += this.speed * dt;
		}
		this.n = this.interpolate(this.ln);
		if(this.ln < 1) {
			var val;
			if(this.type != dn_TType.TShake && this.type != dn_TType.TShakeBoth) {
				val = this.from + this.n * dist;
			} else if(this.type == dn_TType.TShake) {
				var val1 = this.from;
				var val2 = Math.random();
				var x = this.n * dist;
				val = val1 + val2 * (x < 0 ? -x : x) * (dist > 0 ? 1 : -1);
			} else {
				val = this.from + Math.random() * this.n * dist * (Std.random(2) * 2 - 1);
			}
			if(this.pixelSnap) {
				val = (val > 0 ? val + .5 : val < 0 ? val - .5 : 0) | 0;
			}
			this.setter(val);
			this.onUpdate();
			this.onUpdateT(this.ln);
		} else {
			this.complete(true);
		}
		return this.done;
	}
	,__class__: dn_Tween
};
var dn_Tweenie = function(fps) {
	this.baseFps = fps;
	this.allTweens = new dn_struct_FixedArray(null,512);
};
$hxClasses["dn.Tweenie"] = dn_Tweenie;
dn_Tweenie.__name__ = "dn.Tweenie";
dn_Tweenie.prototype = {
	count: function() {
		return this.allTweens.nalloc;
	}
	,terminate_: function(getter,setter,withCallbacks) {
		if(this.allTweens == null) {
			return;
		}
		var v = getter();
		var _g_arr = this.allTweens;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var t = _g_arr.values[_g_i++];
			if(t.done) {
				continue;
			}
			var old = t.getter();
			t.setter(old + 1);
			if(getter() != v) {
				t.setter(old);
				if(withCallbacks) {
					t.ln = 1;
					t.complete(false);
				} else {
					t.endWithoutCallbacks();
				}
			} else {
				t.setter(old);
			}
		}
	}
	,create_: function(getter,setter,from,to,tp,duration_ms,allowDuplicates) {
		if(allowDuplicates == null) {
			allowDuplicates = false;
		}
		if(duration_ms == null) {
			duration_ms = dn_Tweenie.DEFAULT_DURATION;
		}
		if(!allowDuplicates) {
			this.terminate_(getter,setter,false);
		}
		var t = new dn_Tween(this);
		t.getter = getter;
		t.setter = setter;
		t.from = from == null ? getter() : from;
		t.speed = 1 / (duration_ms * this.baseFps / 1000);
		t.to = to;
		if(tp != null) {
			t.set_type(tp);
		}
		if(from != null) {
			setter(from);
		}
		this.allTweens.push(t);
		return t;
	}
	,destroy: function() {
		this.allTweens = null;
	}
	,completeAll: function() {
		var _g_arr = this.allTweens;
		var _g_i = 0;
		while(_g_i < _g_arr.nalloc) {
			var t = _g_arr.values[_g_i++];
			t.ln = 1;
		}
		this.update();
	}
	,update: function(dt) {
		if(dt == null) {
			dt = 1.0;
		}
		var i = 0;
		while(i < this.allTweens.nalloc) {
			var _this = this.allTweens;
			var t = i >= 0 && i < _this.nalloc ? _this.values[i] : null;
			if(t.internalUpdate(dt)) {
				this.allTweens.remove(t);
			} else {
				++i;
			}
		}
	}
	,__class__: dn_Tweenie
};
var dn_debug_MemAlloc = function() {
	this.calls = 0;
	this.total = 0.;
};
$hxClasses["dn.debug.MemAlloc"] = dn_debug_MemAlloc;
dn_debug_MemAlloc.__name__ = "dn.debug.MemAlloc";
dn_debug_MemAlloc.prototype = {
	__class__: dn_debug_MemAlloc
};
var dn_debug_MemTrack = function() { };
$hxClasses["dn.debug.MemTrack"] = dn_debug_MemTrack;
dn_debug_MemTrack.__name__ = "dn.debug.MemTrack";
dn_debug_MemTrack.reset = function() {
	dn_debug_MemTrack.allocs = new haxe_ds_StringMap();
	dn_debug_MemTrack.firstMeasure = -1;
};
dn_debug_MemTrack.padRight = function(str,minLen,padChar) {
	if(padChar == null) {
		padChar = " ";
	}
	while(str.length < minLen) str += padChar;
	return str;
};
dn_debug_MemTrack.report = function(printer,alsoReset) {
	if(alsoReset == null) {
		alsoReset = true;
	}
	var t = HxOverrides.now() / 1000 - dn_debug_MemTrack.firstMeasure;
	if(printer == null) {
		printer = function(v) {
			haxe_Log.trace(v,{ fileName : "dn/debug/MemTrack.hx", lineNumber : 92, className : "dn.debug.MemTrack", methodName : "report"});
		};
	}
	var all = [];
	var h = dn_debug_MemTrack.allocs.h;
	var a_h = h;
	var a_keys = Object.keys(h);
	var a_length = a_keys.length;
	var a_current = 0;
	while(a_current < a_length) {
		var key = a_keys[a_current++];
		var a_key = key;
		var a_value = a_h[key];
		all.push({ id : a_key, mem : a_value});
	}
	all.sort(function(a,b) {
		return -Reflect.compare(a.mem.total / t,b.mem.total / t);
	});
	if(all.length == 0) {
		printer("MemTrack has nothing to report.");
		return;
	}
	printer("MEMTRACK REPORT");
	var precision = 1;
	if(precision == null) {
		precision = 2;
	}
	var tmp;
	if(precision <= 0) {
		tmp = (t > 0 ? t + .5 : t < 0 ? t - .5 : 0) | 0;
	} else {
		var d = Math.pow(10,precision);
		var x = t * d;
		tmp = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
	}
	printer("Elapsed time: " + tmp + "s");
	var table = [["","MEM/S","TOTAL"]];
	var total = 0.;
	var _g = 0;
	while(_g < all.length) {
		var a = all[_g];
		++_g;
		total += a.mem.total;
		var v = a.mem.total / t;
		var tmp;
		if((v < 0 ? -v : v) < 1000) {
			var precision = 1;
			if(precision == null) {
				precision = 2;
			}
			var tmp1;
			if(precision <= 0) {
				tmp1 = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
			} else {
				var d = Math.pow(10,precision);
				var x = v * d;
				tmp1 = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
			}
			tmp = Std.string(tmp1);
		} else if((v < 0 ? -v : v) < 1000000) {
			var v1 = v / 1000;
			var precision1 = 1;
			if(precision1 == null) {
				precision1 = 2;
			}
			var tmp2;
			if(precision1 <= 0) {
				tmp2 = (v1 > 0 ? v1 + .5 : v1 < 0 ? v1 - .5 : 0) | 0;
			} else {
				var d1 = Math.pow(10,precision1);
				var x1 = v1 * d1;
				tmp2 = ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) / d1;
			}
			tmp = tmp2 + "K";
		} else {
			var v2 = v / 1000000;
			var precision2 = 1;
			if(precision2 == null) {
				precision2 = 2;
			}
			var tmp3;
			if(precision2 <= 0) {
				tmp3 = (v2 > 0 ? v2 + .5 : v2 < 0 ? v2 - .5 : 0) | 0;
			} else {
				var d2 = Math.pow(10,precision2);
				var x2 = v2 * d2;
				tmp3 = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) / d2;
			}
			tmp = tmp3 + "M";
		}
		var v3 = a.mem.total;
		var tmp4;
		if((v3 < 0 ? -v3 : v3) < 1000) {
			var precision3 = 1;
			if(precision3 == null) {
				precision3 = 2;
			}
			var tmp5;
			if(precision3 <= 0) {
				tmp5 = (v3 > 0 ? v3 + .5 : v3 < 0 ? v3 - .5 : 0) | 0;
			} else {
				var d3 = Math.pow(10,precision3);
				var x3 = v3 * d3;
				tmp5 = ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) / d3;
			}
			tmp4 = Std.string(tmp5);
		} else if((v3 < 0 ? -v3 : v3) < 1000000) {
			var v4 = v3 / 1000;
			var precision4 = 1;
			if(precision4 == null) {
				precision4 = 2;
			}
			var tmp6;
			if(precision4 <= 0) {
				tmp6 = (v4 > 0 ? v4 + .5 : v4 < 0 ? v4 - .5 : 0) | 0;
			} else {
				var d4 = Math.pow(10,precision4);
				var x4 = v4 * d4;
				tmp6 = ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0) / d4;
			}
			tmp4 = tmp6 + "K";
		} else {
			var v5 = v3 / 1000000;
			var precision5 = 1;
			if(precision5 == null) {
				precision5 = 2;
			}
			var tmp7;
			if(precision5 <= 0) {
				tmp7 = (v5 > 0 ? v5 + .5 : v5 < 0 ? v5 - .5 : 0) | 0;
			} else {
				var d5 = Math.pow(10,precision5);
				var x5 = v5 * d5;
				tmp7 = ((x5 > 0 ? x5 + .5 : x5 < 0 ? x5 - .5 : 0) | 0) / d5;
			}
			tmp4 = tmp7 + "M";
		}
		table.push([a.id,tmp + "/s",tmp4]);
	}
	var colWidths = [];
	var _g = 0;
	while(_g < table.length) {
		var line = table[_g];
		++_g;
		var _g1 = 0;
		var _g2 = line.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var v = colWidths[i];
			if(!(v != null && !isNaN(v) && isFinite(v))) {
				colWidths[i] = line[i].length;
			} else {
				var x = colWidths[i];
				var y = line[i].length;
				colWidths[i] = x > y ? x : y;
			}
		}
	}
	var line = [];
	var _g = 0;
	var _g1 = colWidths.length;
	while(_g < _g1) {
		var i = _g++;
		var str = "";
		var padChar = "-";
		if(padChar == null) {
			padChar = " ";
		}
		while(str.length < colWidths[i]) str += padChar;
		line.push(str);
	}
	table.splice(1,0,line);
	var line = [];
	var _g = 0;
	var _g1 = colWidths.length;
	while(_g < _g1) {
		var i = _g++;
		var str = "";
		var padChar = "-";
		if(padChar == null) {
			padChar = " ";
		}
		while(str.length < colWidths[i]) str += padChar;
		line.push(str);
	}
	table.push(line);
	var v = total / t;
	var tmp;
	if((v < 0 ? -v : v) < 1000) {
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp1;
		if(precision <= 0) {
			tmp1 = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp1 = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		tmp = Std.string(tmp1);
	} else if((v < 0 ? -v : v) < 1000000) {
		var v1 = v / 1000;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp1;
		if(precision <= 0) {
			tmp1 = (v1 > 0 ? v1 + .5 : v1 < 0 ? v1 - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v1 * d;
			tmp1 = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		tmp = tmp1 + "K";
	} else {
		var v1 = v / 1000000;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp1;
		if(precision <= 0) {
			tmp1 = (v1 > 0 ? v1 + .5 : v1 < 0 ? v1 - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v1 * d;
			tmp1 = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		tmp = tmp1 + "M";
	}
	var tmp1;
	if((total < 0 ? -total : total) < 1000) {
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp2;
		if(precision <= 0) {
			tmp2 = (total > 0 ? total + .5 : total < 0 ? total - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = total * d;
			tmp2 = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		tmp1 = Std.string(tmp2);
	} else if((total < 0 ? -total : total) < 1000000) {
		var v = total / 1000;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp2;
		if(precision <= 0) {
			tmp2 = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp2 = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		tmp1 = tmp2 + "K";
	} else {
		var v = total / 1000000;
		var precision = 1;
		if(precision == null) {
			precision = 2;
		}
		var tmp2;
		if(precision <= 0) {
			tmp2 = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		} else {
			var d = Math.pow(10,precision);
			var x = v * d;
			tmp2 = ((x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0) / d;
		}
		tmp1 = tmp2 + "M";
	}
	table.push(["",tmp + "/s",tmp1]);
	var _g = 0;
	while(_g < table.length) {
		var line = table[_g];
		++_g;
		var _g1 = 0;
		var _g2 = line.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var str = line[i];
			while(str.length < colWidths[i]) str += " ";
			line[i] = str;
		}
		printer("| " + line.join(" | ") + " |");
	}
	if(alsoReset) {
		dn_debug_MemTrack.reset();
	}
};
var dn_struct_FixedArrayTests = function() { };
$hxClasses["dn.struct.FixedArrayTests"] = dn_struct_FixedArrayTests;
dn_struct_FixedArrayTests.__name__ = "dn.struct.FixedArrayTests";
dn_struct_FixedArrayTests.__test = function() {
	var a = new dn_struct_FixedArray(null,10);
	if(a.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.allocated == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 290},"[JS|dn.struct.FixedArray] a.allocated == 0","These 2 expressions should be EQUAL",[a.nalloc + " != " + 0]);
	}
	if(a.values.length == 10) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.maxSize == 10" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 291},"[JS|dn.struct.FixedArray] a.maxSize == 10","These 2 expressions should be EQUAL",[a.values.length + " != " + 10]);
	}
	var _g = 0;
	var _g1 = a.values.length;
	while(_g < _g1) {
		var i = _g++;
		a.push(i);
	}
	if(a.nalloc == 10) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.allocated == 10" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 295},"[JS|dn.struct.FixedArray] a.allocated == 10","These 2 expressions should be EQUAL",[a.nalloc + " != " + 10]);
	}
	a.empty();
	if(a.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.allocated == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 297},"[JS|dn.struct.FixedArray] a.allocated == 0","These 2 expressions should be EQUAL",[a.nalloc + " != " + 0]);
	}
	var _g = 0;
	var _g1 = a.values.length;
	while(_g < _g1) {
		var i = _g++;
		a.push(i);
	}
	if(a.nalloc == 10) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.allocated == 10" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 299},"[JS|dn.struct.FixedArray] a.allocated == 10","These 2 expressions should be EQUAL",[a.nalloc + " != " + 10]);
	}
	a.empty();
	if(a.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.allocated == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 301},"[JS|dn.struct.FixedArray] a.allocated == 0","These 2 expressions should be EQUAL",[a.nalloc + " != " + 0]);
	}
	a.push(16);
	if(a.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] { a.push(16); a.allocated;} == 1" + "  <Ok>");
		}
	} else {
		a.push(16);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 304},"[JS|dn.struct.FixedArray] { a.push(16); a.allocated;} == 1","These 2 expressions should be EQUAL",[a.nalloc + " != " + 1]);
	}
	a.push(32);
	if(a.nalloc == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] { a.push(32); a.allocated;} == 2" + "  <Ok>");
		}
	} else {
		a.push(32);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 305},"[JS|dn.struct.FixedArray] { a.push(32); a.allocated;} == 2","These 2 expressions should be EQUAL",[a.nalloc + " != " + 2]);
	}
	if((a.nalloc > 0 ? a.values[a.nalloc-- - 1] : null) == 32) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.pop() == 32" + "  <Ok>");
		}
	} else {
		var tmp = a.nalloc > 0 ? a.values[a.nalloc-- - 1] : null;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 306},"[JS|dn.struct.FixedArray] a.pop() == 32","These 2 expressions should be EQUAL",[tmp + " != " + 32]);
	}
	if(a.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.allocated == 1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 307},"[JS|dn.struct.FixedArray] a.allocated == 1","These 2 expressions should be EQUAL",[a.nalloc + " != " + 1]);
	}
	if((a.nalloc > 0 ? a.values[a.nalloc-- - 1] : null) == 16) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.pop() == 16" + "  <Ok>");
		}
	} else {
		var tmp = a.nalloc > 0 ? a.values[a.nalloc-- - 1] : null;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 308},"[JS|dn.struct.FixedArray] a.pop() == 16","These 2 expressions should be EQUAL",[tmp + " != " + 16]);
	}
	if(a.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.allocated == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 309},"[JS|dn.struct.FixedArray] a.allocated == 0","These 2 expressions should be EQUAL",[a.nalloc + " != " + 0]);
	}
	a.push(16);
	a.push(32);
	if(a.nalloc == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] { a.push(16); a.push(32); a.allocated;} == 2" + "  <Ok>");
		}
	} else {
		a.push(16);
		a.push(32);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 312},"[JS|dn.struct.FixedArray] { a.push(16); a.push(32); a.allocated;} == 2","These 2 expressions should be EQUAL",[a.nalloc + " != " + 2]);
	}
	if(a.shift() == 16) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.shift() == 16" + "  <Ok>");
		}
	} else {
		var tmp = a.shift() + " != " + 16;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 313},"[JS|dn.struct.FixedArray] a.shift() == 16","These 2 expressions should be EQUAL",[tmp]);
	}
	if(a.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.allocated == 1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 314},"[JS|dn.struct.FixedArray] a.allocated == 1","These 2 expressions should be EQUAL",[a.nalloc + " != " + 1]);
	}
	if(a.shift() == 32) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.shift() == 32" + "  <Ok>");
		}
	} else {
		var tmp = a.shift() + " != " + 32;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 315},"[JS|dn.struct.FixedArray] a.shift() == 32","These 2 expressions should be EQUAL",[tmp]);
	}
	if(a.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.allocated == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 316},"[JS|dn.struct.FixedArray] a.allocated == 0","These 2 expressions should be EQUAL",[a.nalloc + " != " + 0]);
	}
	a.push(16);
	a.push(32);
	if(a.nalloc == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] { a.push(16); a.push(32); a.allocated;} == 2" + "  <Ok>");
		}
	} else {
		a.push(16);
		a.push(32);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 319},"[JS|dn.struct.FixedArray] { a.push(16); a.push(32); a.allocated;} == 2","These 2 expressions should be EQUAL",[a.nalloc + " != " + 2]);
	}
	if((0 < a.nalloc ? a.values[0] : null) == 16) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.get(0) == 16" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 320},"[JS|dn.struct.FixedArray] a.get(0) == 16","These 2 expressions should be EQUAL",[(0 < a.nalloc ? a.values[0] : null) + " != " + 16]);
	}
	if((1 < a.nalloc ? a.values[1] : null) == 32) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.get(1) == 32" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 321},"[JS|dn.struct.FixedArray] a.get(1) == 32","These 2 expressions should be EQUAL",[(1 < a.nalloc ? a.values[1] : null) + " != " + 32]);
	}
	if((2 < a.nalloc ? a.values[2] : null) == null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.get(2) == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 322},"[JS|dn.struct.FixedArray] a.get(2) == null","These 2 expressions should be EQUAL",[(2 < a.nalloc ? a.values[2] : null) + " != " + Std.string(null)]);
	}
	if(0 < a.nalloc == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.exists(0) == true" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 323},"[JS|dn.struct.FixedArray] a.exists(0) == true","These 2 expressions should be EQUAL",[Std.string(0 < a.nalloc) + " != " + "true"]);
	}
	if(1 < a.nalloc == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.exists(1) == true" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 324},"[JS|dn.struct.FixedArray] a.exists(1) == true","These 2 expressions should be EQUAL",[Std.string(1 < a.nalloc) + " != " + "true"]);
	}
	if(2 < a.nalloc == false) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.exists(2) == false" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 325},"[JS|dn.struct.FixedArray] a.exists(2) == false","These 2 expressions should be EQUAL",[Std.string(2 < a.nalloc) + " != " + "false"]);
	}
	a.push(64);
	if((2 < a.nalloc ? a.values[2] : null) == 64) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] { a.push(64); a.get(2);} == 64" + "  <Ok>");
		}
	} else {
		a.push(64);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 326},"[JS|dn.struct.FixedArray] { a.push(64); a.get(2);} == 64","These 2 expressions should be EQUAL",[(2 < a.nalloc ? a.values[2] : null) + " != " + 64]);
	}
	if(a.nalloc > 0) {
		var this1 = a.values;
		var index = a.nalloc-- - 1;
	}
	if((2 < a.nalloc ? a.values[2] : null) == null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] { a.pop(); a.get(2);} == null" + "  <Ok>");
		}
	} else {
		if(a.nalloc > 0) {
			var this1 = a.values;
			var index = a.nalloc-- - 1;
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 327},"[JS|dn.struct.FixedArray] { a.pop(); a.get(2);} == null","These 2 expressions should be EQUAL",[(2 < a.nalloc ? a.values[2] : null) + " != " + Std.string(null)]);
	}
	a.push(64);
	if(a.values[0] == 16) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.first() == 16" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 331},"[JS|dn.struct.FixedArray] a.first() == 16","These 2 expressions should be EQUAL",[a.values[0] + " != " + 16]);
	}
	if(a.values[a.nalloc - 1] == 64) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.last() == 64" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 332},"[JS|dn.struct.FixedArray] a.last() == 64","These 2 expressions should be EQUAL",[a.values[a.nalloc - 1] + " != " + 64]);
	}
	if(a.remove(32) == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.remove(32) == true" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(a.remove(32)) + " != " + "true";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 335},"[JS|dn.struct.FixedArray] a.remove(32) == true","These 2 expressions should be EQUAL",[tmp]);
	}
	if(a.remove(99) == false) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.remove(99) == false" + "  <Ok>");
		}
	} else {
		var tmp = Std.string(a.remove(99)) + " != " + "false";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 336},"[JS|dn.struct.FixedArray] a.remove(99) == false","These 2 expressions should be EQUAL",[tmp]);
	}
	if(a.nalloc == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.allocated == 2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 337},"[JS|dn.struct.FixedArray] a.allocated == 2","These 2 expressions should be EQUAL",[a.nalloc + " != " + 2]);
	}
	a.removeIndex(10);
	if(a.nalloc == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] { a.removeIndex(10); a.allocated;} == 2" + "  <Ok>");
		}
	} else {
		a.removeIndex(10);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 338},"[JS|dn.struct.FixedArray] { a.removeIndex(10); a.allocated;} == 2","These 2 expressions should be EQUAL",[a.nalloc + " != " + 2]);
	}
	a.removeIndex(0);
	if(a.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] { a.removeIndex(0); a.allocated;} == 1" + "  <Ok>");
		}
	} else {
		a.removeIndex(0);
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 339},"[JS|dn.struct.FixedArray] { a.removeIndex(0); a.allocated;} == 1","These 2 expressions should be EQUAL",[a.nalloc + " != " + 1]);
	}
	if((0 < a.nalloc ? a.values[0] : null) == 64) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.get(0) == 64" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 340},"[JS|dn.struct.FixedArray] a.get(0) == 64","These 2 expressions should be EQUAL",[(0 < a.nalloc ? a.values[0] : null) + " != " + 64]);
	}
	var dyn = new dn_struct_FixedArray(null,2);
	dyn.enableAutoExpand(2);
	if(dyn.values.length == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] dyn.maxSize == 2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 345},"[JS|dn.struct.FixedArray] dyn.maxSize == 2","These 2 expressions should be EQUAL",[dyn.values.length + " != " + 2]);
	}
	if(dyn.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] dyn.allocated == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 346},"[JS|dn.struct.FixedArray] dyn.allocated == 0","These 2 expressions should be EQUAL",[dyn.nalloc + " != " + 0]);
	}
	dyn.push(true);
	if(dyn.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] dyn.allocated == 1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 349},"[JS|dn.struct.FixedArray] dyn.allocated == 1","These 2 expressions should be EQUAL",[dyn.nalloc + " != " + 1]);
	}
	dyn.push(true);
	if(dyn.nalloc == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] dyn.allocated == 2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 352},"[JS|dn.struct.FixedArray] dyn.allocated == 2","These 2 expressions should be EQUAL",[dyn.nalloc + " != " + 2]);
	}
	dyn.push(true);
	if(dyn.nalloc == 3) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] dyn.allocated == 3" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 355},"[JS|dn.struct.FixedArray] dyn.allocated == 3","These 2 expressions should be EQUAL",[dyn.nalloc + " != " + 3]);
	}
	if(dyn.values.length == 4) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] dyn.maxSize == 4" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 356},"[JS|dn.struct.FixedArray] dyn.maxSize == 4","These 2 expressions should be EQUAL",[dyn.values.length + " != " + 4]);
	}
	dyn.push(true);
	if(dyn.nalloc == 4) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] dyn.allocated == 4" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 359},"[JS|dn.struct.FixedArray] dyn.allocated == 4","These 2 expressions should be EQUAL",[dyn.nalloc + " != " + 4]);
	}
	dyn.push(true);
	if(dyn.nalloc == 5) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] dyn.allocated == 5" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 362},"[JS|dn.struct.FixedArray] dyn.allocated == 5","These 2 expressions should be EQUAL",[dyn.nalloc + " != " + 5]);
	}
	if(dyn.values.length == 6) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] dyn.maxSize == 6" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 363},"[JS|dn.struct.FixedArray] dyn.maxSize == 6","These 2 expressions should be EQUAL",[dyn.values.length + " != " + 6]);
	}
	var a = new dn_struct_FixedArray(null,4);
	a.push(30);
	a.push(10);
	a.push(40);
	a.push(20);
	a.bubbleSort(function(v) {
		return v;
	});
	if((0 < a.nalloc ? a.values[0] : null) == 10) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.get(0) == 10" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 372},"[JS|dn.struct.FixedArray] a.get(0) == 10","These 2 expressions should be EQUAL",[(0 < a.nalloc ? a.values[0] : null) + " != " + 10]);
	}
	if((1 < a.nalloc ? a.values[1] : null) == 20) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.get(1) == 20" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 373},"[JS|dn.struct.FixedArray] a.get(1) == 20","These 2 expressions should be EQUAL",[(1 < a.nalloc ? a.values[1] : null) + " != " + 20]);
	}
	if((2 < a.nalloc ? a.values[2] : null) == 30) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.get(2) == 30" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 374},"[JS|dn.struct.FixedArray] a.get(2) == 30","These 2 expressions should be EQUAL",[(2 < a.nalloc ? a.values[2] : null) + " != " + 30]);
	}
	if((3 < a.nalloc ? a.values[3] : null) == 40) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.get(3) == 40" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 375},"[JS|dn.struct.FixedArray] a.get(3) == 40","These 2 expressions should be EQUAL",[(3 < a.nalloc ? a.values[3] : null) + " != " + 40]);
	}
	var a = dn_struct_FixedArray.fromArray([0,1,2]);
	if(a.nalloc == 3) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.allocated == 3" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 379},"[JS|dn.struct.FixedArray] a.allocated == 3","These 2 expressions should be EQUAL",[a.nalloc + " != " + 3]);
	}
	if(a.values.length == 3) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.maxSize == 3" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 380},"[JS|dn.struct.FixedArray] a.maxSize == 3","These 2 expressions should be EQUAL",[a.values.length + " != " + 3]);
	}
	if((0 < a.nalloc ? a.values[0] : null) == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.get(0) == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 381},"[JS|dn.struct.FixedArray] a.get(0) == 0","These 2 expressions should be EQUAL",[(0 < a.nalloc ? a.values[0] : null) + " != " + 0]);
	}
	if((1 < a.nalloc ? a.values[1] : null) == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.get(1) == 1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 382},"[JS|dn.struct.FixedArray] a.get(1) == 1","These 2 expressions should be EQUAL",[(1 < a.nalloc ? a.values[1] : null) + " != " + 1]);
	}
	if((2 < a.nalloc ? a.values[2] : null) == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.get(2) == 2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 383},"[JS|dn.struct.FixedArray] a.get(2) == 2","These 2 expressions should be EQUAL",[(2 < a.nalloc ? a.values[2] : null) + " != " + 2]);
	}
	if(3 >= a.nalloc == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] !a.exists(3)" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 384},"[JS|dn.struct.FixedArray] !a.exists(3)","This expression should be TRUE");
	}
	var a = new dn_struct_FixedArray(null,5);
	a.push("a");
	a.push("b");
	a.push("c");
	a.push("d");
	a.push("e");
	if(a.shortString() == "a,b,c,d,e") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.shortString() == \"a,b,c,d,e\"" + "  <Ok>");
		}
	} else {
		var tmp = a.shortString() + " != " + "a,b,c,d,e";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 393},"[JS|dn.struct.FixedArray] a.shortString() == \"a,b,c,d,e\"","These 2 expressions should be EQUAL",[tmp]);
	}
	a.shift();
	if(a.shortString() == "e,b,c,d") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.shortString() == \"e,b,c,d\"" + "  <Ok>");
		}
	} else {
		var tmp = a.shortString() + " != " + "e,b,c,d";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 394},"[JS|dn.struct.FixedArray] a.shortString() == \"e,b,c,d\"","These 2 expressions should be EQUAL",[tmp]);
	}
	a.removeIndex(1);
	if(a.shortString() == "e,d,c") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.shortString() == \"e,d,c\"" + "  <Ok>");
		}
	} else {
		var tmp = a.shortString() + " != " + "e,d,c";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 395},"[JS|dn.struct.FixedArray] a.shortString() == \"e,d,c\"","These 2 expressions should be EQUAL",[tmp]);
	}
	a.remove("e");
	if(a.shortString() == "c,d") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.shortString() == \"c,d\"" + "  <Ok>");
		}
	} else {
		var tmp = a.shortString() + " != " + "c,d";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 396},"[JS|dn.struct.FixedArray] a.shortString() == \"c,d\"","These 2 expressions should be EQUAL",[tmp]);
	}
	var a = new dn_struct_FixedArray(null,5);
	a.preserveOrder = true;
	a.push("a");
	a.push("b");
	a.push("c");
	a.push("d");
	a.push("e");
	if(a.shortString() == "a,b,c,d,e") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.shortString() == \"a,b,c,d,e\"" + "  <Ok>");
		}
	} else {
		var tmp = a.shortString() + " != " + "a,b,c,d,e";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 406},"[JS|dn.struct.FixedArray] a.shortString() == \"a,b,c,d,e\"","These 2 expressions should be EQUAL",[tmp]);
	}
	a.shift();
	if(a.shortString() == "b,c,d,e") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.shortString() == \"b,c,d,e\"" + "  <Ok>");
		}
	} else {
		var tmp = a.shortString() + " != " + "b,c,d,e";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 407},"[JS|dn.struct.FixedArray] a.shortString() == \"b,c,d,e\"","These 2 expressions should be EQUAL",[tmp]);
	}
	a.removeIndex(1);
	if(a.shortString() == "b,d,e") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.shortString() == \"b,d,e\"" + "  <Ok>");
		}
	} else {
		var tmp = a.shortString() + " != " + "b,d,e";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 408},"[JS|dn.struct.FixedArray] a.shortString() == \"b,d,e\"","These 2 expressions should be EQUAL",[tmp]);
	}
	a.remove("b");
	if(a.shortString() == "d,e") {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.FixedArray] a.shortString() == \"d,e\"" + "  <Ok>");
		}
	} else {
		var tmp = a.shortString() + " != " + "d,e";
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/FixedArray.hx", line : 409},"[JS|dn.struct.FixedArray] a.shortString() == \"d,e\"","These 2 expressions should be EQUAL",[tmp]);
	}
};
var dn_struct__$FixedArray_FixedArrayIterator = function(arr) {
	this.arr = arr;
	this.i = 0;
};
$hxClasses["dn.struct._FixedArray.FixedArrayIterator"] = dn_struct__$FixedArray_FixedArrayIterator;
dn_struct__$FixedArray_FixedArrayIterator.__name__ = "dn.struct._FixedArray.FixedArrayIterator";
dn_struct__$FixedArray_FixedArrayIterator.prototype = {
	hasNext: function() {
		return this.i < this.arr.nalloc;
	}
	,next: function() {
		return this.arr.values[this.i++];
	}
	,__class__: dn_struct__$FixedArray_FixedArrayIterator
};
var dn_struct_RecyclablePool = function(size,valueConstructor) {
	this.nalloc = 0;
	this.size = size;
	this.pool = new Array(size);
	var _g = 0;
	var _g1 = this.pool.length;
	while(_g < _g1) {
		var i = _g++;
		this.pool[i] = valueConstructor();
	}
};
$hxClasses["dn.struct.RecyclablePool"] = dn_struct_RecyclablePool;
dn_struct_RecyclablePool.__name__ = "dn.struct.RecyclablePool";
dn_struct_RecyclablePool.__test = function() {
	var i = 0;
	var p = new dn_struct_RecyclablePool(3,function() {
		i += 1;
		return new dn_struct__$RecyclablePool_UnitTestObject(i - 1);
	});
	if(p.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.allocated == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 160},"[JS|dn.struct.RecyclablePool] p.allocated == 0","These 2 expressions should be EQUAL",[p.nalloc + " != " + 0]);
	}
	if(p.size == 3) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.maxSize == 3" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 161},"[JS|dn.struct.RecyclablePool] p.maxSize == 3","These 2 expressions should be EQUAL",[p.size + " != " + 3]);
	}
	if((0 >= p.nalloc ? null : p.pool[0]) == null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.get(0) == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 162},"[JS|dn.struct.RecyclablePool] p.get(0) == null","These 2 expressions should be EQUAL",[Std.string(0 >= p.nalloc ? null : p.pool[0]) + " != " + Std.string(null)]);
	}
	if(p.pool[0] != null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.getUnsafe(0) != null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 163},"[JS|dn.struct.RecyclablePool] p.getUnsafe(0) != null","This expression should be TRUE");
	}
	if(p.pool[1] != null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.getUnsafe(1) != null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 164},"[JS|dn.struct.RecyclablePool] p.getUnsafe(1) != null","This expression should be TRUE");
	}
	if(p.pool[2] != null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.getUnsafe(2) != null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 165},"[JS|dn.struct.RecyclablePool] p.getUnsafe(2) != null","This expression should be TRUE");
	}
	if(p.pool[3] == null == true) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.getUnsafe(3) == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 166},"[JS|dn.struct.RecyclablePool] p.getUnsafe(3) == null","This expression should be TRUE");
	}
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	var e1 = e;
	if(p.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.allocated == 1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 170},"[JS|dn.struct.RecyclablePool] p.allocated == 1","These 2 expressions should be EQUAL",[p.nalloc + " != " + 1]);
	}
	if((0 >= p.nalloc ? null : p.pool[0]) == e1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.get(0) == e" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 171},"[JS|dn.struct.RecyclablePool] p.get(0) == e","These 2 expressions should be EQUAL",[Std.string(0 >= p.nalloc ? null : p.pool[0]) + " != " + Std.string(e1)]);
	}
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	if(p.nalloc == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { p.alloc(); p.allocated;} == 2" + "  <Ok>");
		}
	} else {
		if(p.nalloc >= p.size) {
			p.garbageCollectNow();
			if(p.nalloc >= p.size) {
				throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
			}
		}
		var e = p.pool[p.nalloc++];
		e.recycle();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 172},"[JS|dn.struct.RecyclablePool] { p.alloc(); p.allocated;} == 2","These 2 expressions should be EQUAL",[p.nalloc + " != " + 2]);
	}
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	if(p.nalloc == 3) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { p.alloc(); p.allocated;} == 3" + "  <Ok>");
		}
	} else {
		if(p.nalloc >= p.size) {
			p.garbageCollectNow();
			if(p.nalloc >= p.size) {
				throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
			}
		}
		var e = p.pool[p.nalloc++];
		e.recycle();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 173},"[JS|dn.struct.RecyclablePool] { p.alloc(); p.allocated;} == 3","These 2 expressions should be EQUAL",[p.nalloc + " != " + 3]);
	}
	p.nalloc = 0;
	if(p.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { p.freeAll(); p.allocated;} == 0" + "  <Ok>");
		}
	} else {
		p.nalloc = 0;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 174},"[JS|dn.struct.RecyclablePool] { p.freeAll(); p.allocated;} == 0","These 2 expressions should be EQUAL",[p.nalloc + " != " + 0]);
	}
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	e1 = e;
	if(p.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { e = p.alloc(); p.allocated;} == 1" + "  <Ok>");
		}
	} else {
		if(p.nalloc >= p.size) {
			p.garbageCollectNow();
			if(p.nalloc >= p.size) {
				throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
			}
		}
		var e = p.pool[p.nalloc++];
		e.recycle();
		e1 = e;
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 177},"[JS|dn.struct.RecyclablePool] { e = p.alloc(); p.allocated;} == 1","These 2 expressions should be EQUAL",[p.nalloc + " != " + 1]);
	}
	var _g = 0;
	var _g1 = p.nalloc;
	while(_g < _g1) {
		var i1 = _g++;
		if(p.pool[i1] == e1) {
			if(i1 >= 0 && i1 < p.nalloc) {
				if(i1 == p.nalloc - 1) {
					p.nalloc--;
				} else {
					var tmp = p.pool[i1];
					p.pool[i1] = p.pool[p.nalloc - 1];
					p.pool[p.nalloc - 1] = tmp;
					p.nalloc--;
				}
			}
			break;
		}
	}
	if(p.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { p.freeElement(e); p.allocated;} == 0" + "  <Ok>");
		}
	} else {
		var _g = 0;
		var _g1 = p.nalloc;
		while(_g < _g1) {
			var i1 = _g++;
			if(p.pool[i1] == e1) {
				if(i1 >= 0 && i1 < p.nalloc) {
					if(i1 == p.nalloc - 1) {
						p.nalloc--;
					} else {
						var tmp = p.pool[i1];
						p.pool[i1] = p.pool[p.nalloc - 1];
						p.pool[p.nalloc - 1] = tmp;
						p.nalloc--;
					}
				}
				break;
			}
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 178},"[JS|dn.struct.RecyclablePool] { p.freeElement(e); p.allocated;} == 0","These 2 expressions should be EQUAL",[p.nalloc + " != " + 0]);
	}
	if((0 >= p.nalloc ? null : p.pool[0]) == null) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.get(0) == null" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 179},"[JS|dn.struct.RecyclablePool] p.get(0) == null","These 2 expressions should be EQUAL",[Std.string(0 >= p.nalloc ? null : p.pool[0]) + " != " + Std.string(null)]);
	}
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	if(p.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { p.alloc(); p.allocated;} == 1" + "  <Ok>");
		}
	} else {
		if(p.nalloc >= p.size) {
			p.garbageCollectNow();
			if(p.nalloc >= p.size) {
				throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
			}
		}
		var e = p.pool[p.nalloc++];
		e.recycle();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 180},"[JS|dn.struct.RecyclablePool] { p.alloc(); p.allocated;} == 1","These 2 expressions should be EQUAL",[p.nalloc + " != " + 1]);
	}
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	if(p.nalloc == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { p.alloc(); p.allocated;} == 2" + "  <Ok>");
		}
	} else {
		if(p.nalloc >= p.size) {
			p.garbageCollectNow();
			if(p.nalloc >= p.size) {
				throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
			}
		}
		var e = p.pool[p.nalloc++];
		e.recycle();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 181},"[JS|dn.struct.RecyclablePool] { p.alloc(); p.allocated;} == 2","These 2 expressions should be EQUAL",[p.nalloc + " != " + 2]);
	}
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	if(p.nalloc == 3) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { p.alloc(); p.allocated;} == 3" + "  <Ok>");
		}
	} else {
		if(p.nalloc >= p.size) {
			p.garbageCollectNow();
			if(p.nalloc >= p.size) {
				throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
			}
		}
		var e = p.pool[p.nalloc++];
		e.recycle();
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 182},"[JS|dn.struct.RecyclablePool] { p.alloc(); p.allocated;} == 3","These 2 expressions should be EQUAL",[p.nalloc + " != " + 3]);
	}
	if(1 < p.nalloc) {
		if(1 == p.nalloc - 1) {
			p.nalloc--;
		} else {
			var tmp = p.pool[1];
			p.pool[1] = p.pool[p.nalloc - 1];
			p.pool[p.nalloc - 1] = tmp;
			p.nalloc--;
		}
	}
	if(p.nalloc == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { p.freeIndex(1); p.allocated;} == 2" + "  <Ok>");
		}
	} else {
		if(1 < p.nalloc) {
			if(1 == p.nalloc - 1) {
				p.nalloc--;
			} else {
				var tmp = p.pool[1];
				p.pool[1] = p.pool[p.nalloc - 1];
				p.pool[p.nalloc - 1] = tmp;
				p.nalloc--;
			}
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 183},"[JS|dn.struct.RecyclablePool] { p.freeIndex(1); p.allocated;} == 2","These 2 expressions should be EQUAL",[p.nalloc + " != " + 2]);
	}
	if(0 < p.nalloc) {
		if(0 == p.nalloc - 1) {
			p.nalloc--;
		} else {
			var tmp = p.pool[0];
			p.pool[0] = p.pool[p.nalloc - 1];
			p.pool[p.nalloc - 1] = tmp;
			p.nalloc--;
		}
	}
	if(p.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { p.freeIndex(0); p.allocated;} == 1" + "  <Ok>");
		}
	} else {
		if(0 < p.nalloc) {
			if(0 == p.nalloc - 1) {
				p.nalloc--;
			} else {
				var tmp = p.pool[0];
				p.pool[0] = p.pool[p.nalloc - 1];
				p.pool[p.nalloc - 1] = tmp;
				p.nalloc--;
			}
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 184},"[JS|dn.struct.RecyclablePool] { p.freeIndex(0); p.allocated;} == 1","These 2 expressions should be EQUAL",[p.nalloc + " != " + 1]);
	}
	if(3 < p.nalloc) {
		if(3 == p.nalloc - 1) {
			p.nalloc--;
		} else {
			var tmp = p.pool[3];
			p.pool[3] = p.pool[p.nalloc - 1];
			p.pool[p.nalloc - 1] = tmp;
			p.nalloc--;
		}
	}
	if(p.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { p.freeIndex(3); p.allocated;} == 1" + "  <Ok>");
		}
	} else {
		if(3 < p.nalloc) {
			if(3 == p.nalloc - 1) {
				p.nalloc--;
			} else {
				var tmp = p.pool[3];
				p.pool[3] = p.pool[p.nalloc - 1];
				p.pool[p.nalloc - 1] = tmp;
				p.nalloc--;
			}
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 185},"[JS|dn.struct.RecyclablePool] { p.freeIndex(3); p.allocated;} == 1","These 2 expressions should be EQUAL",[p.nalloc + " != " + 1]);
	}
	if(0 < p.nalloc) {
		if(0 == p.nalloc - 1) {
			p.nalloc--;
		} else {
			var tmp = p.pool[0];
			p.pool[0] = p.pool[p.nalloc - 1];
			p.pool[p.nalloc - 1] = tmp;
			p.nalloc--;
		}
	}
	if(p.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] { p.freeIndex(0); p.allocated;} == 0" + "  <Ok>");
		}
	} else {
		if(0 < p.nalloc) {
			if(0 == p.nalloc - 1) {
				p.nalloc--;
			} else {
				var tmp = p.pool[0];
				p.pool[0] = p.pool[p.nalloc - 1];
				p.pool[p.nalloc - 1] = tmp;
				p.nalloc--;
			}
		}
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 186},"[JS|dn.struct.RecyclablePool] { p.freeIndex(0); p.allocated;} == 0","These 2 expressions should be EQUAL",[p.nalloc + " != " + 0]);
	}
	var i1 = 0;
	var p = new dn_struct_RecyclablePool(10,function() {
		i1 += 1;
		return new dn_struct__$RecyclablePool_UnitTestObject(i1 - 1);
	});
	var _g = 0;
	while(_g < 1000) {
		var i2 = _g++;
		if(p.nalloc < p.size) {
			if(p.nalloc >= p.size) {
				p.garbageCollectNow();
				if(p.nalloc >= p.size) {
					throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
				}
			}
			var e = p.pool[p.nalloc++];
			e.recycle();
		}
		if(Std.random(2) == 0) {
			if(0 < p.nalloc) {
				if(0 == p.nalloc - 1) {
					p.nalloc--;
				} else {
					var tmp = p.pool[0];
					p.pool[0] = p.pool[p.nalloc - 1];
					p.pool[p.nalloc - 1] = tmp;
					p.nalloc--;
				}
			}
		}
	}
	var _g = 0;
	var _g1 = p.size;
	while(_g < _g1) {
		var i2 = _g++;
		var _g2 = i2 + 1;
		var _g3 = p.size;
		while(_g2 < _g3) {
			var j = _g2++;
			if(p.pool[i2] != p.pool[j] == true) {
				if(dn_CiAssert.VERBOSE) {
					dn_Lib.println("[JS|dn.struct.RecyclablePool] p.getUnsafe(i) != p.getUnsafe(j)" + "  <Ok>");
				}
			} else {
				dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 199},"[JS|dn.struct.RecyclablePool] p.getUnsafe(i) != p.getUnsafe(j)","This expression should be TRUE");
			}
		}
	}
	var i2 = 0;
	var p = new dn_struct_RecyclablePool(3,function() {
		i2 += 1;
		return new dn_struct__$RecyclablePool_UnitTestObject(i2 - 1);
	});
	p.canBeGarbageCollected = function(e) {
		return e.value < 100;
	};
	if(p.nalloc == 0) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.allocated == 0" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 206},"[JS|dn.struct.RecyclablePool] p.allocated == 0","These 2 expressions should be EQUAL",[p.nalloc + " != " + 0]);
	}
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	e.value = 10;
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	e.value = 500;
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	e.value = 20;
	if(p.nalloc == 3) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.allocated == 3" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 210},"[JS|dn.struct.RecyclablePool] p.allocated == 3","These 2 expressions should be EQUAL",[p.nalloc + " != " + 3]);
	}
	p.garbageCollectNow();
	if(p.nalloc == 1) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.allocated == 1" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 213},"[JS|dn.struct.RecyclablePool] p.allocated == 1","These 2 expressions should be EQUAL",[p.nalloc + " != " + 1]);
	}
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	e.value = 10;
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	e.value = 20;
	if(p.nalloc == 3) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.allocated == 3" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 217},"[JS|dn.struct.RecyclablePool] p.allocated == 3","These 2 expressions should be EQUAL",[p.nalloc + " != " + 3]);
	}
	if(p.nalloc >= p.size) {
		p.garbageCollectNow();
		if(p.nalloc >= p.size) {
			throw haxe_Exception.thrown("RecyclablePool limit reached (" + p.size + ")");
		}
	}
	var e = p.pool[p.nalloc++];
	e.recycle();
	e.value = 30;
	if(p.nalloc == 2) {
		if(dn_CiAssert.VERBOSE) {
			dn_Lib.println("[JS|dn.struct.RecyclablePool] p.allocated == 2" + "  <Ok>");
		}
	} else {
		dn_CiAssert.fail({ file : "/home/jebouin/haxe/deepnightlibs/git/src/dn/struct/RecyclablePool.hx", line : 219},"[JS|dn.struct.RecyclablePool] p.allocated == 2","These 2 expressions should be EQUAL",[p.nalloc + " != " + 2]);
	}
};
dn_struct_RecyclablePool.prototype = {
	get_allocated: function() {
		return this.nalloc;
	}
	,get_maxSize: function() {
		return this.size;
	}
	,toString: function() {
		return "RecyclablePool(" + this.nalloc + "/" + this.size + ")";
	}
	,debugContent: function() {
		var _gthis = this;
		var idx = 0;
		var tmp = this.toString() + " => ";
		var this1 = this.pool;
		var length = this1.length;
		var r = new Array(length);
		var len = length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var v = this1[i];
			var v1 = idx++ < _gthis.nalloc ? Std.string(v) : "{deleted:" + Std.string(v) + "}";
			r[i] = v1;
		}
		return tmp + Std.string(r);
	}
	,get: function(index) {
		if(index < 0 || index >= this.nalloc) {
			return null;
		} else {
			return this.pool[index];
		}
	}
	,getUnsafe: function(index) {
		return this.pool[index];
	}
	,dispose: function(elementDisposer) {
		if(elementDisposer != null) {
			var _g = 0;
			var _g1 = this.pool;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				elementDisposer(e);
			}
		}
		this.nalloc = 0;
		this.pool = null;
	}
	,alloc: function() {
		if(this.nalloc >= this.size) {
			this.garbageCollectNow();
			if(this.nalloc >= this.size) {
				throw haxe_Exception.thrown("RecyclablePool limit reached (" + this.size + ")");
			}
		}
		var e = this.pool[this.nalloc++];
		e.recycle();
		return e;
	}
	,canBeGarbageCollected: function(v) {
		return false;
	}
	,garbageCollectNow: function() {
		var i = 0;
		while(i < this.nalloc) if(this.canBeGarbageCollected(i < 0 || i >= this.nalloc ? null : this.pool[i])) {
			if(i >= 0 && i < this.nalloc) {
				if(i == this.nalloc - 1) {
					this.nalloc--;
				} else {
					var tmp = this.pool[i];
					this.pool[i] = this.pool[this.nalloc - 1];
					this.pool[this.nalloc - 1] = tmp;
					this.nalloc--;
				}
			}
		} else {
			++i;
		}
	}
	,freeAll: function() {
		this.nalloc = 0;
	}
	,freeIndex: function(i) {
		if(i >= 0 && i < this.nalloc) {
			if(i == this.nalloc - 1) {
				this.nalloc--;
			} else {
				var tmp = this.pool[i];
				this.pool[i] = this.pool[this.nalloc - 1];
				this.pool[this.nalloc - 1] = tmp;
				this.nalloc--;
			}
		}
	}
	,freeElement: function(search) {
		var _g = 0;
		var _g1 = this.nalloc;
		while(_g < _g1) {
			var i = _g++;
			if(this.pool[i] == search) {
				if(i >= 0 && i < this.nalloc) {
					if(i == this.nalloc - 1) {
						this.nalloc--;
					} else {
						var tmp = this.pool[i];
						this.pool[i] = this.pool[this.nalloc - 1];
						this.pool[this.nalloc - 1] = tmp;
						this.nalloc--;
					}
				}
				break;
			}
		}
	}
	,iterator: function() {
		return new dn_struct__$RecyclablePool_RecyclablePoolIterator(this);
	}
	,__class__: dn_struct_RecyclablePool
};
var dn_struct__$RecyclablePool_UnitTestObject = function(id) {
	this.id = id;
	this.value = -1;
};
$hxClasses["dn.struct._RecyclablePool.UnitTestObject"] = dn_struct__$RecyclablePool_UnitTestObject;
dn_struct__$RecyclablePool_UnitTestObject.__name__ = "dn.struct._RecyclablePool.UnitTestObject";
dn_struct__$RecyclablePool_UnitTestObject.__interfaces__ = [dn_struct_Recyclable];
dn_struct__$RecyclablePool_UnitTestObject.prototype = {
	toString: function() {
		return "#" + this.id + "=" + Std.string(this.value);
	}
	,recycle: function() {
		this.value = Std.random(999999);
	}
	,__class__: dn_struct__$RecyclablePool_UnitTestObject
};
var dn_struct__$RecyclablePool_RecyclablePoolIterator = function(r) {
	this.rpool = r;
	this.i = 0;
};
$hxClasses["dn.struct._RecyclablePool.RecyclablePoolIterator"] = dn_struct__$RecyclablePool_RecyclablePoolIterator;
dn_struct__$RecyclablePool_RecyclablePoolIterator.__name__ = "dn.struct._RecyclablePool.RecyclablePoolIterator";
dn_struct__$RecyclablePool_RecyclablePoolIterator.prototype = {
	hasNext: function() {
		return this.i < this.rpool.nalloc;
	}
	,next: function() {
		return this.rpool.pool[this.i++];
	}
	,__class__: dn_struct__$RecyclablePool_RecyclablePoolIterator
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var entities_Border = function(bounds) {
	if(entities_Border.tile == null) {
		entities_Border.tile = Assets.getTile("entities","border");
		entities_Border.tileBack = Assets.getTile("entities","borderBack");
	}
	this.bounds = bounds;
	this.group = new h2d_TileGroup(entities_Border.tile);
	Game.inst.world.add(this.group,Game.LAYER_BORDER);
	this.groupBack = new h2d_TileGroup(entities_Border.tileBack);
	this.groupBack.alpha = .15;
	this.groupBack.blendMode = h2d_BlendMode.Add;
	Game.inst.world.add(this.groupBack,Game.LAYER_BORDER_BACK);
	this.mask = new h2d_Graphics(this.group);
	this.group.set_filter(new h2d_filter_Mask(this.mask));
	this.render();
	this.id = entities_Border.all.length;
	entities_Border.all.push(this);
	entities_Border.idToBorder.h[this.id] = this;
};
$hxClasses["entities.Border"] = entities_Border;
entities_Border.__name__ = "entities.Border";
entities_Border.deleteAll = function() {
	var _g = 0;
	var _g1 = entities_Border.all;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		b.delete();
	}
	entities_Border.all = [];
};
entities_Border.updateAll = function(dt) {
	var _g = 0;
	var _g1 = entities_Border.all;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		b.update(dt);
	}
	var _g = 0;
	var _g1 = entities_Border.all;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		b.renderMask();
	}
};
entities_Border.updateAllWalls = function() {
	var _g = 0;
	var _g1 = entities_Border.all;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		b.updateWalls();
	}
};
entities_Border.simplifyWall = function(w) {
	var res = [];
	var i = 0;
	while(i < w.length) {
		var seg = w[i];
		var j = i + 1;
		while(j < w.length && w[j].pos == seg.pos + seg.length) {
			seg.length += w[j].length;
			++j;
		}
		res.push(seg);
		i = j;
	}
	return res;
};
entities_Border.invertWall = function(w,totalLength) {
	var res = [];
	var last = 0;
	var _g = 0;
	while(_g < w.length) {
		var seg = w[_g];
		++_g;
		if(seg.pos > last) {
			res.push({ pos : last, length : seg.pos - last});
		}
		last = seg.pos + seg.length;
	}
	if(last < totalLength) {
		res.push({ pos : last, length : totalLength - last});
	}
	return res;
};
entities_Border.prototype = {
	'delete': function() {
		var _this = this.group;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var _this = this.groupBack;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		entities_Border.idToBorder.remove(this.id);
	}
	,update: function(dt) {
		var _this = this.group;
		var _this1 = this.groupBack;
		_this1.posChanged = true;
		_this.posChanged = true;
		_this.x = _this1.x = this.bounds.xMin;
		var _this = this.group;
		var _this1 = this.groupBack;
		_this1.posChanged = true;
		_this.posChanged = true;
		_this.y = _this1.y = this.bounds.yMin;
	}
	,setBounds: function(b) {
		this.bounds = b;
		this.render();
	}
	,render: function() {
		this.group.clear();
		this.groupBack.clear();
		var tmp;
		var _this = this.bounds;
		if((_this.xMax - _this.xMin) % 8 == 0) {
			var _this = this.bounds;
			tmp = (_this.yMax - _this.yMin) % 8 != 0;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Border size must be a multiple of tile size");
		}
		var _this = this.bounds;
		var wt = (_this.xMax - _this.xMin) / 8 | 0;
		var _this = this.bounds;
		var ht = (_this.yMax - _this.yMin) / 8 | 0;
		var _g = 0;
		var _g1 = ht;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = wt;
			while(_g2 < _g3) {
				var j = _g2++;
				var ti = i == 0 ? 0 : i == ht - 1 ? 2 : 1;
				var tj = j == 0 ? 0 : j == wt - 1 ? 2 : 1;
				var _this = this.group;
				var t = entities_Border.tile.sub(tj * 8,ti * 8,8,8);
				_this.content.add(j * 8,i * 8,_this.curColor.x,_this.curColor.y,_this.curColor.z,_this.curColor.w,t);
				var _this1 = this.groupBack;
				var t1 = entities_Border.tileBack.sub(tj * 8,ti * 8,8,8);
				_this1.content.add(j * 8,i * 8,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,t1);
			}
		}
	}
	,renderMask: function() {
		this.mask.clear();
		this.mask.beginFill(16777215);
		var _g = 0;
		var _g1 = this.wallLeft;
		while(_g < _g1.length) {
			var segment = _g1[_g];
			++_g;
			this.mask.drawRect(0,segment.pos,1,segment.length);
		}
		var _g = 0;
		var _g1 = this.wallRight;
		while(_g < _g1.length) {
			var segment = _g1[_g];
			++_g;
			var _this = this.bounds;
			this.mask.drawRect(_this.xMax - _this.xMin - 1,segment.pos,1,segment.length);
		}
		var _g = 0;
		var _g1 = this.wallUp;
		while(_g < _g1.length) {
			var segment = _g1[_g];
			++_g;
			this.mask.drawRect(segment.pos,0,segment.length,1);
		}
		var _g = 0;
		var _g1 = this.wallDown;
		while(_g < _g1.length) {
			var segment = _g1[_g];
			++_g;
			var _this = this.bounds;
			this.mask.drawRect(segment.pos,_this.yMax - _this.yMin - 1,segment.length,1);
		}
		this.mask.endFill();
	}
	,canStepLeft: function(res) {
		res.pushedBorders.h[this.id] = true;
		var fh = this.bounds;
		var x = fh.xMin - 1;
		fh.xMax += x - fh.xMin;
		fh.xMin = x;
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b == this || (this.bounds.xMin >= b.bounds.xMax || this.bounds.xMax <= b.bounds.xMin || this.bounds.yMin >= b.bounds.yMax || this.bounds.yMax <= b.bounds.yMin) || res.pushedBorders.h.hasOwnProperty(b.id)) {
				continue;
			}
			b.canStepLeft(res);
			if(!res.success) {
				res.fail();
				return;
			}
		}
		entities_Border.updateAllWalls();
		var _g = 0;
		var _g1 = entities_Entity.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.canPushBorders || res.pushedEntities.h.hasOwnProperty(e.id)) {
				continue;
			}
			if(e.x + e.hitbox.xMin < this.bounds.xMin && e.x + e.hitbox.xMax > this.bounds.xMin && this.wallIntersectsSegment(this.wallLeft,e.y + e.hitbox.yMin - this.bounds.yMin,e.y + e.hitbox.yMax - this.bounds.yMin) || e.x + e.hitbox.xMin < this.bounds.xMax && e.x + e.hitbox.xMax > this.bounds.xMax && this.wallIntersectsSegment(this.wallRight,e.y + e.hitbox.yMin - this.bounds.yMin,e.y + e.hitbox.yMax - this.bounds.yMin)) {
				res.triedPushingHorizontal = true;
				e.tryStepLeft(res,true,true);
				if(!res.success) {
					res.fail();
					return;
				}
			}
		}
	}
	,canStepRight: function(res) {
		res.pushedBorders.h[this.id] = true;
		var fh = this.bounds;
		var x = fh.xMin + 1;
		fh.xMax += x - fh.xMin;
		fh.xMin = x;
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b == this || (this.bounds.xMin >= b.bounds.xMax || this.bounds.xMax <= b.bounds.xMin || this.bounds.yMin >= b.bounds.yMax || this.bounds.yMax <= b.bounds.yMin) || res.pushedBorders.h.hasOwnProperty(b.id)) {
				continue;
			}
			b.canStepRight(res);
			if(!res.success) {
				res.fail();
				return;
			}
		}
		entities_Border.updateAllWalls();
		var _g = 0;
		var _g1 = entities_Entity.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.canPushBorders || res.pushedEntities.h.hasOwnProperty(e.id)) {
				continue;
			}
			if(e.x + e.hitbox.xMin < this.bounds.xMin && e.x + e.hitbox.xMax > this.bounds.xMin && this.wallIntersectsSegment(this.wallLeft,e.y + e.hitbox.yMin - this.bounds.yMin,e.y + e.hitbox.yMax - this.bounds.yMin) || e.x + e.hitbox.xMin < this.bounds.xMax && e.x + e.hitbox.xMax > this.bounds.xMax && this.wallIntersectsSegment(this.wallRight,e.y + e.hitbox.yMin - this.bounds.yMin,e.y + e.hitbox.yMax - this.bounds.yMin)) {
				res.triedPushingHorizontal = true;
				e.tryStepRight(res,true,true);
				if(!res.success) {
					res.fail();
					return;
				}
			}
		}
	}
	,canStepUp: function(res) {
		res.pushedBorders.h[this.id] = true;
		var fh = this.bounds;
		var y = fh.yMin - 1;
		fh.yMax += y - fh.yMin;
		fh.yMin = y;
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b == this || (this.bounds.xMin >= b.bounds.xMax || this.bounds.xMax <= b.bounds.xMin || this.bounds.yMin >= b.bounds.yMax || this.bounds.yMax <= b.bounds.yMin) || res.pushedBorders.h.hasOwnProperty(b.id)) {
				continue;
			}
			b.canStepUp(res);
			if(!res.success) {
				res.fail();
				return;
			}
		}
		entities_Border.updateAllWalls();
		var _g = 0;
		var _g1 = entities_Entity.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.canPushBorders || res.pushedEntities.h.hasOwnProperty(e.id)) {
				continue;
			}
			if(e.y + e.hitbox.yMin < this.bounds.yMin && e.y + e.hitbox.yMax > this.bounds.yMin && this.wallIntersectsSegment(this.wallUp,e.x + e.hitbox.xMin - this.bounds.xMin,e.x + e.hitbox.xMax - this.bounds.xMin) || e.y + e.hitbox.yMin < this.bounds.yMax && e.y + e.hitbox.yMax > this.bounds.yMax && this.wallIntersectsSegment(this.wallDown,e.x + e.hitbox.xMin - this.bounds.xMin,e.x + e.hitbox.xMax - this.bounds.xMin)) {
				e.tryStepUp(res,true,true);
				if(!res.success) {
					res.fail();
					return;
				}
			}
		}
	}
	,canStepDown: function(res) {
		res.pushedBorders.h[this.id] = true;
		var fh = this.bounds;
		var y = fh.yMin + 1;
		fh.yMax += y - fh.yMin;
		fh.yMin = y;
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b == this || (this.bounds.xMin >= b.bounds.xMax || this.bounds.xMax <= b.bounds.xMin || this.bounds.yMin >= b.bounds.yMax || this.bounds.yMax <= b.bounds.yMin) || res.pushedBorders.h.hasOwnProperty(b.id)) {
				continue;
			}
			b.canStepDown(res);
			if(!res.success) {
				res.fail();
				return;
			}
		}
		entities_Border.updateAllWalls();
		var _g = 0;
		var _g1 = entities_Entity.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.canPushBorders || res.pushedEntities.h.hasOwnProperty(e.id)) {
				continue;
			}
			if(e.y + e.hitbox.yMin < this.bounds.yMin && e.y + e.hitbox.yMax > this.bounds.yMin && this.wallIntersectsSegment(this.wallUp,e.x + e.hitbox.xMin - this.bounds.xMin,e.x + e.hitbox.xMax - this.bounds.xMin) || e.y + e.hitbox.yMin < this.bounds.yMax && e.y + e.hitbox.yMax > this.bounds.yMax && this.wallIntersectsSegment(this.wallDown,e.x + e.hitbox.xMin - this.bounds.xMin,e.x + e.hitbox.xMax - this.bounds.xMin)) {
				e.tryStepDown(res,true,true);
				if(!res.success) {
					res.fail();
					return;
				}
			}
		}
	}
	,containsEntity: function(e) {
		if(e.x + e.hitbox.xMin >= this.bounds.xMin && e.x + e.hitbox.xMax <= this.bounds.xMax && e.y + e.hitbox.yMin >= this.bounds.yMin) {
			return e.y + e.hitbox.yMax <= this.bounds.yMax;
		} else {
			return false;
		}
	}
	,rectIntersectsEntity: function(e) {
		if(e.x + e.hitbox.xMin < this.bounds.xMax && e.x + e.hitbox.xMax > this.bounds.xMin && e.y + e.hitbox.yMin < this.bounds.yMax) {
			return e.y + e.hitbox.yMax > this.bounds.yMin;
		} else {
			return false;
		}
	}
	,collides: function(other) {
		return !(this.bounds.xMin >= other.bounds.xMax || this.bounds.xMax <= other.bounds.xMin || this.bounds.yMin >= other.bounds.yMax || this.bounds.yMax <= other.bounds.yMin);
	}
	,horizontalWallIntersectsEntity: function(e) {
		if(!(e.y + e.hitbox.yMin < this.bounds.yMin && e.y + e.hitbox.yMax > this.bounds.yMin && this.wallIntersectsSegment(this.wallUp,e.x + e.hitbox.xMin - this.bounds.xMin,e.x + e.hitbox.xMax - this.bounds.xMin))) {
			if(e.y + e.hitbox.yMin < this.bounds.yMax && e.y + e.hitbox.yMax > this.bounds.yMax) {
				return this.wallIntersectsSegment(this.wallDown,e.x + e.hitbox.xMin - this.bounds.xMin,e.x + e.hitbox.xMax - this.bounds.xMin);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,verticalWallIntersectsEntity: function(e) {
		if(!(e.x + e.hitbox.xMin < this.bounds.xMin && e.x + e.hitbox.xMax > this.bounds.xMin && this.wallIntersectsSegment(this.wallLeft,e.y + e.hitbox.yMin - this.bounds.yMin,e.y + e.hitbox.yMax - this.bounds.yMin))) {
			if(e.x + e.hitbox.xMin < this.bounds.xMax && e.x + e.hitbox.xMax > this.bounds.xMax) {
				return this.wallIntersectsSegment(this.wallRight,e.y + e.hitbox.yMin - this.bounds.yMin,e.y + e.hitbox.yMax - this.bounds.yMin);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,leftWallIntersectsEntity: function(e) {
		if(e.x + e.hitbox.xMin < this.bounds.xMin && e.x + e.hitbox.xMax > this.bounds.xMin) {
			return this.wallIntersectsSegment(this.wallLeft,e.y + e.hitbox.yMin - this.bounds.yMin,e.y + e.hitbox.yMax - this.bounds.yMin);
		} else {
			return false;
		}
	}
	,rightWallIntersectsEntity: function(e) {
		if(e.x + e.hitbox.xMin < this.bounds.xMax && e.x + e.hitbox.xMax > this.bounds.xMax) {
			return this.wallIntersectsSegment(this.wallRight,e.y + e.hitbox.yMin - this.bounds.yMin,e.y + e.hitbox.yMax - this.bounds.yMin);
		} else {
			return false;
		}
	}
	,topWallIntersectsEntity: function(e) {
		if(e.y + e.hitbox.yMin < this.bounds.yMin && e.y + e.hitbox.yMax > this.bounds.yMin) {
			return this.wallIntersectsSegment(this.wallUp,e.x + e.hitbox.xMin - this.bounds.xMin,e.x + e.hitbox.xMax - this.bounds.xMin);
		} else {
			return false;
		}
	}
	,bottomWallIntersectsEntity: function(e) {
		if(e.y + e.hitbox.yMin < this.bounds.yMax && e.y + e.hitbox.yMax > this.bounds.yMax) {
			return this.wallIntersectsSegment(this.wallDown,e.x + e.hitbox.xMin - this.bounds.xMin,e.x + e.hitbox.xMax - this.bounds.xMin);
		} else {
			return false;
		}
	}
	,wallIntersectsSegment: function(w,l,r) {
		var _g = 0;
		while(_g < w.length) {
			var seg = w[_g];
			++_g;
			if(l < seg.pos + seg.length && r > seg.pos) {
				return true;
			}
		}
		return false;
	}
	,updateWalls: function() {
		var getSegment = function(l1,r1,l2,r2) {
			var l = l1 > l2 ? l1 : l2;
			var r = r1 < r2 ? r1 : r2;
			if(l >= r) {
				return null;
			}
			return { pos : l - l1, length : r - l};
		};
		this.wallLeft = [];
		this.wallRight = [];
		this.wallUp = [];
		this.wallDown = [];
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b == this) {
				continue;
			}
			if(this.bounds.xMin == b.bounds.xMax) {
				var seg = getSegment(this.bounds.yMin,this.bounds.yMax,b.bounds.yMin,b.bounds.yMax);
				if(seg != null) {
					this.wallLeft.push(seg);
				}
			}
			if(this.bounds.xMax == b.bounds.xMin) {
				var seg1 = getSegment(this.bounds.yMin,this.bounds.yMax,b.bounds.yMin,b.bounds.yMax);
				if(seg1 != null) {
					this.wallRight.push(seg1);
				}
			}
			if(this.bounds.yMin == b.bounds.yMax) {
				var seg2 = getSegment(this.bounds.xMin,this.bounds.xMax,b.bounds.xMin,b.bounds.xMax);
				if(seg2 != null) {
					this.wallUp.push(seg2);
				}
			}
			if(this.bounds.yMax == b.bounds.yMin) {
				var seg3 = getSegment(this.bounds.xMin,this.bounds.xMax,b.bounds.xMin,b.bounds.xMax);
				if(seg3 != null) {
					this.wallDown.push(seg3);
				}
			}
		}
		this.holesLeft = entities_Border.simplifyWall(this.wallLeft);
		this.holesRight = entities_Border.simplifyWall(this.wallRight);
		this.holesUp = entities_Border.simplifyWall(this.wallUp);
		this.holesDown = entities_Border.simplifyWall(this.wallDown);
		var _this = this.bounds;
		this.wallLeft = entities_Border.invertWall(this.holesLeft,_this.yMax - _this.yMin);
		var _this = this.bounds;
		this.wallRight = entities_Border.invertWall(this.holesRight,_this.yMax - _this.yMin);
		var _this = this.bounds;
		this.wallUp = entities_Border.invertWall(this.holesUp,_this.xMax - _this.xMin);
		var _this = this.bounds;
		this.wallDown = entities_Border.invertWall(this.holesDown,_this.xMax - _this.xMin);
	}
	,toString: function() {
		var str = "Border " + this.id + " at (" + this.bounds.xMin + ", " + this.bounds.yMin + ") to (" + this.bounds.xMax + ", " + this.bounds.yMax + ") ";
		str += "left: " + Std.string(this.wallLeft) + ", right: " + Std.string(this.wallRight) + ", up: " + Std.string(this.wallUp) + ", down: " + Std.string(this.wallDown);
		return str;
	}
	,__class__: entities_Border
};
var entities_Entity = function(hitbox) {
	this.hitDownSinceWiggle = false;
	this.triedPushingHorizontal = false;
	this.isInside = false;
	this.borderId = -1;
	this.hitDown = false;
	this.hitUp = false;
	this.hitRight = false;
	this.hitLeft = false;
	this.canPushEntities = false;
	this.canPushBorders = false;
	this.collisionEnabled = false;
	this.deleted = false;
	this.ry = 0.;
	this.rx = 0.;
	this.vy = 0.;
	this.vx = 0.;
	this.y = 0;
	this.x = 0;
	this.id = entities_Entity.all.length;
	entities_Entity.all.push(this);
	entities_Entity.idToEntity.h[this.id] = this;
	if(hitbox != null) {
		this.setHitbox(hitbox);
	}
};
$hxClasses["entities.Entity"] = entities_Entity;
entities_Entity.__name__ = "entities.Entity";
entities_Entity.sortTopDown = function() {
	entities_Entity.all.sort(function(a,b) {
		return a.y - b.y;
	});
};
entities_Entity.sortBottomUp = function() {
	entities_Entity.all.sort(function(a,b) {
		return b.y + b.hitbox.yMax - (a.y + a.hitbox.yMax);
	});
};
entities_Entity.sortLeftRight = function() {
	entities_Entity.all.sort(function(a,b) {
		return a.x - b.x;
	});
};
entities_Entity.sortRightLeft = function() {
	entities_Entity.all.sort(function(a,b) {
		return b.x + b.hitbox.xMax - (a.x + a.hitbox.xMax);
	});
};
entities_Entity.updateAll = function(dt) {
	var iterateAndCheckAll = function(f) {
		var i = 0;
		while(i < entities_Entity.all.length) {
			var entity = entities_Entity.all[i];
			f(entity);
			if(entity.deleted) {
				entities_Entity.all.splice(i,1);
			} else {
				++i;
			}
		}
	};
	iterateAndCheckAll(function(e) {
		e.updateBeforeMove(dt);
	});
	var iterations = 0;
	while(iterations < Game.MAX_MOVE_STEPS) {
		var moved = [false];
		entities_Entity.sortLeftRight();
		iterateAndCheckAll((function(moved) {
			return function(e) {
				if(e.tryMoveLeft()) {
					moved[0] = true;
				}
				entities_Border.updateAllWalls();
			};
		})(moved));
		entities_Entity.sortRightLeft();
		iterateAndCheckAll((function(moved) {
			return function(e) {
				if(e.tryMoveRight()) {
					moved[0] = true;
				}
				entities_Border.updateAllWalls();
			};
		})(moved));
		entities_Entity.sortTopDown();
		iterateAndCheckAll((function(moved) {
			return function(e) {
				if(e.tryMoveUp()) {
					moved[0] = true;
				}
				entities_Border.updateAllWalls();
			};
		})(moved));
		entities_Entity.sortBottomUp();
		iterateAndCheckAll((function(moved) {
			return function(e) {
				var isBox = !e.canPushEntities;
				if(isBox && e.ry >= 0 && e.ry < 1 && e.hitDownSinceWiggle && Game.inst.level.hasTightHoles) {
					e.ry = 1;
					e.hitDownSinceWiggle = false;
				}
				if(e.tryMoveDown()) {
					moved[0] = true;
				} else if(isBox) {
					e.hitDownSinceWiggle = true;
				}
				entities_Border.updateAllWalls();
			};
		})(moved));
		++iterations;
		if(!moved[0]) {
			break;
		}
	}
	iterateAndCheckAll(function(e) {
		e.updateAfterMove(dt);
	});
};
entities_Entity.deleteAll = function() {
	var _g = 0;
	var _g1 = entities_Entity.all;
	while(_g < _g1.length) {
		var entity = _g1[_g];
		++_g;
		entity.delete();
	}
	entities_Entity.all = [];
};
entities_Entity.prototype = {
	'delete': function() {
		if(this.deleted) {
			return;
		}
		this.deleted = true;
		entities_Entity.idToEntity.remove(this.id);
	}
	,die: function(dx,dy) {
		this.delete();
	}
	,updateBeforeMove: function(dt) {
		this.borderId = this.getBorderId();
		this.hitLeft = this.hitRight = this.hitUp = this.hitDown = false;
		this.rx += this.vx * dt;
		this.ry += this.vy * dt;
	}
	,updateAfterMove: function(dt) {
		this.updateBorderConstraint();
	}
	,tryMoveLeft: function() {
		var amountX = Math.round(this.rx);
		if(amountX >= 0) {
			return false;
		}
		if(this.collisionEnabled) {
			var res = entities_StepResult.newLeft();
			this.tryStepLeft(res);
			res.apply(this);
			if(!res.success) {
				this.vx = 0;
				this.hitLeft = true;
				this.rx -= amountX;
				return false;
			}
		} else {
			this.rx++;
			this.x--;
		}
		return true;
	}
	,tryMoveRight: function() {
		var amountX = Math.round(this.rx);
		if(amountX <= 0) {
			return false;
		}
		if(this.collisionEnabled) {
			var res = entities_StepResult.newRight();
			this.tryStepRight(res);
			res.apply(this);
			if(!res.success) {
				this.vx = 0;
				this.hitRight = true;
				this.rx -= amountX;
				return false;
			}
		} else {
			this.rx--;
			this.x++;
		}
		return true;
	}
	,tryMoveUp: function() {
		var amountY = Math.round(this.ry);
		if(amountY >= 0) {
			return false;
		}
		if(this.collisionEnabled) {
			var res = entities_StepResult.newUp();
			this.tryStepUp(res);
			res.apply(this);
			if(!res.success) {
				this.hitUp = true;
				this.ry -= amountY;
				return false;
			}
		} else {
			this.ry++;
			this.y--;
		}
		return true;
	}
	,tryMoveDown: function() {
		var amountY = Math.round(this.ry);
		if(amountY <= 0) {
			return false;
		}
		if(this.collisionEnabled) {
			var res = entities_StepResult.newDown();
			this.tryStepDown(res);
			res.apply(this);
			if(!res.success) {
				this.vy = 0;
				this.hitDown = true;
				this.ry -= amountY;
				return false;
			}
		} else {
			this.ry--;
			this.y++;
		}
		return true;
	}
	,tryStepLeft: function(res,canPushEntities,canPushBorders) {
		if(canPushBorders == null) {
			canPushBorders = false;
		}
		if(canPushEntities == null) {
			canPushEntities = false;
		}
		canPushEntities = canPushEntities || this.canPushEntities;
		canPushBorders = canPushBorders || this.canPushBorders;
		res.pushedEntities.h[this.id] = true;
		this.x--;
		if(entities_Solid.entityCollides(this,-1,0)) {
			res.fail();
			return;
		}
		var _g = 0;
		var _g1 = entities_Entity.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.collisionEnabled || e == this || (this.x + this.hitbox.xMin >= e.x + e.hitbox.xMax || this.x + this.hitbox.xMax <= e.x + e.hitbox.xMin || this.y + this.hitbox.yMin >= e.y + e.hitbox.yMax || this.y + this.hitbox.yMax <= e.y + e.hitbox.yMin) || res.pushedEntities.h.hasOwnProperty(e.id)) {
				continue;
			}
			if(canPushEntities) {
				res.triedPushingHorizontal = true;
				e.tryStepLeft(res,canPushEntities,canPushBorders);
				if(!res.success) {
					return;
				}
			} else {
				res.fail();
				return;
			}
		}
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.borderId != -1 && this.borderId != b.id) {
				continue;
			}
			if(res.pushedBorders.h.hasOwnProperty(b.id) || !(this.x + this.hitbox.xMin < b.bounds.xMin && this.x + this.hitbox.xMax > b.bounds.xMin && b.wallIntersectsSegment(b.wallLeft,this.y + this.hitbox.yMin - b.bounds.yMin,this.y + this.hitbox.yMax - b.bounds.yMin) || this.x + this.hitbox.xMin < b.bounds.xMax && this.x + this.hitbox.xMax > b.bounds.xMax && b.wallIntersectsSegment(b.wallRight,this.y + this.hitbox.yMin - b.bounds.yMin,this.y + this.hitbox.yMax - b.bounds.yMin))) {
				continue;
			}
			if(canPushBorders) {
				b.canStepLeft(res);
				if(!res.success) {
					return;
				}
			} else {
				res.fail();
				return;
			}
		}
	}
	,tryStepRight: function(res,canPushEntities,canPushBorders) {
		if(canPushBorders == null) {
			canPushBorders = false;
		}
		if(canPushEntities == null) {
			canPushEntities = false;
		}
		canPushEntities = canPushEntities || this.canPushEntities;
		canPushBorders = canPushBorders || this.canPushBorders;
		res.pushedEntities.h[this.id] = true;
		this.x++;
		if(entities_Solid.entityCollides(this,1,0)) {
			res.fail();
			return;
		}
		var _g = 0;
		var _g1 = entities_Entity.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.collisionEnabled || e == this || (this.x + this.hitbox.xMin >= e.x + e.hitbox.xMax || this.x + this.hitbox.xMax <= e.x + e.hitbox.xMin || this.y + this.hitbox.yMin >= e.y + e.hitbox.yMax || this.y + this.hitbox.yMax <= e.y + e.hitbox.yMin) || res.pushedEntities.h.hasOwnProperty(e.id)) {
				continue;
			}
			if(canPushEntities) {
				res.triedPushingHorizontal = true;
				e.tryStepRight(res,canPushEntities,canPushBorders);
				if(!res.success) {
					return;
				}
			} else {
				res.fail();
				return;
			}
		}
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.borderId != -1 && this.borderId != b.id) {
				continue;
			}
			if(res.pushedBorders.h.hasOwnProperty(b.id) || !(this.x + this.hitbox.xMin < b.bounds.xMin && this.x + this.hitbox.xMax > b.bounds.xMin && b.wallIntersectsSegment(b.wallLeft,this.y + this.hitbox.yMin - b.bounds.yMin,this.y + this.hitbox.yMax - b.bounds.yMin) || this.x + this.hitbox.xMin < b.bounds.xMax && this.x + this.hitbox.xMax > b.bounds.xMax && b.wallIntersectsSegment(b.wallRight,this.y + this.hitbox.yMin - b.bounds.yMin,this.y + this.hitbox.yMax - b.bounds.yMin))) {
				continue;
			}
			if(canPushBorders) {
				b.canStepRight(res);
				if(!res.success) {
					return;
				}
			} else {
				res.fail();
				return;
			}
		}
	}
	,tryStepUp: function(res,canPushEntities,canPushBorders) {
		if(canPushBorders == null) {
			canPushBorders = false;
		}
		if(canPushEntities == null) {
			canPushEntities = false;
		}
		canPushEntities = canPushEntities || this.canPushEntities;
		canPushBorders = canPushBorders || this.canPushBorders;
		res.pushedEntities.h[this.id] = true;
		this.y--;
		if(entities_Solid.entityCollides(this,0,-1)) {
			res.fail();
			return;
		}
		var _g = 0;
		var _g1 = entities_Entity.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.collisionEnabled || e == this || (this.x + this.hitbox.xMin >= e.x + e.hitbox.xMax || this.x + this.hitbox.xMax <= e.x + e.hitbox.xMin || this.y + this.hitbox.yMin >= e.y + e.hitbox.yMax || this.y + this.hitbox.yMax <= e.y + e.hitbox.yMin) || res.pushedEntities.h.hasOwnProperty(e.id)) {
				continue;
			}
			if(canPushEntities) {
				e.tryStepUp(res,canPushEntities,canPushBorders);
				if(!res.success) {
					return;
				}
			} else {
				res.fail();
				return;
			}
		}
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.borderId != -1 && this.borderId != b.id) {
				continue;
			}
			if(res.pushedBorders.h.hasOwnProperty(b.id) || !(this.y + this.hitbox.yMin < b.bounds.yMin && this.y + this.hitbox.yMax > b.bounds.yMin && b.wallIntersectsSegment(b.wallUp,this.x + this.hitbox.xMin - b.bounds.xMin,this.x + this.hitbox.xMax - b.bounds.xMin) || this.y + this.hitbox.yMin < b.bounds.yMax && this.y + this.hitbox.yMax > b.bounds.yMax && b.wallIntersectsSegment(b.wallDown,this.x + this.hitbox.xMin - b.bounds.xMin,this.x + this.hitbox.xMax - b.bounds.xMin))) {
				continue;
			}
			if(canPushBorders) {
				b.canStepUp(res);
				if(!res.success) {
					return;
				}
			} else {
				res.fail();
				return;
			}
		}
	}
	,tryStepDown: function(res,canPushEntities,canPushBorders) {
		if(canPushBorders == null) {
			canPushBorders = false;
		}
		if(canPushEntities == null) {
			canPushEntities = false;
		}
		canPushEntities = canPushEntities || this.canPushEntities;
		canPushBorders = canPushBorders || this.canPushBorders;
		res.pushedEntities.h[this.id] = true;
		this.y++;
		if(entities_Solid.entityCollides(this,0,1)) {
			res.fail();
			return;
		}
		var _g = 0;
		var _g1 = entities_Entity.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.collisionEnabled || e == this || (this.x + this.hitbox.xMin >= e.x + e.hitbox.xMax || this.x + this.hitbox.xMax <= e.x + e.hitbox.xMin || this.y + this.hitbox.yMin >= e.y + e.hitbox.yMax || this.y + this.hitbox.yMax <= e.y + e.hitbox.yMin) || res.pushedEntities.h.hasOwnProperty(e.id)) {
				continue;
			}
			if(canPushEntities) {
				e.tryStepDown(res,canPushEntities,canPushBorders);
				if(!res.success) {
					return;
				}
			} else {
				res.fail();
				return;
			}
		}
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.borderId != -1 && this.borderId != b.id) {
				continue;
			}
			if(res.pushedBorders.h.hasOwnProperty(b.id) || !(this.y + this.hitbox.yMin < b.bounds.yMin && this.y + this.hitbox.yMax > b.bounds.yMin && b.wallIntersectsSegment(b.wallUp,this.x + this.hitbox.xMin - b.bounds.xMin,this.x + this.hitbox.xMax - b.bounds.xMin) || this.y + this.hitbox.yMin < b.bounds.yMax && this.y + this.hitbox.yMax > b.bounds.yMax && b.wallIntersectsSegment(b.wallDown,this.x + this.hitbox.xMin - b.bounds.xMin,this.x + this.hitbox.xMax - b.bounds.xMin))) {
				continue;
			}
			if(canPushBorders) {
				b.canStepDown(res);
				if(!res.success) {
					return;
				}
			} else {
				res.fail();
				return;
			}
		}
	}
	,collides: function(other) {
		return !(this.x + this.hitbox.xMin >= other.x + other.hitbox.xMax || this.x + this.hitbox.xMax <= other.x + other.hitbox.xMin || this.y + this.hitbox.yMin >= other.y + other.hitbox.yMax || this.y + this.hitbox.yMax <= other.y + other.hitbox.yMin);
	}
	,getBorderId: function() {
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.x + this.hitbox.xMin >= b.bounds.xMin && this.x + this.hitbox.xMax <= b.bounds.xMax && this.y + this.hitbox.yMin >= b.bounds.yMin && this.y + this.hitbox.yMax <= b.bounds.yMax) {
				return b.id;
			}
		}
		return -1;
	}
	,debug: function() {
		haxe_Log.trace("Entity " + Std.string(this) + " " + this.id + " at (" + (this.x + this.hitbox.xMin) + ", " + (this.y + this.hitbox.yMin) + ") to (" + (this.x + this.hitbox.xMax) + ", " + (this.y + this.hitbox.yMax) + ")",{ fileName : "src/entities/Entity.hx", lineNumber : 406, className : "entities.Entity", methodName : "debug"});
	}
	,updateBorderConstraint: function() {
		var x0 = this.x + this.hitbox.xMin;
		var y0 = this.y + this.hitbox.yMin;
		var _this = this.hitbox;
		var width = _this.xMax - _this.xMin;
		var _this = this.hitbox;
		var height = _this.yMax - _this.yMin;
		var b = new h2d_col_IBounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		var bounds = b;
		var totalArea = (bounds.xMax - bounds.xMin) * (bounds.yMax - bounds.yMin);
		var coveredArea = 0;
		var largestInterArea = 0;
		var largestInterBorder = null;
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var _this = b.bounds;
			if(_this.xMin > bounds.xMax || _this.yMin > bounds.yMax || _this.xMax < bounds.xMin || _this.yMax < bounds.yMin) {
				continue;
			}
			var inter = b.bounds.intersection(bounds);
			var area = (inter.xMax - inter.xMin) * (inter.yMax - inter.yMin);
			coveredArea += area;
			if(area > largestInterArea) {
				largestInterArea = area;
				largestInterBorder = b;
			}
		}
		this.isInside = coveredArea == totalArea;
		if(coveredArea == 0 || coveredArea == totalArea) {
			return;
		}
		if(this.x + this.hitbox.xMin < largestInterBorder.bounds.xMin) {
			this.x = largestInterBorder.bounds.xMin - this.hitbox.xMin;
		} else if(this.x + this.hitbox.xMax > largestInterBorder.bounds.xMax) {
			this.x = largestInterBorder.bounds.xMax - this.hitbox.xMax;
		}
		if(this.y + this.hitbox.yMin < largestInterBorder.bounds.yMin) {
			this.y = largestInterBorder.bounds.yMin - this.hitbox.yMin;
		} else if(this.y + this.hitbox.yMax > largestInterBorder.bounds.yMax) {
			this.y = largestInterBorder.bounds.yMax - this.hitbox.yMax;
		}
		this.onBorderConstraintFixed();
	}
	,onBorderConstraintFixed: function() {
	}
	,setHitbox: function(box) {
		this.collisionEnabled = true;
		this.hitbox = box;
		var _g = 0;
		var _g1 = entities_Border.all;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.x + this.hitbox.xMin >= b.bounds.xMin && this.x + this.hitbox.xMax <= b.bounds.xMax && this.y + this.hitbox.yMin >= b.bounds.yMin && this.y + this.hitbox.yMax <= b.bounds.yMax) {
				this.isInside = true;
				break;
			}
		}
	}
	,toString: function() {
		return "Entity " + this.id + " at (" + (this.x + this.hitbox.xMin) + ", " + (this.y + this.hitbox.yMin) + ") to (" + (this.x + this.hitbox.xMax) + ", " + (this.y + this.hitbox.yMax) + ")";
	}
	,__class__: entities_Entity
};
var entities_Box = function(x,y,width,height) {
	entities_Entity.call(this);
	this.grid = new h2d_ScaleGrid(Assets.getTile("entities","boxInside"),6,6,6,6);
	this.grid.set_width(width);
	this.grid.set_height(height);
	Game.inst.world.add(this.grid,Game.LAYER_ENTITIES);
	this.x = x;
	this.y = y;
	this.updateGraphics();
	this.collisionEnabled = true;
	var b = new h2d_col_IBounds();
	b.xMin = 0;
	b.yMin = 0;
	b.xMax = width;
	b.yMax = height;
	this.setHitbox(this.hitbox = b);
	this.updateBorderConstraint();
	this.grid.tile = Assets.getTile("entities","box" + (this.isInside ? "Inside" : "Outside"));
};
$hxClasses["entities.Box"] = entities_Box;
entities_Box.__name__ = "entities.Box";
entities_Box.__super__ = entities_Entity;
entities_Box.prototype = $extend(entities_Entity.prototype,{
	'delete': function() {
		entities_Entity.prototype.delete.call(this);
		var _this = this.grid;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,updateBeforeMove: function(dt) {
		this.vy = 180 + (this.vy - 180) * Math.pow(0.00400000000000000355,dt);
		entities_Entity.prototype.updateBeforeMove.call(this,dt);
	}
	,updateAfterMove: function(dt) {
		entities_Entity.prototype.updateAfterMove.call(this,dt);
		this.updateGraphics();
	}
	,updateGraphics: function() {
		var _this = this.grid;
		_this.posChanged = true;
		_this.x = this.x;
		var _this = this.grid;
		_this.posChanged = true;
		_this.y = this.y;
	}
	,onBorderConstraintFixed: function() {
		this.die(0,0);
	}
	,toString: function() {
		return "Box " + this.id + " at (" + (this.x + this.hitbox.xMin) + ", " + (this.y + this.hitbox.yMin) + ") to (" + (this.x + this.hitbox.xMax) + ", " + (this.y + this.hitbox.yMax) + ")";
	}
	,__class__: entities_Box
});
var entities_Gem = function(group,px,py) {
	this.timer = 0.;
	this.shineTimer = 0.;
	this.x = px;
	this.y = py;
	var animData = Assets.getAnimData("entities","gem" + group);
	this.anim = new Anim(animData.tiles,animData.fps,true);
	this.anim.loops = false;
	Game.inst.world.add(this.anim,Game.LAYER_GEM);
	var _this = this.anim;
	_this.posChanged = true;
	_this.x = px;
	var _this = this.anim;
	_this.posChanged = true;
	_this.y = py;
	entities_Gem.all.push(this);
	this.anim.set_filter(new h2d_filter_Glow(16777215,1.,10.,.5,1.,true));
};
$hxClasses["entities.Gem"] = entities_Gem;
entities_Gem.__name__ = "entities.Gem";
entities_Gem.updateAll = function(dt) {
	var _g = 0;
	var _g1 = entities_Gem.all;
	while(_g < _g1.length) {
		var gem = _g1[_g];
		++_g;
		gem.update(dt);
	}
};
entities_Gem.deleteAll = function() {
	var _g = 0;
	var _g1 = entities_Gem.all;
	while(_g < _g1.length) {
		var gem = _g1[_g];
		++_g;
		gem.delete();
	}
	entities_Gem.all = [];
};
entities_Gem.prototype = {
	'delete': function() {
		var _this = this.anim;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,update: function(dt) {
		var pt = this.shineTimer;
		this.shineTimer += dt;
		if(this.shineTimer > 1.5 && pt < 1.5 || this.shineTimer > 1.8 && pt < 1.8) {
			this.anim.playCurrent();
		} else if(this.shineTimer > 1.8) {
			this.shineTimer = 0.;
		}
		this.timer += dt;
		var _this = this.anim;
		_this.posChanged = true;
		_this.x = this.x;
		var _this = this.anim;
		var v = this.y + Math.sin(this.timer * 2.) * 2.;
		_this.posChanged = true;
		_this.y = v;
		this.anim.update(dt);
	}
	,collides: function(e) {
		var radius = 6;
		if(e.x + e.hitbox.xMax > this.x - radius && e.x + e.hitbox.xMin < this.x + radius && e.y + e.hitbox.yMax > this.y - radius) {
			return e.y + e.hitbox.yMin < this.y + radius;
		} else {
			return false;
		}
	}
	,__class__: entities_Gem
};
var entities_Facing = $hxEnums["entities.Facing"] = { __ename__:"entities.Facing",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"entities.Facing",toString:$estr}
	,Up: {_hx_name:"Up",_hx_index:1,__enum__:"entities.Facing",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:2,__enum__:"entities.Facing",toString:$estr}
	,Down: {_hx_name:"Down",_hx_index:3,__enum__:"entities.Facing",toString:$estr}
	,Left: {_hx_name:"Left",_hx_index:4,__enum__:"entities.Facing",toString:$estr}
};
entities_Facing.__constructs__ = [entities_Facing.None,entities_Facing.Up,entities_Facing.Right,entities_Facing.Down,entities_Facing.Left];
entities_Facing.__empty_constructs__ = [entities_Facing.None,entities_Facing.Up,entities_Facing.Right,entities_Facing.Down,entities_Facing.Left];
var entities_Hero = function() {
	this.isSlidingPhysics = false;
	this.isSlidingAnim = false;
	this.hasWallRight = false;
	this.hasWallLeft = false;
	this.isOnGround = false;
	this.eyeOffsetY = 0;
	this.eyeOffsetX = 0;
	entities_Entity.call(this);
	this.anim = new Anim(Assets.getAnimData("entities","heroRun").tiles,20,true);
	Game.inst.world.add(this.anim,Game.LAYER_HERO);
	this.collisionEnabled = this.canPushBorders = this.canPushEntities = true;
	var b = new h2d_col_IBounds();
	b.xMin = 0;
	b.yMin = 0;
	b.xMax = 8;
	b.yMax = 16;
	this.setHitbox(b);
};
$hxClasses["entities.Hero"] = entities_Hero;
entities_Hero.__name__ = "entities.Hero";
entities_Hero.__super__ = entities_Entity;
entities_Hero.prototype = $extend(entities_Entity.prototype,{
	spawn: function() {
		this.x = Game.inst.level.heroSpawnX;
		this.y = Game.inst.level.heroSpawnY;
		this.vx = this.vy = 0.;
		this.groundTimer = this.wallLeftTimer = this.wallRightTimer = 0.;
		this.jumpBufferTimer = 1.15;
		this.wallJumpTimer = 1.3;
		this.faceLeftTimer = this.faceRightTimer = 1.1;
		this.prevFacing = entities_Facing.None;
		this.updateGraphics();
	}
	,'delete': function() {
		var _this = this.anim;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		entities_Entity.prototype.delete.call(this);
	}
	,updateBeforeMove: function(dt) {
		var controller = Main.inst.controller;
		var touchInput = Game.inst.touchInput;
		var mouseInput = Game.inst.mouseInput;
		var ca = Math.atan2(controller.getAnalogValue(1),controller.getAnalogValue(0));
		var cd = controller.getAnalogDistXY(0,1);
		this.faceLeftTimer += dt;
		this.faceRightTimer += dt;
		this.facing = entities_Facing.None;
		if(cd > .5) {
			var x = ca + Math.PI * .5;
			if((x < 0 ? -x : x) <= Math.PI * .25) {
				this.facing = entities_Facing.Up;
			} else if((ca < 0 ? -ca : ca) <= Math.PI * .25) {
				this.facing = entities_Facing.Right;
			} else {
				var x = ca - Math.PI * .5;
				if((x < 0 ? -x : x) <= Math.PI * .25) {
					this.facing = entities_Facing.Down;
				} else {
					this.facing = entities_Facing.Left;
				}
			}
			Game.inst.onPlayerMoved();
		}
		if(touchInput.isLeftDown != touchInput.isRightDown) {
			this.facing = touchInput.isLeftDown ? entities_Facing.Left : entities_Facing.Right;
			Game.inst.onPlayerMoved();
		} else if(mouseInput.isLeftDown != mouseInput.isRightDown) {
			this.facing = mouseInput.isLeftDown ? entities_Facing.Left : entities_Facing.Right;
			Game.inst.onPlayerMoved();
		}
		if(this.facing == entities_Facing.Right) {
			var _this = this.anim;
			_this.posChanged = true;
			_this.scaleX = 1;
			this.faceRightTimer = 0;
		} else if(this.facing == entities_Facing.Left) {
			var _this = this.anim;
			_this.posChanged = true;
			_this.scaleX = -1;
			this.faceLeftTimer = 0;
		}
		var fastFall = this.facing == entities_Facing.Down;
		this.isSlidingAnim = !fastFall && (this.facing == entities_Facing.Left && this.hasWallLeft || this.facing == entities_Facing.Right && this.hasWallRight);
		this.isSlidingPhysics = this.isSlidingAnim && this.vy > 0;
		this.wallJumpTimer += dt;
		var wallJumping = this.wallJumpTimer <= .3;
		if(wallJumping) {
			var t = this.wallJumpTimer / .3;
			var moveAcc = (1 - t) * .9 + t;
			var frictionX = (1 - t) * .997 + t * (this.isOnGround ? 1. : .999);
			if(this.facing == entities_Facing.Left) {
				this.vx = -75. + (this.vx - (-75.)) * Math.pow(1. - moveAcc,dt);
			} else if(this.facing == entities_Facing.Right) {
				this.vx = 75. + (this.vx - 75.) * Math.pow(1. - moveAcc,dt);
			} else {
				this.vx *= Math.pow(1. - frictionX,dt);
			}
		} else if(this.facing == entities_Facing.Left) {
			this.vx = -75.;
		} else if(this.facing == entities_Facing.Right) {
			this.vx = 75.;
		} else {
			this.vx = this.isOnGround || fastFall ? 0 : this.vx * Math.pow(0.00100000000000000089,dt);
		}
		if(this.isOnGround) {
			this.groundTimer = 0.;
		} else {
			this.groundTimer += dt;
			this.jumpBufferTimer += dt;
		}
		if(this.hasWallLeft) {
			this.wallLeftTimer = 0.;
		} else {
			this.wallLeftTimer += dt;
		}
		if(this.hasWallRight) {
			this.wallRightTimer = 0.;
		} else {
			this.wallRightTimer += dt;
		}
		var jumpDown = controller.isDown(2) || touchInput.isJumpDown || mouseInput.isJumpDown;
		var jumpPressed = controller.isPressed(2) || touchInput.isJumpPressed() || mouseInput.isJumpPressed();
		var jumpReleased = controller.isReleased(2) || touchInput.isJumpReleased() || mouseInput.isJumpReleased();
		var jumping = this.vy < 0 && jumpDown;
		if(this.vy < 0 && jumpReleased) {
			this.vy *= .5;
		}
		var jumped = false;
		if(jumpPressed) {
			if(this.jump()) {
				jumped = true;
			} else {
				this.jumpBufferTimer = 0.;
			}
		} else if(this.isOnGround && jumpDown && this.jumpBufferTimer <= .15) {
			jumped = this.jump();
		}
		if(!jumped && !this.isOnGround) {
			if(jumpPressed || jumpDown && this.jumpBufferTimer <= .15) {
				if(this.wallLeftTimer < this.wallRightTimer) {
					if(this.faceLeftTimer <= .1 && (this.hasWallLeft || this.vy > 0 && this.wallLeftTimer < .1)) {
						this.wallJump(1);
					}
				} else if(this.faceRightTimer <= .1 && (this.hasWallRight || this.vy > 0 && this.wallRightTimer < .1)) {
					this.wallJump(-1);
				}
			}
		}
		var to = fastFall ? 300 : this.isSlidingPhysics ? 90 : 180;
		this.vy = to + (this.vy - to) * Math.pow(1. - (fastFall ? .9993 : jumping ? .93 : .996),dt);
		if(this.isSlidingPhysics) {
			this.vy *= Math.pow(0.0100000000000000089,dt);
		}
		entities_Entity.prototype.updateBeforeMove.call(this,dt);
	}
	,updateAfterMove: function(dt) {
		entities_Entity.prototype.updateAfterMove.call(this,dt);
		var res = entities_StepResult.newDown();
		this.tryStepDown(res);
		this.isOnGround = !res.success;
		res.moveBack();
		res = entities_StepResult.newLeft();
		this.tryStepLeft(res);
		this.hasWallLeft = !res.success;
		res.moveBack();
		res = entities_StepResult.newRight();
		this.tryStepRight(res);
		this.hasWallRight = !res.success;
		res.moveBack();
		var _g = 0;
		var _g1 = entities_Gem.all;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.collides(this)) {
				audio_Audio.playSound("gem");
				Game.inst.levelComplete();
			}
		}
		var dir = Game.inst.level.entityTouchesDeath(this);
		var len = dir.dx * dir.dx + dir.dy * dir.dy;
		if(len > 0) {
			len = Math.sqrt(len);
			this.die(dir.dx / len,dir.dy / len);
		}
		var newAnimName = "idle";
		var newFrame = 0.;
		if(!this.isOnGround) {
			if(this.isSlidingAnim) {
				newAnimName = "wallSlide";
			} else if(this.facing == entities_Facing.Left || this.facing == entities_Facing.Right) {
				newAnimName = "jumpSide";
			} else {
				newAnimName = "jumpNeutral";
			}
		} else if(this.facing == entities_Facing.None || this.facing == entities_Facing.Up || this.facing == entities_Facing.Down) {
			newAnimName = this.curAnimName == "jumpSide" || this.curAnimName == "jumpNeutral" || this.curAnimName == "land" ? "land" : "idle";
		} else if(this.triedPushingHorizontal) {
			newAnimName = "runPush";
			newFrame = this.anim.curFrame;
		} else {
			newAnimName = "run";
			newFrame = this.anim.curFrame;
		}
		if(newAnimName != this.curAnimName) {
			this.curAnimName = newAnimName;
			var fullAnimName = "hero" + this.curAnimName.toUpperCase().charAt(0) + HxOverrides.substr(this.curAnimName,1,null);
			var data = Assets.getAnimData("entities",fullAnimName);
			this.anim.play(data.tiles,newFrame);
			this.anim.speed = data.fps;
			this.anim.loops = true;
		}
		if(this.curAnimName == "jumpSide") {
			var x = this.anim.frames.length / 2 + this.vy / 50;
			var maxi = this.anim.frames.length - 1;
			this.anim.set_currentFrame(x < 0 ? 0 : x > maxi ? maxi : x);
		} else if(this.curAnimName == "jumpNeutral") {
			var frame = (this.vy - (-290.)) / 470. * this.anim.frames.length;
			var maxi = this.anim.frames.length - 1;
			this.anim.set_currentFrame(frame < 0 ? 0 : frame > maxi ? maxi : frame);
		} else if(this.curAnimName == "land") {
			this.anim.loops = false;
		}
		var curFrame = this.anim.curFrame | 0;
		this.anim.update(dt);
		var newFrame = this.anim.curFrame | 0;
		if(this.curAnimName == "run" || this.curAnimName == "runPush") {
			if(newFrame != curFrame && (newFrame == 3 || newFrame == 9)) {
				var x = this.anim.scaleX;
				Game.inst.fx.footStep(this.anim.x - 2 * this.anim.scaleX,this.anim.y - 1,x < 0 ? -1 : x > 0 ? 1 : 0,newFrame == 3);
				audio_Audio.playSound(newFrame == 3 ? "stepFront" : "stepBack");
			}
		}
		this.updateGraphics();
	}
	,die: function(dx,dy) {
		entities_Entity.prototype.die.call(this,dx,dy);
		Game.inst.onDeath(dx,dy);
		Game.inst.fx.die(dx,dy);
		audio_Audio.playSound("death",false,.5);
	}
	,jump: function() {
		if(this.groundTimer > .1) {
			return false;
		}
		this.groundTimer = 1.1;
		this.jumpBufferTimer = 1.15;
		this.vy = -290.;
		audio_Audio.playSound("jump",false,.3);
		var dx = this.facing == entities_Facing.Left ? -1 : this.facing == entities_Facing.Right ? 1 : 0;
		Game.inst.fx.jump(this.anim.x - 4 * dx,this.anim.y,dx);
		return true;
	}
	,wallJump: function(dx) {
		this.vx = 170. * dx;
		this.vy = -250.;
		this.jumpBufferTimer = 1.15;
		this.wallJumpTimer = 0.;
		audio_Audio.playSound("wallJump",false,.3);
		var _this = this.anim.frames[0];
		Game.inst.fx.wallJump(this.anim.x - dx * (Math.ceil(_this.width + _this.x) - Math.floor(_this.x)) * .5,this.anim.y - 4,dx);
		return true;
	}
	,updateGraphics: function() {
		var _this = this.anim;
		_this.posChanged = true;
		_this.x = this.x + (this.hitbox.xMin + this.hitbox.xMax) * .5;
		var _this = this.anim;
		_this.posChanged = true;
		_this.y = this.y + this.hitbox.yMax;
	}
	,toString: function() {
		return "Hero at (" + (this.x + this.hitbox.xMin) + ", " + (this.y + this.hitbox.yMin) + ") to (" + (this.x + this.hitbox.xMax) + ", " + (this.y + this.hitbox.yMax) + ")";
	}
	,__class__: entities_Hero
});
var entities_Solid = function(x,y,width,height,collisionType) {
	var b = new h2d_col_IBounds();
	b.xMin = x;
	b.yMin = y;
	b.xMax = x + width;
	b.yMax = y + height;
	this.bounds = b;
	this.collisionType = collisionType;
	entities_Solid.all.push(this);
	this.g = new h2d_Graphics();
	Game.inst.world.add(this.g,Game.LAYER_DEBUG);
	this.g.beginFill(Std.random(16777216),.5);
	this.g.endFill();
};
$hxClasses["entities.Solid"] = entities_Solid;
entities_Solid.__name__ = "entities.Solid";
entities_Solid.deleteAll = function() {
	var _g = 0;
	var _g1 = entities_Solid.all;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		s.delete();
	}
	entities_Solid.all = [];
};
entities_Solid.pointCollides = function(x,y,dx,dy) {
	var _g = 0;
	var _g1 = entities_Solid.all;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(s.collisionType == assets_Enum_$Collision.Full) {
			if(x > s.bounds.xMin && x < s.bounds.xMax && y > s.bounds.yMin && y < s.bounds.yMax) {
				return true;
			}
		} else if(s.collisionType == assets_Enum_$Collision.PlatformLeft && dx < 0) {
			if(s.bounds.yMin < y && s.bounds.yMax > y && x == s.bounds.xMax - 1) {
				return true;
			}
		} else if(s.collisionType == assets_Enum_$Collision.PlatformRight && dx > 0) {
			if(s.bounds.yMin < y && s.bounds.yMax > y && x == s.bounds.xMin + 1) {
				return true;
			}
		} else if(s.collisionType == assets_Enum_$Collision.PlatformUp && dy < 0) {
			if(s.bounds.xMin < x && s.bounds.xMax > x && y == s.bounds.yMax - 1) {
				return true;
			}
		} else if(s.collisionType == assets_Enum_$Collision.PlatformDown && dy > 0) {
			if(s.bounds.xMin < x && s.bounds.xMax > x && y == s.bounds.yMin + 1) {
				return true;
			}
		}
	}
	return false;
};
entities_Solid.entityCollides = function(entity,dx,dy) {
	return entities_Solid.entityCollidesAt(entity,entity.x,entity.y,dx,dy);
};
entities_Solid.entityCollidesAt = function(entity,x,y,dx,dy) {
	var _g = 0;
	var _g1 = entities_Solid.all;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		if(s.collisionType == assets_Enum_$Collision.Full) {
			if(x + entity.hitbox.xMax > s.bounds.xMin && x + entity.hitbox.xMin < s.bounds.xMax && y + entity.hitbox.yMax > s.bounds.yMin && y + entity.hitbox.yMin < s.bounds.yMax) {
				return true;
			}
		} else if(s.collisionType == assets_Enum_$Collision.PlatformLeft && dx < 0) {
			if(s.bounds.yMin < y + entity.hitbox.yMax && s.bounds.yMax > y + entity.hitbox.yMin && x + entity.hitbox.xMin == s.bounds.xMax - 1) {
				return true;
			}
		} else if(s.collisionType == assets_Enum_$Collision.PlatformRight && dx > 0) {
			if(s.bounds.yMin < y + entity.hitbox.yMax && s.bounds.yMax > y + entity.hitbox.yMin && x + entity.hitbox.xMax == s.bounds.xMin + 1) {
				return true;
			}
		} else if(s.collisionType == assets_Enum_$Collision.PlatformUp && dy < 0) {
			if(s.bounds.xMin < x + entity.hitbox.xMax && s.bounds.xMax > x + entity.hitbox.xMin && y + entity.hitbox.yMin == s.bounds.yMax - 1) {
				return true;
			}
		} else if(s.collisionType == assets_Enum_$Collision.PlatformDown && dy > 0) {
			if(s.bounds.xMin < x + entity.hitbox.xMax && s.bounds.xMax > x + entity.hitbox.xMin && y + entity.hitbox.yMax == s.bounds.yMin + 1) {
				return true;
			}
		}
	}
	return false;
};
entities_Solid.prototype = {
	'delete': function() {
		HxOverrides.remove(entities_Solid.all,this);
		var _this = this.g;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,__class__: entities_Solid
};
var entities_StepResult = function(dx,dy) {
	this.pushedBorders = new haxe_ds_IntMap();
	this.pushedEntities = new haxe_ds_IntMap();
	this.triedPushingHorizontal = false;
	this.success = true;
	this.dy = 0;
	this.dx = 0;
	this.dx = dx;
	this.dy = dy;
};
$hxClasses["entities.StepResult"] = entities_StepResult;
entities_StepResult.__name__ = "entities.StepResult";
entities_StepResult.newLeft = function() {
	return new entities_StepResult(-1,0);
};
entities_StepResult.newRight = function() {
	return new entities_StepResult(1,0);
};
entities_StepResult.newUp = function() {
	return new entities_StepResult(0,-1);
};
entities_StepResult.newDown = function() {
	return new entities_StepResult(0,1);
};
entities_StepResult.prototype = {
	apply: function(parent) {
		if(this.dx != 0) {
			parent.triedPushingHorizontal = this.triedPushingHorizontal;
		}
		if(this.success) {
			parent.rx -= this.dx;
			parent.ry -= this.dy;
		} else {
			this.moveBack();
		}
	}
	,fail: function() {
		if(!this.success) {
			return;
		}
		this.success = false;
	}
	,moveBack: function() {
		var id = this.pushedEntities.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			var entity = entities_Entity.idToEntity.h[id1];
			entity.x -= this.dx;
			entity.y -= this.dy;
		}
		var id = this.pushedBorders.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			var border = entities_Border.idToBorder.h[id1];
			var fh = border.bounds;
			var x = fh.xMin - this.dx;
			fh.xMax += x - fh.xMin;
			fh.xMin = x;
			var fh1 = border.bounds;
			var y = fh1.yMin - this.dy;
			fh1.yMax += y - fh1.yMin;
			fh1.yMin = y;
		}
	}
	,toString: function() {
		var str = "";
		if(this.dx < 0) {
			str += "left";
		}
		if(this.dx > 0) {
			str += "right";
		}
		if(this.dy < 0) {
			str += "up";
		}
		if(this.dy > 0) {
			str += "down";
		}
		if(!this.success) {
			str += " (failed)";
		}
		if(this.triedPushingHorizontal) {
			str += " (tried pushing horizontally)";
		}
		if(this.pushedEntities.keys().hasNext()) {
			var id = this.pushedEntities.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				str += " (pushed entity " + id1 + ")";
			}
		}
		if(this.pushedBorders.keys().hasNext()) {
			var id = this.pushedBorders.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				str += " (pushed border " + id1 + ")";
			}
		}
		return str;
	}
	,__class__: entities_StepResult
};
var format_gif_Block = $hxEnums["format.gif.Block"] = { __ename__:"format.gif.Block",__constructs__:null
	,BFrame: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"format.gif.Block",toString:$estr,__params__:function(){ return [this.frame];}}; },$_._hx_name="BFrame",$_)
	,BExtension: ($_=function(extension) { return {_hx_index:1,extension:extension,__enum__:"format.gif.Block",toString:$estr,__params__:function(){ return [this.extension];}}; },$_._hx_name="BExtension",$_)
	,BEOF: {_hx_name:"BEOF",_hx_index:2,__enum__:"format.gif.Block",toString:$estr}
};
format_gif_Block.__constructs__ = [format_gif_Block.BFrame,format_gif_Block.BExtension,format_gif_Block.BEOF];
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxEnums["format.gif.Extension"] = { __ename__:"format.gif.Extension",__constructs__:null
	,EGraphicControl: ($_=function(gce) { return {_hx_index:0,gce:gce,__enum__:"format.gif.Extension",toString:$estr,__params__:function(){ return [this.gce];}}; },$_._hx_name="EGraphicControl",$_)
	,EComment: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"format.gif.Extension",toString:$estr,__params__:function(){ return [this.text];}}; },$_._hx_name="EComment",$_)
	,EText: ($_=function(pte) { return {_hx_index:2,pte:pte,__enum__:"format.gif.Extension",toString:$estr,__params__:function(){ return [this.pte];}}; },$_._hx_name="EText",$_)
	,EApplicationExtension: ($_=function(ext) { return {_hx_index:3,ext:ext,__enum__:"format.gif.Extension",toString:$estr,__params__:function(){ return [this.ext];}}; },$_._hx_name="EApplicationExtension",$_)
	,EUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.gif.Extension",toString:$estr,__params__:function(){ return [this.id,this.data];}}; },$_._hx_name="EUnknown",$_)
};
format_gif_Extension.__constructs__ = [format_gif_Extension.EGraphicControl,format_gif_Extension.EComment,format_gif_Extension.EText,format_gif_Extension.EApplicationExtension,format_gif_Extension.EUnknown];
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxEnums["format.gif.ApplicationExtension"] = { __ename__:"format.gif.ApplicationExtension",__constructs__:null
	,AENetscapeLooping: ($_=function(loops) { return {_hx_index:0,loops:loops,__enum__:"format.gif.ApplicationExtension",toString:$estr,__params__:function(){ return [this.loops];}}; },$_._hx_name="AENetscapeLooping",$_)
	,AEUnknown: ($_=function(name,version,data) { return {_hx_index:1,name:name,version:version,data:data,__enum__:"format.gif.ApplicationExtension",toString:$estr,__params__:function(){ return [this.name,this.version,this.data];}}; },$_._hx_name="AEUnknown",$_)
};
format_gif_ApplicationExtension.__constructs__ = [format_gif_ApplicationExtension.AENetscapeLooping,format_gif_ApplicationExtension.AEUnknown];
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxEnums["format.gif.Version"] = { __ename__:"format.gif.Version",__constructs__:null
	,GIF87a: {_hx_name:"GIF87a",_hx_index:0,__enum__:"format.gif.Version",toString:$estr}
	,GIF89a: {_hx_name:"GIF89a",_hx_index:1,__enum__:"format.gif.Version",toString:$estr}
	,Unknown: ($_=function(version) { return {_hx_index:2,version:version,__enum__:"format.gif.Version",toString:$estr,__params__:function(){ return [this.version];}}; },$_._hx_name="Unknown",$_)
};
format_gif_Version.__constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a,format_gif_Version.Unknown];
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxEnums["format.gif.DisposalMethod"] = { __ename__:"format.gif.DisposalMethod",__constructs__:null
	,UNSPECIFIED: {_hx_name:"UNSPECIFIED",_hx_index:0,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,NO_ACTION: {_hx_name:"NO_ACTION",_hx_index:1,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,FILL_BACKGROUND: {_hx_name:"FILL_BACKGROUND",_hx_index:2,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,RENDER_PREVIOUS: {_hx_name:"RENDER_PREVIOUS",_hx_index:3,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,UNDEFINED: ($_=function(index) { return {_hx_index:4,index:index,__enum__:"format.gif.DisposalMethod",toString:$estr,__params__:function(){ return [this.index];}}; },$_._hx_name="UNDEFINED",$_)
};
format_gif_DisposalMethod.__constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS,format_gif_DisposalMethod.UNDEFINED];
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.gif.Reader"] = format_gif_Reader;
format_gif_Reader.__name__ = "format.gif.Reader";
format_gif_Reader.prototype = {
	read: function() {
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 73;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 70;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new haxe_ds_List();
		while(true) {
			var b = this.readBlock();
			blocks.add(b);
			if(b == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g = 0;
		var _g1 = clearCode;
		while(_g < _g1) {
			var i = _g++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i = 0;
		var code = 0;
		var last;
		while(i < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw haxe_Exception.thrown("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g = 0;
			while(_g < newRecord.length) {
				var item = newRecord[_g];
				++_g;
				pixels.b[i++] = item;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i < pixelsCount) pixels.b[i++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw haxe_Exception.thrown("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw haxe_Exception.thrown("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			switch((packed & 28) >> 2) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw haxe_Exception.thrown("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readBlocks: function() {
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		return bytes;
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
$hxClasses["format.gif.Tools"] = format_gif_Tools;
format_gif_Tools.__name__ = "format.gif.Tools";
format_gif_Tools.framesCount = function(data) {
	var frames = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block._hx_index == 0) {
			++frames;
		}
	}
	return frames;
};
format_gif_Tools.frame = function(data,frameIndex) {
	var counter = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block._hx_index == 0) {
			var frame = block.frame;
			if(counter == frameIndex) {
				return frame;
			}
			++counter;
		}
	}
	return null;
};
format_gif_Tools.graphicControl = function(data,frameIndex) {
	var counter = 0;
	var gce = null;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			if(counter == frameIndex) {
				return gce;
			}
			gce = null;
			++counter;
			break;
		case 1:
			var _gextension = block.extension;
			if(_gextension._hx_index == 0) {
				var g = _gextension.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			if(frameCaret == frameIndex) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(frame.width * frame.height * 4));
				var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
				if(ct == null) {
					throw haxe_Exception.thrown("Frame does not have a color table!");
				}
				var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
				var writeCaret = 0;
				var _g = 0;
				var _g1 = frame.pixels.length;
				while(_g < _g1) {
					var i = _g++;
					var index = frame.pixels.b[i] * 3;
					bytes.b[writeCaret] = ct.b[index + 2];
					bytes.b[writeCaret + 1] = ct.b[index + 1];
					bytes.b[writeCaret + 2] = ct.b[index];
					if(transparentIndex == index) {
						bytes.b[writeCaret + 3] = 0;
					} else {
						bytes.b[writeCaret + 3] = 255;
					}
					writeCaret += 4;
				}
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			if(frameCaret == frameIndex) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(frame.width * frame.height * 4));
				var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
				if(ct == null) {
					throw haxe_Exception.thrown("Frame does not have a color table!");
				}
				var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
				var writeCaret = 0;
				var _g = 0;
				var _g1 = frame.pixels.length;
				while(_g < _g1) {
					var i = _g++;
					var index = frame.pixels.b[i] * 3;
					bytes.b[writeCaret] = ct.b[index];
					bytes.b[writeCaret + 1] = ct.b[index + 1];
					bytes.b[writeCaret + 2] = ct.b[index + 2];
					if(transparentIndex == index) {
						bytes.b[writeCaret + 3] = 0;
					} else {
						bytes.b[writeCaret + 3] = 255;
					}
					writeCaret += 4;
				}
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return null;
};
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.extractFullRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index + 2];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.loopCount = function(data) {
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		if(block._hx_index == 1) {
			var _gextension = block.extension;
			if(_gextension._hx_index == 3) {
				var _gext = _gextension.ext;
				if(_gext._hx_index == 0) {
					var loops = _gext.loops;
					return loops;
				}
			}
		}
	}
	return 1;
};
format_gif_Tools.log2 = function(val) {
	return Math.log(val) / format_gif_Tools.LN2;
};
var format_mp3_SamplingRate = $hxEnums["format.mp3.SamplingRate"] = { __ename__:"format.mp3.SamplingRate",__constructs__:null
	,SR_8000: {_hx_name:"SR_8000",_hx_index:0,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_11025: {_hx_name:"SR_11025",_hx_index:1,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_12000: {_hx_name:"SR_12000",_hx_index:2,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_22050: {_hx_name:"SR_22050",_hx_index:3,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_24000: {_hx_name:"SR_24000",_hx_index:4,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_32000: {_hx_name:"SR_32000",_hx_index:5,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_44100: {_hx_name:"SR_44100",_hx_index:6,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_48000: {_hx_name:"SR_48000",_hx_index:7,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_Bad: {_hx_name:"SR_Bad",_hx_index:8,__enum__:"format.mp3.SamplingRate",toString:$estr}
};
format_mp3_SamplingRate.__constructs__ = [format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_Bad];
format_mp3_SamplingRate.__empty_constructs__ = [format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_Bad];
var format_mp3_Bitrate = $hxEnums["format.mp3.Bitrate"] = { __ename__:"format.mp3.Bitrate",__constructs__:null
	,BR_8: {_hx_name:"BR_8",_hx_index:0,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_16: {_hx_name:"BR_16",_hx_index:1,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_24: {_hx_name:"BR_24",_hx_index:2,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_32: {_hx_name:"BR_32",_hx_index:3,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_40: {_hx_name:"BR_40",_hx_index:4,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_48: {_hx_name:"BR_48",_hx_index:5,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_56: {_hx_name:"BR_56",_hx_index:6,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_64: {_hx_name:"BR_64",_hx_index:7,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_80: {_hx_name:"BR_80",_hx_index:8,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_96: {_hx_name:"BR_96",_hx_index:9,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_112: {_hx_name:"BR_112",_hx_index:10,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_128: {_hx_name:"BR_128",_hx_index:11,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_144: {_hx_name:"BR_144",_hx_index:12,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_160: {_hx_name:"BR_160",_hx_index:13,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_176: {_hx_name:"BR_176",_hx_index:14,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_192: {_hx_name:"BR_192",_hx_index:15,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_224: {_hx_name:"BR_224",_hx_index:16,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_256: {_hx_name:"BR_256",_hx_index:17,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_288: {_hx_name:"BR_288",_hx_index:18,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_320: {_hx_name:"BR_320",_hx_index:19,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_352: {_hx_name:"BR_352",_hx_index:20,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_384: {_hx_name:"BR_384",_hx_index:21,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_416: {_hx_name:"BR_416",_hx_index:22,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_448: {_hx_name:"BR_448",_hx_index:23,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Free: {_hx_name:"BR_Free",_hx_index:24,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Bad: {_hx_name:"BR_Bad",_hx_index:25,__enum__:"format.mp3.Bitrate",toString:$estr}
};
format_mp3_Bitrate.__constructs__ = [format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_Bad];
format_mp3_Bitrate.__empty_constructs__ = [format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_Bad];
var format_mp3_MPEG = function() { };
$hxClasses["format.mp3.MPEG"] = format_mp3_MPEG;
format_mp3_MPEG.__name__ = "format.mp3.MPEG";
format_mp3_MPEG.enum2Num = function(m) {
	switch(m._hx_index) {
	case 0:
		return 3;
	case 1:
		return 2;
	case 2:
		return 0;
	case 3:
		return format_mp3_MPEG.Reserved;
	}
};
format_mp3_MPEG.num2Enum = function(m) {
	switch(m) {
	case 0:
		return format_mp3_MPEGVersion.MPEG_V25;
	case 2:
		return format_mp3_MPEGVersion.MPEG_V2;
	case 3:
		return format_mp3_MPEGVersion.MPEG_V1;
	default:
		return format_mp3_MPEGVersion.MPEG_Reserved;
	}
};
format_mp3_MPEG.srNum2Enum = function(sr) {
	switch(sr) {
	case 8000:
		return format_mp3_SamplingRate.SR_8000;
	case 11025:
		return format_mp3_SamplingRate.SR_11025;
	case 12000:
		return format_mp3_SamplingRate.SR_12000;
	case 22050:
		return format_mp3_SamplingRate.SR_22050;
	case 24000:
		return format_mp3_SamplingRate.SR_24000;
	case 32000:
		return format_mp3_SamplingRate.SR_32000;
	case 44100:
		return format_mp3_SamplingRate.SR_44100;
	case 48000:
		return format_mp3_SamplingRate.SR_48000;
	default:
		return format_mp3_SamplingRate.SR_Bad;
	}
};
format_mp3_MPEG.srEnum2Num = function(sr) {
	switch(sr._hx_index) {
	case 0:
		return 8000;
	case 1:
		return 11025;
	case 2:
		return 12000;
	case 3:
		return 22050;
	case 4:
		return 24000;
	case 5:
		return 32000;
	case 6:
		return 44100;
	case 7:
		return 48000;
	case 8:
		return -1;
	}
};
format_mp3_MPEG.getBitrateIdx = function(br,mpeg,layer) {
	var arr = (mpeg == format_mp3_MPEGVersion.MPEG_V1 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[format_mp3_CLayer.enum2Num(layer)];
	if(arr[0] == br) {
		return 0;
	}
	if(arr[1] == br) {
		return 1;
	}
	if(arr[2] == br) {
		return 2;
	}
	if(arr[3] == br) {
		return 3;
	}
	if(arr[4] == br) {
		return 4;
	}
	if(arr[5] == br) {
		return 5;
	}
	if(arr[6] == br) {
		return 6;
	}
	if(arr[7] == br) {
		return 7;
	}
	if(arr[8] == br) {
		return 8;
	}
	if(arr[9] == br) {
		return 9;
	}
	if(arr[10] == br) {
		return 10;
	}
	if(arr[11] == br) {
		return 11;
	}
	if(arr[12] == br) {
		return 12;
	}
	if(arr[13] == br) {
		return 13;
	}
	if(arr[14] == br) {
		return 14;
	}
	if(arr[15] == br) {
		return 15;
	}
	throw haxe_Exception.thrown("Bitrate index not found");
};
format_mp3_MPEG.getSamplingRateIdx = function(sr,mpeg) {
	var arr = format_mp3_MPEG.SamplingRates[format_mp3_MPEG.enum2Num(mpeg)];
	if(arr[0] == sr) {
		return 0;
	}
	if(arr[1] == sr) {
		return 1;
	}
	if(arr[2] == sr) {
		return 2;
	}
	if(arr[3] == sr) {
		return 3;
	}
	throw haxe_Exception.thrown("Sampling rate index not found");
};
format_mp3_MPEG.bitrateEnum2Num = function(br) {
	switch(br._hx_index) {
	case 0:
		return 8;
	case 1:
		return 16;
	case 2:
		return 24;
	case 3:
		return 32;
	case 4:
		return 40;
	case 5:
		return 48;
	case 6:
		return 56;
	case 7:
		return 64;
	case 8:
		return 80;
	case 9:
		return 96;
	case 10:
		return 112;
	case 11:
		return 128;
	case 12:
		return 144;
	case 13:
		return 160;
	case 14:
		return 176;
	case 15:
		return 192;
	case 16:
		return 224;
	case 17:
		return 256;
	case 18:
		return 288;
	case 19:
		return 320;
	case 20:
		return 352;
	case 21:
		return 384;
	case 22:
		return 416;
	case 23:
		return 448;
	case 24:
		return 0;
	case 25:
		return -1;
	}
};
format_mp3_MPEG.bitrateNum2Enum = function(br) {
	switch(br) {
	case 0:
		return format_mp3_Bitrate.BR_Free;
	case 8:
		return format_mp3_Bitrate.BR_8;
	case 16:
		return format_mp3_Bitrate.BR_16;
	case 24:
		return format_mp3_Bitrate.BR_24;
	case 32:
		return format_mp3_Bitrate.BR_32;
	case 40:
		return format_mp3_Bitrate.BR_40;
	case 48:
		return format_mp3_Bitrate.BR_48;
	case 56:
		return format_mp3_Bitrate.BR_56;
	case 64:
		return format_mp3_Bitrate.BR_64;
	case 80:
		return format_mp3_Bitrate.BR_80;
	case 96:
		return format_mp3_Bitrate.BR_96;
	case 112:
		return format_mp3_Bitrate.BR_112;
	case 128:
		return format_mp3_Bitrate.BR_128;
	case 144:
		return format_mp3_Bitrate.BR_144;
	case 160:
		return format_mp3_Bitrate.BR_160;
	case 176:
		return format_mp3_Bitrate.BR_176;
	case 192:
		return format_mp3_Bitrate.BR_192;
	case 224:
		return format_mp3_Bitrate.BR_224;
	case 256:
		return format_mp3_Bitrate.BR_256;
	case 288:
		return format_mp3_Bitrate.BR_288;
	case 320:
		return format_mp3_Bitrate.BR_320;
	case 352:
		return format_mp3_Bitrate.BR_352;
	case 384:
		return format_mp3_Bitrate.BR_384;
	case 416:
		return format_mp3_Bitrate.BR_416;
	case 448:
		return format_mp3_Bitrate.BR_448;
	default:
		return format_mp3_Bitrate.BR_Bad;
	}
};
var format_mp3_CLayer = function() { };
$hxClasses["format.mp3.CLayer"] = format_mp3_CLayer;
format_mp3_CLayer.__name__ = "format.mp3.CLayer";
format_mp3_CLayer.enum2Num = function(l) {
	switch(l._hx_index) {
	case 0:
		return format_mp3_CLayer.LReserved;
	case 1:
		return format_mp3_CLayer.LLayer3;
	case 2:
		return format_mp3_CLayer.LLayer2;
	case 3:
		return format_mp3_CLayer.LLayer1;
	}
};
format_mp3_CLayer.num2Enum = function(l) {
	switch(l) {
	case 1:
		return format_mp3_Layer.Layer3;
	case 2:
		return format_mp3_Layer.Layer2;
	case 3:
		return format_mp3_Layer.Layer1;
	default:
		return format_mp3_Layer.LayerReserved;
	}
};
var format_mp3_CChannelMode = function() { };
$hxClasses["format.mp3.CChannelMode"] = format_mp3_CChannelMode;
format_mp3_CChannelMode.__name__ = "format.mp3.CChannelMode";
format_mp3_CChannelMode.enum2Num = function(c) {
	switch(c._hx_index) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	case 3:
		return 3;
	}
};
format_mp3_CChannelMode.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_ChannelMode.Stereo;
	case 1:
		return format_mp3_ChannelMode.JointStereo;
	case 2:
		return format_mp3_ChannelMode.DualChannel;
	case 3:
		return format_mp3_ChannelMode.Mono;
	default:
		throw haxe_Exception.thrown("assert");
	}
};
var format_mp3_CEmphasis = function() { };
$hxClasses["format.mp3.CEmphasis"] = format_mp3_CEmphasis;
format_mp3_CEmphasis.__name__ = "format.mp3.CEmphasis";
format_mp3_CEmphasis.enum2Num = function(c) {
	switch(c._hx_index) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 3;
	case 3:
		return 2;
	}
};
format_mp3_CEmphasis.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_Emphasis.NoEmphasis;
	case 1:
		return format_mp3_Emphasis.Ms50_15;
	case 2:
		return format_mp3_Emphasis.InvalidEmphasis;
	case 3:
		return format_mp3_Emphasis.CCIT_J17;
	default:
		throw haxe_Exception.thrown("assert");
	}
};
var format_mp3_MPEGVersion = $hxEnums["format.mp3.MPEGVersion"] = { __ename__:"format.mp3.MPEGVersion",__constructs__:null
	,MPEG_V1: {_hx_name:"MPEG_V1",_hx_index:0,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V2: {_hx_name:"MPEG_V2",_hx_index:1,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V25: {_hx_name:"MPEG_V25",_hx_index:2,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_Reserved: {_hx_name:"MPEG_Reserved",_hx_index:3,__enum__:"format.mp3.MPEGVersion",toString:$estr}
};
format_mp3_MPEGVersion.__constructs__ = [format_mp3_MPEGVersion.MPEG_V1,format_mp3_MPEGVersion.MPEG_V2,format_mp3_MPEGVersion.MPEG_V25,format_mp3_MPEGVersion.MPEG_Reserved];
format_mp3_MPEGVersion.__empty_constructs__ = [format_mp3_MPEGVersion.MPEG_V1,format_mp3_MPEGVersion.MPEG_V2,format_mp3_MPEGVersion.MPEG_V25,format_mp3_MPEGVersion.MPEG_Reserved];
var format_mp3_Layer = $hxEnums["format.mp3.Layer"] = { __ename__:"format.mp3.Layer",__constructs__:null
	,LayerReserved: {_hx_name:"LayerReserved",_hx_index:0,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer3: {_hx_name:"Layer3",_hx_index:1,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer2: {_hx_name:"Layer2",_hx_index:2,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer1: {_hx_name:"Layer1",_hx_index:3,__enum__:"format.mp3.Layer",toString:$estr}
};
format_mp3_Layer.__constructs__ = [format_mp3_Layer.LayerReserved,format_mp3_Layer.Layer3,format_mp3_Layer.Layer2,format_mp3_Layer.Layer1];
format_mp3_Layer.__empty_constructs__ = [format_mp3_Layer.LayerReserved,format_mp3_Layer.Layer3,format_mp3_Layer.Layer2,format_mp3_Layer.Layer1];
var format_mp3_ChannelMode = $hxEnums["format.mp3.ChannelMode"] = { __ename__:"format.mp3.ChannelMode",__constructs__:null
	,Stereo: {_hx_name:"Stereo",_hx_index:0,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,JointStereo: {_hx_name:"JointStereo",_hx_index:1,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,DualChannel: {_hx_name:"DualChannel",_hx_index:2,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,Mono: {_hx_name:"Mono",_hx_index:3,__enum__:"format.mp3.ChannelMode",toString:$estr}
};
format_mp3_ChannelMode.__constructs__ = [format_mp3_ChannelMode.Stereo,format_mp3_ChannelMode.JointStereo,format_mp3_ChannelMode.DualChannel,format_mp3_ChannelMode.Mono];
format_mp3_ChannelMode.__empty_constructs__ = [format_mp3_ChannelMode.Stereo,format_mp3_ChannelMode.JointStereo,format_mp3_ChannelMode.DualChannel,format_mp3_ChannelMode.Mono];
var format_mp3_Emphasis = $hxEnums["format.mp3.Emphasis"] = { __ename__:"format.mp3.Emphasis",__constructs__:null
	,NoEmphasis: {_hx_name:"NoEmphasis",_hx_index:0,__enum__:"format.mp3.Emphasis",toString:$estr}
	,Ms50_15: {_hx_name:"Ms50_15",_hx_index:1,__enum__:"format.mp3.Emphasis",toString:$estr}
	,CCIT_J17: {_hx_name:"CCIT_J17",_hx_index:2,__enum__:"format.mp3.Emphasis",toString:$estr}
	,InvalidEmphasis: {_hx_name:"InvalidEmphasis",_hx_index:3,__enum__:"format.mp3.Emphasis",toString:$estr}
};
format_mp3_Emphasis.__constructs__ = [format_mp3_Emphasis.NoEmphasis,format_mp3_Emphasis.Ms50_15,format_mp3_Emphasis.CCIT_J17,format_mp3_Emphasis.InvalidEmphasis];
format_mp3_Emphasis.__empty_constructs__ = [format_mp3_Emphasis.NoEmphasis,format_mp3_Emphasis.Ms50_15,format_mp3_Emphasis.CCIT_J17,format_mp3_Emphasis.InvalidEmphasis];
var format_mp3_FrameType = $hxEnums["format.mp3.FrameType"] = { __ename__:"format.mp3.FrameType",__constructs__:null
	,FT_MP3: {_hx_name:"FT_MP3",_hx_index:0,__enum__:"format.mp3.FrameType",toString:$estr}
	,FT_NONE: {_hx_name:"FT_NONE",_hx_index:1,__enum__:"format.mp3.FrameType",toString:$estr}
};
format_mp3_FrameType.__constructs__ = [format_mp3_FrameType.FT_MP3,format_mp3_FrameType.FT_NONE];
format_mp3_FrameType.__empty_constructs__ = [format_mp3_FrameType.FT_MP3,format_mp3_FrameType.FT_NONE];
var format_mp3_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.bits = new format_tools_BitsInput(i);
	this.samples = 0;
	this.sampleSize = 0;
	this.any_read = false;
};
$hxClasses["format.mp3.Reader"] = format_mp3_Reader;
format_mp3_Reader.__name__ = "format.mp3.Reader";
format_mp3_Reader.prototype = {
	skipID3v2: function() {
		this.id3v2_version = this.i.readUInt16();
		this.id3v2_flags = this.i.readByte();
		var size = this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		this.id3v2_data = this.i.read(size);
	}
	,seekFrame: function() {
		var found = false;
		try {
			var b;
			while(true) {
				b = this.i.readByte();
				if(!this.any_read) {
					this.any_read = true;
					if(b == 73) {
						b = this.i.readByte();
						if(b == 68) {
							b = this.i.readByte();
							if(b == 51) {
								this.skipID3v2();
							}
						}
					}
				}
				if(b == 255) {
					this.bits.nbits = 0;
					b = this.bits.readBits(3);
					if(b == 7) {
						return format_mp3_FrameType.FT_MP3;
					}
				}
			}
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				return format_mp3_FrameType.FT_NONE;
			} else {
				throw _g;
			}
		}
	}
	,readFrames: function() {
		var frames = [];
		var ft;
		while(true) {
			ft = this.seekFrame();
			if(!(ft != format_mp3_FrameType.FT_NONE)) {
				break;
			}
			switch(ft._hx_index) {
			case 0:
				var f = this.readFrame();
				if(f != null) {
					frames.push(f);
				}
				break;
			case 1:
				break;
			}
		}
		return frames;
	}
	,readFrameHeader: function() {
		var version = this.bits.readBits(2);
		var layer = this.bits.readBits(2);
		var hasCrc = !this.bits.readBit();
		if(version == format_mp3_MPEG.Reserved || layer == format_mp3_CLayer.LReserved) {
			return null;
		}
		var bitrateIdx = this.bits.readBits(4);
		var bitrate = format_mp3_Tools.getBitrate(version,layer,bitrateIdx);
		var samplingRateIdx = this.bits.readBits(2);
		var samplingRate = format_mp3_Tools.getSamplingRate(version,samplingRateIdx);
		var isPadded = this.bits.readBit();
		var privateBit = this.bits.readBit();
		if(bitrate == format_mp3_Bitrate.BR_Bad || bitrate == format_mp3_Bitrate.BR_Free || samplingRate == format_mp3_SamplingRate.SR_Bad) {
			return null;
		}
		var channelMode = this.bits.readBits(2);
		var isIntensityStereo = this.bits.readBit();
		var isMSStereo = this.bits.readBit();
		var isCopyrighted = this.bits.readBit();
		var isOriginal = this.bits.readBit();
		var emphasis = this.bits.readBits(2);
		var crc16 = 0;
		if(hasCrc) {
			crc16 = this.i.readUInt16();
		}
		return { version : format_mp3_MPEG.num2Enum(version), layer : format_mp3_CLayer.num2Enum(layer), hasCrc : hasCrc, crc16 : crc16, bitrate : bitrate, samplingRate : samplingRate, isPadded : isPadded, privateBit : privateBit, channelMode : format_mp3_CChannelMode.num2Enum(channelMode), isIntensityStereo : isIntensityStereo, isMSStereo : isMSStereo, isCopyrighted : isCopyrighted, isOriginal : isOriginal, emphasis : format_mp3_CEmphasis.num2Enum(emphasis)};
	}
	,readFrame: function() {
		var header = this.readFrameHeader();
		if(header == null || format_mp3_Tools.isInvalidFrameHeader(header)) {
			return null;
		}
		try {
			var data = this.i.read(format_mp3_Tools.getSampleDataSizeHdr(header));
			this.samples += format_mp3_Tools.getSampleCountHdr(header);
			this.sampleSize += data.length;
			return { header : header, data : data};
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				return null;
			} else {
				throw _g;
			}
		}
	}
	,read: function() {
		var fs = this.readFrames();
		return { frames : fs, sampleCount : this.samples, sampleSize : this.sampleSize, id3v2 : this.id3v2_data == null ? null : { versionBytes : this.id3v2_version, flagByte : this.id3v2_flags, data : this.id3v2_data}};
	}
	,__class__: format_mp3_Reader
};
var format_mp3_Tools = function() { };
$hxClasses["format.mp3.Tools"] = format_mp3_Tools;
format_mp3_Tools.__name__ = "format.mp3.Tools";
format_mp3_Tools.getBitrate = function(mpegVersion,layerIdx,bitrateIdx) {
	if(mpegVersion == format_mp3_MPEG.Reserved || layerIdx == format_mp3_CLayer.LReserved) {
		return format_mp3_Bitrate.BR_Bad;
	}
	return (mpegVersion == 3 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[layerIdx][bitrateIdx];
};
format_mp3_Tools.getSamplingRate = function(mpegVersion,samplingRateIdx) {
	return format_mp3_MPEG.SamplingRates[mpegVersion][samplingRateIdx];
};
format_mp3_Tools.isInvalidFrameHeader = function(hdr) {
	if(!(hdr.version == format_mp3_MPEGVersion.MPEG_Reserved || hdr.layer == format_mp3_Layer.LayerReserved || hdr.bitrate == format_mp3_Bitrate.BR_Bad || hdr.bitrate == format_mp3_Bitrate.BR_Free)) {
		return hdr.samplingRate == format_mp3_SamplingRate.SR_Bad;
	} else {
		return true;
	}
};
format_mp3_Tools.getSampleDataSize = function(mpegVersion,bitrate,samplingRate,isPadded,hasCrc) {
	return ((mpegVersion == 3 ? 144 : 72) * bitrate * 1000 / samplingRate | 0) + (isPadded ? 1 : 0) - (hasCrc ? 2 : 0) - 4;
};
format_mp3_Tools.getSampleDataSizeHdr = function(hdr) {
	return format_mp3_Tools.getSampleDataSize(format_mp3_MPEG.enum2Num(hdr.version),format_mp3_MPEG.bitrateEnum2Num(hdr.bitrate),format_mp3_MPEG.srEnum2Num(hdr.samplingRate),hdr.isPadded,hdr.hasCrc);
};
format_mp3_Tools.getSampleCount = function(mpegVersion) {
	if(mpegVersion == 3) {
		return 1152;
	} else {
		return 576;
	}
};
format_mp3_Tools.getSampleCountHdr = function(hdr) {
	return format_mp3_Tools.getSampleCount(format_mp3_MPEG.enum2Num(hdr.version));
};
format_mp3_Tools.getFrameInfo = function(fr) {
	return Std.string(fr.header.version) + ", " + Std.string(fr.header.layer) + ", " + Std.string(fr.header.channelMode) + ", " + Std.string(fr.header.samplingRate) + " Hz, " + Std.string(fr.header.bitrate) + " kbps " + "Emphasis: " + Std.string(fr.header.emphasis) + ", " + (fr.header.hasCrc ? "(CRC) " : "") + (fr.header.isPadded ? "(Padded) " : "") + (fr.header.isIntensityStereo ? "(Intensity Stereo) " : "") + (fr.header.isMSStereo ? "(MS Stereo) " : "") + (fr.header.isCopyrighted ? "(Copyrighted) " : "") + (fr.header.isOriginal ? "(Original) " : "");
};
var format_png_Color = $hxEnums["format.png.Color"] = { __ename__:"format.png.Color",__constructs__:null
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"format.png.Color",toString:$estr,__params__:function(){ return [this.alpha];}}; },$_._hx_name="ColGrey",$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"format.png.Color",toString:$estr,__params__:function(){ return [this.alpha];}}; },$_._hx_name="ColTrue",$_)
	,ColIndexed: {_hx_name:"ColIndexed",_hx_index:2,__enum__:"format.png.Color",toString:$estr}
};
format_png_Color.__constructs__ = [format_png_Color.ColGrey,format_png_Color.ColTrue,format_png_Color.ColIndexed];
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxEnums["format.png.Chunk"] = { __ename__:"format.png.Chunk",__constructs__:null
	,CEnd: {_hx_name:"CEnd",_hx_index:0,__enum__:"format.png.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"format.png.Chunk",toString:$estr,__params__:function(){ return [this.h];}}; },$_._hx_name="CHeader",$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"format.png.Chunk",toString:$estr,__params__:function(){ return [this.b];}}; },$_._hx_name="CData",$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"format.png.Chunk",toString:$estr,__params__:function(){ return [this.b];}}; },$_._hx_name="CPalette",$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.png.Chunk",toString:$estr,__params__:function(){ return [this.id,this.data];}}; },$_._hx_name="CUnknown",$_)
};
format_png_Chunk.__constructs__ = [format_png_Chunk.CEnd,format_png_Chunk.CHeader,format_png_Chunk.CData,format_png_Chunk.CPalette,format_png_Chunk.CUnknown];
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = "format.png.Reader";
format_png_Reader.prototype = {
	read: function() {
		var b = 137;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 80;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 78;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 13;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 26;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var l = new haxe_ds_List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw haxe_Exception.thrown("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw haxe_Exception.thrown("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c_crc = -1;
			var tmp = (c_crc ^ HxOverrides.cca(id,0)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,1)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,2)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,3)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var b = data.b.bufferValue;
			var _g = 0;
			var _g1 = data.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp = (c_crc ^ b.bytes[i]) & 255;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				c_crc = c_crc >>> 8 ^ tmp;
			}
			if((c_crc ^ -1) != crc) {
				throw haxe_Exception.thrown("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = "format.png.Tools";
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 1) {
			var h = c.h;
			return h;
		}
	}
	throw haxe_Exception.thrown("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 3) {
			var b = c.b;
			return b;
		}
	}
	return null;
};
format_png_Tools.filter = function(data,x,y,stride,prev,p,numChannels) {
	if(numChannels == null) {
		numChannels = 4;
	}
	var b = y == 0 ? 0 : data.b[p - stride];
	var c = x == 0 || y == 0 ? 0 : data.b[p - stride - numChannels];
	var k = prev + b - c;
	var pa = k - prev;
	if(pa < 0) {
		pa = -pa;
	}
	var pb = k - b;
	if(pb < 0) {
		pb = -pb;
	}
	var pc = k - c;
	if(pc < 0) {
		pc = -pc;
	}
	if(pa <= pb && pa <= pc) {
		return prev;
	} else if(pb <= pc) {
		return b;
	} else {
		return c;
	}
};
format_png_Tools.reverseBytes = function(b) {
	var p = 0;
	var _g = 0;
	var _g1 = b.length >> 2;
	while(_g < _g1) {
		var i = _g++;
		var b1 = b.b[p];
		var g = b.b[p + 1];
		var r = b.b[p + 2];
		var a = b.b[p + 3];
		b.b[p++] = a;
		b.b[p++] = r;
		b.b[p++] = g;
		b.b[p++] = b1;
	}
};
format_png_Tools.extractGrey = function(d) {
	var h = format_png_Tools.getHeader(d);
	var grey = new haxe_io_Bytes(new ArrayBuffer(h.width * h.height));
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw haxe_Exception.thrown("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var _g = h.color;
	if(_g._hx_index == 0) {
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var rinc = alpha ? 2 : 1;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				var _g2 = 0;
				var _g3 = width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = data.b[r];
					r += rinc;
					grey.b[w++] = v;
				}
				break;
			case 1:
				var cv = 0;
				var _g4 = 0;
				var _g5 = width;
				while(_g4 < _g5) {
					var x1 = _g4++;
					cv += data.b[r];
					r += rinc;
					grey.b[w++] = cv;
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width;
				var _g6 = 0;
				var _g7 = width;
				while(_g6 < _g7) {
					var x2 = _g6++;
					var v1 = data.b[r] + grey.b[w - stride];
					r += rinc;
					grey.b[w++] = v1;
				}
				break;
			case 3:
				var cv1 = 0;
				var stride1 = y == 0 ? 0 : width;
				var _g8 = 0;
				var _g9 = width;
				while(_g8 < _g9) {
					var x3 = _g8++;
					cv1 = data.b[r] + (cv1 + grey.b[w - stride1] >> 1) & 255;
					r += rinc;
					grey.b[w++] = cv1;
				}
				break;
			case 4:
				var stride2 = width;
				var cv2 = 0;
				var _g10 = 0;
				var _g11 = width;
				while(_g10 < _g11) {
					var x4 = _g10++;
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b = y == 0 ? 0 : grey.b[w - stride2];
					var c = x4 == 0 || y == 0 ? 0 : grey.b[w - stride2 - numChannels];
					var k = cv2 + b - c;
					var pa = k - cv2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c;
					if(pc < 0) {
						pc = -pc;
					}
					cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b : c) + data.b[r] & 255;
					r += rinc;
					grey.b[w++] = cv2;
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
		}
	} else {
		throw haxe_Exception.thrown("Unsupported color mode");
	}
	return grey;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw haxe_Exception.thrown("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g = h.color;
	switch(_g._hx_index) {
	case 0:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g_head = d.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = h.height;
		while(_g1 < _g2) {
			var y = _g1++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g3 = 0;
					var _g4 = width;
					while(_g3 < _g4) {
						var x = _g3++;
						var v = data.b[r++];
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = data.b[r++];
					}
				} else {
					var _g5 = 0;
					var _g6 = width;
					while(_g5 < _g6) {
						var x1 = _g5++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g7 = 0;
					var _g8 = width;
					while(_g7 < _g8) {
						var x2 = _g7++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						ca += data.b[r++];
						bgra.b[w++] = ca;
					}
				} else {
					var _g9 = 0;
					var _g10 = width;
					while(_g9 < _g10) {
						var x3 = _g9++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g11 = 0;
					var _g12 = width;
					while(_g11 < _g12) {
						var x4 = _g11++;
						var v2 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						var va = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = va;
					}
				} else {
					var _g13 = 0;
					var _g14 = width;
					while(_g13 < _g14) {
						var x5 = _g13++;
						var v3 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g15 = 0;
					var _g16 = width;
					while(_g15 < _g16) {
						var x6 = _g15++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca1;
					}
				} else {
					var _g17 = 0;
					var _g18 = width;
					while(_g17 < _g18) {
						var x7 = _g17++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g19 = 0;
					var _g20 = width;
					while(_g19 < _g20) {
						var x8 = _g19++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cv2 + b - c;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						var pos = r++;
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b : c) + data.b[pos] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = ca2 + b1 - c1;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						var pos1 = r++;
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b1 : c1) + data.b[pos1] & 255;
						bgra.b[w++] = ca2;
					}
				} else {
					var _g21 = 0;
					var _g22 = width;
					while(_g21 < _g22) {
						var x9 = _g21++;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cv2 + b2 - c2;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						var pos2 = r++;
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b2 : c2) + data.b[pos2] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 4 : 3) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha) {
			var _g_head = d.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 6) {
							alphaRed = data1.b[1];
							alphaGreen = data1.b[3];
							alphaBlue = data1.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca = 0;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g2 = 0;
					var _g3 = width;
					while(_g2 < _g3) {
						var x = _g2++;
						bgra.b[w++] = data.b[r + 2];
						bgra.b[w++] = data.b[r + 1];
						bgra.b[w++] = data.b[r];
						bgra.b[w++] = data.b[r + 3];
						r += 4;
					}
				} else {
					var _g4 = 0;
					var _g5 = width;
					while(_g4 < _g5) {
						var x1 = _g4++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb;
						cg = data.b[r + 1];
						bgra.b[w++] = cg;
						cr = data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g6 = 0;
					var _g7 = width;
					while(_g6 < _g7) {
						var x2 = _g6++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						ca += data.b[r + 3];
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g8 = 0;
					var _g9 = width;
					while(_g8 < _g9) {
						var x3 = _g8++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g10 = 0;
					var _g11 = width;
					while(_g10 < _g11) {
						var x4 = _g10++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride];
						++w;
						r += 4;
					}
				} else {
					var _g12 = 0;
					var _g13 = width;
					while(_g12 < _g13) {
						var x5 = _g12++;
						cb = data.b[r + 2] + bgra.b[w - stride];
						bgra.b[w] = cb;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride];
						bgra.b[w] = cg;
						++w;
						cr = data.b[r] + bgra.b[w - stride];
						bgra.b[w] = cr;
						++w;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g14 = 0;
					var _g15 = width;
					while(_g14 < _g15) {
						var x6 = _g14++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						ca = data.b[r + 3] + (ca + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g16 = 0;
					var _g17 = width;
					while(_g16 < _g17) {
						var x7 = _g16++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g18 = 0;
					var _g19 = width;
					while(_g18 < _g19) {
						var x8 = _g18++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cb + b - c;
						var pa = k - cb;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						cb = (pa <= pb && pa <= pc ? cb : pb <= pc ? b : c) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = cg + b1 - c1;
						var pa1 = k1 - cg;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						cg = (pa1 <= pb1 && pa1 <= pc1 ? cg : pb1 <= pc1 ? b1 : c1) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cr + b2 - c2;
						var pa2 = k2 - cr;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						cr = (pa2 <= pb2 && pa2 <= pc2 ? cr : pb2 <= pc2 ? b2 : c2) + data.b[r] & 255;
						bgra.b[w++] = cr;
						var b3 = y == 0 ? 0 : bgra.b[w - stride2];
						var c3 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k3 = ca + b3 - c3;
						var pa3 = k3 - ca;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b3;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c3;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						ca = (pa3 <= pb3 && pa3 <= pc3 ? ca : pb3 <= pc3 ? b3 : c3) + data.b[r + 3] & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g20 = 0;
					var _g21 = width;
					while(_g20 < _g21) {
						var x9 = _g20++;
						var b4 = y == 0 ? 0 : bgra.b[w - stride2];
						var c4 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k4 = cb + b4 - c4;
						var pa4 = k4 - cb;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b4;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c4;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cb = (pa4 <= pb4 && pa4 <= pc4 ? cb : pb4 <= pc4 ? b4 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b5 = y == 0 ? 0 : bgra.b[w - stride2];
						var c5 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k5 = cg + b5 - c5;
						var pa5 = k5 - cg;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b5;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c5;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cg = (pa5 <= pb5 && pa5 <= pc5 ? cg : pb5 <= pc5 ? b5 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b6 = y == 0 ? 0 : bgra.b[w - stride2];
						var c6 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k6 = cr + b6 - c6;
						var pa6 = k6 - cr;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b6;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c6;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						cr = (pa6 <= pb6 && pa6 <= pc6 ? cr : pb6 <= pc6 ? b6 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw haxe_Exception.thrown("PNG Palette is missing");
		}
		var alpha = null;
		var _g_head = d.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var t = val;
			if(t._hx_index == 4) {
				if(t.id == "tRNS") {
					var data1 = t.data;
					alpha = data1;
					break;
				}
			}
		}
		if(alpha != null && alpha.length < 1 << h.colbits) {
			var alpha2 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha2.blit(0,alpha,0,alpha.length);
			alpha2.fill(alpha.length,alpha2.length - alpha.length,255);
			alpha = alpha2;
		}
		var width = h.width;
		var stride = Math.ceil(width * h.colbits / 8) + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var rline = stride - 1;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			if(f == 0) {
				r += rline;
				continue;
			}
			switch(f) {
			case 1:
				var c = 0;
				var _g2 = 0;
				var _g3 = width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = data.b[r];
					c += v;
					data.b[r++] = c & 255;
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : rline + 1;
				var _g4 = 0;
				var _g5 = width;
				while(_g4 < _g5) {
					var x1 = _g4++;
					var v1 = data.b[r];
					data.b[r] = v1 + data.b[r - stride];
					++r;
				}
				break;
			case 3:
				var c1 = 0;
				var stride1 = y == 0 ? 0 : rline + 1;
				var _g6 = 0;
				var _g7 = width;
				while(_g6 < _g7) {
					var x2 = _g6++;
					var v2 = data.b[r];
					c1 = v2 + (c1 + data.b[r - stride1] >> 1) & 255;
					data.b[r++] = c1;
				}
				break;
			case 4:
				var stride2 = rline + 1;
				var c2 = 0;
				var _g8 = 0;
				var _g9 = width;
				while(_g8 < _g9) {
					var x3 = _g8++;
					var v3 = data.b[r];
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b = y == 0 ? 0 : data.b[r - stride2];
					var c3 = x3 == 0 || y == 0 ? 0 : data.b[r - stride2 - numChannels];
					var k = c2 + b - c3;
					var pa = k - c2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c3;
					if(pc < 0) {
						pc = -pc;
					}
					c2 = (pa <= pb && pa <= pc ? c2 : pb <= pc ? b : c3) + v3 & 255;
					data.b[r++] = c2;
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
		}
		var r = 0;
		if(h.colbits == 8) {
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var c = data.b[r++];
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var bits = 0;
				var nbits = 0;
				var v;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r++];
						nbits += 8;
					}
					var c = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else {
			throw haxe_Exception.thrown(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
format_png_Tools.extract = function(d,output,expandAlpha) {
	if(expandAlpha == null) {
		expandAlpha = false;
	}
	var h = format_png_Tools.getHeader(d);
	var hasAlpha = false;
	var channels;
	var _g = h.color;
	switch(_g._hx_index) {
	case 0:
		var alpha = _g.alpha;
		hasAlpha = alpha;
		channels = alpha ? 2 : 1;
		break;
	case 1:
		var alpha = _g.alpha;
		hasAlpha = alpha;
		channels = alpha ? 4 : 3;
		break;
	case 2:
		throw haxe_Exception.thrown("assert");
	}
	if(expandAlpha && hasAlpha) {
		expandAlpha = false;
	}
	var bpp = h.colbits >> 3;
	var outChannels = expandAlpha ? channels + 1 : channels;
	if(output == null) {
		output = new haxe_io_Bytes(new ArrayBuffer(outChannels * bpp * h.width * h.height));
	}
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw haxe_Exception.thrown("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var width = h.width;
	var ncomps = channels * bpp;
	var upperLine = outChannels * bpp * width;
	var leftPixel = outChannels * bpp;
	if(data.length < h.height * (ncomps * width + 1)) {
		throw haxe_Exception.thrown("Not enough data");
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = ncomps;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(0);
	}
	var tmp = _g;
	var _g = 0;
	var _g1 = h.height;
	while(_g < _g1) {
		var y = _g++;
		var f = data.b[r++];
		if(f != 0 && f != 2) {
			var _g2 = 0;
			var _g3 = ncomps;
			while(_g2 < _g3) {
				var i = _g2++;
				tmp[i] = 0;
			}
		}
		switch(f) {
		case 0:
			var _g4 = 0;
			var _g5 = width;
			while(_g4 < _g5) {
				var x = _g4++;
				var _g6 = 0;
				var _g7 = ncomps;
				while(_g6 < _g7) {
					var i1 = _g6++;
					output.b[w++] = data.b[r++];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 1:
			var _g8 = 0;
			var _g9 = width;
			while(_g8 < _g9) {
				var x1 = _g8++;
				var _g10 = 0;
				var _g11 = ncomps;
				while(_g10 < _g11) {
					var i2 = _g10++;
					tmp[i2] += data.b[r++];
					output.b[w++] = tmp[i2];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 2:
			var stride = y == 0 ? 0 : upperLine;
			var _g12 = 0;
			var _g13 = width;
			while(_g12 < _g13) {
				var x2 = _g12++;
				var _g14 = 0;
				var _g15 = ncomps;
				while(_g14 < _g15) {
					var i3 = _g14++;
					var v = data.b[r++] + output.b[w - stride];
					output.b[w++] = v;
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 3:
			var stride1 = y == 0 ? 0 : upperLine;
			var _g16 = 0;
			var _g17 = width;
			while(_g16 < _g17) {
				var x3 = _g16++;
				var _g18 = 0;
				var _g19 = ncomps;
				while(_g18 < _g19) {
					var i4 = _g18++;
					tmp[i4] = data.b[r++] + (tmp[i4] + output.b[w - stride1] >> 1) & 255;
					output.b[w++] = tmp[i4];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 4:
			var _g20 = 0;
			var _g21 = width;
			while(_g20 < _g21) {
				var x4 = _g20++;
				var _g22 = 0;
				var _g23 = ncomps;
				while(_g22 < _g23) {
					var i5 = _g22++;
					var prev = tmp[i5];
					var b = y == 0 ? 0 : output.b[w - upperLine];
					var c = x4 == 0 || y == 0 ? 0 : output.b[w - upperLine - leftPixel];
					var k = prev + b - c;
					var pa = k - prev;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c;
					if(pc < 0) {
						pc = -pc;
					}
					var pos = r++;
					tmp[i5] = (pa <= pb && pa <= pc ? prev : pb <= pc ? b : c) + data.b[pos] & 255;
					output.b[w++] = tmp[i5];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		default:
			throw haxe_Exception.thrown("Invalid filter " + f);
		}
	}
	if(h.colbits == 16) {
		var w = 0;
		var _g = 0;
		var _g1 = h.height * width * outChannels;
		while(_g < _g1) {
			var x = _g++;
			var a = output.b[w];
			var b = output.b[w + 1];
			output.b[w++] = b;
			output.b[w++] = a;
		}
	}
	return output;
};
format_png_Tools.buildGrey = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgb.b[w++] = 0;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			rgb.b[w++] = data.b[r++];
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColGrey(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.buildIndexed = function(width,height,data,palette,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgb.b[w++] = 0;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			rgb.b[w++] = data.b[r++];
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColIndexed, interlaced : false}));
	l.add(format_png_Chunk.CPalette(palette));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.buildRGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgb = new haxe_io_Bytes(new ArrayBuffer(width * height * 3 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgb.b[w++] = 0;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			rgb.b[w++] = data.b[r + 2];
			rgb.b[w++] = data.b[r + 1];
			rgb.b[w++] = data.b[r];
			r += 3;
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(false), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgb,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32ARGB = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgba.b[w++] = 0;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			rgba.b[w++] = data.b[r + 1];
			rgba.b[w++] = data.b[r + 2];
			rgba.b[w++] = data.b[r + 3];
			rgba.b[w++] = data.b[r];
			r += 4;
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
format_png_Tools.build32BGRA = function(width,height,data,level) {
	if(level == null) {
		level = 9;
	}
	var rgba = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 + height));
	var w = 0;
	var r = 0;
	var _g = 0;
	var _g1 = height;
	while(_g < _g1) {
		var y = _g++;
		rgba.b[w++] = 0;
		var _g2 = 0;
		var _g3 = width;
		while(_g2 < _g3) {
			var x = _g2++;
			rgba.b[w++] = data.b[r + 2];
			rgba.b[w++] = data.b[r + 1];
			rgba.b[w++] = data.b[r];
			rgba.b[w++] = data.b[r + 3];
			r += 4;
		}
	}
	var l = new haxe_ds_List();
	l.add(format_png_Chunk.CHeader({ width : width, height : height, colbits : 8, color : format_png_Color.ColTrue(true), interlaced : false}));
	l.add(format_png_Chunk.CData(format_tools_Deflate.run(rgba,level)));
	l.add(format_png_Chunk.CEnd);
	return l;
};
var format_png_Writer = function(o) {
	this.o = o;
	o.set_bigEndian(true);
};
$hxClasses["format.png.Writer"] = format_png_Writer;
format_png_Writer.__name__ = "format.png.Writer";
format_png_Writer.prototype = {
	write: function(png) {
		var b = 137;
		this.o.writeByte(b);
		var b = 80;
		this.o.writeByte(b);
		var b = 78;
		this.o.writeByte(b);
		var b = 71;
		this.o.writeByte(b);
		var b = 13;
		this.o.writeByte(b);
		var b = 10;
		this.o.writeByte(b);
		var b = 26;
		this.o.writeByte(b);
		var b = 10;
		this.o.writeByte(b);
		var _g_head = png.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var c = val;
			switch(c._hx_index) {
			case 0:
				this.writeChunk("IEND",new haxe_io_Bytes(new ArrayBuffer(0)));
				break;
			case 1:
				var h = c.h;
				var b = new haxe_io_BytesOutput();
				b.set_bigEndian(true);
				b.writeInt32(h.width);
				b.writeInt32(h.height);
				b.writeByte(h.colbits);
				var _g = h.color;
				var tmp;
				switch(_g._hx_index) {
				case 0:
					var alpha = _g.alpha;
					tmp = alpha ? 4 : 0;
					break;
				case 1:
					var alpha1 = _g.alpha;
					tmp = alpha1 ? 6 : 2;
					break;
				case 2:
					tmp = 3;
					break;
				}
				b.writeByte(tmp);
				b.writeByte(0);
				b.writeByte(0);
				b.writeByte(h.interlaced ? 1 : 0);
				this.writeChunk("IHDR",b.getBytes());
				break;
			case 2:
				var d = c.b;
				this.writeChunk("IDAT",d);
				break;
			case 3:
				var b1 = c.b;
				this.writeChunk("PLTE",b1);
				break;
			case 4:
				var id = c.id;
				var data = c.data;
				this.writeChunk(id,data);
				break;
			}
		}
	}
	,writeChunk: function(id,data) {
		this.o.writeInt32(data.length);
		this.o.writeString(id);
		this.o.write(data);
		var crc_crc = -1;
		var tmp = (crc_crc ^ HxOverrides.cca(id,0)) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp;
		var tmp = (crc_crc ^ HxOverrides.cca(id,1)) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp;
		var tmp = (crc_crc ^ HxOverrides.cca(id,2)) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp;
		var tmp = (crc_crc ^ HxOverrides.cca(id,3)) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		crc_crc = crc_crc >>> 8 ^ tmp;
		var b = data.b.bufferValue;
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var i = _g++;
			var tmp = (crc_crc ^ b.bytes[i]) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			crc_crc = crc_crc >>> 8 ^ tmp;
		}
		this.o.writeInt32(crc_crc ^ -1);
	}
	,__class__: format_png_Writer
};
var format_tga_ImageOrigin = $hxEnums["format.tga.ImageOrigin"] = { __ename__:"format.tga.ImageOrigin",__constructs__:null
	,BottomLeft: {_hx_name:"BottomLeft",_hx_index:0,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,BottomRight: {_hx_name:"BottomRight",_hx_index:1,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopLeft: {_hx_name:"TopLeft",_hx_index:2,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopRight: {_hx_name:"TopRight",_hx_index:3,__enum__:"format.tga.ImageOrigin",toString:$estr}
};
format_tga_ImageOrigin.__constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
format_tga_ImageOrigin.__empty_constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
var format_tga_ImageType = $hxEnums["format.tga.ImageType"] = { __ename__:"format.tga.ImageType",__constructs__:null
	,NoImage: {_hx_name:"NoImage",_hx_index:0,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedColorMapped: {_hx_name:"UncompressedColorMapped",_hx_index:1,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedTrueColor: {_hx_name:"UncompressedTrueColor",_hx_index:2,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedBlackAndWhite: {_hx_name:"UncompressedBlackAndWhite",_hx_index:3,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthColorMapped: {_hx_name:"RunLengthColorMapped",_hx_index:4,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthTrueColor: {_hx_name:"RunLengthTrueColor",_hx_index:5,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthBlackAndWhite: {_hx_name:"RunLengthBlackAndWhite",_hx_index:6,__enum__:"format.tga.ImageType",toString:$estr}
	,Unknown: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"format.tga.ImageType",toString:$estr,__params__:function(){ return [this.type];}}; },$_._hx_name="Unknown",$_)
};
format_tga_ImageType.__constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite,format_tga_ImageType.Unknown];
format_tga_ImageType.__empty_constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite];
var format_tga_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.tga.Reader"] = format_tga_Reader;
format_tga_Reader.__name__ = "format.tga.Reader";
format_tga_Reader.prototype = {
	read: function() {
		var idLength = this.i.readByte();
		var header = this.readHeader();
		var id = idLength == 0 ? "" : this.i.readString(idLength);
		var colorMap = this.readColorMapData(header);
		return { header : header, imageId : id, colorMapData : colorMap, imageData : this.readImageData(header,colorMap), developerData : null};
	}
	,readHeader: function() {
		var colorMapType = this.i.readByte();
		var dataType;
		var dataId = this.i.readByte();
		switch(dataId) {
		case 0:
			dataType = format_tga_ImageType.NoImage;
			break;
		case 1:
			dataType = format_tga_ImageType.UncompressedColorMapped;
			break;
		case 2:
			dataType = format_tga_ImageType.UncompressedTrueColor;
			break;
		case 3:
			dataType = format_tga_ImageType.UncompressedBlackAndWhite;
			break;
		case 9:
			dataType = format_tga_ImageType.RunLengthColorMapped;
			break;
		case 10:
			dataType = format_tga_ImageType.RunLengthTrueColor;
			break;
		case 11:
			dataType = format_tga_ImageType.RunLengthBlackAndWhite;
			break;
		default:
			dataType = format_tga_ImageType.Unknown(dataId);
		}
		var colorMapOrigin = this.i.readInt16();
		var colorMapLength = this.i.readInt16();
		var colorMapDepth = this.i.readByte();
		var xOrigin = this.i.readInt16();
		var yOrigin = this.i.readInt16();
		var width = this.i.readInt16();
		var height = this.i.readInt16();
		var depth = this.i.readByte();
		var descriptor = this.i.readByte();
		var origin;
		switch(descriptor & 48) {
		case 16:
			origin = format_tga_ImageOrigin.BottomRight;
			break;
		case 32:
			origin = format_tga_ImageOrigin.TopLeft;
			break;
		case 48:
			origin = format_tga_ImageOrigin.TopRight;
			break;
		default:
			origin = format_tga_ImageOrigin.BottomLeft;
		}
		return { colorMapType : colorMapType, imageType : dataType, colorMapFirstIndex : colorMapOrigin, colorMapLength : colorMapLength, colorMapEntrySize : colorMapDepth, xOrigin : xOrigin, yOrigin : yOrigin, width : width, height : height, bitsPerPixel : depth, alphaChannelBits : descriptor & 15, imageOrigin : origin};
	}
	,readColorMapData: function(header) {
		if(header.colorMapType == 0) {
			return null;
		}
		return this.readPixels(header.colorMapEntrySize,header.colorMapLength,header.alphaChannelBits,false);
	}
	,readImageData: function(header,colorMap) {
		switch(header.imageType._hx_index) {
		case 0:
			return null;
		case 1:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,false);
		case 2:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 3:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 4:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,true);
		case 5:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		case 6:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		default:
			throw haxe_Exception.thrown("Unsupported image data type!");
		}
	}
	,readPixels: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var list = new Array(amount);
		var alpha = alphaChannelBits != 0;
		var bitFieldSize = bitsPerPixel / 3 | 0;
		if(bitFieldSize > 8) {
			bitFieldSize = 8;
		}
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixel2);
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			parsePixel = $bind(this,this.parsePixel3);
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			parsePixel = $bind(this,this.parsePixel4);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readMono: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var list = new Array(amount);
		var alpha = alphaChannelBits != 0;
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixelGreyAlpha);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readIndexes: function(bitsPerPixel,amount,colorMap,offset,rle) {
		var list = new Array(amount);
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var i = 0;
			var rleChunk;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = colorMap[offset + readEntry()];
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = colorMap[offset + readEntry()];
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = colorMap[offset + readEntry()];
			}
		}
		return list;
	}
	,parsePixel1: function(value,alpha) {
		return value << 16 | value << 8 | value;
	}
	,parsePixelGreyAlpha: function(value,alpha) {
		return (alpha ? (value & 65280) << 16 : 0) | this.parsePixel1(value & 255,false);
	}
	,parsePixel2: function(value,alpha) {
		return (alpha ? (value & 32768) == 1 ? -16777216 : 0 : 0) | (((value & 31744) >> 10) / 31 * 255 | 0) << 16 | (((value & 992) >> 5) / 31 * 255 | 0) << 8 | ((value & 31) / 31 * 255 | 0);
	}
	,parsePixel3: function(value,alpha) {
		return value;
	}
	,parsePixel4: function(value,alpha) {
		return value;
	}
	,__class__: format_tga_Reader
};
var format_tools_BitsInput = function(i) {
	this.i = i;
	this.nbits = 0;
	this.bits = 0;
};
$hxClasses["format.tools.BitsInput"] = format_tools_BitsInput;
format_tools_BitsInput.__name__ = "format.tools.BitsInput";
format_tools_BitsInput.prototype = {
	readBits: function(n) {
		if(this.nbits >= n) {
			var c = this.nbits - n;
			var k = this.bits >>> c & (1 << n) - 1;
			this.nbits = c;
			return k;
		}
		var k = this.i.readByte();
		if(this.nbits >= 24) {
			if(n > 31) {
				throw haxe_Exception.thrown("Bits error");
			}
			var c = 8 + this.nbits - n;
			var d = this.bits & (1 << this.nbits) - 1;
			d = d << 8 - c | k << c;
			this.bits = k;
			this.nbits = c;
			return d;
		}
		this.bits = this.bits << 8 | k;
		this.nbits += 8;
		return this.readBits(n);
	}
	,readBit: function() {
		if(this.nbits == 0) {
			this.bits = this.i.readByte();
			this.nbits = 8;
		}
		this.nbits--;
		return (this.bits >>> this.nbits & 1) == 1;
	}
	,reset: function() {
		this.nbits = 0;
	}
	,__class__: format_tools_BitsInput
};
var format_tools_Deflate = function() { };
$hxClasses["format.tools.Deflate"] = format_tools_Deflate;
format_tools_Deflate.__name__ = "format.tools.Deflate";
format_tools_Deflate.run = function(b,level) {
	if(level == null) {
		level = 9;
	}
	return haxe_zip_Compress.run(b,level);
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = "format.tools.Inflate";
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var format_wav_WAVEFormat = $hxEnums["format.wav.WAVEFormat"] = { __ename__:"format.wav.WAVEFormat",__constructs__:null
	,WF_PCM: {_hx_name:"WF_PCM",_hx_index:0,__enum__:"format.wav.WAVEFormat",toString:$estr}
};
format_wav_WAVEFormat.__constructs__ = [format_wav_WAVEFormat.WF_PCM];
format_wav_WAVEFormat.__empty_constructs__ = [format_wav_WAVEFormat.WF_PCM];
var format_wav_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.wav.Reader"] = format_wav_Reader;
format_wav_Reader.__name__ = "format.wav.Reader";
format_wav_Reader.prototype = {
	readInt: function() {
		return this.i.readInt32();
	}
	,read: function() {
		if(this.i.readString(4) != "RIFF") {
			throw haxe_Exception.thrown("RIFF header expected");
		}
		var len = this.i.readInt32();
		if(this.i.readString(4) != "WAVE") {
			throw haxe_Exception.thrown("WAVE signature not found");
		}
		var fmt = this.i.readString(4);
		_hx_loop1: while(fmt != "fmt ") switch(fmt) {
		case "JUNK":
			var junkLen = this.i.readInt32();
			this.i.read(junkLen);
			fmt = this.i.readString(4);
			break;
		case "bext":
			var bextLen = this.i.readInt32();
			this.i.read(bextLen);
			fmt = this.i.readString(4);
			break;
		default:
			break _hx_loop1;
		}
		if(fmt != "fmt ") {
			throw haxe_Exception.thrown("unsupported wave chunk " + fmt);
		}
		var fmtlen = this.i.readInt32();
		var format;
		switch(this.i.readUInt16()) {
		case 1:case 3:
			format = format_wav_WAVEFormat.WF_PCM;
			break;
		default:
			throw haxe_Exception.thrown("only PCM (uncompressed) WAV files are supported");
		}
		var channels = this.i.readUInt16();
		var samplingRate = this.i.readInt32();
		var byteRate = this.i.readInt32();
		var blockAlign = this.i.readUInt16();
		var bitsPerSample = this.i.readUInt16();
		if(fmtlen > 16) {
			this.i.read(fmtlen - 16);
		}
		var nextChunk = this.i.readString(4);
		while(nextChunk != "data") {
			this.i.read(this.i.readInt32());
			nextChunk = this.i.readString(4);
		}
		if(nextChunk != "data") {
			throw haxe_Exception.thrown("expected data subchunk");
		}
		var datalen = this.i.readInt32();
		var data;
		try {
			data = this.i.read(datalen);
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw haxe_Exception.thrown("Invalid chunk data length");
			} else {
				throw _g;
			}
		}
		var cuePoints = [];
		try {
			while(true) {
				var nextChunk = this.i.readString(4);
				if(nextChunk == "cue ") {
					this.i.readInt32();
					var nbCuePoints = this.i.readInt32();
					var _g = 0;
					var _g1 = nbCuePoints;
					while(_g < _g1) {
						var _ = _g++;
						var cueId = this.i.readInt32();
						this.i.readInt32();
						this.i.readString(4);
						this.i.readInt32();
						this.i.readInt32();
						var cueSampleOffset = this.i.readInt32();
						cuePoints.push({ id : cueId, sampleOffset : cueSampleOffset});
					}
				} else {
					var n = this.i.readInt32();
					if(n < 0) {
						break;
					}
					this.i.read(n);
				}
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return { header : { format : format, channels : channels, samplingRate : samplingRate, byteRate : byteRate, blockAlign : blockAlign, bitsPerSample : bitsPerSample}, data : data, cuePoints : cuePoints};
	}
	,__class__: format_wav_Reader
};
var fx_Pixel = function(x,y,toX,toY,width,height) {
	this.vy = 0.;
	this.vx = 0.;
	this.x = x;
	this.y = y;
	this.toX = toX;
	this.toY = toY;
	this.width = width;
	this.height = height;
	var tile = h2d_Tile.fromColor(16777215,width,height);
	this.b = new h2d_Bitmap(tile);
	Game.inst.world.add(this.b,Game.LAYER_FX_FRONT);
	var d = 1000 + Math.random() * 1000;
	var a = Math.random() * 6.28318530718;
	var x = d * Math.cos(a);
	var y = d * Math.sin(a);
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var acc_x = x1;
	var acc_y = y1;
	this.accx = acc_x;
	this.accy = acc_y;
	this.update(0,0);
};
$hxClasses["fx.Pixel"] = fx_Pixel;
fx_Pixel.__name__ = "fx.Pixel";
fx_Pixel.prototype = {
	update: function(dt,t) {
		this.vx += this.accx * dt;
		this.vy += this.accy * dt;
		this.x += this.vx * dt;
		this.y += this.vy * dt;
		var _this = this.b;
		_this.posChanged = true;
		_this.x = this.toX * t + this.x * (1. - t);
		var _this = this.b;
		_this.posChanged = true;
		_this.y = this.toY * t + this.y * (1. - t);
	}
	,'delete': function() {
		var _this = this.b;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,__class__: fx_Pixel
};
var fx_Death = function(fromX,fromY,toX,toY,dx,dy) {
	this.pixels = [];
	this.fromX = fromX;
	this.fromY = fromY;
	this.toX = toX;
	this.toY = toY;
	var centerX = fromX + 4;
	var centerY = fromY + 8;
	var _g = 0;
	while(_g < 4) {
		var j = _g++;
		var x = fromX;
		var y = fromY + j * 4;
		var tx = toX;
		var ty = toY + j * 4;
		var cdx = x + 2 - centerX;
		var cdy = y + 2 - centerY;
		var dist = Math.sqrt(cdx * cdx + cdy * cdy);
		cdx /= dist;
		cdy /= dist;
		var pixel = new fx_Pixel(x,y,tx,ty,4,4);
		pixel.vx = -dx * 200 + cdx * 100;
		pixel.vy = -dy * 200 + cdy * 100;
		this.pixels.push(pixel);
	}
	var _g = 0;
	while(_g < 4) {
		var j = _g++;
		var x = fromX + 4;
		var y = fromY + j * 4;
		var tx = toX + 4;
		var ty = toY + j * 4;
		var cdx = x + 2 - centerX;
		var cdy = y + 2 - centerY;
		var dist = Math.sqrt(cdx * cdx + cdy * cdy);
		cdx /= dist;
		cdy /= dist;
		var pixel = new fx_Pixel(x,y,tx,ty,4,4);
		pixel.vx = -dx * 200 + cdx * 100;
		pixel.vy = -dy * 200 + cdy * 100;
		this.pixels.push(pixel);
	}
	this.over = new h2d_Graphics();
	this.over.beginFill(16711680);
	this.over.drawRect(0,0,320,180);
	this.over.endFill();
	this.over.blendMode = h2d_BlendMode.Add;
	Game.inst.hud.add(this.over,Game.LAYER_FLASH);
	this.over.alpha = .7;
};
$hxClasses["fx.Death"] = fx_Death;
fx_Death.__name__ = "fx.Death";
fx_Death.prototype = {
	'delete': function() {
		var _g = 0;
		var _g1 = this.pixels;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.delete();
		}
		var _this = this.over;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,update: function(dt,t) {
		var _g = 0;
		var _g1 = this.pixels;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.update(dt,t);
		}
	}
	,updateConstantRate: function(dt) {
		this.over.alpha *= Math.pow(0.00200000000000000178,dt);
	}
	,__class__: fx_Death
};
var fx_ScreenShakeType = $hxEnums["fx.ScreenShakeType"] = { __ename__:"fx.ScreenShakeType",__constructs__:null
	,Bounce: {_hx_name:"Bounce",_hx_index:0,__enum__:"fx.ScreenShakeType",toString:$estr}
	,Noise: {_hx_name:"Noise",_hx_index:1,__enum__:"fx.ScreenShakeType",toString:$estr}
};
fx_ScreenShakeType.__constructs__ = [fx_ScreenShakeType.Bounce,fx_ScreenShakeType.Noise];
fx_ScreenShakeType.__empty_constructs__ = [fx_ScreenShakeType.Bounce,fx_ScreenShakeType.Noise];
var fx_Fx = function(frontLayers,midLayers,backLayers,frontLayer,midLayer,backLayer) {
	this.flashLayers = null;
	this.flashTimer = 0.;
	this.shakeTimer = 0.;
	this.shakeDY = 0.;
	this.shakeDX = 0.;
	this.shakeY = 0.;
	this.shakeX = 0.;
	this.sbFront = new CustomSpriteBatch(hxd_Res.get_loader().loadCache("gfx/entities.png",hxd_res_Image).toTile());
	this.sbMid = new CustomSpriteBatch(hxd_Res.get_loader().loadCache("gfx/entities.png",hxd_res_Image).toTile());
	this.sbBack = new CustomSpriteBatch(hxd_Res.get_loader().loadCache("gfx/entities.png",hxd_res_Image).toTile());
	frontLayers.add(this.sbFront,frontLayer);
	midLayers.add(this.sbMid,midLayer);
	backLayers.add(this.sbBack,backLayer);
	this.sbFront.hasUpdate = this.sbFront.hasRotationScale = true;
	this.sbMid.hasUpdate = this.sbMid.hasRotationScale = true;
	this.sbBack.hasUpdate = this.sbBack.hasRotationScale = true;
	this.sbFront.blendMode = this.sbMid.blendMode = this.sbBack.blendMode = h2d_BlendMode.Add;
};
$hxClasses["fx.Fx"] = fx_Fx;
fx_Fx.__name__ = "fx.Fx";
fx_Fx.prototype = {
	'delete': function() {
		this.clear();
	}
	,clear: function() {
		this.sbFront.clear();
		this.sbMid.clear();
		this.sbBack.clear();
		fx_Particle.clearAll();
		this.stopShake();
	}
	,update: function(dt) {
		this.sbFront.update(dt);
		this.sbMid.update(dt);
		this.sbBack.update(dt);
	}
	,updateConstantRate: function(dt) {
		if(this.shakeTimer > 0) {
			this.shakeTimer -= dt;
			if(this.shakeTimer < 0) {
				this.shakeX = this.shakeY = 0;
			} else {
				this.shakeSOD.update(dt,0);
				if(this.shakeType == fx_ScreenShakeType.Noise) {
					var ra = Math.random() * 6.28318530718;
					var dist = this.shakeSOD.pos;
					this.shakeX = Math.cos(ra) * dist * this.shakeDX;
					this.shakeY = Math.sin(ra) * dist * this.shakeDY;
				} else {
					this.shakeX = this.shakeDX * this.shakeSOD.pos;
					this.shakeY = this.shakeDY * this.shakeSOD.pos;
				}
			}
		}
		if(this.flashTimer > 0) {
			var _this = this.flashBitmap;
			_this.posChanged = true;
			_this.x = -this.flashLayers.x;
			var _this = this.flashBitmap;
			_this.posChanged = true;
			_this.y = -this.flashLayers.y;
			this.flashTimer -= dt;
			if(this.flashTimer < 0) {
				var _this = this.flashBitmap;
				if(_this != null && _this.parent != null) {
					_this.parent.removeChild(_this);
				}
				this.flashBitmap = null;
			} else {
				this.flashSOD.update(dt,0);
				this.flashBitmap.alpha = this.flashSOD.pos;
			}
		}
	}
	,screenBounce: function(dx,dy,f,z,r) {
		var mult = 1.;
		f /= mult;
		this.shakeSOD = new SecondOrderDynamics(f,z,r,1.,StableKind.Fast);
		this.shakeTimer = 4. / f;
		this.shakeDX = dx * mult;
		this.shakeDY = dy * mult;
		this.shakeType = fx_ScreenShakeType.Bounce;
	}
	,screenShake: function(dx,dy,f,z,r,maxTime) {
		var mult = 1.;
		f /= mult;
		this.shakeSOD = new SecondOrderDynamics(f,z,r,1.,StableKind.Fast);
		this.shakeTimer = maxTime == null ? 4. / f : maxTime;
		this.shakeDX = dx * mult;
		this.shakeDY = dy * mult;
		this.shakeType = fx_ScreenShakeType.Noise;
	}
	,stopShake: function() {
		if(this.shakeSOD != null) {
			this.shakeSOD.reset(0);
		}
		this.shakeDX = this.shakeDY = this.shakeX = this.shakeY = this.shakeTimer = 0.;
	}
	,screenFlash: function(layers,color,alpha,f) {
		if(this.flashBitmap != null) {
			var _this = this.flashBitmap;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		this.flashBitmap = new h2d_Bitmap(h2d_Tile.fromColor(-16777216 | color,320,180),layers);
		this.flashBitmap.blendMode = h2d_BlendMode.Add;
		this.flashSOD = new SecondOrderDynamics(f,1,0,alpha,StableKind.Fast);
		this.flashTimer = 4. / f;
		this.flashLayers = layers;
	}
	,setFlashEnabled: function(v) {
		if(this.flashBitmap != null) {
			this.flashBitmap.set_visible(v);
		}
	}
	,rumble: function(strength,seconds) {
		var mult = 1.;
		strength *= mult;
		seconds *= Math.sqrt(mult);
		Main.inst.controller.rumble(strength,seconds);
	}
	,footStep: function(x,y,dir,isFront) {
		if(fx_Particle.all.length >= fx_Particle.LIMIT) {
			return;
		}
		var t = .4 + Math.random() * 0.199999999999999956;
		var p = fx_Particle.create(h2d_Tile.fromColor(isFront ? 16777215 : 11184810,4,4).center(),t);
		p.xx = x;
		p.yy = y;
		p.vx = -dir * 50;
		p.vy = -50;
		p.frx = .01;
		p.fry = .01;
		p.targetScaleX = p.targetScaleY = 0.;
		if(isFront) {
			this.sbFront.add(p,true);
		} else {
			this.sbMid.add(p,true);
		}
	}
	,jump: function(x,y,dir) {
		if(fx_Particle.all.length >= fx_Particle.LIMIT) {
			return;
		}
		var time = .15;
		var tile = h2d_Tile.fromColor(16777215,16,5);
		tile.dy = -2.5;
		var p = fx_Particle.create(tile,time);
		p.xx = x;
		p.yy = y;
		p.rotation = -Math.PI * .5 + dir * Math.PI * .15;
		p.targetScaleY = 0;
		this.sbMid.add(p,true);
	}
	,wallJump: function(x,y,dir) {
		if(fx_Particle.all.length >= fx_Particle.LIMIT) {
			return;
		}
		var time = .15;
		var tile = h2d_Tile.fromColor(16777215,16,5);
		tile.dy = -2.5;
		var p = fx_Particle.create(tile,time);
		p.xx = x;
		p.yy = y;
		p.rotation = -Math.PI * .5 + dir * Math.PI * .25;
		p.targetScaleY = 0;
		this.sbMid.add(p,true);
	}
	,die: function(dx,dy) {
		this.screenBounce(-dx * 10,-dy * 10,2.,.5,0);
		this.rumble(.4,.2);
	}
	,gem: function() {
		this.screenShake(10,10,1.5,1.,0);
		var ramp = Game.inst.updateRamp();
		this.screenFlash(Game.inst.world,ramp.getPixel(0,0) & 16777215,.4,1.3);
		this.rumble(.7,.3);
	}
	,levelCellCompleted: function(x,y) {
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			if(fx_Particle.all.length >= fx_Particle.LIMIT) {
				return;
			}
			var star = Assets.getTile("entities","particleStar");
			var col = 16777215;
			var p = fx_Particle.create(star,.2 + Math.random() * 0.149999999999999967,col);
			var d = 90 + Math.random() * 40;
			var a = Math.random() * 6.28318530718;
			var x1 = d * Math.cos(a);
			var y1 = d * Math.sin(a);
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var x2 = x1;
			var y2 = y1;
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var dir_x = x2;
			var dir_y = y2;
			p.vx = dir_x;
			p.vy = dir_y;
			p.xx = x;
			p.yy = y;
			p.frx = p.fry = .01;
			this.sbFront.add(p,true);
			p.update(0);
		}
	}
	,__class__: fx_Fx
};
var fx_Particle = function(tile,time,col) {
	if(col == null) {
		col = 16777215;
	}
	this.curTrailDist = 0.;
	this.trailSpacing = 0.;
	this.trailAnimName = null;
	this.targetScaleY = 1.;
	this.targetScaleX = 1.;
	this.baseScaleY = 1.;
	this.baseScaleX = 1.;
	this.rotationVel = 0.;
	this.fry = 1.;
	this.frx = 1.;
	this.accy = 0.;
	this.accx = 0.;
	this.vy = 0.;
	this.vx = 0.;
	this.yMax = 1e9;
	this.yMin = -1e9;
	this.xMax = 1e9;
	this.xMin = -1e9;
	this.yy = 0.;
	this.xx = 0.;
	BatchElement.call(this,tile);
	fx_Particle.all.push(this);
	this.col = col;
	this.x = this.y = 0.;
	this.updateRotation = this.dieOnCollision = this.fade = this.bounce = false;
	this.time = this.timer = time;
};
$hxClasses["fx.Particle"] = fx_Particle;
fx_Particle.__name__ = "fx.Particle";
fx_Particle.canCreate = function() {
	return fx_Particle.all.length < fx_Particle.LIMIT;
};
fx_Particle.create = function(tile,time,col) {
	if(col == null) {
		col = 16777215;
	}
	if(fx_Particle.all.length == fx_Particle.LIMIT) {
		return null;
	}
	return new fx_Particle(tile,time,col);
};
fx_Particle.clearAll = function() {
	fx_Particle.all = [];
};
fx_Particle.__super__ = BatchElement;
fx_Particle.prototype = $extend(BatchElement.prototype,{
	remove: function() {
		HxOverrides.remove(fx_Particle.all,this);
		BatchElement.prototype.remove.call(this);
	}
	,updateScale: function(sx,sy) {
		this.scaleX = sx;
		this.scaleY = sy;
	}
	,updateAlpha: function(v) {
		this.a = v;
	}
	,update: function(dt) {
		if(this.time >= 0) {
			this.timer -= dt;
			var t = 1. - this.timer / this.time;
			if(this.timer < 0) {
				return false;
			} else {
				this.scaleX = (1 - t) * this.baseScaleX + t * this.targetScaleX;
				this.scaleY = (1 - t) * this.baseScaleY + t * this.targetScaleY;
			}
			if(this.fade) {
				this.a = 1. - t;
			}
		}
		var prevX = this.xx;
		var prevY = this.yy;
		this.vx += this.accx * dt;
		this.vy += this.accy * dt;
		if(this.frx != 1.) {
			this.vx *= Math.pow(this.frx,dt);
		}
		if(this.fry != 1.) {
			this.vy *= Math.pow(this.fry,dt);
		}
		var dx = this.vx * dt;
		var dy = this.vy * dt;
		if(Game.inst != null) {
			var level = Game.inst.level;
			if(this.bounce) {
				if(entities_Solid.pointCollides(this.xx | 0,this.yy + dy | 0,dx < 0 ? -1 : dx > 0 ? 1 : 0,dy < 0 ? -1 : dy > 0 ? 1 : 0)) {
					this.vy *= -0.5;
					dy *= -0.5;
					this.vx *= .5;
					this.rotationVel *= -0.5;
				}
				this.yy += dy;
				if(entities_Solid.pointCollides(this.xx + dx | 0,this.yy | 0,dx < 0 ? -1 : dx > 0 ? 1 : 0,dy < 0 ? -1 : dy > 0 ? 1 : 0)) {
					this.vx *= -0.5;
					dx *= -0.5;
					this.vy *= .5;
					this.rotationVel *= -0.5;
				}
				this.xx += dx;
			} else {
				this.xx += dx;
				this.yy += dy;
			}
			var collides = entities_Solid.pointCollides(this.xx | 0,this.yy | 0,dx < 0 ? -1 : dx > 0 ? 1 : 0,dy < 0 ? -1 : dy > 0 ? 1 : 0);
			if(this.dieOnCollision && collides) {
				return false;
			}
		} else {
			this.xx += dx;
			this.yy += dy;
		}
		if(this.xx <= this.xMin || this.xx >= this.xMax || this.yy <= this.yMin || this.yy >= this.yMax) {
			return false;
		}
		if(this.updateRotation) {
			this.rotation = Math.atan2(this.vy,this.vx);
		} else {
			this.rotation += this.rotationVel * dt;
		}
		if(this.trailSpacing > 0) {
			var mx = this.xx - prevX;
			var my = this.yy - prevY;
			var dist = Math.sqrt(mx * mx + my * my);
			this.curTrailDist += dist;
			while(this.curTrailDist >= this.trailSpacing) {
				var px = prevX + mx * (this.curTrailDist - this.trailSpacing) / dist;
				var py = prevY + my * (this.curTrailDist - this.trailSpacing) / dist;
				this.curTrailDist -= this.trailSpacing;
			}
		}
		this.x = this.xx;
		this.y = this.yy;
		return true;
	}
	,setBoundsToLevel: function(level) {
		var x = this.t.width;
		var y = this.t.height;
		var maxSize = x > y ? x : y;
		var bounds = level.getCameraBounds();
		this.xMin = bounds.xMin - 2 * maxSize;
		this.yMin = bounds.yMin - 2 * maxSize;
		this.xMax = bounds.xMax + 2 * maxSize;
		this.yMax = bounds.yMax + 2 * maxSize;
	}
	,__class__: fx_Particle
});
var h2d_Bitmap = function(tile,parent) {
	h2d_Drawable.call(this,parent);
	this.set_tile(tile);
};
$hxClasses["h2d.Bitmap"] = h2d_Bitmap;
h2d_Bitmap.__name__ = "h2d.Bitmap";
h2d_Bitmap.__super__ = h2d_Drawable;
h2d_Bitmap.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			if(this.width == null && this.height == null) {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
			} else {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.width != null ? this.width : this.tile.width * this.height / this.tile.height,this.height != null ? this.height : this.tile.height * this.width / this.tile.width);
			}
		}
	}
	,set_width: function(w) {
		if(this.width == w) {
			return w;
		}
		this.width = w;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return w;
	}
	,set_height: function(h) {
		if(this.height == h) {
			return h;
		}
		this.height = h;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return h;
	}
	,set_tile: function(t) {
		if(this.tile == t) {
			return t;
		}
		this.tile = t;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t;
	}
	,draw: function(ctx) {
		if(this.width == null && this.height == null) {
			this.emitTile(ctx,this.tile);
			return;
		}
		if(this.tile == null) {
			this.set_tile(h2d_Tile.fromColor(16711935));
		}
		var ow = this.tile.width;
		var oh = this.tile.height;
		this.tile.width = this.width != null ? this.width : ow * this.height / oh;
		this.tile.height = this.height != null ? this.height : oh * this.width / ow;
		this.emitTile(ctx,this.tile);
		this.tile.width = ow;
		this.tile.height = oh;
	}
	,__class__: h2d_Bitmap
});
var h2d_BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__:"h2d.BlendMode",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_name:"Alpha",_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_name:"Add",_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_name:"AlphaAdd",_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_name:"SoftAdd",_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_name:"Multiply",_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_name:"AlphaMultiply",_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_name:"Erase",_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_name:"Screen",_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_name:"Sub",_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d_BlendMode.__constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
var h2d_Camera = function(scene) {
	this.followRotation = false;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.posChanged = true;
	this.anchorX = 0;
	this.posChanged = true;
	this.anchorY = 0;
	this.viewX = 0;
	this.viewY = 0;
	this.viewW = 1;
	this.viewH = 1;
	this.visible = true;
	if(scene != null) {
		scene.addCamera(this);
	}
};
$hxClasses["h2d.Camera"] = h2d_Camera;
h2d_Camera.__name__ = "h2d.Camera";
h2d_Camera.prototype = {
	remove: function() {
		if(this.scene != null) {
			this.scene.removeCamera(this);
		}
	}
	,layerVisible: function(layer) {
		return true;
	}
	,enter: function(ctx) {
		ctx.pushCamera(this);
		if(this.clipViewport) {
			var old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.pushRenderZone(this.viewX * this.scene.width,this.viewY * this.scene.height,this.viewW * this.scene.width,this.viewH * this.scene.height);
			ctx.inFilter = old;
		}
	}
	,exit: function(ctx) {
		if(this.clipViewport) {
			var old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.popRenderZone();
			ctx.inFilter = old;
		}
		ctx.popCamera();
	}
	,sync: function(ctx,force) {
		if(force == null) {
			force = false;
		}
		if(this.scene == null) {
			return;
		}
		if(this.follow != null) {
			this.posChanged = true;
			this.x = this.follow.absX;
			this.posChanged = true;
			this.y = this.follow.absY;
			if(this.followRotation) {
				this.posChanged = true;
				this.rotation = -this.follow.rotation;
			}
		}
		if(this.posChanged || force) {
			if(this.rotation == 0) {
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				var cr = Math.cos(this.rotation);
				var sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = Math.round(-(this.x * this.matA + this.y * this.matC) + this.scene.width * this.anchorX * this.viewW + this.scene.width * this.viewX);
			this.absY = Math.round(-(this.x * this.matB + this.y * this.matD) + this.scene.height * this.anchorY * this.viewH + this.scene.height * this.viewY);
			this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
			this.posChanged = false;
		}
	}
	,setScale: function(x,y) {
		this.posChanged = true;
		this.scaleX = x;
		this.posChanged = true;
		this.scaleY = y;
	}
	,scale: function(x,y) {
		this.posChanged = true;
		this.scaleX *= x;
		this.posChanged = true;
		this.scaleY *= y;
	}
	,setPosition: function(x,y) {
		this.posChanged = true;
		this.x = x;
		this.posChanged = true;
		this.y = y;
	}
	,move: function(dx,dy) {
		this.posChanged = true;
		this.x += dx;
		this.posChanged = true;
		this.y += dy;
	}
	,rotate: function(angle) {
		this.posChanged = true;
		this.rotation += angle;
	}
	,setAnchor: function(x,y) {
		this.posChanged = true;
		this.anchorX = x;
		this.posChanged = true;
		this.anchorY = y;
	}
	,setViewport: function(x,y,w,h) {
		if(h == null) {
			h = 0;
		}
		if(w == null) {
			w = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewX = Math.floor(x) / this.scene.width;
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewY = Math.floor(y) / this.scene.height;
		var v = w == 0 ? this.scene.width : w;
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewW = Math.ceil(v) / this.scene.width;
		var v = h == 0 ? this.scene.height : h;
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewH = Math.ceil(v) / this.scene.height;
	}
	,setRawViewport: function(x,y,w,h) {
		if(h == null) {
			h = 1;
		}
		if(w == null) {
			w = 1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.viewX = x;
		this.viewY = y;
		this.viewW = w;
		this.viewH = h;
		this.posChanged = true;
	}
	,screenXToCamera: function(mx,my) {
		return (((mx - this.scene.offsetX) / this.scene.viewportScaleX - this.absX) * this.matD - ((my - this.scene.offsetY) / this.scene.viewportScaleY - this.absY) * this.matC) * this.invDet;
	}
	,screenYToCamera: function(mx,my) {
		return (-((mx - this.scene.offsetX) / this.scene.viewportScaleX - this.absX) * this.matB + ((my - this.scene.offsetY) / this.scene.viewportScaleY - this.absY) * this.matA) * this.invDet;
	}
	,cameraXToScreen: function(mx,my) {
		return (mx * this.matA + my * this.matC + this.absX) * this.scene.viewportScaleX + this.scene.offsetX;
	}
	,cameraYToScreen: function(mx,my) {
		return (mx * this.matB + my * this.matD + this.absY) * this.scene.viewportScaleY + this.scene.offsetY;
	}
	,sceneXToCamera: function(mx,my) {
		return ((mx - this.absX) * this.matD - (my - this.absY) * this.matC) * this.invDet;
	}
	,sceneYToCamera: function(mx,my) {
		return (-(mx - this.absX) * this.matB + (my - this.absY) * this.matA) * this.invDet;
	}
	,cameraXToScene: function(mx,my) {
		return mx * this.matA + my * this.matC + this.absX;
	}
	,cameraYToScene: function(mx,my) {
		return mx * this.matB + my * this.matD + this.absY;
	}
	,eventToCamera: function(e) {
		var x = (e.relX - this.scene.offsetX) / this.scene.viewportScaleX - this.absX;
		var y = (e.relY - this.scene.offsetY) / this.scene.viewportScaleY - this.absY;
		e.relX = (x * this.matD - y * this.matC) * this.invDet;
		e.relY = (-x * this.matB + y * this.matA) * this.invDet;
	}
	,screenToCamera: function(pt) {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		var x = (pt.x - this.scene.offsetX) / this.scene.viewportScaleX - this.absX;
		var y = (pt.y - this.scene.offsetY) / this.scene.viewportScaleY - this.absY;
		pt.x = (x * this.matD - y * this.matC) * this.invDet;
		pt.y = (-x * this.matB + y * this.matA) * this.invDet;
	}
	,cameraToScreen: function(pt) {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		var x = pt.x;
		var y = pt.y;
		pt.x = (x * this.matA + y * this.matC + this.absX) * this.scene.viewportScaleX + this.scene.offsetX;
		pt.y = (x * this.matB + y * this.matD + this.absY) * this.scene.viewportScaleY + this.scene.offsetY;
	}
	,sceneToCamera: function(pt) {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		var x = pt.x - this.absX;
		var y = pt.y - this.absY;
		pt.x = (x * this.matD - y * this.matC) * this.invDet;
		pt.y = (-x * this.matB + y * this.matA) * this.invDet;
	}
	,cameraToScene: function(pt) {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		var x = pt.x;
		var y = pt.y;
		pt.x = x * this.matA + y * this.matC + this.absX;
		pt.y = x * this.matB + y * this.matD + this.absY;
	}
	,checkScene: function() {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
	}
	,set_x: function(v) {
		this.posChanged = true;
		return this.x = v;
	}
	,set_y: function(v) {
		this.posChanged = true;
		return this.y = v;
	}
	,set_scaleX: function(v) {
		this.posChanged = true;
		return this.scaleX = v;
	}
	,set_scaleY: function(v) {
		this.posChanged = true;
		return this.scaleY = v;
	}
	,set_rotation: function(v) {
		this.posChanged = true;
		return this.rotation = v;
	}
	,get_viewportX: function() {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		return this.viewX * this.scene.width;
	}
	,set_viewportX: function(v) {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewX = Math.floor(v) / this.scene.width;
		return v;
	}
	,get_viewportY: function() {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		return this.viewY * this.scene.height;
	}
	,set_viewportY: function(v) {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewY = Math.floor(v) / this.scene.height;
		return v;
	}
	,get_viewportWidth: function() {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		return this.viewW * this.scene.width;
	}
	,set_viewportWidth: function(v) {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewW = Math.ceil(v) / this.scene.width;
		return v;
	}
	,get_viewportHeight: function() {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		return this.viewH * this.scene.height;
	}
	,set_viewportHeight: function(v) {
		if(this.scene == null) {
			throw haxe_Exception.thrown("This method requires Camera to be added to the Scene");
		}
		this.posChanged = true;
		this.viewH = Math.ceil(v) / this.scene.height;
		return v;
	}
	,set_anchorX: function(v) {
		this.posChanged = true;
		return this.anchorX = v;
	}
	,set_anchorY: function(v) {
		this.posChanged = true;
		return this.anchorY = v;
	}
	,__class__: h2d_Camera
};
var h2d_ConsoleArg = $hxEnums["h2d.ConsoleArg"] = { __ename__:"h2d.ConsoleArg",__constructs__:null
	,AInt: {_hx_name:"AInt",_hx_index:0,__enum__:"h2d.ConsoleArg",toString:$estr}
	,AFloat: {_hx_name:"AFloat",_hx_index:1,__enum__:"h2d.ConsoleArg",toString:$estr}
	,AString: {_hx_name:"AString",_hx_index:2,__enum__:"h2d.ConsoleArg",toString:$estr}
	,ABool: {_hx_name:"ABool",_hx_index:3,__enum__:"h2d.ConsoleArg",toString:$estr}
	,AEnum: ($_=function(values) { return {_hx_index:4,values:values,__enum__:"h2d.ConsoleArg",toString:$estr,__params__:function(){ return [this.values];}}; },$_._hx_name="AEnum",$_)
	,AArray: ($_=function(t) { return {_hx_index:5,t:t,__enum__:"h2d.ConsoleArg",toString:$estr,__params__:function(){ return [this.t];}}; },$_._hx_name="AArray",$_)
};
h2d_ConsoleArg.__constructs__ = [h2d_ConsoleArg.AInt,h2d_ConsoleArg.AFloat,h2d_ConsoleArg.AString,h2d_ConsoleArg.ABool,h2d_ConsoleArg.AEnum,h2d_ConsoleArg.AArray];
h2d_ConsoleArg.__empty_constructs__ = [h2d_ConsoleArg.AInt,h2d_ConsoleArg.AFloat,h2d_ConsoleArg.AString,h2d_ConsoleArg.ABool];
var h2d_Console = function(font,parent) {
	this.autoComplete = true;
	this.shortKeyChar = 47;
	this.errorColor = 12582912;
	this.logDY = 0;
	var _gthis = this;
	h2d_Object.call(this,parent);
	this.height = Math.ceil(font.lineHeight) + 2;
	this.logTxt = new h2d_HtmlText(font,this);
	var _this = this.logTxt;
	_this.posChanged = true;
	_this.x = 2;
	this.logTxt.dropShadow = { dx : 0, dy : 1, color : 0, alpha : 0.5};
	this.logTxt.set_visible(false);
	this.logs = [];
	this.logIndex = -1;
	this.bg = new h2d_Bitmap(h2d_Tile.fromColor(0,1,1,0.5),this);
	this.bg.set_visible(false);
	this.hintTxt = new h2d_Text(font,this.bg);
	var _this = this.hintTxt;
	_this.posChanged = true;
	_this.x = 2;
	var _this = this.hintTxt;
	_this.posChanged = true;
	_this.y = 1;
	this.hintTxt.set_textColor(-1);
	this.hintTxt.alpha = 0.5;
	this.tf = new h2d_TextInput(font,this.bg);
	this.tf.onKeyDown = $bind(this,this.handleKey);
	this.tf.onChange = $bind(this,this.handleCmdChange);
	this.tf.onFocusLost = function(_) {
		_gthis.hide();
	};
	var _this = this.tf;
	_this.posChanged = true;
	_this.x = 2;
	var _this = this.tf;
	_this.posChanged = true;
	_this.y = 1;
	this.tf.set_textColor(-1);
	this.resetCommands();
};
$hxClasses["h2d.Console"] = h2d_Console;
h2d_Console.__name__ = "h2d.Console";
h2d_Console.__super__ = h2d_Object;
h2d_Console.prototype = $extend(h2d_Object.prototype,{
	resetCommands: function() {
		var _gthis = this;
		this.commands = new haxe_ds_StringMap();
		this.aliases = new haxe_ds_StringMap();
		this.addCommand("help","Show help",[{ name : "command", t : h2d_ConsoleArg.AString, opt : true}],$bind(this,this.showHelp));
		this.addCommand("cls","Clear console",[],function() {
			_gthis.logs = [];
			_gthis.logTxt.set_text("");
		});
		this.addAlias("?","help");
	}
	,addCommand: function(name,help,args,callb) {
		this.commands.h[name] = { help : help == null ? "" : help, args : args, callb : callb};
	}
	,addAlias: function(name,command) {
		this.aliases.h[name] = command;
	}
	,runCommand: function(commandLine) {
		this.handleCommand(commandLine);
	}
	,onAdd: function() {
		h2d_Object.prototype.onAdd.call(this);
		this.getScene().window.addEventTarget($bind(this,this.onEvent));
	}
	,onRemove: function() {
		this.getScene().window.removeEventTarget($bind(this,this.onEvent));
		h2d_Object.prototype.onRemove.call(this);
	}
	,onEvent: function(e) {
		switch(e.kind._hx_index) {
		case 5:
			if(this.logTxt.visible) {
				this.logDY -= this.tf.font.lineHeight * e.wheelDelta * 3;
				if(this.logDY < 0) {
					this.logDY = 0;
				}
				if(this.logDY > this.logTxt.get_textHeight()) {
					this.logDY = this.logTxt.get_textHeight();
				}
				e.propagate = false;
			}
			break;
		case 11:
			if(e.charCode == this.shortKeyChar && !this.bg.visible) {
				this.show();
			}
			break;
		default:
		}
	}
	,showHelp: function(command) {
		var _gthis = this;
		var all;
		if(command == null) {
			all = Lambda.array({ iterator : function() {
				return new haxe_ds__$StringMap_StringMapKeyIterator(_gthis.commands.h);
			}});
			all.sort(Reflect.compare);
			HxOverrides.remove(all,"help");
			all.push("help");
		} else {
			if(Object.prototype.hasOwnProperty.call(this.aliases.h,command)) {
				command = this.aliases.h[command];
			}
			if(!Object.prototype.hasOwnProperty.call(this.commands.h,command)) {
				throw haxe_Exception.thrown("Command not found \"" + command + "\"");
			}
			all = [command];
		}
		var _g = 0;
		while(_g < all.length) {
			var cmdName = all[_g];
			++_g;
			var c = this.commands.h[cmdName];
			var code = this.shortKeyChar;
			var str = String.fromCodePoint(code) + cmdName;
			var h = this.aliases.h;
			var a_h = h;
			var a_keys = Object.keys(h);
			var a_length = a_keys.length;
			var a_current = 0;
			while(a_current < a_length) {
				var a = a_keys[a_current++];
				if(this.aliases.h[a] == cmdName) {
					str += "|" + a;
				}
			}
			var _g1 = 0;
			var _g2 = c.args;
			while(_g1 < _g2.length) {
				var a1 = _g2[_g1];
				++_g1;
				var astr = a1.name;
				var _g3 = a1.t;
				switch(_g3._hx_index) {
				case 0:case 1:
					var e = a1.t;
					astr += ":" + HxOverrides.substr($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name,1,null);
					break;
				case 2:
					break;
				case 3:
					astr += "=0|1";
					break;
				case 4:
					var values = _g3.values;
					astr += "=" + values.join("|");
					break;
				case 5:
					var e1 = a1.t;
					astr += ":" + HxOverrides.substr($hxEnums[e1.__enum__].__constructs__[e1._hx_index]._hx_name,1,null);
					break;
				}
				str += " " + (a1.opt ? "[" + astr + "]" : astr);
			}
			if(c.help != "") {
				str += " : " + c.help;
			}
			this.log(str);
		}
	}
	,isActive: function() {
		return this.bg.visible;
	}
	,hide: function() {
		this.bg.set_visible(false);
		this.tf.set_text("");
		this.hintTxt.set_text("");
		this.tf.cursorIndex = -1;
	}
	,show: function() {
		this.bg.set_visible(true);
		this.tf.focus();
		this.tf.cursorIndex = this.tf.text.length;
		this.logIndex = -1;
	}
	,getCommandSuggestion: function(cmd) {
		var hadShortKey = false;
		if(HxOverrides.cca(cmd,0) == this.shortKeyChar) {
			hadShortKey = true;
			cmd = HxOverrides.substr(cmd,1,null);
		}
		if(cmd == "") {
			return "";
		}
		var lowCmd = cmd.toLowerCase();
		var closestCommand = "";
		var h = this.commands.h;
		var command_h = h;
		var command_keys = Object.keys(h);
		var command_length = command_keys.length;
		var command_current = 0;
		while(command_current < command_length) {
			var command = command_keys[command_current++];
			if(command.toLowerCase().indexOf(lowCmd) == 0) {
				if(closestCommand == "" || closestCommand.length > command.length) {
					closestCommand = command;
				}
			}
		}
		if(Object.prototype.hasOwnProperty.call(this.aliases.h,cmd)) {
			closestCommand = cmd;
		}
		if(hadShortKey && closestCommand != "") {
			var code = this.shortKeyChar;
			closestCommand = String.fromCodePoint(code) + closestCommand;
		}
		return closestCommand;
	}
	,handleKey: function(e) {
		if(!this.bg.visible) {
			return;
		}
		switch(e.keyCode) {
		case 9:
			if(this.autoComplete) {
				if(this.hintTxt.text != "") {
					this.tf.set_text(this.hintTxt.text + " ");
					this.tf.cursorIndex = this.tf.text.length;
				}
			}
			break;
		case 27:
			this.hide();
			break;
		case 38:
			if(this.logs.length == 0 || this.logIndex == 0) {
				return;
			}
			if(this.logIndex == -1) {
				this.curCmd = this.tf.text;
				this.logIndex = this.logs.length - 1;
			} else {
				var curLog = this.logs[this.logIndex];
				while(curLog == this.logs[this.logIndex] && this.logIndex > 0) this.logIndex--;
			}
			this.tf.set_text(this.logs[this.logIndex]);
			this.tf.cursorIndex = this.tf.text.length;
			break;
		case 40:
			if(this.tf.text == this.curCmd) {
				return;
			}
			var curLog = this.logs[this.logIndex];
			while(curLog == this.logs[this.logIndex] && this.logIndex < this.logs.length - 1) this.logIndex++;
			if(this.logIndex == this.logs.length - 1) {
				this.tf.set_text(this.curCmd == null ? "" : this.curCmd);
				this.tf.cursorIndex = this.tf.text.length;
				this.logIndex = -1;
				return;
			}
			this.tf.set_text(this.logs[this.logIndex]);
			this.tf.cursorIndex = this.tf.text.length;
			break;
		case 13:case 108:
			var cmd = this.tf.text;
			this.tf.set_text("");
			this.hintTxt.set_text("");
			if(this.autoComplete) {
				var suggestion = this.getCommandSuggestion(cmd);
				if(suggestion != "") {
					cmd = suggestion;
				}
			}
			this.handleCommand(cmd);
			if(!this.logTxt.visible) {
				this.bg.set_visible(false);
			}
			e.cancel = true;
			return;
		}
	}
	,handleCmdChange: function() {
		this.hintTxt.set_visible(this.autoComplete);
		if(this.autoComplete) {
			this.hintTxt.set_text(this.getCommandSuggestion(this.tf.text));
		} else {
			this.hintTxt.set_text("");
		}
	}
	,handleCommand: function(command) {
		var _gthis = this;
		command = StringTools.trim(command);
		if(HxOverrides.cca(command,0) == this.shortKeyChar) {
			command = HxOverrides.substr(command,1,null);
		}
		if(command == "") {
			this.hide();
			return;
		}
		this.logs.push(command);
		this.logIndex = -1;
		var args = [];
		var c = "";
		var i = 0;
		var readString = function(endChar) {
			var string = "";
			while(i < command.length) {
				var c1 = i += 1;
				c = command.charAt(c1);
				if(c == endChar) {
					i += 1;
					return string;
				}
				string += c;
			}
			return null;
		};
		var last = "";
		while(i < command.length) {
			c = command.charAt(i);
			switch(c) {
			case "\t":case " ":
				c = command.charAt(i);
				while(c == " " || c == "\t") {
					var c1 = i += 1;
					c = command.charAt(c1);
				}
				i -= 1;
				args.push(last);
				last = "";
				break;
			case "\"":case "'":
				var string = readString(c);
				if(string == null) {
					this.log("Bad formated string",this.errorColor);
					return;
				}
				last = string;
				if(i < command.length - 1) {
					args.push(string);
					last = "";
				}
				c = command.charAt(i);
				while(c == " " || c == "\t") {
					var c2 = i += 1;
					c = command.charAt(c2);
				}
				i -= 1;
				break;
			default:
				last += c;
			}
			i += 1;
		}
		args.push(last);
		var cmdName = args[0];
		if(Object.prototype.hasOwnProperty.call(this.aliases.h,cmdName)) {
			cmdName = this.aliases.h[cmdName];
		}
		var cmd = this.commands.h[cmdName];
		if(cmd == null) {
			this.log("Unknown command \"" + cmdName + "\"",this.errorColor);
			return;
		}
		var parseArgument = function(v,t,name,loneArg) {
			if(loneArg == null) {
				loneArg = false;
			}
			switch(t._hx_index) {
			case 0:
				var i = Std.parseInt(v);
				if(i == null) {
					_gthis.log("" + v + " should be Int for argument " + name,_gthis.errorColor);
					return null;
				}
				return i;
			case 1:
				var f = parseFloat(v);
				if(isNaN(f)) {
					_gthis.log("" + v + " should be Float for argument " + name,_gthis.errorColor);
					return null;
				}
				return f;
			case 2:
				if(loneArg) {
					return StringTools.trim(HxOverrides.substr(command,args[0].length,null));
				} else {
					return v;
				}
				break;
			case 3:
				switch(v) {
				case "0":case "false":
					return false;
				case "1":case "true":
					return true;
				default:
					_gthis.log("" + v + " should be Bool for argument " + name,_gthis.errorColor);
					return null;
				}
				break;
			case 4:
				var values = t.values;
				var found = false;
				var _g = 0;
				while(_g < values.length) {
					var v2 = values[_g];
					++_g;
					if(v == v2) {
						return v2;
					}
				}
				_gthis.log("" + v + " should be [" + values.join("|") + "] for argument " + name,_gthis.errorColor);
				return null;
			case 5:
				var t1 = t.t;
				_gthis.log("Cannot have nested arrays for argument " + name);
				return null;
			}
		};
		var vargs = [];
		var _g = 0;
		var _g1 = cmd.args.length;
		while(_g < _g1) {
			var i1 = _g++;
			var a = cmd.args[i1];
			var _g2 = a.t;
			if(_g2._hx_index == 5) {
				var t = _g2.t;
				if(i1 != cmd.args.length - 1) {
					this.log("Array " + a.name + " should be last argument",this.errorColor);
					return;
				}
				var arr = [];
				var _g3 = i1 + 1;
				var _g4 = args.length;
				while(_g3 < _g4) {
					var j = _g3++;
					var v = args[j];
					var parsed = parseArgument(v,t,a.name);
					if(parsed == null) {
						return;
					}
					arr.push(parsed);
				}
				vargs.push(arr);
			} else {
				var v1 = args[i1 + 1];
				if(v1 == null) {
					if(a.opt) {
						vargs.push(null);
						continue;
					}
					this.log("Missing argument " + a.name,this.errorColor);
					return;
				}
				var parsed1 = parseArgument(v1,a.t,a.name,cmd.args.length == 1);
				if(parsed1 == null) {
					return;
				}
				vargs.push(parsed1);
			}
		}
		this.doCall(cmd.callb,vargs);
	}
	,doCall: function(callb,vargs) {
		try {
			callb.apply(null,vargs);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(typeof(_g1) == "string") {
				var e = _g1;
				this.log("ERROR " + e,this.errorColor);
			} else {
				throw _g;
			}
		}
	}
	,log: function(text,color) {
		if(color == null) {
			color = this.tf.textColor;
		}
		var oldH = this.logTxt.get_textHeight();
		this.logTxt.set_text(this.logTxt.text + ("<font color=\"#" + StringTools.hex(color & 16777215,6) + "\">" + StringTools.htmlEscape(text) + "</font><br/>"));
		if(this.logDY != 0) {
			this.logDY += this.logTxt.get_textHeight() - oldH;
		}
		this.logTxt.alpha = 1;
		this.logTxt.set_visible(true);
		this.lastLogTime = HxOverrides.now() / 1000;
	}
	,sync: function(ctx) {
		var scene = ctx.scene;
		if(scene != null) {
			this.posChanged = true;
			this.x = 0;
			this.posChanged = true;
			this.y = scene.height - this.height * this.scaleY;
			this.width = scene.width;
			this.tf.set_maxWidth(this.width);
			this.bg.tile.scaleToSize(this.width,this.height);
		}
		var log = this.logTxt;
		if(log.visible) {
			var v = this.bg.y - log.get_textHeight() + this.logDY;
			log.posChanged = true;
			log.y = v;
			var dt = HxOverrides.now() / 1000 - this.lastLogTime;
			if(dt > h2d_Console.HIDE_LOG_TIMEOUT && !this.bg.visible) {
				log.alpha -= ctx.elapsedTime * 4;
				if(log.alpha <= 0) {
					log.set_visible(false);
				}
			}
		}
		h2d_Object.prototype.sync.call(this,ctx);
	}
	,__class__: h2d_Console
});
var h2d_FlowAlign = $hxEnums["h2d.FlowAlign"] = { __ename__:"h2d.FlowAlign",__constructs__:null
	,Top: {_hx_name:"Top",_hx_index:0,__enum__:"h2d.FlowAlign",toString:$estr}
	,Left: {_hx_name:"Left",_hx_index:1,__enum__:"h2d.FlowAlign",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:2,__enum__:"h2d.FlowAlign",toString:$estr}
	,Middle: {_hx_name:"Middle",_hx_index:3,__enum__:"h2d.FlowAlign",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:4,__enum__:"h2d.FlowAlign",toString:$estr}
};
h2d_FlowAlign.__constructs__ = [h2d_FlowAlign.Top,h2d_FlowAlign.Left,h2d_FlowAlign.Right,h2d_FlowAlign.Middle,h2d_FlowAlign.Bottom];
h2d_FlowAlign.__empty_constructs__ = [h2d_FlowAlign.Top,h2d_FlowAlign.Left,h2d_FlowAlign.Right,h2d_FlowAlign.Middle,h2d_FlowAlign.Bottom];
var h2d_FlowLayout = $hxEnums["h2d.FlowLayout"] = { __ename__:"h2d.FlowLayout",__constructs__:null
	,Horizontal: {_hx_name:"Horizontal",_hx_index:0,__enum__:"h2d.FlowLayout",toString:$estr}
	,Vertical: {_hx_name:"Vertical",_hx_index:1,__enum__:"h2d.FlowLayout",toString:$estr}
	,Stack: {_hx_name:"Stack",_hx_index:2,__enum__:"h2d.FlowLayout",toString:$estr}
};
h2d_FlowLayout.__constructs__ = [h2d_FlowLayout.Horizontal,h2d_FlowLayout.Vertical,h2d_FlowLayout.Stack];
h2d_FlowLayout.__empty_constructs__ = [h2d_FlowLayout.Horizontal,h2d_FlowLayout.Vertical,h2d_FlowLayout.Stack];
var h2d_FlowOverflow = $hxEnums["h2d.FlowOverflow"] = { __ename__:"h2d.FlowOverflow",__constructs__:null
	,Expand: {_hx_name:"Expand",_hx_index:0,__enum__:"h2d.FlowOverflow",toString:$estr}
	,Limit: {_hx_name:"Limit",_hx_index:1,__enum__:"h2d.FlowOverflow",toString:$estr}
	,Hidden: {_hx_name:"Hidden",_hx_index:2,__enum__:"h2d.FlowOverflow",toString:$estr}
	,Scroll: {_hx_name:"Scroll",_hx_index:3,__enum__:"h2d.FlowOverflow",toString:$estr}
};
h2d_FlowOverflow.__constructs__ = [h2d_FlowOverflow.Expand,h2d_FlowOverflow.Limit,h2d_FlowOverflow.Hidden,h2d_FlowOverflow.Scroll];
h2d_FlowOverflow.__empty_constructs__ = [h2d_FlowOverflow.Expand,h2d_FlowOverflow.Limit,h2d_FlowOverflow.Hidden,h2d_FlowOverflow.Scroll];
var h2d_FlowProperties = function(elt) {
	this.constraint = true;
	this.lineBreak = false;
	this.calculatedHeight = 0;
	this.calculatedWidth = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.isAbsolute = false;
	this.paddingBottom = 0;
	this.paddingRight = 0;
	this.paddingTop = 0;
	this.paddingLeft = 0;
	this.elt = elt;
};
$hxClasses["h2d.FlowProperties"] = h2d_FlowProperties;
h2d_FlowProperties.__name__ = "h2d.FlowProperties";
h2d_FlowProperties.prototype = {
	align: function(vertical,horizontal) {
		this.verticalAlign = vertical;
		this.horizontalAlign = horizontal;
	}
	,set_isAbsolute: function(a) {
		if(a) {
			this.elt.constraintSize(-1,-1);
			this.isBreak = false;
		}
		return this.isAbsolute = a;
	}
	,set_autoSize: function(s) {
		this.autoSizeWidth = s;
		this.autoSizeHeight = s;
		return s;
	}
	,__class__: h2d_FlowProperties
};
var h2d_Kerning = function(c,o) {
	this.prevChar = c;
	this.offset = o;
};
$hxClasses["h2d.Kerning"] = h2d_Kerning;
h2d_Kerning.__name__ = "h2d.Kerning";
h2d_Kerning.prototype = {
	__class__: h2d_Kerning
};
var h2d_FontChar = function(t,w) {
	this.t = t;
	this.width = w;
};
$hxClasses["h2d.FontChar"] = h2d_FontChar;
h2d_FontChar.__name__ = "h2d.FontChar";
h2d_FontChar.prototype = {
	addKerning: function(prevChar,offset) {
		var k = new h2d_Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	,getKerningOffset: function(prevChar) {
		var k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	,clone: function() {
		var c = new h2d_FontChar(this.t.clone(),this.width);
		var k = this.kerning;
		if(k != null) {
			var kc = new h2d_Kerning(k.prevChar,k.offset);
			c.kerning = kc;
			k = k.next;
			while(k != null) {
				var kn = new h2d_Kerning(k.prevChar,k.offset);
				kc = kc.next = kn;
				k = k.next;
			}
		}
		return c;
	}
	,__class__: h2d_FontChar
};
var h2d_FontType = $hxEnums["h2d.FontType"] = { __ename__:"h2d.FontType",__constructs__:null
	,BitmapFont: {_hx_name:"BitmapFont",_hx_index:0,__enum__:"h2d.FontType",toString:$estr}
	,SignedDistanceField: ($_=function(channel,alphaCutoff,smoothing) { return {_hx_index:1,channel:channel,alphaCutoff:alphaCutoff,smoothing:smoothing,__enum__:"h2d.FontType",toString:$estr,__params__:function(){ return [this.channel,this.alphaCutoff,this.smoothing];}}; },$_._hx_name="SignedDistanceField",$_)
};
h2d_FontType.__constructs__ = [h2d_FontType.BitmapFont,h2d_FontType.SignedDistanceField];
h2d_FontType.__empty_constructs__ = [h2d_FontType.BitmapFont];
var h2d_Font = function(name,size,type) {
	this.offsetY = 0;
	this.offsetX = 0;
	this.name = name;
	this.size = size;
	this.initSize = size;
	this.glyphs = new haxe_ds_IntMap();
	this.defaultChar = this.nullChar = new h2d_FontChar(new h2d_Tile(null,0,0,0,0),0);
	this.charset = hxd_Charset.getDefault();
	if(name != null) {
		this.tilePath = haxe_io_Path.withExtension(name,"png");
	}
	if(type == null) {
		this.type = h2d_FontType.BitmapFont;
	} else {
		this.type = type;
	}
};
$hxClasses["h2d.Font"] = h2d_Font;
h2d_Font.__name__ = "h2d.Font";
h2d_Font.prototype = {
	getChar: function(code) {
		var c = this.glyphs.h[code];
		if(c == null) {
			c = this.charset.resolveChar(code,this.glyphs);
			if(c == null) {
				c = code == 13 || code == 10 ? this.nullChar : this.defaultChar;
			}
		}
		return c;
	}
	,setOffset: function(x,y) {
		var dx = x - this.offsetX;
		var dy = y - this.offsetY;
		if(dx == 0 && dy == 0) {
			return;
		}
		var g = this.glyphs.iterator();
		while(g.hasNext()) {
			var g1 = g.next();
			g1.t.dx += dx;
			g1.t.dy += dy;
		}
		this.offsetX += dx;
		this.offsetY += dy;
	}
	,clone: function() {
		var f = new h2d_Font(this.name,this.size);
		f.baseLine = this.baseLine;
		f.lineHeight = this.lineHeight;
		f.tile = this.tile.clone();
		f.charset = this.charset;
		f.defaultChar = this.defaultChar.clone();
		f.type = this.type;
		f.offsetX = this.offsetX;
		f.offsetY = this.offsetY;
		var g = this.glyphs.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var c = this.glyphs.h[g1];
			var c2 = c.clone();
			if(c == this.defaultChar) {
				f.defaultChar = c2;
			}
			f.glyphs.h[g1] = c2;
		}
		return f;
	}
	,resizeTo: function(size) {
		var ratio = size / this.initSize;
		var c = this.glyphs.iterator();
		while(c.hasNext()) {
			var c1 = c.next();
			c1.width *= ratio;
			c1.t.scaleToSize(c1.t.width * ratio,c1.t.height * ratio);
			c1.t.dx *= ratio;
			c1.t.dy *= ratio;
			var k = c1.kerning;
			while(k != null) {
				k.offset *= ratio;
				k = k.next;
			}
		}
		this.lineHeight = Math.ceil(this.lineHeight * ratio);
		this.baseLine = Math.ceil(this.baseLine * ratio);
		this.size = size;
	}
	,hasChar: function(code) {
		return this.glyphs.h[code] != null;
	}
	,dispose: function() {
		this.tile.dispose();
	}
	,calcBaseLine: function() {
		var padding = 0;
		var space = this.glyphs.h[32];
		if(space != null) {
			padding = space.t.height * .5;
		}
		var a = this.glyphs.h[65];
		if(a == null) {
			a = this.glyphs.h[97];
		}
		if(a == null) {
			a = this.glyphs.h[48];
		}
		if(a == null) {
			return this.lineHeight - 2 - padding;
		}
		return a.t.dy + a.t.height - padding;
	}
	,__class__: h2d_Font
};
var h2d_GPoint = function() {
};
$hxClasses["h2d.GPoint"] = h2d_GPoint;
h2d_GPoint.__name__ = "h2d.GPoint";
h2d_GPoint.prototype = {
	load: function(x,y,r,g,b,a) {
		this.x = x;
		this.y = y;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}
	,__class__: h2d_GPoint
};
var h3d_prim_Primitive = function() {
	this.refCount = 0;
};
$hxClasses["h3d.prim.Primitive"] = h3d_prim_Primitive;
h3d_prim_Primitive.__name__ = "h3d.prim.Primitive";
h3d_prim_Primitive.prototype = {
	triCount: function() {
		if(this.indexes != null) {
			return this.indexes.vertices / 3 | 0;
		} else if(this.buffer == null) {
			return 0;
		} else {
			return this.buffer.vertices / 3 | 0;
		}
	}
	,vertexCount: function() {
		return 0;
	}
	,getCollider: function() {
		throw haxe_Exception.thrown("not implemented for " + Std.string(this));
	}
	,getBounds: function() {
		throw haxe_Exception.thrown("not implemented for " + Std.string(this));
	}
	,incref: function() {
		this.refCount++;
	}
	,decref: function() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	,alloc: function(engine) {
		throw haxe_Exception.thrown("not implemented");
	}
	,selectMaterial: function(material) {
	}
	,getMaterialIndexes: function(material) {
		return { start : 0, count : this.indexes == null ? this.triCount() * 3 : this.indexes.vertices};
	}
	,buildNormalsDisplay: function() {
		throw haxe_Exception.thrown("not implemented for " + Std.string(this));
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			var b = this.buffer;
			engine.renderBuffer(b,engine.mem.getTriIndexes(b.vertices),3,0,-1);
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
	,__class__: h3d_prim_Primitive
};
var h2d__$Graphics_GraphicsContent = function() {
	h3d_prim_Primitive.call(this);
	this.buffers = [];
	this.state = new h2d_impl_BatchDrawState();
};
$hxClasses["h2d._Graphics.GraphicsContent"] = h2d__$Graphics_GraphicsContent;
h2d__$Graphics_GraphicsContent.__name__ = "h2d._Graphics.GraphicsContent";
h2d__$Graphics_GraphicsContent.__super__ = h3d_prim_Primitive;
h2d__$Graphics_GraphicsContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	addIndex: function(i) {
		this.index.push(i);
		var _this = this.state;
		_this.tail.count += 1;
		_this.totalCount += 1;
		this.indexDirty = true;
	}
	,add: function(x,y,u,v,r,g,b,a) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = u;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		this.bufferDirty = true;
	}
	,setTile: function(tile) {
		if(tile != null) {
			this.state.setTexture(tile.innerTex);
		}
	}
	,next: function() {
		var nvect = this.tmp.pos >> 3;
		if(nvect < 32768) {
			return false;
		}
		this.buffers.push({ buf : this.tmp, idx : this.index, vbuf : null, ibuf : null, state : this.state});
		this.tmp = hxd__$FloatBuffer_Float32Expand._new(0);
		this.index = new Array(0);
		var tex = this.state.tail.texture;
		this.state = new h2d_impl_BatchDrawState();
		this.state.setTexture(tex);
		h3d_prim_Primitive.prototype.dispose.call(this);
		return true;
	}
	,alloc: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		var alloc = hxd_impl_Allocator.get();
		this.buffer = alloc.ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA());
		this.indexes = alloc.ofIndexes(this.index);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf == null || b.vbuf.vbuf == null) {
				b.vbuf = alloc.ofFloats(b.buf,hxd_BufferFormat.get_XY_UV_RGBA());
			}
			if(b.ibuf == null || b.ibuf.vbuf == null) {
				b.ibuf = alloc.ofIndexes(b.idx);
			}
		}
		this.bufferDirty = false;
		this.indexDirty = false;
	}
	,doRender: function(ctx) {
		if(this.index.length == 0) {
			return;
		}
		this.flush();
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.state.drawIndexed(ctx,b.vbuf,b.ibuf);
		}
		this.state.drawIndexed(ctx,this.buffer,this.indexes);
	}
	,flush: function() {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(h3d_Engine.CURRENT);
		} else {
			var allocator = hxd_impl_Allocator.get();
			if(this.bufferDirty) {
				allocator.disposeBuffer(this.buffer);
				this.buffer = allocator.ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA());
				this.bufferDirty = false;
			}
			if(this.indexDirty) {
				allocator.disposeIndexBuffer(this.indexes);
				this.indexes = allocator.ofIndexes(this.index);
				this.indexDirty = false;
			}
		}
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf != null) {
				hxd_impl_Allocator.get().disposeBuffer(b.vbuf);
			}
			if(b.ibuf != null) {
				hxd_impl_Allocator.get().disposeIndexBuffer(b.ibuf);
			}
			b.vbuf = null;
			b.ibuf = null;
			b.state.clear();
		}
		if(this.buffer != null) {
			hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			this.buffer = null;
		}
		if(this.indexes != null) {
			hxd_impl_Allocator.get().disposeIndexBuffer(this.indexes);
			this.indexes = null;
		}
		this.state.clear();
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,clear: function() {
		this.dispose();
		this.tmp = hxd__$FloatBuffer_Float32Expand._new(0);
		this.index = new Array(0);
		this.buffers = [];
	}
	,__class__: h2d__$Graphics_GraphicsContent
});
var h2d_Graphics = function(parent) {
	this.bevel = 0.25;
	this.my = 0.;
	this.mx = 0.;
	this.md = 1.;
	this.mc = 0.;
	this.mb = 0.;
	this.ma = 1.;
	h2d_Drawable.call(this,parent);
	this.content = new h2d__$Graphics_GraphicsContent();
	this.tile = h2d_Tile.fromColor(16777215);
	this.clear();
};
$hxClasses["h2d.Graphics"] = h2d_Graphics;
h2d_Graphics.__name__ = "h2d.Graphics";
h2d_Graphics.__super__ = h2d_Drawable;
h2d_Graphics.prototype = $extend(h2d_Drawable.prototype,{
	onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.clear();
	}
	,clear: function() {
		this.content.clear();
		this.tmpPoints = [];
		this.pindex = 0;
		this.lineSize = 0;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.yMax = -Infinity;
		this.xMax = -Infinity;
		this.xMinSize = Infinity;
		this.yMinSize = Infinity;
		this.yMaxSize = -Infinity;
		this.xMaxSize = -Infinity;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			if(forSize) {
				this.addBounds(relativeTo,out,this.xMinSize,this.yMinSize,this.xMaxSize - this.xMinSize,this.yMaxSize - this.yMinSize);
			} else {
				this.addBounds(relativeTo,out,this.xMin,this.yMin,this.xMax - this.xMin,this.yMax - this.yMin);
			}
		}
	}
	,isConvex: function(points) {
		var first = true;
		var sign = false;
		var _g = 0;
		var _g1 = points.length;
		while(_g < _g1) {
			var i = _g++;
			var p1 = points[i];
			var p2 = points[(i + 1) % points.length];
			var p3 = points[(i + 2) % points.length];
			var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
			if(first) {
				first = false;
				sign = s;
			} else if(sign != s) {
				return false;
			}
		}
		return true;
	}
	,flushLine: function(start) {
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		this.content.setTile(h2d_Tile.fromColor(16777215));
		var closed = p.x == prev.x && p.y == prev.y;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			var gp = new h2d_GPoint();
			gp.load(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,0,0,0,0);
			pts.push(gp);
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			var gp = new h2d_GPoint();
			gp.load(p.x * 2 - pNext.x,p.y * 2 - pNext.y,0,0,0,0);
			prev = gp;
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			if(size < 0.1) {
				size = 0.1;
			}
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			if(size > this.bevel) {
				var _this = this.content;
				var x = p.x + nx;
				var y = p.y + ny;
				var r = p.r;
				var g = p.g;
				var b = p.b;
				var a = p.a;
				var this1 = _this.tmp;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = x;
				var this2 = _this.tmp;
				if(this2.pos == this2.array.length) {
					var newSize1 = this2.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(this2.array);
					this2.array = newArray1;
				}
				this2.array[this2.pos++] = y;
				var this3 = _this.tmp;
				if(this3.pos == this3.array.length) {
					var newSize2 = this3.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(this3.array);
					this3.array = newArray2;
				}
				this3.array[this3.pos++] = 0;
				var this4 = _this.tmp;
				if(this4.pos == this4.array.length) {
					var newSize3 = this4.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(this4.array);
					this4.array = newArray3;
				}
				this4.array[this4.pos++] = 0;
				var this5 = _this.tmp;
				if(this5.pos == this5.array.length) {
					var newSize4 = this5.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(this5.array);
					this5.array = newArray4;
				}
				this5.array[this5.pos++] = r;
				var this6 = _this.tmp;
				if(this6.pos == this6.array.length) {
					var newSize5 = this6.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(this6.array);
					this6.array = newArray5;
				}
				this6.array[this6.pos++] = g;
				var this7 = _this.tmp;
				if(this7.pos == this7.array.length) {
					var newSize6 = this7.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(this7.array);
					this7.array = newArray6;
				}
				this7.array[this7.pos++] = b;
				var this8 = _this.tmp;
				if(this8.pos == this8.array.length) {
					var newSize7 = this8.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(this8.array);
					this8.array = newArray7;
				}
				this8.array[this8.pos++] = a;
				_this.bufferDirty = true;
				var _this1 = this.content;
				var x1 = p.x - nx;
				var y1 = p.y - ny;
				var r1 = p.r;
				var g1 = p.g;
				var b1 = p.b;
				var a1 = p.a;
				var this9 = _this1.tmp;
				if(this9.pos == this9.array.length) {
					var newSize8 = this9.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(this9.array);
					this9.array = newArray8;
				}
				this9.array[this9.pos++] = x1;
				var this10 = _this1.tmp;
				if(this10.pos == this10.array.length) {
					var newSize9 = this10.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(this10.array);
					this10.array = newArray9;
				}
				this10.array[this10.pos++] = y1;
				var this11 = _this1.tmp;
				if(this11.pos == this11.array.length) {
					var newSize10 = this11.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(this11.array);
					this11.array = newArray10;
				}
				this11.array[this11.pos++] = 0;
				var this12 = _this1.tmp;
				if(this12.pos == this12.array.length) {
					var newSize11 = this12.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(this12.array);
					this12.array = newArray11;
				}
				this12.array[this12.pos++] = 0;
				var this13 = _this1.tmp;
				if(this13.pos == this13.array.length) {
					var newSize12 = this13.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(this13.array);
					this13.array = newArray12;
				}
				this13.array[this13.pos++] = r1;
				var this14 = _this1.tmp;
				if(this14.pos == this14.array.length) {
					var newSize13 = this14.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(this14.array);
					this14.array = newArray13;
				}
				this14.array[this14.pos++] = g1;
				var this15 = _this1.tmp;
				if(this15.pos == this15.array.length) {
					var newSize14 = this15.array.length << 1;
					if(newSize14 < 128) {
						newSize14 = 128;
					}
					var newArray14 = new Float32Array(newSize14);
					newArray14.set(this15.array);
					this15.array = newArray14;
				}
				this15.array[this15.pos++] = b1;
				var this16 = _this1.tmp;
				if(this16.pos == this16.array.length) {
					var newSize15 = this16.array.length << 1;
					if(newSize15 < 128) {
						newSize15 = 128;
					}
					var newArray15 = new Float32Array(newSize15);
					newArray15.set(this16.array);
					this16.array = newArray15;
				}
				this16.array[this16.pos++] = a1;
				_this1.bufferDirty = true;
				var pnext = i == last ? start : this.pindex + 2;
				if(i < count - 1 || closed) {
					var _this2 = this.content;
					_this2.index.push(this.pindex);
					var _this3 = _this2.state;
					_this3.tail.count += 1;
					_this3.totalCount += 1;
					_this2.indexDirty = true;
					var _this4 = this.content;
					_this4.index.push(this.pindex + 1);
					var _this5 = _this4.state;
					_this5.tail.count += 1;
					_this5.totalCount += 1;
					_this4.indexDirty = true;
					var _this6 = this.content;
					_this6.index.push(pnext);
					var _this7 = _this6.state;
					_this7.tail.count += 1;
					_this7.totalCount += 1;
					_this6.indexDirty = true;
					var _this8 = this.content;
					_this8.index.push(this.pindex + 1);
					var _this9 = _this8.state;
					_this9.tail.count += 1;
					_this9.totalCount += 1;
					_this8.indexDirty = true;
					var _this10 = this.content;
					_this10.index.push(pnext);
					var _this11 = _this10.state;
					_this11.tail.count += 1;
					_this11.totalCount += 1;
					_this10.indexDirty = true;
					var _this12 = this.content;
					_this12.index.push(pnext + 1);
					var _this13 = _this12.state;
					_this13.tail.count += 1;
					_this13.totalCount += 1;
					_this12.indexDirty = true;
				}
				this.pindex += 2;
			} else {
				var n0x = next.x - p.x;
				var n0y = next.y - p.y;
				var sign = n0x * nx + n0y * ny;
				var nnx = -ny;
				var nny = nx;
				var size1 = nnx * nx1 * ns1 + nny * ny1 * ns1;
				var d1 = this.lineSize * 0.5 / size1;
				nnx *= d1;
				nny *= d1;
				var pnext1 = i == last ? start : this.pindex + 3;
				if(sign > 0) {
					var _this14 = this.content;
					var x2 = p.x + nx;
					var y2 = p.y + ny;
					var r2 = p.r;
					var g2 = p.g;
					var b2 = p.b;
					var a2 = p.a;
					var this17 = _this14.tmp;
					if(this17.pos == this17.array.length) {
						var newSize16 = this17.array.length << 1;
						if(newSize16 < 128) {
							newSize16 = 128;
						}
						var newArray16 = new Float32Array(newSize16);
						newArray16.set(this17.array);
						this17.array = newArray16;
					}
					this17.array[this17.pos++] = x2;
					var this18 = _this14.tmp;
					if(this18.pos == this18.array.length) {
						var newSize17 = this18.array.length << 1;
						if(newSize17 < 128) {
							newSize17 = 128;
						}
						var newArray17 = new Float32Array(newSize17);
						newArray17.set(this18.array);
						this18.array = newArray17;
					}
					this18.array[this18.pos++] = y2;
					var this19 = _this14.tmp;
					if(this19.pos == this19.array.length) {
						var newSize18 = this19.array.length << 1;
						if(newSize18 < 128) {
							newSize18 = 128;
						}
						var newArray18 = new Float32Array(newSize18);
						newArray18.set(this19.array);
						this19.array = newArray18;
					}
					this19.array[this19.pos++] = 0;
					var this20 = _this14.tmp;
					if(this20.pos == this20.array.length) {
						var newSize19 = this20.array.length << 1;
						if(newSize19 < 128) {
							newSize19 = 128;
						}
						var newArray19 = new Float32Array(newSize19);
						newArray19.set(this20.array);
						this20.array = newArray19;
					}
					this20.array[this20.pos++] = 0;
					var this21 = _this14.tmp;
					if(this21.pos == this21.array.length) {
						var newSize20 = this21.array.length << 1;
						if(newSize20 < 128) {
							newSize20 = 128;
						}
						var newArray20 = new Float32Array(newSize20);
						newArray20.set(this21.array);
						this21.array = newArray20;
					}
					this21.array[this21.pos++] = r2;
					var this22 = _this14.tmp;
					if(this22.pos == this22.array.length) {
						var newSize21 = this22.array.length << 1;
						if(newSize21 < 128) {
							newSize21 = 128;
						}
						var newArray21 = new Float32Array(newSize21);
						newArray21.set(this22.array);
						this22.array = newArray21;
					}
					this22.array[this22.pos++] = g2;
					var this23 = _this14.tmp;
					if(this23.pos == this23.array.length) {
						var newSize22 = this23.array.length << 1;
						if(newSize22 < 128) {
							newSize22 = 128;
						}
						var newArray22 = new Float32Array(newSize22);
						newArray22.set(this23.array);
						this23.array = newArray22;
					}
					this23.array[this23.pos++] = b2;
					var this24 = _this14.tmp;
					if(this24.pos == this24.array.length) {
						var newSize23 = this24.array.length << 1;
						if(newSize23 < 128) {
							newSize23 = 128;
						}
						var newArray23 = new Float32Array(newSize23);
						newArray23.set(this24.array);
						this24.array = newArray23;
					}
					this24.array[this24.pos++] = a2;
					_this14.bufferDirty = true;
					var _this15 = this.content;
					var x3 = p.x - nnx;
					var y3 = p.y - nny;
					var r3 = p.r;
					var g3 = p.g;
					var b3 = p.b;
					var a3 = p.a;
					var this25 = _this15.tmp;
					if(this25.pos == this25.array.length) {
						var newSize24 = this25.array.length << 1;
						if(newSize24 < 128) {
							newSize24 = 128;
						}
						var newArray24 = new Float32Array(newSize24);
						newArray24.set(this25.array);
						this25.array = newArray24;
					}
					this25.array[this25.pos++] = x3;
					var this26 = _this15.tmp;
					if(this26.pos == this26.array.length) {
						var newSize25 = this26.array.length << 1;
						if(newSize25 < 128) {
							newSize25 = 128;
						}
						var newArray25 = new Float32Array(newSize25);
						newArray25.set(this26.array);
						this26.array = newArray25;
					}
					this26.array[this26.pos++] = y3;
					var this27 = _this15.tmp;
					if(this27.pos == this27.array.length) {
						var newSize26 = this27.array.length << 1;
						if(newSize26 < 128) {
							newSize26 = 128;
						}
						var newArray26 = new Float32Array(newSize26);
						newArray26.set(this27.array);
						this27.array = newArray26;
					}
					this27.array[this27.pos++] = 0;
					var this28 = _this15.tmp;
					if(this28.pos == this28.array.length) {
						var newSize27 = this28.array.length << 1;
						if(newSize27 < 128) {
							newSize27 = 128;
						}
						var newArray27 = new Float32Array(newSize27);
						newArray27.set(this28.array);
						this28.array = newArray27;
					}
					this28.array[this28.pos++] = 0;
					var this29 = _this15.tmp;
					if(this29.pos == this29.array.length) {
						var newSize28 = this29.array.length << 1;
						if(newSize28 < 128) {
							newSize28 = 128;
						}
						var newArray28 = new Float32Array(newSize28);
						newArray28.set(this29.array);
						this29.array = newArray28;
					}
					this29.array[this29.pos++] = r3;
					var this30 = _this15.tmp;
					if(this30.pos == this30.array.length) {
						var newSize29 = this30.array.length << 1;
						if(newSize29 < 128) {
							newSize29 = 128;
						}
						var newArray29 = new Float32Array(newSize29);
						newArray29.set(this30.array);
						this30.array = newArray29;
					}
					this30.array[this30.pos++] = g3;
					var this31 = _this15.tmp;
					if(this31.pos == this31.array.length) {
						var newSize30 = this31.array.length << 1;
						if(newSize30 < 128) {
							newSize30 = 128;
						}
						var newArray30 = new Float32Array(newSize30);
						newArray30.set(this31.array);
						this31.array = newArray30;
					}
					this31.array[this31.pos++] = b3;
					var this32 = _this15.tmp;
					if(this32.pos == this32.array.length) {
						var newSize31 = this32.array.length << 1;
						if(newSize31 < 128) {
							newSize31 = 128;
						}
						var newArray31 = new Float32Array(newSize31);
						newArray31.set(this32.array);
						this32.array = newArray31;
					}
					this32.array[this32.pos++] = a3;
					_this15.bufferDirty = true;
					var _this16 = this.content;
					var x4 = p.x + nnx;
					var y4 = p.y + nny;
					var r4 = p.r;
					var g4 = p.g;
					var b4 = p.b;
					var a4 = p.a;
					var this33 = _this16.tmp;
					if(this33.pos == this33.array.length) {
						var newSize32 = this33.array.length << 1;
						if(newSize32 < 128) {
							newSize32 = 128;
						}
						var newArray32 = new Float32Array(newSize32);
						newArray32.set(this33.array);
						this33.array = newArray32;
					}
					this33.array[this33.pos++] = x4;
					var this34 = _this16.tmp;
					if(this34.pos == this34.array.length) {
						var newSize33 = this34.array.length << 1;
						if(newSize33 < 128) {
							newSize33 = 128;
						}
						var newArray33 = new Float32Array(newSize33);
						newArray33.set(this34.array);
						this34.array = newArray33;
					}
					this34.array[this34.pos++] = y4;
					var this35 = _this16.tmp;
					if(this35.pos == this35.array.length) {
						var newSize34 = this35.array.length << 1;
						if(newSize34 < 128) {
							newSize34 = 128;
						}
						var newArray34 = new Float32Array(newSize34);
						newArray34.set(this35.array);
						this35.array = newArray34;
					}
					this35.array[this35.pos++] = 0;
					var this36 = _this16.tmp;
					if(this36.pos == this36.array.length) {
						var newSize35 = this36.array.length << 1;
						if(newSize35 < 128) {
							newSize35 = 128;
						}
						var newArray35 = new Float32Array(newSize35);
						newArray35.set(this36.array);
						this36.array = newArray35;
					}
					this36.array[this36.pos++] = 0;
					var this37 = _this16.tmp;
					if(this37.pos == this37.array.length) {
						var newSize36 = this37.array.length << 1;
						if(newSize36 < 128) {
							newSize36 = 128;
						}
						var newArray36 = new Float32Array(newSize36);
						newArray36.set(this37.array);
						this37.array = newArray36;
					}
					this37.array[this37.pos++] = r4;
					var this38 = _this16.tmp;
					if(this38.pos == this38.array.length) {
						var newSize37 = this38.array.length << 1;
						if(newSize37 < 128) {
							newSize37 = 128;
						}
						var newArray37 = new Float32Array(newSize37);
						newArray37.set(this38.array);
						this38.array = newArray37;
					}
					this38.array[this38.pos++] = g4;
					var this39 = _this16.tmp;
					if(this39.pos == this39.array.length) {
						var newSize38 = this39.array.length << 1;
						if(newSize38 < 128) {
							newSize38 = 128;
						}
						var newArray38 = new Float32Array(newSize38);
						newArray38.set(this39.array);
						this39.array = newArray38;
					}
					this39.array[this39.pos++] = b4;
					var this40 = _this16.tmp;
					if(this40.pos == this40.array.length) {
						var newSize39 = this40.array.length << 1;
						if(newSize39 < 128) {
							newSize39 = 128;
						}
						var newArray39 = new Float32Array(newSize39);
						newArray39.set(this40.array);
						this40.array = newArray39;
					}
					this40.array[this40.pos++] = a4;
					_this16.bufferDirty = true;
					var _this17 = this.content;
					_this17.index.push(this.pindex);
					var _this18 = _this17.state;
					_this18.tail.count += 1;
					_this18.totalCount += 1;
					_this17.indexDirty = true;
					var _this19 = this.content;
					_this19.index.push(pnext1);
					var _this20 = _this19.state;
					_this20.tail.count += 1;
					_this20.totalCount += 1;
					_this19.indexDirty = true;
					var _this21 = this.content;
					_this21.index.push(this.pindex + 2);
					var _this22 = _this21.state;
					_this22.tail.count += 1;
					_this22.totalCount += 1;
					_this21.indexDirty = true;
					var _this23 = this.content;
					_this23.index.push(this.pindex + 2);
					var _this24 = _this23.state;
					_this24.tail.count += 1;
					_this24.totalCount += 1;
					_this23.indexDirty = true;
					var _this25 = this.content;
					_this25.index.push(pnext1);
					var _this26 = _this25.state;
					_this26.tail.count += 1;
					_this26.totalCount += 1;
					_this25.indexDirty = true;
					var _this27 = this.content;
					_this27.index.push(pnext1 + 1);
					var _this28 = _this27.state;
					_this28.tail.count += 1;
					_this28.totalCount += 1;
					_this27.indexDirty = true;
				} else {
					var _this29 = this.content;
					var x5 = p.x + nnx;
					var y5 = p.y + nny;
					var r5 = p.r;
					var g5 = p.g;
					var b5 = p.b;
					var a5 = p.a;
					var this41 = _this29.tmp;
					if(this41.pos == this41.array.length) {
						var newSize40 = this41.array.length << 1;
						if(newSize40 < 128) {
							newSize40 = 128;
						}
						var newArray40 = new Float32Array(newSize40);
						newArray40.set(this41.array);
						this41.array = newArray40;
					}
					this41.array[this41.pos++] = x5;
					var this42 = _this29.tmp;
					if(this42.pos == this42.array.length) {
						var newSize41 = this42.array.length << 1;
						if(newSize41 < 128) {
							newSize41 = 128;
						}
						var newArray41 = new Float32Array(newSize41);
						newArray41.set(this42.array);
						this42.array = newArray41;
					}
					this42.array[this42.pos++] = y5;
					var this43 = _this29.tmp;
					if(this43.pos == this43.array.length) {
						var newSize42 = this43.array.length << 1;
						if(newSize42 < 128) {
							newSize42 = 128;
						}
						var newArray42 = new Float32Array(newSize42);
						newArray42.set(this43.array);
						this43.array = newArray42;
					}
					this43.array[this43.pos++] = 0;
					var this44 = _this29.tmp;
					if(this44.pos == this44.array.length) {
						var newSize43 = this44.array.length << 1;
						if(newSize43 < 128) {
							newSize43 = 128;
						}
						var newArray43 = new Float32Array(newSize43);
						newArray43.set(this44.array);
						this44.array = newArray43;
					}
					this44.array[this44.pos++] = 0;
					var this45 = _this29.tmp;
					if(this45.pos == this45.array.length) {
						var newSize44 = this45.array.length << 1;
						if(newSize44 < 128) {
							newSize44 = 128;
						}
						var newArray44 = new Float32Array(newSize44);
						newArray44.set(this45.array);
						this45.array = newArray44;
					}
					this45.array[this45.pos++] = r5;
					var this46 = _this29.tmp;
					if(this46.pos == this46.array.length) {
						var newSize45 = this46.array.length << 1;
						if(newSize45 < 128) {
							newSize45 = 128;
						}
						var newArray45 = new Float32Array(newSize45);
						newArray45.set(this46.array);
						this46.array = newArray45;
					}
					this46.array[this46.pos++] = g5;
					var this47 = _this29.tmp;
					if(this47.pos == this47.array.length) {
						var newSize46 = this47.array.length << 1;
						if(newSize46 < 128) {
							newSize46 = 128;
						}
						var newArray46 = new Float32Array(newSize46);
						newArray46.set(this47.array);
						this47.array = newArray46;
					}
					this47.array[this47.pos++] = b5;
					var this48 = _this29.tmp;
					if(this48.pos == this48.array.length) {
						var newSize47 = this48.array.length << 1;
						if(newSize47 < 128) {
							newSize47 = 128;
						}
						var newArray47 = new Float32Array(newSize47);
						newArray47.set(this48.array);
						this48.array = newArray47;
					}
					this48.array[this48.pos++] = a5;
					_this29.bufferDirty = true;
					var _this30 = this.content;
					var x6 = p.x - nx;
					var y6 = p.y - ny;
					var r6 = p.r;
					var g6 = p.g;
					var b6 = p.b;
					var a6 = p.a;
					var this49 = _this30.tmp;
					if(this49.pos == this49.array.length) {
						var newSize48 = this49.array.length << 1;
						if(newSize48 < 128) {
							newSize48 = 128;
						}
						var newArray48 = new Float32Array(newSize48);
						newArray48.set(this49.array);
						this49.array = newArray48;
					}
					this49.array[this49.pos++] = x6;
					var this50 = _this30.tmp;
					if(this50.pos == this50.array.length) {
						var newSize49 = this50.array.length << 1;
						if(newSize49 < 128) {
							newSize49 = 128;
						}
						var newArray49 = new Float32Array(newSize49);
						newArray49.set(this50.array);
						this50.array = newArray49;
					}
					this50.array[this50.pos++] = y6;
					var this51 = _this30.tmp;
					if(this51.pos == this51.array.length) {
						var newSize50 = this51.array.length << 1;
						if(newSize50 < 128) {
							newSize50 = 128;
						}
						var newArray50 = new Float32Array(newSize50);
						newArray50.set(this51.array);
						this51.array = newArray50;
					}
					this51.array[this51.pos++] = 0;
					var this52 = _this30.tmp;
					if(this52.pos == this52.array.length) {
						var newSize51 = this52.array.length << 1;
						if(newSize51 < 128) {
							newSize51 = 128;
						}
						var newArray51 = new Float32Array(newSize51);
						newArray51.set(this52.array);
						this52.array = newArray51;
					}
					this52.array[this52.pos++] = 0;
					var this53 = _this30.tmp;
					if(this53.pos == this53.array.length) {
						var newSize52 = this53.array.length << 1;
						if(newSize52 < 128) {
							newSize52 = 128;
						}
						var newArray52 = new Float32Array(newSize52);
						newArray52.set(this53.array);
						this53.array = newArray52;
					}
					this53.array[this53.pos++] = r6;
					var this54 = _this30.tmp;
					if(this54.pos == this54.array.length) {
						var newSize53 = this54.array.length << 1;
						if(newSize53 < 128) {
							newSize53 = 128;
						}
						var newArray53 = new Float32Array(newSize53);
						newArray53.set(this54.array);
						this54.array = newArray53;
					}
					this54.array[this54.pos++] = g6;
					var this55 = _this30.tmp;
					if(this55.pos == this55.array.length) {
						var newSize54 = this55.array.length << 1;
						if(newSize54 < 128) {
							newSize54 = 128;
						}
						var newArray54 = new Float32Array(newSize54);
						newArray54.set(this55.array);
						this55.array = newArray54;
					}
					this55.array[this55.pos++] = b6;
					var this56 = _this30.tmp;
					if(this56.pos == this56.array.length) {
						var newSize55 = this56.array.length << 1;
						if(newSize55 < 128) {
							newSize55 = 128;
						}
						var newArray55 = new Float32Array(newSize55);
						newArray55.set(this56.array);
						this56.array = newArray55;
					}
					this56.array[this56.pos++] = a6;
					_this30.bufferDirty = true;
					var _this31 = this.content;
					var x7 = p.x - nnx;
					var y7 = p.y - nny;
					var r7 = p.r;
					var g7 = p.g;
					var b7 = p.b;
					var a7 = p.a;
					var this57 = _this31.tmp;
					if(this57.pos == this57.array.length) {
						var newSize56 = this57.array.length << 1;
						if(newSize56 < 128) {
							newSize56 = 128;
						}
						var newArray56 = new Float32Array(newSize56);
						newArray56.set(this57.array);
						this57.array = newArray56;
					}
					this57.array[this57.pos++] = x7;
					var this58 = _this31.tmp;
					if(this58.pos == this58.array.length) {
						var newSize57 = this58.array.length << 1;
						if(newSize57 < 128) {
							newSize57 = 128;
						}
						var newArray57 = new Float32Array(newSize57);
						newArray57.set(this58.array);
						this58.array = newArray57;
					}
					this58.array[this58.pos++] = y7;
					var this59 = _this31.tmp;
					if(this59.pos == this59.array.length) {
						var newSize58 = this59.array.length << 1;
						if(newSize58 < 128) {
							newSize58 = 128;
						}
						var newArray58 = new Float32Array(newSize58);
						newArray58.set(this59.array);
						this59.array = newArray58;
					}
					this59.array[this59.pos++] = 0;
					var this60 = _this31.tmp;
					if(this60.pos == this60.array.length) {
						var newSize59 = this60.array.length << 1;
						if(newSize59 < 128) {
							newSize59 = 128;
						}
						var newArray59 = new Float32Array(newSize59);
						newArray59.set(this60.array);
						this60.array = newArray59;
					}
					this60.array[this60.pos++] = 0;
					var this61 = _this31.tmp;
					if(this61.pos == this61.array.length) {
						var newSize60 = this61.array.length << 1;
						if(newSize60 < 128) {
							newSize60 = 128;
						}
						var newArray60 = new Float32Array(newSize60);
						newArray60.set(this61.array);
						this61.array = newArray60;
					}
					this61.array[this61.pos++] = r7;
					var this62 = _this31.tmp;
					if(this62.pos == this62.array.length) {
						var newSize61 = this62.array.length << 1;
						if(newSize61 < 128) {
							newSize61 = 128;
						}
						var newArray61 = new Float32Array(newSize61);
						newArray61.set(this62.array);
						this62.array = newArray61;
					}
					this62.array[this62.pos++] = g7;
					var this63 = _this31.tmp;
					if(this63.pos == this63.array.length) {
						var newSize62 = this63.array.length << 1;
						if(newSize62 < 128) {
							newSize62 = 128;
						}
						var newArray62 = new Float32Array(newSize62);
						newArray62.set(this63.array);
						this63.array = newArray62;
					}
					this63.array[this63.pos++] = b7;
					var this64 = _this31.tmp;
					if(this64.pos == this64.array.length) {
						var newSize63 = this64.array.length << 1;
						if(newSize63 < 128) {
							newSize63 = 128;
						}
						var newArray63 = new Float32Array(newSize63);
						newArray63.set(this64.array);
						this64.array = newArray63;
					}
					this64.array[this64.pos++] = a7;
					_this31.bufferDirty = true;
					var _this32 = this.content;
					_this32.index.push(this.pindex + 1);
					var _this33 = _this32.state;
					_this33.tail.count += 1;
					_this33.totalCount += 1;
					_this32.indexDirty = true;
					var _this34 = this.content;
					_this34.index.push(pnext1);
					var _this35 = _this34.state;
					_this35.tail.count += 1;
					_this35.totalCount += 1;
					_this34.indexDirty = true;
					var _this36 = this.content;
					_this36.index.push(this.pindex + 2);
					var _this37 = _this36.state;
					_this37.tail.count += 1;
					_this37.totalCount += 1;
					_this36.indexDirty = true;
					var _this38 = this.content;
					_this38.index.push(this.pindex + 1);
					var _this39 = _this38.state;
					_this39.tail.count += 1;
					_this39.totalCount += 1;
					_this38.indexDirty = true;
					var _this40 = this.content;
					_this40.index.push(pnext1);
					var _this41 = _this40.state;
					_this41.tail.count += 1;
					_this41.totalCount += 1;
					_this40.indexDirty = true;
					var _this42 = this.content;
					_this42.index.push(pnext1 + 1);
					var _this43 = _this42.state;
					_this43.tail.count += 1;
					_this43.totalCount += 1;
					_this42.indexDirty = true;
				}
				var _this44 = this.content;
				_this44.index.push(this.pindex);
				var _this45 = _this44.state;
				_this45.tail.count += 1;
				_this45.totalCount += 1;
				_this44.indexDirty = true;
				var _this46 = this.content;
				_this46.index.push(this.pindex + 1);
				var _this47 = _this46.state;
				_this47.tail.count += 1;
				_this47.totalCount += 1;
				_this46.indexDirty = true;
				var _this48 = this.content;
				_this48.index.push(this.pindex + 2);
				var _this49 = _this48.state;
				_this49.tail.count += 1;
				_this49.totalCount += 1;
				_this48.indexDirty = true;
				this.pindex += 3;
			}
			prev = p;
			p = next;
		}
		this.content.setTile(this.tile);
	}
	,flushFill: function(i0) {
		if(this.tmpPoints.length < 3) {
			return;
		}
		var pts = this.tmpPoints;
		var p0 = pts[0];
		var p1 = pts[pts.length - 1];
		var last = null;
		var tmp;
		var f = p0.x - p1.x;
		if((f < 0 ? -f : f) < 1e-9) {
			var f = p0.y - p1.y;
			tmp = (f < 0 ? -f : f) < 1e-9;
		} else {
			tmp = false;
		}
		if(tmp) {
			last = pts.pop();
		}
		if(this.isConvex(pts)) {
			var _g = 1;
			var _g1 = pts.length - 1;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.content;
				_this.index.push(i0);
				var _this1 = _this.state;
				_this1.tail.count += 1;
				_this1.totalCount += 1;
				_this.indexDirty = true;
				var _this2 = this.content;
				_this2.index.push(i0 + i);
				var _this3 = _this2.state;
				_this3.tail.count += 1;
				_this3.totalCount += 1;
				_this2.indexDirty = true;
				var _this4 = this.content;
				_this4.index.push(i0 + i + 1);
				var _this5 = _this4.state;
				_this5.tail.count += 1;
				_this5.totalCount += 1;
				_this4.indexDirty = true;
			}
		} else {
			var ear = h2d_Graphics.EARCUT;
			if(ear == null) {
				ear = new hxd_earcut_Earcut();
				h2d_Graphics.EARCUT = ear;
			}
			var _g = 0;
			var _g1 = ear.triangulate_h2d_GPoint(pts);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var _this = this.content;
				_this.index.push(i + i0);
				var _this1 = _this.state;
				_this1.tail.count += 1;
				_this1.totalCount += 1;
				_this.indexDirty = true;
			}
		}
		if(last != null) {
			pts.push(last);
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.doFill) {
			this.flushFill(this.pindex);
			this.pindex += this.tmpPoints.length;
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		if(this.lineSize > 0) {
			this.flushLine(this.pindex);
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		this.tmpPoints = [];
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		this.flush();
		this.tile = h2d_Tile.fromColor(16777215);
		this.content.setTile(this.tile);
		var alpha1 = alpha;
		if(alpha1 == null) {
			alpha1 = 1.;
		}
		this.curA = alpha1;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
		this.doFill = true;
	}
	,beginTileFill: function(dx,dy,scaleX,scaleY,tile) {
		if(tile == null) {
			tile = this.tile;
		}
		if(tile == null) {
			throw haxe_Exception.thrown("Tile not specified");
		}
		this.flush();
		this.tile = tile;
		this.content.setTile(tile);
		this.curA = 1.;
		this.curR = 1.;
		this.curG = 1.;
		this.curB = 1.;
		this.doFill = true;
		if(dx == null) {
			dx = 0;
		}
		if(dy == null) {
			dy = 0;
		}
		if(scaleX == null) {
			scaleX = 1;
		}
		if(scaleY == null) {
			scaleY = 1;
		}
		dx -= tile.x;
		dy -= tile.y;
		var tex = tile.innerTex;
		var pixWidth = 1 / tex.width;
		var pixHeight = 1 / tex.height;
		this.ma = pixWidth / scaleX;
		this.mb = 0;
		this.mc = 0;
		this.md = pixHeight / scaleY;
		this.mx = -dx * this.ma;
		this.my = -dy * this.md;
	}
	,drawTile: function(x,y,tile) {
		this.beginTileFill(x,y,null,null,tile);
		this.drawRect(x,y,tile.width,tile.height);
		this.endFill();
	}
	,lineStyle: function(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0;
		}
		this.flush();
		this.lineSize = size;
		this.lineA = alpha;
		this.lineR = (color >> 16 & 255) / 255.;
		this.lineG = (color >> 8 & 255) / 255.;
		this.lineB = (color & 255) / 255.;
	}
	,moveTo: function(x,y) {
		this.flush();
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
	}
	,endFill: function() {
		this.flush();
		this.doFill = false;
	}
	,setColor: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.curA = alpha;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
	}
	,drawRect: function(x,y,w,h) {
		this.flush();
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var x1 = x + w;
		this.addVertex(x1,y,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y * this.mc + this.mx,x1 * this.mb + y * this.md + this.my);
		var x1 = x + w;
		var y1 = y + h;
		this.addVertex(x1,y1,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y1 * this.mc + this.mx,x1 * this.mb + y1 * this.md + this.my);
		var y1 = y + h;
		this.addVertex(x,y1,this.curR,this.curG,this.curB,this.curA,x * this.ma + y1 * this.mc + this.mx,x * this.mb + y1 * this.md + this.my);
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var e = 0.01;
		this.tmpPoints[0].x += e;
		this.tmpPoints[0].y += e;
		this.tmpPoints[1].y += e;
		this.tmpPoints[3].x += e;
		this.tmpPoints[4].x += e;
		this.tmpPoints[4].y += e;
		this.flush();
	}
	,drawRoundedRect: function(x,y,w,h,radius,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		var _gthis = this;
		if(radius <= 0) {
			this.drawRect(x,y,w,h);
			return;
		}
		x += radius;
		y += radius;
		w -= radius * 2;
		h -= radius * 2;
		this.flush();
		if(nsegments == 0) {
			var f = radius * 1.57079632679489656 / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = 1.57079632679489656 / (nsegments - 1);
		var y1 = y - radius;
		this.addVertex(x,y1,this.curR,this.curG,this.curB,this.curA,x * this.ma + y1 * this.mc + this.mx,x * this.mb + y1 * this.md + this.my);
		var x1 = x + w;
		var y1 = y - radius;
		this.addVertex(x1,y1,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y1 * this.mc + this.mx,x1 * this.mb + y1 * this.md + this.my);
		var x1 = x + w;
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle + 4.71238898038469;
			var x2 = x1 + Math.cos(a) * radius;
			var y1 = y + Math.sin(a) * radius;
			_gthis.addVertex(x2,y1,_gthis.curR,_gthis.curG,_gthis.curB,_gthis.curA,x2 * _gthis.ma + y1 * _gthis.mc + _gthis.mx,x2 * _gthis.mb + y1 * _gthis.md + _gthis.my);
		}
		var x1 = x + w + radius;
		var y1 = y + h;
		this.addVertex(x1,y1,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y1 * this.mc + this.mx,x1 * this.mb + y1 * this.md + this.my);
		var x1 = x + w;
		var y1 = y + h;
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			var x2 = x1 + Math.cos(a) * radius;
			var y2 = y1 + Math.sin(a) * radius;
			_gthis.addVertex(x2,y2,_gthis.curR,_gthis.curG,_gthis.curB,_gthis.curA,x2 * _gthis.ma + y2 * _gthis.mc + _gthis.mx,x2 * _gthis.mb + y2 * _gthis.md + _gthis.my);
		}
		var y1 = y + h + radius;
		this.addVertex(x,y1,this.curR,this.curG,this.curB,this.curA,x * this.ma + y1 * this.mc + this.mx,x * this.mb + y1 * this.md + this.my);
		var y1 = y + h;
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle + 1.57079632679489656;
			var x1 = x + Math.cos(a) * radius;
			var y2 = y1 + Math.sin(a) * radius;
			_gthis.addVertex(x1,y2,_gthis.curR,_gthis.curG,_gthis.curB,_gthis.curA,x1 * _gthis.ma + y2 * _gthis.mc + _gthis.mx,x1 * _gthis.mb + y2 * _gthis.md + _gthis.my);
		}
		var x1 = x - radius;
		this.addVertex(x1,y,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y * this.mc + this.mx,x1 * this.mb + y * this.md + this.my);
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle + 3.14159265358979312;
			var x1 = x + Math.cos(a) * radius;
			var y1 = y + Math.sin(a) * radius;
			_gthis.addVertex(x1,y1,_gthis.curR,_gthis.curG,_gthis.curB,_gthis.curA,x1 * _gthis.ma + y1 * _gthis.mc + _gthis.mx,x1 * _gthis.mb + y1 * _gthis.md + _gthis.my);
		}
		this.flush();
	}
	,drawCircle: function(cx,cy,radius,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		this.flush();
		if(nsegments == 0) {
			var f = radius * 3.14 * 2 / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = 6.28318530717958623 / nsegments;
		var _g = 0;
		var _g1 = nsegments + 1;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			var x = cx + Math.cos(a) * radius;
			var y = cy + Math.sin(a) * radius;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.flush();
	}
	,drawEllipse: function(cx,cy,radiusX,radiusY,rotationAngle,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		if(rotationAngle == null) {
			rotationAngle = 0;
		}
		this.flush();
		if(nsegments == 0) {
			var f = radiusY * 3.14 * 2 / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = 6.28318530717958623 / nsegments;
		var x1;
		var y1;
		var _g = 0;
		var _g1 = nsegments + 1;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			x1 = Math.cos(a) * Math.cos(rotationAngle) * radiusX - Math.sin(a) * Math.sin(rotationAngle) * radiusY;
			y1 = Math.cos(rotationAngle) * Math.sin(a) * radiusY + Math.cos(a) * Math.sin(rotationAngle) * radiusX;
			var x = cx + x1;
			var y = cy + y1;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.flush();
	}
	,drawPie: function(cx,cy,radius,angleStart,angleLength,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		if((angleLength < 0 ? -angleLength : angleLength) >= 6.28318530717958623) {
			this.drawCircle(cx,cy,radius,nsegments);
			return;
		}
		this.flush();
		this.addVertex(cx,cy,this.curR,this.curG,this.curB,this.curA,cx * this.ma + cy * this.mc + this.mx,cx * this.mb + cy * this.md + this.my);
		if(nsegments == 0) {
			var f = radius * angleLength / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = angleLength / (nsegments - 1);
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle + angleStart;
			var x = cx + Math.cos(a) * radius;
			var y = cy + Math.sin(a) * radius;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.addVertex(cx,cy,this.curR,this.curG,this.curB,this.curA,cx * this.ma + cy * this.mc + this.mx,cx * this.mb + cy * this.md + this.my);
		this.flush();
	}
	,drawPieInner: function(cx,cy,radius,innerRadius,angleStart,angleLength,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		this.flush();
		if((angleLength < 0 ? -angleLength : angleLength) >= 6.28418530717958657) {
			angleLength = 6.28418530717958657;
		}
		var cs = Math.cos(angleStart);
		var ss = Math.sin(angleStart);
		var ce = Math.cos(angleStart + angleLength);
		var se = Math.sin(angleStart + angleLength);
		var x = cx + cs * innerRadius;
		var y = cy + ss * innerRadius;
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		if(nsegments == 0) {
			var f = radius * angleLength / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = angleLength / (nsegments - 1);
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle + angleStart;
			var x = cx + Math.cos(a) * radius;
			var y = cy + Math.sin(a) * radius;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		var x = cx + ce * innerRadius;
		var y = cy + se * innerRadius;
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = (nsegments - 1 - i) * angle + angleStart;
			var x = cx + Math.cos(a) * innerRadius;
			var y = cy + Math.sin(a) * innerRadius;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.flush();
	}
	,drawRectanglePie: function(cx,cy,width,height,angleStart,angleLength,nsegments) {
		if(nsegments == null) {
			nsegments = 0;
		}
		if((angleLength < 0 ? -angleLength : angleLength) >= 6.28318530717958623) {
			this.drawRect(cx - width / 2,cy - height / 2,width,height);
			return;
		}
		this.flush();
		this.addVertex(cx,cy,this.curR,this.curG,this.curB,this.curA,cx * this.ma + cy * this.mc + this.mx,cx * this.mb + cy * this.md + this.my);
		if(nsegments == 0) {
			var f = (width < height ? height : width) * angleLength / 4;
			nsegments = Math.ceil(f < 0 ? -f : f);
		}
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = angleLength / (nsegments - 1);
		var square2 = Math.sqrt(2);
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle + angleStart;
			var _width = Math.cos(a) * (width / 2 + 1) * square2;
			var _height = Math.sin(a) * (height / 2 + 1) * square2;
			if((_width < 0 ? -_width : _width) >= width / 2) {
				_width = Math.cos(a) < 0 ? width / 2 * -1 : width / 2;
			}
			if((_height < 0 ? -_height : _height) >= height / 2) {
				_height = Math.sin(a) < 0 ? height / 2 * -1 : height / 2;
			}
			var x = cx + _width;
			var y = cy + _height;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.addVertex(cx,cy,this.curR,this.curG,this.curB,this.curA,cx * this.ma + cy * this.mc + this.mx,cx * this.mb + cy * this.md + this.my);
		this.flush();
	}
	,curveTo: function(bx,by,cx,cy) {
		var ax = this.tmpPoints.length == 0 ? 0 : this.tmpPoints[this.tmpPoints.length - 1].x;
		var ay = this.tmpPoints.length == 0 ? 0 : this.tmpPoints[this.tmpPoints.length - 1].y;
		var t = 0.66666666666666663;
		this.cubicCurveTo(ax + t * (bx - ax),ay + t * (by - ay),cx + t * (bx - cx),cy + t * (by - cy),cx,cy);
	}
	,cubicCurveTo: function(bx,by,cx,cy,dx,dy,nsegments) {
		if(nsegments == null) {
			nsegments = 40;
		}
		var ax = this.tmpPoints.length == 0 ? 0 : this.tmpPoints[this.tmpPoints.length - 1].x;
		var ay = this.tmpPoints.length == 0 ? 0 : this.tmpPoints[this.tmpPoints.length - 1].y;
		var tobx = bx - ax;
		var toby = by - ay;
		var tocx = cx - bx;
		var tocy = cy - by;
		var todx = dx - cx;
		var tody = dy - cy;
		var step = 1 / nsegments;
		var _g = 1;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var d = i * step;
			var px = ax + d * tobx;
			var py = ay + d * toby;
			var qx = bx + d * tocx;
			var qy = by + d * tocy;
			var rx = cx + d * todx;
			var ry = cy + d * tody;
			var toqx = qx - px;
			var toqy = qy - py;
			var torx = rx - qx;
			var tory = ry - qy;
			var sx = px + d * toqx;
			var sy = py + d * toqy;
			var tx = qx + d * torx;
			var ty = qy + d * tory;
			var totx = tx - sx;
			var toty = ty - sy;
			var x = sx + d * totx;
			var y = sy + d * toty;
			this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		}
		this.addVertex(dx,dy,this.curR,this.curG,this.curB,this.curA,dx * this.ma + dy * this.mc + this.mx,dx * this.mb + dy * this.md + this.my);
	}
	,lineTo: function(x,y) {
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
	}
	,addVertex: function(x,y,r,g,b,a,u,v) {
		if(v == null) {
			v = 0.;
		}
		if(u == null) {
			u = 0.;
		}
		var half = this.lineSize / 2.0;
		if(x - half < this.xMin) {
			this.xMin = x - half;
		}
		if(y - half < this.yMin) {
			this.yMin = y - half;
		}
		if(x + half > this.xMax) {
			this.xMax = x + half;
		}
		if(y + half > this.yMax) {
			this.yMax = y + half;
		}
		if(x < this.xMinSize) {
			this.xMinSize = x;
		}
		if(y < this.yMinSize) {
			this.yMinSize = y;
		}
		if(x > this.xMaxSize) {
			this.xMaxSize = x;
		}
		if(y > this.yMaxSize) {
			this.yMaxSize = y;
		}
		if(this.doFill) {
			var _this = this.content;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = x;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = y;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = u;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = v;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = r;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = g;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = b;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = a;
			_this.bufferDirty = true;
		}
		var gp = new h2d_GPoint();
		gp.load(x,y,this.lineR,this.lineG,this.lineB,this.lineA);
		this.tmpPoints.push(gp);
	}
	,draw: function(ctx) {
		if(!ctx.beginDrawBatchState(this)) {
			return;
		}
		this.content.doRender(ctx);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		this.flush();
		this.content.flush();
	}
	,__class__: h2d_Graphics
});
var h2d_LineHeightMode = $hxEnums["h2d.LineHeightMode"] = { __ename__:"h2d.LineHeightMode",__constructs__:null
	,Accurate: {_hx_name:"Accurate",_hx_index:0,__enum__:"h2d.LineHeightMode",toString:$estr}
	,TextOnly: {_hx_name:"TextOnly",_hx_index:1,__enum__:"h2d.LineHeightMode",toString:$estr}
	,Constant: {_hx_name:"Constant",_hx_index:2,__enum__:"h2d.LineHeightMode",toString:$estr}
};
h2d_LineHeightMode.__constructs__ = [h2d_LineHeightMode.Accurate,h2d_LineHeightMode.TextOnly,h2d_LineHeightMode.Constant];
h2d_LineHeightMode.__empty_constructs__ = [h2d_LineHeightMode.Accurate,h2d_LineHeightMode.TextOnly,h2d_LineHeightMode.Constant];
var h2d_ImageVerticalAlign = $hxEnums["h2d.ImageVerticalAlign"] = { __ename__:"h2d.ImageVerticalAlign",__constructs__:null
	,Top: {_hx_name:"Top",_hx_index:0,__enum__:"h2d.ImageVerticalAlign",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:1,__enum__:"h2d.ImageVerticalAlign",toString:$estr}
	,Middle: {_hx_name:"Middle",_hx_index:2,__enum__:"h2d.ImageVerticalAlign",toString:$estr}
};
h2d_ImageVerticalAlign.__constructs__ = [h2d_ImageVerticalAlign.Top,h2d_ImageVerticalAlign.Bottom,h2d_ImageVerticalAlign.Middle];
h2d_ImageVerticalAlign.__empty_constructs__ = [h2d_ImageVerticalAlign.Top,h2d_ImageVerticalAlign.Bottom,h2d_ImageVerticalAlign.Middle];
var h2d_Text = function(font,parent) {
	this.realMaxWidth = -1;
	this.constraintWidth = -1;
	this.lineBreak = true;
	this.lineSpacing = 0;
	this.letterSpacing = 0;
	h2d_Drawable.call(this,parent);
	this.set_font(font);
	this.set_textAlign(h2d_Align.Left);
	this.set_text("");
	this.currentText = "";
	this.set_textColor(16777215);
};
$hxClasses["h2d.Text"] = h2d_Text;
h2d_Text.__name__ = "h2d.Text";
h2d_Text.__super__ = h2d_Drawable;
h2d_Text.prototype = $extend(h2d_Drawable.prototype,{
	set_font: function(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(font != null) {
			var _g = font.type;
			switch(_g._hx_index) {
			case 0:
				if(this.sdfShader != null) {
					this.removeShader(this.sdfShader);
					this.sdfShader = null;
				}
				break;
			case 1:
				var channel = _g.channel;
				var alphaCutoff = _g.alphaCutoff;
				var smoothing = _g.smoothing;
				if(this.sdfShader == null) {
					this.sdfShader = new h3d_shader_SignedDistanceField();
					this.addShader(this.sdfShader);
				}
				if(this.smooth == null) {
					this.smooth = true;
				}
				this.sdfShader.alphaCutoff__ = alphaCutoff;
				this.sdfShader.smoothing__ = smoothing;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.channel__ = channel;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.autoSmoothing__ = smoothing == -1;
				break;
			}
		}
		if(this.glyphs != null) {
			var _this = this.glyphs;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	,set_textAlign: function(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	,set_letterSpacing: function(s) {
		if(this.letterSpacing == s) {
			return s;
		}
		this.letterSpacing = s;
		this.rebuild();
		return s;
	}
	,set_lineSpacing: function(s) {
		if(this.lineSpacing == s) {
			return s;
		}
		this.lineSpacing = s;
		this.rebuild();
		return s;
	}
	,set_lineBreak: function(b) {
		if(this.lineBreak == b) {
			return b;
		}
		this.lineBreak = b;
		this.rebuild();
		return b;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.updateConstraint();
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.rebuild();
	}
	,checkText: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
	}
	,draw: function(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d_Tile.fromColor(16711935,16,16));
			return;
		}
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			var oldR = this.color.x;
			var oldG = this.color.y;
			var oldB = this.color.z;
			var oldA = this.color.w;
			var _this = this.color;
			var c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			var _this = this.color;
			var x = oldR;
			var y = oldG;
			var z = oldB;
			var w = oldA;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,set_text: function(t) {
		var t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.textChanged = true;
		this.validateText();
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t1;
	}
	,validateText: function() {
	}
	,rebuild: function() {
		this.calcDone = false;
		this.needsRebuild = true;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,calcTextWidth: function(text) {
		if(this.calcDone) {
			var ow = this.calcWidth;
			var oh = this.calcHeight;
			var osh = this.calcSizeHeight;
			var ox = this.calcXMin;
			var oy = this.calcYMin;
			this.initGlyphs(text,false);
			var w = this.calcWidth;
			this.calcWidth = ow;
			this.calcHeight = oh;
			this.calcSizeHeight = osh;
			this.calcXMin = ox;
			this.calcYMin = oy;
			return w;
		} else {
			this.initGlyphs(text,false);
			this.calcDone = false;
			return this.calcWidth;
		}
	}
	,splitText: function(text) {
		return this.splitRawText(text,0,0);
	}
	,splitRawText: function(text,leftMargin,afterData,font,sizes,prevChar) {
		if(prevChar == null) {
			prevChar = -1;
		}
		if(afterData == null) {
			afterData = 0.;
		}
		if(leftMargin == null) {
			leftMargin = 0.;
		}
		var maxWidth = this.realMaxWidth;
		if(maxWidth < 0) {
			if(sizes == null) {
				return text;
			} else {
				maxWidth = Infinity;
			}
		}
		if(font == null) {
			font = this.font;
		}
		var lines = [];
		var restPos = 0;
		var x = leftMargin;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = HxOverrides.cca(text,i);
			var c = font.glyphs.h[cc];
			if(c == null) {
				c = font.charset.resolveChar(cc,font.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
				}
			}
			var e = c;
			var newline = cc == 10;
			var esize = e.width + e.getKerningOffset(prevChar);
			var nc = HxOverrides.cca(text,i + 1);
			if(font.charset.isBreakChar(cc) && (nc == null || !font.charset.isComplementChar(nc))) {
				if(lines.length == 0 && leftMargin > 0 && x > maxWidth) {
					lines.push("");
					if(sizes != null) {
						sizes.push(leftMargin);
					}
					x -= leftMargin;
				}
				var size = x + esize + this.letterSpacing;
				var k = i + 1;
				var max = text.length;
				var prevChar1 = prevChar;
				var breakFound = false;
				while(size <= maxWidth && k < max) {
					var cc1 = HxOverrides.cca(text,k++);
					if(this.lineBreak && (font.charset.isSpace(cc1) || cc1 == 10)) {
						breakFound = true;
						break;
					}
					var c1 = font.glyphs.h[cc1];
					if(c1 == null) {
						c1 = font.charset.resolveChar(cc1,font.glyphs);
						if(c1 == null) {
							c1 = cc1 == 13 || cc1 == 10 ? font.nullChar : font.defaultChar;
						}
					}
					var e1 = c1;
					size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar1);
					prevChar1 = cc1;
					var nc1 = HxOverrides.cca(text,k + 1);
					if(font.charset.isBreakChar(cc1) && (nc1 == null || !font.charset.isComplementChar(nc1))) {
						break;
					}
				}
				if(this.lineBreak && (size > maxWidth || !breakFound && size + afterData > maxWidth)) {
					newline = true;
					if(font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				}
			}
			if(e != null && cc != 10) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				if(sizes != null) {
					sizes.push(x);
				}
				x = 0;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > maxWidth) {
				lines.push("");
				if(sizes != null) {
					sizes.push(leftMargin);
				}
				x -= leftMargin;
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
			if(sizes != null) {
				sizes.push(x);
			}
		}
		return lines.join("\n");
	}
	,getTextProgress: function(text,progress) {
		if(progress >= text.length) {
			return text;
		}
		return HxOverrides.substr(text,0,progress | 0);
	}
	,initGlyphs: function(text,rebuild) {
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		var x = 0.;
		var y = 0.;
		var xMax = 0.;
		var xMin = 0.;
		var yMin = 0.;
		var prevChar = -1;
		var linei = 0;
		var align = this.textAlign;
		var lines = [];
		var dl = this.font.lineHeight + this.lineSpacing;
		var t = this.splitRawText(text,0,0,null,lines);
		var _g = 0;
		while(_g < lines.length) {
			var lw = lines[_g];
			++_g;
			if(lw > x) {
				x = lw;
			}
		}
		this.calcWidth = x;
		switch(align._hx_index) {
		case 0:
			x = 0;
			break;
		case 1:case 2:case 3:case 4:
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
			var _g = 0;
			var _g1 = lines.length;
			while(_g < _g1) {
				var i = _g++;
				lines[i] = Math.floor((max - lines[i]) * k);
			}
			x = lines[0];
			xMin = x;
			break;
		}
		var _g = 0;
		var _g1 = t.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = HxOverrides.cca(t,i);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			var e = c;
			var offs = e.getKerningOffset(prevChar);
			var esize = e.width + offs;
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				switch(align._hx_index) {
				case 0:
					x = 0;
					break;
				case 1:case 2:case 3:case 4:
					x = lines[++linei];
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				if(e != null) {
					if(rebuild) {
						var _this1 = this.glyphs;
						_this1.content.add(x + offs,y,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,e.t);
					}
					if(y == 0 && e.t.dy < yMin) {
						yMin = e.t.dy;
					}
					x += esize + this.letterSpacing;
				}
				prevChar = cc;
			}
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
		if(rebuild) {
			this.needsRebuild = false;
		}
	}
	,updateSize: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
	}
	,get_textHeight: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		return this.calcHeight;
	}
	,get_textWidth: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		return this.calcWidth;
	}
	,set_maxWidth: function(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	,updateConstraint: function() {
		var old = this.realMaxWidth;
		if(this.maxWidth == null) {
			this.realMaxWidth = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			this.realMaxWidth = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			this.realMaxWidth = a > b ? b : a;
		}
		if(this.realMaxWidth != old) {
			this.rebuild();
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		var a = this.color.w;
		var _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		var x;
		var y;
		var w;
		var h;
		if(forSize) {
			x = this.calcXMin;
			y = 0.;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			x = this.calcXMin;
			y = this.calcYMin;
			w = this.calcWidth;
			h = this.calcHeight - this.calcYMin;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
	,__class__: h2d_Text
});
var h2d_HtmlText = function(font,parent) {
	this.elements = [];
	this.imageVerticalAlign = h2d_ImageVerticalAlign.Bottom;
	this.lineHeightMode = h2d_LineHeightMode.Accurate;
	this.imageSpacing = 1;
	this.propagateInteractiveNode = false;
	this.condenseWhite = true;
	h2d_Text.call(this,font,parent);
};
$hxClasses["h2d.HtmlText"] = h2d_HtmlText;
h2d_HtmlText.__name__ = "h2d.HtmlText";
h2d_HtmlText.defaultLoadImage = function(url) {
	return null;
};
h2d_HtmlText.defaultLoadFont = function(name) {
	return null;
};
h2d_HtmlText.defaultFormatText = function(text) {
	return text;
};
h2d_HtmlText.__super__ = h2d_Text;
h2d_HtmlText.prototype = $extend(h2d_Text.prototype,{
	draw: function(ctx) {
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			if(this.dropMatrix == null) {
				this.dropMatrix = new h3d_shader_ColorMatrix();
				this.addShader(this.dropMatrix);
			}
			var _this = this.dropMatrix;
			_this.constModified = true;
			_this.enabled__ = true;
			var m = this.dropMatrix.matrix__;
			m.zero();
			m._41 = (this.dropShadow.color >> 16 & 255) / 255;
			m._42 = (this.dropShadow.color >> 8 & 255) / 255;
			m._43 = (this.dropShadow.color & 255) / 255;
			m._44 = this.dropShadow.alpha;
			this.glyphs.drawWith(ctx,this);
			var _this = this.dropMatrix;
			_this.constModified = true;
			_this.enabled__ = false;
			this.absX = oldX;
			this.absY = oldY;
		} else {
			this.removeShader(this.dropMatrix);
			this.dropMatrix = null;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,getShader: function(stype) {
		if(this.shaders != null) {
			var _g_l = this.shaders;
			var _g_last = null;
			while(_g_l != _g_last) {
				var s = _g_l.s;
				_g_l = _g_l.next;
				var s1 = s;
				var c = ((s1) instanceof h3d_shader_ColorMatrix) ? s1 : null;
				if(c != null && !c.enabled__) {
					continue;
				}
				var s2 = js_Boot.__downcastCheck(s1,stype) ? s1 : null;
				if(s2 != null) {
					return s2;
				}
			}
		}
		return null;
	}
	,loadImage: function(url) {
		return h2d_HtmlText.defaultLoadImage(url);
	}
	,loadFont: function(name) {
		var f = h2d_HtmlText.defaultLoadFont(name);
		if(f == null) {
			return this.font;
		} else {
			return f;
		}
	}
	,onHyperlink: function(url) {
	}
	,onOverHyperlink: function(url) {
	}
	,onOutHyperlink: function(url) {
	}
	,formatText: function(text) {
		return h2d_HtmlText.defaultFormatText(text);
	}
	,set_text: function(t) {
		h2d_Text.prototype.set_text.call(this,this.formatText(t));
		return t;
	}
	,parseText: function(text) {
		try {
			return Xml.parse(text);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			throw haxe_Exception.thrown("Could not parse " + text + " (" + Std.string(e) + ")");
		}
	}
	,makeLineInfo: function(width,height,baseLine) {
		return { width : width, height : height, baseLine : baseLine};
	}
	,validateText: function() {
		this.textXml = this.parseText(this.text);
		this.validateNodes(this.textXml);
	}
	,validateNodes: function(xml) {
		switch(xml.nodeType) {
		case 0:
			if(xml.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
			}
			var nodeName = xml.nodeName.toLowerCase();
			switch(nodeName) {
			case "b":case "bold":
				this.loadFont("bold");
				break;
			case "font":
				if(xml.exists("face")) {
					this.loadFont(xml.get("face"));
				}
				break;
			case "img":
				this.loadImage(xml.get("src"));
				break;
			case "i":case "italic":
				this.loadFont("italic");
				break;
			}
			if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
			}
			var _g_current = 0;
			var _g_array = xml.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.validateNodes(child);
			}
			break;
		case 6:
			if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
			}
			var _g_current = 0;
			var _g_array = xml.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.validateNodes(child);
			}
			break;
		default:
		}
	}
	,initGlyphs: function(text,rebuild) {
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e != null && e.parent != null) {
					e.parent.removeChild(e);
				}
			}
			this.elements = [];
		}
		this.glyphs.setDefaultColor(this.textColor);
		var doc;
		if(this.textXml == null) {
			doc = this.parseText(text);
		} else {
			doc = this.textXml;
		}
		this.yPos = 0;
		this.xMax = 0;
		this.xMin = Infinity;
		this.sizePos = 0;
		this.calcYMin = 0;
		var metrics = [{ width : 0, height : this.font.lineHeight, baseLine : this.font.baseLine}];
		this.prevChar = -1;
		this.newLine = true;
		var splitNode = { node : null, pos : 0, font : this.font, prevChar : -1, width : 0, height : 0, baseLine : 0};
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (doc.nodeType == null ? "null" : XmlType.toString(doc.nodeType)));
		}
		var _g_current = 0;
		var _g_array = doc.children;
		while(_g_current < _g_array.length) {
			var e = _g_array[_g_current++];
			this.buildSizes(e,this.font,metrics,splitNode);
		}
		var max = 0.;
		var _g = 0;
		while(_g < metrics.length) {
			var info = metrics[_g];
			++_g;
			if(info.width > max) {
				max = info.width;
			}
		}
		this.calcWidth = max;
		this.prevChar = -1;
		this.newLine = true;
		var align = this.textAlign;
		var size = metrics[0].width;
		switch(align._hx_index) {
		case 0:
			this.xPos = 0;
			if(this.xMin > 0) {
				this.xMin = 0;
			}
			break;
		case 1:case 2:case 3:case 4:
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.calcWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
			this.xPos = Math.floor((max - size) * k);
			if(this.xPos < this.xMin) {
				this.xMin = this.xPos;
			}
			break;
		}
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (doc.nodeType == null ? "null" : XmlType.toString(doc.nodeType)));
		}
		var _g_current = 0;
		var _g_array = doc.children;
		while(_g_current < _g_array.length) {
			var e = _g_array[_g_current++];
			this.addNode(e,this.font,this.textAlign,rebuild,metrics);
		}
		if(this.xPos > this.xMax) {
			this.xMax = this.xPos;
		}
		this.textXml = null;
		var y = this.yPos;
		this.calcXMin = this.xMin;
		this.calcWidth = this.xMax - this.xMin;
		this.calcHeight = y + metrics[this.sizePos].height;
		this.calcSizeHeight = y + metrics[this.sizePos].baseLine;
		this.calcDone = true;
		if(rebuild) {
			this.needsRebuild = false;
		}
	}
	,buildSizes: function(e,font,metrics,splitNode) {
		var _gthis = this;
		var wordSplit = function() {
			var fnt = splitNode.font;
			var _this = splitNode.node;
			if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
			}
			var str = _this.nodeValue;
			var info = metrics[metrics.length - 1];
			var w = info.width;
			var cc = HxOverrides.cca(str,splitNode.pos);
			info.width = splitNode.width;
			info.height = splitNode.height;
			info.baseLine = splitNode.baseLine;
			var c = fnt.glyphs.h[cc];
			if(c == null) {
				c = fnt.charset.resolveChar(cc,fnt.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? fnt.nullChar : fnt.defaultChar;
				}
			}
			var char = c;
			if(_gthis.lineBreak && fnt.charset.isSpace(cc)) {
				w -= splitNode.width + _gthis.letterSpacing + char.width + char.getKerningOffset(splitNode.prevChar);
				var _this = splitNode.node;
				var v = HxOverrides.substr(str,0,splitNode.pos) + "\n" + HxOverrides.substr(str,splitNode.pos + 1,null);
				if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
				}
				_this.nodeValue = v;
			} else {
				w -= splitNode.width + _gthis.letterSpacing + char.getKerningOffset(splitNode.prevChar);
				var _this = splitNode.node;
				var v = HxOverrides.substr(str,0,splitNode.pos + 1) + "\n" + HxOverrides.substr(str,splitNode.pos + 1,null);
				if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
				}
				_this.nodeValue = v;
			}
			splitNode.node = null;
			return w;
		};
		if(e.nodeType == Xml.Element) {
			if(e.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			var nodeName = e.nodeName.toLowerCase();
			switch(nodeName) {
			case "b":case "bold":
				font = this.loadFont("bold");
				break;
			case "br":
				var fontInfo = _gthis.lineHeightMode == h2d_LineHeightMode.Constant ? _gthis.font : font;
				metrics.push({ width : 0, height : fontInfo.lineHeight, baseLine : fontInfo.baseLine});
				splitNode.node = null;
				_gthis.newLine = true;
				_gthis.prevChar = -1;
				break;
			case "font":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					var v = e.get(a1);
					if(a1.toLowerCase() == "face") {
						font = this.loadFont(v);
					}
				}
				break;
			case "img":
				var i = this.loadImage(e.get("src"));
				if(i == null) {
					i = h2d_Tile.fromColor(16711935,8,8);
				}
				var size = metrics[metrics.length - 1].width + i.width + this.imageSpacing;
				if(this.realMaxWidth >= 0 && size > this.realMaxWidth && metrics[metrics.length - 1].width > 0) {
					if(splitNode.node != null) {
						size = wordSplit() + i.width + this.imageSpacing;
						var info = metrics[metrics.length - 1];
						if(this.lineHeightMode._hx_index == 0) {
							var grow = i.height - i.dy - info.baseLine;
							var h = info.height;
							var bl = info.baseLine;
							if(grow > 0) {
								h += grow;
								bl += grow;
							}
							metrics.push({ width : size, height : Math.max(h,bl + i.dy), baseLine : bl});
						} else {
							metrics.push({ width : size, height : info.height, baseLine : info.baseLine});
						}
					}
				} else {
					var info = metrics[metrics.length - 1];
					info.width = size;
					if(this.lineHeightMode == h2d_LineHeightMode.Accurate) {
						var grow = i.height - i.dy - info.baseLine;
						if(grow > 0) {
							switch(this.imageVerticalAlign._hx_index) {
							case 0:
								info.height += grow;
								break;
							case 1:
								info.baseLine += grow;
								info.height += grow;
								break;
							case 2:
								info.height += grow;
								info.baseLine += grow / 2 | 0;
								break;
							}
						}
						grow = info.baseLine + i.dy;
						if(info.height < grow) {
							info.height = grow;
						}
					}
				}
				this.newLine = false;
				this.prevChar = -1;
				break;
			case "i":case "italic":
				font = this.loadFont("italic");
				break;
			case "p":
				if(!this.newLine) {
					var fontInfo = _gthis.lineHeightMode == h2d_LineHeightMode.Constant ? _gthis.font : font;
					metrics.push({ width : 0, height : fontInfo.lineHeight, baseLine : fontInfo.baseLine});
					splitNode.node = null;
					_gthis.newLine = true;
					_gthis.prevChar = -1;
				}
				break;
			default:
			}
			if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			var _g_current = 0;
			var _g_array = e.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.buildSizes(child,font,metrics,splitNode);
			}
			if(nodeName == "p") {
				if(!this.newLine) {
					var fontInfo = _gthis.lineHeightMode == h2d_LineHeightMode.Constant ? _gthis.font : font;
					metrics.push({ width : 0, height : fontInfo.lineHeight, baseLine : fontInfo.baseLine});
					splitNode.node = null;
					_gthis.newLine = true;
					_gthis.prevChar = -1;
				}
			}
		} else {
			if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			if(e.nodeValue.length != 0) {
				this.newLine = false;
				if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
				}
				var text = this.htmlToText(e.nodeValue);
				var fontInfo = _gthis.lineHeightMode == h2d_LineHeightMode.Constant ? _gthis.font : font;
				var info = metrics.pop();
				var leftMargin = info.width;
				var maxWidth = this.realMaxWidth < 0 ? Infinity : this.realMaxWidth;
				var textSplit = [];
				var restPos = 0;
				var x = leftMargin;
				var breakChars = 0;
				var _g = 0;
				var _g1 = text.length;
				while(_g < _g1) {
					var i = _g++;
					var cc = HxOverrides.cca(text,i);
					var c = font.glyphs.h[cc];
					if(c == null) {
						c = font.charset.resolveChar(cc,font.glyphs);
						if(c == null) {
							c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
						}
					}
					var g = c;
					var newline = cc == 10;
					var esize = g.width + g.getKerningOffset(this.prevChar);
					var nc = HxOverrides.cca(text,i + 1);
					if(font.charset.isBreakChar(cc) && (nc == null || !font.charset.isComplementChar(nc))) {
						if(x > maxWidth && textSplit.length == 0 && splitNode.node != null) {
							metrics.push({ width : x, height : info.height, baseLine : info.baseLine});
							x = wordSplit();
						}
						var size = x + esize + this.letterSpacing;
						var k = i + 1;
						var max = text.length;
						var prevChar = cc;
						while(size <= maxWidth && k < max) {
							var cc1 = HxOverrides.cca(text,k++);
							if(this.lineBreak && (font.charset.isSpace(cc1) || cc1 == 10)) {
								break;
							}
							var c1 = font.glyphs.h[cc1];
							if(c1 == null) {
								c1 = font.charset.resolveChar(cc1,font.glyphs);
								if(c1 == null) {
									c1 = cc1 == 13 || cc1 == 10 ? font.nullChar : font.defaultChar;
								}
							}
							var e1 = c1;
							size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar);
							prevChar = cc1;
							var nc1 = HxOverrides.cca(text,k);
							if(font.charset.isBreakChar(cc1) && (nc1 == null || !font.charset.isComplementChar(nc1))) {
								break;
							}
						}
						if(this.lineBreak && size > maxWidth && i != max - 1) {
							newline = true;
							if(font.charset.isSpace(cc)) {
								textSplit.push(HxOverrides.substr(text,restPos,i - restPos));
								g = null;
							} else {
								textSplit.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
								++breakChars;
							}
							splitNode.node = null;
							restPos = i + 1;
						} else {
							splitNode.node = e;
							splitNode.pos = i + breakChars;
							splitNode.prevChar = this.prevChar;
							splitNode.width = x;
							splitNode.height = info.height;
							splitNode.baseLine = info.baseLine;
							splitNode.font = font;
						}
					}
					if(g != null && cc != 10) {
						x += esize + this.letterSpacing;
					}
					if(newline) {
						metrics.push({ width : x, height : info.height, baseLine : info.baseLine});
						info.height = fontInfo.lineHeight;
						info.baseLine = fontInfo.baseLine;
						x = 0;
						this.prevChar = -1;
						this.newLine = true;
					} else {
						this.prevChar = cc;
						this.newLine = false;
					}
				}
				if(restPos < text.length) {
					if(x > maxWidth) {
						if(splitNode.node != null && splitNode.node != e) {
							metrics.push({ width : x, height : info.height, baseLine : info.baseLine});
							x = wordSplit();
						}
					}
					textSplit.push(HxOverrides.substr(text,restPos,null));
					metrics.push({ width : x, height : info.height, baseLine : info.baseLine});
				}
				if(this.newLine || metrics.length == 0) {
					metrics.push({ width : 0, height : fontInfo.lineHeight, baseLine : fontInfo.baseLine});
					textSplit.push("");
				}
				var v = textSplit.join("\n");
				if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
				}
				e.nodeValue = v;
			}
		}
	}
	,htmlToText: function(t) {
		if(this.condenseWhite) {
			t = t.replace(h2d_HtmlText.REG_SPACES.r," ");
		}
		return t;
	}
	,nextLine: function(align,size) {
		switch(align._hx_index) {
		case 0:
			this.xPos = 0;
			if(this.xMin > 0) {
				this.xMin = 0;
			}
			break;
		case 1:case 2:case 3:case 4:
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.calcWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
			this.xPos = Math.floor((max - size) * k);
			if(this.xPos < this.xMin) {
				this.xMin = this.xPos;
			}
			break;
		}
	}
	,splitText: function(text) {
		if(this.realMaxWidth < 0) {
			return text;
		}
		this.yPos = 0;
		this.xMax = 0;
		this.sizePos = 0;
		this.calcYMin = 0;
		var doc = this.parseText(text);
		var splitNode = { node : null, font : this.font, width : 0, height : 0, baseLine : 0, pos : 0, prevChar : -1};
		var metrics = [{ width : 0, height : this.font.lineHeight, baseLine : this.font.baseLine}];
		this.prevChar = -1;
		this.newLine = true;
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (doc.nodeType == null ? "null" : XmlType.toString(doc.nodeType)));
		}
		var _g_current = 0;
		var _g_array = doc.children;
		while(_g_current < _g_array.length) {
			var e = _g_array[_g_current++];
			this.buildSizes(e,this.font,metrics,splitNode);
		}
		this.xMax = 0;
		var addBreaks = null;
		addBreaks = function(e) {
			if(e.nodeType == Xml.Element) {
				if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
				}
				var _g_current = 0;
				var _g_array = e.children;
				while(_g_current < _g_array.length) {
					var x = _g_array[_g_current++];
					addBreaks(x);
				}
			} else {
				if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
				}
				var text = e.nodeValue;
				var startI = 0;
				var index = Lambda.indexOf(e.parent,e);
				var _g = 0;
				var _g1 = text.length;
				while(_g < _g1) {
					var i = _g++;
					if(HxOverrides.cca(text,i) == 10) {
						var pre = text.substring(startI,i);
						if(pre != "") {
							e.parent.insertChild(Xml.createPCData(pre),index++);
						}
						e.parent.insertChild(Xml.createElement("br"),index++);
						startI = i + 1;
					}
				}
				if(startI < text.length) {
					var v = HxOverrides.substr(text,startI,null);
					if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
					}
					e.nodeValue = v;
				} else {
					e.parent.removeChild(e);
				}
			}
		};
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (doc.nodeType == null ? "null" : XmlType.toString(doc.nodeType)));
		}
		var _g_current = 0;
		var _g_array = doc.children;
		while(_g_current < _g_array.length) {
			var d = _g_array[_g_current++];
			addBreaks(d);
		}
		return haxe_xml_Printer.print(doc);
	}
	,getTextProgress: function(text,progress) {
		var _gthis = this;
		if(progress >= text.length) {
			return text;
		}
		var doc = this.parseText(text);
		var progressRec = null;
		progressRec = function(e) {
			if(progress <= 0) {
				e.parent.removeChild(e);
				return;
			}
			if(e.nodeType == Xml.Element) {
				var _g = 0;
				var _g1 = [];
				if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
				}
				var _g_current = 0;
				var _g_array = e.children;
				while(_g_current < _g_array.length) {
					var x = _g_array[_g_current++];
					_g1.push(x);
				}
				var _g2 = _g1;
				while(_g < _g2.length) {
					var x = _g2[_g];
					++_g;
					progressRec(x);
				}
			} else {
				var _gthis1 = _gthis;
				if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
				}
				var text = _gthis1.htmlToText(e.nodeValue);
				var len = text.length;
				if(len > progress) {
					text = HxOverrides.substr(text,0,progress | 0);
					if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
					}
					e.nodeValue = text;
				}
				progress -= len;
			}
		};
		var _g = 0;
		var _g1 = [];
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (doc.nodeType == null ? "null" : XmlType.toString(doc.nodeType)));
		}
		var _g_current = 0;
		var _g_array = doc.children;
		while(_g_current < _g_array.length) {
			var x = _g_array[_g_current++];
			_g1.push(x);
		}
		var _g2 = _g1;
		while(_g < _g2.length) {
			var x = _g2[_g];
			++_g;
			progressRec(x);
		}
		return haxe_xml_Printer.print(doc);
	}
	,addNode: function(e,font,align,rebuild,metrics) {
		var _gthis = this;
		var createInteractive = function() {
			if(_gthis.aHrefs == null || _gthis.aHrefs.length == 0) {
				return;
			}
			_gthis.aInteractive = new h2d_Interactive(0,metrics[_gthis.sizePos].baseLine,_gthis);
			_gthis.aInteractive.propagateEvents = _gthis.propagateInteractiveNode;
			var href = _gthis.aHrefs[_gthis.aHrefs.length - 1];
			_gthis.aInteractive.onClick = function(event) {
				_gthis.onHyperlink(href);
			};
			_gthis.aInteractive.onOver = function(event) {
				_gthis.onOverHyperlink(href);
			};
			_gthis.aInteractive.onOut = function(event) {
				_gthis.onOutHyperlink(href);
			};
			var _this = _gthis.aInteractive;
			var v = _gthis.xPos;
			_this.posChanged = true;
			_this.x = v;
			var _this = _gthis.aInteractive;
			var v = _gthis.yPos;
			_this.posChanged = true;
			_this.y = v;
			_gthis.elements.push(_gthis.aInteractive);
		};
		if(e.nodeType == Xml.Element) {
			var prevColor = null;
			var prevGlyphs = null;
			var oldAlign = align;
			if(e.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			var nodeName = e.nodeName.toLowerCase();
			switch(nodeName) {
			case "a":
				if(e.exists("href")) {
					if(_gthis.aInteractive != null) {
						_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
						_gthis.aInteractive = null;
					}
					if(this.aHrefs == null) {
						this.aHrefs = [];
					}
					this.aHrefs.push(e.get("href"));
					createInteractive();
				}
				break;
			case "b":case "bold":
				font = _gthis.loadFont("bold");
				if(prevGlyphs == null) {
					prevGlyphs = _gthis.glyphs;
				}
				var prev = _gthis.glyphs;
				_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
				if(font != null) {
					var _g = font.type;
					if(_g._hx_index == 1) {
						var channel = _g.channel;
						var alphaCutoff = _g.alphaCutoff;
						var smoothing = _g.smoothing;
						var shader = new h3d_shader_SignedDistanceField();
						shader.constModified = true;
						shader.channel__ = channel;
						shader.alphaCutoff__ = alphaCutoff;
						shader.smoothing__ = smoothing;
						shader.constModified = true;
						shader.autoSmoothing__ = smoothing == -1;
						_gthis.glyphs.smooth = _gthis.smooth;
						_gthis.glyphs.addShader(shader);
					}
				}
				var _this = _gthis.glyphs.curColor;
				var v = prev.curColor;
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				_this.w = v.w;
				_gthis.elements.push(_gthis.glyphs);
				break;
			case "br":
				if(_gthis.aInteractive != null) {
					_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
					_gthis.aInteractive = null;
				}
				if(_gthis.xPos > _gthis.xMax) {
					_gthis.xMax = _gthis.xPos;
				}
				_gthis.yPos += metrics[_gthis.sizePos].height + _gthis.lineSpacing;
				var size = metrics[++_gthis.sizePos].width;
				switch(align._hx_index) {
				case 0:
					_gthis.xPos = 0;
					if(_gthis.xMin > 0) {
						_gthis.xMin = 0;
					}
					break;
				case 1:case 2:case 3:case 4:
					var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(_gthis.calcWidth) : _gthis.calcWidth < 0 ? 0 : Math.ceil(_gthis.realMaxWidth);
					var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
					_gthis.xPos = Math.floor((max - size) * k);
					if(_gthis.xPos < _gthis.xMin) {
						_gthis.xMin = _gthis.xPos;
					}
					break;
				}
				createInteractive();
				this.newLine = true;
				this.prevChar = -1;
				break;
			case "font":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					var v = e.get(a1);
					switch(a1.toLowerCase()) {
					case "color":
						if(prevColor == null) {
							var _this = this.glyphs.curColor;
							var x = _this.x;
							var y = _this.y;
							var z = _this.z;
							var w = _this.w;
							if(w == null) {
								w = 1.;
							}
							if(z == null) {
								z = 0.;
							}
							if(y == null) {
								y = 0.;
							}
							if(x == null) {
								x = 0.;
							}
							prevColor = new h3d_Vector4Impl(x,y,z,w);
						}
						if(HxOverrides.cca(v,0) == 35 && v.length == 4) {
							v = "#" + v.charAt(1) + v.charAt(1) + v.charAt(2) + v.charAt(2) + v.charAt(3) + v.charAt(3);
						}
						this.glyphs.setDefaultColor(Std.parseInt("0x" + HxOverrides.substr(v,1,null)));
						break;
					case "face":
						font = _gthis.loadFont(v);
						if(prevGlyphs == null) {
							prevGlyphs = _gthis.glyphs;
						}
						var prev = _gthis.glyphs;
						_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
						if(font != null) {
							var _g = font.type;
							if(_g._hx_index == 1) {
								var channel = _g.channel;
								var alphaCutoff = _g.alphaCutoff;
								var smoothing = _g.smoothing;
								var shader = new h3d_shader_SignedDistanceField();
								shader.constModified = true;
								shader.channel__ = channel;
								shader.alphaCutoff__ = alphaCutoff;
								shader.smoothing__ = smoothing;
								shader.constModified = true;
								shader.autoSmoothing__ = smoothing == -1;
								_gthis.glyphs.smooth = _gthis.smooth;
								_gthis.glyphs.addShader(shader);
							}
						}
						var _this1 = _gthis.glyphs.curColor;
						var v1 = prev.curColor;
						_this1.x = v1.x;
						_this1.y = v1.y;
						_this1.z = v1.z;
						_this1.w = v1.w;
						_gthis.elements.push(_gthis.glyphs);
						break;
					case "opacity":
						if(prevColor == null) {
							var _this2 = this.glyphs.curColor;
							var x1 = _this2.x;
							var y1 = _this2.y;
							var z1 = _this2.z;
							var w1 = _this2.w;
							if(w1 == null) {
								w1 = 1.;
							}
							if(z1 == null) {
								z1 = 0.;
							}
							if(y1 == null) {
								y1 = 0.;
							}
							if(x1 == null) {
								x1 = 0.;
							}
							prevColor = new h3d_Vector4Impl(x1,y1,z1,w1);
						}
						this.glyphs.curColor.w *= parseFloat(v);
						break;
					default:
					}
				}
				break;
			case "img":
				var i = this.loadImage(e.get("src"));
				if(i == null) {
					i = h2d_Tile.fromColor(16711935,8,8);
				}
				var py = this.yPos;
				switch(this.imageVerticalAlign._hx_index) {
				case 0:
					break;
				case 1:
					py += metrics[this.sizePos].baseLine - i.height;
					break;
				case 2:
					py += metrics[this.sizePos].baseLine - i.height / 2;
					break;
				}
				if(py + i.dy < this.calcYMin) {
					this.calcYMin = py + i.dy;
				}
				if(rebuild) {
					var b = new h2d_Bitmap(i,this);
					b.posChanged = true;
					b.x = this.xPos;
					b.posChanged = true;
					b.y = py;
					this.elements.push(b);
				}
				this.newLine = false;
				this.prevChar = -1;
				this.xPos += i.width + this.imageSpacing;
				break;
			case "i":case "italic":
				font = _gthis.loadFont("italic");
				if(prevGlyphs == null) {
					prevGlyphs = _gthis.glyphs;
				}
				var prev = _gthis.glyphs;
				_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
				if(font != null) {
					var _g = font.type;
					if(_g._hx_index == 1) {
						var channel = _g.channel;
						var alphaCutoff = _g.alphaCutoff;
						var smoothing = _g.smoothing;
						var shader = new h3d_shader_SignedDistanceField();
						shader.constModified = true;
						shader.channel__ = channel;
						shader.alphaCutoff__ = alphaCutoff;
						shader.smoothing__ = smoothing;
						shader.constModified = true;
						shader.autoSmoothing__ = smoothing == -1;
						_gthis.glyphs.smooth = _gthis.smooth;
						_gthis.glyphs.addShader(shader);
					}
				}
				var _this = _gthis.glyphs.curColor;
				var v = prev.curColor;
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				_this.w = v.w;
				_gthis.elements.push(_gthis.glyphs);
				break;
			case "p":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					if(a1.toLowerCase() == "align") {
						var v = e.get(a1);
						if(v != null) {
							switch(v.toLowerCase()) {
							case "center":
								align = h2d_Align.Center;
								break;
							case "left":
								align = h2d_Align.Left;
								break;
							case "multiline-center":
								align = h2d_Align.MultilineCenter;
								break;
							case "multiline-right":
								align = h2d_Align.MultilineRight;
								break;
							case "right":
								align = h2d_Align.Right;
								break;
							}
						}
					}
				}
				if(!this.newLine) {
					if(_gthis.aInteractive != null) {
						_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
						_gthis.aInteractive = null;
					}
					if(_gthis.xPos > _gthis.xMax) {
						_gthis.xMax = _gthis.xPos;
					}
					_gthis.yPos += metrics[_gthis.sizePos].height + _gthis.lineSpacing;
					var size = metrics[++_gthis.sizePos].width;
					switch(align._hx_index) {
					case 0:
						_gthis.xPos = 0;
						if(_gthis.xMin > 0) {
							_gthis.xMin = 0;
						}
						break;
					case 1:case 2:case 3:case 4:
						var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(_gthis.calcWidth) : _gthis.calcWidth < 0 ? 0 : Math.ceil(_gthis.realMaxWidth);
						var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
						_gthis.xPos = Math.floor((max - size) * k);
						if(_gthis.xPos < _gthis.xMin) {
							_gthis.xMin = _gthis.xPos;
						}
						break;
					}
					createInteractive();
					this.newLine = true;
					this.prevChar = -1;
				} else {
					var size = metrics[this.sizePos].width;
					switch(align._hx_index) {
					case 0:
						this.xPos = 0;
						if(this.xMin > 0) {
							this.xMin = 0;
						}
						break;
					case 1:case 2:case 3:case 4:
						var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.calcWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
						var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
						this.xPos = Math.floor((max - size) * k);
						if(this.xPos < this.xMin) {
							this.xMin = this.xPos;
						}
						break;
					}
				}
				break;
			default:
			}
			if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			var _g_current = 0;
			var _g_array = e.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.addNode(child,font,align,rebuild,metrics);
			}
			align = oldAlign;
			switch(nodeName) {
			case "a":
				if(this.aHrefs.length > 0) {
					if(_gthis.aInteractive != null) {
						_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
						_gthis.aInteractive = null;
					}
					this.aHrefs.pop();
					createInteractive();
				}
				break;
			case "p":
				if(this.newLine) {
					var size = metrics[this.sizePos].width;
					switch(align._hx_index) {
					case 0:
						this.xPos = 0;
						if(this.xMin > 0) {
							this.xMin = 0;
						}
						break;
					case 1:case 2:case 3:case 4:
						var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.calcWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
						var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
						this.xPos = Math.floor((max - size) * k);
						if(this.xPos < this.xMin) {
							this.xMin = this.xPos;
						}
						break;
					}
				} else if(this.sizePos < metrics.length - 2 || metrics[this.sizePos + 1].width != 0) {
					if(_gthis.aInteractive != null) {
						_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
						_gthis.aInteractive = null;
					}
					if(_gthis.xPos > _gthis.xMax) {
						_gthis.xMax = _gthis.xPos;
					}
					_gthis.yPos += metrics[_gthis.sizePos].height + _gthis.lineSpacing;
					var size = metrics[++_gthis.sizePos].width;
					switch(align._hx_index) {
					case 0:
						_gthis.xPos = 0;
						if(_gthis.xMin > 0) {
							_gthis.xMin = 0;
						}
						break;
					case 1:case 2:case 3:case 4:
						var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(_gthis.calcWidth) : _gthis.calcWidth < 0 ? 0 : Math.ceil(_gthis.realMaxWidth);
						var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
						_gthis.xPos = Math.floor((max - size) * k);
						if(_gthis.xPos < _gthis.xMin) {
							_gthis.xMin = _gthis.xPos;
						}
						break;
					}
					createInteractive();
					this.newLine = true;
					this.prevChar = -1;
				}
				break;
			default:
			}
			if(prevGlyphs != null) {
				this.glyphs = prevGlyphs;
			}
			if(prevColor != null) {
				var _this = this.glyphs.curColor;
				_this.x = prevColor.x;
				_this.y = prevColor.y;
				_this.z = prevColor.z;
				_this.w = prevColor.w;
			}
		} else {
			if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			if(e.nodeValue.length != 0) {
				this.newLine = false;
				if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
				}
				var t = e.nodeValue;
				var dy = metrics[this.sizePos].baseLine - font.baseLine;
				var _g = 0;
				var _g1 = t.length;
				while(_g < _g1) {
					var i = _g++;
					var cc = HxOverrides.cca(t,i);
					if(cc == 10) {
						if(_gthis.aInteractive != null) {
							_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
							_gthis.aInteractive = null;
						}
						if(_gthis.xPos > _gthis.xMax) {
							_gthis.xMax = _gthis.xPos;
						}
						_gthis.yPos += metrics[_gthis.sizePos].height + _gthis.lineSpacing;
						var size = metrics[++_gthis.sizePos].width;
						switch(align._hx_index) {
						case 0:
							_gthis.xPos = 0;
							if(_gthis.xMin > 0) {
								_gthis.xMin = 0;
							}
							break;
						case 1:case 2:case 3:case 4:
							var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(_gthis.calcWidth) : _gthis.calcWidth < 0 ? 0 : Math.ceil(_gthis.realMaxWidth);
							var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
							_gthis.xPos = Math.floor((max - size) * k);
							if(_gthis.xPos < _gthis.xMin) {
								_gthis.xMin = _gthis.xPos;
							}
							break;
						}
						createInteractive();
						dy = metrics[this.sizePos].baseLine - font.baseLine;
						this.prevChar = -1;
						continue;
					} else {
						var c = font.glyphs.h[cc];
						if(c == null) {
							c = font.charset.resolveChar(cc,font.glyphs);
							if(c == null) {
								c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
							}
						}
						var fc = c;
						if(fc != null) {
							this.xPos += fc.getKerningOffset(this.prevChar);
							if(rebuild) {
								var _this = this.glyphs;
								_this.content.add(this.xPos,this.yPos + dy,_this.curColor.x,_this.curColor.y,_this.curColor.z,_this.curColor.w,fc.t);
							}
							if(this.yPos == 0 && fc.t.dy + dy < this.calcYMin) {
								this.calcYMin = fc.t.dy + dy;
							}
							this.xPos += fc.width + this.letterSpacing;
						}
						this.prevChar = cc;
					}
				}
			}
		}
	}
	,set_imageSpacing: function(s) {
		if(this.imageSpacing == s) {
			return s;
		}
		this.imageSpacing = s;
		this.rebuild();
		return s;
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		this.rebuild();
		return c;
	}
	,set_condenseWhite: function(value) {
		if(this.condenseWhite != value) {
			this.condenseWhite = value;
			this.rebuild();
		}
		return value;
	}
	,set_propagateInteractiveNode: function(value) {
		if(this.propagateInteractiveNode != value) {
			this.propagateInteractiveNode = value;
			this.rebuild();
		}
		return value;
	}
	,set_imageVerticalAlign: function(align) {
		if(this.imageVerticalAlign != align) {
			this.imageVerticalAlign = align;
			this.rebuild();
		}
		return align;
	}
	,set_lineHeightMode: function(v) {
		if(this.lineHeightMode != v) {
			this.lineHeightMode = v;
			this.rebuild();
		}
		return v;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(forSize) {
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(((i) instanceof h2d_Bitmap) || ((i) instanceof h2d_Interactive)) {
					i.set_visible(false);
				}
			}
		}
		h2d_Text.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(forSize) {
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				i.set_visible(true);
			}
		}
	}
	,__class__: h2d_HtmlText
});
var hxd_Interactive = function() { };
$hxClasses["hxd.Interactive"] = hxd_Interactive;
hxd_Interactive.__name__ = "hxd.Interactive";
hxd_Interactive.__isInterface__ = true;
hxd_Interactive.prototype = {
	__class__: hxd_Interactive
};
var h2d_Interactive = function(width,height,parent,shape) {
	this.shapeY = 0;
	this.shapeX = 0;
	this.lastClickFrame = -1;
	this.mouseDownButton = -1;
	this.allowMultiClick = false;
	this.enableRightButton = false;
	this.propagateEvents = false;
	this.cancelEvents = false;
	this.cursor = hxd_Cursor.Button;
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
	this.shape = shape;
};
$hxClasses["h2d.Interactive"] = h2d_Interactive;
h2d_Interactive.__name__ = "h2d.Interactive";
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Object;
h2d_Interactive.prototype = $extend(h2d_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h2d_Object.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		this.maskedBounds = ctx.getCurrentRenderZone(this.maskedBounds);
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = this.getScene();
			if(this.scene != null) {
				this.scene.addEventTarget(this);
			}
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Object.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,preventClick: function() {
		this.mouseDownButton = -1;
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.maskedBounds != null && this.checkBounds(e)) {
			var x = e.relX;
			var y = e.relY;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var pt = new h2d_col_PointImpl(x,y);
			this.localToGlobal(pt);
			if(pt.x < this.maskedBounds.xMin || pt.y < this.maskedBounds.yMin || pt.x > this.maskedBounds.xMax || pt.y > this.maskedBounds.yMax) {
				e.cancel = true;
				return;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				var frame = hxd_Timer.frameCount;
				if(this.mouseDownButton == e.button && (this.lastClickFrame != frame || this.allowMultiClick)) {
					this.onClick(e);
					this.lastClickFrame = frame;
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			e.propagate = true;
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,calcAbsPos: function() {
		h2d_Object.prototype.calcAbsPos.call(this);
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,eventToLocal: function(e) {
		var i = this;
		var dx = e.relX - i.absX;
		var dy = e.relY - i.absY;
		e.relX = (dx * i.matD - dy * i.matC) * i.invDet;
		e.relY = (-dx * i.matB + dy * i.matA) * i.invDet;
	}
	,startCapture: function(callb,onCancel,touchId) {
		var _gthis = this;
		this.scene.startCapture(function(event) {
			var x = event.relX;
			var y = event.relY;
			_gthis.eventToLocal(event);
			callb(event);
			event.relX = x;
			event.relY = y;
		},onCancel,touchId);
	}
	,stopCapture: function() {
		this.scene.stopCapture();
	}
	,startDrag: function(callb,onCancel) {
		this.startCapture(callb,onCancel);
	}
	,stopDrag: function() {
		this.stopCapture();
	}
	,focus: function() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	,blur: function() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	,isOver: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.overList.indexOf(this) != -1;
		} else {
			return false;
		}
	}
	,hasFocus: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
});
var h2d_Mask = function(width,height,parent) {
	this.scrollY = 0;
	this.scrollX = 0;
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
};
$hxClasses["h2d.Mask"] = h2d_Mask;
h2d_Mask.__name__ = "h2d.Mask";
h2d_Mask.maskWith = function(ctx,object,width,height,scrollX,scrollY) {
	if(scrollY == null) {
		scrollY = 0;
	}
	if(scrollX == null) {
		scrollX = 0;
	}
	var x1 = object.absX + scrollX;
	var y1 = object.absY + scrollY;
	var x2 = width * object.matA + height * object.matC + x1;
	var y2 = width * object.matB + height * object.matD + y1;
	var tmp;
	if(x1 > x2) {
		tmp = x1;
		x1 = x2;
		x2 = tmp;
	}
	if(y1 > y2) {
		tmp = y1;
		y1 = y2;
		y2 = tmp;
	}
	ctx.clipRenderZone(x1,y1,x2 - x1,y2 - y1);
};
h2d_Mask.unmask = function(ctx) {
	ctx.popRenderZone();
};
h2d_Mask.__super__ = h2d_Object;
h2d_Mask.prototype = $extend(h2d_Object.prototype,{
	scrollTo: function(x,y) {
		this.set_scrollX(x);
		this.set_scrollY(y);
	}
	,scrollBy: function(x,y) {
		this.set_scrollX(this.scrollX + x);
		this.set_scrollY(this.scrollY + y);
	}
	,set_scrollX: function(v) {
		if(this.scrollBounds != null) {
			var min = this.scrollBounds.xMin;
			var max = this.scrollBounds.xMax - this.width;
			if(max == null) {
				max = 1.;
			}
			if(min == null) {
				min = 0.;
			}
			if(v < min) {
				v = min;
			} else if(v > max) {
				v = max;
			}
		}
		this.posChanged = true;
		return this.scrollX = v;
	}
	,set_scrollY: function(v) {
		if(this.scrollBounds != null) {
			var min = this.scrollBounds.yMin;
			var max = this.scrollBounds.yMax - this.height;
			if(max == null) {
				max = 1.;
			}
			if(min == null) {
				min = 0.;
			}
			if(v < min) {
				v = min;
			} else if(v > max) {
				v = max;
			}
		}
		this.posChanged = true;
		return this.scrollY = v;
	}
	,calcAbsPos: function() {
		h2d_Object.prototype.calcAbsPos.call(this);
		this.absX -= this.scrollX;
		this.absY -= this.scrollY;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		var xMin = out.xMin;
		var yMin = out.yMin;
		var xMax = out.xMax;
		var yMax = out.yMax;
		out.xMin = 1e20;
		out.yMin = 1e20;
		out.xMax = -1e20;
		out.yMax = -1e20;
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		this.addBounds(relativeTo,out,this.scrollX,this.scrollY,this.width,this.height);
		var bxMin = out.xMin;
		var byMin = out.yMin;
		var bxMax = out.xMax;
		var byMax = out.yMax;
		out.xMin = xMin;
		out.xMax = xMax;
		out.yMin = yMin;
		out.yMax = yMax;
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(out.xMin < bxMin) {
			out.xMin = xMin > bxMin ? bxMin : xMin;
		}
		if(out.yMin < byMin) {
			out.yMin = yMin > byMin ? byMin : yMin;
		}
		if(out.xMax > bxMax) {
			out.xMax = xMax < bxMax ? bxMax : xMax;
		}
		if(out.yMax > byMax) {
			out.yMax = yMax < byMax ? byMax : yMax;
		}
	}
	,drawRec: function(ctx) {
		h2d_Mask.maskWith(ctx,this,this.width,this.height,this.scrollX,this.scrollY);
		h2d_Object.prototype.drawRec.call(this,ctx);
		h2d_Mask.unmask(ctx);
	}
	,__class__: h2d_Mask
});
var h3d_impl_RenderContext = function() {
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
	this.textures = new h3d_impl_TextureCache();
	this.globals = new hxsl_Globals();
};
$hxClasses["h3d.impl.RenderContext"] = h3d_impl_RenderContext;
h3d_impl_RenderContext.__name__ = "h3d.impl.RenderContext";
h3d_impl_RenderContext.get = function() {
	return h3d_impl_RenderContext.inst;
};
h3d_impl_RenderContext.getType = function(cl) {
	var value = h3d_impl_RenderContext.inst;
	if(js_Boot.__downcastCheck(value,cl)) {
		return value;
	} else {
		return null;
	}
};
h3d_impl_RenderContext.prototype = {
	setCurrent: function() {
		h3d_impl_RenderContext.inst = this;
	}
	,clearCurrent: function() {
		if(h3d_impl_RenderContext.inst == this) {
			h3d_impl_RenderContext.inst = null;
		} else {
			throw haxe_Exception.thrown("Context has changed");
		}
	}
	,dispose: function() {
		this.textures.dispose();
	}
	,fillRec: function(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var _gsize = type.size;
			if(_gsize == 4) {
				var v1 = v;
				out[pos++] = v1.x;
				out[pos++] = v1.y;
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				return 4;
			} else {
				var n = _gsize;
				var v1 = v;
				out[pos++] = v1.x;
				out[pos++] = v1.y;
				if(n == 3) {
					out[pos++] = v1.z;
				}
				return n;
			}
			break;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			out[pos++] = m._14;
			out[pos++] = m._24;
			out[pos++] = m._34;
			out[pos++] = m._44;
			return 16;
		case 8:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			return 12;
		case 13:
			var vl = type.vl;
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			var _gt = type.t;
			var _gsize = type.size;
			switch(_gt._hx_index) {
			case 3:
				if(_gsize._hx_index == 0) {
					var len = _gsize.v;
					var v1 = v;
					var size = 0;
					var count = v1.length < len ? v1.length : len;
					var _g = 0;
					var _g1 = count;
					while(_g < _g1) {
						var i = _g++;
						out[pos++] = v1[i];
					}
					return len;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_gt.size == 4) {
					if(_gt.t._hx_index == 1) {
						if(_gsize._hx_index == 0) {
							var len = _gsize.v;
							var v1 = v;
							var _g = 0;
							var _g1 = len;
							while(_g < _g1) {
								var i = _g++;
								var n = v1[i];
								if(n == null) {
									break;
								}
								out[pos++] = n.x;
								out[pos++] = n.y;
								out[pos++] = n.z;
								out[pos++] = n.w;
							}
							return len * 4;
						} else {
							throw haxe_Exception.thrown("assert " + Std.string(type));
						}
					} else if(_gsize._hx_index == 0) {
						var t = _gt;
						var len = _gsize.v;
						var v1 = v;
						var size = 0;
						var _g = 0;
						var _g1 = len;
						while(_g < _g1) {
							var i = _g++;
							var n = v1[i];
							if(n == null) {
								break;
							}
							size = this.fillRec(n,t,out,pos);
							pos += size;
						}
						return len * size;
					} else {
						throw haxe_Exception.thrown("assert " + Std.string(type));
					}
				} else if(_gsize._hx_index == 0) {
					var t = _gt;
					var len = _gsize.v;
					var v1 = v;
					var size = 0;
					var _g = 0;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_gsize._hx_index == 0) {
					var len = _gsize.v;
					var v1 = v;
					var _g = 0;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var m = v1[i];
						if(m == null) {
							break;
						}
						out[pos++] = m._11;
						out[pos++] = m._21;
						out[pos++] = m._31;
						out[pos++] = m._41;
						out[pos++] = m._12;
						out[pos++] = m._22;
						out[pos++] = m._32;
						out[pos++] = m._42;
						out[pos++] = m._13;
						out[pos++] = m._23;
						out[pos++] = m._33;
						out[pos++] = m._43;
					}
					return len * 12;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			default:
				if(_gsize._hx_index == 0) {
					var t = _gt;
					var len = _gsize.v;
					var v1 = v;
					var size = 0;
					var _g = 0;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw haxe_Exception.thrown("assert " + Std.string(type));
		}
	}
	,shaderInfo: function(shaders,path) {
		var name = path.split(".").pop();
		while(shaders != null) {
			var inst = shaders.s.instance;
			var _g = 0;
			var _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	,getPtr: function(data) {
		return data;
	}
	,getParamValue: function(p,shaders,opt) {
		if(opt == null) {
			opt = false;
		}
		if(p.perObjectGlobal != null) {
			var v = this.globals.map.h[p.perObjectGlobal.gid];
			if(v == null) {
				throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + this.shaderInfo(shaders,p.perObjectGlobal.path));
			}
			if(p.type._hx_index == 17) {
				return v.texture;
			}
			return v;
		}
		var si = shaders;
		var n = p.instance;
		while(--n > 0) si = si.next;
		var v = si.s.getParamValue(p.index);
		if(v == null && !opt) {
			throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
		}
		return v;
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var g = s.vertex.globals;
		var ptr = buf.vertex.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				throw haxe_Exception.thrown("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		var g = s.fragment.globals;
		var ptr = buf.fragment.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				throw haxe_Exception.thrown("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
	}
	,fillParams: function(buf,s,shaders) {
		var _gthis = this;
		var curInstance = -1;
		var curInstanceValue = null;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				v = p.type._hx_index == 17 ? v2.texture : v2;
			} else {
				var index2 = p.instance;
				var v3;
				if(curInstance == index2) {
					v3 = curInstanceValue;
				} else {
					var si2 = shaders;
					curInstance = index2;
					while(--index2 > 0) si2 = si2.next;
					curInstanceValue = si2.s;
					v3 = curInstanceValue;
				}
				var v4 = v3.getParamValue(p.index);
				if(v4 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				v = v4;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p = s1.textures;
		while(p != null) {
			var opt = !h3d_impl_RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			var t;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				t = p.type._hx_index == 17 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				t = v2;
			}
			if(p.pos < 0) {
				var arr = t;
				var _g = 0;
				var _g1 = -p.pos;
				while(_g < _g1) {
					var i = _g++;
					buf1.tex[tid++] = arr[i];
				}
			} else {
				buf1.tex[tid++] = t;
			}
			p = p.next;
		}
		var p = s1.buffers;
		var bid = 0;
		while(p != null) {
			var opt = !h3d_impl_RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			var b;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				b = p.type._hx_index == 17 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				b = v2;
			}
			buf1.buffers[bid++] = b;
			p = p.next;
		}
		var buf1 = buf.fragment;
		var s1 = s.fragment;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				v = p.type._hx_index == 17 ? v2.texture : v2;
			} else {
				var index2 = p.instance;
				var v3;
				if(curInstance == index2) {
					v3 = curInstanceValue;
				} else {
					var si2 = shaders;
					curInstance = index2;
					while(--index2 > 0) si2 = si2.next;
					curInstanceValue = si2.s;
					v3 = curInstanceValue;
				}
				var v4 = v3.getParamValue(p.index);
				if(v4 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				v = v4;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p = s1.textures;
		while(p != null) {
			var opt = !h3d_impl_RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			var t;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				t = p.type._hx_index == 17 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				t = v2;
			}
			if(p.pos < 0) {
				var arr = t;
				var _g = 0;
				var _g1 = -p.pos;
				while(_g < _g1) {
					var i = _g++;
					buf1.tex[tid++] = arr[i];
				}
			} else {
				buf1.tex[tid++] = t;
			}
			p = p.next;
		}
		var p = s1.buffers;
		var bid = 0;
		while(p != null) {
			var opt = !h3d_impl_RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			var b;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				b = p.type._hx_index == 17 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				b = v2;
			}
			buf1.buffers[bid++] = b;
			p = p.next;
		}
	}
	,__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.renderZoneIndex = 0;
	this.renderZoneStack = [];
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.output = new h3d_pass_OutputShader();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.setPriority(100);
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.targetsStackIndex = 0;
	this.cameraStack = [];
	this.cameraStackIndex = 0;
	this.filterStack = [];
	this.filterStackIndex = 0;
};
$hxClasses["h2d.RenderContext"] = h2d_RenderContext;
h2d_RenderContext.__name__ = "h2d.RenderContext";
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	dispose: function() {
		h3d_impl_RenderContext.prototype.dispose.call(this);
		if(this.fixedBuffer != null) {
			this.fixedBuffer.dispose();
		}
	}
	,hasBuffering: function() {
		return false;
	}
	,begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.viewA = this.scene.viewportA;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = this.scene.viewportD;
		this.viewX = this.scene.viewportX;
		this.viewY = this.scene.viewportY;
		this.setCurrent();
		this.targetFlipY = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.globals.set("time",this.time);
		this.globals.set("global.time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / this.engine.width;
		var y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _this = this.baseShader.viewportA__;
		var x = this.scene.viewportA;
		var y = 0;
		var z = this.scene.viewportX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = 0;
		var y = this.scene.viewportD * -this.baseFlipY;
		var z = this.scene.viewportY * -this.baseFlipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.filterMatrixA__;
		var x = 1;
		var y = 0;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.filterMatrixB__;
		var x = 0;
		var y = 1;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	,allocTarget: function(name,filter) {
		if(filter == null) {
			filter = false;
		}
		var t = this.textures.allocTarget(name,this.scene.width,this.scene.height,false);
		t.set_filter(filter ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		return t;
	}
	,clear: function(color) {
		this.engine.clear(color);
	}
	,initShaders: function(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.output.compileShaders(this.globals,shaders);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(this.compiledShader);
		} else {
			var _this = this.buffers;
			var s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		this.clearCurrent();
		if(this.targetsStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popTarget()");
		}
		if(this.cameraStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popCamera()");
		}
	}
	,pushCamera: function(cam) {
		var entry = this.cameraStack[this.cameraStackIndex++];
		if(entry == null) {
			entry = { va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0};
			this.cameraStack.push(entry);
		}
		var tmpA = this.viewA;
		var tmpB = this.viewB;
		var tmpC = this.viewC;
		var tmpD = this.viewD;
		entry.va = tmpA;
		entry.vb = tmpB;
		entry.vc = tmpC;
		entry.vd = tmpD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		this.viewA = cam.matA * tmpA + cam.matB * tmpC;
		this.viewB = cam.matA * tmpB + cam.matB * tmpD;
		this.viewC = cam.matC * tmpA + cam.matD * tmpC;
		this.viewD = cam.matC * tmpB + cam.matD * tmpD;
		this.viewX = cam.absX * tmpA + cam.absY * tmpC + this.viewX;
		this.viewY = cam.absX * tmpB + cam.absY * tmpD + this.viewY;
		var flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
	}
	,popCamera: function() {
		if(this.cameraStackIndex == 0) {
			throw haxe_Exception.thrown("Too many popCamera()");
		}
		var inf = this.cameraStack[--this.cameraStackIndex];
		this.viewA = inf.va;
		this.viewB = inf.vb;
		this.viewC = inf.vc;
		this.viewD = inf.vd;
		this.viewX = inf.vx;
		this.viewY = inf.vy;
		var flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.inFilter = this.filterStack[this.filterStackIndex++];
		if(this.inFilter == null) {
			this.inFilter = { spr : null, scaleX : 1, scaleY : 1};
			this.filterStack.push(this.inFilter);
		}
		this.inFilter.spr = spr;
		this.inFilter.scaleX = 1;
		this.inFilter.scaleY = 1;
		return true;
	}
	,setFilterScale: function(scaleX,scaleY) {
		if(this.inFilter != null) {
			this.inFilter.scaleX = scaleX;
			this.inFilter.scaleY = scaleY;
		}
	}
	,getFilterScale: function(into) {
		if(into == null) {
			into = new h2d_col_PointImpl(0.,0.);
		}
		if(this.inFilter != null) {
			var x = this.inFilter.scaleX;
			var y = this.inFilter.scaleY;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			into.x = x;
			into.y = y;
		} else {
			var x = 1;
			var y = 1;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			into.x = x;
			into.y = y;
		}
		return into;
	}
	,popFilter: function() {
		this.inFilter.spr = null;
		this.filterStackIndex--;
		if(this.filterStackIndex > 0) {
			this.inFilter = this.filterStack[this.filterStackIndex - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(this.filterStack[this.filterStackIndex].spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		var entry = this.targetsStack[this.targetsStackIndex++];
		if(entry == null) {
			entry = { t : null, va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0, hasRZ : false, rzX : 0, rzY : 0, rzW : 0, rzH : 0};
			this.targetsStack.push(entry);
		}
		entry.t = this.curTarget;
		entry.va = this.viewA;
		entry.vb = this.viewB;
		entry.vc = this.viewC;
		entry.vd = this.viewD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		entry.hasRZ = this.hasRenderZone;
		entry.rzX = this.renderX;
		entry.rzY = this.renderY;
		entry.rzW = this.renderW;
		entry.rzH = this.renderH;
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		this.viewA = 2 / width;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = 2 / height;
		this.viewX = -1 - startX * this.viewA;
		this.viewY = -1 - startY * this.viewD;
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * -this.targetFlipY;
		var y = this.viewD * -this.targetFlipY;
		var z = this.viewY * -this.targetFlipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.curTarget = t;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,pushTargets: function(texs) {
		this.pushTarget(texs[0]);
		if(texs.length > 1) {
			this.engine.popTarget();
			this.engine.pushTargets(texs);
		}
	}
	,popTarget: function() {
		if(this.targetsStackIndex <= 0) {
			throw haxe_Exception.thrown("Too many popTarget()");
		}
		this.engine.popTarget();
		var tinf = this.targetsStack[--this.targetsStackIndex];
		var t = this.curTarget = tinf.t;
		this.viewA = tinf.va;
		this.viewB = tinf.vb;
		this.viewC = tinf.vc;
		this.viewD = tinf.vd;
		this.viewX = tinf.vx;
		this.viewY = tinf.vy;
		var flipY = t == null ? -this.baseFlipY : -this.targetFlipY;
		this.initShaders(this.baseShaderList);
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		if(tinf.hasRZ) {
			this.setRZ(tinf.rzX,tinf.rzY,tinf.rzW,tinf.rzH);
		}
	}
	,pushRenderZone: function(x,y,w,h) {
		var inf = this.renderZoneStack[this.renderZoneIndex++];
		if(inf == null) {
			inf = { hasRZ : this.hasRenderZone, x : this.renderX, y : this.renderY, w : this.renderW, h : this.renderH};
			this.renderZoneStack[this.renderZoneIndex - 1] = inf;
		} else if(this.hasRenderZone) {
			inf.hasRZ = true;
			inf.x = this.renderX;
			inf.y = this.renderY;
			inf.w = this.renderW;
			inf.h = this.renderH;
		} else {
			inf.hasRZ = false;
		}
		this.setRZ(x,y,w,h);
	}
	,popRenderZone: function() {
		if(this.renderZoneIndex == 0) {
			throw haxe_Exception.thrown("Too many popRenderZone()");
		}
		var inf = this.renderZoneStack[--this.renderZoneIndex];
		if(inf.hasRZ) {
			this.setRZ(inf.x,inf.y,inf.w,inf.h);
		} else {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,getCurrentRenderZone: function(bounds) {
		if(!this.hasRenderZone) {
			return null;
		}
		if(bounds == null) {
			bounds = new h2d_col_Bounds();
		}
		var x = this.renderX;
		var y = this.renderY;
		bounds.xMin = x;
		bounds.yMin = y;
		bounds.xMax = x + this.renderW;
		bounds.yMax = y + this.renderH;
		return bounds;
	}
	,clipRenderZone: function(x,y,w,h) {
		if(!this.hasRenderZone) {
			this.pushRenderZone(x,y,w,h);
			return;
		}
		var x2 = Math.min(x + w,this.renderX + this.renderW);
		var y2 = Math.min(y + h,this.renderY + this.renderH);
		x = Math.max(x,this.renderX);
		y = Math.max(y,this.renderY);
		if(x2 < x) {
			x2 = x;
		}
		if(y2 < y) {
			y2 = y;
		}
		this.pushRenderZone(x,y,x2 - x,y2 - y);
	}
	,setRZ: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = 1.;
		var scaleY = 1.;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone(x * scaleX + (this.scene.viewportX + 1) * (this.engine.width / 2) + 1e-10 | 0,y * scaleY + (this.scene.viewportY + 1) * (this.engine.height / 2) + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,clearRZ: function() {
		this.hasRenderZone = false;
		this.engine.setRenderZone();
	}
	,setRenderZone: function(x,y,w,h) {
		this.pushRenderZone(x,y,w,h);
	}
	,clearRenderZone: function() {
		this.popRenderZone();
	}
	,drawLayer: function(layer) {
		this.scene.drawLayer(this,layer);
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,flush: function() {
	}
	,_flush: function() {
		if(this.bufPos == 0) {
			return;
		}
		this.beforeDraw();
		var nverts = this.bufPos / this.stride | 0;
		var tmp = new h3d_Buffer(nverts,hxd_BufferFormat.get_XY_UV_RGBA(),[h3d_BufferFlag.Dynamic]);
		tmp.uploadFloats(this.buffer,0,nverts);
		var _this = this.engine;
		_this.renderBuffer(tmp,_this.mem.getQuadIndexes(tmp.vertices),2,0,-1);
		tmp.dispose();
		this.bufPos = 0;
		this.texture = null;
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter != null && this.inFilter.spr == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d_BlendMode.Alpha || blend == h2d_BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d_mat_Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d_mat_Blend.One);
				}
			}
		}
		this.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.engine.uploadShaderBuffers(this.buffers,3);
	}
	,setupColor: function(obj) {
		if(this.inFilter != null && this.inFilter.spr == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
	}
	,beginDrawBatchState: function(obj) {
		if(!this.beginDraw(obj,null,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = obj.matA;
		var y = obj.matC;
		var z = obj.absX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = obj.matB;
		var y = obj.matD;
		var z = obj.absY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		return true;
	}
	,swapTexture: function(texture) {
		this.texture = texture;
		this.beforeDraw();
	}
	,beginDrawObject: function(obj,texture) {
		if(!this.beginDraw(obj,texture,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = obj.matA;
		var y = obj.matC;
		var z = obj.absX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = obj.matB;
		var y = obj.matD;
		var z = obj.absY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.beforeDraw();
		return true;
	}
	,beginDrawBatch: function(obj,texture) {
		return this.beginDraw(obj,texture,false);
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			var tmpA = obj.matA * f1.x + obj.matB * f1.y;
			var tmpB = obj.matA * f2.x + obj.matB * f2.y;
			var tmpC = obj.matC * f1.x + obj.matD * f1.y;
			var tmpD = obj.matC * f2.x + obj.matD * f2.y;
			var tmpX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			var tmpY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
			matA = tmpA * this.viewA + tmpB * this.viewC;
			matB = tmpA * this.viewB + tmpB * this.viewD;
			matC = tmpC * this.viewA + tmpD * this.viewC;
			matD = tmpC * this.viewB + tmpD * this.viewD;
			absX = tmpX * this.viewA + tmpY * this.viewC + this.viewX;
			absY = tmpX * this.viewB + tmpY * this.viewD + this.viewY;
		} else {
			matA = obj.matA * this.viewA + obj.matB * this.viewC;
			matB = obj.matA * this.viewB + obj.matB * this.viewD;
			matC = obj.matC * this.viewA + obj.matD * this.viewC;
			matD = obj.matC * this.viewB + obj.matD * this.viewD;
			absX = obj.absX * this.viewA + obj.absY * this.viewC + this.viewX;
			absY = obj.absX * this.viewB + obj.absY * this.viewD + this.viewY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var a = matA < 0 ? -matA : matA;
			var b = matD < 0 ? -matD : matD;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA;
			var cy = absY + ty * matD;
			if(cx + tr < -1 || cx - tr > 1 || cy + tr < -1 || cy - tr > 1) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px = (x + tile.dx) * matA + tile.dy * matC;
			var py = (x + tile.dx) * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var y = tile.height;
			var px = tile.dx * matA + (y + tile.dy) * matC;
			var py = tile.dx * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var y = tile.height;
			var px = (x + tile.dx) * matA + (y + tile.dy) * matC;
			var py = (x + tile.dx) * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			if(absX + xMax < -1 || absY + yMax < -1 || absX + xMin > 1 || absY + yMin > 1) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = tile.width * obj.matA;
		var y = tile.height * obj.matC;
		var z = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = tile.width * obj.matB;
		var y = tile.height * obj.matD;
		var z = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.uvPos__;
		var x = tile.u;
		var y = tile.v;
		var z = tile.u2 - tile.u;
		var w = tile.v2 - tile.v;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.vbuf == null) {
			this.fixedBuffer = new h3d_Buffer(4,hxd_BufferFormat.get_XY_UV_RGBA());
			var k = hxd__$FloatBuffer_Float32Expand._new(0);
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			this.fixedBuffer.uploadFloats(k,0,4);
		}
		var _this = this.engine;
		var b = this.fixedBuffer;
		_this.renderBuffer(b,_this.mem.getQuadIndexes(b.vertices),2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = false;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.isRelative__ = isRelative;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw haxe_Exception.thrown("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,__class__: h2d_RenderContext
});
var h2d_TileGroup = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.rangeMin = this.rangeMax = -1;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.curColor = new h3d_Vector4Impl(x,y,z,w);
	this.content = new h2d_TileLayerContent();
};
$hxClasses["h2d.TileGroup"] = h2d_TileGroup;
h2d_TileGroup.__name__ = "h2d.TileGroup";
h2d_TileGroup.__super__ = h2d_Drawable;
h2d_TileGroup.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	,clear: function() {
		this.content.clear();
	}
	,invalidate: function() {
		this.content.dispose();
	}
	,count: function() {
		return this.content.triCount() >> 1;
	}
	,onRemove: function() {
		this.content.dispose();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,setDefaultColor: function(rgb,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		this.curColor.x = (rgb >> 16 & 255) / 255;
		this.curColor.y = (rgb >> 8 & 255) / 255;
		this.curColor.z = (rgb & 255) / 255;
		this.curColor.w = alpha;
	}
	,add: function(x,y,t) {
		this.content.add(x,y,this.curColor.x,this.curColor.y,this.curColor.z,this.curColor.w,t);
	}
	,addColor: function(x,y,r,g,b,a,t) {
		this.content.add(x,y,r,g,b,a,t);
	}
	,addAlpha: function(x,y,a,t) {
		this.content.add(x,y,this.curColor.x,this.curColor.y,this.curColor.z,a,t);
	}
	,addTransform: function(x,y,sx,sy,r,t) {
		this.content.addTransform(x,y,sx,sy,r,this.curColor,t);
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.visible) {
			var _this = this.content;
			if(_this.buffer == null || _this.buffer.vbuf == null) {
				_this.alloc(h3d_Engine.CURRENT);
			}
		}
	}
	,drawWith: function(ctx,obj) {
		var max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawBatchState(obj)) {
			return;
		}
		var min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.vbuf == null) {
			_this.alloc(h3d_Engine.CURRENT);
		}
		_this.state.drawQuads(ctx,_this.buffer,min,max - min);
	}
	,__class__: h2d_TileGroup
});
var h2d_ScaleGrid = function(tile,borderL,borderT,borderR,borderB,parent) {
	this.currentScaleY = 1.;
	this.currentScaleX = 1.;
	this.borderScale = 1.0;
	h2d_TileGroup.call(this,tile,parent);
	this.set_borderLeft(borderL);
	this.set_borderRight(borderR != null ? borderR : borderL);
	this.set_borderTop(borderT);
	this.set_borderBottom(borderB != null ? borderB : borderT);
	this.set_width(tile.width);
	this.set_height(tile.height);
};
$hxClasses["h2d.ScaleGrid"] = h2d_ScaleGrid;
h2d_ScaleGrid.__name__ = "h2d.ScaleGrid";
h2d_ScaleGrid.__super__ = h2d_TileGroup;
h2d_ScaleGrid.prototype = $extend(h2d_TileGroup.prototype,{
	set_tileBorders: function(b) {
		if(this.tileBorders == b) {
			return b;
		}
		this.tileBorders = b;
		this.clear();
		return b;
	}
	,set_tileCenter: function(b) {
		if(this.tileCenter == b) {
			return b;
		}
		this.tileCenter = b;
		this.clear();
		return b;
	}
	,set_ignoreScale: function(b) {
		if(this.ignoreScale == b) {
			return b;
		}
		this.ignoreScale = b;
		this.clear();
		return b;
	}
	,set_borderScale: function(s) {
		if(this.borderScale == s) {
			return s;
		}
		this.borderScale = s;
		this.clear();
		return s;
	}
	,set_width: function(w) {
		if(this.width == w) {
			return w;
		}
		this.width = w;
		this.clear();
		return w;
	}
	,set_height: function(h) {
		if(this.height == h) {
			return h;
		}
		this.height = h;
		this.clear();
		return h;
	}
	,set_borderWidth: function(w) {
		if(this.borderLeft == w && this.borderRight == w) {
			return w;
		}
		this.borderLeft = w;
		this.borderRight = w;
		this.clear();
		return w;
	}
	,set_borderHeight: function(h) {
		if(this.borderTop == h && this.borderBottom == h) {
			return h;
		}
		this.borderTop = h;
		this.borderBottom = h;
		this.clear();
		return h;
	}
	,set_borderTop: function(top) {
		if(this.borderTop == top) {
			return top;
		}
		this.borderTop = top;
		this.clear();
		return top;
	}
	,set_borderBottom: function(bot) {
		if(this.borderBottom == bot) {
			return bot;
		}
		this.borderBottom = bot;
		this.clear();
		return bot;
	}
	,set_borderLeft: function(left) {
		if(this.borderLeft == left) {
			return left;
		}
		this.borderLeft = left;
		this.clear();
		return left;
	}
	,set_borderRight: function(right) {
		if(this.borderRight == right) {
			return right;
		}
		this.borderRight = right;
		this.clear();
		return right;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		this.checkUpdate();
		h2d_TileGroup.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
	}
	,checkUpdate: function() {
		var needUpdate = false;
		if(this.ignoreScale) {
			this.syncPos();
			var _this_a = 1;
			var _this_b = 0;
			var _this_c = 0;
			var _this_d = 1;
			var _this_x = 0;
			var _this_y = 0;
			_this_a = this.matA;
			_this_b = this.matB;
			_this_c = this.matC;
			_this_d = this.matD;
			_this_x = this.absX;
			_this_y = this.absY;
			var x = 0.;
			var y = 0.;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var s_x = x;
			var s_y = y;
			s_x = Math.sqrt(_this_a * _this_a + _this_b * _this_b);
			s_y = Math.sqrt(_this_c * _this_c + _this_d * _this_d);
			if(_this_a * _this_d - _this_b * _this_c < 0) {
				s_x *= -1;
				s_y *= -1;
			}
			if(this.currentScaleX != s_x || this.currentScaleY != s_y) {
				needUpdate = true;
				this.currentScaleX = s_x;
				this.currentScaleY = s_y;
			}
		}
		if(this.content.isEmpty() || this.tile != this.contentTile) {
			this.contentTile = this.tile;
			needUpdate = true;
		}
		if(needUpdate) {
			this.clear();
			this.updateContent();
		}
	}
	,updateContent: function() {
		var bt = this.borderTop;
		var bb = this.borderBottom;
		var bl = this.borderLeft;
		var br = this.borderRight;
		var unscaledBl = bl * this.borderScale;
		var unscaledBr = br * this.borderScale;
		var unscaledBt = bt * this.borderScale;
		var unscaledBb = bb * this.borderScale;
		var invScaleX = 1.;
		var invScaleY = 1.;
		if(this.ignoreScale) {
			this.syncPos();
			var _this_a = 1;
			var _this_b = 0;
			var _this_c = 0;
			var _this_d = 1;
			var _this_x = 0;
			var _this_y = 0;
			_this_a = this.matA;
			_this_b = this.matB;
			_this_c = this.matC;
			_this_d = this.matD;
			_this_x = this.absX;
			_this_y = this.absY;
			var x = 0.;
			var y = 0.;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var s_x = x;
			var s_y = y;
			s_x = Math.sqrt(_this_a * _this_a + _this_b * _this_b);
			s_y = Math.sqrt(_this_c * _this_c + _this_d * _this_d);
			if(_this_a * _this_d - _this_b * _this_c < 0) {
				s_x *= -1;
				s_y *= -1;
			}
			if(s_x == 0. || s_y == 0.) {
				return;
			}
			invScaleX /= s_x;
			invScaleY /= s_y;
			unscaledBl *= invScaleX;
			unscaledBr *= invScaleX;
			unscaledBt *= invScaleY;
			unscaledBb *= invScaleY;
		}
		var t = this.tile.sub(0,0,bl,bt);
		t.scaleToSize(unscaledBl,unscaledBt);
		var color = this.curColor;
		this.content.add(0,0,color.x,color.y,color.z,color.w,t);
		t = this.tile.sub(this.tile.width - br,0,br,bt);
		t.scaleToSize(unscaledBr,unscaledBt);
		var color = this.curColor;
		this.content.add(this.width - unscaledBr,0,color.x,color.y,color.z,color.w,t);
		t = this.tile.sub(0,this.tile.height - bb,bl,bb);
		t.scaleToSize(unscaledBl,unscaledBb);
		var color = this.curColor;
		this.content.add(0,this.height - unscaledBb,color.x,color.y,color.z,color.w,t);
		t = this.tile.sub(this.tile.width - br,this.tile.height - bb,br,bb);
		t.scaleToSize(unscaledBr,unscaledBb);
		var color = this.curColor;
		this.content.add(this.width - unscaledBr,this.height - unscaledBb,color.x,color.y,color.z,color.w,t);
		var innerTileWidth = this.tile.width - (br + bl);
		var innerTileHeight = this.tile.height - (bb + bt);
		var innerWidth = this.width - (unscaledBl + unscaledBr);
		var innerHeight = this.height - (unscaledBt + unscaledBb);
		if(!this.tileBorders) {
			var t = this.tile.sub(bl,0,innerTileWidth,bt);
			t.scaleToSize(innerWidth,unscaledBt);
			var color = this.curColor;
			this.content.add(unscaledBl,0,color.x,color.y,color.z,color.w,t);
			var t = this.tile.sub(bl,this.tile.height - bb,innerTileWidth,bb);
			t.scaleToSize(innerWidth,unscaledBb);
			var color = this.curColor;
			this.content.add(unscaledBl,innerHeight + unscaledBt,color.x,color.y,color.z,color.w,t);
			var t = this.tile.sub(0,bt,bl,innerTileHeight);
			t.scaleToSize(unscaledBl,innerHeight);
			var color = this.curColor;
			this.content.add(0,unscaledBt,color.x,color.y,color.z,color.w,t);
			var t = this.tile.sub(this.tile.width - br,bt,br,innerTileHeight);
			t.scaleToSize(unscaledBr,innerHeight);
			var color = this.curColor;
			this.content.add(innerWidth + unscaledBl,unscaledBt,color.x,color.y,color.z,color.w,t);
		} else {
			var unscaledInnerTileWidth = innerTileWidth * invScaleX;
			var unscaledInnerTileHeight = innerTileHeight * invScaleY;
			var rw = innerWidth / unscaledInnerTileWidth | 0;
			var _g = 0;
			var _g1 = rw;
			while(_g < _g1) {
				var x = _g++;
				var t = this.tile.sub(bl,0,innerTileWidth,bt);
				t.scaleToSize(unscaledInnerTileWidth,unscaledBt);
				var color = this.curColor;
				this.content.add(unscaledBl + x * unscaledInnerTileWidth,0,color.x,color.y,color.z,color.w,t);
				t = this.tile.sub(bl,this.tile.height - bb,innerTileWidth,bb);
				t.scaleToSize(unscaledInnerTileWidth,unscaledBb);
				var color1 = this.curColor;
				this.content.add(unscaledBl + x * unscaledInnerTileWidth,this.height - unscaledBb,color1.x,color1.y,color1.z,color1.w,t);
			}
			var dx = innerWidth - rw * unscaledInnerTileWidth;
			if(dx > 0) {
				var t = this.tile.sub(bl,0,dx / invScaleX,bt);
				t.scaleToSize(dx,unscaledBt);
				var color = this.curColor;
				this.content.add(unscaledBl + rw * unscaledInnerTileWidth,0,color.x,color.y,color.z,color.w,t);
				t = this.tile.sub(bl,this.tile.height - bb,dx / invScaleX,bb);
				t.scaleToSize(dx,unscaledBb);
				var color = this.curColor;
				this.content.add(unscaledBl + rw * unscaledInnerTileWidth,this.height - unscaledBb,color.x,color.y,color.z,color.w,t);
			}
			var rh = innerHeight / unscaledInnerTileHeight | 0;
			var _g = 0;
			var _g1 = rh;
			while(_g < _g1) {
				var y = _g++;
				var t = this.tile.sub(0,bt,bl,innerTileHeight);
				t.scaleToSize(unscaledBl,unscaledInnerTileHeight);
				var color = this.curColor;
				this.content.add(0,unscaledBt + y * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
				t = this.tile.sub(this.tile.width - br,bt,br,innerTileHeight);
				t.scaleToSize(unscaledBr,unscaledInnerTileHeight);
				var color1 = this.curColor;
				this.content.add(this.width - unscaledBr,unscaledBt + y * unscaledInnerTileHeight,color1.x,color1.y,color1.z,color1.w,t);
			}
			var dy = innerHeight - rh * unscaledInnerTileHeight;
			if(dy > 0) {
				var t = this.tile.sub(0,bt,bl,dy / invScaleY);
				t.scaleToSize(unscaledBl,dy);
				var color = this.curColor;
				this.content.add(0,bt + rh * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
				t = this.tile.sub(this.tile.width - br,bt,br,dy / invScaleY);
				t.scaleToSize(unscaledBr,dy);
				var color = this.curColor;
				this.content.add(this.width - unscaledBr,unscaledBt + rh * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
			}
		}
		if(!this.tileCenter) {
			var t = this.tile.sub(bl,bt,innerTileWidth,innerTileHeight);
			t.scaleToSize(this.width - (unscaledBr + unscaledBl),this.height - (unscaledBt + unscaledBb));
			var color = this.curColor;
			this.content.add(unscaledBl,unscaledBt,color.x,color.y,color.z,color.w,t);
		} else {
			var unscaledInnerTileWidth = innerTileWidth * invScaleX;
			var unscaledInnerTileHeight = innerTileHeight * invScaleY;
			var rw = (this.width - (unscaledBr + unscaledBl)) / unscaledInnerTileWidth | 0;
			var rh = innerHeight / unscaledInnerTileHeight | 0;
			var _g = 0;
			var _g1 = rh;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = rw;
				while(_g2 < _g3) {
					var x = _g2++;
					var t = this.tile.sub(bl,bt,unscaledInnerTileWidth,unscaledInnerTileHeight);
					var color = this.curColor;
					this.content.add(unscaledBl + x * unscaledInnerTileWidth,unscaledBt + y * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
				}
			}
			var dx = innerWidth - rw * unscaledInnerTileWidth;
			if(dx > 0) {
				var _g = 0;
				var _g1 = rh;
				while(_g < _g1) {
					var y = _g++;
					var t = this.tile.sub(bl,bt,dx,unscaledInnerTileHeight);
					var color = this.curColor;
					this.content.add(unscaledBl + rw * unscaledInnerTileWidth,unscaledBt + y * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
				}
			}
			var dy = innerHeight - rh * unscaledInnerTileHeight;
			if(dy > 0) {
				var _g = 0;
				var _g1 = rw;
				while(_g < _g1) {
					var x = _g++;
					var t = this.tile.sub(bl,bt,unscaledInnerTileWidth,dy);
					var color = this.curColor;
					this.content.add(unscaledBl + x * unscaledInnerTileWidth,unscaledBt + rh * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
				}
			}
			if(dx > 0 && dy > 0) {
				var t = this.tile.sub(bl,bt,dx,dy);
				var color = this.curColor;
				this.content.add(unscaledBl + rw * unscaledInnerTileWidth,unscaledBt + rh * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
			}
		}
	}
	,sync: function(ctx) {
		this.checkUpdate();
		h2d_TileGroup.prototype.sync.call(this,ctx);
	}
	,__class__: h2d_ScaleGrid
});
var h2d_ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__:"h2d.ScaleModeAlign",__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_name:"Top",_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d_ScaleModeAlign.__constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
h2d_ScaleModeAlign.__empty_constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
var h2d_ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__:"h2d.ScaleMode",__constructs__:null
	,Resize: {_hx_name:"Resize",_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr,__params__:function(){ return [this.width,this.height];}}; },$_._hx_name="Stretch",$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr,__params__:function(){ return [this.width,this.height,this.integerScale,this.horizontalAlign,this.verticalAlign];}}; },$_._hx_name="LetterBox",$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr,__params__:function(){ return [this.width,this.height,this.zoom,this.horizontalAlign,this.verticalAlign];}}; },$_._hx_name="Fixed",$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr,__params__:function(){ return [this.level];}}; },$_._hx_name="Zoom",$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr,__params__:function(){ return [this.minWidth,this.minHeight,this.integerScaling];}}; },$_._hx_name="AutoZoom",$_)
};
h2d_ScaleMode.__constructs__ = [h2d_ScaleMode.Resize,h2d_ScaleMode.Stretch,h2d_ScaleMode.LetterBox,h2d_ScaleMode.Fixed,h2d_ScaleMode.Zoom,h2d_ScaleMode.AutoZoom];
h2d_ScaleMode.__empty_constructs__ = [h2d_ScaleMode.Resize];
var h2d__$SpriteBatch_ElementsIterator = function(e) {
	this.e = e;
};
$hxClasses["h2d._SpriteBatch.ElementsIterator"] = h2d__$SpriteBatch_ElementsIterator;
h2d__$SpriteBatch_ElementsIterator.__name__ = "h2d._SpriteBatch.ElementsIterator";
h2d__$SpriteBatch_ElementsIterator.prototype = {
	hasNext: function() {
		return this.e != null;
	}
	,next: function() {
		var n = this.e;
		this.e = this.e.next;
		return n;
	}
	,__class__: h2d__$SpriteBatch_ElementsIterator
};
var h2d_BatchElement = function(t) {
	this.visible = true;
	this.a = 1;
	this.b = 1;
	this.g = 1;
	this.r = 1;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.t = t;
};
$hxClasses["h2d.BatchElement"] = h2d_BatchElement;
h2d_BatchElement.__name__ = "h2d.BatchElement";
h2d_BatchElement.prototype = {
	set_scale: function(v) {
		return this.scaleX = this.scaleY = v;
	}
	,get_alpha: function() {
		return this.a;
	}
	,set_alpha: function(v) {
		return this.a = v;
	}
	,update: function(et) {
		return true;
	}
	,remove: function() {
		if(this.batch != null) {
			this.batch.delete(this);
		}
	}
	,__class__: h2d_BatchElement
};
var h2d_BasicElement = function(t) {
	this.gravity = 0.;
	this.friction = 1.;
	this.vy = 0.;
	this.vx = 0.;
	h2d_BatchElement.call(this,t);
};
$hxClasses["h2d.BasicElement"] = h2d_BasicElement;
h2d_BasicElement.__name__ = "h2d.BasicElement";
h2d_BasicElement.__super__ = h2d_BatchElement;
h2d_BasicElement.prototype = $extend(h2d_BatchElement.prototype,{
	update: function(dt) {
		this.vy += this.gravity * dt;
		this.x += this.vx * dt;
		this.y += this.vy * dt;
		if(this.friction != 1) {
			var p = Math.pow(this.friction,dt * 60);
			this.vx *= p;
			this.vy *= p;
		}
		return true;
	}
	,__class__: h2d_BasicElement
});
var h2d_SpriteBatch = function(t,parent) {
	this.hasUpdate = false;
	this.hasRotationScale = false;
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.state = new h2d_impl_BatchDrawState();
};
$hxClasses["h2d.SpriteBatch"] = h2d_SpriteBatch;
h2d_SpriteBatch.__name__ = "h2d.SpriteBatch";
h2d_SpriteBatch.__super__ = h2d_Drawable;
h2d_SpriteBatch.prototype = $extend(h2d_Drawable.prototype,{
	add: function(e,before) {
		if(before == null) {
			before = false;
		}
		e.batch = this;
		if(this.first == null) {
			this.first = this.last = e;
			e.prev = e.next = null;
		} else if(before) {
			e.prev = null;
			e.next = this.first;
			this.first.prev = e;
			this.first = e;
		} else {
			this.last.next = e;
			e.prev = this.last;
			e.next = null;
			this.last = e;
		}
		return e;
	}
	,clear: function() {
		this.first = this.last = null;
		this.flush();
	}
	,alloc: function(t) {
		return this.add(new h2d_BatchElement(t));
	}
	,'delete': function(e) {
		if(e.prev == null) {
			if(this.first == e) {
				this.first = e.next;
			}
		} else {
			e.prev.next = e.next;
		}
		if(e.next == null) {
			if(this.last == e) {
				this.last = e.prev;
			}
		} else {
			e.next.prev = e.prev;
		}
		e.batch = null;
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.hasUpdate) {
			var e = this.first;
			while(e != null) {
				if(!e.update(ctx.elapsedTime)) {
					e.remove();
				}
				e = e.next;
			}
		}
		this.flush();
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		var e = this.first;
		while(e != null) {
			var t = e.t;
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				var x = px * ca - py * sa + e.x;
				var y = py * ca + px * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				x = px1 * ca - py1 * sa + e.x;
				y = py1 * ca + px1 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				x = px2 * ca - py2 * sa + e.x;
				y = py2 * ca + px2 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				x = px3 * ca - py3 * sa + e.x;
				y = py3 * ca + px3 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
			} else {
				this.addBounds(relativeTo,out,e.x + t.dx,e.y + t.dy,t.width,t.height);
			}
			e = e.next;
		}
	}
	,flush: function() {
		if(this.first == null) {
			return;
		}
		if(this.tmpBuf == null) {
			this.tmpBuf = hxd__$FloatBuffer_Float32Expand._new(0);
		}
		var pos = 0;
		var e = this.first;
		var tmp = this.tmpBuf;
		var bufferVertices = 0;
		this.state.clear();
		while(e != null) {
			if(!e.visible) {
				e = e.next;
				continue;
			}
			var t = e.t;
			if(t != null) {
				this.state.setTexture(t.innerTex);
			}
			var _this = this.state;
			_this.tail.count += 4;
			_this.totalCount += 4;
			var _g = tmp.pos;
			var _g1 = pos + 32;
			while(_g < _g1) {
				var i = _g++;
				if(tmp.pos == tmp.array.length) {
					var newSize = tmp.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(tmp.array);
					tmp.array = newArray;
				}
				tmp.array[tmp.pos++] = 0.;
			}
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				tmp.array[pos++] = px * ca - py * sa + e.x;
				tmp.array[pos++] = py * ca + px * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				tmp.array[pos++] = px1 * ca - py1 * sa + e.x;
				tmp.array[pos++] = py1 * ca + px1 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px2 * ca - py2 * sa + e.x;
				tmp.array[pos++] = py2 * ca + px2 * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px3 * ca - py3 * sa + e.x;
				tmp.array[pos++] = py3 * ca + px3 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			} else {
				var sx = e.x + t.dx;
				var sy = e.y + t.dy;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			}
			e = e.next;
		}
		bufferVertices = pos >> 3;
		if(this.buffer != null && this.buffer.vbuf != null) {
			if(this.buffer.vertices >= bufferVertices) {
				this.buffer.uploadFloats(this.tmpBuf,0,bufferVertices);
				return;
			}
			this.buffer.dispose();
			this.buffer = null;
		}
		this.empty = bufferVertices == 0;
		if(bufferVertices > 0) {
			this.buffer = h3d_Buffer.ofSubFloats(this.tmpBuf,bufferVertices,hxd_BufferFormat.get_XY_UV_RGBA(),[h3d_BufferFlag.Dynamic]);
		}
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,drawWith: function(ctx,obj) {
		if(this.first == null || this.buffer == null || this.buffer.vbuf == null || this.empty) {
			return;
		}
		if(!ctx.beginDrawBatchState(obj)) {
			return;
		}
		var engine = ctx.engine;
		this.state.drawQuads(ctx,this.buffer);
	}
	,isEmpty: function() {
		return this.first == null;
	}
	,getElements: function() {
		return new h2d__$SpriteBatch_ElementsIterator(this.first);
	}
	,onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		this.state.clear();
	}
	,__class__: h2d_SpriteBatch
});
var h2d_Align = $hxEnums["h2d.Align"] = { __ename__:"h2d.Align",__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"h2d.Align",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"h2d.Align",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:2,__enum__:"h2d.Align",toString:$estr}
	,MultilineRight: {_hx_name:"MultilineRight",_hx_index:3,__enum__:"h2d.Align",toString:$estr}
	,MultilineCenter: {_hx_name:"MultilineCenter",_hx_index:4,__enum__:"h2d.Align",toString:$estr}
};
h2d_Align.__constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
h2d_Align.__empty_constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
var h2d_TextInput = function(font,parent) {
	this.maxHistorySize = 100;
	this.lastClick = 0.;
	this.lastChange = 0.;
	this.redo = [];
	this.undo = [];
	this.scrollX = 0.;
	this.cursorScroll = 0;
	this.cursorBlink = 0.;
	this.useSoftwareKeyboard = true;
	this.canEdit = true;
	this.multiline = false;
	this.cursorBlinkTime = 0.5;
	this.cursorIndex = -1;
	var _gthis = this;
	h2d_Text.call(this,font,parent);
	this.interactive = new h2d_Interactive(0,0);
	this.interactive.set_cursor(hxd_Cursor.TextInput);
	this.interactive.onPush = function(e) {
		_gthis.onPush(e);
		if(!e.cancel && e.button == 0) {
			if(!_gthis.interactive.hasFocus()) {
				e.kind = hxd_EventKind.EFocus;
				_gthis.onFocus(e);
				e.kind = hxd_EventKind.EPush;
				if(e.cancel) {
					return;
				}
				_gthis.interactive.focus();
			}
			_gthis.cursorBlink = 0;
			var startIndex = _gthis.textPos(e.relX,e.relY);
			_gthis.cursorIndex = startIndex;
			_gthis.selectionRange = null;
			var pt = new h2d_col_PointImpl(0.,0.);
			var scene = _gthis.getScene();
			if(scene == null) {
				return;
			}
			scene.startCapture(function(e) {
				pt.x = e.relX;
				pt.y = e.relY;
				_gthis.globalToLocal(pt);
				var index = _gthis.textPos(pt.x,pt.y);
				if(index == startIndex) {
					_gthis.selectionRange = null;
				} else if(index < startIndex) {
					_gthis.selectionRange = { start : index, length : startIndex - index};
				} else {
					_gthis.selectionRange = { start : startIndex, length : index - startIndex};
				}
				_gthis.selectionSize = 0;
				_gthis.cursorIndex = index;
				if(e.kind == hxd_EventKind.ERelease || _gthis.getScene() != scene) {
					scene.stopCapture();
				}
			});
		}
	};
	this.interactive.onKeyDown = function(e) {
		_gthis.onKeyDown(e);
		_gthis.handleKey(e);
	};
	this.interactive.onTextInput = function(e) {
		_gthis.onTextInput(e);
		_gthis.handleKey(e);
	};
	this.interactive.onFocus = function(e) {
		_gthis.onFocus(e);
		if(_gthis.useSoftwareKeyboard && _gthis.canEdit) {
			h2d_TextInput.showSoftwareKeyboard(_gthis);
		}
	};
	this.interactive.onFocusLost = function(e) {
		_gthis.cursorIndex = -1;
		_gthis.selectionRange = null;
		h2d_TextInput.hideSoftwareKeyboard(_gthis);
		_gthis.onFocusLost(e);
	};
	this.interactive.onClick = function(e) {
		_gthis.onClick(e);
		if(e.cancel) {
			return;
		}
		var t = HxOverrides.now() / 1000;
		if(t - _gthis.lastClick < 0.3 && _gthis.text.length != 0) {
			_gthis.selectionRange = { start : 0, length : _gthis.text.length};
			_gthis.selectionSize = 0;
			_gthis.cursorIndex = _gthis.text.length;
		}
		_gthis.lastClick = t;
	};
	this.interactive.onKeyUp = function(e) {
		_gthis.onKeyUp(e);
	};
	this.interactive.onRelease = function(e) {
		_gthis.onRelease(e);
	};
	this.interactive.onKeyUp = function(e) {
		_gthis.onKeyUp(e);
	};
	this.interactive.onMove = function(e) {
		_gthis.onMove(e);
	};
	this.interactive.onOver = function(e) {
		_gthis.onOver(e);
	};
	this.interactive.onOut = function(e) {
		_gthis.onOut(e);
	};
	this.interactive.set_cursor(hxd_Cursor.TextInput);
	this.addChildAt(this.interactive,0);
};
$hxClasses["h2d.TextInput"] = h2d_TextInput;
h2d_TextInput.__name__ = "h2d.TextInput";
h2d_TextInput.showSoftwareKeyboard = function(target) {
};
h2d_TextInput.hideSoftwareKeyboard = function(target) {
};
h2d_TextInput.__super__ = h2d_Text;
h2d_TextInput.prototype = $extend(h2d_Text.prototype,{
	constraintSize: function(width,height) {
	}
	,handleKey: function(e) {
		if(e.cancel || this.cursorIndex < 0) {
			return;
		}
		var oldIndex = this.cursorIndex;
		var oldText = this.text;
		switch(e.keyCode) {
		case 8:
			if(this.selectionRange != null) {
				if(!this.canEdit) {
					return;
				}
				this.beforeChange();
				this.cutSelection();
				this.onChange();
			} else if(this.cursorIndex > 0 && this.canEdit) {
				this.beforeChange();
				var end = this.cursorIndex;
				this.cursorIndex = hxd_Key.isDown(17) ? this.getWordStart() : this.cursorIndex - 1;
				this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + HxOverrides.substr(this.text,end,null));
				this.onChange();
			}
			break;
		case 27:
			this.cursorIndex = -1;
			this.interactive.blur();
			return;
		case 35:
			this.cursorIndex = this.text.length;
			break;
		case 36:
			this.cursorIndex = 0;
			break;
		case 37:
			if(hxd_Key.isDown(17)) {
				this.cursorIndex = this.getWordStart();
			} else if(this.cursorIndex > 0) {
				this.cursorIndex--;
			}
			break;
		case 39:
			if(hxd_Key.isDown(17)) {
				this.cursorIndex = this.getWordEnd();
			} else if(this.cursorIndex < this.text.length) {
				this.cursorIndex++;
			}
			break;
		case 46:
			if(this.selectionRange != null) {
				if(!this.canEdit) {
					return;
				}
				this.beforeChange();
				this.cutSelection();
				this.onChange();
			} else if(this.cursorIndex < this.text.length && this.canEdit) {
				this.beforeChange();
				var end = hxd_Key.isDown(17) ? this.getWordEnd() : this.cursorIndex + 1;
				this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + HxOverrides.substr(this.text,end,null));
				this.onChange();
			}
			break;
		case 65:
			if(hxd_Key.isDown(17)) {
				if(this.text != "") {
					this.cursorIndex = this.text.length;
					this.selectionRange = { start : 0, length : this.text.length};
					this.selectionSize = 0;
				}
				return;
			} else {
				if(e.kind == hxd_EventKind.EKeyDown) {
					return;
				}
				if(e.charCode != 0 && this.canEdit) {
					if(!this.font.hasChar(e.charCode)) {
						return;
					}
					this.beforeChange();
					if(this.selectionRange != null) {
						this.cutSelection();
					}
					var code = e.charCode;
					this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCodePoint(code) + HxOverrides.substr(this.text,this.cursorIndex,null));
					this.cursorIndex++;
					this.onChange();
				}
			}
			break;
		case 67:
			if(hxd_Key.isDown(17)) {
				if(this.text != "" && this.selectionRange != null) {
					hxd_System.setClipboardText(HxOverrides.substr(this.text,this.selectionRange.start,this.selectionRange.length));
				}
			} else {
				if(e.kind == hxd_EventKind.EKeyDown) {
					return;
				}
				if(e.charCode != 0 && this.canEdit) {
					if(!this.font.hasChar(e.charCode)) {
						return;
					}
					this.beforeChange();
					if(this.selectionRange != null) {
						this.cutSelection();
					}
					var code = e.charCode;
					this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCodePoint(code) + HxOverrides.substr(this.text,this.cursorIndex,null));
					this.cursorIndex++;
					this.onChange();
				}
			}
			break;
		case 86:
			if(hxd_Key.isDown(17)) {
				if(!this.canEdit) {
					return;
				}
				var t = hxd_System.getClipboardText();
				if(t != null && t.length > 0) {
					this.beforeChange();
					if(this.selectionRange != null) {
						this.cutSelection();
					}
					this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + t + HxOverrides.substr(this.text,this.cursorIndex,null));
					this.cursorIndex += t.length;
					this.onChange();
				}
			} else {
				if(e.kind == hxd_EventKind.EKeyDown) {
					return;
				}
				if(e.charCode != 0 && this.canEdit) {
					if(!this.font.hasChar(e.charCode)) {
						return;
					}
					this.beforeChange();
					if(this.selectionRange != null) {
						this.cutSelection();
					}
					var code = e.charCode;
					this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCodePoint(code) + HxOverrides.substr(this.text,this.cursorIndex,null));
					this.cursorIndex++;
					this.onChange();
				}
			}
			break;
		case 88:
			if(hxd_Key.isDown(17)) {
				if(this.text != "" && this.selectionRange != null) {
					if(hxd_System.setClipboardText(HxOverrides.substr(this.text,this.selectionRange.start,this.selectionRange.length))) {
						if(!this.canEdit) {
							return;
						}
						this.beforeChange();
						this.cutSelection();
						this.onChange();
					}
				}
			} else {
				if(e.kind == hxd_EventKind.EKeyDown) {
					return;
				}
				if(e.charCode != 0 && this.canEdit) {
					if(!this.font.hasChar(e.charCode)) {
						return;
					}
					this.beforeChange();
					if(this.selectionRange != null) {
						this.cutSelection();
					}
					var code = e.charCode;
					this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCodePoint(code) + HxOverrides.substr(this.text,this.cursorIndex,null));
					this.cursorIndex++;
					this.onChange();
				}
			}
			break;
		case 89:
			if(hxd_Key.isDown(17)) {
				if(this.redo.length > 0 && this.canEdit) {
					this.undo.push(this.curHistoryState());
					this.setState(this.redo.pop());
					this.onChange();
				}
				return;
			} else {
				if(e.kind == hxd_EventKind.EKeyDown) {
					return;
				}
				if(e.charCode != 0 && this.canEdit) {
					if(!this.font.hasChar(e.charCode)) {
						return;
					}
					this.beforeChange();
					if(this.selectionRange != null) {
						this.cutSelection();
					}
					var code = e.charCode;
					this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCodePoint(code) + HxOverrides.substr(this.text,this.cursorIndex,null));
					this.cursorIndex++;
					this.onChange();
				}
			}
			break;
		case 90:
			if(hxd_Key.isDown(17)) {
				if(this.undo.length > 0 && this.canEdit) {
					this.redo.push(this.curHistoryState());
					this.setState(this.undo.pop());
					this.onChange();
				}
				return;
			} else {
				if(e.kind == hxd_EventKind.EKeyDown) {
					return;
				}
				if(e.charCode != 0 && this.canEdit) {
					if(!this.font.hasChar(e.charCode)) {
						return;
					}
					this.beforeChange();
					if(this.selectionRange != null) {
						this.cutSelection();
					}
					var code = e.charCode;
					this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCodePoint(code) + HxOverrides.substr(this.text,this.cursorIndex,null));
					this.cursorIndex++;
					this.onChange();
				}
			}
			break;
		case 13:case 108:
			if(!this.multiline) {
				this.cursorIndex = -1;
				this.interactive.blur();
				return;
			} else {
				this.beforeChange();
				if(this.selectionRange != null) {
					this.cutSelection();
				}
				this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + "\n" + HxOverrides.substr(this.text,this.cursorIndex,null));
				this.cursorIndex++;
				this.onChange();
			}
			break;
		default:
			if(e.kind == hxd_EventKind.EKeyDown) {
				return;
			}
			if(e.charCode != 0 && this.canEdit) {
				if(!this.font.hasChar(e.charCode)) {
					return;
				}
				this.beforeChange();
				if(this.selectionRange != null) {
					this.cutSelection();
				}
				var code = e.charCode;
				this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCodePoint(code) + HxOverrides.substr(this.text,this.cursorIndex,null));
				this.cursorIndex++;
				this.onChange();
			}
		}
		this.cursorBlink = 0.;
		if(hxd_Key.isDown(16) && this.text == oldText) {
			if(this.cursorIndex == oldIndex) {
				return;
			}
			if(this.selectionRange == null) {
				this.selectionRange = oldIndex < this.cursorIndex ? { start : oldIndex, length : this.cursorIndex - oldIndex} : { start : this.cursorIndex, length : oldIndex - this.cursorIndex};
			} else if(oldIndex == this.selectionRange.start) {
				this.selectionRange.length += oldIndex - this.cursorIndex;
				this.selectionRange.start = this.cursorIndex;
			} else {
				this.selectionRange.length += this.cursorIndex - oldIndex;
			}
			if(this.selectionRange.length == 0) {
				this.selectionRange = null;
			} else if(this.selectionRange.length < 0) {
				this.selectionRange.start += this.selectionRange.length;
				this.selectionRange.length = -this.selectionRange.length;
			}
			this.selectionSize = 0;
		} else {
			this.selectionRange = null;
		}
	}
	,cutSelection: function() {
		if(this.selectionRange == null) {
			return false;
		}
		this.cursorIndex = this.selectionRange.start;
		var end = this.cursorIndex + this.selectionRange.length;
		this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + HxOverrides.substr(this.text,end,null));
		this.selectionRange = null;
		return true;
	}
	,getWordEnd: function() {
		var len = this.text.length;
		if(this.cursorIndex >= len) {
			return this.cursorIndex;
		}
		var charset = hxd_Charset.getDefault();
		var ret = this.cursorIndex;
		while(ret < len && charset.isSpace(this.text.charCodeAt(ret))) ++ret;
		while(ret < len && !charset.isSpace(this.text.charCodeAt(ret))) ++ret;
		return ret;
	}
	,getWordStart: function() {
		if(this.cursorIndex <= 0) {
			return this.cursorIndex;
		}
		var charset = hxd_Charset.getDefault();
		var ret = this.cursorIndex;
		while(ret > 0 && charset.isSpace(this.text.charCodeAt(ret - 1))) --ret;
		while(ret > 0 && !charset.isSpace(this.text.charCodeAt(ret - 1))) --ret;
		return ret;
	}
	,setState: function(h) {
		this.set_text(h.t);
		this.cursorIndex = h.c;
		this.selectionRange = h.sel;
		if(this.selectionRange != null) {
			this.cursorIndex = this.selectionRange.start + this.selectionRange.length;
		}
	}
	,curHistoryState: function() {
		return { t : this.text, c : this.cursorIndex, sel : this.selectionRange == null ? null : { start : this.selectionRange.start, length : this.selectionRange.length}};
	}
	,beforeChange: function() {
		var t = HxOverrides.now() / 1000;
		if(t - this.lastChange < 1) {
			this.lastChange = t;
			return;
		}
		this.lastChange = t;
		this.undo.push(this.curHistoryState());
		this.redo = [];
		while(this.undo.length > this.maxHistorySize) this.undo.shift();
	}
	,getAllLines: function() {
		var lines = this.text.split("\n");
		var finalLines = [];
		var _g = 0;
		while(_g < lines.length) {
			var l = lines[_g];
			++_g;
			var splitText = this.splitText(l).split("\n");
			finalLines = finalLines.concat(splitText);
		}
		var _g = 0;
		var _g1 = finalLines.length;
		while(_g < _g1) {
			var i = _g++;
			finalLines[i] += "\n";
		}
		return finalLines;
	}
	,getCurrentLine: function() {
		var lines = this.getAllLines();
		var currIndex = 0;
		var _g = 0;
		var _g1 = lines.length;
		while(_g < _g1) {
			var i = _g++;
			currIndex += lines[i].length;
			if(this.cursorIndex < currIndex) {
				return lines[i];
			}
		}
		return "";
	}
	,getCursorXOffset: function() {
		var lines = this.getAllLines();
		var offset = this.cursorIndex;
		var currLine = this.getCurrentLine();
		var currIndex = 0;
		var _g = 0;
		var _g1 = lines.length;
		while(_g < _g1) {
			var i = _g++;
			currIndex += lines[i].length;
			if(this.cursorIndex < currIndex) {
				break;
			} else {
				offset -= lines[i].length;
			}
		}
		return this.calcTextWidth(HxOverrides.substr(currLine,0,offset));
	}
	,getCursorYOffset: function() {
		var lines = this.getAllLines();
		var currIndex = 0;
		var lineNum = 0;
		var _g = 0;
		var _g1 = lines.length;
		while(_g < _g1) {
			var i = _g++;
			currIndex += lines[i].length;
			if(this.cursorIndex < currIndex) {
				lineNum = i;
				break;
			}
		}
		return lineNum * this.font.lineHeight;
	}
	,getSelectedText: function() {
		if(this.selectionRange == null) {
			return null;
		} else {
			return HxOverrides.substr(this.text,this.selectionRange.start,this.selectionRange.length);
		}
	}
	,set_text: function(t) {
		h2d_Text.prototype.set_text.call(this,t);
		if(this.cursorIndex > t.length) {
			this.cursorIndex = t.length;
		}
		return t;
	}
	,set_font: function(f) {
		h2d_Text.prototype.set_font.call(this,f);
		this.cursorTile = h2d_Tile.fromColor(16777215,1,this.font.size);
		this.cursorTile.dy = 2;
		this.selectionTile = h2d_Tile.fromColor(3381759,0,Math.ceil(this.font.lineHeight));
		return f;
	}
	,initGlyphs: function(text,rebuild) {
		if(rebuild == null) {
			rebuild = true;
		}
		h2d_Text.prototype.initGlyphs.call(this,text,rebuild);
		if(rebuild) {
			this.calcWidth += this.cursorTile.width;
			if(this.inputWidth != null && this.calcWidth > this.inputWidth) {
				this.calcWidth = this.inputWidth;
			}
		}
	}
	,textPos: function(x,y) {
		x += this.scrollX;
		var lineIndex = Math.floor(y / this.font.lineHeight);
		var lines = this.getAllLines();
		var max = lines.length - 1;
		if(lineIndex < 0) {
			lineIndex = 0;
		} else if(lineIndex > max) {
			lineIndex = max;
		}
		var selectedLine = lines[lineIndex];
		var pos = 0;
		var _g = 0;
		var _g1 = lineIndex;
		while(_g < _g1) {
			var i = _g++;
			pos += lines[i].length;
		}
		var linePos = 0;
		while(linePos < selectedLine.length) {
			if(this.calcTextWidth(HxOverrides.substr(selectedLine,0,linePos + 1)) > x) {
				++pos;
				break;
			}
			++pos;
			++linePos;
		}
		return pos - 1;
	}
	,sync: function(ctx) {
		var lines = this.getAllLines();
		var tmp = this.inputWidth != null ? this.inputWidth : this.maxWidth != null ? Math.ceil(this.maxWidth) : this.get_textWidth();
		this.interactive.width = tmp;
		this.interactive.height = this.font.lineHeight * lines.length;
		h2d_Text.prototype.sync.call(this,ctx);
	}
	,draw: function(ctx) {
		if(this.inputWidth != null) {
			var x = this.inputWidth;
			var y = this.font.lineHeight;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var h = this.localToGlobal(new h2d_col_PointImpl(x,y));
			ctx.clipRenderZone(this.absX,this.absY,h.x - this.absX,h.y - this.absY);
		}
		if(this.cursorIndex >= 0 && (this.text != this.cursorText || this.cursorIndex != this.cursorXIndex)) {
			if(this.cursorIndex > this.text.length) {
				this.cursorIndex = this.text.length;
			}
			this.cursorText = this.text;
			this.cursorXIndex = this.cursorIndex;
			this.cursorX = this.getCursorXOffset();
			this.cursorY = this.getCursorYOffset();
			if(this.inputWidth != null && this.cursorX - this.scrollX >= this.inputWidth) {
				this.scrollX = this.cursorX - this.inputWidth + 1;
			} else if(this.cursorX < this.scrollX && this.cursorIndex > 0) {
				var a = this.inputWidth;
				var b = this.cursorX | 0;
				this.scrollX = this.cursorX - (a > b ? b : a);
			} else if(this.cursorX < this.scrollX) {
				this.scrollX = this.cursorX;
			}
		}
		this.absX -= this.scrollX * this.matA;
		this.absY -= this.scrollX * this.matC;
		if(this.selectionRange != null) {
			var lines = this.getAllLines();
			var lineOffset = 0;
			var _g = 0;
			var _g1 = lines.length;
			while(_g < _g1) {
				var i = _g++;
				var line = lines[i];
				var selEnd = line.length;
				if(this.selectionRange.start > lineOffset + line.length || this.selectionRange.start + this.selectionRange.length < lineOffset) {
					lineOffset += line.length;
					continue;
				}
				var selStart = Math.floor(Math.max(0,this.selectionRange.start - lineOffset));
				var selEnd1 = Math.floor(Math.min(line.length - selStart,this.selectionRange.length + this.selectionRange.start - lineOffset - selStart));
				this.selectionPos = this.calcTextWidth(HxOverrides.substr(line,0,selStart));
				this.selectionSize = this.calcTextWidth(HxOverrides.substr(line,selStart,selEnd1));
				if(this.selectionRange.start + this.selectionRange.length == this.text.length) {
					this.selectionSize += this.cursorTile.width;
				}
				this.selectionTile.dx += this.selectionPos;
				this.selectionTile.dy += i * this.font.lineHeight;
				this.selectionTile.width += this.selectionSize;
				this.emitTile(ctx,this.selectionTile);
				this.selectionTile.dx -= this.selectionPos;
				this.selectionTile.dy -= i * this.font.lineHeight;
				this.selectionTile.width -= this.selectionSize;
				lineOffset += line.length;
			}
		}
		h2d_Text.prototype.draw.call(this,ctx);
		this.absX += this.scrollX * this.matA;
		this.absY += this.scrollX * this.matC;
		if(this.cursorIndex >= 0) {
			this.cursorBlink += ctx.elapsedTime;
			if(this.cursorBlink % (this.cursorBlinkTime * 2) < this.cursorBlinkTime) {
				this.cursorTile.dx += this.cursorX - this.scrollX;
				this.cursorTile.dy += this.cursorY;
				this.emitTile(ctx,this.cursorTile);
				this.cursorTile.dx -= this.cursorX - this.scrollX;
				this.cursorTile.dy -= this.cursorY;
			}
		}
		if(this.inputWidth != null) {
			ctx.popRenderZone();
		}
	}
	,focus: function() {
		this.interactive.focus();
		if(this.cursorIndex < 0) {
			this.cursorIndex = 0;
			if(this.text != "") {
				this.selectionRange = { start : 0, length : this.text.length};
			}
		}
	}
	,hasFocus: function() {
		return this.interactive.hasFocus();
	}
	,onOut: function(e) {
	}
	,onOver: function(e) {
	}
	,onMove: function(e) {
	}
	,onClick: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onTextInput: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onChange: function() {
	}
	,drawRec: function(ctx) {
		var old = this.interactive.visible;
		this.interactive.set_visible(false);
		this.interactive.draw(ctx);
		h2d_Text.prototype.drawRec.call(this,ctx);
		this.interactive.set_visible(old);
	}
	,get_backgroundColor: function() {
		return this.interactive.backgroundColor;
	}
	,set_backgroundColor: function(v) {
		return this.interactive.backgroundColor = v;
	}
	,__class__: h2d_TextInput
});
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
$hxClasses["h2d.Tile"] = h2d_Tile;
h2d_Tile.__name__ = "h2d.Tile";
h2d_Tile.fromColor = function(color,width,height,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.fromBitmap = function(bmp) {
	var tex = h3d_mat_Texture.fromBitmap(bmp);
	return new h2d_Tile(tex,0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height);
};
h2d_Tile.autoCut = function(bmp,width,height) {
	bmp.lock();
	if(height == null) {
		height = width;
	}
	var colorBG = bmp.getPixel(bmp.ctx.canvas.width - 1,bmp.ctx.canvas.height - 1);
	var tl = [];
	var w = 1;
	var h = 1;
	while(w < bmp.ctx.canvas.width) w <<= 1;
	while(h < bmp.ctx.canvas.height) h <<= 1;
	var tex = new h3d_mat_Texture(w,h);
	var _g = 0;
	var _g1 = bmp.ctx.canvas.height / height | 0;
	while(_g < _g1) {
		var y = _g++;
		var a = [];
		tl[y] = a;
		var _g2 = 0;
		var _g3 = bmp.ctx.canvas.width / width | 0;
		while(_g2 < _g3) {
			var x = _g2++;
			var sz = h2d_Tile.isEmpty(bmp,x * width,y * height,width,height,colorBG);
			if(sz == null) {
				break;
			}
			a.push(new h2d_Tile(tex,x * width + sz.dx,y * height + sz.dy,sz.w,sz.h,sz.dx,sz.dy));
		}
	}
	bmp.unlock();
	var main = new h2d_Tile(tex,0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height);
	main.upload(bmp);
	return { main : main, tiles : tl};
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.fromPixels = function(pixels) {
	var pix2 = pixels.makeSquare(true);
	var t = h3d_mat_Texture.fromPixels(pix2,h3d_mat_Texture.nativeFormat);
	if(pix2 != pixels) {
		pix2.dispose();
	}
	return new h2d_Tile(t,0,0,pixels.width,pixels.height);
};
h2d_Tile.isEmpty = function(b,px,py,width,height,bg) {
	var empty = true;
	var xmin = width;
	var ymin = height;
	var xmax = 0;
	var ymax = 0;
	var _g = 0;
	var _g1 = width;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = height;
		while(_g2 < _g3) {
			var y = _g2++;
			var color = b.getPixel(x + px,y + py);
			if((color & -16777216) == 0) {
				if(color != 0) {
					b.setPixel(x + px,y + py,0);
				}
				continue;
			}
			if(color != bg) {
				empty = false;
				if(x < xmin) {
					xmin = x;
				}
				if(y < ymin) {
					ymin = y;
				}
				if(x > xmax) {
					xmax = x;
				}
				if(y > ymax) {
					ymax = y;
				}
			}
			if(color == bg && color != 0) {
				b.setPixel(x + px,y + py,0);
			}
		}
	}
	if(empty) {
		return null;
	} else {
		return { dx : xmin, dy : ymin, w : xmax - xmin + 1, h : ymax - ymin + 1};
	}
};
h2d_Tile.prototype = {
	get_ix: function() {
		return Math.floor(this.x);
	}
	,get_iy: function() {
		return Math.floor(this.y);
	}
	,get_iwidth: function() {
		return Math.ceil(this.width + this.x) - Math.floor(this.x);
	}
	,get_iheight: function() {
		return Math.ceil(this.height + this.y) - Math.floor(this.y);
	}
	,getTexture: function() {
		return this.innerTex;
	}
	,isDisposed: function() {
		if(this.innerTex != null) {
			var _this = this.innerTex;
			if(_this.isDepth()) {
				return _this.t == null;
			} else if(_this.t == null) {
				return _this.realloc == null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,switchTexture: function(t) {
		this.setTexture(t.innerTex);
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,center: function() {
		return this.sub(0,0,this.width,this.height,-(this.width * .5),-(this.height * .5));
	}
	,setCenterRatio: function(px,py) {
		if(py == null) {
			py = 0.5;
		}
		if(px == null) {
			px = 0.5;
		}
		this.dx = -(px * this.width);
		this.dy = -(py * this.height);
	}
	,flipX: function() {
		var tmp = this.u;
		this.u = this.u2;
		this.u2 = tmp;
		this.dx = -this.dx - this.width;
	}
	,flipY: function() {
		var tmp = this.v;
		this.v = this.v2;
		this.v2 = tmp;
		this.dy = -this.dy - this.height;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		var tex = this.innerTex;
		if(tex != null) {
			this.u = x / tex.width;
			this.v = y / tex.height;
			this.u2 = (x + this.width) / tex.width;
			this.v2 = (y + this.height) / tex.height;
		}
	}
	,setSize: function(w,h) {
		this.width = w;
		this.height = h;
		var tex = this.innerTex;
		if(tex != null) {
			this.u2 = (this.x + w) / tex.width;
			this.v2 = (this.y + h) / tex.height;
		}
	}
	,scaleToSize: function(w,h) {
		this.width = w;
		this.height = h;
	}
	,scrollDiscrete: function(dx,dy) {
		var tex = this.innerTex;
		this.u += dx / tex.width;
		this.v -= dy / tex.height;
		this.u2 += dx / tex.width;
		this.v2 -= dy / tex.height;
		this.x = this.u * tex.width;
		this.y = this.v * tex.height;
	}
	,dispose: function() {
		if(this.innerTex != null) {
			this.innerTex.dispose();
		}
		this.innerTex = null;
	}
	,clone: function() {
		var t = new h2d_Tile(null,this.x,this.y,this.width,this.height,this.dx,this.dy);
		t.innerTex = this.innerTex;
		t.u = this.u;
		t.u2 = this.u2;
		t.v = this.v;
		t.v2 = this.v2;
		return t;
	}
	,get_xFlip: function() {
		return this.u2 < this.u;
	}
	,get_yFlip: function() {
		return this.v2 < this.v;
	}
	,set_xFlip: function(v) {
		if(v != this.get_xFlip()) {
			this.flipX();
		}
		return v;
	}
	,set_yFlip: function(v) {
		if(v != this.get_yFlip()) {
			this.flipY();
		}
		return v;
	}
	,split: function(frames,vertical,subpixel) {
		if(subpixel == null) {
			subpixel = false;
		}
		if(vertical == null) {
			vertical = false;
		}
		if(frames == null) {
			frames = 0;
		}
		var tl = [];
		if(vertical) {
			if(frames == 0) {
				frames = this.height / this.width | 0;
			}
			var stride = subpixel ? this.height / frames : this.height / frames | 0;
			var _g = 0;
			var _g1 = frames;
			while(_g < _g1) {
				var i = _g++;
				tl.push(this.sub(0,i * stride,this.width,stride));
			}
		} else {
			if(frames == 0) {
				frames = this.width / this.height | 0;
			}
			var stride = subpixel ? this.width / frames : this.width / frames | 0;
			var _g = 0;
			var _g1 = frames;
			while(_g < _g1) {
				var i = _g++;
				tl.push(this.sub(i * stride,0,stride,this.height));
			}
		}
		return tl;
	}
	,gridFlatten: function(size,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.height / size | 0;
		while(_g1 < _g2) {
			var y = _g1++;
			var _g3 = 0;
			var _g4 = this.width / size | 0;
			while(_g3 < _g4) {
				var x = _g3++;
				_g.push(this.sub(x * size,y * size,size,size,dx,dy));
			}
		}
		return _g;
	}
	,grid: function(size,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.width / size | 0;
		while(_g1 < _g2) {
			var x = _g1++;
			var _g3 = [];
			var _g4 = 0;
			var _g5 = this.height / size | 0;
			while(_g4 < _g5) {
				var y = _g4++;
				_g3.push(this.sub(x * size,y * size,size,size,dx,dy));
			}
			_g.push(_g3);
		}
		return _g;
	}
	,toString: function() {
		return "Tile(" + this.x + "," + this.y + "," + this.width + "x" + this.height + (this.dx != 0 || this.dy != 0 ? "," + this.dx + ":" + this.dy : "") + ")";
	}
	,upload: function(bmp) {
		var w = this.innerTex.width;
		var h = this.innerTex.height;
		this.innerTex.uploadBitmap(bmp);
	}
	,__class__: h2d_Tile
};
var h2d_TileLayerContent = function() {
	this.useAllocatorLimit = 1024;
	h3d_prim_Primitive.call(this);
	this.state = new h2d_impl_BatchDrawState();
	this.clear();
};
$hxClasses["h2d.TileLayerContent"] = h2d_TileLayerContent;
h2d_TileLayerContent.__name__ = "h2d.TileLayerContent";
h2d_TileLayerContent.__super__ = h3d_prim_Primitive;
h2d_TileLayerContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	clear: function() {
		this.tmp = hxd__$FloatBuffer_Float32Expand._new(0);
		if(this.buffer != null) {
			if(this.buffer.vertices * 8 < this.useAllocatorLimit) {
				hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
		this.state.clear();
	}
	,isEmpty: function() {
		return this.triCount() == 0;
	}
	,triCount: function() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.vertices >> 1;
		}
	}
	,addColor: function(x,y,color,t) {
		this.add(x,y,color.x,color.y,color.z,color.w,t);
	}
	,add: function(x,y,r,g,b,a,t) {
		var sx = x + t.dx;
		var sy = y + t.dy;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sy;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		var v = sx + t.width;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sy;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this1 = this.tmp;
		var v = sy + t.height;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		var v = sx + t.width;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = sy + t.height;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var x1 = x + t.dx;
		var y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
		if(t != null) {
			this.state.setTexture(t.innerTex);
		}
		var _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	,addTransform: function(x,y,sx,sy,r,c,t) {
		var _gthis = this;
		var ca = Math.cos(r);
		var sa = Math.sin(r);
		var hx = t.width;
		var hy = t.height;
		var dx = t.dx * sx;
		var dy = t.dy * sy;
		var px = dx * ca - dy * sa + x;
		var py = dy * ca + dx * sa + y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = px;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = py;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.x;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.y;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.z;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.w;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		if(px < _gthis.xMin) {
			_gthis.xMin = px;
		}
		if(py < _gthis.yMin) {
			_gthis.yMin = py;
		}
		if(px > _gthis.xMax) {
			_gthis.xMax = px;
		}
		if(py > _gthis.yMax) {
			_gthis.yMax = py;
		}
		var dx = (t.dx + hx) * sx;
		var dy = t.dy * sy;
		var px = dx * ca - dy * sa + x;
		var py = dy * ca + dx * sa + y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = px;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = py;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.x;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.y;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.z;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.w;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		if(px < _gthis.xMin) {
			_gthis.xMin = px;
		}
		if(py < _gthis.yMin) {
			_gthis.yMin = py;
		}
		if(px > _gthis.xMax) {
			_gthis.xMax = px;
		}
		if(py > _gthis.yMax) {
			_gthis.yMax = py;
		}
		var dx = t.dx * sx;
		var dy = (t.dy + hy) * sy;
		var px = dx * ca - dy * sa + x;
		var py = dy * ca + dx * sa + y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = px;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = py;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.x;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.y;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.z;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.w;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		if(px < _gthis.xMin) {
			_gthis.xMin = px;
		}
		if(py < _gthis.yMin) {
			_gthis.yMin = py;
		}
		if(px > _gthis.xMax) {
			_gthis.xMax = px;
		}
		if(py > _gthis.yMax) {
			_gthis.yMax = py;
		}
		var dx = (t.dx + hx) * sx;
		var dy = (t.dy + hy) * sy;
		var px = dx * ca - dy * sa + x;
		var py = dy * ca + dx * sa + y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = px;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = py;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.x;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.y;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.z;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.w;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		if(px < _gthis.xMin) {
			_gthis.xMin = px;
		}
		if(py < _gthis.yMin) {
			_gthis.yMin = py;
		}
		if(px > _gthis.xMax) {
			_gthis.xMax = px;
		}
		if(py > _gthis.yMax) {
			_gthis.yMax = py;
		}
		if(t != null) {
			this.state.setTexture(t.innerTex);
		}
		var _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	,addPoint: function(x,y,color) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >> 16 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >> 8 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,insertColor: function(c) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (c >> 16 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (c >> 8 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (c & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (c >>> 24) / 255.;
	}
	,rectColor: function(x,y,w,h,color) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >> 16 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >> 8 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >>> 24) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x + w;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 1;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >> 16 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >> 8 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >>> 24) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = y + h;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 1;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >> 16 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >> 8 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >>> 24) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x + w;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = y + h;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 1;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 1;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >> 16 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >> 8 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (color >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		x += w;
		y += h;
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		var _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	,rectGradient: function(x,y,w,h,ctl,ctr,cbl,cbr) {
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (ctl >> 16 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (ctl >> 8 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (ctl & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (ctl >>> 24) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x + w;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 1;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (ctr >> 16 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (ctr >> 8 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (ctr & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (ctr >>> 24) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = y + h;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 1;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (cbl >> 16 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (cbl >> 8 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (cbl & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (cbl >>> 24) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = x + w;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = y + h;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 1;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 1;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (cbr >> 16 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (cbr >> 8 & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (cbr & 255) / 255.;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = (cbr >>> 24) / 255.;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		x += w;
		y += h;
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		var _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	,fillArc: function(x,y,ray,c,start,end) {
		if(end <= start) {
			return;
		}
		var arcLength = end - start;
		var nsegments = Math.ceil(ray * 3.14 * 2 / 4);
		if(nsegments < 4) {
			nsegments = 4;
		}
		var angle = arcLength / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var _x = 0.;
		var _y = 0.;
		var i = 0;
		var count = 0;
		while(i < nsegments) {
			var a = start + i * angle;
			_x = x + Math.cos(a) * ray;
			_y = y + Math.sin(a) * ray;
			if(prevX != -Infinity) {
				this.addPoint(x,y,c);
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(prevX,prevY,c);
				count += 4;
			}
			prevX = _x;
			prevY = _y;
			++i;
		}
		var a = end;
		_x = x + Math.cos(a) * ray;
		_y = y + Math.sin(a) * ray;
		this.addPoint(x,y,c);
		this.addPoint(_x,_y,c);
		this.addPoint(prevX,prevY,c);
		this.addPoint(prevX,prevY,c);
		var _this = this.state;
		var count1 = count + 4;
		_this.tail.count += count1;
		_this.totalCount += count1;
	}
	,fillCircle: function(x,y,radius,c) {
		var nsegments = Math.ceil(radius * 3.14 * 2 / 2);
		if(nsegments < 3) {
			nsegments = 3;
		}
		var angle = Math.PI * 2 / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var firstX = -Infinity;
		var firstY = -Infinity;
		var curX = 0.;
		var curY = 0.;
		var count = 0;
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			curX = x + Math.cos(a) * radius;
			curY = y + Math.sin(a) * radius;
			if(prevX != -Infinity) {
				this.addPoint(x,y,c);
				this.addPoint(curX,curY,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(x,y,c);
				count += 4;
			}
			if(firstX == -Infinity) {
				firstX = curX;
				firstY = curY;
			}
			prevX = curX;
			prevY = curY;
		}
		this.addPoint(x,y,c);
		this.addPoint(curX,curY,c);
		this.addPoint(firstX,firstY,c);
		this.addPoint(x,y,c);
		var _this = this.state;
		var count1 = count + 4;
		_this.tail.count += count1;
		_this.totalCount += count1;
	}
	,circle: function(x,y,ray,size,c) {
		if(size > ray) {
			return;
		}
		var nsegments = Math.ceil(ray * 3.14 * 2 / 2);
		if(nsegments < 3) {
			nsegments = 3;
		}
		var ray1 = ray - size;
		var angle = Math.PI * 2 / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var prevX1 = -Infinity;
		var prevY1 = -Infinity;
		var count = 0;
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = i * angle;
			var _x = x + Math.cos(a) * ray;
			var _y = y + Math.sin(a) * ray;
			var _x1 = x + Math.cos(a) * ray1;
			var _y1 = y + Math.sin(a) * ray1;
			if(prevX != -Infinity) {
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(_x1,_y1,c);
				this.addPoint(prevX1,prevY1,c);
				count += 4;
			}
			prevX = _x;
			prevY = _y;
			prevX1 = _x1;
			prevY1 = _y1;
		}
		var _this = this.state;
		_this.tail.count += count;
		_this.totalCount += count;
	}
	,arc: function(x,y,ray,size,start,end,c) {
		if(size > ray) {
			return;
		}
		if(end <= start) {
			return;
		}
		var arcLength = end - start;
		var nsegments = Math.ceil(ray * 3.14 * 2 / 4);
		if(nsegments < 3) {
			nsegments = 3;
		}
		var ray1 = ray - size;
		var angle = arcLength / nsegments;
		var prevX = -Infinity;
		var prevY = -Infinity;
		var prevX1 = -Infinity;
		var prevY1 = -Infinity;
		var _x = 0.;
		var _y = 0.;
		var _x1 = 0.;
		var _y1 = 0.;
		var count = 0;
		var _g = 0;
		var _g1 = nsegments;
		while(_g < _g1) {
			var i = _g++;
			var a = start + i * angle;
			_x = x + Math.cos(a) * ray;
			_y = y + Math.sin(a) * ray;
			_x1 = x + Math.cos(a) * ray1;
			_y1 = y + Math.sin(a) * ray1;
			if(prevX != -Infinity) {
				this.addPoint(_x,_y,c);
				this.addPoint(prevX,prevY,c);
				this.addPoint(_x1,_y1,c);
				this.addPoint(prevX1,prevY1,c);
				count += 4;
			}
			prevX = _x;
			prevY = _y;
			prevX1 = _x1;
			prevY1 = _y1;
		}
		var a = end;
		_x = x + Math.cos(a) * ray;
		_y = y + Math.sin(a) * ray;
		_x1 = x + Math.cos(a) * ray1;
		_y1 = y + Math.sin(a) * ray1;
		this.addPoint(_x,_y,c);
		this.addPoint(prevX,prevY,c);
		this.addPoint(_x1,_y1,c);
		this.addPoint(prevX1,prevY1,c);
		var _this = this.state;
		var count1 = count + 4;
		_this.tail.count += count1;
		_this.totalCount += count1;
	}
	,alloc: function(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		if(this.tmp.pos > 0) {
			this.buffer = this.tmp.pos < this.useAllocatorLimit ? hxd_impl_Allocator.get().ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA()) : h3d_Buffer.ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA());
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			if(this.buffer.vertices * 8 < this.useAllocatorLimit) {
				hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
			this.buffer = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,flush: function() {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(h3d_Engine.CURRENT);
		}
	}
	,doRender: function(ctx,min,len) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(h3d_Engine.CURRENT);
		}
		this.state.drawQuads(ctx,this.buffer,min,len);
	}
	,__class__: h2d_TileLayerContent
});
var h2d_col_Collider = function() { };
$hxClasses["h2d.col.Collider"] = h2d_col_Collider;
h2d_col_Collider.__name__ = "h2d.col.Collider";
h2d_col_Collider.prototype = {
	__class__: h2d_col_Collider
};
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
$hxClasses["h2d.col.Bounds"] = h2d_col_Bounds;
h2d_col_Bounds.__name__ = "h2d.col.Bounds";
h2d_col_Bounds.fromValues = function(x0,y0,width,height) {
	var b = new h2d_col_Bounds();
	b.xMin = x0;
	b.yMin = y0;
	b.xMax = x0 + width;
	b.yMax = y0 + height;
	return b;
};
h2d_col_Bounds.fromPoints = function(min,max) {
	var b = new h2d_col_Bounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.xMax = max.x;
	b.yMax = max.y;
	return b;
};
h2d_col_Bounds.__super__ = h2d_col_Collider;
h2d_col_Bounds.prototype = $extend(h2d_col_Collider.prototype,{
	toIBounds: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		var ix = Math.floor(this.xMin * scale);
		var iy = Math.floor(this.yMin * scale);
		var width = Math.ceil(this.xMax * scale) - ix;
		var height = Math.ceil(this.yMax * scale) - iy;
		var b = new h2d_col_IBounds();
		b.xMin = ix;
		b.yMin = iy;
		b.xMax = ix + width;
		b.yMax = iy + height;
		return b;
	}
	,intersects: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	,collideBounds: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	,collideCircle: function(c) {
		if(c.x < this.xMin - c.ray) {
			return false;
		} else if(c.x > this.xMax + c.ray) {
			return false;
		} else if(c.y < this.yMin - c.ray) {
			return false;
		} else if(c.y > this.yMax + c.ray) {
			return false;
		} else {
			var tmp;
			if(c.x < this.xMin && c.y < this.yMin) {
				var dx = c.x - this.xMin;
				var dy = c.y - this.yMin;
				tmp = dx * dx + dy * dy > c.ray * c.ray;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			} else {
				var tmp;
				if(c.x > this.xMax && c.y < this.yMin) {
					var dx = c.x - this.xMax;
					var dy = c.y - this.yMin;
					tmp = dx * dx + dy * dy > c.ray * c.ray;
				} else {
					tmp = false;
				}
				if(tmp) {
					return false;
				} else {
					var tmp;
					if(c.x < this.xMin && c.y > this.yMax) {
						var dx = c.x - this.xMin;
						var dy = c.y - this.yMax;
						tmp = dx * dx + dy * dy > c.ray * c.ray;
					} else {
						tmp = false;
					}
					if(tmp) {
						return false;
					} else {
						var tmp;
						if(c.x > this.xMax && c.y > this.yMax) {
							var dx = c.x - this.xMax;
							var dy = c.y - this.yMax;
							tmp = dx * dx + dy * dy > c.ray * c.ray;
						} else {
							tmp = false;
						}
						if(tmp) {
							return false;
						} else {
							return true;
						}
					}
				}
			}
		}
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	,rayIntersection: function(r) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var minmax = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var maxmin = realMinTx < realMinTy ? realMinTy : realMinTx;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,distanceSq: function(p) {
		var dx = p.x < this.xMin ? this.xMin - p.x : p.x > this.xMax ? p.x - this.xMax : 0.;
		var dy = p.y < this.yMin ? this.yMin - p.y : p.y > this.yMax ? p.y - this.yMax : 0.;
		return dx * dx + dy * dy;
	}
	,distance: function(p) {
		var dx = p.x < this.xMin ? this.xMin - p.x : p.x > this.xMax ? p.x - this.xMax : 0.;
		var dy = p.y < this.yMin ? this.yMin - p.y : p.y > this.yMax ? p.y - this.yMax : 0.;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,addBounds: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
	}
	,addPos: function(x,y) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,set: function(x,y,width,height) {
		this.xMin = x;
		this.yMin = y;
		this.xMax = x + width;
		this.yMax = y + height;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
	}
	,doIntersect: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a < b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		this.yMin = a < b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		this.xMax = a > b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		this.yMax = a > b1 ? b1 : a;
	}
	,doUnion: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a > b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		this.yMin = a > b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		this.xMax = a < b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		this.yMax = a < b1 ? b1 : a;
	}
	,intersection: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a < b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		i.yMin = a < b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		i.xMax = a > b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		i.yMax = a > b1 ? b1 : a;
		if(i.xMax < i.xMin) {
			i.xMax = i.xMin;
		}
		if(i.yMax < i.yMin) {
			i.yMax = i.yMin;
		}
		return i;
	}
	,union: function(b) {
		var i = new h2d_col_Bounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a > b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		i.yMin = a > b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		i.xMax = a < b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		i.yMax = a < b1 ? b1 : a;
		return i;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.yMin = b.yMin;
		this.xMax = b.xMax;
		this.yMax = b.yMax;
	}
	,scalePivot: function(v) {
		this.xMin *= v;
		this.yMin *= v;
		this.xMax *= v;
		this.yMax *= v;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.xMax = mx + dx;
		this.yMax = my + dy;
	}
	,rotate: function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var x0 = this.xMin;
		var y0 = this.yMin;
		var x1 = this.xMax;
		var y1 = this.yMax;
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
		var x = x0 * cos - y0 * sin;
		var y = x0 * sin + y0 * cos;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		var x = x1 * cos - y0 * sin;
		var y = x1 * sin + y0 * cos;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		var x = x0 * cos - y1 * sin;
		var y = x0 * sin + y1 * cos;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		var x = x1 * cos - y1 * sin;
		var y = x1 * sin + y1 * cos;
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,offset: function(dx,dy) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
	}
	,getMin: function() {
		var x = this.xMin;
		var y = this.yMin;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,getCenter: function() {
		var x = (this.xMin + this.xMax) * 0.5;
		var y = (this.yMin + this.yMax) * 0.5;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,getSize: function() {
		var x = this.xMax - this.xMin;
		var y = this.yMax - this.yMin;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,getMax: function() {
		var x = this.xMax;
		var y = this.yMax;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,isEmpty: function() {
		if(!(this.xMax <= this.xMin)) {
			return this.yMax <= this.yMin;
		} else {
			return true;
		}
	}
	,empty: function() {
		this.xMin = 1e20;
		this.yMin = 1e20;
		this.xMax = -1e20;
		this.yMax = -1e20;
	}
	,all: function() {
		this.xMin = -1e20;
		this.yMin = -1e20;
		this.xMax = 1e20;
		this.yMax = 1e20;
	}
	,clone: function() {
		var b = new h2d_col_Bounds();
		b.xMin = this.xMin;
		b.yMin = this.yMin;
		b.xMax = this.xMax;
		b.yMax = this.yMax;
		return b;
	}
	,get_x: function() {
		return this.xMin;
	}
	,get_y: function() {
		return this.yMin;
	}
	,set_x: function(x) {
		this.xMax += x - this.xMin;
		return this.xMin = x;
	}
	,set_y: function(y) {
		this.yMax += y - this.yMin;
		return this.yMin = y;
	}
	,get_width: function() {
		return this.xMax - this.xMin;
	}
	,get_height: function() {
		return this.yMax - this.yMin;
	}
	,set_width: function(w) {
		this.xMax = this.xMin + w;
		return w;
	}
	,set_height: function(h) {
		this.yMax = this.yMin + h;
		return h;
	}
	,toString: function() {
		var x = this.xMin;
		var y = this.yMin;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var tmp = "{" + Std.string(new h2d_col_PointImpl(x,y)) + ",";
		var x = this.xMax - this.xMin;
		var y = this.yMax - this.yMin;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return tmp + Std.string(new h2d_col_PointImpl(x,y)) + "}";
	}
	,toCircle: function() {
		var dx = this.xMax - this.xMin;
		var dy = this.yMax - this.yMin;
		return new h2d_col_Circle((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5,Math.sqrt(dx * dx + dy * dy) * 0.5);
	}
	,__class__: h2d_col_Bounds
});
var h2d_col_Circle = function(x,y,ray) {
	this.x = x;
	this.y = y;
	this.ray = ray;
};
$hxClasses["h2d.col.Circle"] = h2d_col_Circle;
h2d_col_Circle.__name__ = "h2d.col.Circle";
h2d_col_Circle.__super__ = h2d_col_Collider;
h2d_col_Circle.prototype = $extend(h2d_col_Collider.prototype,{
	distanceSq: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var d = dx * dx + dy * dy - this.ray * this.ray;
		if(d < 0) {
			return 0;
		} else {
			return d;
		}
	}
	,side: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		return this.ray * this.ray - (dx * dx + dy * dy);
	}
	,collideCircle: function(c) {
		var dx = this.x - c.x;
		var dy = this.y - c.y;
		return dx * dx + dy * dy < (this.ray + c.ray) * (this.ray + c.ray);
	}
	,collideBounds: function(b) {
		if(this.x < b.xMin - this.ray) {
			return false;
		}
		if(this.x > b.xMax + this.ray) {
			return false;
		}
		if(this.y < b.yMin - this.ray) {
			return false;
		}
		if(this.y > b.yMax + this.ray) {
			return false;
		}
		var tmp;
		if(this.x < b.xMin && this.y < b.yMin) {
			var dx = this.x - b.xMin;
			var dy = this.y - b.yMin;
			tmp = dx * dx + dy * dy > this.ray * this.ray;
		} else {
			tmp = false;
		}
		if(tmp) {
			return false;
		}
		var tmp;
		if(this.x > b.xMax && this.y < b.yMin) {
			var dx = this.x - b.xMax;
			var dy = this.y - b.yMin;
			tmp = dx * dx + dy * dy > this.ray * this.ray;
		} else {
			tmp = false;
		}
		if(tmp) {
			return false;
		}
		var tmp;
		if(this.x < b.xMin && this.y > b.yMax) {
			var dx = this.x - b.xMin;
			var dy = this.y - b.yMax;
			tmp = dx * dx + dy * dy > this.ray * this.ray;
		} else {
			tmp = false;
		}
		if(tmp) {
			return false;
		}
		var tmp;
		if(this.x > b.xMax && this.y > b.yMax) {
			var dx = this.x - b.xMax;
			var dy = this.y - b.yMax;
			tmp = dx * dx + dy * dy > this.ray * this.ray;
		} else {
			tmp = false;
		}
		if(tmp) {
			return false;
		}
		return true;
	}
	,lineIntersect: function(p1,p2) {
		var dx = p2.x - p1.x;
		var dy = p2.y - p1.y;
		var a = dx * dx + dy * dy;
		if(a < 1e-8) {
			return null;
		}
		var b = 2 * (dx * (p1.x - this.x) + dy * (p1.y - this.y));
		var dx1 = p1.x - this.x;
		var dy1 = p1.y - this.y;
		var c = dx1 * dx1 + dy1 * dy1 - this.ray * this.ray;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return null;
		}
		if(d == 0) {
			var t = -b / (2 * a);
			var x = p1.x + t * dx;
			var y = p1.y + t * dy;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return [new h2d_col_PointImpl(x,y)];
		}
		var t1 = (-b - Math.sqrt(d)) / (2 * a);
		var t2 = (-b + Math.sqrt(d)) / (2 * a);
		var x = p1.x + t1 * dx;
		var y = p1.y + t1 * dy;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var this1 = new h2d_col_PointImpl(x,y);
		var x = p1.x + t2 * dx;
		var y = p1.y + t2 * dy;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return [this1,new h2d_col_PointImpl(x,y)];
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.ray) + "}";
	}
	,contains: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var d = dx * dx + dy * dy - this.ray * this.ray;
		return (d < 0 ? 0 : d) == 0;
	}
	,__class__: h2d_col_Circle
});
var h2d_col_IBounds = function() {
	this.xMin = 2147483647;
	this.yMin = 2147483647;
	this.xMax = -2147483648;
	this.yMax = -2147483648;
};
$hxClasses["h2d.col.IBounds"] = h2d_col_IBounds;
h2d_col_IBounds.__name__ = "h2d.col.IBounds";
h2d_col_IBounds.fromValues = function(x0,y0,width,height) {
	var b = new h2d_col_IBounds();
	b.xMin = x0;
	b.yMin = y0;
	b.xMax = x0 + width;
	b.yMax = y0 + height;
	return b;
};
h2d_col_IBounds.fromPoints = function(min,max) {
	var b = new h2d_col_IBounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.xMax = max.x;
	b.yMax = max.y;
	return b;
};
h2d_col_IBounds.prototype = {
	toBounds: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		var x0 = this.xMin * scale;
		var y0 = this.yMin * scale;
		var width = (this.xMax - this.xMin) * scale;
		var height = (this.yMax - this.yMin) * scale;
		var b = new h2d_col_Bounds();
		b.xMin = x0;
		b.yMin = y0;
		b.xMax = x0 + width;
		b.yMax = y0 + height;
		return b;
	}
	,intersects: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.xMax < b.xMin || this.yMax < b.yMin);
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	,addBounds: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
	}
	,addPos: function(x,y) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
	}
	,set: function(x,y,width,height) {
		this.xMin = x;
		this.yMin = y;
		this.xMax = x + width;
		this.yMax = y + height;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
	}
	,doIntersect: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a < b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		this.yMin = a < b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		this.xMax = a > b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		this.yMax = a > b1 ? b1 : a;
	}
	,doUnion: function(b) {
		var a = this.xMin;
		var b1 = b.xMin;
		this.xMin = a > b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		this.yMin = a > b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		this.xMax = a < b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		this.yMax = a < b1 ? b1 : a;
	}
	,intersection: function(b) {
		var i = new h2d_col_IBounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a < b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		i.yMin = a < b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		i.xMax = a > b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		i.yMax = a > b1 ? b1 : a;
		if(i.xMax < i.xMin) {
			i.xMax = i.xMin;
		}
		if(i.yMax < i.yMin) {
			i.yMax = i.yMin;
		}
		return i;
	}
	,union: function(b) {
		var i = new h2d_col_IBounds();
		var a = this.xMin;
		var b1 = b.xMin;
		i.xMin = a > b1 ? b1 : a;
		var a = this.yMin;
		var b1 = b.yMin;
		i.yMin = a > b1 ? b1 : a;
		var a = this.xMax;
		var b1 = b.xMax;
		i.xMax = a < b1 ? b1 : a;
		var a = this.yMax;
		var b1 = b.yMax;
		i.yMax = a < b1 ? b1 : a;
		return i;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.yMin = b.yMin;
		this.xMax = b.xMax;
		this.yMax = b.yMax;
	}
	,offset: function(dx,dy) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
	}
	,getMin: function() {
		return new h2d_col_IPoint(this.xMin,this.yMin);
	}
	,getCenter: function() {
		return new h2d_col_IPoint(this.xMin + this.xMax >> 1,this.yMin + this.yMax >> 1);
	}
	,getSize: function() {
		return new h2d_col_IPoint(this.xMax - this.xMin,this.yMax - this.yMin);
	}
	,getMax: function() {
		return new h2d_col_IPoint(this.xMax,this.yMax);
	}
	,isEmpty: function() {
		if(this.xMax > this.xMin) {
			return this.yMax <= this.yMin;
		} else {
			return true;
		}
	}
	,empty: function() {
		this.xMin = 2147483647;
		this.yMin = 2147483647;
		this.xMax = -2147483648;
		this.yMax = -2147483648;
	}
	,all: function() {
		this.xMin = -2147483648;
		this.yMin = -2147483648;
		this.xMax = 2147483647;
		this.yMax = 2147483647;
	}
	,clone: function() {
		var b = new h2d_col_IBounds();
		b.xMin = this.xMin;
		b.yMin = this.yMin;
		b.xMax = this.xMax;
		b.yMax = this.yMax;
		return b;
	}
	,get_x: function() {
		return this.xMin;
	}
	,get_y: function() {
		return this.yMin;
	}
	,set_x: function(x) {
		this.xMax += x - this.xMin;
		return this.xMin = x;
	}
	,set_y: function(y) {
		this.yMax += y - this.yMin;
		return this.yMin = y;
	}
	,get_width: function() {
		return this.xMax - this.xMin;
	}
	,get_height: function() {
		return this.yMax - this.yMin;
	}
	,set_width: function(w) {
		this.xMax = this.xMin + w;
		return w;
	}
	,set_height: function(h) {
		this.yMax = this.yMin + h;
		return h;
	}
	,toString: function() {
		return "{" + Std.string(new h2d_col_IPoint(this.xMin,this.yMin)) + "," + Std.string(new h2d_col_IPoint(this.xMax - this.xMin,this.yMax - this.yMin)) + "}";
	}
	,__class__: h2d_col_IBounds
};
var h2d_col_IPoint = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.IPoint"] = h2d_col_IPoint;
h2d_col_IPoint.__name__ = "h2d.col.IPoint";
h2d_col_IPoint.prototype = {
	load: function(p) {
		this.x = p.x;
		this.y = p.y;
	}
	,scale: function(v) {
		this.x *= v;
		this.y *= v;
	}
	,scaled: function(v) {
		return new h2d_col_IPoint(this.x * v,this.y * v);
	}
	,distanceSq: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,toString: function() {
		return "{" + this.x + "," + this.y + "}";
	}
	,sub: function(p) {
		return new h2d_col_IPoint(this.x - p.x,this.y - p.y);
	}
	,add: function(p) {
		return new h2d_col_IPoint(this.x + p.x,this.y + p.y);
	}
	,equals: function(other) {
		if(this.x == other.x) {
			return this.y == other.y;
		} else {
			return false;
		}
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
	}
	,clone: function() {
		return new h2d_col_IPoint(this.x,this.y);
	}
	,cross: function(p) {
		return this.x * p.y - this.y * p.x;
	}
	,toPoint: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		var x = this.x * scale;
		var y = this.y * scale;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,__class__: h2d_col_IPoint
};
var h2d_col_OffsetKind = $hxEnums["h2d.col.OffsetKind"] = { __ename__:"h2d.col.OffsetKind",__constructs__:null
	,Square: {_hx_name:"Square",_hx_index:0,__enum__:"h2d.col.OffsetKind",toString:$estr}
	,Miter: {_hx_name:"Miter",_hx_index:1,__enum__:"h2d.col.OffsetKind",toString:$estr}
	,Round: ($_=function(arc) { return {_hx_index:2,arc:arc,__enum__:"h2d.col.OffsetKind",toString:$estr,__params__:function(){ return [this.arc];}}; },$_._hx_name="Round",$_)
};
h2d_col_OffsetKind.__constructs__ = [h2d_col_OffsetKind.Square,h2d_col_OffsetKind.Miter,h2d_col_OffsetKind.Round];
h2d_col_OffsetKind.__empty_constructs__ = [h2d_col_OffsetKind.Square,h2d_col_OffsetKind.Miter];
var h2d_col_IPolygon = {};
h2d_col_IPolygon.get_length = function(this1) {
	return this1.length;
};
h2d_col_IPolygon.get_points = function(this1) {
	return this1;
};
h2d_col_IPolygon._new = function(points) {
	return points == null ? [] : points;
};
h2d_col_IPolygon.iterator = function(this1) {
	return new hxd_impl_ArrayIterator_$h2d_$col_$IPoint(this1);
};
h2d_col_IPolygon.toPolygon = function(this1,scale) {
	if(scale == null) {
		scale = 1.;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = this1;
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		var scale1 = scale;
		if(scale1 == null) {
			scale1 = 1.;
		}
		var x = p.x * scale1;
		var y = p.y * scale1;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_g.push(new h2d_col_PointImpl(x,y));
	}
	return _g;
};
h2d_col_IPolygon.getBounds = function(this1,b) {
	if(b == null) {
		b = new h2d_col_IBounds();
	}
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(p.x < b.xMin) {
			b.xMin = p.x;
		}
		if(p.x > b.xMax) {
			b.xMax = p.x;
		}
		if(p.y < b.yMin) {
			b.yMin = p.y;
		}
		if(p.y > b.yMax) {
			b.yMax = p.y;
		}
	}
	return b;
};
h2d_col_IPolygon.union = function(this1,p,withHoles) {
	if(withHoles == null) {
		withHoles = true;
	}
	var c = new hxd_clipper_Clipper();
	if(!withHoles) {
		c.resultKind = hxd_clipper_ResultKind.NoHoles;
	}
	c.addPolygon(this1,hxd_clipper_PolyType.Clip);
	c.addPolygon(p,hxd_clipper_PolyType.Clip);
	return c.execute(hxd_clipper_ClipType.Union,hxd_clipper_PolyFillType.NonZero,hxd_clipper_PolyFillType.NonZero);
};
h2d_col_IPolygon.intersection = function(this1,p,withHoles) {
	if(withHoles == null) {
		withHoles = true;
	}
	return h2d_col_IPolygon.clipperOp(this1,p,hxd_clipper_ClipType.Intersection,withHoles);
};
h2d_col_IPolygon.subtraction = function(this1,p,withHoles) {
	if(withHoles == null) {
		withHoles = true;
	}
	return h2d_col_IPolygon.clipperOp(this1,p,hxd_clipper_ClipType.Difference,withHoles);
};
h2d_col_IPolygon.offset = function(this1,delta,kind,withHoles) {
	if(withHoles == null) {
		withHoles = true;
	}
	var c = new hxd_clipper_ClipperOffset();
	switch(kind._hx_index) {
	case 0:
		c.addPolygon(this1,hxd_clipper_JoinType.Square,hxd_clipper_EndType.ClosedPol);
		break;
	case 1:
		c.addPolygon(this1,hxd_clipper_JoinType.Miter,hxd_clipper_EndType.ClosedPol);
		break;
	case 2:
		var arc = kind.arc;
		c.ArcTolerance = arc;
		c.addPolygon(this1,hxd_clipper_JoinType.Round,hxd_clipper_EndType.ClosedPol);
		break;
	}
	if(!withHoles) {
		c.resultKind = hxd_clipper_ResultKind.NoHoles;
	}
	return c.execute(delta);
};
h2d_col_IPolygon.clipperOp = function(this1,p,op,withHoles) {
	var c = new hxd_clipper_Clipper();
	if(!withHoles) {
		c.resultKind = hxd_clipper_ResultKind.NoHoles;
	}
	c.addPolygon(this1,hxd_clipper_PolyType.Subject);
	c.addPolygon(p,hxd_clipper_PolyType.Clip);
	return c.execute(op,hxd_clipper_PolyFillType.NonZero,hxd_clipper_PolyFillType.NonZero);
};
h2d_col_IPolygon.convexHull = function(this1) {
	var len = this1.length;
	if(len < 3) {
		throw haxe_Exception.thrown("convexHull() needs at least 3 points");
	}
	var first = 0;
	var firstX = this1[first].x;
	var _g = 1;
	var _g1 = this1.length;
	while(_g < _g1) {
		var i = _g++;
		var px = this1[i].x;
		if(px < firstX) {
			first = i;
			firstX = px;
		}
	}
	var hull = [];
	var curr = first;
	var next = 0;
	do {
		hull.push(this1[curr]);
		next = (curr + 1) % len;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var p1 = this1[i];
			var p2 = this1[curr];
			var t = this1[next];
			if((p2.x - p1.x) * (t.y - p1.y) - (p2.y - p1.y) * (t.x - p1.x) < 0) {
				next = i;
			}
		}
		curr = next;
	} while(curr != first);
	return hull;
};
h2d_col_IPolygon.isClockwise = function(this1) {
	var sum = 0.;
	var p1 = this1[this1.length - 1];
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p2 = _g1[_g];
		++_g;
		sum += (p2.x - p1.x) * (p2.y + p1.y);
		p1 = p2;
	}
	return sum < 0;
};
h2d_col_IPolygon.area = function(this1) {
	var sum = 0.;
	var p1 = this1[this1.length - 1];
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p2 = _g1[_g];
		++_g;
		sum += p1.x * p2.y - p2.x * p1.y;
		p1 = p2;
	}
	return (sum < 0 ? -sum : sum) * 0.5;
};
h2d_col_IPolygon.side = function(this1,p1,p2,t) {
	return (p2.x - p1.x) * (t.y - p1.y) - (p2.y - p1.y) * (t.x - p1.x);
};
h2d_col_IPolygon.isConvex = function(this1) {
	var p1 = this1[this1.length - 2];
	var p2 = this1[this1.length - 1];
	var p3 = this1[0];
	var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
	var _g = 1;
	var _g1 = this1.length;
	while(_g < _g1) {
		var i = _g++;
		p1 = p2;
		p2 = p3;
		p3 = this1[i];
		if((p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0 != s) {
			return false;
		}
	}
	return true;
};
h2d_col_IPolygon.reverse = function(this1) {
	this1.reverse();
};
h2d_col_IPolygon.contains = function(this1,p,isConvex) {
	if(isConvex == null) {
		isConvex = false;
	}
	if(isConvex) {
		var p1 = this1[this1.length - 1];
		var _g = 0;
		var _g1 = this1;
		while(_g < _g1.length) {
			var p2 = _g1[_g];
			++_g;
			if((p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) < 0) {
				return false;
			}
			p1 = p2;
		}
		return true;
	} else {
		var w = 0;
		var p1 = this1[this1.length - 1];
		var _g = 0;
		var _g1 = this1;
		while(_g < _g1.length) {
			var p2 = _g1[_g];
			++_g;
			if(p2.y <= p.y) {
				if(p1.y > p.y && (p1.x - p2.x) * (p.y - p2.y) - (p1.y - p2.y) * (p.x - p2.x) > 0) {
					++w;
				}
			} else if(p1.y <= p.y && (p1.x - p2.x) * (p.y - p2.y) - (p1.y - p2.y) * (p.x - p2.x) < 0) {
				--w;
			}
			p1 = p2;
		}
		return w != 0;
	}
};
h2d_col_IPolygon.optimize = function(this1,epsilon) {
	var out = [];
	h2d_col_IPolygon.optimizeRec(this1,0,this1.length,out,epsilon);
	return out;
};
h2d_col_IPolygon.optimizeRec = function(points,index,len,out,epsilon) {
	var dmax = 0.;
	var pfirst = points[index];
	var plast = points[len - 1];
	var _g = index + 1;
	var _g1 = len - 1;
	while(_g < _g1) {
		var i = _g++;
		var p0 = points[i];
		var A = p0.x - pfirst.x;
		var B = p0.y - pfirst.y;
		var C = plast.x - pfirst.x;
		var D = plast.y - pfirst.y;
		var dot = A * C + B * D;
		var dist = C * C + D * D;
		var param = -1.;
		if(dist != 0) {
			param = dot / dist;
		}
		var xx;
		var yy;
		if(param < 0) {
			xx = pfirst.x;
			yy = pfirst.y;
		} else if(param > 1) {
			xx = plast.x;
			yy = plast.y;
		} else {
			xx = pfirst.x + param * C;
			yy = pfirst.y + param * D;
		}
		var dx = p0.x - xx;
		var dy = p0.y - yy;
		var d = dx * dx + dy * dy;
		if(d > dmax) {
			index = i;
			dmax = d;
		}
	}
	if(dmax >= epsilon) {
		h2d_col_IPolygon.optimizeRec(points,0,index,out,epsilon);
		out.pop();
		h2d_col_IPolygon.optimizeRec(points,index,len,out,epsilon);
	} else {
		out.push(points[index]);
		out.push(points[len - 1]);
	}
};
var h2d_col_IPolygons = {};
h2d_col_IPolygons.get_length = function(this1) {
	return this1.length;
};
h2d_col_IPolygons.get_polygons = function(this1) {
	return this1;
};
h2d_col_IPolygons._new = function(polygons) {
	return polygons == null ? [] : polygons;
};
h2d_col_IPolygons.iterator = function(this1) {
	return new hxd_impl_ArrayIterator_$h2d_$col_$IPolygon(this1);
};
h2d_col_IPolygons.toPolygons = function(this1,scale) {
	if(scale == null) {
		scale = 1.;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = this1;
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		_g.push(h2d_col_IPolygon.toPolygon(p,scale));
	}
	return _g;
};
h2d_col_IPolygons.getBounds = function(this1,b) {
	if(b == null) {
		b = new h2d_col_IBounds();
	}
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		h2d_col_IPolygon.getBounds(p,b);
	}
	return b;
};
h2d_col_IPolygons.union = function(this1,p,withHoles) {
	if(withHoles == null) {
		withHoles = true;
	}
	var c = new hxd_clipper_Clipper();
	if(!withHoles) {
		c.resultKind = hxd_clipper_ResultKind.NoHoles;
	}
	c.addPolygons(this1,hxd_clipper_PolyType.Clip);
	if(p != null) {
		c.addPolygons(p,hxd_clipper_PolyType.Clip);
	}
	return c.execute(hxd_clipper_ClipType.Union,hxd_clipper_PolyFillType.NonZero,hxd_clipper_PolyFillType.NonZero);
};
h2d_col_IPolygons.intersection = function(this1,p,withHoles) {
	if(withHoles == null) {
		withHoles = true;
	}
	return h2d_col_IPolygons.clipperOp(this1,p,hxd_clipper_ClipType.Intersection,withHoles);
};
h2d_col_IPolygons.subtraction = function(this1,p,withHoles) {
	if(withHoles == null) {
		withHoles = true;
	}
	return h2d_col_IPolygons.clipperOp(this1,p,hxd_clipper_ClipType.Difference,withHoles);
};
h2d_col_IPolygons.offset = function(this1,delta,kind,withHoles) {
	if(withHoles == null) {
		withHoles = true;
	}
	if(this1.length == 0) {
		var polygons = null;
		return polygons == null ? [] : polygons;
	}
	var c = new hxd_clipper_ClipperOffset();
	switch(kind._hx_index) {
	case 0:
		c.addPolygons(this1,hxd_clipper_JoinType.Square,hxd_clipper_EndType.ClosedPol);
		break;
	case 1:
		c.addPolygons(this1,hxd_clipper_JoinType.Miter,hxd_clipper_EndType.ClosedPol);
		break;
	case 2:
		var arc = kind.arc;
		c.ArcTolerance = arc;
		c.addPolygons(this1,hxd_clipper_JoinType.Round,hxd_clipper_EndType.ClosedPol);
		break;
	}
	if(!withHoles) {
		c.resultKind = hxd_clipper_ResultKind.NoHoles;
	}
	return c.execute(delta);
};
h2d_col_IPolygons.clipperOp = function(this1,p,op,withHoles) {
	var c = new hxd_clipper_Clipper();
	if(!withHoles) {
		c.resultKind = hxd_clipper_ResultKind.NoHoles;
	}
	c.addPolygons(this1,hxd_clipper_PolyType.Subject);
	c.addPolygons(p,hxd_clipper_PolyType.Clip);
	return c.execute(op,hxd_clipper_PolyFillType.NonZero,hxd_clipper_PolyFillType.NonZero);
};
h2d_col_IPolygons.contains = function(this1,p,isConvex) {
	if(isConvex == null) {
		isConvex = false;
	}
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var pl = _g1[_g];
		++_g;
		if(h2d_col_IPolygon.contains(pl,p,isConvex)) {
			return true;
		}
	}
	return false;
};
h2d_col_IPolygons.optimize = function(this1,epsilon) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1;
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		_g.push(h2d_col_IPolygon.optimize(p,epsilon));
	}
	return _g;
};
var h2d_col_Matrix = function() {
	this.a = 1;
	this.b = 0;
	this.c = 0;
	this.d = 1;
	this.x = 0;
	this.y = 0;
};
$hxClasses["h2d.col.Matrix"] = h2d_col_Matrix;
h2d_col_Matrix.__name__ = "h2d.col.Matrix";
h2d_col_Matrix.prototype = {
	identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.x = 0;
		this.y = 0;
	}
	,initTranslate: function(x,y) {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.x = x;
		this.y = y;
	}
	,initScale: function(sx,sy) {
		this.a = sx;
		this.b = 0;
		this.c = 0;
		this.d = sy;
		this.x = 0;
		this.y = 0;
	}
	,initRotate: function(angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		this.a = cos;
		this.b = sin;
		this.c = -sin;
		this.d = cos;
		this.x = 0;
		this.y = 0;
	}
	,initSkew: function(sx,sy) {
		var tanX = Math.tan(sx);
		var tanY = Math.tan(sy);
		this.a = 1;
		this.b = tanY;
		this.c = tanX;
		this.d = 1;
		this.x = 0;
		this.y = 0;
	}
	,invert: function() {
		this.inverse(this);
	}
	,getDeterminant: function() {
		return this.a * this.d - this.b * this.c;
	}
	,inverse: function(m) {
		var a = m.a;
		var b = m.b;
		var c = m.c;
		var d = m.d;
		var x = m.x;
		var y = m.y;
		var invDet = 1 / (this.a * this.d - this.b * this.c);
		this.a = d * invDet;
		this.b = -b * invDet;
		this.c = -c * invDet;
		this.d = a * invDet;
		this.x = (-x * d + c * y) * invDet;
		this.y = (x * b - a * y) * invDet;
	}
	,transform: function(pt) {
		var x = pt.x * this.a + pt.y * this.c + this.x;
		var y = pt.x * this.b + pt.y * this.d + this.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,translate: function(x,y) {
		this.x += x;
		this.y += y;
	}
	,translateX: function(x) {
		this.x += x;
	}
	,translateY: function(y) {
		this.y += y;
	}
	,prependTranslate: function(x,y) {
		this.x += this.a * x + this.c * y;
		this.y += this.b * x + this.d * y;
	}
	,prependTranslateX: function(x) {
		this.x += this.a * x;
	}
	,prependTranslateY: function(y) {
		this.y += this.d * y;
	}
	,multiply: function(a,b) {
		var aa = a.a;
		var ab = a.b;
		var ac = a.c;
		var ad = a.d;
		var ax = a.x;
		var ay = a.y;
		var ba = b.a;
		var bb = b.b;
		var bc = b.c;
		var bd = b.d;
		var bx = b.x;
		var by = b.y;
		this.a = aa * ba + ab * bc;
		this.b = aa * bb + ab * bd;
		this.c = ac * ba + ad * bc;
		this.d = ac * bb + ad * bd;
		this.x = ax * ba + ay * bc + bx;
		this.y = ax * bb + ay * bd + by;
	}
	,getScale: function() {
		var p = new h2d_col_PointImpl(0.,0.);
		p.x = Math.sqrt(this.a * this.a + this.b * this.b);
		p.y = Math.sqrt(this.c * this.c + this.d * this.d);
		if(this.a * this.d - this.b * this.c < 0) {
			p.x *= -1;
			p.y *= -1;
		}
		return p;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.c *= sx;
		this.x *= sx;
		this.b *= sy;
		this.d *= sy;
		this.y *= sy;
	}
	,scaleX: function(sx) {
		this.a *= sx;
		this.c *= sx;
		this.x *= sx;
	}
	,scaleY: function(sy) {
		this.b *= sy;
		this.d *= sy;
		this.y *= sy;
	}
	,rotate: function(angle) {
		var _this = h2d_col_Matrix.tmp;
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		_this.a = cos;
		_this.b = sin;
		_this.c = -sin;
		_this.d = cos;
		_this.x = 0;
		_this.y = 0;
		this.multiply(this,h2d_col_Matrix.tmp);
	}
	,skew: function(sx,sy) {
		var aa = this.a;
		var ab = this.b;
		var ac = this.c;
		var ad = this.d;
		var ax = this.x;
		var ay = this.y;
		var bb = Math.tan(sy);
		var bc = Math.tan(sx);
		this.a = aa + ab * bc;
		this.b = aa * bb + ab;
		this.c = ac + ad * bc;
		this.d = ac * bb + ad;
		this.x = ax + ay * bc;
		this.y = ax * bb + ay;
	}
	,skewX: function(sx) {
		var bc = Math.tan(sx);
		this.a += this.b * bc;
		this.c += this.d * bc;
		this.x += this.y * bc;
	}
	,skewY: function(sy) {
		var bb = Math.tan(sy);
		this.b = this.a * bb + this.b;
		this.d = this.c * bb + this.d;
		this.y = this.x * bb + this.y;
	}
	,clone: function() {
		var m = new h2d_col_Matrix();
		m.a = this.a;
		m.b = this.b;
		m.c = this.c;
		m.d = this.d;
		m.x = this.x;
		m.y = this.y;
		return m;
	}
	,getPosition: function(p) {
		if(p == null) {
			p = new h2d_col_PointImpl(0.,0.);
		}
		var x = this.x;
		var y = this.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		p.x = x;
		p.y = y;
		return p;
	}
	,toString: function() {
		return "MAT=[\n" + "  [ " + hxd_Math.fmt(this.a) + ", " + hxd_Math.fmt(this.b) + " ]\n" + "  [ " + hxd_Math.fmt(this.c) + ", " + hxd_Math.fmt(this.d) + " ]\n" + "  [ " + hxd_Math.fmt(this.x) + ", " + hxd_Math.fmt(this.y) + " ]\n" + "]";
	}
	,__class__: h2d_col_Matrix
};
var h2d_col_Point = {};
h2d_col_Point._new = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h2d_col_PointImpl(x,y);
};
h2d_col_Point.sub = function(this1,p) {
	var x = this1.x - p.x;
	var y = this1.y - p.y;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h2d_col_PointImpl(x,y);
};
h2d_col_Point.add = function(this1,p) {
	var x = this1.x + p.x;
	var y = this1.y + p.y;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h2d_col_PointImpl(x,y);
};
h2d_col_Point.transform = function(this1,m) {
	var mx = m.a * this1.x + m.c * this1.y + m.x;
	var my = m.b * this1.x + m.d * this1.y + m.y;
	this1.x = mx;
	this1.y = my;
};
h2d_col_Point.transformed = function(this1,m) {
	var mx = m.a * this1.x + m.c * this1.y + m.x;
	var my = m.b * this1.x + m.d * this1.y + m.y;
	var x = mx;
	var y = my;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h2d_col_PointImpl(x,y);
};
h2d_col_Point.scale = function(this1,v) {
	this1.x *= v;
	this1.y *= v;
};
h2d_col_Point.scaled = function(this1,v) {
	var x = this1.x * v;
	var y = this1.y * v;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h2d_col_PointImpl(x,y);
};
h2d_col_Point.scaledInv = function(f,p) {
	var x = p.x * f;
	var y = p.y * f;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h2d_col_PointImpl(x,y);
};
var h2d_col_Polygon = {};
h2d_col_Polygon.get_length = function(this1) {
	return this1.length;
};
h2d_col_Polygon.get_points = function(this1) {
	return this1;
};
h2d_col_Polygon._new = function(points) {
	return points == null ? [] : points;
};
h2d_col_Polygon.iterator = function(this1) {
	return new hxd_impl_ArrayIterator_$h2d_$col_$Point(this1);
};
h2d_col_Polygon.fastTriangulate = function(this1) {
	return new hxd_earcut_Earcut().triangulate_anon_y_Float_x_Float(this1);
};
h2d_col_Polygon.toSegments = function(this1) {
	var segments = [];
	var p1 = this1[this1.length - 1];
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p2 = _g1[_g];
		++_g;
		var s = new h2d_col_Segment(p1,p2);
		segments.push(s);
		p1 = p2;
	}
	return segments;
};
h2d_col_Polygon.toIPolygon = function(this1,scale) {
	if(scale == null) {
		scale = 1.;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = this1;
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		var scale1 = scale;
		if(scale1 == null) {
			scale1 = 1.;
		}
		_g.push(new h2d_col_IPoint(Math.round(p.x * scale1),Math.round(p.y * scale1)));
	}
	return _g;
};
h2d_col_Polygon.getBounds = function(this1,b) {
	if(b == null) {
		b = new h2d_col_Bounds();
	}
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(p.x < b.xMin) {
			b.xMin = p.x;
		}
		if(p.x > b.xMax) {
			b.xMax = p.x;
		}
		if(p.y < b.yMin) {
			b.yMin = p.y;
		}
		if(p.y > b.yMax) {
			b.yMax = p.y;
		}
	}
	return b;
};
h2d_col_Polygon.getCollider = function(this1,isConvex) {
	if(isConvex == null) {
		isConvex = false;
	}
	return new h2d_col_PolygonCollider([this1],isConvex);
};
h2d_col_Polygon.xSort = function(this1,a,b) {
	if(a.x == b.x) {
		if(a.y < b.y) {
			return -1;
		} else {
			return 1;
		}
	}
	if(a.x < b.x) {
		return -1;
	} else {
		return 1;
	}
};
h2d_col_Polygon.convexHull = function(this1) {
	var len = this1.length;
	if(this1.length < 3) {
		return this1;
	}
	this1.sort(function(a,b) {
		if(a.x == b.x) {
			if(a.y < b.y) {
				return -1;
			} else {
				return 1;
			}
		} else if(a.x < b.x) {
			return -1;
		} else {
			return 1;
		}
	});
	var hull = [];
	var k = 0;
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		while(true) {
			var tmp;
			if(k >= 2) {
				var p1 = hull[k - 2];
				var p2 = hull[k - 1];
				tmp = (p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) <= 0;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			--k;
		}
		hull[k++] = p;
	}
	var i = this1.length - 2;
	var len = k + 1;
	while(i >= 0) {
		var p = this1[i];
		while(true) {
			var tmp;
			if(k >= len) {
				var p1 = hull[k - 2];
				var p2 = hull[k - 1];
				tmp = (p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) <= 0;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			--k;
		}
		hull[k++] = p;
		--i;
	}
	while(hull.length >= k) hull.pop();
	return hull;
};
h2d_col_Polygon.isClockwise = function(this1) {
	var sum = 0.;
	var p1 = this1[this1.length - 1];
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p2 = _g1[_g];
		++_g;
		sum += (p2.x - p1.x) * (p2.y + p1.y);
		p1 = p2;
	}
	return sum < 0;
};
h2d_col_Polygon.area = function(this1) {
	var sum = 0.;
	var p1 = this1[this1.length - 1];
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p2 = _g1[_g];
		++_g;
		sum += p2.x * p1.y - p1.x * p2.y;
		p1 = p2;
	}
	return (sum < 0 ? -sum : sum) * 0.5;
};
h2d_col_Polygon.centroid = function(this1) {
	var A = 0.;
	var cx = 0.;
	var cy = 0.;
	var p0 = this1[this1.length - 1];
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		var a = p0.x * p.y - p.x * p0.y;
		cx += (p0.x + p.x) * a;
		cy += (p0.y + p.y) * a;
		A += a;
		p0 = p;
	}
	A *= 0.5;
	cx *= 1 / (6 * A);
	cy *= 1 / (6 * A);
	var x = cx;
	var y = cy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h2d_col_PointImpl(x,y);
};
h2d_col_Polygon.side = function(this1,p1,p2,t) {
	return (p2.x - p1.x) * (t.y - p1.y) - (p2.y - p1.y) * (t.x - p1.x);
};
h2d_col_Polygon.isConvex = function(this1) {
	if(this1.length < 4) {
		return true;
	}
	var p1 = this1[this1.length - 2];
	var p2 = this1[this1.length - 1];
	var p3 = this1[0];
	var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
	var _g = 1;
	var _g1 = this1.length;
	while(_g < _g1) {
		var i = _g++;
		p1 = p2;
		p2 = p3;
		p3 = this1[i];
		if((p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0 != s) {
			return false;
		}
	}
	return true;
};
h2d_col_Polygon.reverse = function(this1) {
	this1.reverse();
};
h2d_col_Polygon.transform = function(this1,mat) {
	var _g = 0;
	var _g1 = this1.length;
	while(_g < _g1) {
		var i = _g++;
		var pt = this1[i];
		var x = pt.x * mat.a + pt.y * mat.c + mat.x;
		var y = pt.x * mat.b + pt.y * mat.d + mat.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this1[i] = new h2d_col_PointImpl(x,y);
	}
};
h2d_col_Polygon.contains = function(this1,p,isConvex) {
	if(isConvex == null) {
		isConvex = false;
	}
	if(isConvex) {
		var p1 = this1[this1.length - 1];
		var _g = 0;
		var _g1 = this1;
		while(_g < _g1.length) {
			var p2 = _g1[_g];
			++_g;
			if((p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) < 0) {
				return false;
			}
			p1 = p2;
		}
		return true;
	} else {
		var w = 0;
		var p1 = this1[this1.length - 1];
		var _g = 0;
		var _g1 = this1;
		while(_g < _g1.length) {
			var p2 = _g1[_g];
			++_g;
			if(p2.y <= p.y) {
				if(p1.y > p.y && (p1.x - p2.x) * (p.y - p2.y) - (p1.y - p2.y) * (p.x - p2.x) > 0) {
					++w;
				}
			} else if(p1.y <= p.y && (p1.x - p2.x) * (p.y - p2.y) - (p1.y - p2.y) * (p.x - p2.x) < 0) {
				--w;
			}
			p1 = p2;
		}
		return w != 0;
	}
};
h2d_col_Polygon.findClosestPoint = function(this1,pt,maxDist) {
	var closest = null;
	var minDist = maxDist * maxDist;
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var cp = _g1[_g];
		++_g;
		var dx = cp.x - pt.x;
		var dy = cp.y - pt.y;
		var sqDist = dx * dx + dy * dy;
		if(sqDist < minDist) {
			closest = cp;
			minDist = sqDist;
		}
	}
	return closest;
};
h2d_col_Polygon.projectPoint = function(this1,pt) {
	var p1 = this1[this1.length - 1];
	var closestProj = null;
	var minDistSq = 1e10;
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p2 = _g1[_g];
		++_g;
		var p11 = p1;
		var p21 = p2;
		var _this_x = p11.x;
		var _this_y = p11.y;
		var _this_dx = p21.x - _this_x;
		var _this_dy = p21.y - _this_y;
		var _this_lenSq = _this_dx * _this_dx + _this_dy * _this_dy;
		var _this_invLenSq = 1 / _this_lenSq;
		var px = pt.x - _this_x;
		var py = pt.y - _this_y;
		var t = px * _this_dx + py * _this_dy;
		var proj;
		if(t < 0) {
			var x = _this_x;
			var y = _this_y;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			proj = new h2d_col_PointImpl(x,y);
		} else if(t > _this_lenSq) {
			var x1 = _this_x + _this_dx;
			var y1 = _this_y + _this_dy;
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			proj = new h2d_col_PointImpl(x1,y1);
		} else {
			var tl2 = t * _this_invLenSq;
			var x2 = _this_x + tl2 * _this_dx;
			var y2 = _this_y + tl2 * _this_dy;
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			proj = new h2d_col_PointImpl(x2,y2);
		}
		var dx = proj.x - pt.x;
		var dy = proj.y - pt.y;
		var distSq = dx * dx + dy * dy;
		if(distSq < minDistSq) {
			closestProj = proj;
			minDistSq = distSq;
		}
		p1 = p2;
	}
	return closestProj;
};
h2d_col_Polygon.distance = function(this1,pt,outside) {
	return Math.sqrt(h2d_col_Polygon.distanceSq(this1,pt,outside));
};
h2d_col_Polygon.distanceSq = function(this1,pt,outside) {
	var p1 = this1[this1.length - 1];
	var minDistSq = 1e10;
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p2 = _g1[_g];
		++_g;
		var p11 = p1;
		var p21 = p2;
		var s_x = p11.x;
		var s_y = p11.y;
		var s_dx = p21.x - s_x;
		var s_dy = p21.y - s_y;
		var s_lenSq = s_dx * s_dx + s_dy * s_dy;
		var s_invLenSq = 1 / s_lenSq;
		if(outside == null || s_dx * (pt.y - s_y) - s_dy * (pt.x - s_x) < 0 == outside) {
			var px = pt.x - s_x;
			var py = pt.y - s_y;
			var t = px * s_dx + py * s_dy;
			var dist;
			if(t < 0) {
				dist = px * px + py * py;
			} else if(t > s_lenSq) {
				var kx = pt.x - (s_x + s_dx);
				var ky = pt.y - (s_y + s_dy);
				dist = kx * kx + ky * ky;
			} else {
				var tl2 = t * s_invLenSq;
				var pdx = s_x + tl2 * s_dx - pt.x;
				var pdy = s_y + tl2 * s_dy - pt.y;
				dist = pdx * pdx + pdy * pdy;
			}
			if(dist < minDistSq) {
				minDistSq = dist;
			}
		}
		p1 = p2;
	}
	if(minDistSq == 1e10) {
		return 0.;
	} else {
		return minDistSq;
	}
};
h2d_col_Polygon.rayIntersection = function(this1,r,bestMatch,oriented) {
	if(oriented == null) {
		oriented = false;
	}
	var dmin = -1.;
	var p0 = this1[this1.length - 1];
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if((r.lx * (p0.y - r.py) - r.ly * (p0.x - r.px)) * (r.lx * (p.y - r.py) - r.ly * (p.x - r.px)) > 0) {
			p0 = p;
			continue;
		}
		var u = (r.lx * (p0.y - r.py) - r.ly * (p0.x - r.px)) / (r.ly * (p.x - p0.x) - r.lx * (p.y - p0.y));
		var x = p0.x + u * (p.x - p0.x);
		var y = p0.y + u * (p.y - p0.y);
		var x1 = x - r.px;
		var y1 = y - r.py;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		var v_x = x2;
		var v_y = y2;
		var tmp;
		if(!(!oriented)) {
			var x3 = r.lx;
			var y3 = r.ly;
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var x4 = x3;
			var y4 = y3;
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var _this_x = x4;
			var _this_y = y4;
			tmp = _this_x * v_x + _this_y * v_y > 0;
		} else {
			tmp = true;
		}
		if(tmp) {
			var dx = v_x;
			var dy = v_y;
			var d = dx * dx + dy * dy;
			if(d < dmin || dmin < 0) {
				if(!bestMatch) {
					return Math.sqrt(d);
				}
				dmin = d;
			}
		}
		p0 = p;
	}
	if(dmin < 0) {
		return dmin;
	} else {
		return Math.sqrt(dmin);
	}
};
h2d_col_Polygon.orientation = function(this1,p,q,r) {
	var v = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x);
	if(v == 0) {
		return 0;
	}
	if(v > 0) {
		return 1;
	} else {
		return -1;
	}
};
h2d_col_Polygon.onSegment = function(this1,p,q,r) {
	var a = p.x;
	var b = q.x;
	if(r.x > (a < b ? b : a)) {
		return false;
	}
	var a = p.x;
	var b = q.x;
	if(r.x < (a > b ? b : a)) {
		return false;
	}
	var a = p.y;
	var b = q.y;
	if(r.y > (a < b ? b : a)) {
		return false;
	}
	var a = p.y;
	var b = q.y;
	if(r.y < (a > b ? b : a)) {
		return false;
	}
	return true;
};
h2d_col_Polygon.intersect = function(this1,p1,q1,p2,q2) {
	var v = (q1.x - p1.x) * (p2.y - p1.y) - (q1.y - p1.y) * (p2.x - p1.x);
	var s1 = v == 0 ? 0 : v > 0 ? 1 : -1;
	var v = (q1.x - p1.x) * (q2.y - p1.y) - (q1.y - p1.y) * (q2.x - p1.x);
	var s2 = v == 0 ? 0 : v > 0 ? 1 : -1;
	var v = (q2.x - p2.x) * (p1.y - p2.y) - (q2.y - p2.y) * (p1.x - p2.x);
	var s3 = v == 0 ? 0 : v > 0 ? 1 : -1;
	var v = (q2.x - p2.x) * (q1.y - p2.y) - (q2.y - p2.y) * (q1.x - p2.x);
	var s4 = v == 0 ? 0 : v > 0 ? 1 : -1;
	if(s1 != s2 && s3 != s4) {
		return true;
	}
	var tmp;
	var tmp1;
	var tmp2;
	var tmp3;
	if(s1 == 0) {
		var a = p1.x;
		var b = q1.x;
		if(p2.x > (a < b ? b : a)) {
			tmp3 = false;
		} else {
			var a = p1.x;
			var b = q1.x;
			if(p2.x < (a > b ? b : a)) {
				tmp3 = false;
			} else {
				var a = p1.y;
				var b = q1.y;
				if(p2.y > (a < b ? b : a)) {
					tmp3 = false;
				} else {
					var a = p1.y;
					var b = q1.y;
					tmp3 = p2.y < (a > b ? b : a) ? false : true;
				}
			}
		}
	} else {
		tmp3 = false;
	}
	if(!tmp3) {
		if(s2 == 0) {
			var a = p1.x;
			var b = q1.x;
			if(q2.x > (a < b ? b : a)) {
				tmp2 = false;
			} else {
				var a = p1.x;
				var b = q1.x;
				if(q2.x < (a > b ? b : a)) {
					tmp2 = false;
				} else {
					var a = p1.y;
					var b = q1.y;
					if(q2.y > (a < b ? b : a)) {
						tmp2 = false;
					} else {
						var a = p1.y;
						var b = q1.y;
						tmp2 = q2.y < (a > b ? b : a) ? false : true;
					}
				}
			}
		} else {
			tmp2 = false;
		}
	} else {
		tmp2 = true;
	}
	if(!tmp2) {
		if(s3 == 0) {
			var a = p2.x;
			var b = q2.x;
			if(p1.x > (a < b ? b : a)) {
				tmp1 = false;
			} else {
				var a = p2.x;
				var b = q2.x;
				if(p1.x < (a > b ? b : a)) {
					tmp1 = false;
				} else {
					var a = p2.y;
					var b = q2.y;
					if(p1.y > (a < b ? b : a)) {
						tmp1 = false;
					} else {
						var a = p2.y;
						var b = q2.y;
						tmp1 = p1.y < (a > b ? b : a) ? false : true;
					}
				}
			}
		} else {
			tmp1 = false;
		}
	} else {
		tmp1 = true;
	}
	if(!tmp1) {
		if(s4 == 0) {
			var a = p2.x;
			var b = q2.x;
			if(q1.x > (a < b ? b : a)) {
				tmp = false;
			} else {
				var a = p2.x;
				var b = q2.x;
				if(q1.x < (a > b ? b : a)) {
					tmp = false;
				} else {
					var a = p2.y;
					var b = q2.y;
					if(q1.y > (a < b ? b : a)) {
						tmp = false;
					} else {
						var a = p2.y;
						var b = q2.y;
						tmp = q1.y < (a > b ? b : a) ? false : true;
					}
				}
			}
		} else {
			tmp = false;
		}
	} else {
		tmp = true;
	}
	if(tmp) {
		return true;
	}
	return false;
};
h2d_col_Polygon.selfIntersecting = function(this1) {
	if(this1.length < 4) {
		return false;
	}
	var _g = 0;
	var _g1 = this1.length - 2;
	while(_g < _g1) {
		var i = _g++;
		var p1 = this1[i];
		var q1 = this1[i + 1];
		var _g2 = i + 2;
		var _g3 = this1.length;
		while(_g2 < _g3) {
			var j = _g2++;
			var p2 = this1[j];
			var q2 = this1[(j + 1) % this1.length];
			if(q2 != p1 && h2d_col_Polygon.intersect(this1,p1,q1,p2,q2)) {
				return true;
			}
		}
	}
	return false;
};
h2d_col_Polygon.optimize = function(this1,epsilon) {
	var out = [];
	h2d_col_Polygon.optimizeRec(this1,0,this1.length - 1,out,epsilon);
	return out;
};
h2d_col_Polygon.optimizeRec = function(points,start,end,out,epsilon) {
	var dmax = 0.;
	var pfirst = points[start];
	var plast = points[end];
	var index = 0;
	var _g = start + 1;
	var _g1 = end;
	while(_g < _g1) {
		var i = _g++;
		var p0 = points[i];
		var A = p0.x - pfirst.x;
		var B = p0.y - pfirst.y;
		var C = plast.x - pfirst.x;
		var D = plast.y - pfirst.y;
		var dot = A * C + B * D;
		var dist = C * C + D * D;
		var param = -1.;
		if(dist != 0) {
			param = dot / dist;
		}
		var xx;
		var yy;
		if(param < 0) {
			xx = pfirst.x;
			yy = pfirst.y;
		} else if(param > 1) {
			xx = plast.x;
			yy = plast.y;
		} else {
			xx = pfirst.x + param * C;
			yy = pfirst.y + param * D;
		}
		var dx = p0.x - xx;
		var dy = p0.y - yy;
		var d = dx * dx + dy * dy;
		if(d > dmax) {
			index = i;
			dmax = d;
		}
	}
	if(dmax >= epsilon * epsilon) {
		h2d_col_Polygon.optimizeRec(points,start,index,out,epsilon);
		out.pop();
		h2d_col_Polygon.optimizeRec(points,index,end,out,epsilon);
	} else {
		out.push(points[start]);
		out.push(points[end]);
	}
};
h2d_col_Polygon.makeCircle = function(x,y,radius,npoints) {
	if(npoints == null) {
		npoints = 0;
	}
	if(npoints == 0) {
		var f = radius * 3.14 * 2 / 4;
		npoints = Math.ceil(f < 0 ? -f : f);
	}
	if(npoints < 3) {
		npoints = 3;
	}
	var angle = 6.28318530717958623 / npoints;
	var points = [];
	var _g = 0;
	var _g1 = npoints;
	while(_g < _g1) {
		var i = _g++;
		var a = i * angle;
		var x1 = Math.cos(a) * radius + x;
		var y1 = Math.sin(a) * radius + y;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		points.push(new h2d_col_PointImpl(x1,y1));
	}
	return points == null ? [] : points;
};
var h2d_col_PolygonCollider = function(polygons,isConvex) {
	if(isConvex == null) {
		isConvex = false;
	}
	this.polygons = polygons;
	this.isConvex = isConvex;
};
$hxClasses["h2d.col.PolygonCollider"] = h2d_col_PolygonCollider;
h2d_col_PolygonCollider.__name__ = "h2d.col.PolygonCollider";
h2d_col_PolygonCollider.__super__ = h2d_col_Collider;
h2d_col_PolygonCollider.prototype = $extend(h2d_col_Collider.prototype,{
	contains: function(p) {
		if(this.polygons == null) {
			return false;
		}
		return h2d_col_Polygons.contains(this.polygons,p,this.isConvex);
	}
	,collideCircle: function(c) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,collideBounds: function(b) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,__class__: h2d_col_PolygonCollider
});
var h2d_col_Polygons = {};
h2d_col_Polygons.get_length = function(this1) {
	return this1.length;
};
h2d_col_Polygons.get_polygons = function(this1) {
	return this1;
};
h2d_col_Polygons._new = function(polygons) {
	return polygons == null ? [] : polygons;
};
h2d_col_Polygons.iterator = function(this1) {
	return new hxd_impl_ArrayIterator_$h2d_$col_$Polygon(this1);
};
h2d_col_Polygons.toIPolygons = function(this1,scale) {
	if(scale == null) {
		scale = 1.;
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = this1;
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		_g.push(h2d_col_Polygon.toIPolygon(p,scale));
	}
	return _g;
};
h2d_col_Polygons.getBounds = function(this1,b) {
	if(b == null) {
		b = new h2d_col_Bounds();
	}
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		h2d_col_Polygon.getBounds(p,b);
	}
	return b;
};
h2d_col_Polygons.getCollider = function(this1,isConvex) {
	if(isConvex == null) {
		isConvex = false;
	}
	return new h2d_col_PolygonCollider(this1,isConvex);
};
h2d_col_Polygons.contains = function(this1,p,isConvex) {
	if(isConvex == null) {
		isConvex = false;
	}
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var pl = _g1[_g];
		++_g;
		if(h2d_col_Polygon.contains(pl,p,isConvex)) {
			return true;
		}
	}
	return false;
};
h2d_col_Polygons.optimize = function(this1,epsilon) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1;
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		_g.push(h2d_col_Polygon.optimize(p,epsilon));
	}
	return _g;
};
var h2d_col_Ray = function() {
};
$hxClasses["h2d.col.Ray"] = h2d_col_Ray;
h2d_col_Ray.__name__ = "h2d.col.Ray";
h2d_col_Ray.fromPoints = function(p1,p2) {
	var r = new h2d_col_Ray();
	r.px = p1.x;
	r.py = p1.y;
	r.lx = p2.x - p1.x;
	r.ly = p2.y - p1.y;
	r.normalize();
	return r;
};
h2d_col_Ray.fromValues = function(x,y,dx,dy) {
	var r = new h2d_col_Ray();
	r.px = x;
	r.py = y;
	r.lx = dx;
	r.ly = dy;
	r.normalize();
	return r;
};
h2d_col_Ray.prototype = {
	side: function(p) {
		return this.lx * (p.y - this.py) - this.ly * (p.x - this.px);
	}
	,getPoint: function(distance) {
		var x = this.px + distance * this.lx;
		var y = this.py + distance * this.ly;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,getPos: function() {
		var x = this.px;
		var y = this.py;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,getDir: function() {
		var x = this.lx;
		var y = this.ly;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly;
		if(l == 1.) {
			return;
		}
		if(l < 1e-20) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
	}
	,__class__: h2d_col_Ray
};
var h2d_col_Segment = function(p1,p2) {
	this.x = p1.x;
	this.y = p1.y;
	this.dx = p2.x - this.x;
	this.dy = p2.y - this.y;
	this.lenSq = this.dx * this.dx + this.dy * this.dy;
	this.invLenSq = 1 / this.lenSq;
};
$hxClasses["h2d.col.Segment"] = h2d_col_Segment;
h2d_col_Segment.__name__ = "h2d.col.Segment";
h2d_col_Segment.prototype = {
	setPoints: function(p1,p2) {
		this.x = p1.x;
		this.y = p1.y;
		this.dx = p2.x - this.x;
		this.dy = p2.y - this.y;
		this.lenSq = this.dx * this.dx + this.dy * this.dy;
		this.invLenSq = 1 / this.lenSq;
	}
	,side: function(p) {
		return this.dx * (p.y - this.y) - this.dy * (p.x - this.x);
	}
	,distanceSq: function(p) {
		var px = p.x - this.x;
		var py = p.y - this.y;
		var t = px * this.dx + py * this.dy;
		if(t < 0) {
			return px * px + py * py;
		} else if(t > this.lenSq) {
			var kx = p.x - (this.x + this.dx);
			var ky = p.y - (this.y + this.dy);
			return kx * kx + ky * ky;
		} else {
			var tl2 = t * this.invLenSq;
			var pdx = this.x + tl2 * this.dx - p.x;
			var pdy = this.y + tl2 * this.dy - p.y;
			return pdx * pdx + pdy * pdy;
		}
	}
	,distance: function(p) {
		var px = p.x - this.x;
		var py = p.y - this.y;
		var t = px * this.dx + py * this.dy;
		var f;
		if(t < 0) {
			f = px * px + py * py;
		} else if(t > this.lenSq) {
			var kx = p.x - (this.x + this.dx);
			var ky = p.y - (this.y + this.dy);
			f = kx * kx + ky * ky;
		} else {
			var tl2 = t * this.invLenSq;
			var pdx = this.x + tl2 * this.dx - p.x;
			var pdy = this.y + tl2 * this.dy - p.y;
			f = pdx * pdx + pdy * pdy;
		}
		return Math.sqrt(f);
	}
	,project: function(p) {
		var px = p.x - this.x;
		var py = p.y - this.y;
		var t = px * this.dx + py * this.dy;
		if(t < 0) {
			var x = this.x;
			var y = this.y;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h2d_col_PointImpl(x,y);
		} else if(t > this.lenSq) {
			var x = this.x + this.dx;
			var y = this.y + this.dy;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h2d_col_PointImpl(x,y);
		} else {
			var tl2 = t * this.invLenSq;
			var x = this.x + tl2 * this.dx;
			var y = this.y + tl2 * this.dy;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h2d_col_PointImpl(x,y);
		}
	}
	,lineIntersection: function(r,pt) {
		var x = this.x;
		var y = this.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var x = this.x + this.dx;
		var y = this.y + this.dy;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x1 = x1;
		var p_y1 = y1;
		if((r.lx * (p_y - r.py) - r.ly * (p_x - r.px)) * (r.lx * (p_y1 - r.py) - r.ly * (p_x1 - r.px)) > 0) {
			return null;
		}
		var u = (r.lx * (this.y - r.py) - r.ly * (this.x - r.px)) / (r.ly * this.dx - r.lx * this.dy);
		if(u < 0 || u > 1) {
			return null;
		}
		if(pt == null) {
			pt = new h2d_col_PointImpl(0.,0.);
		}
		pt.x = this.x + u * this.dx;
		pt.y = this.y + u * this.dy;
		return pt;
	}
	,__class__: h2d_col_Segment
};
var h2d_col_Segments = {};
h2d_col_Segments.get_segments = function(this1) {
	return this1;
};
h2d_col_Segments.get_length = function(this1) {
	return this1.length;
};
h2d_col_Segments.iterator = function(this1) {
	return new hxd_impl_ArrayIterator_$h2d_$col_$Segment(this1);
};
h2d_col_Segments.containsPoint = function(this1,p,isConvex) {
	if(isConvex) {
		var _g = 0;
		var _g1 = this1;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.dx * (p.y - s.y) - s.dy * (p.x - s.x) < 0) {
				return false;
			}
		}
	} else {
		throw haxe_Exception.thrown("TODO");
	}
	return true;
};
h2d_col_Segments.toPolygon = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1;
	while(_g1 < _g2.length) {
		var s = _g2[_g1];
		++_g1;
		var x = s.x;
		var y = s.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_g.push(new h2d_col_PointImpl(x,y));
	}
	return _g;
};
h2d_col_Segments.project = function(this1,p) {
	var dmin = 1e20;
	var smin = null;
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var px = p.x - s.x;
		var py = p.y - s.y;
		var t = px * s.dx + py * s.dy;
		var d;
		if(t < 0) {
			d = px * px + py * py;
		} else if(t > s.lenSq) {
			var kx = p.x - (s.x + s.dx);
			var ky = p.y - (s.y + s.dy);
			d = kx * kx + ky * ky;
		} else {
			var tl2 = t * s.invLenSq;
			var pdx = s.x + tl2 * s.dx - p.x;
			var pdy = s.y + tl2 * s.dy - p.y;
			d = pdx * pdx + pdy * pdy;
		}
		if(d < dmin) {
			dmin = d;
			smin = s;
		}
	}
	var px = p.x - smin.x;
	var py = p.y - smin.y;
	var t = px * smin.dx + py * smin.dy;
	if(t < 0) {
		var x = smin.x;
		var y = smin.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	} else if(t > smin.lenSq) {
		var x = smin.x + smin.dx;
		var y = smin.y + smin.dy;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	} else {
		var tl2 = t * smin.invLenSq;
		var x = smin.x + tl2 * smin.dx;
		var y = smin.y + tl2 * smin.dy;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
};
h2d_col_Segments.distanceSq = function(this1,p) {
	var dmin = 1e20;
	var _g = 0;
	var _g1 = this1;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var px = p.x - s.x;
		var py = p.y - s.y;
		var t = px * s.dx + py * s.dy;
		var d;
		if(t < 0) {
			d = px * px + py * py;
		} else if(t > s.lenSq) {
			var kx = p.x - (s.x + s.dx);
			var ky = p.y - (s.y + s.dy);
			d = kx * kx + ky * ky;
		} else {
			var tl2 = t * s.invLenSq;
			var pdx = s.x + tl2 * s.dx - p.x;
			var pdy = s.y + tl2 * s.dy - p.y;
			d = pdx * pdx + pdy * pdy;
		}
		if(d < dmin) {
			dmin = d;
		}
	}
	return dmin;
};
h2d_col_Segments.distance = function(this1,p) {
	return Math.sqrt(h2d_col_Segments.distanceSq(this1,p));
};
var h2d_filter_Filter = function() {
	this.useScreenResolution = h2d_filter_Filter.defaultUseScreenResolution;
	this.resolutionScale = 1;
	this.enable = true;
	this.smooth = false;
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
$hxClasses["h2d.filter.Filter"] = h2d_filter_Filter;
h2d_filter_Filter.__name__ = "h2d.filter.Filter";
h2d_filter_Filter.prototype = {
	get_enable: function() {
		return this.enable;
	}
	,set_enable: function(v) {
		return this.enable = v;
	}
	,set_resolutionScale: function(v) {
		return this.resolutionScale = v;
	}
	,set_useScreenResolution: function(v) {
		return this.useScreenResolution = v;
	}
	,sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds,scale) {
		s.getBounds(s,bounds);
		bounds.xMin = bounds.xMin * scale.x - this.boundsExtend;
		bounds.xMax = bounds.xMax * scale.x + this.boundsExtend;
		bounds.yMin = bounds.yMin * scale.y - this.boundsExtend;
		bounds.yMax = bounds.yMax * scale.y + this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
};
var h2d_filter_Hide = function() {
	h2d_filter_Filter.call(this);
	this.boundsExtend = 1;
};
$hxClasses["h2d.filter.Hide"] = h2d_filter_Hide;
h2d_filter_Hide.__name__ = "h2d.filter.Hide";
h2d_filter_Hide.__super__ = h2d_filter_Filter;
h2d_filter_Hide.prototype = $extend(h2d_filter_Filter.prototype,{
	draw: function(ctx,input) {
		this.frame = ctx.frame;
		this.input = input;
		this.inputWidth = Math.ceil(input.width + input.x) - Math.floor(input.x);
		this.inputHeight = Math.ceil(input.height + input.y) - Math.floor(input.y);
		if(this.maskVisible) {
			return input;
		} else {
			return null;
		}
	}
	,__class__: h2d_filter_Hide
});
var h2d_filter_AbstractMask = function(mask) {
	this.bindCount = 0;
	h2d_filter_Filter.call(this);
	this.hide = new h2d_filter_Hide();
	this.set_mask(mask);
	this.maskMatrix = new h2d_col_Matrix();
	this.tmpMatrix = new h2d_col_Matrix();
};
$hxClasses["h2d.filter.AbstractMask"] = h2d_filter_AbstractMask;
h2d_filter_AbstractMask.__name__ = "h2d.filter.AbstractMask";
h2d_filter_AbstractMask.__super__ = h2d_filter_Filter;
h2d_filter_AbstractMask.prototype = $extend(h2d_filter_Filter.prototype,{
	set_maskVisible: function(b) {
		this.hide.maskVisible = b;
		return this.maskVisible = b;
	}
	,bind: function(s) {
		this.bindCount++;
		if(this.bindCount == 1) {
			this.set_mask(this.mask);
		}
	}
	,unbind: function(s) {
		this.bindCount--;
		if(this.bindCount == 0) {
			this.set_mask(this.mask);
		}
	}
	,set_mask: function(m) {
		if(this.mask != null) {
			if(this.mask.filter == this.hide) {
				this.mask.set_filter(null);
			}
		}
		this.mask = m;
		if(m != null && this.bindCount > 0) {
			if(m.filter != null) {
				if(((m.filter) instanceof h2d_filter_Hide)) {
					throw haxe_Exception.thrown("Same mask can't be part of several filters");
				}
				throw haxe_Exception.thrown("Can't set mask with filter " + Std.string(m.filter));
			}
			m.set_filter(this.hide);
		}
		this.hide.input = null;
		return m;
	}
	,getMaskTexture: function(ctx,tile) {
		var t = this.hide.input == null ? null : this.hide.input.innerTex;
		if(t == null) {
			return null;
		}
		this.mask.getMatrix(this.maskMatrix);
		var _this = this.maskMatrix;
		var x = this.hide.input.dx;
		var y = this.hide.input.dy;
		_this.x += _this.a * x + _this.c * y;
		_this.y += _this.b * x + _this.d * y;
		this.maskMatrix.invert();
		this.obj.getMatrix(this.tmpMatrix);
		var _this = this.tmpMatrix;
		var x = tile.dx;
		var y = tile.dy;
		_this.x += _this.a * x + _this.c * y;
		_this.y += _this.b * x + _this.d * y;
		this.maskMatrix.multiply(this.tmpMatrix,this.maskMatrix);
		var resolutionScale = ctx.getFilterScale(h2d_Object.tmpPoint);
		this.maskMatrix.x /= tile.width / resolutionScale.x;
		this.maskMatrix.y /= tile.height / resolutionScale.y;
		var _this = this.maskMatrix;
		var sx = tile.width / this.hide.inputWidth;
		var sy = tile.height / this.hide.inputHeight;
		_this.a *= sx;
		_this.c *= sx;
		_this.x *= sx;
		_this.b *= sy;
		_this.d *= sy;
		_this.y *= sy;
		t.set_filter(this.smooth ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		return t;
	}
	,sync: function(ctx,obj) {
		this.obj = obj;
		if(this.mask == null || this.hide.frame != ctx.frame) {
			var p = obj;
			while(p != null) {
				if(p == this.mask) {
					throw haxe_Exception.thrown("You can't mask with one of the object parents");
				}
				p = p.parent;
			}
			this.hide.input = null;
		}
	}
	,set_resolutionScale: function(v) {
		this.hide.set_resolutionScale(v);
		return h2d_filter_Filter.prototype.set_resolutionScale.call(this,v);
	}
	,set_useScreenResolution: function(v) {
		this.hide.set_useScreenResolution(v);
		return h2d_filter_Filter.prototype.set_useScreenResolution.call(this,v);
	}
	,__class__: h2d_filter_AbstractMask
});
var h2d_filter_Blur = function(radius,gain,quality,linear) {
	if(linear == null) {
		linear = 0.;
	}
	if(quality == null) {
		quality = 1.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	h2d_filter_Filter.call(this);
	this.pass = new h3d_pass_Blur(radius,gain,linear,quality);
};
$hxClasses["h2d.filter.Blur"] = h2d_filter_Blur;
h2d_filter_Blur.__name__ = "h2d.filter.Blur";
h2d_filter_Blur.__super__ = h2d_filter_Filter;
h2d_filter_Blur.prototype = $extend(h2d_filter_Filter.prototype,{
	get_quality: function() {
		return this.pass.quality;
	}
	,set_quality: function(v) {
		return this.pass.set_quality(v);
	}
	,get_radius: function() {
		return this.pass.radius;
	}
	,set_radius: function(v) {
		return this.pass.set_radius(v);
	}
	,get_gain: function() {
		return this.pass.gain;
	}
	,set_gain: function(v) {
		return this.pass.set_gain(v);
	}
	,get_linear: function() {
		return this.pass.linear;
	}
	,set_linear: function(v) {
		return this.pass.set_linear(v);
	}
	,sync: function(ctx,s) {
		this.boundsExtend = this.pass.radius * 2;
	}
	,draw: function(ctx,t) {
		var out = t.innerTex;
		var old = out.filter;
		out.set_filter(h3d_mat_Filter.Linear);
		this.pass.apply(ctx,out);
		out.set_filter(old);
		return t;
	}
	,__class__: h2d_filter_Blur
});
var h2d_filter_Glow = function(color,alpha,radius,gain,quality,smoothColor) {
	if(smoothColor == null) {
		smoothColor = false;
	}
	if(quality == null) {
		quality = 1.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	if(alpha == null) {
		alpha = 1.;
	}
	if(color == null) {
		color = 16777215;
	}
	h2d_filter_Blur.call(this,radius,gain,quality);
	this.color = color;
	this.alpha = alpha;
	this.smoothColor = smoothColor;
	var _this = this.pass.shader;
	_this.constModified = true;
	_this.hasFixedColor__ = true;
};
$hxClasses["h2d.filter.Glow"] = h2d_filter_Glow;
h2d_filter_Glow.__name__ = "h2d.filter.Glow";
h2d_filter_Glow.__super__ = h2d_filter_Blur;
h2d_filter_Glow.prototype = $extend(h2d_filter_Blur.prototype,{
	setParams: function() {
		var _this = this.pass.shader.fixedColor__;
		var c = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.pass.shader.fixedColor__.w = this.smoothColor ? this.alpha * 1.5 : this.alpha;
		var _this = this.pass.shader;
		_this.constModified = true;
		_this.smoothFixedColor__ = this.smoothColor;
	}
	,draw: function(ctx,t) {
		this.setParams();
		var tex = t.innerTex;
		var old = tex.filter;
		var save = ctx.textures.allocTileTarget("glowSave",t);
		h3d_pass_Copy.run(tex,save,h2d_BlendMode.None);
		tex.set_filter(h3d_mat_Filter.Linear);
		this.pass.apply(ctx,tex);
		tex.set_filter(old);
		if(this.knockout) {
			h3d_pass_Copy.run(save,tex,h2d_BlendMode.Erase);
		} else {
			h3d_pass_Copy.run(save,tex,h2d_BlendMode.Alpha);
		}
		return t;
	}
	,__class__: h2d_filter_Glow
});
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
$hxClasses["hxsl.Shader"] = hxsl_Shader;
hxsl_Shader.__name__ = "hxsl.Shader";
hxsl_Shader.prototype = {
	initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw haxe_Exception.thrown(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	,setPriority: function(v) {
		this.priority = v;
	}
	,getParamValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,getParamFloatValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,setParamIndexValue: function(index,val) {
		throw haxe_Exception.thrown("assert");
	}
	,setParamIndexFloatValue: function(index,val) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstants: function(globals) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.h[c.globalId];
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw haxe_Exception.thrown("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				var count = _g.size;
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,clone: function() {
		return this;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: hxsl_Shader
};
var h3d_shader_ScreenShader = function() {
	this.flipY__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.ScreenShader"] = h3d_shader_ScreenShader;
h3d_shader_ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	get_flipY: function() {
		return this.flipY__;
	}
	,set_flipY: function(_v) {
		return this.flipY__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		if(index == 0) {
			this.flipY__ = val;
		}
	}
	,setParamIndexFloatValue: function(index,val) {
		if(index == 0) {
			this.flipY__ = val;
		}
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ScreenShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		return s;
	}
	,__class__: h3d_shader_ScreenShader
});
var h2d_filter__$Mask_MaskShader = function() {
	this.maskMatB__ = new h3d_VectorImpl(0.,0.,0.);
	this.maskMatA__ = new h3d_VectorImpl(0.,0.,0.);
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h2d.filter._Mask.MaskShader"] = h2d_filter__$Mask_MaskShader;
h2d_filter__$Mask_MaskShader.__name__ = "h2d.filter._Mask.MaskShader";
h2d_filter__$Mask_MaskShader.__super__ = h3d_shader_ScreenShader;
h2d_filter__$Mask_MaskShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_mask: function() {
		return this.mask__;
	}
	,set_mask: function(_v) {
		return this.mask__ = _v;
	}
	,get_maskMatA: function() {
		return this.maskMatA__;
	}
	,set_maskMatA: function(_v) {
		return this.maskMatA__ = _v;
	}
	,get_maskMatB: function() {
		return this.maskMatB__;
	}
	,set_maskMatB: function(_v) {
		return this.maskMatB__ = _v;
	}
	,get_smoothAlpha: function() {
		return this.smoothAlpha__;
	}
	,set_smoothAlpha: function(_v) {
		this.constModified = true;
		return this.smoothAlpha__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.smoothAlpha__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mask__;
		case 3:
			return this.maskMatA__;
		case 4:
			return this.maskMatB__;
		case 5:
			return this.smoothAlpha__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h2d_filter__$Mask_MaskShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		s.mask__ = this.mask__;
		s.maskMatA__ = this.maskMatA__;
		s.maskMatB__ = this.maskMatB__;
		s.smoothAlpha__ = this.smoothAlpha__;
		return s;
	}
	,__class__: h2d_filter__$Mask_MaskShader
});
var h2d_filter_Mask = function(mask,maskVisible,smoothAlpha) {
	if(smoothAlpha == null) {
		smoothAlpha = false;
	}
	if(maskVisible == null) {
		maskVisible = false;
	}
	h2d_filter_AbstractMask.call(this,mask);
	this.pass = new h3d_pass_ScreenFx(new h2d_filter__$Mask_MaskShader());
	this.set_maskVisible(maskVisible);
	this.set_smoothAlpha(smoothAlpha);
};
$hxClasses["h2d.filter.Mask"] = h2d_filter_Mask;
h2d_filter_Mask.__name__ = "h2d.filter.Mask";
h2d_filter_Mask.__super__ = h2d_filter_AbstractMask;
h2d_filter_Mask.prototype = $extend(h2d_filter_AbstractMask.prototype,{
	get_smoothAlpha: function() {
		return this.pass.shader.smoothAlpha__;
	}
	,set_smoothAlpha: function(v) {
		var _this = this.pass.shader;
		_this.constModified = true;
		return _this.smoothAlpha__ = v;
	}
	,draw: function(ctx,t) {
		var mask = this.getMaskTexture(ctx,t);
		if(mask == null) {
			if(this.mask == null) {
				throw haxe_Exception.thrown("Mask filter has no mask object");
			}
			return null;
		}
		var out = ctx.textures.allocTileTarget("maskTmp",t);
		ctx.engine.pushTarget(out);
		this.pass.shader.texture__ = t.innerTex;
		this.pass.shader.mask__ = this.getMaskTexture(ctx,t);
		var _this = this.pass.shader.maskMatA__;
		var x = this.maskMatrix.a;
		var y = this.maskMatrix.c;
		var z = this.maskMatrix.x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.pass.shader.maskMatB__;
		var x = this.maskMatrix.b;
		var y = this.maskMatrix.d;
		var z = this.maskMatrix.y;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.pass.render();
		ctx.engine.popTarget();
		return h2d_Tile.fromTexture(out);
	}
	,__class__: h2d_filter_Mask
});
var h2d_impl_BatchDrawState = function() {
	this.head = this.tail = new h2d_impl__$BatchDrawState_StateEntry(null);
	this.totalCount = 0;
};
$hxClasses["h2d.impl.BatchDrawState"] = h2d_impl_BatchDrawState;
h2d_impl_BatchDrawState.__name__ = "h2d.impl.BatchDrawState";
h2d_impl_BatchDrawState.prototype = {
	setTile: function(tile) {
		if(tile != null) {
			this.setTexture(tile.innerTex);
		}
	}
	,setTexture: function(texture) {
		if(texture != null) {
			if(this.tail.texture == null) {
				this.tail.texture = texture;
			} else if(this.tail.texture != texture) {
				var cur = this.tail;
				if(cur.count == 0) {
					cur.set(texture);
				} else if(cur.next == null) {
					cur.next = this.tail = new h2d_impl__$BatchDrawState_StateEntry(texture);
				} else {
					this.tail = cur.next.set(texture);
				}
			}
		}
	}
	,add: function(count) {
		this.tail.count += count;
		this.totalCount += count;
	}
	,clear: function() {
		var state = this.head;
		do {
			state.texture = null;
			state = state.next;
		} while(state != null);
		this.tail = this.head;
		this.tail.count = 0;
		this.totalCount = 0;
	}
	,drawQuads: function(ctx,buffer,offset,length) {
		if(length == null) {
			length = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		var state = this.head;
		var last = this.tail.next;
		var engine = ctx.engine;
		var stateLen;
		if(offset == 0 && length == -1) {
			do {
				ctx.texture = state.texture;
				ctx.beforeDraw();
				stateLen = state.count >> 1;
				var start = offset;
				var max = stateLen;
				if(max == null) {
					max = -1;
				}
				if(start == null) {
					start = 0;
				}
				engine.renderBuffer(buffer,engine.mem.getQuadIndexes(buffer.vertices),2,start,max);
				offset += stateLen;
				state = state.next;
			} while(state != last);
		} else {
			if(length == -1) {
				length = (this.totalCount >> 1) - offset;
			}
			var caret = 0;
			do {
				stateLen = state.count >> 1;
				if(caret + stateLen >= offset) {
					var stateMin = offset >= caret ? offset : caret;
					var stateLen1 = length > stateLen ? stateLen : length;
					ctx.texture = state.texture;
					ctx.beforeDraw();
					var start = stateMin;
					var max = stateLen1;
					if(max == null) {
						max = -1;
					}
					if(start == null) {
						start = 0;
					}
					engine.renderBuffer(buffer,engine.mem.getQuadIndexes(buffer.vertices),2,start,max);
					length -= stateLen1;
					if(length == 0) {
						break;
					}
				}
				caret += stateLen;
				state = state.next;
			} while(state != last);
		}
	}
	,drawIndexed: function(ctx,buffer,indices,offset,length) {
		if(length == null) {
			length = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		var state = this.head;
		var last = this.tail.next;
		var engine = ctx.engine;
		var stateLen;
		if(offset == 0 && length == -1) {
			do {
				ctx.texture = state.texture;
				ctx.beforeDraw();
				stateLen = state.count / 3 | 0;
				engine.renderIndexed(buffer,indices,offset,stateLen);
				offset += stateLen;
				state = state.next;
			} while(state != last);
		} else {
			if(length == -1) {
				length = this.totalCount / 3 | 0;
			}
			var caret = 0;
			do {
				stateLen = state.count / 3 | 0;
				if(caret + stateLen >= offset) {
					var stateMin = offset >= caret ? offset : caret;
					var stateLen1 = length > stateLen ? stateLen : length;
					ctx.texture = state.texture;
					ctx.beforeDraw();
					engine.renderIndexed(buffer,indices,stateMin,stateLen1);
					length -= stateLen1;
					if(length == 0) {
						break;
					}
				}
				caret += stateLen;
				state = state.next;
			} while(state != last);
		}
	}
	,get_currentTexture: function() {
		return this.tail.texture;
	}
	,__class__: h2d_impl_BatchDrawState
};
var h2d_impl__$BatchDrawState_StateEntry = function(texture) {
	this.texture = texture;
	this.count = 0;
};
$hxClasses["h2d.impl._BatchDrawState.StateEntry"] = h2d_impl__$BatchDrawState_StateEntry;
h2d_impl__$BatchDrawState_StateEntry.__name__ = "h2d.impl._BatchDrawState.StateEntry";
h2d_impl__$BatchDrawState_StateEntry.prototype = {
	set: function(texture) {
		this.texture = texture;
		this.count = 0;
		return this;
	}
	,__class__: h2d_impl__$BatchDrawState_StateEntry
};
var h3d_BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__:"h3d.BufferFlag",__constructs__:null
	,Dynamic: {_hx_name:"Dynamic",_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_name:"NoAlloc",_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_name:"UniformBuffer",_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,ReadWriteBuffer: {_hx_name:"ReadWriteBuffer",_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,IndexBuffer: {_hx_name:"IndexBuffer",_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d_BufferFlag.__constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.ReadWriteBuffer,h3d_BufferFlag.IndexBuffer];
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.ReadWriteBuffer,h3d_BufferFlag.IndexBuffer];
var h3d_Buffer = function(vertices,format,flags) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	this.format = format;
	this.flags = 0;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	this.engine = h3d_Engine.CURRENT;
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc._hx_index) == 0) {
		this.engine.mem.allocBuffer(this);
	}
};
$hxClasses["h3d.Buffer"] = h3d_Buffer;
h3d_Buffer.__name__ = "h3d.Buffer";
h3d_Buffer.ofFloats = function(v,format,flags) {
	var nvert = v.pos / format.stride | 0;
	var b = new h3d_Buffer(nvert,format,flags);
	b.uploadFloats(v,0,nvert);
	return b;
};
h3d_Buffer.ofSubFloats = function(v,vertices,format,flags) {
	var b = new h3d_Buffer(vertices,format,flags);
	b.uploadFloats(v,0,vertices);
	return b;
};
h3d_Buffer.prototype = {
	getMemSize: function() {
		return this.vertices * this.format.strideBytes;
	}
	,isDisposed: function() {
		return this.vbuf == null;
	}
	,dispose: function() {
		if(this.vbuf != null) {
			this.engine.mem.freeBuffer(this);
			this.vbuf = null;
		}
	}
	,uploadFloats: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		if(startVertice < 0 || vertices < 0 || startVertice + vertices > this.vertices) {
			throw haxe_Exception.thrown("Invalid vertices count");
		}
		if(this.format.hasLowPrecision) {
			throw haxe_Exception.thrown("Can't upload floats on low precision buffer");
		}
		if(vertices == 0) {
			return;
		}
		this.engine.driver.uploadBufferData(this,startVertice,vertices,buf,bufPos);
	}
	,uploadBytes: function(data,dataPos,vertices) {
		if(vertices < 0 || vertices > this.vertices) {
			throw haxe_Exception.thrown("Invalid vertices count");
		}
		if(vertices == 0) {
			return;
		}
		this.engine.driver.uploadBufferBytes(this,0,vertices,data,dataPos);
	}
	,readBytes: function(bytes,bytesPosition,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		if(startVertice < 0 || vertices < 0 || startVertice + vertices > this.vertices) {
			throw haxe_Exception.thrown("Invalid vertices count");
		}
		this.engine.driver.readBufferBytes(this,startVertice,vertices,bytes,bytesPosition);
	}
	,__class__: h3d_Buffer
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	var x = 2;
	var y = 3;
	var z = 4;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.pos = new h3d_VectorImpl(x,y,z);
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.up = new h3d_VectorImpl(x,y,z);
	var x = 0;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.target = new h3d_VectorImpl(x,y,z);
	this.m = new h3d_MatrixImpl();
	this.mcam = new h3d_MatrixImpl();
	this.mproj = new h3d_MatrixImpl();
	this.frustum = new h3d_col_Frustum();
	this.update();
};
$hxClasses["h3d.Camera"] = h3d_Camera;
h3d_Camera.__name__ = "h3d.Camera";
h3d_Camera.prototype = {
	setFovX: function(fovX,withRatio) {
		var degToRad = Math.PI / 180;
		this.fovY = 2 * Math.atan(Math.tan(fovX * 0.5 * degToRad) / withRatio) / degToRad;
	}
	,getFovX: function() {
		var degToRad = Math.PI / 180;
		var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
		var fovX = halfFovX * 2 / degToRad;
		return fovX;
	}
	,clone: function() {
		var c = new h3d_Camera(this.fovY,this.zoom,this.screenRatio,this.zNear,this.zFar,this.rightHanded);
		var _this = this.pos;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		c.pos = new h3d_VectorImpl(x,y,z);
		var _this = this.up;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		c.up = new h3d_VectorImpl(x,y,z);
		var _this = this.target;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		c.target = new h3d_VectorImpl(x,y,z);
		c.update();
		return c;
	}
	,getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_MatrixImpl();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,getInverseProj: function() {
		if(this.mprojInv == null) {
			this.mprojInv = new h3d_MatrixImpl();
			this.mprojInv._44 = 0;
		}
		if(this.mprojInv._44 == 0) {
			this.mprojInv.initInverse(this.mproj);
		}
		return this.mprojInv;
	}
	,getInverseView: function() {
		if(this.mcamInv == null) {
			this.mcamInv = new h3d_MatrixImpl();
			this.mcamInv._44 = 0;
		}
		if(this.mcamInv._44 == 0) {
			this.mcamInv.initInverse(this.mcam);
		}
		return this.mcamInv;
	}
	,setCubeMap: function(face,position) {
		var dx = 0;
		var dy = 0;
		var dz = 0;
		switch(face) {
		case 0:
			dx = 1;
			var _this = this.up;
			var x = 0;
			var y = 1;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			break;
		case 1:
			dx = -1;
			var _this = this.up;
			var x = 0;
			var y = 1;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			break;
		case 2:
			dy = 1;
			var _this = this.up;
			var x = 0;
			var y = 0;
			var z = -1;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			break;
		case 3:
			dy = -1;
			var _this = this.up;
			var x = 0;
			var y = 0;
			var z = 1;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			break;
		case 4:
			dz = 1;
			var _this = this.up;
			var x = 0;
			var y = 1;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			break;
		case 5:
			dz = -1;
			var _this = this.up;
			var x = 0;
			var y = 1;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			break;
		}
		if(position != null) {
			var _this = this.pos;
			_this.x = position.x;
			_this.y = position.y;
			_this.z = position.z;
		}
		var _this = this.target;
		var x = this.pos.x + dx;
		var y = this.pos.y + dy;
		var z = this.pos.z + dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
	}
	,unproject: function(screenX,screenY,camZ) {
		var x = screenX;
		var y = screenY;
		var z = camZ;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p = new h3d_VectorImpl(x,y,z);
		var m = this.getInverseViewProj();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		return p;
	}
	,rayFromScreen: function(pixelX,pixelY,sceneWidth,sceneHeight) {
		if(sceneHeight == null) {
			sceneHeight = -1;
		}
		if(sceneWidth == null) {
			sceneWidth = -1;
		}
		var engine = h3d_Engine.CURRENT;
		if(sceneWidth < 0) {
			sceneWidth = engine.width;
		}
		if(sceneHeight < 0) {
			sceneHeight = engine.height;
		}
		var rx = (pixelX / sceneWidth - 0.5) * 2;
		var ry = (0.5 - pixelY / sceneHeight) * 2;
		var p1 = this.unproject(rx,ry,0);
		var p2 = this.unproject(rx,ry,1);
		var r = new h3d_col_Ray();
		r.px = p1.x;
		r.py = p1.y;
		r.pz = p1.z;
		r.lx = p2.x - p1.x;
		r.ly = p2.y - p1.y;
		r.lz = p2.z - p1.z;
		r.normalize();
		return r;
	}
	,update: function() {
		if(this.follow != null) {
			var fpos = this.follow.pos.localToGlobal();
			var ftarget = this.follow.target.localToGlobal();
			var _this = this.pos;
			var x = fpos.x;
			var y = fpos.y;
			var z = fpos.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			var _this = this.target;
			var x = ftarget.x;
			var y = ftarget.y;
			var z = ftarget.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.mcamInv != null) {
			this.mcamInv._44 = 0;
		}
		if(this.mprojInv != null) {
			this.mprojInv._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	,getFrustumCorners: function(zMax,zMin) {
		if(zMin == null) {
			zMin = 0.;
		}
		if(zMax == null) {
			zMax = 1.;
		}
		return [this.unproject(-1,1,zMin),this.unproject(1,1,zMin),this.unproject(1,-1,zMin),this.unproject(-1,-1,zMin),this.unproject(-1,1,zMax),this.unproject(1,1,zMax),this.unproject(1,-1,zMax),this.unproject(-1,-1,zMax)];
	}
	,lostUp: function() {
		var _this = this.pos;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p2_x = x1;
		var p2_y = y1;
		var p2_z = z1;
		var k = p2_x * p2_x + p2_y * p2_y + p2_z * p2_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		p2_x *= k;
		p2_y *= k;
		p2_z *= k;
		var v = this.up;
		return Math.abs(p2_x * v.x + p2_y * v.y + p2_z * v.z) > 0.999;
	}
	,getViewDirection: function(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		var x = dx;
		var y = dy;
		var z = dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var a = new h3d_VectorImpl(x,y,z);
		var m = this.mcam;
		var px = a.x * m._11 + a.y * m._21 + a.z * m._31;
		var py = a.x * m._12 + a.y * m._22 + a.z * m._32;
		var pz = a.x * m._13 + a.y * m._23 + a.z * m._33;
		a.x = px;
		a.y = py;
		a.z = pz;
		var k = a.x * a.x + a.y * a.y + a.z * a.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		a.x *= k;
		a.y *= k;
		a.z *= k;
		return a;
	}
	,movePosAxis: function(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		var x = dx;
		var y = dy;
		var z = dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var m = this.mcam;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33;
		p_x = px;
		p_y = py;
		p_z = pz;
		this.pos.x += p_x;
		this.pos.y += p_y;
		this.pos.z += p_z;
	}
	,moveTargetAxis: function(dx,dy,dz) {
		if(dz == null) {
			dz = 0.;
		}
		var x = dx;
		var y = dy;
		var z = dz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var m = this.mcam;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33;
		p_x = px;
		p_y = py;
		p_z = pz;
		this.target.x += p_x;
		this.target.y += p_y;
		this.target.z += p_z;
	}
	,forward: function(speed) {
		if(speed == null) {
			speed = 1.;
		}
		var c = 1 - 0.025 * speed;
		var _this = this.pos;
		var x = this.target.x + (this.pos.x - this.target.x) * c;
		var y = this.target.y + (this.pos.y - this.target.y) * c;
		var z = this.target.z + (this.pos.z - this.target.z) * c;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
	}
	,backward: function(speed) {
		if(speed == null) {
			speed = 1.;
		}
		var c = 1 + 0.025 * speed;
		var _this = this.pos;
		var x = this.target.x + (this.pos.x - this.target.x) * c;
		var y = this.target.y + (this.pos.y - this.target.y) * c;
		var z = this.target.z + (this.pos.z - this.target.z) * c;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
	}
	,makeCameraMatrix: function(m) {
		var this1 = this.target;
		var v = this.pos;
		var x = this1.x - v.x;
		var y = this1.y - v.y;
		var z = this1.z - v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var az_x = x1;
		var az_y = y1;
		var az_z = z1;
		if(this.rightHanded) {
			az_x *= -1;
			az_y *= -1;
			az_z *= -1;
		}
		var k = az_x * az_x + az_y * az_y + az_z * az_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		az_x *= k;
		az_y *= k;
		az_z *= k;
		var _this = this.up;
		var x = _this.y * az_z - _this.z * az_y;
		var y = _this.z * az_x - _this.x * az_z;
		var z = _this.x * az_y - _this.y * az_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ax_x = x1;
		var ax_y = y1;
		var ax_z = z1;
		var k = ax_x * ax_x + ax_y * ax_y + ax_z * ax_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		ax_x *= k;
		ax_y *= k;
		ax_z *= k;
		if(Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z) == 0) {
			ax_x = az_y;
			ax_y = az_z;
			ax_z = az_x;
		}
		var x = az_y * ax_z - az_z * ax_y;
		var y = az_z * ax_x - az_x * ax_z;
		var z = az_x * ax_y - az_y * ax_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ay_x = x1;
		var ay_y = y1;
		var ay_z = z1;
		m._11 = ax_x;
		m._12 = ay_x;
		m._13 = az_x;
		m._14 = 0;
		m._21 = ax_y;
		m._22 = ay_y;
		m._23 = az_y;
		m._24 = 0;
		m._31 = ax_z;
		m._32 = ay_z;
		m._33 = az_z;
		m._34 = 0;
		var v = this.pos;
		m._41 = -(ax_x * v.x + ax_y * v.y + ax_z * v.z);
		var v = this.pos;
		m._42 = -(ay_x * v.x + ay_y * v.y + ay_z * v.z);
		var v = this.pos;
		m._43 = -(az_x * v.x + az_y * v.y + az_z * v.z);
		m._44 = 1;
	}
	,setTransform: function(m) {
		var _this = this.pos;
		var x = m._41;
		var y = m._42;
		var z = m._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.target;
		var this1 = this.pos;
		var v = m.getDirection();
		var x = this1.x + v.x;
		var y = this1.y + v.y;
		var z = this1.z + v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		_this.x = v_x;
		_this.y = v_y;
		_this.z = v_z;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,project: function(x,y,z,screenWidth,screenHeight,snapToPixel,p) {
		if(snapToPixel == null) {
			snapToPixel = true;
		}
		if(p == null) {
			p = new h3d_VectorImpl(0.,0.,0.);
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		p.x = x1;
		p.y = y1;
		p.z = z1;
		var m = this.m;
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.x = (p.x + 1) * 0.5 * screenWidth;
		p.y = (-p.y + 1) * 0.5 * screenHeight;
		if(snapToPixel) {
			p.x = Math.round(p.x);
			p.y = Math.round(p.y);
		}
		return p;
	}
	,distanceToDepth: function(dist) {
		var min = this.zNear;
		var max = this.zFar;
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		return ((this.zFar + this.zNear - 2.0 * this.zNear * this.zFar / (dist < min ? min : dist > max ? max : dist)) / (this.zFar - this.zNear) + 1.0) / 2.0;
	}
	,depthToDistance: function(depth) {
		var min = 0;
		var max = 1;
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		return ((depth < min ? min : depth > max ? max : depth) * this.zFar - this.zNear * this.zFar) / (this.zFar - this.zNear);
	}
	,load: function(cam) {
		var _this = this.pos;
		var v = cam.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this = this.target;
		var v = cam.target;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this = this.up;
		var v = cam.up;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		if(cam.orthoBounds != null) {
			this.orthoBounds = new h3d_col_Bounds();
			this.orthoBounds.load(cam.orthoBounds);
		} else {
			this.orthoBounds = null;
		}
		this.fovY = cam.fovY;
		this.screenRatio = cam.screenRatio;
		this.zoom = cam.zoom;
		this.zNear = cam.zNear;
		this.zFar = cam.zFar;
		if(cam.follow != null) {
			this.follow = { pos : cam.follow.pos, target : cam.follow.target};
		} else {
			this.follow = null;
		}
		this.viewX = cam.viewX;
		this.viewY = cam.viewY;
		this.update();
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,l,m,db) {
	this.t = t;
	this.next = n;
	this.layer = l;
	this.mipLevel = m;
	this.depthBinding = db;
};
$hxClasses["h3d._Engine.TargetTmp"] = h3d__$Engine_TargetTmp;
h3d__$Engine_TargetTmp.__name__ = "h3d._Engine.TargetTmp";
h3d__$Engine_TargetTmp.prototype = {
	__class__: h3d__$Engine_TargetTmp
};
var h3d_DepthBinding = $hxEnums["h3d.DepthBinding"] = { __ename__:"h3d.DepthBinding",__constructs__:null
	,ReadWrite: {_hx_name:"ReadWrite",_hx_index:0,__enum__:"h3d.DepthBinding",toString:$estr}
	,ReadOnly: {_hx_name:"ReadOnly",_hx_index:1,__enum__:"h3d.DepthBinding",toString:$estr}
	,DepthOnly: {_hx_name:"DepthOnly",_hx_index:2,__enum__:"h3d.DepthBinding",toString:$estr}
	,NotBound: {_hx_name:"NotBound",_hx_index:3,__enum__:"h3d.DepthBinding",toString:$estr}
};
h3d_DepthBinding.__constructs__ = [h3d_DepthBinding.ReadWrite,h3d_DepthBinding.ReadOnly,h3d_DepthBinding.DepthOnly,h3d_DepthBinding.NotBound];
h3d_DepthBinding.__empty_constructs__ = [h3d_DepthBinding.ReadWrite,h3d_DepthBinding.ReadOnly,h3d_DepthBinding.DepthOnly,h3d_DepthBinding.NotBound];
var h3d_Engine = function() {
	this.resCache = new haxe_ds_ObjectMap();
	this.ready = false;
	this.inRender = false;
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.backgroundColor = -16777216;
	this.hardware = !h3d_Engine.SOFTWARE_DRIVER;
	this.antiAlias = h3d_Engine.ANTIALIASING;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.window = hxd_Window.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = HxOverrides.now() / 1000;
	this.window.addResizeEvent($bind(this,this.onWindowResize));
	this.driver = js_Browser.get_supported() ? new h3d_impl_GlDriver(this.antiAlias) : new h3d_impl_NullDriver();
	h3d_Engine.CURRENT = this;
};
$hxClasses["h3d.Engine"] = h3d_Engine;
h3d_Engine.__name__ = "h3d.Engine";
h3d_Engine.getCurrent = function() {
	return h3d_Engine.CURRENT;
};
h3d_Engine.prototype = {
	setDriver: function(d) {
		this.driver = d;
		if(this.mem != null) {
			this.mem.driver = d;
		}
	}
	,setCurrent: function() {
		h3d_Engine.CURRENT = this;
	}
	,init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,driverName: function(details) {
		if(details == null) {
			details = false;
		}
		return this.driver.getDriverName(details);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.vbuf == null) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderTriBuffer: function(b,start,max) {
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		this.renderBuffer(b,this.mem.getTriIndexes(b.vertices),3,start,max);
	}
	,renderQuadBuffer: function(b,start,max) {
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		this.renderBuffer(b,this.mem.getQuadIndexes(b.vertices),2,start,max);
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.vbuf == null) {
			return;
		}
		var ntri = b.vertices / vertPerTri | 0;
		if(drawTri < 0) {
			drawTri = ntri - startTri;
		}
		if(startTri < 0 || drawTri < 0 || startTri + drawTri > ntri) {
			throw haxe_Exception.thrown("Invalid vertices count");
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.vbuf == null) {
			return;
		}
		var maxTri = indexes.vertices / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderMultiBuffers: function(format,buffers,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		var maxTri = indexes.vertices / 3 | 0;
		if(maxTri <= 0) {
			return;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectMultiBuffers(format,buffers);
		if(indexes.vbuf == null) {
			return;
		}
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderInstanced: function(indexes,commands) {
		if(indexes.vbuf == null) {
			return;
		}
		if(commands.commandCount > 0) {
			this.driver.drawInstanced(indexes,commands);
			this.drawTriangles += commands.triCount;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			hxd_impl_Allocator.get().onContextLost();
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
			this.nullTexture = new h3d_mat_Texture(0,0,[h3d_mat_TextureFlags.NoAlloc]);
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onWindowResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.window.get_width();
			var h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.window.set_displayMode(v ? hxd_DisplayMode.Borderless : hxd_DisplayMode.Windowed);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.inRender = true;
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd_Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,hasFeature: function(f) {
		return this.driver.hasFeature(f);
	}
	,end: function() {
		this.inRender = false;
		this.driver.end();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else if(this.targetStack.t == this.nullTexture) {
			return this.targetStack.textures[0];
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,layer,mipLevel,depthBinding);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
			c.depthBinding = depthBinding;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel || t.textures != null || this.currentDepthBinding != t.depthBinding;
		}
	}
	,pushTargets: function(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		this.pushTarget(this.nullTexture,null,null,depthBinding);
		this.targetStack.textures = textures;
		this.needFlushTarget = true;
	}
	,pushDepth: function(depthBuffer) {
		this.pushTarget(depthBuffer,null,null,h3d_DepthBinding.DepthOnly);
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw haxe_Exception.thrown("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.textures = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,flushTarget: function() {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			if(t.depthBinding == h3d_DepthBinding.DepthOnly) {
				this.driver.setDepth(t.t);
			} else if(t.textures != null) {
				this.driver.setRenderTargets(t.textures,t.depthBinding);
			} else {
				this.driver.setRenderTarget(t.t,t.layer,t.mipLevel,t.depthBinding);
			}
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
			this.currentDepthBinding = t.depthBinding;
		}
		this.needFlushTarget = false;
	}
	,clearF: function(color,depth,stencil) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color,depth,stencil);
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = HxOverrides.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,dispose: function() {
		this.driver.dispose();
		this.window.removeResizeEvent($bind(this,this.onWindowResize));
	}
	,get_fps: function() {
		return Math.ceil(this.realFps * 100) / 100;
	}
	,__class__: h3d_Engine
};
var h3d_Indexes = {};
h3d_Indexes._new = function(count,is32) {
	if(is32 == null) {
		is32 = false;
	}
	return new h3d_Buffer(count,is32 ? hxd_BufferFormat.get_INDEX32() : hxd_BufferFormat.get_INDEX16(),[h3d_BufferFlag.IndexBuffer]);
};
h3d_Indexes.uploadIndexes = function(this1,ibuf,bufPos,indices,startIndice) {
	if(startIndice == null) {
		startIndice = 0;
	}
	if(startIndice < 0 || indices < 0 || startIndice + indices > this1.vertices) {
		throw haxe_Exception.thrown("Invalid indices count");
	}
	if(this1.format.inputs[0].precision != 1) {
		throw haxe_Exception.thrown("Can't upload indexes on a 32-bit buffer");
	}
	if(indices == 0) {
		return;
	}
	h3d_Engine.CURRENT.driver.uploadIndexData(this1,startIndice,indices,ibuf,bufPos);
};
h3d_Indexes.get_count = function(this1) {
	return this1.vertices;
};
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = h3d_Indexes._new(length);
	h3d_Indexes.uploadIndexes(idx,i,0,length);
	return idx;
};
var h3d_MatrixImpl = function() {
};
$hxClasses["h3d.MatrixImpl"] = h3d_MatrixImpl;
h3d_MatrixImpl.__name__ = "h3d.MatrixImpl";
h3d_MatrixImpl.prototype = {
	get_tx: function() {
		return this._41;
	}
	,get_ty: function() {
		return this._42;
	}
	,get_tz: function() {
		return this._43;
	}
	,set_tx: function(v) {
		return this._41 = v;
	}
	,set_ty: function(v) {
		return this._42 = v;
	}
	,set_tz: function(v) {
		return this._43 = v;
	}
	,equal: function(other) {
		if(this._11 == other._11 && this._12 == other._12 && this._13 == other._13 && this._14 == other._14 && this._21 == other._21 && this._22 == other._22 && this._23 == other._23 && this._24 == other._24 && this._31 == other._31 && this._32 == other._32 && this._33 == other._33 && this._34 == other._34 && this._41 == other._41 && this._42 == other._42 && this._43 == other._43) {
			return this._44 == other._44;
		} else {
			return false;
		}
	}
	,zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,isIdentity: function() {
		if(this._41 != 0 || this._42 != 0 || this._43 != 0) {
			return false;
		}
		if(this._11 != 1 || this._22 != 1 || this._33 != 1) {
			return false;
		}
		if(this._12 != 0 || this._13 != 0 || this._14 != 0) {
			return false;
		}
		if(this._21 != 0 || this._23 != 0 || this._24 != 0) {
			return false;
		}
		if(this._31 != 0 || this._32 != 0 || this._34 != 0) {
			return false;
		}
		return this._44 == 1;
	}
	,isIdentityEpsilon: function(e) {
		var tmp;
		var tmp1;
		var f = this._41;
		if(!((f < 0 ? -f : f) > e)) {
			var f = this._42;
			tmp1 = (f < 0 ? -f : f) > e;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var f = this._43;
			tmp = (f < 0 ? -f : f) > e;
		} else {
			tmp = true;
		}
		if(tmp) {
			return false;
		}
		var tmp;
		var tmp1;
		var f = this._11 - 1;
		if(!((f < 0 ? -f : f) > e)) {
			var f = this._22 - 1;
			tmp1 = (f < 0 ? -f : f) > e;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var f = this._33 - 1;
			tmp = (f < 0 ? -f : f) > e;
		} else {
			tmp = true;
		}
		if(tmp) {
			return false;
		}
		var tmp;
		var tmp1;
		var f = this._12;
		if(!((f < 0 ? -f : f) > e)) {
			var f = this._13;
			tmp1 = (f < 0 ? -f : f) > e;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var f = this._14;
			tmp = (f < 0 ? -f : f) > e;
		} else {
			tmp = true;
		}
		if(tmp) {
			return false;
		}
		var tmp;
		var tmp1;
		var f = this._21;
		if(!((f < 0 ? -f : f) > e)) {
			var f = this._23;
			tmp1 = (f < 0 ? -f : f) > e;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var f = this._24;
			tmp = (f < 0 ? -f : f) > e;
		} else {
			tmp = true;
		}
		if(tmp) {
			return false;
		}
		var tmp;
		var tmp1;
		var f = this._31;
		if(!((f < 0 ? -f : f) > e)) {
			var f = this._32;
			tmp1 = (f < 0 ? -f : f) > e;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			var f = this._34;
			tmp = (f < 0 ? -f : f) > e;
		} else {
			tmp = true;
		}
		if(tmp) {
			return false;
		}
		var f = this._44 - 1;
		return (f < 0 ? -f : f) <= e;
	}
	,initRotationX: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = cos;
		this._23 = sin;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = -sin;
		this._33 = cos;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotationY: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = cos;
		this._12 = 0.0;
		this._13 = -sin;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = sin;
		this._32 = 0.0;
		this._33 = cos;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotationZ: function(a) {
		var cos = Math.cos(a);
		var sin = Math.sin(a);
		this._11 = cos;
		this._12 = sin;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = -sin;
		this._22 = cos;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initTranslation: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = x;
		this._42 = y;
		this._43 = z;
		this._44 = 1.0;
	}
	,initScale: function(x,y,z) {
		if(z == null) {
			z = 1.;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		this._11 = x;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = y;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = z;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,initRotationAxis: function(axis,angle) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		var cos1 = 1 - cos;
		var x = -axis.x;
		var y = -axis.y;
		var z = -axis.z;
		var xx = x * x;
		var yy = y * y;
		var zz = z * z;
		var len = 1. / Math.sqrt(xx + yy + zz);
		x *= len;
		y *= len;
		z *= len;
		var xcos1 = x * cos1;
		var zcos1 = z * cos1;
		this._11 = cos + x * xcos1;
		this._12 = y * xcos1 - z * sin;
		this._13 = x * zcos1 + y * sin;
		this._14 = 0.;
		this._21 = y * xcos1 + z * sin;
		this._22 = cos + y * y * cos1;
		this._23 = y * zcos1 - x * sin;
		this._24 = 0.;
		this._31 = x * zcos1 - y * sin;
		this._32 = y * zcos1 + x * sin;
		this._33 = cos + z * zcos1;
		this._34 = 0.;
		this._41 = 0.;
		this._42 = 0.;
		this._43 = 0.;
		this._44 = 1.;
	}
	,initRotation: function(x,y,z) {
		var cx = Math.cos(x);
		var sx = Math.sin(x);
		var cy = Math.cos(y);
		var sy = Math.sin(y);
		var cz = Math.cos(z);
		var sz = Math.sin(z);
		var cxsy = cx * sy;
		var sxsy = sx * sy;
		this._11 = cy * cz;
		this._12 = cy * sz;
		this._13 = -sy;
		this._14 = 0;
		this._21 = sxsy * cz - cx * sz;
		this._22 = sxsy * sz + cx * cz;
		this._23 = sx * cy;
		this._24 = 0;
		this._31 = cxsy * cz + sx * sz;
		this._32 = cxsy * sz - sx * cz;
		this._33 = cx * cy;
		this._34 = 0;
		this._41 = 0;
		this._42 = 0;
		this._43 = 0;
		this._44 = 1;
	}
	,translate: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this._11 += x * this._14;
		this._12 += y * this._14;
		this._13 += z * this._14;
		this._21 += x * this._24;
		this._22 += y * this._24;
		this._23 += z * this._24;
		this._31 += x * this._34;
		this._32 += y * this._34;
		this._33 += z * this._34;
		this._41 += x * this._44;
		this._42 += y * this._44;
		this._43 += z * this._44;
	}
	,scale: function(x,y,z) {
		if(z == null) {
			z = 1.;
		}
		if(y == null) {
			y = 1.;
		}
		if(x == null) {
			x = 1.;
		}
		this._11 *= x;
		this._21 *= x;
		this._31 *= x;
		this._41 *= x;
		this._12 *= y;
		this._22 *= y;
		this._32 *= y;
		this._42 *= y;
		this._13 *= z;
		this._23 *= z;
		this._33 *= z;
		this._43 *= z;
	}
	,rotate: function(x,y,z) {
		var tmp = h3d_MatrixImpl.tmp;
		tmp.initRotation(x,y,z);
		this.multiply(this,tmp);
	}
	,rotateAxis: function(axis,angle) {
		var tmp = h3d_MatrixImpl.tmp;
		tmp.initRotationAxis(axis,angle);
		this.multiply(this,tmp);
	}
	,getPosition: function() {
		var v = new h3d_VectorImpl(0.,0.,0.);
		var x = this._41;
		var y = this._42;
		var z = this._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v.x = x;
		v.y = y;
		v.z = z;
		return v;
	}
	,setPosition: function(v) {
		this._41 = v.x;
		this._42 = v.y;
		this._43 = v.z;
	}
	,prependTranslation: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var vx = this._11 * x + this._21 * y + this._31 * z + this._41;
		var vy = this._12 * x + this._22 * y + this._32 * z + this._42;
		var vz = this._13 * x + this._23 * y + this._33 * z + this._43;
		var vw = this._14 * x + this._24 * y + this._34 * z + this._44;
		this._41 = vx;
		this._42 = vy;
		this._43 = vz;
		this._44 = vw;
	}
	,getScale: function() {
		var v = new h3d_VectorImpl(0.,0.,0.);
		v.x = Math.sqrt(this._11 * this._11 + this._12 * this._12 + this._13 * this._13);
		v.y = Math.sqrt(this._21 * this._21 + this._22 * this._22 + this._23 * this._23);
		v.z = Math.sqrt(this._31 * this._31 + this._32 * this._32 + this._33 * this._33);
		if(this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		return v;
	}
	,prependRotation: function(x,y,z) {
		var tmp = h3d_MatrixImpl.tmp;
		tmp.initRotation(x,y,z);
		this.multiply(tmp,this);
	}
	,prependRotationAxis: function(axis,angle) {
		var tmp = h3d_MatrixImpl.tmp;
		tmp.initRotationAxis(axis,angle);
		this.multiply(tmp,this);
	}
	,prependScale: function(sx,sy,sz) {
		if(sz == null) {
			sz = 1.;
		}
		if(sy == null) {
			sy = 1.;
		}
		if(sx == null) {
			sx = 1.;
		}
		var tmp = h3d_MatrixImpl.tmp;
		tmp.initScale(sx,sy,sz);
		this.multiply(tmp,this);
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply3x4inline: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,multiplyValue: function(v) {
		this._11 *= v;
		this._12 *= v;
		this._13 *= v;
		this._14 *= v;
		this._21 *= v;
		this._22 *= v;
		this._23 *= v;
		this._24 *= v;
		this._31 *= v;
		this._32 *= v;
		this._33 *= v;
		this._34 *= v;
		this._41 *= v;
		this._42 *= v;
		this._43 *= v;
		this._44 *= v;
	}
	,invert: function() {
		this.initInverse(this);
	}
	,getInverse: function(m) {
		if(m == null) {
			m = new h3d_MatrixImpl();
		}
		m.initInverse(this);
		return m;
	}
	,getDeterminant: function() {
		return this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31);
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,initInverse3x3: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		this._11 = m22 * m33 - m32 * m23;
		this._12 = -m12 * m33 + m32 * m13;
		this._13 = m12 * m23 - m22 * m13;
		this._21 = -m21 * m33 + m31 * m23;
		this._22 = m11 * m33 - m31 * m13;
		this._23 = -m11 * m23 + m21 * m13;
		this._31 = m21 * m32 - m31 * m22;
		this._32 = -m11 * m32 + m31 * m12;
		this._33 = m11 * m22 - m21 * m12;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 = 0;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 = 0;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 = 0;
		this._41 = 0;
		this._42 = 0;
		this._43 = 0;
		this._44 = 1;
	}
	,front: function() {
		var x = this._11;
		var y = this._12;
		var z = this._13;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v = new h3d_VectorImpl(x,y,z);
		var k = v.x * v.x + v.y * v.y + v.z * v.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,right: function() {
		var x = this._21;
		var y = this._22;
		var z = this._23;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v = new h3d_VectorImpl(x,y,z);
		var k = v.x * v.x + v.y * v.y + v.z * v.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,up: function() {
		var x = this._31;
		var y = this._32;
		var z = this._33;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v = new h3d_VectorImpl(x,y,z);
		var k = v.x * v.x + v.y * v.y + v.z * v.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,transpose: function() {
		var tmp = this._12;
		this._12 = this._21;
		this._21 = tmp;
		tmp = this._13;
		this._13 = this._31;
		this._31 = tmp;
		tmp = this._14;
		this._14 = this._41;
		this._41 = tmp;
		tmp = this._23;
		this._23 = this._32;
		this._32 = tmp;
		tmp = this._24;
		this._24 = this._42;
		this._42 = tmp;
		tmp = this._34;
		this._34 = this._43;
		this._43 = tmp;
	}
	,clone: function() {
		var m = new h3d_MatrixImpl();
		m._11 = this._11;
		m._12 = this._12;
		m._13 = this._13;
		m._14 = this._14;
		m._21 = this._21;
		m._22 = this._22;
		m._23 = this._23;
		m._24 = this._24;
		m._31 = this._31;
		m._32 = this._32;
		m._33 = this._33;
		m._34 = this._34;
		m._41 = this._41;
		m._42 = this._42;
		m._43 = this._43;
		m._44 = this._44;
		return m;
	}
	,load: function(m) {
		this._11 = m._11;
		this._12 = m._12;
		this._13 = m._13;
		this._14 = m._14;
		this._21 = m._21;
		this._22 = m._22;
		this._23 = m._23;
		this._24 = m._24;
		this._31 = m._31;
		this._32 = m._32;
		this._33 = m._33;
		this._34 = m._34;
		this._41 = m._41;
		this._42 = m._42;
		this._43 = m._43;
		this._44 = m._44;
	}
	,loadValues: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,getFloats: function() {
		return [this._11,this._12,this._13,this._14,this._21,this._22,this._23,this._24,this._31,this._32,this._33,this._34,this._41,this._42,this._43,this._44];
	}
	,getDirection: function() {
		var q = new h3d_Quat();
		q.initRotateMatrix(this);
		q.normalize();
		var x = 1 - 2 * (q.y * q.y + q.z * q.z);
		var y = 2 * (q.x * q.y + q.z * q.w);
		var z = 2 * (q.x * q.z - q.y * q.w);
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,getEulerAngles: function() {
		var m = this.clone();
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var s_x = x;
		var s_y = y;
		var s_z = z;
		s_x = Math.sqrt(this._11 * this._11 + this._12 * this._12 + this._13 * this._13);
		s_y = Math.sqrt(this._21 * this._21 + this._22 * this._22 + this._23 * this._23);
		s_z = Math.sqrt(this._31 * this._31 + this._32 * this._32 + this._33 * this._33);
		if(this._11 * (this._22 * this._33 - this._23 * this._32) + this._12 * (this._23 * this._31 - this._21 * this._33) + this._13 * (this._21 * this._32 - this._22 * this._31) < 0) {
			s_x *= -1;
			s_y *= -1;
			s_z *= -1;
		}
		m.prependScale(1.0 / s_x,1.0 / s_y,1.0 / s_z);
		var cy = Math.sqrt(m._11 * m._11 + m._12 * m._12);
		if(cy > 0.01) {
			var x = Math.atan2(m._23,m._33);
			var y = Math.atan2(-m._13,cy);
			var z = Math.atan2(m._12,m._11);
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var v1 = new h3d_VectorImpl(x,y,z);
			var x = Math.atan2(-m._23,-m._33);
			var y = Math.atan2(-m._13,-cy);
			var z = Math.atan2(-m._12,-m._11);
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var v2 = new h3d_VectorImpl(x,y,z);
			if(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z < v2.x * v2.x + v2.y * v2.y + v2.z * v2.z) {
				return v1;
			} else {
				return v2;
			}
		} else {
			var x = Math.atan2(-m._32,m._22);
			var y = Math.atan2(-m._13,cy);
			var z = 0.0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h3d_VectorImpl(x,y,z);
		}
	}
	,toString: function() {
		return "MAT=[\n" + "  [ " + hxd_Math.fmt(this._11) + ", " + hxd_Math.fmt(this._12) + ", " + hxd_Math.fmt(this._13) + ", " + hxd_Math.fmt(this._14) + " ]\n" + "  [ " + hxd_Math.fmt(this._21) + ", " + hxd_Math.fmt(this._22) + ", " + hxd_Math.fmt(this._23) + ", " + hxd_Math.fmt(this._24) + " ]\n" + "  [ " + hxd_Math.fmt(this._31) + ", " + hxd_Math.fmt(this._32) + ", " + hxd_Math.fmt(this._33) + ", " + hxd_Math.fmt(this._34) + " ]\n" + "  [ " + hxd_Math.fmt(this._41) + ", " + hxd_Math.fmt(this._42) + ", " + hxd_Math.fmt(this._43) + ", " + hxd_Math.fmt(this._44) + " ]\n" + "]";
	}
	,colorHue: function(hue) {
		if(hue == 0.) {
			return;
		}
		var cosA = Math.cos(-hue);
		var sinA = Math.sin(-hue);
		var ch = (1 - cosA) / 3;
		var tmp = h3d_MatrixImpl.tmp;
		tmp._11 = cosA + ch;
		tmp._12 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._13 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._21 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._22 = cosA + ch;
		tmp._23 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._31 = ch - 0.57735026918962576450914878050196 * sinA;
		tmp._32 = ch + 0.57735026918962576450914878050196 * sinA;
		tmp._33 = cosA + ch;
		tmp._34 = 0;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	,colorSaturate: function(sat) {
		++sat;
		var ins = 1 - sat;
		var r = ins * 0.212671;
		var g = ins * 0.71516;
		var b = ins * 0.072169;
		var tmp = h3d_MatrixImpl.tmp;
		tmp._11 = r + sat;
		tmp._12 = r;
		tmp._13 = r;
		tmp._21 = g;
		tmp._22 = g + sat;
		tmp._23 = g;
		tmp._31 = b;
		tmp._32 = b;
		tmp._33 = b + sat;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	,colorContrast: function(contrast) {
		var tmp = h3d_MatrixImpl.tmp;
		var v = contrast + 1;
		tmp._11 = v;
		tmp._12 = 0;
		tmp._13 = 0;
		tmp._21 = 0;
		tmp._22 = v;
		tmp._23 = 0;
		tmp._31 = 0;
		tmp._32 = 0;
		tmp._33 = v;
		tmp._41 = -contrast * 0.5;
		tmp._42 = -contrast * 0.5;
		tmp._43 = -contrast * 0.5;
		this.multiply3x4(this,tmp);
	}
	,colorLightness: function(lightness) {
		this._41 += lightness;
		this._42 += lightness;
		this._43 += lightness;
	}
	,colorGain: function(color,alpha) {
		var tmp = h3d_MatrixImpl.tmp;
		tmp._11 = 1 - alpha;
		tmp._12 = 0;
		tmp._13 = 0;
		tmp._21 = 0;
		tmp._22 = 1 - alpha;
		tmp._23 = 0;
		tmp._31 = 0;
		tmp._32 = 0;
		tmp._33 = 1 - alpha;
		tmp._41 = (color >> 16 & 255) / 255 * alpha;
		tmp._42 = (color >> 8 & 255) / 255 * alpha;
		tmp._43 = (color & 255) / 255 * alpha;
		this.multiply3x4(this,tmp);
	}
	,colorBits: function(bits,blend) {
		var t11 = 0.;
		var t12 = 0.;
		var t13 = 0.;
		var t21 = 0.;
		var t22 = 0.;
		var t23 = 0.;
		var t31 = 0.;
		var t32 = 0.;
		var t33 = 0.;
		var c = bits;
		if((c & 1) == 1) {
			t11 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t12 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t13 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t21 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t22 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t23 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t31 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t32 = 1;
		}
		c >>= 1;
		if((c & 1) == 1) {
			t33 = 1;
		}
		c >>= 1;
		var r = t11 + t21 + t31;
		var g = t12 + t22 + t32;
		var b = t13 + t23 + t33;
		if(r > 1) {
			t11 /= r;
			t21 /= r;
			t31 /= r;
		}
		if(g > 1) {
			t12 /= g;
			t22 /= g;
			t32 /= g;
		}
		if(b > 1) {
			t13 /= b;
			t23 /= b;
			t33 /= b;
		}
		var b11 = this._11 * t11 + this._12 * t21 + this._13 * t31;
		var b12 = this._11 * t12 + this._12 * t22 + this._13 * t32;
		var b13 = this._11 * t13 + this._12 * t23 + this._13 * t33;
		var b21 = this._21 * t11 + this._22 * t21 + this._23 * t31;
		var b22 = this._21 * t12 + this._22 * t22 + this._23 * t32;
		var b23 = this._21 * t13 + this._22 * t23 + this._23 * t33;
		var b31 = this._31 * t11 + this._32 * t21 + this._33 * t31;
		var b32 = this._31 * t12 + this._32 * t22 + this._33 * t32;
		var b33 = this._31 * t13 + this._32 * t23 + this._33 * t33;
		var ik = blend;
		var k = 1 - ik;
		this._11 = this._11 * k + b11 * ik;
		this._12 = this._12 * k + b12 * ik;
		this._13 = this._13 * k + b13 * ik;
		this._21 = this._21 * k + b21 * ik;
		this._22 = this._22 * k + b22 * ik;
		this._23 = this._23 * k + b23 * ik;
		this._31 = this._31 * k + b31 * ik;
		this._32 = this._32 * k + b32 * ik;
		this._33 = this._33 * k + b33 * ik;
	}
	,colorAdd: function(c) {
		this._41 += (c >> 16 & 255) / 255;
		this._42 += (c >> 8 & 255) / 255;
		this._43 += (c & 255) / 255;
	}
	,colorSet: function(c,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.zero();
		this._44 = alpha;
		this._41 += (c >> 16 & 255) / 255;
		this._42 += (c >> 8 & 255) / 255;
		this._43 += (c & 255) / 255;
	}
	,adjustColor: function(col) {
		if(col.hue != null) {
			this.colorHue(col.hue);
		}
		if(col.saturation != null) {
			this.colorSaturate(col.saturation);
		}
		if(col.contrast != null) {
			this.colorContrast(col.contrast);
		}
		if(col.lightness != null) {
			this.colorLightness(col.lightness);
		}
		if(col.gain != null) {
			this.colorGain(col.gain.color,col.gain.alpha);
		}
	}
	,toMatrix2D: function(m) {
		if(m == null) {
			m = new h2d_col_Matrix();
		}
		m.a = this._11;
		m.b = this._12;
		m.c = this._21;
		m.d = this._22;
		m.x = this._41;
		m.y = this._42;
		return m;
	}
	,__class__: h3d_MatrixImpl
};
var h3d_Matrix = {};
h3d_Matrix._new = function() {
	return new h3d_MatrixImpl();
};
h3d_Matrix.multiplied = function(this1,m) {
	var mout = new h3d_MatrixImpl();
	mout.multiply(this1,m);
	return mout;
};
h3d_Matrix.I = function() {
	var m = new h3d_MatrixImpl();
	m.identity();
	return m;
};
h3d_Matrix.L = function(a) {
	var m = new h3d_MatrixImpl();
	m.loadValues(a);
	return m;
};
h3d_Matrix.T = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var m = new h3d_MatrixImpl();
	m.initTranslation(x,y,z);
	return m;
};
h3d_Matrix.R = function(x,y,z) {
	var m = new h3d_MatrixImpl();
	m.initRotation(x,y,z);
	return m;
};
h3d_Matrix.S = function(x,y,z) {
	if(z == null) {
		z = 1.0;
	}
	if(y == null) {
		y = 1.;
	}
	if(x == null) {
		x = 1.;
	}
	var m = new h3d_MatrixImpl();
	m.initScale(x,y,z);
	return m;
};
h3d_Matrix.lookAtX = function(dir,up,m) {
	if(up == null) {
		var x = 0;
		var y = 0;
		var z = 1;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		up = new h3d_VectorImpl(x,y,z);
	}
	if(m == null) {
		m = new h3d_MatrixImpl();
	}
	var k = dir.x * dir.x + dir.y * dir.y + dir.z * dir.z;
	if(k < 1e-20) {
		k = 0;
	} else {
		k = 1. / Math.sqrt(k);
	}
	var x = dir.x * k;
	var y = dir.y * k;
	var z = dir.z * k;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var ax_x = x1;
	var ax_y = y1;
	var ax_z = z1;
	var x = up.y * ax_z - up.z * ax_y;
	var y = up.z * ax_x - up.x * ax_z;
	var z = up.x * ax_y - up.y * ax_x;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var _this_x = x1;
	var _this_y = y1;
	var _this_z = z1;
	var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
	if(k < 1e-20) {
		k = 0;
	} else {
		k = 1. / Math.sqrt(k);
	}
	var x = _this_x * k;
	var y = _this_y * k;
	var z = _this_z * k;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var ay_x = x1;
	var ay_y = y1;
	var ay_z = z1;
	if(ay_x * ay_x + ay_y * ay_y + ay_z * ay_z < 1e-20) {
		ay_x = ax_y;
		ay_y = ax_z;
		ay_z = ax_x;
	}
	var x = ax_y * ay_z - ax_z * ay_y;
	var y = ax_z * ay_x - ax_x * ay_z;
	var z = ax_x * ay_y - ax_y * ay_x;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var az_x = x1;
	var az_y = y1;
	var az_z = z1;
	m._11 = ax_x;
	m._12 = ax_y;
	m._13 = ax_z;
	m._14 = 0;
	m._21 = ay_x;
	m._22 = ay_y;
	m._23 = ay_z;
	m._24 = 0;
	m._31 = az_x;
	m._32 = az_y;
	m._33 = az_z;
	m._34 = 0;
	m._41 = 0;
	m._42 = 0;
	m._43 = 0;
	m._44 = 1;
	return m;
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Quat"] = h3d_Quat;
h3d_Quat.__name__ = "h3d.Quat";
h3d_Quat.prototype = {
	set: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,identity: function() {
		this.x = this.y = this.z = 0;
		this.w = 1;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,load: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
	}
	,clone: function() {
		return new h3d_Quat(this.x,this.y,this.z,this.w);
	}
	,initMoveTo: function(from,to) {
		var hx = from.x + to.x;
		var hy = from.y + to.y;
		var hz = from.z + to.z;
		var h = 1. / Math.sqrt(hx * hx + hy * hy + hz * hz);
		this.x = from.y * hz - from.z * hy;
		this.y = from.z * hx - from.x * hz;
		this.z = from.x * hy - from.y * hx;
		this.w = from.x * hx + from.y * hy + from.z * hz;
		this.normalize();
	}
	,initNormal: function(dir) {
		var k = dir.x * dir.x + dir.y * dir.y + dir.z * dir.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = dir.x * k;
		var y = dir.y * k;
		var z = dir.z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var dir_x = x1;
		var dir_y = y1;
		var dir_z = z1;
		if(dir_x * dir_x + dir_y * dir_y < 1e-20) {
			var x = 1;
			var y = 0;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			this.initDirection(new h3d_VectorImpl(x,y,z));
		} else {
			var x = dir_x;
			var y = dir_y;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
			if(k < 1e-20) {
				k = 0;
			} else {
				k = 1. / Math.sqrt(k);
			}
			var x = _this_x * k;
			var y = _this_y * k;
			var z = _this_z * k;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var ay_x = x1;
			var ay_y = y1;
			var ay_z = z1;
			var x = dir_y * ay_z - dir_z * ay_y;
			var y = dir_z * ay_x - dir_x * ay_z;
			var z = dir_x * ay_y - dir_y * ay_x;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var az_x = x1;
			var az_y = y1;
			var az_z = z1;
			var x = dir_y * az_z - dir_z * az_y;
			var y = dir_z * az_x - dir_x * az_z;
			var z = dir_x * az_y - dir_y * az_x;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var this_x = x1;
			var this_y = y1;
			var this_z = z1;
			var x = this_x;
			var y = this_y;
			var z = this_z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			this.initDirection(new h3d_VectorImpl(x,y,z));
		}
	}
	,initDirection: function(dir,up) {
		var x = dir.x;
		var y = dir.y;
		var z = dir.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = _this_x * k;
		var y = _this_y * k;
		var z = _this_z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ax_x = x1;
		var ax_y = y1;
		var ax_z = z1;
		var x = -ax_y;
		var y = ax_x;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ay_x = x1;
		var ay_y = y1;
		var ay_z = z1;
		if(up != null) {
			var x = up.y * ax_z - up.z * ax_y;
			var y = up.z * ax_x - up.x * ax_z;
			var z = up.x * ax_y - up.y * ax_x;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var v_x = x1;
			var v_y = y1;
			var v_z = z1;
			ay_x = v_x;
			ay_y = v_y;
			ay_z = v_z;
		}
		var k = ay_x * ay_x + ay_y * ay_y + ay_z * ay_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		ay_x *= k;
		ay_y *= k;
		ay_z *= k;
		if(ay_x * ay_x + ay_y * ay_y + ay_z * ay_z < 1e-20) {
			ay_x = ax_y;
			ay_y = ax_z;
			ay_z = ax_x;
		}
		var x = ax_y * ay_z - ax_z * ay_y;
		var y = ax_z * ay_x - ax_x * ay_z;
		var z = ax_x * ay_y - ax_y * ay_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var az_x = x1;
		var az_y = y1;
		var az_z = z1;
		var tr = ax_x + ay_y + az_z;
		if(tr > 0) {
			var s = Math.sqrt(tr + 1.0) * 2;
			var ins = 1 / s;
			this.x = (ay_z - az_y) * ins;
			this.y = (az_x - ax_z) * ins;
			this.z = (ax_y - ay_x) * ins;
			this.w = 0.25 * s;
		} else if(ax_x > ay_y && ax_x > az_z) {
			var s = Math.sqrt(1.0 + ax_x - ay_y - az_z) * 2;
			var ins = 1 / s;
			this.x = 0.25 * s;
			this.y = (ay_x + ax_y) * ins;
			this.z = (az_x + ax_z) * ins;
			this.w = (ay_z - az_y) * ins;
		} else if(ay_y > az_z) {
			var s = Math.sqrt(1.0 + ay_y - ax_x - az_z) * 2;
			var ins = 1 / s;
			this.x = (ay_x + ax_y) * ins;
			this.y = 0.25 * s;
			this.z = (az_y + ay_z) * ins;
			this.w = (az_x - ax_z) * ins;
		} else {
			var s = Math.sqrt(1.0 + az_z - ax_x - ay_y) * 2;
			var ins = 1 / s;
			this.x = (az_x + ax_z) * ins;
			this.y = (az_y + ay_z) * ins;
			this.z = 0.25 * s;
			this.w = (ax_y - ay_x) * ins;
		}
	}
	,initRotateAxis: function(x,y,z,a) {
		var sin = Math.sin(a / 2);
		var cos = Math.cos(a / 2);
		this.x = x * sin;
		this.y = y * sin;
		this.z = z * sin;
		this.w = cos * Math.sqrt(x * x + y * y + z * z);
		this.normalize();
	}
	,initRotateMatrix: function(m) {
		var tr = m._11 + m._22 + m._33;
		if(tr > 0) {
			var s = Math.sqrt(tr + 1.0) * 2;
			var ins = 1 / s;
			this.x = (m._23 - m._32) * ins;
			this.y = (m._31 - m._13) * ins;
			this.z = (m._12 - m._21) * ins;
			this.w = 0.25 * s;
		} else if(m._11 > m._22 && m._11 > m._33) {
			var s = Math.sqrt(1.0 + m._11 - m._22 - m._33) * 2;
			var ins = 1 / s;
			this.x = 0.25 * s;
			this.y = (m._21 + m._12) * ins;
			this.z = (m._31 + m._13) * ins;
			this.w = (m._23 - m._32) * ins;
		} else if(m._22 > m._33) {
			var s = Math.sqrt(1.0 + m._22 - m._11 - m._33) * 2;
			var ins = 1 / s;
			this.x = (m._21 + m._12) * ins;
			this.y = 0.25 * s;
			this.z = (m._32 + m._23) * ins;
			this.w = (m._31 - m._13) * ins;
		} else {
			var s = Math.sqrt(1.0 + m._33 - m._11 - m._22) * 2;
			var ins = 1 / s;
			this.x = (m._31 + m._13) * ins;
			this.y = (m._32 + m._23) * ins;
			this.z = 0.25 * s;
			this.w = (m._12 - m._21) * ins;
		}
	}
	,normalize: function() {
		var len = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
		if(len < 1e-20) {
			this.x = this.y = this.z = 0;
			this.w = 1;
		} else {
			var m = 1. / Math.sqrt(len);
			this.x *= m;
			this.y *= m;
			this.z *= m;
			this.w *= m;
		}
	}
	,initRotation: function(ax,ay,az) {
		var sinX = Math.sin(ax * 0.5);
		var cosX = Math.cos(ax * 0.5);
		var sinY = Math.sin(ay * 0.5);
		var cosY = Math.cos(ay * 0.5);
		var sinZ = Math.sin(az * 0.5);
		var cosZ = Math.cos(az * 0.5);
		var cosYZ = cosY * cosZ;
		var sinYZ = sinY * sinZ;
		this.x = sinX * cosYZ - cosX * sinYZ;
		this.y = cosX * sinY * cosZ + sinX * cosY * sinZ;
		this.z = cosX * cosY * sinZ - sinX * sinY * cosZ;
		this.w = cosX * cosYZ + sinX * sinYZ;
	}
	,multiply: function(q1,q2) {
		var x2 = q1.x * q2.w + q1.w * q2.x + q1.y * q2.z - q1.z * q2.y;
		var y2 = q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x;
		var z2 = q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w;
		var w2 = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;
		this.x = x2;
		this.y = y2;
		this.z = z2;
		this.w = w2;
	}
	,toEuler: function() {
		return this.toMatrix().getEulerAngles();
	}
	,lerp: function(q1,q2,v,nearest) {
		if(nearest == null) {
			nearest = false;
		}
		var v2 = 1 - v;
		if(nearest && q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w < 0) {
			v = -v;
		}
		var x = q1.x * v2 + q2.x * v;
		var y = q1.y * v2 + q2.y * v;
		var z = q1.z * v2 + q2.z * v;
		var w = q1.w * v2 + q2.w * v;
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,slerp: function(q1,q2,v) {
		var cosHalfTheta = q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;
		if((cosHalfTheta < 0 ? -cosHalfTheta : cosHalfTheta) >= 1) {
			this.x = q1.x;
			this.y = q1.y;
			this.z = q1.z;
			this.w = q1.w;
			return;
		}
		var halfTheta = Math.acos(cosHalfTheta);
		var invSinHalfTheta = 1. / Math.sqrt(1 - cosHalfTheta * cosHalfTheta);
		if((invSinHalfTheta < 0 ? -invSinHalfTheta : invSinHalfTheta) > 1e3) {
			var v1 = 0.5;
			var nearest = true;
			if(nearest == null) {
				nearest = false;
			}
			var v2 = 1 - v1;
			if(nearest && q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w < 0) {
				v1 = -v1;
			}
			var x = q1.x * v2 + q2.x * v1;
			var y = q1.y * v2 + q2.y * v1;
			var z = q1.z * v2 + q2.z * v1;
			var w = q1.w * v2 + q2.w * v1;
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
			return;
		}
		var a = Math.sin((1 - v) * halfTheta) * invSinHalfTheta;
		var b = Math.sin(v * halfTheta) * invSinHalfTheta * (cosHalfTheta < 0 ? -1 : 1);
		this.x = q1.x * a + q2.x * b;
		this.y = q1.y * a + q2.y * b;
		this.z = q1.z * a + q2.z * b;
		this.w = q1.w * a + q2.w * b;
	}
	,conjugate: function() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
	}
	,pow: function(v) {
		var r = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		var t = r > 1e-10 ? Math.atan2(r,this.w) / r : 0;
		this.w = 0.5 * Math.log(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
		this.x *= t;
		this.y *= t;
		this.z *= t;
		this.x *= v;
		this.y *= v;
		this.z *= v;
		this.w *= v;
		var r = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		var et = Math.exp(this.w);
		var s = r > 1e-10 ? et * Math.sin(r) / r : 0;
		this.w = et * Math.cos(r);
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,negate: function() {
		this.x = -this.x;
		this.y = -this.y;
		this.z = -this.z;
		this.w = -this.w;
	}
	,dot: function(q) {
		return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
	}
	,getDirection: function() {
		var x = 1 - 2 * (this.y * this.y + this.z * this.z);
		var y = 2 * (this.x * this.y + this.z * this.w);
		var z = 2 * (this.x * this.z - this.y * this.w);
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,getUpAxis: function() {
		var x = 2 * (this.x * this.z + this.y * this.w);
		var y = 2 * (this.y * this.z - this.x * this.w);
		var z = 1 - 2 * (this.x * this.x + this.y * this.y);
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,toMatrix: function(m) {
		if(m == null) {
			m = new h3d_MatrixImpl();
		}
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "," + hxd_Math.fmt(this.w) + "}";
	}
	,__class__: h3d_Quat
};
var h3d_VectorImpl = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["h3d.VectorImpl"] = h3d_VectorImpl;
h3d_VectorImpl.__name__ = "h3d.VectorImpl";
h3d_VectorImpl.prototype = {
	distance: function(v) {
		var dx = v.x - this.x;
		var dy = v.y - this.y;
		var dz = v.z - this.z;
		return Math.sqrt(dx * dx + dy * dy + dz * dz);
	}
	,distanceSq: function(v) {
		var dx = v.x - this.x;
		var dy = v.y - this.y;
		var dz = v.z - this.z;
		return dx * dx + dy * dy + dz * dz;
	}
	,sub: function(v) {
		var x = this.x - v.x;
		var y = this.y - v.y;
		var z = this.z - v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,add: function(v) {
		var x = this.x + v.x;
		var y = this.y + v.y;
		var z = this.z + v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,scaled: function(v) {
		var x = this.x * v;
		var y = this.y * v;
		var z = this.z * v;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,equals: function(v) {
		if(this.x == v.x && this.y == v.y) {
			return this.z == v.z;
		} else {
			return false;
		}
	}
	,cross: function(v) {
		var x = this.y * v.z - this.z * v.y;
		var y = this.z * v.x - this.x * v.z;
		var z = this.x * v.y - this.y * v.x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,normalized: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = this.x * k;
		var y = this.y * k;
		var z = this.z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,packNormal: function() {
		this.x = this.x * 0.5 + 0.5;
		this.y = this.y * 0.5 + 0.5;
		this.z = this.z * 0.5 + 0.5;
	}
	,unpackNormal: function() {
		this.x = this.x * 2.0 - 1.0;
		this.y = this.y * 2.0 - 1.0;
		this.z = this.z * 2.0 - 1.0;
	}
	,normalStrength: function(strength) {
		var k = 1.0 / strength;
		this.x *= k;
		this.y *= k;
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,set: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,load: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
	}
	,scale: function(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
	}
	,lerp: function(v1,v2,k) {
		var a = v1.x;
		this.x = a + k * (v2.x - a);
		var a = v1.y;
		this.y = a + k * (v2.y - a);
		var a = v1.z;
		this.z = a + k * (v2.z - a);
	}
	,transform: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + m._43;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transformed: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + m._43;
		var x = px;
		var y = py;
		var z = pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,transform3x3: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transformed3x3: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		var x = px;
		var y = py;
		var z = pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,clone: function() {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,toVector4: function() {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_Vector4Impl(x,y,z,1.);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "}";
	}
	,reflect: function(n) {
		var k = 2 * (this.x * n.x + this.y * n.y + this.z * n.z);
		var x = this.x - k * n.x;
		var y = this.y - k * n.y;
		var z = this.z - k * n.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,project: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + m._43;
		var iw = 1 / (this.x * m._14 + this.y * m._24 + this.z * m._34 + m._44);
		this.x = px * iw;
		this.y = py * iw;
		this.z = pz * iw;
	}
	,get_r: function() {
		return this.x;
	}
	,get_g: function() {
		return this.y;
	}
	,get_b: function() {
		return this.z;
	}
	,set_r: function(v) {
		return this.x = v;
	}
	,set_g: function(v) {
		return this.y = v;
	}
	,set_b: function(v) {
		return this.z = v;
	}
	,setColor: function(c) {
		this.x = (c >> 16 & 255) / 255;
		this.y = (c >> 8 & 255) / 255;
		this.z = (c & 255) / 255;
	}
	,makeColor: function(hue,saturation,brightness) {
		if(brightness == null) {
			brightness = 0.5;
		}
		if(saturation == null) {
			saturation = 1.;
		}
		var r = hue % 6.28318530717958623;
		hue = r >= 0 ? r : r + 6.28318530717958623;
		var f = 2 * brightness - 1;
		var c = (1 - (f < 0 ? -f : f)) * saturation;
		var f = hue * 3 / 3.14159265358979323 % 2. - 1;
		var x = c * (1 - (f < 0 ? -f : f));
		var m = brightness - c / 2;
		if(hue < 1.04719755119659763) {
			this.x = c;
			this.y = x;
			this.z = 0;
		} else if(hue < 2.09439510239319526) {
			this.x = x;
			this.y = c;
			this.z = 0;
		} else if(hue < 3.14159265358979323) {
			this.x = 0;
			this.y = c;
			this.z = x;
		} else if(hue < 4.18879020478639053) {
			this.x = 0;
			this.y = x;
			this.z = c;
		} else if(hue < 5.23598775598298882) {
			this.x = x;
			this.y = 0;
			this.z = c;
		} else {
			this.x = c;
			this.y = 0;
			this.z = x;
		}
		this.x += m;
		this.y += m;
		this.z += m;
	}
	,toColor: function() {
		var f = this.x;
		var f1 = this.y;
		var f2 = this.z;
		return -16777216 | ((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 16 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 8 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0);
	}
	,toColorHSL: function() {
		var a = this.x;
		var b = this.y;
		var a1 = a < b ? b : a;
		var b = this.z;
		var max = a1 < b ? b : a1;
		var a = this.x;
		var b = this.y;
		var a1 = a > b ? b : a;
		var b = this.z;
		var min = a1 > b ? b : a1;
		var h;
		var s;
		var l = (max + min) / 2.0;
		if(max == min) {
			s = 0.0;
			h = s;
		} else {
			var d = max - min;
			s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
			if(max == this.x) {
				h = (this.y - this.z) / d + (this.y < this.z ? 6.0 : 0.0);
			} else if(max == this.y) {
				h = (this.z - this.x) / d + 2.0;
			} else {
				h = (this.x - this.y) / d + 4.0;
			}
			h *= 1.04719755119659763;
		}
		var x = h;
		var y = s;
		var z = l;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,__class__: h3d_VectorImpl
};
var h3d_Vector = {};
h3d_Vector._new = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_VectorImpl(x,y,z);
};
h3d_Vector.sub = function(this1,v) {
	var x = this1.x - v.x;
	var y = this1.y - v.y;
	var z = this1.z - v.z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_VectorImpl(x,y,z);
};
h3d_Vector.add = function(this1,v) {
	var x = this1.x + v.x;
	var y = this1.y + v.y;
	var z = this1.z + v.z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_VectorImpl(x,y,z);
};
h3d_Vector.transform = function(this1,m) {
	var px = this1.x * m._11 + this1.y * m._21 + this1.z * m._31 + m._41;
	var py = this1.x * m._12 + this1.y * m._22 + this1.z * m._32 + m._42;
	var pz = this1.x * m._13 + this1.y * m._23 + this1.z * m._33 + m._43;
	this1.x = px;
	this1.y = py;
	this1.z = pz;
};
h3d_Vector.transformed = function(this1,m) {
	var px = this1.x * m._11 + this1.y * m._21 + this1.z * m._31 + m._41;
	var py = this1.x * m._12 + this1.y * m._22 + this1.z * m._32 + m._42;
	var pz = this1.x * m._13 + this1.y * m._23 + this1.z * m._33 + m._43;
	var x = px;
	var y = py;
	var z = pz;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_VectorImpl(x,y,z);
};
h3d_Vector.toPoint = function(this1) {
	var x = this1.x;
	var y = this1.y;
	var z = this1.z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_VectorImpl(x,y,z);
};
h3d_Vector.toVector = function(this1) {
	var x = this1.x;
	var y = this1.y;
	var z = this1.z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_VectorImpl(x,y,z);
};
h3d_Vector.scale = function(this1,v) {
	this1.x *= v;
	this1.y *= v;
	this1.z *= v;
};
h3d_Vector.scaled = function(this1,v) {
	var x = this1.x * v;
	var y = this1.y * v;
	var z = this1.z * v;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_VectorImpl(x,y,z);
};
h3d_Vector.scaledInv = function(f,v) {
	var x = v.x * f;
	var y = v.y * f;
	var z = v.z * f;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_VectorImpl(x,y,z);
};
h3d_Vector.fromColor = function(c,scale) {
	if(scale == null) {
		scale = 1.0;
	}
	var s = scale / 255;
	var x = (c >> 16 & 255) * s;
	var y = (c >> 8 & 255) * s;
	var z = (c & 255) * s;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_VectorImpl(x,y,z);
};
h3d_Vector.fromArray = function(a) {
	var r = new h3d_VectorImpl(0.,0.,0.);
	if(a.length > 0) {
		r.x = a[0];
	}
	if(a.length > 1) {
		r.y = a[1];
	}
	if(a.length > 2) {
		r.z = a[2];
	}
	return r;
};
var h3d_Vector4Impl = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Vector4Impl"] = h3d_Vector4Impl;
h3d_Vector4Impl.__name__ = "h3d.Vector4Impl";
h3d_Vector4Impl.prototype = {
	dot4: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
	}
	,dot3: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,scale3: function(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
	}
	,sub: function(v) {
		var x = this.x - v.x;
		var y = this.y - v.y;
		var z = this.z - v.z;
		var w = this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_Vector4Impl(x,y,z,w);
	}
	,add: function(v) {
		var x = this.x + v.x;
		var y = this.y + v.y;
		var z = this.z + v.z;
		var w = this.w + v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_Vector4Impl(x,y,z,w);
	}
	,equals: function(v) {
		if(this.x == v.x && this.y == v.y && this.z == v.z) {
			return this.w == v.w;
		} else {
			return false;
		}
	}
	,cross: function(v) {
		var x = this.y * v.z - this.z * v.y;
		var y = this.z * v.x - this.x * v.z;
		var z = this.x * v.y - this.y * v.x;
		var w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_Vector4Impl(x,y,z,w);
	}
	,set: function(x,y,z,w) {
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
	}
	,load: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = v.w;
	}
	,lerp: function(v1,v2,k) {
		var a = v1.x;
		this.x = a + k * (v2.x - a);
		var a = v1.y;
		this.y = a + k * (v2.y - a);
		var a = v1.z;
		this.z = a + k * (v2.z - a);
		var a = v1.w;
		this.w = a + k * (v2.w - a);
	}
	,transform: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		var pw = this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44;
		this.x = px;
		this.y = py;
		this.z = pz;
		this.w = pw;
	}
	,transformed: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		var pw = this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44;
		var x = px;
		var y = py;
		var z = pz;
		var w = pw;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_Vector4Impl(x,y,z,w);
	}
	,transform3x4: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transformed3x4: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		var x = px;
		var y = py;
		var z = pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_Vector4Impl(x,y,z,1.);
	}
	,transform3x3: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		this.x = px;
		this.y = py;
		this.z = pz;
	}
	,transformed3x3: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33;
		var x = px;
		var y = py;
		var z = pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_Vector4Impl(x,y,z,1.);
	}
	,clone: function() {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var w = this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_Vector4Impl(x,y,z,w);
	}
	,toVector: function() {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "," + hxd_Math.fmt(this.w) + "}";
	}
	,project: function(m) {
		var px = this.x * m._11 + this.y * m._21 + this.z * m._31 + this.w * m._41;
		var py = this.x * m._12 + this.y * m._22 + this.z * m._32 + this.w * m._42;
		var pz = this.x * m._13 + this.y * m._23 + this.z * m._33 + this.w * m._43;
		var iw = 1 / (this.x * m._14 + this.y * m._24 + this.z * m._34 + this.w * m._44);
		this.x = px * iw;
		this.y = py * iw;
		this.z = pz * iw;
		this.w = 1;
	}
	,get_r: function() {
		return this.x;
	}
	,get_g: function() {
		return this.y;
	}
	,get_b: function() {
		return this.z;
	}
	,get_a: function() {
		return this.w;
	}
	,set_r: function(v) {
		return this.x = v;
	}
	,set_g: function(v) {
		return this.y = v;
	}
	,set_b: function(v) {
		return this.z = v;
	}
	,set_a: function(v) {
		return this.w = v;
	}
	,setColor: function(c) {
		this.x = (c >> 16 & 255) / 255;
		this.y = (c >> 8 & 255) / 255;
		this.z = (c & 255) / 255;
		this.w = (c >>> 24) / 255;
	}
	,makeColor: function(hue,saturation,brightness) {
		if(brightness == null) {
			brightness = 0.5;
		}
		if(saturation == null) {
			saturation = 1.;
		}
		var r = hue % 6.28318530717958623;
		hue = r >= 0 ? r : r + 6.28318530717958623;
		var f = 2 * brightness - 1;
		var c = (1 - (f < 0 ? -f : f)) * saturation;
		var f = hue * 3 / 3.14159265358979323 % 2. - 1;
		var x = c * (1 - (f < 0 ? -f : f));
		var m = brightness - c / 2;
		if(hue < 1.04719755119659763) {
			this.x = c;
			this.y = x;
			this.z = 0;
		} else if(hue < 2.09439510239319526) {
			this.x = x;
			this.y = c;
			this.z = 0;
		} else if(hue < 3.14159265358979323) {
			this.x = 0;
			this.y = c;
			this.z = x;
		} else if(hue < 4.18879020478639053) {
			this.x = 0;
			this.y = x;
			this.z = c;
		} else if(hue < 5.23598775598298882) {
			this.x = x;
			this.y = 0;
			this.z = c;
		} else {
			this.x = c;
			this.y = 0;
			this.z = x;
		}
		this.x += m;
		this.y += m;
		this.z += m;
		this.w = 1;
	}
	,toColor: function() {
		var f = this.w;
		var f1 = this.x;
		var f2 = this.y;
		var f3 = this.z;
		return ((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 24 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 16 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0) << 8 | ((f3 < 0. ? 0. : f3 > 1. ? 1. : f3) * 255 + 0.499 | 0);
	}
	,toColorHSL: function() {
		var a = this.x;
		var b = this.y;
		var a1 = a < b ? b : a;
		var b = this.z;
		var max = a1 < b ? b : a1;
		var a = this.x;
		var b = this.y;
		var a1 = a > b ? b : a;
		var b = this.z;
		var min = a1 > b ? b : a1;
		var h;
		var s;
		var l = (max + min) / 2.0;
		if(max == min) {
			s = 0.0;
			h = s;
		} else {
			var d = max - min;
			s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
			if(max == this.x) {
				h = (this.y - this.z) / d + (this.y < this.z ? 6.0 : 0.0);
			} else if(max == this.y) {
				h = (this.z - this.x) / d + 2.0;
			} else {
				h = (this.x - this.y) / d + 4.0;
			}
			h *= 1.04719755119659763;
		}
		var x = h;
		var y = s;
		var z = l;
		var w = this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_Vector4Impl(x,y,z,w);
	}
	,__class__: h3d_Vector4Impl
};
var h3d_Vector4 = {};
h3d_Vector4._new = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_Vector4Impl(x,y,z,w);
};
h3d_Vector4.sub = function(this1,v) {
	var x = this1.x - v.x;
	var y = this1.y - v.y;
	var z = this1.z - v.z;
	var w = this1.w - v.w;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_Vector4Impl(x,y,z,w);
};
h3d_Vector4.add = function(this1,v) {
	var x = this1.x + v.x;
	var y = this1.y + v.y;
	var z = this1.z + v.z;
	var w = this1.w + v.w;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_Vector4Impl(x,y,z,w);
};
h3d_Vector4.transform = function(this1,m) {
	var px = this1.x * m._11 + this1.y * m._21 + this1.z * m._31 + this1.w * m._41;
	var py = this1.x * m._12 + this1.y * m._22 + this1.z * m._32 + this1.w * m._42;
	var pz = this1.x * m._13 + this1.y * m._23 + this1.z * m._33 + this1.w * m._43;
	var pw = this1.x * m._14 + this1.y * m._24 + this1.z * m._34 + this1.w * m._44;
	this1.x = px;
	this1.y = py;
	this1.z = pz;
	this1.w = pw;
};
h3d_Vector4.transformed = function(this1,m) {
	var px = this1.x * m._11 + this1.y * m._21 + this1.z * m._31 + this1.w * m._41;
	var py = this1.x * m._12 + this1.y * m._22 + this1.z * m._32 + this1.w * m._42;
	var pz = this1.x * m._13 + this1.y * m._23 + this1.z * m._33 + this1.w * m._43;
	var pw = this1.x * m._14 + this1.y * m._24 + this1.z * m._34 + this1.w * m._44;
	var x = px;
	var y = py;
	var z = pz;
	var w = pw;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_Vector4Impl(x,y,z,w);
};
h3d_Vector4.fromColor = function(c,scale) {
	if(scale == null) {
		scale = 1.0;
	}
	var s = scale / 255;
	var x = (c >> 16 & 255) * s;
	var y = (c >> 8 & 255) * s;
	var z = (c & 255) * s;
	var w = (c >>> 24) * s;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	return new h3d_Vector4Impl(x,y,z,w);
};
h3d_Vector4.fromArray = function(a) {
	var r = new h3d_Vector4Impl(0.,0.,0.,1.);
	if(a.length > 0) {
		r.x = a[0];
	}
	if(a.length > 1) {
		r.y = a[1];
	}
	if(a.length > 2) {
		r.z = a[2];
	}
	if(a.length > 3) {
		r.w = a[3];
	}
	return r;
};
var h3d_anim_AnimatedObject = function(name) {
	this.objectName = name;
};
$hxClasses["h3d.anim.AnimatedObject"] = h3d_anim_AnimatedObject;
h3d_anim_AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
h3d_anim_AnimatedObject.prototype = {
	clone: function() {
		return new h3d_anim_AnimatedObject(this.objectName);
	}
	,__class__: h3d_anim_AnimatedObject
};
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
$hxClasses["h3d.anim.Animation"] = h3d_anim_Animation;
h3d_anim_Animation.__name__ = "h3d.anim.Animation";
h3d_anim_Animation.prototype = {
	getDuration: function() {
		return this.frameCount / (this.sampling * this.speed);
	}
	,frameToTime: function(f) {
		return f / (this.sampling * this.speed);
	}
	,getIFrame: function() {
		var f = this.frame | 0;
		var max = this.endFrame();
		if(f == max) {
			--f;
		}
		return f;
	}
	,unbind: function(objectName) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.objectName == objectName) {
				this.isSync = false;
				o.targetObject = null;
				o.targetSkin = null;
				return;
			}
		}
	}
	,setEvents: function(el) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.frameCount;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(null);
		}
		this.events = _g;
		var e = $getIterator(el);
		while(e.hasNext()) {
			var e1 = e.next();
			if(this.events[e1.frame] == null) {
				this.events[e1.frame] = [];
			}
			this.events[e1.frame].push(e1.data);
		}
	}
	,addEvent: function(frame,data) {
		if(this.events == null) {
			this.events = [];
		}
		if(this.events[frame] == null) {
			this.events[frame] = [data];
		} else {
			this.events[frame].push(data);
		}
	}
	,getEvents: function() {
		return this.events;
	}
	,getObjects: function() {
		return this.objects;
	}
	,getEventTime: function(id) {
		if(this.events == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.events.length;
		while(_g < _g1) {
			var i = _g++;
			var ev = this.events[i];
			if(ev != null && ev.indexOf(id) >= 0) {
				return i / (this.sampling * this.speed);
			}
		}
		return null;
	}
	,setFrame: function(f) {
		this.frame = f;
		this.lastEvent = -1;
		while(this.frame < 0) this.frame += this.frameCount;
		while(this.frame > this.frameCount) this.frame -= this.frameCount;
	}
	,clone: function(a) {
		if(a == null) {
			a = new h3d_anim_Animation(this.name,this.frameCount,this.sampling);
		}
		a.objects = this.objects;
		a.speed = this.speed;
		a.loop = this.loop;
		a.pause = this.pause;
		a.events = this.events;
		a.resourcePath = this.resourcePath;
		return a;
	}
	,initInstance: function() {
		this.isInstance = true;
	}
	,createInstance: function(base) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.objects;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(a.clone());
		}
		var objects = _g;
		var a = this.clone();
		a.objects = objects;
		a.bind(base);
		a.initInstance();
		return a;
	}
	,bind: function(base) {
		var currentSkin = null;
		var _g = 0;
		var _g1 = this.objects.slice();
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(currentSkin != null) {
				var j = currentSkin.skinData.namedJoints.h[a.objectName];
				if(j != null) {
					a.targetSkin = currentSkin;
					a.targetJoint = j.index;
					continue;
				}
			}
			var obj = base.getObjectByName(a.objectName);
			if(obj == null) {
				HxOverrides.remove(this.objects,a);
				continue;
			}
			var joint = ((obj) instanceof h3d_scene_Joint) ? obj : null;
			if(joint != null) {
				currentSkin = joint.parent;
				a.targetSkin = currentSkin != null ? currentSkin : joint.skin;
				a.targetJoint = joint.index;
			} else {
				a.targetObject = obj;
			}
		}
		this.isSync = false;
	}
	,getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw haxe_Exception.thrown("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw haxe_Exception.thrown("You must instantiate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g = f0;
			var _g1 = f1 + 1;
			while(_g < _g1) {
				var f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g3 = this.events[f];
					while(_g2 < _g3.length) {
						var e = _g3[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,initAndBind: function(obj) {
		this.bind(obj);
		this.initInstance();
		this.pause = true;
	}
	,toString: function() {
		return this.name;
	}
	,__class__: h3d_anim_Animation
};
var h3d_anim_DataLayout = $hxEnums["h3d.anim.DataLayout"] = { __ename__:"h3d.anim.DataLayout",__constructs__:null
	,Position: {_hx_name:"Position",_hx_index:0,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Rotation: {_hx_name:"Rotation",_hx_index:1,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Scale: {_hx_name:"Scale",_hx_index:2,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,UV: {_hx_name:"UV",_hx_index:3,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Alpha: {_hx_name:"Alpha",_hx_index:4,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,Property: {_hx_name:"Property",_hx_index:5,__enum__:"h3d.anim.DataLayout",toString:$estr}
	,SingleFrame: {_hx_name:"SingleFrame",_hx_index:6,__enum__:"h3d.anim.DataLayout",toString:$estr}
};
h3d_anim_DataLayout.__constructs__ = [h3d_anim_DataLayout.Position,h3d_anim_DataLayout.Rotation,h3d_anim_DataLayout.Scale,h3d_anim_DataLayout.UV,h3d_anim_DataLayout.Alpha,h3d_anim_DataLayout.Property,h3d_anim_DataLayout.SingleFrame];
h3d_anim_DataLayout.__empty_constructs__ = [h3d_anim_DataLayout.Position,h3d_anim_DataLayout.Rotation,h3d_anim_DataLayout.Scale,h3d_anim_DataLayout.UV,h3d_anim_DataLayout.Alpha,h3d_anim_DataLayout.Property,h3d_anim_DataLayout.SingleFrame];
var h3d_anim_BufferObject = function(objectName,dataOffset) {
	h3d_anim_AnimatedObject.call(this,objectName);
	this.dataOffset = dataOffset;
};
$hxClasses["h3d.anim.BufferObject"] = h3d_anim_BufferObject;
h3d_anim_BufferObject.__name__ = "h3d.anim.BufferObject";
h3d_anim_BufferObject.__super__ = h3d_anim_AnimatedObject;
h3d_anim_BufferObject.prototype = $extend(h3d_anim_AnimatedObject.prototype,{
	getStride: function() {
		var stride = 0;
		if((this.layout & 1 << h3d_anim_DataLayout.Position._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Rotation._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
			stride += 3;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.UV._hx_index) != 0) {
			stride += 2;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Alpha._hx_index) != 0) {
			++stride;
		}
		if((this.layout & 1 << h3d_anim_DataLayout.Property._hx_index) != 0) {
			++stride;
		}
		return stride;
	}
	,clone: function() {
		var o = new h3d_anim_BufferObject(this.objectName,this.dataOffset);
		o.layout = this.layout;
		o.propName = this.propName;
		return o;
	}
	,__class__: h3d_anim_BufferObject
});
var h3d_anim_BufferAnimation = function(name,frame,sampling) {
	h3d_anim_Animation.call(this,name,frame,sampling);
	this.syncFrame = -1;
};
$hxClasses["h3d.anim.BufferAnimation"] = h3d_anim_BufferAnimation;
h3d_anim_BufferAnimation.__name__ = "h3d.anim.BufferAnimation";
h3d_anim_BufferAnimation.__super__ = h3d_anim_Animation;
h3d_anim_BufferAnimation.prototype = $extend(h3d_anim_Animation.prototype,{
	setData: function(data,stride) {
		this.data = data;
		this.stride = stride;
	}
	,addObject: function(objName,offset) {
		var f = new h3d_anim_BufferObject(objName,offset);
		this.objects.push(f);
		return f;
	}
	,getPropValue: function(objName,propName) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.objectName == objName && o.propName == propName) {
				return o.propCurrentValue;
			}
		}
		return null;
	}
	,getFrames: function() {
		return this.objects;
	}
	,clone: function(a) {
		if(a == null) {
			a = new h3d_anim_BufferAnimation(this.name,this.frameCount,this.sampling);
		}
		h3d_anim_Animation.prototype.clone.call(this,a);
		var la = ((a) instanceof h3d_anim_BufferAnimation) ? a : null;
		la.setData(this.data,this.stride);
		return a;
	}
	,endFrame: function() {
		if(this.loop) {
			return this.frameCount;
		} else {
			return this.frameCount - 1;
		}
	}
	,initInstance: function() {
		h3d_anim_Animation.prototype.initInstance.call(this);
		var frames = this.objects;
		var _g = 0;
		while(_g < frames.length) {
			var a = frames[_g];
			++_g;
			if((a.layout & 1 << h3d_anim_DataLayout.Property._hx_index) != 0) {
				a.propCurrentValue = this.data[a.dataOffset];
			}
			var tmp;
			if((a.layout & 1 << h3d_anim_DataLayout.Alpha._hx_index) != 0) {
				if(a.targetObject != null) {
					var _this = a.targetObject;
					tmp = (((_this) instanceof h3d_scene_Mesh) ? _this : null) == null;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				throw haxe_Exception.thrown(a.objectName + " should be a mesh (for alpha animation)");
			}
			if((a.layout & 1 << h3d_anim_DataLayout.Position._hx_index) != 0 || (a.layout & 1 << h3d_anim_DataLayout.Rotation._hx_index) != 0 || (a.layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
				a.matrix = new h3d_MatrixImpl();
				a.matrix.identity();
				if((a.layout & 1 << h3d_anim_DataLayout.Position._hx_index) == 0 && a.targetSkin != null) {
					var m2 = a.targetSkin.getSkinData().allJoints[a.targetJoint].defMat;
					a.matrix._14 = m2._41;
					a.matrix._24 = m2._42;
					a.matrix._34 = m2._43;
				}
			}
		}
		frames.sort($bind(this,this.sortByFrameCountDesc));
	}
	,sortByFrameCountDesc: function(o1,o2) {
		return ((o2.layout & 1 << h3d_anim_DataLayout.SingleFrame._hx_index) != 0 ? 0 : 1) - ((o1.layout & 1 << h3d_anim_DataLayout.SingleFrame._hx_index) != 0 ? 0 : 1);
	}
	,uvLerp: function(v1,v2,k) {
		v1 %= 1.;
		v2 %= 1.;
		if(v1 < v2 - 0.5) {
			++v1;
		} else if(v1 > v2 + 0.5) {
			--v1;
		}
		return v1 * (1 - k) + v2 * k;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		var _gthis = this;
		if(this.frame == this.syncFrame && !decompose) {
			return;
		}
		var f = this.frame | 0;
		var max = this.endFrame();
		if(f == max) {
			--f;
		}
		var frame1 = f;
		var frame2 = (frame1 + 1) % this.frameCount;
		var k2 = this.frame - frame1;
		var k1 = 1 - k2;
		if(frame1 < 0) {
			frame2 = 0;
			frame1 = frame2;
		} else if(this.frame >= this.frameCount) {
			frame2 = this.frameCount - 1;
			frame1 = frame2;
		} else if(!this.loop && frame2 == 0) {
			frame2 = this.frameCount - 1;
		}
		this.syncFrame = this.frame;
		if(decompose) {
			this.isSync = false;
		}
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.targetObject == null && o.targetSkin == null) {
				continue;
			}
			var layout = o.layout;
			var offset1 = this.stride * frame1 + o.dataOffset;
			var offset2 = this.stride * frame2 + o.dataOffset;
			var frame11 = frame1;
			var frame21 = frame2;
			if((layout & 1 << h3d_anim_DataLayout.SingleFrame._hx_index) != 0) {
				if(this.isSync) {
					break;
				}
				frame21 = 0;
				frame11 = frame21;
				offset2 = o.dataOffset;
				offset1 = offset2;
			}
			var m = o.matrix;
			if(m != null) {
				if((layout & 1 << h3d_anim_DataLayout.Position._hx_index) != 0) {
					m._41 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					m._42 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					m._43 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
				} else {
					m._41 = m._14;
					m._42 = m._24;
					m._43 = m._34;
				}
				if((layout & 1 << h3d_anim_DataLayout.Rotation._hx_index) != 0) {
					var q1x = this.data[offset1++];
					var q1y = this.data[offset1++];
					var q1z = this.data[offset1++];
					var f = 1 - (q1x * q1x + q1y * q1y + q1z * q1z);
					var q1w = Math.sqrt(f < 0 ? -f : f);
					var q2x = this.data[offset2++];
					var q2y = this.data[offset2++];
					var q2z = this.data[offset2++];
					var f1 = 1 - (q2x * q2x + q2y * q2y + q2z * q2z);
					var q2w = Math.sqrt(f1 < 0 ? -f1 : f1);
					var dot = q1x * q2x + q1y * q2y + q1z * q2z + q1w * q2w;
					var q2 = dot < 0 ? -k2 : k2;
					var qx = q1x * k1 + q2x * q2;
					var qy = q1y * k1 + q2y * q2;
					var qz = q1z * k1 + q2z * q2;
					var qw = q1w * k1 + q2w * q2;
					var ql = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
					qx *= ql;
					qy *= ql;
					qz *= ql;
					qw *= ql;
					if(decompose) {
						m._12 = qx;
						m._13 = qy;
						m._21 = qz;
						m._23 = qw;
						if((layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
							m._11 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._22 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._33 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						} else {
							m._11 = 1;
							m._22 = 1;
							m._33 = 1;
						}
					} else {
						var xx = qx * qx;
						var xy = qx * qy;
						var xz = qx * qz;
						var xw = qx * qw;
						var yy = qy * qy;
						var yz = qy * qz;
						var yw = qy * qw;
						var zz = qz * qz;
						var zw = qz * qw;
						m._11 = 1 - 2 * (yy + zz);
						m._12 = 2 * (xy + zw);
						m._13 = 2 * (xz - yw);
						m._21 = 2 * (xy - zw);
						m._22 = 1 - 2 * (xx + zz);
						m._23 = 2 * (yz + xw);
						m._31 = 2 * (xz + yw);
						m._32 = 2 * (yz - xw);
						m._33 = 1 - 2 * (xx + yy);
						if((layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
							var sx = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							var sy = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							var sz = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
							m._11 *= sx;
							m._12 *= sx;
							m._13 *= sx;
							m._21 *= sy;
							m._22 *= sy;
							m._23 *= sy;
							m._31 *= sz;
							m._32 *= sz;
							m._33 *= sz;
						}
					}
				} else {
					m._12 = 0;
					m._13 = 0;
					m._21 = 0;
					m._23 = decompose ? 1 : 0;
					if((layout & 1 << h3d_anim_DataLayout.Scale._hx_index) != 0) {
						m._11 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						m._22 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
						m._33 = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
					} else {
						m._11 = 1;
						m._22 = 1;
						m._33 = 1;
					}
				}
				if(o.targetSkin != null) {
					o.targetSkin.currentRelPose[o.targetJoint] = m;
					o.targetSkin.jointsUpdated = true;
				} else {
					var _this = o.targetObject;
					_this.defaultTransform = m;
					var f2 = 1;
					var b = true;
					if(b) {
						_this.flags |= f2;
					} else {
						_this.flags &= ~f2;
					}
				}
			}
			if((layout & 1 << h3d_anim_DataLayout.UV._hx_index) != 0) {
				var mat = o.targetObject.toMesh().material;
				var s = mat.passes.getShader(h3d_shader_UVDelta);
				if(s == null) {
					s = mat.passes.addShader(new h3d_shader_UVDelta());
					mat.get_texture().set_wrap(h3d_mat_Wrap.Repeat);
				}
				var v1 = this.data[offset1++];
				var v2 = this.data[offset2++];
				v1 %= 1.;
				v2 %= 1.;
				if(v1 < v2 - 0.5) {
					++v1;
				} else if(v1 > v2 + 0.5) {
					--v1;
				}
				s.uvDelta__.x = v1 * (1 - k2) + v2 * k2;
				var v11 = this.data[offset1++];
				var v21 = this.data[offset2++];
				v11 %= 1.;
				v21 %= 1.;
				if(v11 < v21 - 0.5) {
					++v11;
				} else if(v11 > v21 + 0.5) {
					--v11;
				}
				s.uvDelta__.y = v11 * (1 - k2) + v21 * k2;
			}
			if((layout & 1 << h3d_anim_DataLayout.Alpha._hx_index) != 0) {
				var mat1 = o.targetObject.toMesh().material;
				if(mat1.blendMode == h2d_BlendMode.None) {
					mat1.set_blendMode(h2d_BlendMode.Alpha);
				}
				mat1.mshader.color__.w = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
			}
			if((layout & 1 << h3d_anim_DataLayout.Property._hx_index) != 0) {
				o.propCurrentValue = _gthis.data[offset1++] * k1 + _gthis.data[offset2++] * k2;
			}
		}
		if(!decompose) {
			this.isSync = true;
		}
	}
	,__class__: h3d_anim_BufferAnimation
});
var h3d_anim_LinearFrame = function() {
};
$hxClasses["h3d.anim.LinearFrame"] = h3d_anim_LinearFrame;
h3d_anim_LinearFrame.__name__ = "h3d.anim.LinearFrame";
h3d_anim_LinearFrame.prototype = {
	toMatrix: function() {
		var m = new h3d_MatrixImpl();
		new h3d_Quat(this.qx,this.qy,this.qz,this.qw).toMatrix(m);
		m.prependScale(this.sx,this.sy,this.sz);
		m.translate(this.tx,this.ty,this.tz);
		return m;
	}
	,__class__: h3d_anim_LinearFrame
};
var h3d_anim_LinearObject = function(name) {
	this.hasPosition = true;
	h3d_anim_AnimatedObject.call(this,name);
};
$hxClasses["h3d.anim.LinearObject"] = h3d_anim_LinearObject;
h3d_anim_LinearObject.__name__ = "h3d.anim.LinearObject";
h3d_anim_LinearObject.__super__ = h3d_anim_AnimatedObject;
h3d_anim_LinearObject.prototype = $extend(h3d_anim_AnimatedObject.prototype,{
	clone: function() {
		var o = new h3d_anim_LinearObject(this.objectName);
		o.hasPosition = this.hasPosition;
		o.hasRotation = this.hasRotation;
		o.hasScale = this.hasScale;
		o.frames = this.frames;
		o.alphas = this.alphas;
		o.uvs = this.uvs;
		o.propName = this.propName;
		o.propValues = this.propValues;
		return o;
	}
	,__class__: h3d_anim_LinearObject
});
var h3d_anim_LinearAnimation = function(name,frame,sampling) {
	h3d_anim_Animation.call(this,name,frame,sampling);
	this.syncFrame = -1;
};
$hxClasses["h3d.anim.LinearAnimation"] = h3d_anim_LinearAnimation;
h3d_anim_LinearAnimation.__name__ = "h3d.anim.LinearAnimation";
h3d_anim_LinearAnimation.__super__ = h3d_anim_Animation;
h3d_anim_LinearAnimation.prototype = $extend(h3d_anim_Animation.prototype,{
	addCurve: function(objName,frames,hasPos,hasRot,hasScale) {
		var f = new h3d_anim_LinearObject(objName);
		f.frames = frames;
		f.hasPosition = hasPos;
		f.hasRotation = hasRot;
		f.hasScale = hasScale;
		this.objects.push(f);
	}
	,addAlphaCurve: function(objName,alphas) {
		var f = new h3d_anim_LinearObject(objName);
		f.alphas = alphas;
		this.objects.push(f);
	}
	,addUVCurve: function(objName,uvs) {
		var f = new h3d_anim_LinearObject(objName);
		f.uvs = uvs;
		this.objects.push(f);
	}
	,addPropCurve: function(objName,propName,values) {
		var f = new h3d_anim_LinearObject(objName);
		f.propName = propName;
		f.propValues = values;
		this.objects.push(f);
	}
	,getPropValue: function(objName,propName) {
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.objectName == objName && o.propName == propName) {
				return o.propCurrentValue;
			}
		}
		return null;
	}
	,getFrames: function() {
		return this.objects;
	}
	,clone: function(a) {
		if(a == null) {
			a = new h3d_anim_LinearAnimation(this.name,this.frameCount,this.sampling);
		}
		h3d_anim_Animation.prototype.clone.call(this,a);
		return a;
	}
	,endFrame: function() {
		if(this.loop) {
			return this.frameCount;
		} else {
			return this.frameCount - 1;
		}
	}
	,initInstance: function() {
		h3d_anim_Animation.prototype.initInstance.call(this);
		var frames = this.objects;
		var _g = 0;
		while(_g < frames.length) {
			var a = frames[_g];
			++_g;
			if(a.propValues != null) {
				a.propCurrentValue = a.propValues[0];
				continue;
			}
			var tmp;
			if(a.alphas != null) {
				if(a.targetObject != null) {
					var _this = a.targetObject;
					tmp = (((_this) instanceof h3d_scene_Mesh) ? _this : null) == null;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				throw haxe_Exception.thrown(a.objectName + " should be a mesh (for alpha animation)");
			}
			if(a.uvs != null || a.alphas != null) {
				continue;
			}
			a.matrix = new h3d_MatrixImpl();
			a.matrix.identity();
		}
		frames.sort($bind(this,this.sortByFrameCountDesc));
	}
	,sortByFrameCountDesc: function(o1,o2) {
		return (o2.frames == null ? 10 : o2.frames.length) - (o1.frames == null ? 10 : o1.frames.length);
	}
	,uvLerp: function(v1,v2,k) {
		v1 %= 1.;
		v2 %= 1.;
		if(v1 < v2 - 0.5) {
			++v1;
		} else if(v1 > v2 + 0.5) {
			--v1;
		}
		return v1 * (1 - k) + v2 * k;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		if(this.frame == this.syncFrame && !decompose) {
			return;
		}
		var f = this.frame | 0;
		var max = this.endFrame();
		if(f == max) {
			--f;
		}
		var frame1 = f;
		var frame2 = (frame1 + 1) % this.frameCount;
		var k2 = this.frame - frame1;
		var k1 = 1 - k2;
		if(frame1 < 0) {
			frame2 = 0;
			frame1 = frame2;
		} else if(this.frame >= this.frameCount) {
			frame2 = this.frameCount - 1;
			frame1 = frame2;
		} else if(!this.loop && frame2 == 0) {
			frame2 = this.frameCount - 1;
		}
		this.syncFrame = this.frame;
		if(decompose) {
			this.isSync = false;
		}
		var _g = 0;
		var _g1 = this.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.targetObject == null && o.targetSkin == null) {
				continue;
			}
			if(o.alphas != null) {
				var mat = o.targetObject.toMesh().material;
				if(mat.blendMode == h2d_BlendMode.None) {
					mat.set_blendMode(h2d_BlendMode.Alpha);
				}
				mat.mshader.color__.w = o.alphas[frame1] * k1 + o.alphas[frame2] * k2;
				continue;
			}
			if(o.uvs != null) {
				var mat1 = o.targetObject.toMesh().material;
				var s = mat1.passes.getShader(h3d_shader_UVDelta);
				if(s == null) {
					s = mat1.passes.addShader(new h3d_shader_UVDelta());
					mat1.get_texture().set_wrap(h3d_mat_Wrap.Repeat);
				}
				var v1 = o.uvs[frame1 << 1];
				var v2 = o.uvs[frame2 << 1];
				v1 %= 1.;
				v2 %= 1.;
				if(v1 < v2 - 0.5) {
					++v1;
				} else if(v1 > v2 + 0.5) {
					--v1;
				}
				s.uvDelta__.x = v1 * (1 - k2) + v2 * k2;
				var v11 = o.uvs[frame1 << 1 | 1];
				var v21 = o.uvs[frame2 << 1 | 1];
				v11 %= 1.;
				v21 %= 1.;
				if(v11 < v21 - 0.5) {
					++v11;
				} else if(v11 > v21 + 0.5) {
					--v11;
				}
				s.uvDelta__.y = v11 * (1 - k2) + v21 * k2;
				continue;
			}
			if(o.propValues != null) {
				o.propCurrentValue = o.propValues[frame1] * k1 + o.propValues[frame2] * k2;
				continue;
			}
			var frame11 = frame1;
			var frame21 = frame2;
			if(o.frames.length == 1) {
				if(this.isSync) {
					break;
				}
				frame21 = 0;
				frame11 = frame21;
			}
			var f1 = o.frames[frame11];
			var f2 = o.frames[frame21];
			var m = o.matrix;
			m._41 = f1.tx * k1 + f2.tx * k2;
			m._42 = f1.ty * k1 + f2.ty * k2;
			m._43 = f1.tz * k1 + f2.tz * k2;
			if(o.hasRotation) {
				var dot = f1.qx * f2.qx + f1.qy * f2.qy + f1.qz * f2.qz + f1.qw * f2.qw;
				var q2 = dot < 0 ? -k2 : k2;
				var qx = f1.qx * k1 + f2.qx * q2;
				var qy = f1.qy * k1 + f2.qy * q2;
				var qz = f1.qz * k1 + f2.qz * q2;
				var qw = f1.qw * k1 + f2.qw * q2;
				var ql = 1 / Math.sqrt(qx * qx + qy * qy + qz * qz + qw * qw);
				qx *= ql;
				qy *= ql;
				qz *= ql;
				qw *= ql;
				if(decompose) {
					m._12 = qx;
					m._13 = qy;
					m._21 = qz;
					m._23 = qw;
					if(o.hasScale) {
						m._11 = f1.sx * k1 + f2.sx * k2;
						m._22 = f1.sy * k1 + f2.sy * k2;
						m._33 = f1.sz * k1 + f2.sz * k2;
					} else {
						m._11 = 1;
						m._22 = 1;
						m._33 = 1;
					}
				} else {
					var xx = qx * qx;
					var xy = qx * qy;
					var xz = qx * qz;
					var xw = qx * qw;
					var yy = qy * qy;
					var yz = qy * qz;
					var yw = qy * qw;
					var zz = qz * qz;
					var zw = qz * qw;
					m._11 = 1 - 2 * (yy + zz);
					m._12 = 2 * (xy + zw);
					m._13 = 2 * (xz - yw);
					m._21 = 2 * (xy - zw);
					m._22 = 1 - 2 * (xx + zz);
					m._23 = 2 * (yz + xw);
					m._31 = 2 * (xz + yw);
					m._32 = 2 * (yz - xw);
					m._33 = 1 - 2 * (xx + yy);
					if(o.hasScale) {
						var sx = f1.sx * k1 + f2.sx * k2;
						var sy = f1.sy * k1 + f2.sy * k2;
						var sz = f1.sz * k1 + f2.sz * k2;
						m._11 *= sx;
						m._12 *= sx;
						m._13 *= sx;
						m._21 *= sy;
						m._22 *= sy;
						m._23 *= sy;
						m._31 *= sz;
						m._32 *= sz;
						m._33 *= sz;
					}
				}
			} else {
				m._12 = 0;
				m._13 = 0;
				m._21 = 0;
				m._23 = decompose ? 1 : 0;
				if(o.hasScale) {
					m._11 = f1.sx * k1 + f2.sx * k2;
					m._22 = f1.sy * k1 + f2.sy * k2;
					m._33 = f1.sz * k1 + f2.sz * k2;
				} else {
					m._11 = 1;
					m._22 = 1;
					m._33 = 1;
				}
			}
			if(o.targetSkin != null) {
				o.targetSkin.currentRelPose[o.targetJoint] = o.matrix;
				o.targetSkin.jointsUpdated = true;
			} else {
				var _this = o.targetObject;
				var v = o.matrix;
				_this.defaultTransform = v;
				var f = 1;
				var b = true;
				if(b) {
					_this.flags |= f;
				} else {
					_this.flags &= ~f;
				}
			}
		}
		if(!decompose) {
			this.isSync = true;
		}
	}
	,__class__: h3d_anim_LinearAnimation
});
var h3d_anim_Joint = function() {
	this.bindIndex = -1;
	this.splitIndex = -1;
	this.subs = [];
};
$hxClasses["h3d.anim.Joint"] = h3d_anim_Joint;
h3d_anim_Joint.__name__ = "h3d.anim.Joint";
h3d_anim_Joint.prototype = {
	__class__: h3d_anim_Joint
};
var h3d_anim__$Skin_Permut = function() {
};
$hxClasses["h3d.anim._Skin.Permut"] = h3d_anim__$Skin_Permut;
h3d_anim__$Skin_Permut.__name__ = "h3d.anim._Skin.Permut";
h3d_anim__$Skin_Permut.prototype = {
	__class__: h3d_anim__$Skin_Permut
};
var h3d_anim__$Skin_Influence = function(j,w) {
	this.j = j;
	this.w = w;
};
$hxClasses["h3d.anim._Skin.Influence"] = h3d_anim__$Skin_Influence;
h3d_anim__$Skin_Influence.__name__ = "h3d.anim._Skin.Influence";
h3d_anim__$Skin_Influence.prototype = {
	__class__: h3d_anim__$Skin_Influence
};
var h3d_anim_Skin = function(name,vertexCount,bonesPerVertex) {
	this.name = name;
	this.vertexCount = vertexCount;
	this.bonesPerVertex = bonesPerVertex;
	if(vertexCount > 0) {
		this.vertexJoints = new Array(vertexCount * bonesPerVertex);
		this.vertexWeights = new Array(vertexCount * bonesPerVertex);
		this.envelop = [];
	}
};
$hxClasses["h3d.anim.Skin"] = h3d_anim_Skin;
h3d_anim_Skin.__name__ = "h3d.anim.Skin";
h3d_anim_Skin.prototype = {
	setJoints: function(joints,roots) {
		this.rootJoints = roots;
		this.allJoints = joints;
		this.namedJoints = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < joints.length) {
			var j = joints[_g];
			++_g;
			if(j.name != null) {
				this.namedJoints.h[j.name] = j;
			}
		}
	}
	,addInfluence: function(vid,j,w) {
		var il = this.envelop[vid];
		if(il == null) {
			il = this.envelop[vid] = [];
		}
		il.push(new h3d_anim__$Skin_Influence(j,w));
	}
	,sortInfluences: function(i1,i2) {
		if(i2.w > i1.w) {
			return 1;
		} else {
			return -1;
		}
	}
	,isSplit: function() {
		return this.splitJoints != null;
	}
	,initWeights: function() {
		this.boundJoints = [];
		var pos = 0;
		var _g = 0;
		var _g1 = this.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var il = this.envelop[i];
			if(il == null) {
				il = [];
			}
			haxe_ds_ArraySort.sort(il,$bind(this,this.sortInfluences));
			if(il.length > this.bonesPerVertex) {
				il = il.slice(0,this.bonesPerVertex);
			}
			var tw = 0.;
			var _g2 = 0;
			while(_g2 < il.length) {
				var i1 = il[_g2];
				++_g2;
				tw += i1.w;
			}
			tw = 1 / tw;
			var _g3 = 0;
			var _g4 = this.bonesPerVertex;
			while(_g3 < _g4) {
				var i2 = _g3++;
				var i3 = il[i2];
				if(i3 == null) {
					this.vertexJoints[pos] = 0;
					this.vertexWeights[pos] = 0;
				} else {
					if(i3.j.bindIndex == -1) {
						i3.j.bindIndex = this.boundJoints.length;
						this.boundJoints.push(i3.j);
					}
					this.vertexJoints[pos] = i3.j.bindIndex;
					this.vertexWeights[pos] = i3.w * tw;
				}
				++pos;
			}
		}
		this.envelop = null;
	}
	,sortByBindIndex: function(j1,j2) {
		return j1.bindIndex - j2.bindIndex;
	}
	,isSub: function(a,b) {
		var j = 0;
		var max = b.length;
		var _g = 0;
		while(_g < a.length) {
			var e = a[_g];
			++_g;
			while(e != b[j++]) if(j >= max) {
				return false;
			}
		}
		return true;
	}
	,merge: function(permuts) {
		var _g = 0;
		while(_g < permuts.length) {
			var p1 = permuts[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < permuts.length) {
				var p2 = permuts[_g1];
				++_g1;
				if(p1 != p2 && p1.material == p2.material && this.isSub(p1.joints,p2.joints)) {
					var _g2 = 0;
					var _g3 = p1.triangles;
					while(_g2 < _g3.length) {
						var t = _g3[_g2];
						++_g2;
						p2.triangles.push(t);
					}
					HxOverrides.remove(permuts,p1);
					return true;
				}
			}
		}
		return false;
	}
	,jointsDiff: function(p1,p2) {
		var diff = 0;
		var i = 0;
		var j = 0;
		var imax = p1.joints.length;
		var jmax = p2.joints.length;
		while(i < imax && j < jmax) {
			var j1 = p1.joints[i];
			var j2 = p2.joints[j];
			if(j1 == j2) {
				++i;
				++j;
			} else {
				++diff;
				if(j1.bindIndex < j2.bindIndex) {
					++i;
				} else {
					++j;
				}
			}
		}
		return diff + (imax - i) + (jmax - j);
	}
	,split: function(maxBones,index,triangleMaterials) {
		if(this.splitJoints != null) {
			return true;
		}
		if(this.boundJoints.length <= maxBones) {
			return false;
		}
		this.splitJoints = [];
		this.triangleGroups = new Array(index.length / 3 | 0);
		var permuts = [];
		var _g = 0;
		var _g1 = index.length / 3 | 0;
		while(_g < _g1) {
			var tri = _g++;
			var iid = tri * 3;
			var mid = triangleMaterials == null ? 0 : triangleMaterials[tri];
			var jl = [];
			var _g2 = 0;
			while(_g2 < 3) {
				var i = _g2++;
				var vid = index[iid + i];
				var _g3 = 0;
				var _g4 = this.bonesPerVertex;
				while(_g3 < _g4) {
					var b = _g3++;
					var bidx = vid * this.bonesPerVertex + b;
					if(this.vertexWeights[bidx] == 0) {
						continue;
					}
					var j = this.boundJoints[this.vertexJoints[bidx]];
					if(j.splitIndex != iid) {
						j.splitIndex = iid;
						jl.push(j);
					}
				}
			}
			jl.sort($bind(this,this.sortByBindIndex));
			var _g5 = 0;
			while(_g5 < permuts.length) {
				var p2 = permuts[_g5];
				++_g5;
				if(p2.material == mid && this.isSub(jl,p2.joints)) {
					p2.triangles.push(tri);
					jl = null;
					break;
				}
			}
			if(jl == null) {
				continue;
			}
			var _g6 = 0;
			while(_g6 < permuts.length) {
				var p21 = permuts[_g6];
				++_g6;
				if(p21.material == mid && this.isSub(p21.joints,jl)) {
					p21.joints = jl;
					p21.triangles.push(tri);
					jl = null;
					break;
				}
			}
			if(jl == null) {
				continue;
			}
			var pr = new h3d_anim__$Skin_Permut();
			pr.joints = jl;
			pr.triangles = [tri];
			pr.material = mid;
			permuts.push(pr);
		}
		while(true) {
			while(this.merge(permuts)) {
			}
			var minDif = 100000;
			var minTot = 100000;
			var minP1 = null;
			var minP2 = null;
			var _g = 0;
			var _g1 = permuts.length;
			while(_g < _g1) {
				var i = _g++;
				var p1 = permuts[i];
				if(p1.joints.length == maxBones) {
					continue;
				}
				var _g2 = i + 1;
				var _g3 = permuts.length;
				while(_g2 < _g3) {
					var j = _g2++;
					var p2 = permuts[j];
					if(p2.joints.length == maxBones || p1.material != p2.material) {
						continue;
					}
					var count = this.jointsDiff(p1,p2);
					var tot = count + (p1.joints.length + p2.joints.length - count >> 1);
					if(tot > maxBones || tot > minTot || tot == minTot && count > minDif) {
						continue;
					}
					minDif = count;
					minTot = tot;
					minP1 = p1;
					minP2 = p2;
				}
			}
			if(minP1 == null) {
				break;
			}
			var p11 = minP1;
			var p21 = minP2;
			var _g4 = 0;
			var _g5 = p11.joints;
			while(_g4 < _g5.length) {
				var j1 = _g5[_g4];
				++_g4;
				HxOverrides.remove(p21.joints,j1);
				p21.joints.push(j1);
			}
			p21.joints.sort($bind(this,this.sortByBindIndex));
			var _g6 = 0;
			var _g7 = p11.triangles;
			while(_g6 < _g7.length) {
				var t = _g7[_g6];
				++_g6;
				p21.triangles.push(t);
			}
			HxOverrides.remove(permuts,p11);
		}
		var _g = 0;
		var _g1 = permuts.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = permuts[i].triangles;
			while(_g2 < _g3.length) {
				var tri = _g3[_g2];
				++_g2;
				this.triangleGroups[tri] = i;
			}
		}
		var jointsPermuts = [];
		var _g = 0;
		var _g1 = this.boundJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			var pl = [];
			var _g2 = 0;
			while(_g2 < permuts.length) {
				var p = permuts[_g2];
				++_g2;
				if(p.joints.indexOf(j) >= 0) {
					pl.push(p);
				}
			}
			jointsPermuts.push({ j : j, pl : pl, priority : 0});
		}
		while(true) {
			jointsPermuts.sort(function(j1,j2) {
				return j2.pl.length + j2.priority * 100 - (j1.pl.length + j1.priority * 100);
			});
			var _g = 0;
			while(_g < permuts.length) {
				var p = permuts[_g];
				++_g;
				p.indexedJoints = [];
			}
			var fail = false;
			var _g1 = 0;
			while(_g1 < jointsPermuts.length) {
				var j = jointsPermuts[_g1];
				++_g1;
				j.j.splitIndex = -1;
				var _g2 = 0;
				var _g3 = maxBones;
				while(_g2 < _g3) {
					var id = _g2++;
					var ok = true;
					var _g4 = 0;
					var _g5 = j.pl;
					while(_g4 < _g5.length) {
						var p1 = _g5[_g4];
						++_g4;
						if(p1.indexedJoints[id] != null) {
							ok = false;
							break;
						}
					}
					if(ok) {
						j.j.splitIndex = id;
						var _g6 = 0;
						var _g7 = j.pl;
						while(_g6 < _g7.length) {
							var p2 = _g7[_g6];
							++_g6;
							p2.indexedJoints[id] = j.j;
						}
						break;
					}
				}
				if(j.j.splitIndex < 0) {
					j.priority++;
					if(j.priority > 10) {
						throw haxe_Exception.thrown("Failed to assign index while spliting skin");
					}
					fail = true;
					break;
				}
			}
			if(!fail) {
				break;
			}
		}
		this.splitJoints = [];
		var _g = 0;
		while(_g < permuts.length) {
			var p = permuts[_g];
			++_g;
			var jl = [];
			var _g1 = 0;
			var _g2 = p.indexedJoints.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var j = p.indexedJoints[i];
				if(j == null) {
					j = this.boundJoints[0];
				}
				jl.push(j);
			}
			this.splitJoints.push({ material : p.material, joints : jl});
		}
		var _g = 0;
		var _g1 = this.vertexJoints.length;
		while(_g < _g1) {
			var i = _g++;
			this.vertexJoints[i] = this.boundJoints[this.vertexJoints[i]].splitIndex;
		}
		return true;
	}
	,__class__: h3d_anim_Skin
};
var h3d_col_Collider = function() { };
$hxClasses["h3d.col.Collider"] = h3d_col_Collider;
h3d_col_Collider.__name__ = "h3d.col.Collider";
h3d_col_Collider.prototype = {
	__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
$hxClasses["h3d.col.Bounds"] = h3d_col_Bounds;
h3d_col_Bounds.__name__ = "h3d.col.Bounds";
h3d_col_Bounds.fromPoints = function(min,max) {
	var b = new h3d_col_Bounds();
	b.xMin = min.x;
	b.yMin = min.y;
	b.zMin = min.z;
	b.xMax = max.x;
	b.yMax = max.y;
	b.zMax = max.z;
	return b;
};
h3d_col_Bounds.fromValues = function(x,y,z,dx,dy,dz) {
	var b = new h3d_col_Bounds();
	b.xMin = x;
	b.yMin = y;
	b.zMin = z;
	b.xMax = x + dx;
	b.yMax = y + dy;
	b.zMax = z + dz;
	return b;
};
h3d_col_Bounds.__super__ = h3d_col_Collider;
h3d_col_Bounds.prototype = $extend(h3d_col_Collider.prototype,{
	inFrustum: function(f,m) {
		if(m != null) {
			throw haxe_Exception.thrown("Not implemented");
		}
		return f.hasBounds(this);
	}
	,inSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var c_x = x1;
		var c_y = y1;
		var c_z = z1;
		var a = this.xMin;
		var a1 = s.x;
		var b = this.xMax;
		var b1 = a1 > b ? b : a1;
		var x = a < b1 ? b1 : a;
		var a = this.yMin;
		var a1 = s.y;
		var b = this.yMax;
		var b1 = a1 > b ? b : a1;
		var y = a < b1 ? b1 : a;
		var a = this.zMin;
		var a1 = s.z;
		var b = this.zMax;
		var b1 = a1 > b ? b : a1;
		var z = a < b1 ? b1 : a;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var dx = p_x - c_x;
		var dy = p_y - c_y;
		var dz = p_z - c_z;
		return dx * dx + dy * dy + dz * dz < s.r * s.r;
	}
	,testPlane: function(p) {
		var a = p.nx;
		var b = p.ny;
		var c = p.nz;
		var dd = a * (this.xMax + this.xMin) + b * (this.yMax + this.yMin) + c * (this.zMax + this.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b < 0) {
			b = -b;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (this.xMax - this.xMin) + b * (this.yMax - this.yMin) + c * (this.zMax - this.zMin);
		return dd + rr - p.d * 2;
	}
	,rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a < realMinTz ? realMinTz : a;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,inFrustumDetails: function(mvp,checkZ) {
		if(checkZ == null) {
			checkZ = true;
		}
		var ret = 1;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = mvp._44 + mvp._41;
		var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
		if(m + p_d < 0) {
			return -1;
		}
		var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
		if(n + p_d < 0) {
			ret = 0;
		}
		var p_nx = mvp._14 - mvp._11;
		var p_ny = mvp._24 - mvp._21;
		var p_nz = mvp._34 - mvp._31;
		var p_d = mvp._44 - mvp._41;
		var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
		if(m + p_d < 0) {
			return -1;
		}
		var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
		if(n + p_d < 0) {
			ret = 0;
		}
		var p_nx = mvp._14 + mvp._12;
		var p_ny = mvp._24 + mvp._22;
		var p_nz = mvp._34 + mvp._32;
		var p_d = mvp._44 + mvp._42;
		var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
		if(m + p_d < 0) {
			return -1;
		}
		var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
		if(n + p_d < 0) {
			ret = 0;
		}
		var p_nx = mvp._14 - mvp._12;
		var p_ny = mvp._24 - mvp._22;
		var p_nz = mvp._34 - mvp._32;
		var p_d = mvp._44 - mvp._42;
		var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
		if(m + p_d < 0) {
			return -1;
		}
		var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
		if(n + p_d < 0) {
			ret = 0;
		}
		if(checkZ) {
			var p_nx = mvp._13;
			var p_ny = mvp._23;
			var p_nz = mvp._33;
			var p_d = mvp._43;
			var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
			if(m + p_d < 0) {
				return -1;
			}
			var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
			if(n + p_d < 0) {
				ret = 0;
			}
			var p_nx = mvp._14 - mvp._13;
			var p_ny = mvp._24 - mvp._23;
			var p_nz = mvp._34 - mvp._33;
			var p_d = mvp._44 - mvp._43;
			var m = p_nx * (p_nx > 0 ? this.xMax : this.xMin) + p_ny * (p_ny > 0 ? this.yMax : this.yMin) + p_nz * (p_nz > 0 ? this.zMax : this.zMin);
			if(m + p_d < 0) {
				return -1;
			}
			var n = p_nx * (p_nx > 0 ? this.xMin : this.xMax) + p_ny * (p_ny > 0 ? this.yMin : this.yMax) + p_nz * (p_nz > 0 ? this.zMin : this.zMax);
			if(n + p_d < 0) {
				ret = 0;
			}
		}
		return ret;
	}
	,transform3x3: function(m) {
		var xMin = this.xMin;
		var yMin = this.yMin;
		var zMin = this.zMin;
		var xMax = this.xMax;
		var yMax = this.yMax;
		var zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var x = xMin;
		var y = yMin;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMin;
		var y = yMin;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMin;
		var y = yMax;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMin;
		var y = yMax;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMin;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMin;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMax;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMax;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
	}
	,transform: function(m) {
		var xMin = this.xMin;
		var yMin = this.yMin;
		var zMin = this.zMin;
		var xMax = this.xMax;
		var yMax = this.yMax;
		var zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		if(xMax < xMin && yMax < yMin && zMax < zMin) {
			return;
		}
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var x = xMin;
		var y = yMin;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMin;
		var y = yMin;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMin;
		var y = yMax;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMin;
		var y = yMax;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMin;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMin;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMax;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
		var x = xMax;
		var y = yMax;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		if(v_x < this.xMin) {
			this.xMin = v_x;
		}
		if(v_x > this.xMax) {
			this.xMax = v_x;
		}
		if(v_y < this.yMin) {
			this.yMin = v_y;
		}
		if(v_y > this.yMax) {
			this.yMax = v_y;
		}
		if(v_z < this.zMin) {
			this.zMin = v_z;
		}
		if(v_z > this.zMax) {
			this.zMax = v_z;
		}
	}
	,collide: function(b) {
		return !(this.xMin > b.xMax || this.yMin > b.yMax || this.zMin > b.zMax || this.xMax < b.xMin || this.yMax < b.yMin || this.zMax < b.zMin);
	}
	,contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin && p.y < this.yMax && p.z >= this.zMin) {
			return p.z < this.zMax;
		} else {
			return false;
		}
	}
	,containsBounds: function(b) {
		if(this.xMin <= b.xMin && this.yMin <= b.yMin && this.zMin <= b.zMin && this.xMax >= b.xMax && this.yMax >= b.yMax) {
			return this.zMax >= b.zMax;
		} else {
			return false;
		}
	}
	,containsSphere: function(s) {
		if(this.xMin <= s.x - s.r && this.yMin <= s.y - s.r && this.zMin <= s.z - s.r && this.xMax >= s.x + s.r && this.yMax >= s.y + s.r) {
			return this.zMax >= s.z + s.r;
		} else {
			return false;
		}
	}
	,add: function(b) {
		if(b.xMin < this.xMin) {
			this.xMin = b.xMin;
		}
		if(b.xMax > this.xMax) {
			this.xMax = b.xMax;
		}
		if(b.yMin < this.yMin) {
			this.yMin = b.yMin;
		}
		if(b.yMax > this.yMax) {
			this.yMax = b.yMax;
		}
		if(b.zMin < this.zMin) {
			this.zMin = b.zMin;
		}
		if(b.zMax > this.zMax) {
			this.zMax = b.zMax;
		}
	}
	,addTransform: function(b,m) {
		var b1 = new h3d_col_Bounds();
		b1.xMin = b.xMin;
		b1.xMax = b.xMax;
		b1.yMin = b.yMin;
		b1.yMax = b.yMax;
		b1.zMin = b.zMin;
		b1.zMax = b.zMax;
		var tmp = b1;
		tmp.transform(m);
		if(tmp.xMin < this.xMin) {
			this.xMin = tmp.xMin;
		}
		if(tmp.xMax > this.xMax) {
			this.xMax = tmp.xMax;
		}
		if(tmp.yMin < this.yMin) {
			this.yMin = tmp.yMin;
		}
		if(tmp.yMax > this.yMax) {
			this.yMax = tmp.yMax;
		}
		if(tmp.zMin < this.zMin) {
			this.zMin = tmp.zMin;
		}
		if(tmp.zMax > this.zMax) {
			this.zMax = tmp.zMax;
		}
	}
	,addPoint: function(p) {
		if(p.x < this.xMin) {
			this.xMin = p.x;
		}
		if(p.x > this.xMax) {
			this.xMax = p.x;
		}
		if(p.y < this.yMin) {
			this.yMin = p.y;
		}
		if(p.y > this.yMax) {
			this.yMax = p.y;
		}
		if(p.z < this.zMin) {
			this.zMin = p.z;
		}
		if(p.z > this.zMax) {
			this.zMax = p.z;
		}
	}
	,addPos: function(x,y,z) {
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(z < this.zMin) {
			this.zMin = z;
		}
		if(z > this.zMax) {
			this.zMax = z;
		}
	}
	,addSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		var r = s.r;
		if(x - r < this.xMin) {
			this.xMin = x - r;
		}
		if(x + r > this.xMax) {
			this.xMax = x + r;
		}
		if(y - r < this.yMin) {
			this.yMin = y - r;
		}
		if(y + r > this.yMax) {
			this.yMax = y + r;
		}
		if(z - r < this.zMin) {
			this.zMin = z - r;
		}
		if(z + r > this.zMax) {
			this.zMax = z + r;
		}
	}
	,addSpherePos: function(x,y,z,r) {
		if(x - r < this.xMin) {
			this.xMin = x - r;
		}
		if(x + r > this.xMax) {
			this.xMax = x + r;
		}
		if(y - r < this.yMin) {
			this.yMin = y - r;
		}
		if(y + r > this.yMax) {
			this.yMax = y + r;
		}
		if(z - r < this.zMin) {
			this.zMin = z - r;
		}
		if(z + r > this.zMax) {
			this.zMax = z + r;
		}
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a1 = a.yMin;
		var b1 = b.yMin;
		var yMin = a1 < b1 ? b1 : a1;
		var a1 = a.zMin;
		var b1 = b.zMin;
		var zMin = a1 < b1 ? b1 : a1;
		var a1 = a.xMax;
		var b1 = b.xMax;
		var xMax = a1 > b1 ? b1 : a1;
		var a1 = a.yMax;
		var b1 = b.yMax;
		var yMax = a1 > b1 ? b1 : a1;
		var a1 = a.zMax;
		var b1 = b.zMax;
		var zMax = a1 > b1 ? b1 : a1;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,offset: function(dx,dy,dz) {
		this.xMin += dx;
		this.xMax += dx;
		this.yMin += dy;
		this.yMax += dy;
		this.zMin += dz;
		this.zMax += dz;
	}
	,setMin: function(p) {
		this.xMin = p.x;
		this.yMin = p.y;
		this.zMin = p.z;
	}
	,setMax: function(p) {
		this.xMax = p.x;
		this.yMax = p.y;
		this.zMax = p.z;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.xMax = b.xMax;
		this.yMin = b.yMin;
		this.yMax = b.yMax;
		this.zMin = b.zMin;
		this.zMax = b.zMax;
	}
	,scalePivot: function(v) {
		this.xMin *= v;
		this.yMin *= v;
		this.zMin *= v;
		this.xMax *= v;
		this.yMax *= v;
		this.zMax *= v;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,getMin: function() {
		var x = this.xMin;
		var y = this.yMin;
		var z = this.zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,getCenter: function() {
		var x = (this.xMin + this.xMax) * 0.5;
		var y = (this.yMin + this.yMax) * 0.5;
		var z = (this.zMin + this.zMax) * 0.5;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,getSize: function() {
		var x = this.xMax - this.xMin;
		var y = this.yMax - this.yMin;
		var z = this.zMax - this.zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,getMax: function() {
		var x = this.xMax;
		var y = this.yMax;
		var z = this.zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,getVolume: function() {
		return (this.xMax - this.xMin) * (this.yMax - this.yMin) * (this.zMax - this.zMin);
	}
	,get_xSize: function() {
		return this.xMax - this.xMin;
	}
	,get_ySize: function() {
		return this.yMax - this.yMin;
	}
	,get_zSize: function() {
		return this.zMax - this.zMin;
	}
	,set_xSize: function(v) {
		this.xMax = this.xMin + v;
		return v;
	}
	,set_ySize: function(v) {
		this.yMax = this.yMin + v;
		return v;
	}
	,set_zSize: function(v) {
		this.zMax = this.zMin + v;
		return v;
	}
	,isEmpty: function() {
		if(!(this.xMax < this.xMin || this.yMax < this.yMin)) {
			return this.zMax < this.zMin;
		} else {
			return true;
		}
	}
	,empty: function() {
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
	}
	,all: function() {
		this.xMin = -1e20;
		this.xMax = 1e20;
		this.yMin = -1e20;
		this.yMax = 1e20;
		this.zMin = -1e20;
		this.zMax = 1e20;
	}
	,clone: function() {
		var b = new h3d_col_Bounds();
		b.xMin = this.xMin;
		b.xMax = this.xMax;
		b.yMin = this.yMin;
		b.yMax = this.yMax;
		b.zMin = this.zMin;
		b.zMax = this.zMax;
		return b;
	}
	,toString: function() {
		var x = this.xMin;
		var y = this.yMin;
		var z = this.zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var tmp = "Bounds{" + Std.string(new h3d_VectorImpl(x,y,z)) + ",";
		var x = this.xMax - this.xMin;
		var y = this.yMax - this.yMin;
		var z = this.zMax - this.zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return tmp + Std.string(new h3d_VectorImpl(x,y,z)) + "}";
	}
	,toSphere: function() {
		var dx = this.xMax - this.xMin;
		var dy = this.yMax - this.yMin;
		var dz = this.zMax - this.zMin;
		return new h3d_col_Sphere((this.xMin + this.xMax) * 0.5,(this.yMin + this.yMax) * 0.5,(this.zMin + this.zMax) * 0.5,Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5);
	}
	,makeDebugObj: function() {
		var prim = new h3d_prim_Cube(this.xMax - this.xMin,this.yMax - this.yMin,this.zMax - this.zMin);
		prim.translate(this.xMin,this.yMin,this.zMin);
		prim.addNormals();
		return new h3d_scene_Mesh(prim);
	}
	,__class__: h3d_col_Bounds
});
var h3d_col_OptimizedCollider = function(a,b) {
	this.a = a;
	this.b = b;
};
$hxClasses["h3d.col.OptimizedCollider"] = h3d_col_OptimizedCollider;
h3d_col_OptimizedCollider.__name__ = "h3d.col.OptimizedCollider";
h3d_col_OptimizedCollider.__super__ = h3d_col_Collider;
h3d_col_OptimizedCollider.prototype = $extend(h3d_col_Collider.prototype,{
	rayIntersection: function(r,bestMatch) {
		if(this.a.rayIntersection(r,bestMatch) < 0) {
			if(!this.checkInside) {
				return -1;
			}
			var x = r.px + 0 * r.lx;
			var y = r.py + 0 * r.ly;
			var z = r.pz + 0 * r.lz;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			if(!this.a.contains(new h3d_VectorImpl(x,y,z))) {
				return -1;
			}
		}
		return this.b.rayIntersection(r,bestMatch);
	}
	,contains: function(p) {
		if(this.a.contains(p)) {
			return this.b.contains(p);
		} else {
			return false;
		}
	}
	,inFrustum: function(f,m) {
		if(this.a.inFrustum(f,m)) {
			return this.b.inFrustum(f,m);
		} else {
			return false;
		}
	}
	,inSphere: function(s) {
		if(this.a.inSphere(s)) {
			return this.b.inSphere(s);
		} else {
			return false;
		}
	}
	,makeDebugObj: function() {
		var bobj = this.b.makeDebugObj();
		var aobj = this.a.makeDebugObj();
		if(aobj == null && bobj == null) {
			return null;
		}
		var ret = new h3d_scene_Object();
		if(aobj != null) {
			ret.addChild(aobj);
		}
		if(bobj != null) {
			ret.addChild(bobj);
		}
		return ret;
	}
	,__class__: h3d_col_OptimizedCollider
});
var h3d_col_GroupCollider = function(colliders) {
	this.colliders = colliders;
};
$hxClasses["h3d.col.GroupCollider"] = h3d_col_GroupCollider;
h3d_col_GroupCollider.__name__ = "h3d.col.GroupCollider";
h3d_col_GroupCollider.__super__ = h3d_col_Collider;
h3d_col_GroupCollider.prototype = $extend(h3d_col_Collider.prototype,{
	rayIntersection: function(r,bestMatch) {
		var best = -1.;
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var d = c.rayIntersection(r,bestMatch);
			if(d >= 0) {
				if(!bestMatch) {
					return d;
				}
				if(best < 0 || d < best) {
					best = d;
				}
			}
		}
		return best;
	}
	,contains: function(p) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.contains(p)) {
				return true;
			}
		}
		return false;
	}
	,inFrustum: function(f,m) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.inFrustum(f,m)) {
				return true;
			}
		}
		return false;
	}
	,inSphere: function(s) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.inSphere(s)) {
				return true;
			}
		}
		return false;
	}
	,makeDebugObj: function() {
		var ret = null;
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var toAdd = c.makeDebugObj();
			if(toAdd == null) {
				continue;
			}
			if(ret == null) {
				ret = new h3d_scene_Object();
			}
			ret.addChild(toAdd);
		}
		return ret;
	}
	,__class__: h3d_col_GroupCollider
});
var h3d_col_FPoint = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["h3d.col.FPoint"] = h3d_col_FPoint;
h3d_col_FPoint.__name__ = "h3d.col.FPoint";
h3d_col_FPoint.prototype = {
	set: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,sub: function(p) {
		return new h3d_col_FPoint(this.x - p.x,this.y - p.y,this.z - p.z);
	}
	,add: function(p) {
		return new h3d_col_FPoint(this.x + p.x,this.y + p.y,this.z + p.z);
	}
	,cross: function(p) {
		return new h3d_col_FPoint(this.y * p.z - this.z * p.y,this.z * p.x - this.x * p.z,this.x * p.y - this.y * p.x);
	}
	,dot: function(p) {
		return this.x * p.x + this.y * p.y + this.z * p.z;
	}
	,toString: function() {
		return "FPoint{" + hxd_Math.fmt(this.x) + "," + hxd_Math.fmt(this.y) + "," + hxd_Math.fmt(this.z) + "}";
	}
	,__class__: h3d_col_FPoint
};
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(1,0,0,0.0);
	this.pright = new h3d_col_Plane(1,0,0,0.0);
	this.ptop = new h3d_col_Plane(1,0,0,0.0);
	this.pbottom = new h3d_col_Plane(1,0,0,0.0);
	this.pnear = new h3d_col_Plane(1,0,0,0.0);
	this.pfar = new h3d_col_Plane(1,0,0,0.0);
	if(mvp != null) {
		this.loadMatrix(mvp);
	}
};
$hxClasses["h3d.col.Frustum"] = h3d_col_Frustum;
h3d_col_Frustum.__name__ = "h3d.col.Frustum";
h3d_col_Frustum.prototype = {
	clone: function() {
		var f = new h3d_col_Frustum();
		var _this = f.pleft;
		var p = this.pleft;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		var _this = f.pright;
		var p = this.pright;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		var _this = f.ptop;
		var p = this.ptop;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		var _this = f.pbottom;
		var p = this.pbottom;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		var _this = f.pnear;
		var p = this.pnear;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		var _this = f.pfar;
		var p = this.pfar;
		_this.nx = p.nx;
		_this.ny = p.ny;
		_this.nz = p.nz;
		_this.d = p.d;
		f.checkNearFar = this.checkNearFar;
		return f;
	}
	,loadMatrix: function(mvp) {
		var _this = this.pleft;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = -(mvp._44 + mvp._41);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pright;
		var p_nx = mvp._14 - mvp._11;
		var p_ny = mvp._24 - mvp._21;
		var p_nz = mvp._34 - mvp._31;
		var p_d = mvp._41 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.ptop;
		var p_nx = mvp._14 - mvp._12;
		var p_ny = mvp._24 - mvp._22;
		var p_nz = mvp._34 - mvp._32;
		var p_d = mvp._42 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pbottom;
		var p_nx = mvp._14 + mvp._12;
		var p_ny = mvp._24 + mvp._22;
		var p_nz = mvp._34 + mvp._32;
		var p_d = -(mvp._44 + mvp._42);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pnear;
		var p_nx = mvp._13;
		var p_ny = mvp._23;
		var p_nz = mvp._33;
		var p_d = -mvp._43;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pfar;
		var p_nx = mvp._14 - mvp._13;
		var p_ny = mvp._24 - mvp._23;
		var p_nz = mvp._34 - mvp._33;
		var p_d = mvp._43 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pleft;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pright;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.ptop;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pbottom;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pnear;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pfar;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
	}
	,transform: function(m) {
		var m2 = new h3d_MatrixImpl();
		m2.initInverse(m);
		m2.transpose();
		var _this = this.pleft;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pright;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.ptop;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pbottom;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pfar;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pnear;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pleft;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pright;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.ptop;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pbottom;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pnear;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pfar;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
	}
	,transform3x3: function(m) {
		var m2 = new h3d_MatrixImpl();
		m2.initInverse3x3(m);
		m2.transpose();
		var _this = this.pleft;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pright;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.ptop;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pbottom;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pfar;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pnear;
		var x = _this.nx;
		var y = _this.ny;
		var z = _this.nz;
		var w = -_this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		_this.nx = v_x;
		_this.ny = v_y;
		_this.nz = v_z;
		_this.d = -v_w;
		var _this = this.pleft;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pright;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.ptop;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pbottom;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pnear;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pfar;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
	}
	,hasPoint: function(p) {
		var _this = this.pleft;
		if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
			return false;
		}
		var _this = this.pright;
		if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
			return false;
		}
		var _this = this.ptop;
		if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
			return false;
		}
		var _this = this.pbottom;
		if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
			return false;
		}
		if(this.checkNearFar) {
			var _this = this.pnear;
			if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
				return false;
			}
			var _this = this.pfar;
			if(_this.nx * p.x + _this.ny * p.y + _this.nz * p.z - _this.d < 0) {
				return false;
			}
		}
		return true;
	}
	,hasSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pright;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.ptop;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pbottom;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this = this.pnear;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
			var _this = this.pfar;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,hasBounds: function(b) {
		var p = this.pleft;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pright;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.ptop;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pbottom;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pnear;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pfar;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_Ray = function() {
};
$hxClasses["h3d.col.Ray"] = h3d_col_Ray;
h3d_col_Ray.__name__ = "h3d.col.Ray";
h3d_col_Ray.fromPoints = function(p1,p2) {
	var r = new h3d_col_Ray();
	r.px = p1.x;
	r.py = p1.y;
	r.pz = p1.z;
	r.lx = p2.x - p1.x;
	r.ly = p2.y - p1.y;
	r.lz = p2.z - p1.z;
	r.normalize();
	return r;
};
h3d_col_Ray.fromValues = function(x,y,z,dx,dy,dz) {
	var r = new h3d_col_Ray();
	r.px = x;
	r.py = y;
	r.pz = z;
	r.lx = dx;
	r.ly = dy;
	r.lz = dz;
	r.normalize();
	return r;
};
h3d_col_Ray.prototype = {
	clone: function() {
		var r = new h3d_col_Ray();
		r.px = this.px;
		r.py = this.py;
		r.pz = this.pz;
		r.lx = this.lx;
		r.ly = this.ly;
		r.lz = this.lz;
		return r;
	}
	,load: function(r) {
		this.px = r.px;
		this.py = r.py;
		this.pz = r.pz;
		this.lx = r.lx;
		this.ly = r.ly;
		this.lz = r.lz;
	}
	,normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-20) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,transform: function(m) {
		var x = this.px;
		var y = this.py;
		var z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		this.px = p_x;
		this.py = p_y;
		this.pz = p_z;
		var x = this.lx;
		var y = this.ly;
		var z = this.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var l_x = x1;
		var l_y = y1;
		var l_z = z1;
		var px = l_x * m._11 + l_y * m._21 + l_z * m._31;
		var py = l_x * m._12 + l_y * m._22 + l_z * m._32;
		var pz = l_x * m._13 + l_y * m._23 + l_z * m._33;
		l_x = px;
		l_y = py;
		l_z = pz;
		this.lx = l_x;
		this.ly = l_y;
		this.lz = l_z;
		this.normalize();
	}
	,getPos: function() {
		var x = this.px;
		var y = this.py;
		var z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,getDir: function() {
		var x = this.lx;
		var y = this.ly;
		var z = this.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,getPoint: function(distance) {
		var x = this.px + distance * this.lx;
		var y = this.py + distance * this.ly;
		var z = this.pz + distance * this.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,toString: function() {
		var x = this.px;
		var y = this.py;
		var z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var tmp = "Ray{" + Std.string(new h3d_VectorImpl(x,y,z)) + ",";
		var x = this.lx;
		var y = this.ly;
		var z = this.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return tmp + Std.string(new h3d_VectorImpl(x,y,z)) + "}";
	}
	,distance: function(p) {
		var d = this.lx * p.nx + this.ly * p.ny + this.lz * p.nz;
		var nd = p.d - (this.px * p.nx + this.py * p.ny + this.pz * p.nz);
		if((d < 0 ? -d : d) < 1e-10) {
			if((nd < 0 ? -nd : nd) < 1e-10) {
				return 0.;
			} else {
				return -1;
			}
		} else {
			return nd / d;
		}
	}
	,intersect: function(p) {
		var d = this.lx * p.nx + this.ly * p.ny + this.lz * p.nz;
		var nd = p.d - (this.px * p.nx + this.py * p.ny + this.pz * p.nz);
		if((d < 0 ? -d : d) < 1e-10) {
			if((nd < 0 ? -nd : nd) < 1e-10) {
				var x = this.px;
				var y = this.py;
				var z = this.pz;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				return new h3d_VectorImpl(x,y,z);
			} else {
				return null;
			}
		} else {
			var k = nd / d;
			var x = this.px + this.lx * k;
			var y = this.py + this.ly * k;
			var z = this.pz + this.lz * k;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			return new h3d_VectorImpl(x,y,z);
		}
	}
	,collideFrustum: function(mvp) {
		var x = this.px;
		var y = this.py;
		var z = this.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var a_x = x1;
		var a_y = y1;
		var a_z = z1;
		var px = a_x * mvp._11 + a_y * mvp._21 + a_z * mvp._31 + mvp._41;
		var py = a_x * mvp._12 + a_y * mvp._22 + a_z * mvp._32 + mvp._42;
		var pz = a_x * mvp._13 + a_y * mvp._23 + a_z * mvp._33 + mvp._43;
		var iw = 1 / (a_x * mvp._14 + a_y * mvp._24 + a_z * mvp._34 + mvp._44);
		a_x = px * iw;
		a_y = py * iw;
		a_z = pz * iw;
		var x = this.px + this.lx;
		var y = this.py + this.ly;
		var z = this.pz + this.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var b_x = x1;
		var b_y = y1;
		var b_z = z1;
		var px = b_x * mvp._11 + b_y * mvp._21 + b_z * mvp._31 + mvp._41;
		var py = b_x * mvp._12 + b_y * mvp._22 + b_z * mvp._32 + mvp._42;
		var pz = b_x * mvp._13 + b_y * mvp._23 + b_z * mvp._33 + mvp._43;
		var iw = 1 / (b_x * mvp._14 + b_y * mvp._24 + b_z * mvp._34 + mvp._44);
		b_x = px * iw;
		b_y = py * iw;
		b_z = pz * iw;
		var lx = b_x - a_x;
		var ly = b_y - a_y;
		var lz = b_z - a_z;
		var dx = 1 / lx;
		var dy = 1 / ly;
		var dz = 1 / lz;
		var t1 = (-1 - a_x) * dx;
		var t2 = (1 - a_x) * dx;
		var t3 = (-1 - a_y) * dy;
		var t4 = (1 - a_y) * dy;
		var t5 = (0 - a_z) * dz;
		var t6 = (1 - a_z) * dz;
		var a = t1 > t2 ? t2 : t1;
		var b = t3 > t4 ? t4 : t3;
		var a1 = a < b ? b : a;
		var b = t5 > t6 ? t6 : t5;
		var tmin = a1 < b ? b : a1;
		var a = t1 < t2 ? t2 : t1;
		var b = t3 < t4 ? t4 : t3;
		var a1 = a > b ? b : a;
		var b = t5 < t6 ? t6 : t5;
		var tmax = a1 > b ? b : a1;
		return !(tmax < 0 || tmin > tmax);
	}
	,collide: function(b) {
		var dx = 1 / this.lx;
		var dy = 1 / this.ly;
		var dz = 1 / this.lz;
		var t1 = (b.xMin - this.px) * dx;
		var t2 = (b.xMax - this.px) * dx;
		var t3 = (b.yMin - this.py) * dy;
		var t4 = (b.yMax - this.py) * dy;
		var t5 = (b.zMin - this.pz) * dz;
		var t6 = (b.zMax - this.pz) * dz;
		var a = t1 > t2 ? t2 : t1;
		var b = t3 > t4 ? t4 : t3;
		var a1 = a < b ? b : a;
		var b = t5 > t6 ? t6 : t5;
		var tmin = a1 < b ? b : a1;
		var a = t1 < t2 ? t2 : t1;
		var b = t3 < t4 ? t4 : t3;
		var a1 = a > b ? b : a;
		var b = t5 < t6 ? t6 : t5;
		var tmax = a1 > b ? b : a1;
		if(tmax < 0) {
			return false;
		} else if(tmin > tmax) {
			return false;
		} else {
			return true;
		}
	}
	,__class__: h3d_col_Ray
};
var h3d_col_ObjectCollider = function(obj,collider) {
	this.obj = obj;
	this.collider = collider;
};
$hxClasses["h3d.col.ObjectCollider"] = h3d_col_ObjectCollider;
h3d_col_ObjectCollider.__name__ = "h3d.col.ObjectCollider";
h3d_col_ObjectCollider.__super__ = h3d_col_Collider;
h3d_col_ObjectCollider.prototype = $extend(h3d_col_Collider.prototype,{
	rayIntersection: function(r,bestMatch) {
		var tmpRay = h3d_col_ObjectCollider.TMP_RAY;
		h3d_col_ObjectCollider.TMP_RAY = null;
		tmpRay.px = r.px;
		tmpRay.py = r.py;
		tmpRay.pz = r.pz;
		tmpRay.lx = r.lx;
		tmpRay.ly = r.ly;
		tmpRay.lz = r.lz;
		var m = this.obj.getInvPos();
		var x = r.px;
		var y = r.py;
		var z = r.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		r.px = p_x;
		r.py = p_y;
		r.pz = p_z;
		var x = r.lx;
		var y = r.ly;
		var z = r.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var l_x = x1;
		var l_y = y1;
		var l_z = z1;
		var px = l_x * m._11 + l_y * m._21 + l_z * m._31;
		var py = l_x * m._12 + l_y * m._22 + l_z * m._32;
		var pz = l_x * m._13 + l_y * m._23 + l_z * m._33;
		l_x = px;
		l_y = py;
		l_z = pz;
		r.lx = l_x;
		r.ly = l_y;
		r.lz = l_z;
		r.normalize();
		var hit = this.collider.rayIntersection(r,bestMatch);
		if(hit < 0) {
			r.px = tmpRay.px;
			r.py = tmpRay.py;
			r.pz = tmpRay.pz;
			r.lx = tmpRay.lx;
			r.ly = tmpRay.ly;
			r.lz = tmpRay.lz;
			h3d_col_ObjectCollider.TMP_RAY = tmpRay;
			return hit;
		}
		var x = r.px + hit * r.lx;
		var y = r.py + hit * r.ly;
		var z = r.pz + hit * r.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var pt_x = x1;
		var pt_y = y1;
		var pt_z = z1;
		var m = this.obj.absPos;
		var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
		var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
		var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
		pt_x = px;
		pt_y = py;
		pt_z = pz;
		r.px = tmpRay.px;
		r.py = tmpRay.py;
		r.pz = tmpRay.pz;
		r.lx = tmpRay.lx;
		r.ly = tmpRay.ly;
		r.lz = tmpRay.lz;
		h3d_col_ObjectCollider.TMP_RAY = tmpRay;
		var dx = pt_x - r.px;
		var dy = pt_y - r.py;
		var dz = pt_z - r.pz;
		if(dz == null) {
			dz = 0.;
		}
		var dz1 = dz;
		if(dz1 == null) {
			dz1 = 0.;
		}
		return Math.sqrt(dx * dx + dy * dy + dz1 * dz1);
	}
	,contains: function(p) {
		var x = p.x;
		var y = p.y;
		var z = p.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ptmp_x = x1;
		var ptmp_y = y1;
		var ptmp_z = z1;
		var m = this.obj.getInvPos();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + m._43;
		p.x = px;
		p.y = py;
		p.z = pz;
		var b = this.collider.contains(p);
		p.x = ptmp_x;
		p.y = ptmp_y;
		p.z = ptmp_z;
		return b;
	}
	,inFrustum: function(f,m) {
		if(m == null) {
			return this.collider.inFrustum(f,this.obj.getAbsPos());
		}
		var mat = h3d_col_ObjectCollider.TMP_MAT;
		var b = this.obj.getAbsPos();
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var a31 = m._31;
		var a32 = m._32;
		var a33 = m._33;
		var a41 = m._41;
		var a42 = m._42;
		var a43 = m._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		mat._11 = m11 * b11 + m12 * b21 + m13 * b31;
		mat._12 = m11 * b12 + m12 * b22 + m13 * b32;
		mat._13 = m11 * b13 + m12 * b23 + m13 * b33;
		mat._14 = 0;
		mat._21 = m21 * b11 + m22 * b21 + m23 * b31;
		mat._22 = m21 * b12 + m22 * b22 + m23 * b32;
		mat._23 = m21 * b13 + m22 * b23 + m23 * b33;
		mat._24 = 0;
		mat._31 = a31 * b11 + a32 * b21 + a33 * b31;
		mat._32 = a31 * b12 + a32 * b22 + a33 * b32;
		mat._33 = a31 * b13 + a32 * b23 + a33 * b33;
		mat._34 = 0;
		mat._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		mat._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		mat._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		mat._44 = 1;
		return this.collider.inFrustum(f,mat);
	}
	,inSphere: function(s) {
		var invMat = this.obj.getInvPos();
		var oldX = s.x;
		var oldY = s.y;
		var oldZ = s.z;
		var oldR = s.r;
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var center_x = x1;
		var center_y = y1;
		var center_z = z1;
		var px = center_x * invMat._11 + center_y * invMat._21 + center_z * invMat._31 + invMat._41;
		var py = center_x * invMat._12 + center_y * invMat._22 + center_z * invMat._32 + invMat._42;
		var pz = center_x * invMat._13 + center_y * invMat._23 + center_z * invMat._33 + invMat._43;
		center_x = px;
		center_y = py;
		center_z = pz;
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var scale_x = x;
		var scale_y = y;
		var scale_z = z;
		scale_x = Math.sqrt(invMat._11 * invMat._11 + invMat._12 * invMat._12 + invMat._13 * invMat._13);
		scale_y = Math.sqrt(invMat._21 * invMat._21 + invMat._22 * invMat._22 + invMat._23 * invMat._23);
		scale_z = Math.sqrt(invMat._31 * invMat._31 + invMat._32 * invMat._32 + invMat._33 * invMat._33);
		if(invMat._11 * (invMat._22 * invMat._33 - invMat._23 * invMat._32) + invMat._12 * (invMat._23 * invMat._31 - invMat._21 * invMat._33) + invMat._13 * (invMat._21 * invMat._32 - invMat._22 * invMat._31) < 0) {
			scale_x *= -1;
			scale_y *= -1;
			scale_z *= -1;
		}
		s.x = center_x;
		s.y = center_y;
		s.z = center_z;
		s.r *= Math.max(Math.max(scale_x,scale_y),scale_z);
		var res = this.collider.inSphere(s);
		s.x = oldX;
		s.y = oldY;
		s.z = oldZ;
		s.r = oldR;
		return res;
	}
	,makeDebugObj: function() {
		var ret = this.collider.makeDebugObj();
		if(ret != null) {
			ret.set_follow(this.obj);
		}
		return ret;
	}
	,__class__: h3d_col_ObjectCollider
});
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
$hxClasses["h3d.col.Plane"] = h3d_col_Plane;
h3d_col_Plane.__name__ = "h3d.col.Plane";
h3d_col_Plane.fromPoints = function(p0,p1,p2) {
	var x = p1.x - p0.x;
	var y = p1.y - p0.y;
	var z = p1.z - p0.z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var d1_x = x1;
	var d1_y = y1;
	var d1_z = z1;
	var x = p2.x - p0.x;
	var y = p2.y - p0.y;
	var z = p2.z - p0.z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var d2_x = x1;
	var d2_y = y1;
	var d2_z = z1;
	var x = d1_y * d2_z - d1_z * d2_y;
	var y = d1_z * d2_x - d1_x * d2_z;
	var z = d1_x * d2_y - d1_y * d2_x;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var n_x = x1;
	var n_y = y1;
	var n_z = z1;
	return new h3d_col_Plane(n_x,n_y,n_z,n_x * p0.x + n_y * p0.y + n_z * p0.z);
};
h3d_col_Plane.fromNormalPoint = function(n,p) {
	return new h3d_col_Plane(n.x,n.y,n.z,n.x * p.x + n.y * p.y + n.z * p.z);
};
h3d_col_Plane.X = function(v) {
	if(v == null) {
		v = 0.0;
	}
	return new h3d_col_Plane(1,0,0,v);
};
h3d_col_Plane.Y = function(v) {
	if(v == null) {
		v = 0.0;
	}
	return new h3d_col_Plane(0,1,0,v);
};
h3d_col_Plane.Z = function(v) {
	if(v == null) {
		v = 0.0;
	}
	return new h3d_col_Plane(0,0,1,v);
};
h3d_col_Plane.frustumLeft = function(mvp) {
	return new h3d_col_Plane(mvp._14 + mvp._11,mvp._24 + mvp._21,mvp._34 + mvp._31,-(mvp._44 + mvp._41));
};
h3d_col_Plane.frustumRight = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._11,mvp._24 - mvp._21,mvp._34 - mvp._31,mvp._41 - mvp._44);
};
h3d_col_Plane.frustumBottom = function(mvp) {
	return new h3d_col_Plane(mvp._14 + mvp._12,mvp._24 + mvp._22,mvp._34 + mvp._32,-(mvp._44 + mvp._42));
};
h3d_col_Plane.frustumTop = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._12,mvp._24 - mvp._22,mvp._34 - mvp._32,mvp._42 - mvp._44);
};
h3d_col_Plane.frustumNear = function(mvp) {
	return new h3d_col_Plane(mvp._13,mvp._23,mvp._33,-mvp._43);
};
h3d_col_Plane.frustumFar = function(mvp) {
	return new h3d_col_Plane(mvp._14 - mvp._13,mvp._24 - mvp._23,mvp._34 - mvp._33,mvp._43 - mvp._44);
};
h3d_col_Plane.prototype = {
	getNormal: function() {
		var x = this.nx;
		var y = this.ny;
		var z = this.nz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,getNormalDistance: function() {
		return this.d;
	}
	,load: function(p) {
		this.nx = p.nx;
		this.ny = p.ny;
		this.nz = p.nz;
		this.d = p.d;
	}
	,transform: function(m) {
		var m2 = new h3d_MatrixImpl();
		m2.initInverse(m);
		m2.transpose();
		var x = this.nx;
		var y = this.ny;
		var z = this.nz;
		var w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,transform3x3: function(m) {
		var m2 = new h3d_MatrixImpl();
		m2.initInverse3x3(m);
		m2.transpose();
		var x = this.nx;
		var y = this.ny;
		var z = this.nz;
		var w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m2._11 + v_y * m2._21 + v_z * m2._31 + v_w * m2._41;
		var py = v_x * m2._12 + v_y * m2._22 + v_z * m2._32 + v_w * m2._42;
		var pz = v_x * m2._13 + v_y * m2._23 + v_z * m2._33 + v_w * m2._43;
		var pw = v_x * m2._14 + v_y * m2._24 + v_z * m2._34 + v_w * m2._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,transformInverseTranspose: function(m) {
		var x = this.nx;
		var y = this.ny;
		var z = this.nz;
		var w = -this.d;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		var w1 = w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var v_w = w1;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + v_w * m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + v_w * m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + v_w * m._43;
		var pw = v_x * m._14 + v_y * m._24 + v_z * m._34 + v_w * m._44;
		v_x = px;
		v_y = py;
		v_z = pz;
		v_w = pw;
		this.nx = v_x;
		this.ny = v_y;
		this.nz = v_z;
		this.d = -v_w;
	}
	,normalize: function() {
		var len = 1. / Math.sqrt(this.nx * this.nx + this.ny * this.ny + this.nz * this.nz);
		this.nx *= len;
		this.ny *= len;
		this.nz *= len;
		this.d *= len;
	}
	,toString: function() {
		var x = this.nx;
		var y = this.ny;
		var z = this.nz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return "Plane{" + Std.string(new h3d_VectorImpl(x,y,z)) + "," + hxd_Math.fmt(this.d) + "}";
	}
	,distance: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
	}
	,side: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d >= 0;
	}
	,project: function(p) {
		var d = this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
		var x = p.x - d * this.nx;
		var y = p.y - d * this.ny;
		var z = p.z - d * this.nz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,projectTo: function(p,out) {
		var d = this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d;
		out.x = p.x - d * this.nx;
		out.y = p.y - d * this.ny;
		out.z = p.z - d * this.nz;
	}
	,__class__: h3d_col_Plane
};
var h3d_col_TriPlane = function() {
	this.next = null;
};
$hxClasses["h3d.col.TriPlane"] = h3d_col_TriPlane;
h3d_col_TriPlane.__name__ = "h3d.col.TriPlane";
h3d_col_TriPlane.__super__ = h3d_col_Collider;
h3d_col_TriPlane.prototype = $extend(h3d_col_Collider.prototype,{
	init: function(p0,p1,p2) {
		this.p0x = p0.x;
		this.p0y = p0.y;
		this.p0z = p0.z;
		var x = p1.x - p0.x;
		var y = p1.y - p0.y;
		var z = p1.z - p0.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var d1_x = x1;
		var d1_y = y1;
		var d1_z = z1;
		var x = p2.x - p0.x;
		var y = p2.y - p0.y;
		var z = p2.z - p0.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var d2_x = x1;
		var d2_y = y1;
		var d2_z = z1;
		var x = d1_y * d2_z - d1_z * d2_y;
		var y = d1_z * d2_x - d1_x * d2_z;
		var z = d1_x * d2_y - d1_y * d2_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var n_x = x1;
		var n_y = y1;
		var n_z = z1;
		this.d = n_x * p0.x + n_y * p0.y + n_z * p0.z;
		this.nx = n_x;
		this.ny = n_y;
		this.nz = n_z;
		this.d1x = d1_x;
		this.d1y = d1_y;
		this.d1z = d1_z;
		this.d2x = d2_x;
		this.d2y = d2_y;
		this.d2z = d2_z;
		this.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
		this.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
		this.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
		this.invDenom = 1 / (this.dot00 * this.dot11 - this.dot01 * this.dot01);
	}
	,clone: function() {
		var clone = new h3d_col_TriPlane();
		clone.p0x = this.p0x;
		clone.p0y = this.p0y;
		clone.p0z = this.p0z;
		clone.d1x = this.d1x;
		clone.d1y = this.d1y;
		clone.d1z = this.d1z;
		clone.d2x = this.d2x;
		clone.d2y = this.d2y;
		clone.d2z = this.d2z;
		clone.dot00 = this.dot00;
		clone.dot01 = this.dot01;
		clone.dot11 = this.dot11;
		clone.invDenom = this.invDenom;
		clone.nx = this.nx;
		clone.ny = this.ny;
		clone.nz = this.nz;
		clone.d = this.d;
		if(this.next != null) {
			clone.next = this.next.clone();
		}
		return clone;
	}
	,load: function(tp) {
		this.p0x = tp.p0x;
		this.p0y = tp.p0y;
		this.p0z = tp.p0z;
		this.d1x = tp.d1x;
		this.d1y = tp.d1y;
		this.d1z = tp.d1z;
		this.d2x = tp.d2x;
		this.d2y = tp.d2y;
		this.d2z = tp.d2z;
		this.dot00 = tp.dot00;
		this.dot01 = tp.dot01;
		this.dot11 = tp.dot11;
		this.invDenom = tp.invDenom;
		this.nx = tp.nx;
		this.ny = tp.ny;
		this.nz = tp.nz;
		this.d = tp.d;
	}
	,transform: function(m) {
		var x = this.p0x;
		var y = this.p0y;
		var z = this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p0_x = x1;
		var p0_y = y1;
		var p0_z = z1;
		var x = this.d1x + this.p0x;
		var y = this.d1y + this.p0y;
		var z = this.d1z + this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p1_x = x1;
		var p1_y = y1;
		var p1_z = z1;
		var x = this.d2x + this.p0x;
		var y = this.d2y + this.p0y;
		var z = this.d2z + this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p2_x = x1;
		var p2_y = y1;
		var p2_z = z1;
		var px = p0_x * m._11 + p0_y * m._21 + p0_z * m._31 + m._41;
		var py = p0_x * m._12 + p0_y * m._22 + p0_z * m._32 + m._42;
		var pz = p0_x * m._13 + p0_y * m._23 + p0_z * m._33 + m._43;
		p0_x = px;
		p0_y = py;
		p0_z = pz;
		var px = p1_x * m._11 + p1_y * m._21 + p1_z * m._31 + m._41;
		var py = p1_x * m._12 + p1_y * m._22 + p1_z * m._32 + m._42;
		var pz = p1_x * m._13 + p1_y * m._23 + p1_z * m._33 + m._43;
		p1_x = px;
		p1_y = py;
		p1_z = pz;
		var px = p2_x * m._11 + p2_y * m._21 + p2_z * m._31 + m._41;
		var py = p2_x * m._12 + p2_y * m._22 + p2_z * m._32 + m._42;
		var pz = p2_x * m._13 + p2_y * m._23 + p2_z * m._33 + m._43;
		p2_x = px;
		p2_y = py;
		p2_z = pz;
		this.p0x = p0_x;
		this.p0y = p0_y;
		this.p0z = p0_z;
		var x = p1_x - p0_x;
		var y = p1_y - p0_y;
		var z = p1_z - p0_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var d1_x = x1;
		var d1_y = y1;
		var d1_z = z1;
		var x = p2_x - p0_x;
		var y = p2_y - p0_y;
		var z = p2_z - p0_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var d2_x = x1;
		var d2_y = y1;
		var d2_z = z1;
		var x = d1_y * d2_z - d1_z * d2_y;
		var y = d1_z * d2_x - d1_x * d2_z;
		var z = d1_x * d2_y - d1_y * d2_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var n_x = x1;
		var n_y = y1;
		var n_z = z1;
		this.d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
		this.nx = n_x;
		this.ny = n_y;
		this.nz = n_z;
		this.d1x = d1_x;
		this.d1y = d1_y;
		this.d1z = d1_z;
		this.d2x = d2_x;
		this.d2y = d2_y;
		this.d2z = d2_z;
		this.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
		this.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
		this.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
		this.invDenom = 1 / (this.dot00 * this.dot11 - this.dot01 * this.dot01);
	}
	,contains: function(p) {
		var x = p.x - this.p0x;
		var y = p.y - this.p0y;
		var z = p.z - this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v2_x = x1;
		var v2_y = y1;
		var v2_z = z1;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(u >= 0 && v >= 0) {
			return u + v < 1;
		} else {
			return false;
		}
	}
	,side: function(p) {
		return this.nx * p.x + this.ny * p.y + this.nz * p.z - this.d >= 0;
	}
	,inFrustum: function(f,m) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,inSphere: function(s) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,rayIntersection: function(r,bestMatch) {
		var dr = r.lx * this.nx + r.ly * this.ny + r.lz * this.nz;
		if(dr >= 0) {
			return -1.;
		}
		var nd = this.d - (r.px * this.nx + r.py * this.ny + r.pz * this.nz);
		var k = nd / dr;
		if(k < 0) {
			return -1;
		}
		var px = r.px + r.lx * k;
		var py = r.py + r.ly * k;
		var pz = r.pz + r.lz * k;
		var x = px - this.p0x;
		var y = py - this.p0y;
		var z = pz - this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v2_x = x1;
		var v2_y = y1;
		var v2_z = z1;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(!(u >= 0 && v >= 0 && u + v < 1)) {
			return -1;
		}
		return k;
	}
	,isPointInTriangle: function(x,y,z) {
		var x1 = x - this.p0x;
		var y1 = y - this.p0y;
		var z1 = z - this.p0z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var x = x1;
		var y = y1;
		var z = z1;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v2_x = x;
		var v2_y = y;
		var v2_z = z;
		var dot02 = this.d1x * v2_x + this.d1y * v2_y + this.d1z * v2_z;
		var dot12 = this.d2x * v2_x + this.d2y * v2_y + this.d2z * v2_z;
		var u = (this.dot11 * dot02 - this.dot01 * dot12) * this.invDenom;
		var v = (this.dot00 * dot12 - this.dot01 * dot02) * this.invDenom;
		if(u >= 0 && v >= 0) {
			return u + v < 1;
		} else {
			return false;
		}
	}
	,getPoints: function() {
		var x = this.p0x;
		var y = this.p0y;
		var z = this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var this1 = new h3d_VectorImpl(x,y,z);
		var x = this.d1x + this.p0x;
		var y = this.d1y + this.p0y;
		var z = this.d1z + this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var this2 = new h3d_VectorImpl(x,y,z);
		var x = this.d2x + this.p0x;
		var y = this.d2y + this.p0y;
		var z = this.d2z + this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return [this1,this2,new h3d_VectorImpl(x,y,z)];
	}
	,makeDebugObj: function() {
		var x = this.p0x;
		var y = this.p0y;
		var z = this.p0z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p0 = new h3d_VectorImpl(x,y,z);
		var x = this.d1x;
		var y = this.d1y;
		var z = this.d1z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var d1_x = x1;
		var d1_y = y1;
		var d1_z = z1;
		var x = this.d2x;
		var y = this.d2y;
		var z = this.d2z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var d2_x = x1;
		var d2_y = y1;
		var d2_z = z1;
		var x = d1_x + p0.x;
		var y = d1_y + p0.y;
		var z = d1_z + p0.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var this1 = new h3d_VectorImpl(x,y,z);
		var x = d2_x + p0.x;
		var y = d2_y + p0.y;
		var z = d2_z + p0.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var points = [p0,this1,new h3d_VectorImpl(x,y,z)];
		var prim = new h3d_prim_Polygon(points);
		prim.addNormals();
		return new h3d_scene_Mesh(prim);
	}
	,__class__: h3d_col_TriPlane
});
var h3d_col_Polygon = function() {
};
$hxClasses["h3d.col.Polygon"] = h3d_col_Polygon;
h3d_col_Polygon.__name__ = "h3d.col.Polygon";
h3d_col_Polygon.fromPolygon2D = function(p,z) {
	if(z == null) {
		z = 0.;
	}
	var pout = new h3d_col_Polygon();
	if(h2d_col_Polygon.isConvex(p)) {
		var p0 = p[0];
		var _g = 0;
		var _g1 = p.length - 2;
		while(_g < _g1) {
			var i = _g++;
			var p1 = p[i + 1];
			var p2 = p[i + 2];
			var t = new h3d_col_TriPlane();
			var x = p0.x;
			var y = p0.y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z2 = z1;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p0_x = x1;
			var p0_y = y1;
			var p0_z = z2;
			var x2 = p1.x;
			var y2 = p1.y;
			var z3 = z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var x3 = x2;
			var y3 = y2;
			var z4 = z3;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var p1_x = x3;
			var p1_y = y3;
			var p1_z = z4;
			var x4 = p2.x;
			var y4 = p2.y;
			var z5 = z;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var x5 = x4;
			var y5 = y4;
			var z6 = z5;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var p2_x = x5;
			var p2_y = y5;
			var p2_z = z6;
			t.p0x = p0_x;
			t.p0y = p0_y;
			t.p0z = p0_z;
			var x6 = p1_x - p0_x;
			var y6 = p1_y - p0_y;
			var z7 = p1_z - p0_z;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var x7 = x6;
			var y7 = y6;
			var z8 = z7;
			if(z8 == null) {
				z8 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			var d1_x = x7;
			var d1_y = y7;
			var d1_z = z8;
			var x8 = p2_x - p0_x;
			var y8 = p2_y - p0_y;
			var z9 = p2_z - p0_z;
			if(z9 == null) {
				z9 = 0.;
			}
			if(y8 == null) {
				y8 = 0.;
			}
			if(x8 == null) {
				x8 = 0.;
			}
			var x9 = x8;
			var y9 = y8;
			var z10 = z9;
			if(z10 == null) {
				z10 = 0.;
			}
			if(y9 == null) {
				y9 = 0.;
			}
			if(x9 == null) {
				x9 = 0.;
			}
			var d2_x = x9;
			var d2_y = y9;
			var d2_z = z10;
			var x10 = d1_y * d2_z - d1_z * d2_y;
			var y10 = d1_z * d2_x - d1_x * d2_z;
			var z11 = d1_x * d2_y - d1_y * d2_x;
			if(z11 == null) {
				z11 = 0.;
			}
			if(y10 == null) {
				y10 = 0.;
			}
			if(x10 == null) {
				x10 = 0.;
			}
			var x11 = x10;
			var y11 = y10;
			var z12 = z11;
			if(z12 == null) {
				z12 = 0.;
			}
			if(y11 == null) {
				y11 = 0.;
			}
			if(x11 == null) {
				x11 = 0.;
			}
			var n_x = x11;
			var n_y = y11;
			var n_z = z12;
			t.d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
			t.nx = n_x;
			t.ny = n_y;
			t.nz = n_z;
			t.d1x = d1_x;
			t.d1y = d1_y;
			t.d1z = d1_z;
			t.d2x = d2_x;
			t.d2y = d2_y;
			t.d2z = d2_z;
			t.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
			t.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
			t.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
			t.invDenom = 1 / (t.dot00 * t.dot11 - t.dot01 * t.dot01);
			t.next = pout.triPlanes;
			pout.triPlanes = t;
		}
	} else {
		var idx = h2d_col_Polygon.fastTriangulate(p);
		var _g = 0;
		var _g1 = idx.length / 3 | 0;
		while(_g < _g1) {
			var i = _g++;
			var p0 = p[idx[i * 3]];
			var p1 = p[idx[i * 3 + 1]];
			var p2 = p[idx[i * 3 + 2]];
			var t = new h3d_col_TriPlane();
			var x = p0.x;
			var y = p0.y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z2 = z1;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p0_x = x1;
			var p0_y = y1;
			var p0_z = z2;
			var x2 = p1.x;
			var y2 = p1.y;
			var z3 = z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var x3 = x2;
			var y3 = y2;
			var z4 = z3;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var p1_x = x3;
			var p1_y = y3;
			var p1_z = z4;
			var x4 = p2.x;
			var y4 = p2.y;
			var z5 = z;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var x5 = x4;
			var y5 = y4;
			var z6 = z5;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var p2_x = x5;
			var p2_y = y5;
			var p2_z = z6;
			t.p0x = p0_x;
			t.p0y = p0_y;
			t.p0z = p0_z;
			var x6 = p1_x - p0_x;
			var y6 = p1_y - p0_y;
			var z7 = p1_z - p0_z;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var x7 = x6;
			var y7 = y6;
			var z8 = z7;
			if(z8 == null) {
				z8 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			var d1_x = x7;
			var d1_y = y7;
			var d1_z = z8;
			var x8 = p2_x - p0_x;
			var y8 = p2_y - p0_y;
			var z9 = p2_z - p0_z;
			if(z9 == null) {
				z9 = 0.;
			}
			if(y8 == null) {
				y8 = 0.;
			}
			if(x8 == null) {
				x8 = 0.;
			}
			var x9 = x8;
			var y9 = y8;
			var z10 = z9;
			if(z10 == null) {
				z10 = 0.;
			}
			if(y9 == null) {
				y9 = 0.;
			}
			if(x9 == null) {
				x9 = 0.;
			}
			var d2_x = x9;
			var d2_y = y9;
			var d2_z = z10;
			var x10 = d1_y * d2_z - d1_z * d2_y;
			var y10 = d1_z * d2_x - d1_x * d2_z;
			var z11 = d1_x * d2_y - d1_y * d2_x;
			if(z11 == null) {
				z11 = 0.;
			}
			if(y10 == null) {
				y10 = 0.;
			}
			if(x10 == null) {
				x10 = 0.;
			}
			var x11 = x10;
			var y11 = y10;
			var z12 = z11;
			if(z12 == null) {
				z12 = 0.;
			}
			if(y11 == null) {
				y11 = 0.;
			}
			if(x11 == null) {
				x11 = 0.;
			}
			var n_x = x11;
			var n_y = y11;
			var n_z = z12;
			t.d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
			t.nx = n_x;
			t.ny = n_y;
			t.nz = n_z;
			t.d1x = d1_x;
			t.d1y = d1_y;
			t.d1z = d1_z;
			t.d2x = d2_x;
			t.d2y = d2_y;
			t.d2z = d2_z;
			t.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
			t.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
			t.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
			t.invDenom = 1 / (t.dot00 * t.dot11 - t.dot01 * t.dot01);
			t.next = pout.triPlanes;
			pout.triPlanes = t;
		}
	}
	return pout;
};
h3d_col_Polygon.__super__ = h3d_col_Collider;
h3d_col_Polygon.prototype = $extend(h3d_col_Collider.prototype,{
	addBuffers: function(vertexes,indexes,stride) {
		if(stride == null) {
			stride = 3;
		}
		var _g = 0;
		var _g1 = indexes.length / 3 | 0;
		while(_g < _g1) {
			var i = _g++;
			var k = i * 3;
			var t = new h3d_col_TriPlane();
			var i0 = indexes[k] * stride;
			var i1 = indexes[k + 1] * stride;
			var i2 = indexes[k + 2] * stride;
			var x = vertexes[i0];
			var y = vertexes[i0 + 1];
			var z = vertexes[i0 + 2];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p0_x = x1;
			var p0_y = y1;
			var p0_z = z1;
			var x2 = vertexes[i1];
			var y2 = vertexes[i1 + 1];
			var z2 = vertexes[i1 + 2];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var x3 = x2;
			var y3 = y2;
			var z3 = z2;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var p1_x = x3;
			var p1_y = y3;
			var p1_z = z3;
			var x4 = vertexes[i2];
			var y4 = vertexes[i2 + 1];
			var z4 = vertexes[i2 + 2];
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var x5 = x4;
			var y5 = y4;
			var z5 = z4;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var p2_x = x5;
			var p2_y = y5;
			var p2_z = z5;
			t.p0x = p0_x;
			t.p0y = p0_y;
			t.p0z = p0_z;
			var x6 = p1_x - p0_x;
			var y6 = p1_y - p0_y;
			var z6 = p1_z - p0_z;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var x7 = x6;
			var y7 = y6;
			var z7 = z6;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			var d1_x = x7;
			var d1_y = y7;
			var d1_z = z7;
			var x8 = p2_x - p0_x;
			var y8 = p2_y - p0_y;
			var z8 = p2_z - p0_z;
			if(z8 == null) {
				z8 = 0.;
			}
			if(y8 == null) {
				y8 = 0.;
			}
			if(x8 == null) {
				x8 = 0.;
			}
			var x9 = x8;
			var y9 = y8;
			var z9 = z8;
			if(z9 == null) {
				z9 = 0.;
			}
			if(y9 == null) {
				y9 = 0.;
			}
			if(x9 == null) {
				x9 = 0.;
			}
			var d2_x = x9;
			var d2_y = y9;
			var d2_z = z9;
			var x10 = d1_y * d2_z - d1_z * d2_y;
			var y10 = d1_z * d2_x - d1_x * d2_z;
			var z10 = d1_x * d2_y - d1_y * d2_x;
			if(z10 == null) {
				z10 = 0.;
			}
			if(y10 == null) {
				y10 = 0.;
			}
			if(x10 == null) {
				x10 = 0.;
			}
			var x11 = x10;
			var y11 = y10;
			var z11 = z10;
			if(z11 == null) {
				z11 = 0.;
			}
			if(y11 == null) {
				y11 = 0.;
			}
			if(x11 == null) {
				x11 = 0.;
			}
			var n_x = x11;
			var n_y = y11;
			var n_z = z11;
			t.d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
			t.nx = n_x;
			t.ny = n_y;
			t.nz = n_z;
			t.d1x = d1_x;
			t.d1y = d1_y;
			t.d1z = d1_z;
			t.d2x = d2_x;
			t.d2y = d2_y;
			t.d2z = d2_z;
			t.dot00 = d1_x * d1_x + d1_y * d1_y + d1_z * d1_z;
			t.dot01 = d1_x * d2_x + d1_y * d2_y + d1_z * d2_z;
			t.dot11 = d2_x * d2_x + d2_y * d2_y + d2_z * d2_z;
			t.invDenom = 1 / (t.dot00 * t.dot11 - t.dot01 * t.dot01);
			t.next = this.triPlanes;
			this.triPlanes = t;
		}
	}
	,isConvex: function() {
		return true;
	}
	,clone: function() {
		var clone = new h3d_col_Polygon();
		var _this = this.triPlanes;
		var clone1 = new h3d_col_TriPlane();
		clone1.p0x = _this.p0x;
		clone1.p0y = _this.p0y;
		clone1.p0z = _this.p0z;
		clone1.d1x = _this.d1x;
		clone1.d1y = _this.d1y;
		clone1.d1z = _this.d1z;
		clone1.d2x = _this.d2x;
		clone1.d2y = _this.d2y;
		clone1.d2z = _this.d2z;
		clone1.dot00 = _this.dot00;
		clone1.dot01 = _this.dot01;
		clone1.dot11 = _this.dot11;
		clone1.invDenom = _this.invDenom;
		clone1.nx = _this.nx;
		clone1.ny = _this.ny;
		clone1.nz = _this.nz;
		clone1.d = _this.d;
		if(_this.next != null) {
			var _this1 = _this.next;
			var clone2 = new h3d_col_TriPlane();
			clone2.p0x = _this1.p0x;
			clone2.p0y = _this1.p0y;
			clone2.p0z = _this1.p0z;
			clone2.d1x = _this1.d1x;
			clone2.d1y = _this1.d1y;
			clone2.d1z = _this1.d1z;
			clone2.d2x = _this1.d2x;
			clone2.d2y = _this1.d2y;
			clone2.d2z = _this1.d2z;
			clone2.dot00 = _this1.dot00;
			clone2.dot01 = _this1.dot01;
			clone2.dot11 = _this1.dot11;
			clone2.invDenom = _this1.invDenom;
			clone2.nx = _this1.nx;
			clone2.ny = _this1.ny;
			clone2.nz = _this1.nz;
			clone2.d = _this1.d;
			if(_this1.next != null) {
				clone2.next = _this1.next.clone();
			}
			clone1.next = clone2;
		}
		clone.triPlanes = clone1;
		return clone;
	}
	,transform: function(m) {
		var t = this.triPlanes;
		while(t != null) {
			t.transform(m);
			t = t.next;
		}
	}
	,getPoints: function() {
		var ret = [];
		var t = this.triPlanes;
		while(t != null) {
			ret = ret.concat(t.getPoints());
			t = t.next;
		}
		return ret;
	}
	,getBounds: function(bnds) {
		if(bnds == null) {
			bnds = new h3d_col_Bounds();
		}
		bnds.xMin = 1e20;
		bnds.xMax = -1e20;
		bnds.yMin = 1e20;
		bnds.yMax = -1e20;
		bnds.zMin = 1e20;
		bnds.zMax = -1e20;
		var t = this.triPlanes;
		while(t != null) {
			var x = t.p0x;
			var y = t.p0y;
			var z = t.p0z;
			if(x < bnds.xMin) {
				bnds.xMin = x;
			}
			if(x > bnds.xMax) {
				bnds.xMax = x;
			}
			if(y < bnds.yMin) {
				bnds.yMin = y;
			}
			if(y > bnds.yMax) {
				bnds.yMax = y;
			}
			if(z < bnds.zMin) {
				bnds.zMin = z;
			}
			if(z > bnds.zMax) {
				bnds.zMax = z;
			}
			var x1 = t.d1x + t.p0x;
			var y1 = t.d1y + t.p0y;
			var z1 = t.d1z + t.p0z;
			if(x1 < bnds.xMin) {
				bnds.xMin = x1;
			}
			if(x1 > bnds.xMax) {
				bnds.xMax = x1;
			}
			if(y1 < bnds.yMin) {
				bnds.yMin = y1;
			}
			if(y1 > bnds.yMax) {
				bnds.yMax = y1;
			}
			if(z1 < bnds.zMin) {
				bnds.zMin = z1;
			}
			if(z1 > bnds.zMax) {
				bnds.zMax = z1;
			}
			var x2 = t.d2x + t.p0x;
			var y2 = t.d2y + t.p0y;
			var z2 = t.d2z + t.p0z;
			if(x2 < bnds.xMin) {
				bnds.xMin = x2;
			}
			if(x2 > bnds.xMax) {
				bnds.xMax = x2;
			}
			if(y2 < bnds.yMin) {
				bnds.yMin = y2;
			}
			if(y2 > bnds.yMax) {
				bnds.yMax = y2;
			}
			if(z2 < bnds.zMin) {
				bnds.zMin = z2;
			}
			if(z2 > bnds.zMax) {
				bnds.zMax = z2;
			}
			t = t.next;
		}
		return bnds;
	}
	,contains: function(p) {
		if(!this.isConvex()) {
			throw haxe_Exception.thrown("Not implemented for concave polygon");
		}
		var t = this.triPlanes;
		while(t != null) {
			if(t.nx * p.x + t.ny * p.y + t.nz * p.z - t.d >= 0) {
				return false;
			}
			t = t.next;
		}
		return true;
	}
	,rayIntersection: function(r,bestMatch) {
		var t = this.triPlanes;
		var best = -1.;
		while(t != null) {
			var dr = r.lx * t.nx + r.ly * t.ny + r.lz * t.nz;
			var d;
			if(dr >= 0) {
				d = -1.;
			} else {
				var nd = t.d - (r.px * t.nx + r.py * t.ny + r.pz * t.nz);
				var k = nd / dr;
				if(k < 0) {
					d = -1;
				} else {
					var px = r.px + r.lx * k;
					var py = r.py + r.ly * k;
					var pz = r.pz + r.lz * k;
					var x = px - t.p0x;
					var y = py - t.p0y;
					var z = pz - t.p0z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v2_x = x1;
					var v2_y = y1;
					var v2_z = z1;
					var dot02 = t.d1x * v2_x + t.d1y * v2_y + t.d1z * v2_z;
					var dot12 = t.d2x * v2_x + t.d2y * v2_y + t.d2z * v2_z;
					var u = (t.dot11 * dot02 - t.dot01 * dot12) * t.invDenom;
					var v = (t.dot00 * dot12 - t.dot01 * dot02) * t.invDenom;
					d = !(u >= 0 && v >= 0 && u + v < 1) ? -1 : k;
				}
			}
			if(d >= 0) {
				if(!bestMatch) {
					return d;
				}
				if(best < 0 || d < best) {
					best = d;
				}
			}
			t = t.next;
		}
		return best;
	}
	,inFrustum: function(f,m) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,inSphere: function(s) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,makeDebugObj: function() {
		var points = [];
		var idx = new Array(0);
		var t = this.triPlanes;
		while(t != null) {
			var x = t.p0x;
			var y = t.p0y;
			var z = t.p0z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p0 = new h3d_VectorImpl(x,y,z);
			var x1 = t.d1x;
			var y1 = t.d1y;
			var z1 = t.d1z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var x2 = x1;
			var y2 = y1;
			var z2 = z1;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var d1_x = x2;
			var d1_y = y2;
			var d1_z = z2;
			var x3 = t.d2x;
			var y3 = t.d2y;
			var z3 = t.d2z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var x4 = x3;
			var y4 = y3;
			var z4 = z3;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var d2_x = x4;
			var d2_y = y4;
			var d2_z = z4;
			points.push(p0);
			var x5 = d1_x + p0.x;
			var y5 = d1_y + p0.y;
			var z5 = d1_z + p0.z;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			points.push(new h3d_VectorImpl(x5,y5,z5));
			var x6 = d2_x + p0.x;
			var y6 = d2_y + p0.y;
			var z6 = d2_z + p0.z;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			points.push(new h3d_VectorImpl(x6,y6,z6));
			t = t.next;
		}
		var prim = new h3d_prim_Polygon(points);
		prim.addNormals();
		return new h3d_scene_Mesh(prim);
	}
	,__class__: h3d_col_Polygon
});
var h3d_col_PolygonBuffer = function() {
};
$hxClasses["h3d.col.PolygonBuffer"] = h3d_col_PolygonBuffer;
h3d_col_PolygonBuffer.__name__ = "h3d.col.PolygonBuffer";
h3d_col_PolygonBuffer.__super__ = h3d_col_Collider;
h3d_col_PolygonBuffer.prototype = $extend(h3d_col_Collider.prototype,{
	setData: function(buffer,indexes,startIndex,triCount) {
		if(triCount == null) {
			triCount = -1;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		this.buffer = buffer;
		this.indexes = indexes;
		this.startIndex = startIndex;
		this.triCount = triCount >= 0 ? triCount : (indexes.length - startIndex) / 3 | 0;
	}
	,getBounds: function() {
		var i = this.startIndex;
		var b = new h3d_col_Bounds();
		var _g = 0;
		var _g1 = this.triCount * 3;
		while(_g < _g1) {
			var t = _g++;
			var pos = this.indexes[i++] * 3;
			var x = this.buffer[pos++];
			var y = this.buffer[pos++];
			var z = this.buffer[pos];
			if(x < b.xMin) {
				b.xMin = x;
			}
			if(x > b.xMax) {
				b.xMax = x;
			}
			if(y < b.yMin) {
				b.yMin = y;
			}
			if(y > b.yMax) {
				b.yMax = y;
			}
			if(z < b.zMin) {
				b.zMin = z;
			}
			if(z > b.zMax) {
				b.zMax = z;
			}
		}
		return b;
	}
	,getPoints: function() {
		var vmin = 1073741824;
		var vmax = -1073741824;
		var _g = this.startIndex;
		var _g1 = this.startIndex + this.triCount * 3;
		while(_g < _g1) {
			var i = _g++;
			var pos = this.indexes[i];
			if(pos < vmin) {
				vmin = pos;
			}
			if(pos > vmax) {
				vmax = pos;
			}
		}
		var vcount = vmax + 1 - vmin;
		var bits = hxd_impl_BitSet._new(vcount);
		var points = [];
		var _g = this.startIndex;
		var _g1 = this.startIndex + this.triCount * 3;
		while(_g < _g1) {
			var i = _g++;
			var pos = this.indexes[i];
			var vidx = pos - vmin;
			if(!hxd_impl_BitSet.get(bits,vidx)) {
				pos *= 3;
				points.push(new h3d_col_FPoint(this.buffer[pos++],this.buffer[pos++],this.buffer[pos]));
				hxd_impl_BitSet.set(bits,vidx);
			}
		}
		return points;
	}
	,contains: function(p) {
		var i = this.startIndex;
		var x = p.x;
		var y = p.y;
		var z = p.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var _g = 0;
		var _g1 = this.triCount;
		while(_g < _g1) {
			var t = _g++;
			var i0 = this.indexes[i++] * 3;
			var x = this.buffer[i0++];
			var y = this.buffer[i0++];
			var z = this.buffer[i0];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p0_x = x;
			var p0_y = y;
			var p0_z = z;
			var i1 = this.indexes[i++] * 3;
			var x1 = this.buffer[i1++];
			var y1 = this.buffer[i1++];
			var z1 = this.buffer[i1];
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p1_x = x1;
			var p1_y = y1;
			var p1_z = z1;
			var i2 = this.indexes[i++] * 3;
			var x2 = this.buffer[i2++];
			var y2 = this.buffer[i2++];
			var z2 = this.buffer[i2];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p2_x = x2;
			var p2_y = y2;
			var p2_z = z2;
			var x3 = p1_x - p0_x;
			var y3 = p1_y - p0_y;
			var z3 = p1_z - p0_z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var d1_x = x3;
			var d1_y = y3;
			var d1_z = z3;
			var x4 = p2_x - p0_x;
			var y4 = p2_y - p0_y;
			var z4 = p2_z - p0_z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var d2_x = x4;
			var d2_y = y4;
			var d2_z = z4;
			var x5 = d1_y * d2_z - d1_z * d2_y;
			var y5 = d1_z * d2_x - d1_x * d2_z;
			var z5 = d1_x * d2_y - d1_y * d2_x;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var n_x = x5;
			var n_y = y5;
			var n_z = z5;
			var d = n_x * p0_x + n_y * p0_y + n_z * p0_z;
			if(n_x * p_x + n_y * p_y + n_z * p_z >= d) {
				return false;
			}
		}
		return true;
	}
	,inFrustum: function(f,m) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,inSphere: function(s) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,rayIntersection: function(r,bestMatch) {
		var i = this.startIndex;
		var x = r.lx;
		var y = r.ly;
		var z = r.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var rdir_x = x;
		var rdir_y = y;
		var rdir_z = z;
		var x = r.px;
		var y = r.py;
		var z = r.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var r0_x = x;
		var r0_y = y;
		var r0_z = z;
		var best = -1.;
		var _g = 0;
		var _g1 = this.triCount;
		while(_g < _g1) {
			var t = _g++;
			var i0 = this.indexes[i++] * 3;
			var x = this.buffer[i0++];
			var y = this.buffer[i0++];
			var z = this.buffer[i0];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p0_x = x;
			var p0_y = y;
			var p0_z = z;
			var i1 = this.indexes[i++] * 3;
			var x1 = this.buffer[i1++];
			var y1 = this.buffer[i1++];
			var z1 = this.buffer[i1];
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p1_x = x1;
			var p1_y = y1;
			var p1_z = z1;
			var i2 = this.indexes[i++] * 3;
			var x2 = this.buffer[i2++];
			var y2 = this.buffer[i2++];
			var z2 = this.buffer[i2];
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p2_x = x2;
			var p2_y = y2;
			var p2_z = z2;
			var x3 = p1_x - p0_x;
			var y3 = p1_y - p0_y;
			var z3 = p1_z - p0_z;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var e1_x = x3;
			var e1_y = y3;
			var e1_z = z3;
			var x4 = p2_x - p0_x;
			var y4 = p2_y - p0_y;
			var z4 = p2_z - p0_z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var e2_x = x4;
			var e2_y = y4;
			var e2_z = z4;
			var x5 = rdir_y * e2_z - rdir_z * e2_y;
			var y5 = rdir_z * e2_x - rdir_x * e2_z;
			var z5 = rdir_x * e2_y - rdir_y * e2_x;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var p_x = x5;
			var p_y = y5;
			var p_z = z5;
			var det = e1_x * p_x + e1_y * p_y + e1_z * p_z;
			if(det < 1e-10) {
				continue;
			}
			var invDet = 1 / det;
			var x6 = r0_x - p0_x;
			var y6 = r0_y - p0_y;
			var z6 = r0_z - p0_z;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var T_x = x6;
			var T_y = y6;
			var T_z = z6;
			var u = (T_x * p_x + T_y * p_y + T_z * p_z) * invDet;
			if(u < 0 || u > 1) {
				continue;
			}
			var x7 = T_y * e1_z - T_z * e1_y;
			var y7 = T_z * e1_x - T_x * e1_z;
			var z7 = T_x * e1_y - T_y * e1_x;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			var q_x = x7;
			var q_y = y7;
			var q_z = z7;
			var v = (rdir_x * q_x + rdir_y * q_y + rdir_z * q_z) * invDet;
			if(v < 0 || u + v > 1) {
				continue;
			}
			var t1 = (e2_x * q_x + e2_y * q_y + e2_z * q_z) * invDet;
			if(t1 < 1e-10) {
				continue;
			}
			if(!bestMatch) {
				return t1;
			}
			if(best < 0 || t1 < best) {
				best = t1;
			}
		}
		return best;
	}
	,makeDebugObj: function() {
		var points = [];
		var idx = new Array(0);
		var i = this.startIndex;
		var _g = 0;
		var _g1 = this.triCount;
		while(_g < _g1) {
			var t = _g++;
			idx.push(this.indexes[i++]);
			idx.push(this.indexes[i++]);
			idx.push(this.indexes[i++]);
		}
		i = 0;
		while(i < this.buffer.length) {
			var x = this.buffer[i++];
			var y = this.buffer[i++];
			var z = this.buffer[i++];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			points.push(new h3d_VectorImpl(x,y,z));
		}
		var prim = new h3d_prim_Polygon(points,idx);
		prim.addNormals();
		return new h3d_scene_Mesh(prim);
	}
	,__class__: h3d_col_PolygonBuffer
});
var h3d_col_SkinCollider = function(obj,col) {
	this.lastBoundsFrame = -1;
	this.lastFrame = -1;
	this.obj = obj;
	this.col = col;
	this.transform = new h3d_col_PolygonBuffer();
	var tmp = this.transform;
	var this1 = col.buffer;
	var r = new Array(this1.length);
	haxe_ds_Vector.blit(this1,0,r,0,this1.length);
	tmp.setData(r,col.indexes,col.startIndex,col.triCount);
	this.currentBounds = new h3d_col_Bounds();
};
$hxClasses["h3d.col.SkinCollider"] = h3d_col_SkinCollider;
h3d_col_SkinCollider.__name__ = "h3d.col.SkinCollider";
h3d_col_SkinCollider.__super__ = h3d_col_Collider;
h3d_col_SkinCollider.prototype = $extend(h3d_col_Collider.prototype,{
	contains: function(p) {
		this.checkBounds();
		var _this = this.currentBounds;
		if(!(p.x >= _this.xMin && p.x < _this.xMax && p.y >= _this.yMin && p.y < _this.yMax && p.z >= _this.zMin && p.z < _this.zMax)) {
			return false;
		}
		this.applyTransform();
		return this.transform.contains(p);
	}
	,inFrustum: function(p,m) {
		this.checkBounds();
		var _this = this.currentBounds;
		if(m != null) {
			throw haxe_Exception.thrown("Not implemented");
		}
		if(!p.hasBounds(_this)) {
			return false;
		}
		if(m != null) {
			throw haxe_Exception.thrown("Not implemented");
		}
		this.applyTransform();
		return this.transform.inFrustum(p);
	}
	,inSphere: function(s) {
		this.checkBounds();
		var _this = this.currentBounds;
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var c_x = x1;
		var c_y = y1;
		var c_z = z1;
		var a = _this.xMin;
		var a1 = s.x;
		var b = _this.xMax;
		var b1 = a1 > b ? b : a1;
		var x = a < b1 ? b1 : a;
		var a = _this.yMin;
		var a1 = s.y;
		var b = _this.yMax;
		var b1 = a1 > b ? b : a1;
		var y = a < b1 ? b1 : a;
		var a = _this.zMin;
		var a1 = s.z;
		var b = _this.zMax;
		var b1 = a1 > b ? b : a1;
		var z = a < b1 ? b1 : a;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var dx = p_x - c_x;
		var dy = p_y - c_y;
		var dz = p_z - c_z;
		if(!(dx * dx + dy * dy + dz * dz < s.r * s.r)) {
			return false;
		}
		this.applyTransform();
		throw haxe_Exception.thrown("Not implemented");
	}
	,rayIntersection: function(r,bestMatch) {
		this.checkBounds();
		if(this.currentBounds.rayIntersection(r,false) < 0) {
			return -1.;
		}
		this.applyTransform();
		return this.transform.rayIntersection(r,bestMatch);
	}
	,checkBounds: function() {
		if(!this.obj.jointsUpdated && this.lastBoundsFrame == this.obj.lastFrame) {
			return;
		}
		this.lastBoundsFrame = this.obj.lastFrame;
		this.obj.syncJoints();
		var _this = this.currentBounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
		this.obj.addBoundsRec(this.currentBounds,null);
	}
	,applyTransform: function() {
		if(!this.obj.jointsUpdated && this.lastFrame == this.obj.lastFrame) {
			return;
		}
		this.lastFrame = this.obj.lastFrame;
		this.obj.syncJoints();
		var j = 0;
		var v = 0;
		var nbones = this.obj.skinData.bonesPerVertex;
		var _g = 0;
		var _g1 = this.obj.skinData.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var px = 0.;
			var py = 0.;
			var pz = 0.;
			var x = this.col.buffer[v];
			var y = this.col.buffer[v + 1];
			var z = this.col.buffer[v + 2];
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p_x = x1;
			var p_y = y1;
			var p_z = z1;
			var _g2 = 0;
			var _g3 = nbones;
			while(_g2 < _g3) {
				var k = _g2++;
				var w = this.obj.skinData.vertexWeights[j];
				if(w == 0) {
					++j;
					continue;
				}
				var bid = this.obj.skinData.vertexJoints[j++];
				var x2 = p_x;
				var y2 = p_y;
				var z2 = p_z;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				var x3 = x2;
				var y3 = y2;
				var z3 = z2;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				var p2_x = x3;
				var p2_y = y3;
				var p2_z = z3;
				var m = this.obj.currentPalette[bid];
				var px1 = p2_x * m._11 + p2_y * m._21 + p2_z * m._31 + m._41;
				var py1 = p2_x * m._12 + p2_y * m._22 + p2_z * m._32 + m._42;
				var pz1 = p2_x * m._13 + p2_y * m._23 + p2_z * m._33 + m._43;
				p2_x = px1;
				p2_y = py1;
				p2_z = pz1;
				px += p2_x * w;
				py += p2_y * w;
				pz += p2_z * w;
			}
			this.transform.buffer[v++] = px;
			this.transform.buffer[v++] = py;
			this.transform.buffer[v++] = pz;
		}
	}
	,makeDebugObj: function() {
		return new h3d_col_SkinColliderDebugObj(this);
	}
	,__class__: h3d_col_SkinCollider
});
var h3d_scene_Object = function(parent) {
	this.flags = 32768;
	this.absPos = new h3d_MatrixImpl();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.y = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.z = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleX = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleY = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleZ = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.qRot = new h3d_Quat();
	var f = 1;
	var b = this.follow != null;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var f = 2;
	this.flags |= f;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h3d.scene.Object"] = h3d_scene_Object;
h3d_scene_Object.__name__ = "h3d.scene.Object";
h3d_scene_Object.prototype = {
	set_cullingCollider: function(c) {
		this.cullingCollider = c;
		var f = 4096;
		this.flags &= ~f;
		return c;
	}
	,get_visible: function() {
		return (this.flags & 2) != 0;
	}
	,get_allocated: function() {
		return (this.flags & 32) != 0;
	}
	,get_posChanged: function() {
		return (this.flags & 1) != 0;
	}
	,get_culled: function() {
		return (this.flags & 4) != 0;
	}
	,get_followPositionOnly: function() {
		return (this.flags & 8) != 0;
	}
	,get_lightCameraCenter: function() {
		return (this.flags & 16) != 0;
	}
	,get_alwaysSyncAnimation: function() {
		return (this.flags & 64) != 0;
	}
	,get_inheritCulled: function() {
		return (this.flags & 128) != 0;
	}
	,get_ignoreBounds: function() {
		return (this.flags & 512) != 0;
	}
	,get_ignoreCollide: function() {
		return (this.flags & 1024) != 0;
	}
	,get_modelRoot: function() {
		return (this.flags & 256) != 0;
	}
	,get_ignoreParentTransform: function() {
		return (this.flags & 2048) != 0;
	}
	,get_cullingColliderInherited: function() {
		return (this.flags & 4096) != 0;
	}
	,get_fixedPosition: function() {
		return (this.flags & 8192) != 0;
	}
	,get_alwaysSync: function() {
		return (this.flags & 32768) != 0;
	}
	,set_posChanged: function(b) {
		var f = 1;
		var b1 = b || this.follow != null;
		if(b1) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b1;
	}
	,set_culled: function(b) {
		var f = 4;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_visible: function(b) {
		var f = 2;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_allocated: function(b) {
		var f = 32;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_followPositionOnly: function(b) {
		var f = 8;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_lightCameraCenter: function(b) {
		var f = 16;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_alwaysSyncAnimation: function(b) {
		var f = 64;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_ignoreBounds: function(b) {
		var f = 512;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_inheritCulled: function(b) {
		var f = 128;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_ignoreCollide: function(b) {
		var f = 1024;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_modelRoot: function(b) {
		var f = 256;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_ignoreParentTransform: function(b) {
		if(b != ((this.flags & 2048) != 0)) {
			var f = 1;
			var b1 = true;
			if(b1) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
		}
		var f = 2048;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_cullingColliderInherited: function(b) {
		var f = 4096;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_fixedPosition: function(b) {
		var f = 8192;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,set_alwaysSync: function(b) {
		var f = 32768;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return b;
	}
	,playAnimation: function(a) {
		return this.currentAnimation = a.createInstance(this);
	}
	,switchToAnimation: function(a) {
		return this.currentAnimation = a;
	}
	,stopAnimation: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		this.currentAnimation = null;
		if(recursive) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.stopAnimation(true);
			}
		}
	}
	,applyAnimationTransform: function(recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(this.defaultTransform != null) {
			var _this = this.defaultTransform;
			var x = 0.;
			var y = 0.;
			var z = 0.;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var s_x = x;
			var s_y = y;
			var s_z = z;
			s_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
			s_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
			s_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
			if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
				s_x *= -1;
				s_y *= -1;
				s_z *= -1;
			}
			var v = s_x;
			this.scaleX = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v = s_y;
			this.scaleY = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v = s_z;
			this.scaleZ = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.qRot.initRotateMatrix(this.defaultTransform);
			var v = this.defaultTransform._41;
			this.x = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v = this.defaultTransform._42;
			this.y = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v = this.defaultTransform._43;
			this.z = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var v = null;
			this.defaultTransform = v;
			var f = 1;
			var b = true;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
		}
		if(recursive) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.applyAnimationTransform();
			}
		}
	}
	,getObjectsCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			k += c.getObjectsCount() + 1;
		}
		return k;
	}
	,getMaterialByName: function(name) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var m = o.getMaterialByName(name);
			if(m != null) {
				return m;
			}
		}
		return null;
	}
	,contains: function(o) {
		while(o != null) {
			o = o.parent;
			if(o == this) {
				return true;
			}
		}
		return false;
	}
	,find: function(f) {
		var v = f(this);
		if(v != null) {
			return v;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var v = o.find(f);
			if(v != null) {
				return v;
			}
		}
		return null;
	}
	,findAll: function(f,arr) {
		if(arr == null) {
			arr = [];
		}
		var v = f(this);
		if(v != null) {
			arr.push(v);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.findAll(f,arr);
		}
		return arr;
	}
	,getMaterials: function(a,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(a == null) {
			a = [];
		}
		if(recursive) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var o = _g1[_g];
				++_g;
				o.getMaterials(a);
			}
		}
		return a;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_VectorImpl(0.,0.,0.);
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,globalToLocal: function(pt) {
		var m = this.getInvPos();
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_MatrixImpl();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,getBounds: function(b,relativeTo) {
		if(b == null) {
			b = new h3d_col_Bounds();
		}
		if(this.parent != null && this.parent != relativeTo) {
			this.parent.syncPos();
		}
		this.addBoundsRec(b,relativeTo == null ? null : relativeTo.getInvPos());
		return b;
	}
	,addBoundsRec: function(b,relativeTo) {
		if((this.flags & 1) != 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
			var f = 1;
			var b1 = this.follow != null;
			if(b1) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.addBoundsRec(b,relativeTo);
		}
	}
	,getMeshes: function(out) {
		if(out == null) {
			out = [];
		}
		var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
		if(m != null) {
			out.push(m);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.getMeshes(out);
		}
		return out;
	}
	,getMeshByName: function(name) {
		var value = this.getObjectByName(name);
		if(((value) instanceof h3d_scene_Mesh)) {
			return value;
		} else {
			return null;
		}
	}
	,getObjectByName: function(name) {
		if(this.name == name) {
			return this;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var o = c.getObjectByName(name);
			if(o != null) {
				return o;
			}
		}
		return null;
	}
	,clone: function(o) {
		if(o == null) {
			o = new h3d_scene_Object();
		}
		if(js_Boot.getClass(o) != js_Boot.getClass(this)) {
			throw haxe_Exception.thrown(Std.string(this) + " is missing clone()");
		}
		var v = this.x;
		o.x = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v = this.y;
		o.y = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v = this.z;
		o.z = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v = this.scaleX;
		o.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v = this.scaleY;
		o.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var v = this.scaleZ;
		o.scaleZ = v;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var _this = o.qRot;
		var q = this.qRot;
		_this.x = q.x;
		_this.y = q.y;
		_this.z = q.z;
		_this.w = q.w;
		o.name = this.name;
		o.set_follow(this.follow);
		var b = (this.flags & 8) != 0;
		var f = 8;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var b = (this.flags & 2) != 0;
		var f = 2;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		if(this.defaultTransform != null) {
			var v = this.defaultTransform.clone();
			o.defaultTransform = v;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var c1 = c.clone();
			c1.parent = o;
			o.children.push(c1);
		}
		return o;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f = 32;
			if(old) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var i = this.children.length - 1;
		while(i >= 0) this.children[i--].onRemove();
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.children[0]);
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h3d_scene_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,getRelPos: function(obj) {
		if(obj == null) {
			return this.getAbsPos();
		}
		this.syncPos();
		var m = new h3d_MatrixImpl();
		m.multiply(this.absPos,obj.getInvPos());
		return m;
	}
	,isMesh: function() {
		return (((this) instanceof h3d_scene_Mesh) ? this : null) != null;
	}
	,toMesh: function() {
		var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
		if(m != null) {
			return m;
		}
		throw haxe_Exception.thrown(Std.string(this) + " is not a Mesh");
	}
	,getCollider: function() {
		if((this.flags & 1024) != 0) {
			return null;
		}
		var colliders = [];
		var col = this.getGlobalCollider();
		if(col != null) {
			colliders.push(col);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			var c = obj.getCollider();
			if(c == null) {
				continue;
			}
			var cgrp = ((c) instanceof h3d_col_GroupCollider) ? c : null;
			if(cgrp != null) {
				var _g2 = 0;
				var _g3 = cgrp.colliders;
				while(_g2 < _g3.length) {
					var c1 = _g3[_g2];
					++_g2;
					colliders.push(c1);
				}
			} else {
				colliders.push(c);
			}
		}
		if(colliders.length == 0) {
			return null;
		}
		if(colliders.length == 1) {
			return colliders[0];
		}
		return new h3d_col_GroupCollider(colliders);
	}
	,getGlobalCollider: function() {
		if((this.flags & 1024) != 0) {
			return null;
		}
		var col = this.getLocalCollider();
		if(col == null) {
			return null;
		} else {
			return new h3d_col_ObjectCollider(this,col);
		}
	}
	,getLocalCollider: function() {
		return null;
	}
	,draw: function(ctx) {
	}
	,set_follow: function(v) {
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return this.follow = v;
	}
	,calcAbsPos: function() {
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _this = this.absPos;
				var a = this.absPos;
				var b = this.parent.absPos;
				var m11 = a._11;
				var m12 = a._12;
				var m13 = a._13;
				var m21 = a._21;
				var m22 = a._22;
				var m23 = a._23;
				var a31 = a._31;
				var a32 = a._32;
				var a33 = a._33;
				var a41 = a._41;
				var a42 = a._42;
				var a43 = a._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			var _this = this.absPos;
			var a = this.absPos;
			var b = this.parent.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this = this.absPos;
			var a = this.defaultTransform;
			var b = this.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		if((this.flags & 32768) == 0 && ((this.flags & 4) != 0 || (this.flags & 2) == 0 || !ctx.visibleFlag)) {
			return;
		}
		var old = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		if(ctx.cullingCollider != null && (this.cullingCollider == null || (this.flags & 4096) != 0)) {
			this.set_cullingCollider(ctx.cullingCollider);
			var f = 4096;
			this.flags |= f;
		} else if((this.flags & 4096) != 0) {
			this.set_cullingCollider(null);
		}
		var prevCollider = ctx.cullingCollider;
		if((this.flags & 128) != 0) {
			ctx.cullingCollider = this.cullingCollider;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		if((this.flags & 8192) != 0) {
			if((this.flags & 16384) != 0 && !changed && !ctx.wasContextLost) {
				ctx.visibleFlag = old;
				ctx.cullingCollider = prevCollider;
				return;
			}
			var f = 16384;
			this.flags |= f;
		}
		this.sync(ctx);
		var f = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f = 1;
					var b = true;
					if(b) {
						c.flags |= f;
					} else {
						c.flags &= ~f;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old;
		ctx.cullingCollider = prevCollider;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
		}
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.emitRec(ctx);
		}
	}
	,set_x: function(v) {
		this.x = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_y: function(v) {
		this.y = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_z: function(v) {
		this.z = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleX: function(v) {
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleY: function(v) {
		this.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_scaleZ: function(v) {
		this.scaleZ = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,set_defaultTransform: function(v) {
		this.defaultTransform = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,setPosition: function(x,y,z) {
		this.x = x;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.y = y;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.z = z;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setTransform: function(mat) {
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var s_x = x;
		var s_y = y;
		var s_z = z;
		s_x = Math.sqrt(mat._11 * mat._11 + mat._12 * mat._12 + mat._13 * mat._13);
		s_y = Math.sqrt(mat._21 * mat._21 + mat._22 * mat._22 + mat._23 * mat._23);
		s_z = Math.sqrt(mat._31 * mat._31 + mat._32 * mat._32 + mat._33 * mat._33);
		if(mat._11 * (mat._22 * mat._33 - mat._23 * mat._32) + mat._12 * (mat._23 * mat._31 - mat._21 * mat._33) + mat._13 * (mat._21 * mat._32 - mat._22 * mat._31) < 0) {
			s_x *= -1;
			s_y *= -1;
			s_z *= -1;
		}
		var v = mat._41;
		this.x = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v = mat._42;
		this.y = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v = mat._43;
		this.z = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v = s_x;
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v = s_y;
		this.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v = s_z;
		this.scaleZ = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		h3d_scene_Object.tmpMat.load(mat);
		h3d_scene_Object.tmpMat.prependScale(1.0 / s_x,1.0 / s_y,1.0 / s_z);
		this.qRot.initRotateMatrix(h3d_scene_Object.tmpMat);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,getTransform: function(mat) {
		if(mat == null) {
			mat = new h3d_MatrixImpl();
		}
		mat.initScale(this.scaleX,this.scaleY,this.scaleZ);
		this.qRot.toMatrix(h3d_scene_Object.tmpMat);
		mat.multiply3x4(mat,h3d_scene_Object.tmpMat);
		mat._41 = this.x;
		mat._42 = this.y;
		mat._43 = this.z;
		return mat;
	}
	,rotate: function(rx,ry,rz,qTmp) {
		if(qTmp == null) {
			qTmp = new h3d_Quat();
		}
		qTmp.initRotation(rx,ry,rz);
		this.qRot.multiply(qTmp,this.qRot);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setRotation: function(rx,ry,rz) {
		this.qRot.initRotation(rx,ry,rz);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setRotationAxis: function(ax,ay,az,angle) {
		this.qRot.initRotateAxis(ax,ay,az,angle);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setDirection: function(v,up) {
		this.qRot.initDirection(v,up);
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,getLocalDirection: function() {
		var _this = this.qRot;
		var x = 1 - 2 * (_this.y * _this.y + _this.z * _this.z);
		var y = 2 * (_this.x * _this.y + _this.z * _this.w);
		var z = 2 * (_this.x * _this.z - _this.y * _this.w);
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,getRotationQuat: function() {
		return this.qRot;
	}
	,setRotationQuat: function(q) {
		this.qRot = q;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,scale: function(v) {
		var v1 = this.scaleX * v;
		this.scaleX = v1;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v1 = this.scaleY * v;
		this.scaleY = v1;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v1 = this.scaleZ * v;
		this.scaleZ = v1;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,setScale: function(v) {
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.scaleZ = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop() + (this.name == null ? "" : "(" + this.name + ")");
	}
	,getChildAt: function(n) {
		return this.children[n];
	}
	,getChildIndex: function(o) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == o) {
				return i;
			}
		}
		return -1;
	}
	,get_numChildren: function() {
		return this.children.length;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$h3d_$scene_$Object(this.children);
	}
	,__class__: h3d_scene_Object
};
var h3d_col_SkinColliderDebugObj = function(col) {
	this.boxes = [];
	h3d_scene_Object.call(this,null);
	this.col = col;
	this.skin = col.obj;
	this.box = new h3d_scene_Box(16777215,col.currentBounds);
	this.addChild(this.box);
	if(true != ((this.flags & 2048) != 0)) {
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
	}
	var f = 2048;
	this.flags |= f;
	this.createJoints();
};
$hxClasses["h3d.col.SkinColliderDebugObj"] = h3d_col_SkinColliderDebugObj;
h3d_col_SkinColliderDebugObj.__name__ = "h3d.col.SkinColliderDebugObj";
h3d_col_SkinColliderDebugObj.__super__ = h3d_scene_Object;
h3d_col_SkinColliderDebugObj.prototype = $extend(h3d_scene_Object.prototype,{
	createJoints: function() {
		var joints = this.skin.getSkinData().allJoints;
		var _g = 0;
		while(_g < joints.length) {
			var j = joints[_g];
			++_g;
			var b = new h3d_col_Bounds();
			b.xMin = -1;
			b.yMin = -1;
			b.zMin = -1;
			b.xMax = 1;
			b.yMax = 1;
			b.zMax = 1;
			var b1 = new h3d_scene_Box(10526880,b,null,this);
			if(j.offsets != null) {
				var _this = b1.bounds;
				_this.xMin = 1e20;
				_this.xMax = -1e20;
				_this.yMin = 1e20;
				_this.yMax = -1e20;
				_this.zMin = 1e20;
				_this.zMax = -1e20;
				var _this1 = j.offsets;
				var x = _this1.xMin;
				var y = _this1.yMin;
				var z = _this1.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var pt_x = x1;
				var pt_y = y1;
				var pt_z = z1;
				var _this2 = b1.bounds;
				var x2 = pt_x;
				var y2 = pt_y;
				var z2 = pt_z;
				var r = j.offsetRay;
				if(x2 - r < _this2.xMin) {
					_this2.xMin = x2 - r;
				}
				if(x2 + r > _this2.xMax) {
					_this2.xMax = x2 + r;
				}
				if(y2 - r < _this2.yMin) {
					_this2.yMin = y2 - r;
				}
				if(y2 + r > _this2.yMax) {
					_this2.yMax = y2 + r;
				}
				if(z2 - r < _this2.zMin) {
					_this2.zMin = z2 - r;
				}
				if(z2 + r > _this2.zMax) {
					_this2.zMax = z2 + r;
				}
				var _this3 = j.offsets;
				var x3 = _this3.xMax;
				var y3 = _this3.yMax;
				var z3 = _this3.zMax;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				var x4 = x3;
				var y4 = y3;
				var z4 = z3;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var pt_x1 = x4;
				var pt_y1 = y4;
				var pt_z1 = z4;
				var _this4 = b1.bounds;
				var x5 = pt_x1;
				var y5 = pt_y1;
				var z5 = pt_z1;
				var r1 = j.offsetRay;
				if(x5 - r1 < _this4.xMin) {
					_this4.xMin = x5 - r1;
				}
				if(x5 + r1 > _this4.xMax) {
					_this4.xMax = x5 + r1;
				}
				if(y5 - r1 < _this4.yMin) {
					_this4.yMin = y5 - r1;
				}
				if(y5 + r1 > _this4.yMax) {
					_this4.yMax = y5 + r1;
				}
				if(z5 - r1 < _this4.zMin) {
					_this4.zMin = z5 - r1;
				}
				if(z5 + r1 > _this4.zMax) {
					_this4.zMax = z5 + r1;
				}
			} else {
				var _this5 = b1.bounds;
				_this5.xMin = 1e20;
				_this5.xMax = -1e20;
				_this5.yMin = 1e20;
				_this5.yMax = -1e20;
				_this5.zMin = 1e20;
				_this5.zMax = -1e20;
				var _this6 = b1.bounds;
				if(-0.1 < _this6.xMin) {
					_this6.xMin = -0.1;
				}
				if(0.1 > _this6.xMax) {
					_this6.xMax = 0.1;
				}
				if(-0.1 < _this6.yMin) {
					_this6.yMin = -0.1;
				}
				if(0.1 > _this6.yMax) {
					_this6.yMax = 0.1;
				}
				if(-0.1 < _this6.zMin) {
					_this6.zMin = -0.1;
				}
				if(0.1 > _this6.zMax) {
					_this6.zMax = 0.1;
				}
			}
			this.boxes.push(b1);
		}
	}
	,updateJoints: function() {
		var _g = 0;
		var _g1 = this.boxes.length;
		while(_g < _g1) {
			var i = _g++;
			var j = this.skin.skinData.allJoints[i];
			var b = this.boxes[i];
			if(j.offsets != null) {
				var m = this.skin.currentPalette[j.bindIndex];
				b.setTransform(m);
			} else {
				b.setTransform(this.skin.currentAbsPose[j.index]);
			}
		}
	}
	,sync: function(ctx) {
		this.col.checkBounds();
		this.updateJoints();
	}
	,__class__: h3d_col_SkinColliderDebugObj
});
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var sx = x;
	var sy = y;
	var sz = z;
	var sr = r;
	if(sr == null) {
		sr = 0.;
	}
	if(sz == null) {
		sz = 0.;
	}
	if(sy == null) {
		sy = 0.;
	}
	if(sx == null) {
		sx = 0.;
	}
	this.x = sx;
	this.y = sy;
	this.z = sz;
	this.r = sr;
};
$hxClasses["h3d.col.Sphere"] = h3d_col_Sphere;
h3d_col_Sphere.__name__ = "h3d.col.Sphere";
h3d_col_Sphere.__super__ = h3d_col_Collider;
h3d_col_Sphere.prototype = $extend(h3d_col_Collider.prototype,{
	load: function(sx,sy,sz,sr) {
		if(sr == null) {
			sr = 0.;
		}
		if(sz == null) {
			sz = 0.;
		}
		if(sy == null) {
			sy = 0.;
		}
		if(sx == null) {
			sx = 0.;
		}
		this.x = sx;
		this.y = sy;
		this.z = sz;
		this.r = sr;
	}
	,getCenter: function() {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,z);
	}
	,distance: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		var d = dx * dx + dy * dy + dz * dz - this.r * this.r;
		if(d < 0) {
			return -Math.sqrt(-d);
		} else {
			return Math.sqrt(d);
		}
	}
	,distanceSq: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		return dx * dx + dy * dy + dz * dz - this.r * this.r;
	}
	,contains: function(p) {
		var dx = p.x - this.x;
		var dy = p.y - this.y;
		var dz = p.z - this.z;
		return dx * dx + dy * dy + dz * dz - this.r * this.r < 0;
	}
	,rayIntersection: function(r,bestMatch) {
		var r2 = this.r * this.r;
		var px = r.px + r.lx;
		var py = r.py + r.ly;
		var pz = r.pz + r.lz;
		var a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		var b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		var c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		var t = (-b + d) / (2 * a);
		return 1 - t;
	}
	,inFrustum: function(f,m) {
		if(m != null) {
			return this.inFrustumMatrix(f,m);
		}
		return f.hasSphere(this);
	}
	,inFrustumMatrix: function(f,m) {
		var oldX = this.x;
		var oldY = this.y;
		var oldZ = this.z;
		var oldR = this.r;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		this.x = v_x;
		this.y = v_y;
		this.z = v_z;
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var scale_x = x;
		var scale_y = y;
		var scale_z = z;
		scale_x = Math.sqrt(m._11 * m._11 + m._12 * m._12 + m._13 * m._13);
		scale_y = Math.sqrt(m._21 * m._21 + m._22 * m._22 + m._23 * m._23);
		scale_z = Math.sqrt(m._31 * m._31 + m._32 * m._32 + m._33 * m._33);
		if(m._11 * (m._22 * m._33 - m._23 * m._32) + m._12 * (m._23 * m._31 - m._21 * m._33) + m._13 * (m._21 * m._32 - m._22 * m._31) < 0) {
			scale_x *= -1;
			scale_y *= -1;
			scale_z *= -1;
		}
		this.r *= Math.max(Math.max(scale_x,scale_y),scale_z);
		var res = f.hasSphere(this);
		this.x = oldX;
		this.y = oldY;
		this.z = oldZ;
		this.r = oldR;
		return res;
	}
	,transform: function(m) {
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var s_x = x;
		var s_y = y;
		var s_z = z;
		s_x = Math.sqrt(m._11 * m._11 + m._12 * m._12 + m._13 * m._13);
		s_y = Math.sqrt(m._21 * m._21 + m._22 * m._22 + m._23 * m._23);
		s_z = Math.sqrt(m._31 * m._31 + m._32 * m._32 + m._33 * m._33);
		if(m._11 * (m._22 * m._33 - m._23 * m._32) + m._12 * (m._23 * m._31 - m._21 * m._33) + m._13 * (m._21 * m._32 - m._22 * m._31) < 0) {
			s_x *= -1;
			s_y *= -1;
			s_z *= -1;
		}
		var f = s_x;
		var a = f < 0 ? -f : f;
		var f = s_y;
		var b = f < 0 ? -f : f;
		var a1 = a < b ? b : a;
		var f = s_z;
		var b = f < 0 ? -f : f;
		var smax = a1 < b ? b : a1;
		this.r *= smax;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var pt_x = x1;
		var pt_y = y1;
		var pt_z = z1;
		var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
		var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
		var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
		pt_x = px;
		pt_y = py;
		pt_z = pz;
		this.x = pt_x;
		this.y = pt_y;
		this.z = pt_z;
	}
	,inSphere: function(s) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var dx = v_x - _this_x;
		var dy = v_y - _this_y;
		var dz = v_z - _this_z;
		return dx * dx + dy * dy + dz * dz < (s.r + this.r) * (s.r + this.r);
	}
	,toString: function() {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return "Sphere{" + Std.string(new h3d_VectorImpl(x,y,z)) + "," + hxd_Math.fmt(this.r) + "}";
	}
	,makeDebugObj: function() {
		var prim = new h3d_prim_Sphere(this.r,20,15);
		prim.translate(this.x,this.y,this.z);
		prim.addNormals();
		return new h3d_scene_Mesh(prim);
	}
	,__class__: h3d_col_Sphere
});
var h3d_impl_Feature = $hxEnums["h3d.impl.Feature"] = { __ename__:"h3d.impl.Feature",__constructs__:null
	,StandardDerivatives: {_hx_name:"StandardDerivatives",_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_name:"FloatTextures",_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_name:"AllocDepthBuffer",_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_name:"HardwareAccelerated",_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_name:"MultipleRenderTargets",_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_name:"Queries",_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_name:"SRGBTextures",_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_name:"ShaderModel3",_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_name:"BottomLeftCoords",_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_name:"Wireframe",_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
	,InstancedRendering: {_hx_name:"InstancedRendering",_hx_index:10,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d_impl_Feature.__constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
var h3d_impl_QueryKind = $hxEnums["h3d.impl.QueryKind"] = { __ename__:"h3d.impl.QueryKind",__constructs__:null
	,TimeStamp: {_hx_name:"TimeStamp",_hx_index:0,__enum__:"h3d.impl.QueryKind",toString:$estr}
	,Samples: {_hx_name:"Samples",_hx_index:1,__enum__:"h3d.impl.QueryKind",toString:$estr}
};
h3d_impl_QueryKind.__constructs__ = [h3d_impl_QueryKind.TimeStamp,h3d_impl_QueryKind.Samples];
h3d_impl_QueryKind.__empty_constructs__ = [h3d_impl_QueryKind.TimeStamp,h3d_impl_QueryKind.Samples];
var h3d_impl_RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__:"h3d.impl.RenderFlag",__constructs__:null
	,CameraHandness: {_hx_name:"CameraHandness",_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d_impl_RenderFlag.__constructs__ = [h3d_impl_RenderFlag.CameraHandness];
h3d_impl_RenderFlag.__empty_constructs__ = [h3d_impl_RenderFlag.CameraHandness];
var h3d_impl_Driver = function() {
	this.shaderCache = h3d_impl_Driver.SHADER_CACHE;
};
$hxClasses["h3d.impl.Driver"] = h3d_impl_Driver;
h3d_impl_Driver.__name__ = "h3d.impl.Driver";
h3d_impl_Driver.setShaderCache = function(cache) {
	h3d_impl_Driver.SHADER_CACHE = cache;
};
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,setRenderFlag: function(r,value) {
	}
	,isSupportedFormat: function(fmt) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,dispose: function() {
	}
	,begin: function(frame) {
	}
	,log: function(str) {
		if(this.logEnable) {
			this.logImpl(str);
		}
	}
	,generateMipMaps: function(texture) {
		throw haxe_Exception.thrown("Mipmaps auto generation is not supported on this platform");
	}
	,getNativeShaderCode: function(shader) {
		return null;
	}
	,logImpl: function(str) {
	}
	,clear: function(color,depth,stencil) {
	}
	,captureRenderBuffer: function(pixels) {
	}
	,capturePixels: function(tex,layer,mipLevel,region) {
		throw haxe_Exception.thrown("Can't capture pixels on this platform");
	}
	,getDriverName: function(details) {
		return "Not available";
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,selectBuffer: function(buffer) {
	}
	,selectMultiBuffers: function(format,buffers) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,drawInstanced: function(ibuf,commands) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	,setRenderTargets: function(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
	}
	,setDepth: function(tex) {
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,disposeDepthBuffer: function(b) {
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,present: function() {
	}
	,end: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocBuffer: function(b) {
		return null;
	}
	,allocInstanceBuffer: function(b,bytes) {
	}
	,disposeTexture: function(t) {
	}
	,disposeBuffer: function(b) {
	}
	,disposeInstanceBuffer: function(b) {
	}
	,uploadIndexData: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadBufferData: function(b,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadBufferBytes: function(b,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,readBufferBytes: function(b,startVertex,vertexCount,buf,bufPos) {
		throw haxe_Exception.thrown("Driver does not allow to read vertex bytes");
	}
	,copyTexture: function(from,to) {
		return false;
	}
	,allocQuery: function(queryKind) {
		return null;
	}
	,deleteQuery: function(q) {
	}
	,beginQuery: function(q) {
	}
	,endQuery: function(q) {
	}
	,queryResultAvailable: function(q) {
		return true;
	}
	,queryResult: function(q) {
		return 0.;
	}
	,computeDispatch: function(x,y,z) {
		if(z == null) {
			z = 1;
		}
		if(y == null) {
			y = 1;
		}
		if(x == null) {
			x = 1;
		}
		throw haxe_Exception.thrown("Not implemented");
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,kind,shader) {
	this.s = s;
	this.kind = kind;
	this.shader = shader;
};
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d_impl__$GlDriver_CompiledShader;
h3d_impl__$GlDriver_CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
h3d_impl__$GlDriver_CompiledShader.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d_impl__$GlDriver_CompiledAttribute;
h3d_impl__$GlDriver_CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d_impl__$GlDriver_CompiledProgram;
h3d_impl__$GlDriver_CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.features = new haxe_ds_EnumValueMap();
	this.maxCompressedTexturesSupport = 0;
	this.hasMultiIndirect = false;
	this.rightHanded = false;
	this.firstShader = true;
	this.boundTextures = [];
	this.curTargets = [];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	this.currentDivisor = _g;
	this.curColorMask = -1;
	this.lastActiveIndex = 0;
	this.curStEnabled = false;
	this.curStMaskBits = -1;
	this.curStOpBits = -1;
	this.curMatBits = -1;
	this.maxIdxCurAttribs = 0;
	this.curAttribs = [];
	h3d_impl_Driver.call(this);
	this.canvas = hxd_Window.getInstance().canvas;
	var options = { alpha : false, stencil : true, antialias : antiAlias > 0};
	if(h3d_impl_GlDriver.ALLOW_WEBGL2) {
		this.gl = this.canvas.getContext("webgl2",options);
	}
	if(this.gl == null) {
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,options);
	}
	if(this.gl == null) {
		throw haxe_Exception.thrown("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
		this.glDebug = true;
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.defStencil = new h3d_mat_Stencil();
	this.frame = hxd_Timer.frameCount;
	var v = this.gl.getParameter(7938);
	var reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(1));
	}
	var reg = new EReg("[0-9]+\\.[0-9]+","");
	var v = this.gl.getParameter(35724);
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(0));
		this.shaderVersion = Math.round(parseFloat(reg.matched(0)) * 100);
	}
	this.drawMode = 4;
	this.makeFeatures();
	if(this.hasFeature(h3d_impl_Feature.InstancedRendering) && this.glES < 3) {
		var extension = this.gl.getExtension("ANGLE_instanced_arrays");
		this.gl["vertexAttribDivisor"] = $bind(extension,extension.vertexAttribDivisorANGLE);
		this.gl["drawElementsInstanced"] = $bind(extension,extension.drawElementsInstancedANGLE);
	}
	hxsl_SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d_impl_Feature.ShaderModel3);
	this.gl.pixelStorei(3333,1);
	this.gl.pixelStorei(3317,1);
};
$hxClasses["h3d.impl.GlDriver"] = h3d_impl_GlDriver;
h3d_impl_GlDriver.__name__ = "h3d.impl.GlDriver";
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	setRenderFlag: function(r,value) {
		this.rightHanded = value > 0;
	}
	,logImpl: function(str) {
		console.log(str);
	}
	,setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,makeCompiler: function() {
		var glout = new hxsl_GlslOut();
		glout.glES = this.glES;
		glout.version = this.shaderVersion;
		glout.intelDriverFix = this.isIntelGpu;
		return glout;
	}
	,getNativeShaderCode: function(shader) {
		var _gthis = this;
		var sh = shader.vertex.data;
		var tmp = "// vertex:\n" + _gthis.makeCompiler().run(sh) + "// fragment:\n";
		var sh = shader.fragment.data;
		return tmp + _gthis.makeCompiler().run(sh);
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render = (render == null ? "null" : "" + render) + (" GLv" + Std.string(this.gl.getParameter(7938)));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type = shader.kind == hxsl_FunctionKind.Vertex ? 35633 : 35632;
		var s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		var log = this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log,9,null));
			var line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = shader.code.split("\n");
			var _g = 0;
			var _g1 = codeLines.length;
			while(_g < _g1) {
				var i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw haxe_Exception.thrown("An error occurred compiling the shaders: " + log + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.kind,shader);
	}
	,initShader: function(p,s,shader,rt) {
		var prefix = s.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		var index = 0;
		var curT = null;
		var mode = 0;
		var name = "";
		var t = shader.textures;
		while(t != null) {
			var tt = t.type;
			var count = 1;
			switch(tt._hx_index) {
			case 15:
				var _gsize = tt.size;
				if(_gsize._hx_index == 0) {
					var n = _gsize.v;
					var t1 = tt.t;
					tt = t1;
					count = n;
				}
				break;
			case 17:
				tt = hxsl_Type.TSampler2D;
				break;
			default:
			}
			if(tt != curT) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					mode = 3553;
					name = "Textures";
					break;
				case 11:
					mode = 35866;
					name = "TexturesArray";
					break;
				case 12:
					mode = 34067;
					name = "TexturesCube";
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				var loc = this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]");
				if(loc == null) {
					throw haxe_Exception.thrown("Texture " + rt.spec.instances[t.instance].shader.data.name + "." + t.name + " is missing from generated shader");
				}
				s.textures.push({ u : loc, t : curT, mode : mode});
				++index;
			}
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			var _g = [];
			var _g1 = 0;
			var _g2 = shader.bufferCount;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.gl.getUniformBlockIndex(p.p,(shader.kind == hxsl_FunctionKind.Vertex ? "vertex_" : "") + "uniform_buffer" + i));
			}
			s.buffers = _g;
			var start = 0;
			if(s.kind == hxsl_FunctionKind.Fragment) {
				start = rt.vertex.bufferCount;
			}
			var _g = 0;
			var _g1 = shader.bufferCount;
			while(_g < _g1) {
				var i = _g++;
				this.gl.uniformBlockBinding(p.p,s.buffers[i],i + start);
			}
		}
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = this.makeCompiler();
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Shader linkage error: " + Std.string(e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw haxe_Exception.thrown("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + "\n\nFragment=\n" + shader.fragment.code);
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex,shader);
			this.initShader(p,p.fragment,shader.fragment,shader);
			p.attribs = [];
			p.hasAttribIndex = 0;
			var format = [];
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					var t = hxd_InputFormat.fromHXSL(v.type);
					var index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						continue;
					}
					if(index >= 32) {
						throw haxe_Exception.thrown("assert");
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = 5126;
					a.index = index;
					a.size = t & 7;
					var _g2 = v.type;
					if(_g2._hx_index == 9) {
						var n = _g2.size;
						a.type = 5120;
						a.size = n;
					}
					a.divisor = 0;
					if(v.qualifiers != null) {
						var _g3 = 0;
						var _g4 = v.qualifiers;
						while(_g3 < _g4.length) {
							var q = _g4[_g3];
							++_g3;
							if(q._hx_index == 9) {
								var n1 = q.v;
								a.divisor = n1;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex |= 1 << a.index;
					format.push(new hxd_BufferInput(v.name,t,0));
				}
			}
			p.format = hxd_BufferFormat.make(format);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.setProgram(p);
		return true;
	}
	,setProgram: function(p) {
		this.gl.useProgram(p.p);
		var _g = 0;
		var _g1 = p.attribs;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(!this.curAttribs[a.index]) {
				this.gl.enableVertexAttribArray(a.index);
				this.curAttribs[a.index] = true;
				if(this.maxIdxCurAttribs < a.index) {
					this.maxIdxCurAttribs = a.index;
				}
			}
		}
		var lastIdxCurAttribTrue = 0;
		var _g = 0;
		var _g1 = this.maxIdxCurAttribs + 1;
		while(_g < _g1) {
			var i = _g++;
			if(this.curAttribs[i] && (p.hasAttribIndex & 1 << i) == 0) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(buf,this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(buf,this.curShader.fragment,buf.fragment,which);
	}
	,uploadBuffer: function(buffer,s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g = 0;
			var _g1 = s.textures.length;
			while(_g < _g1) {
				var i = _g++;
				var t = buf.tex[i];
				var pt = s.textures[i];
				if(t == null || (t.isDepth() ? t.t == null : t.t == null && t.realloc == null)) {
					switch(pt.t._hx_index) {
					case 10:
						var color = h3d_mat_Defaults.loadingTextureColor;
						t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
						break;
					case 12:
						t = h3d_mat_Texture.defaultCubeTexture();
						break;
					default:
						throw haxe_Exception.thrown("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					var s1 = this.curShader;
					t.alloc();
					t.realloc();
					if(this.curShader != s1) {
						this.setProgram(s1);
						this.uploadShaderBuffers(buffer,0);
						this.uploadShaderBuffers(buffer,1);
						this.uploadShaderBuffers(buffer,2);
						return;
					}
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				var idx = s.kind == hxsl_FunctionKind.Fragment ? this.curShader.vertex.textures.length + i : i;
				if(this.boundTextures[idx] != t.t) {
					this.boundTextures[idx] = t.t;
					var mode = this.getBindType(t);
					if(mode != pt.mode) {
						throw haxe_Exception.thrown("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
					}
					this.gl.activeTexture(33984 + idx);
					this.gl.uniform1i(pt.u,idx);
					this.gl.bindTexture(mode,t.t.t);
					this.lastActiveIndex = idx;
				}
				var mip = t.mipMap._hx_index;
				var filter = t.filter._hx_index;
				var wrap = t.wrap._hx_index;
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					var mode1 = pt.mode;
					this.gl.texParameteri(mode1,10240,flags[0]);
					this.gl.texParameteri(mode1,10241,flags[1]);
					this.gl.texParameteri(mode1,34892,0);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode1,10242,w);
					this.gl.texParameteri(mode1,10243,w);
				}
				if(t.t.startMip != t.startingMip) {
					this.gl.texParameteri(pt.mode,33084,t.startingMip);
					t.t.startMip = t.startingMip;
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				var start = 0;
				if(s.kind == hxsl_FunctionKind.Fragment && this.curShader.vertex.buffers != null) {
					start = this.curShader.vertex.buffers.length;
				}
				var _g = 0;
				var _g1 = s.buffers.length;
				while(_g < _g1) {
					var i = _g++;
					this.gl.bindBufferBase(35345,i + start,buf.buffers[i].vbuf);
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		var bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			var m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			var mi = m >> 4;
			if(mi > 0) {
				throw haxe_Exception.thrown("GL ColorMaski support requires hlsdl 1.14+");
			}
			this.curColorMask = m;
		}
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		var wireframe = (bits & 268435456) != 0;
		this.drawMode = wireframe ? 3 : 4;
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			var cop = bits >> 22 & 7;
			var aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,maskBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			var w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			var tmp = width / window.devicePixelRatio | 0;
			this.canvas.style.width = tmp + "px";
			var tmp = height / window.devicePixelRatio | 0;
			this.canvas.style.height = tmp + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.t = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33322:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33324:case 33327:case 33328:
			return 33319;
		case 34836:case 34842:
			return 6408;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		case 32859:case 33777:case 33778:case 33779:case 36492:
			return 6408;
		case 32852:case 34837:case 34843:case 36495:
			return 6407;
		default:
			throw haxe_Exception.thrown("Invalid format " + t.internalFmt);
		}
	}
	,isSupportedFormat: function(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		case 14:case 15:
			return this.hasFeature(h3d_impl_Feature.SRGBTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 22:
			var n = fmt.v;
			return n <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	,getBindType: function(t) {
		var isCube = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var isArray = (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0;
		if(isCube) {
			return 34067;
		} else if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	,allocTexture: function(t) {
		var _gthis = this;
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var tt = this.gl.createTexture();
		var bind = this.getBindType(t);
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind, bias : 0, startMip : t.startingMip};
		var _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 18:
			tt1.internalFmt = 33322;
			tt1.pixelFmt = 5123;
			break;
		case 19:
			tt1.internalFmt = 33324;
			tt1.pixelFmt = 5123;
			break;
		case 20:
			tt1.internalFmt = 32852;
			tt1.pixelFmt = 5123;
			break;
		case 21:
			tt1.internalFmt = 32859;
			tt1.pixelFmt = 5123;
			break;
		case 22:
			var n = _g.v;
			if(n <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw haxe_Exception.thrown("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(n) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				case 6:
					tt1.internalFmt = 36495;
					break;
				case 7:
					tt1.internalFmt = 36492;
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
		}
		if(tt1.pixelFmt == 5123 && !this.has16Bits) {
			throw haxe_Exception.thrown("16 bit textures requires EXT_texture_norm16 extension");
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		this.gl.texParameteri(bind,33084,t.startingMip);
		this.gl.texParameteri(bind,33085,t.get_mipLevels() - 1);
		var sizedFormat = tt1.internalFmt == 6408 ? 32856 : tt1.internalFmt;
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 && (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) == 0) {
			this.gl.texStorage3D(bind,t.get_mipLevels(),sizedFormat,tt1.width,tt1.height,t.get_layerCount());
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				var err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		} else {
			this.gl.texStorage2D(bind,t.get_mipLevels(),sizedFormat,tt1.width,tt1.height);
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				var err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(t) {
		var tt = this.gl.createTexture();
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : 3553, bias : 0, startMip : 0};
		var fmt = 6402;
		switch(t.format._hx_index) {
		case 23:
			tt1.internalFmt = 33189;
			break;
		case 24:
			if(this.glES >= 3) {
				tt1.internalFmt = 6402;
			} else {
				throw haxe_Exception.thrown("Unsupported depth format " + Std.string(t.format));
			}
			break;
		case 25:
			tt1.internalFmt = 35056;
			tt1.pixelFmt = 34042;
			fmt = 34041;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported depth format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(tt1.bind,tt1.t);
		this.gl.texParameteri(tt1.bind,10241,9728);
		this.gl.texParameteri(tt1.bind,10240,9728);
		this.gl.texParameteri(tt1.bind,10242,33071);
		this.gl.texParameteri(tt1.bind,10243,33071);
		this.gl.texImage2D(tt1.bind,0,tt1.internalFmt,tt1.width,tt1.height,0,fmt,tt1.pixelFmt,null);
		this.restoreBind();
		return tt1;
	}
	,disposeDepthBuffer: function(b) {
		if(b.t != null && b.t.t != null) {
			this.gl.deleteTexture(b.t.t);
			b.t = null;
		}
	}
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_Texture(0,0,null,hxd_PixelFormat.Depth24Stencil8);
		this.defaultDepth.name = "defaultDepthBuffer";
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.t = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	,discardError: function() {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
	}
	,allocBuffer: function(b) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var vb = this.gl.createBuffer();
		var type = (b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0 ? 34963 : 34962;
		this.gl.bindBuffer(type,vb);
		if(b.vertices * b.format.stride == 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.gl.bufferData(type,b.vertices * b.format.strideBytes,(b.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0 ? 35048 : 35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(type,null);
		if((b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0) {
			this.curIndexBuffer = null;
		}
		if(outOfMem) {
			this.gl.deleteBuffer(vb);
			return null;
		}
		return vb;
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeBuffer: function(b) {
		this.gl.deleteBuffer(b.vbuf);
	}
	,generateMipMaps: function(t) {
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || t.get_layerCount() != 1) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.texSubImage2D(3553,mipLevel,0,0,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,streamData: function(data,pos,length) {
		return data;
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 ? 35866 : 3553;
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		var dataLen = pixels.dataSize;
		var buffer;
		switch(t.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		case 3:case 6:case 9:case 12:case 18:case 19:case 20:case 21:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 1);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,dataLen);
		}
		if(t.format._hx_index == 22) {
			if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
				this.gl.compressedTexSubImage3D(face,mipLevel,0,0,side,pixels.width,pixels.height,1,t.t.internalFmt,buffer);
			} else {
				this.gl.compressedTexSubImage2D(face,mipLevel,0,0,pixels.width,pixels.height,t.t.internalFmt,buffer);
			}
		} else if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.texSubImage3D(face,mipLevel,0,0,side,pixels.width,pixels.height,1,this.getChannels(t.t),t.t.pixelFmt,buffer);
		} else {
			this.gl.texSubImage2D(face,mipLevel,0,0,pixels.width,pixels.height,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.restoreBind();
	}
	,uploadBufferData: function(b,startVertex,vertexCount,buf,bufPos) {
		var stride = b.format.strideBytes;
		this.gl.bindBuffer(34962,b.vbuf);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride >> 2);
		this.gl.bufferSubData(34962,startVertex * stride,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadBufferBytes: function(b,startVertex,vertexCount,buf,bufPos) {
		var stride = b.format.strideBytes;
		var type = (b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0 ? 34963 : 34962;
		this.gl.bindBuffer(type,b.vbuf);
		var sub = new Uint8Array(buf.b.bufferValue,bufPos,vertexCount * stride);
		this.gl.bufferSubData(type,startVertex * stride,sub);
		this.gl.bindBuffer(type,null);
		if((b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0) {
			this.curIndexBuffer = null;
		}
	}
	,uploadIndexData: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.format.strideBytes >> 1;
		this.gl.bindBuffer(34963,i.vbuf);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,updateDivisor: function(a) {
		if(this.currentDivisor[a.index] != a.divisor) {
			this.currentDivisor[a.index] = a.divisor;
			this.gl.vertexAttribDivisor(a.index,a.divisor);
		}
	}
	,selectBuffer: function(b) {
		if(b == this.curBuffer) {
			return;
		}
		if(this.curShader == null) {
			throw haxe_Exception.thrown("No shader selected");
		}
		this.gl.bindBuffer(34962,b.vbuf);
		this.curBuffer = b;
		var strideBytes = b.format.strideBytes;
		var map = b.format.resolveMapping(this.curShader.format);
		var _g_current = 0;
		var _g_array = this.curShader.attribs;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var a = _g_value;
			var inf = map[i];
			var norm = false;
			var tmp = this.gl;
			var a1 = a.index;
			var a2 = a.size;
			var tmp1;
			switch(inf & 7) {
			case 0:
				tmp1 = a.type;
				break;
			case 1:
				tmp1 = 5131;
				break;
			case 2:
				norm = true;
				tmp1 = 5121;
				break;
			case 3:
				norm = true;
				tmp1 = 5120;
				break;
			}
			tmp.vertexAttribPointer(a1,a2,tmp1,norm,strideBytes,inf >> 16);
			if(this.currentDivisor[a.index] != a.divisor) {
				this.currentDivisor[a.index] = a.divisor;
				this.gl.vertexAttribDivisor(a.index,a.divisor);
			}
		}
	}
	,selectMultiBuffers: function(format,buffers) {
		var format1 = this.curShader.format;
		var m = format.mappings[format1.uid];
		if(m == null) {
			m = format.makeMapping(format1);
		}
		var map = m;
		var _g_current = 0;
		var _g_array = this.curShader.attribs;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var a = _g_value;
			var inf = map[i];
			var b = buffers[inf >> 3 & 255];
			if(this.curBuffer != b) {
				this.gl.bindBuffer(34962,b.vbuf);
				this.curBuffer = b;
			}
			var norm = false;
			var tmp = this.gl;
			var a1 = a.index;
			var a2 = a.size;
			var tmp1;
			switch(inf & 7) {
			case 0:
				tmp1 = a.type;
				break;
			case 1:
				tmp1 = 5131;
				break;
			case 2:
				norm = true;
				tmp1 = 5121;
				break;
			case 3:
				norm = true;
				tmp1 = 5120;
				break;
			}
			tmp.vertexAttribPointer(a1,a2,tmp1,norm,b.format.strideBytes,inf >> 16);
			if(this.currentDivisor[a.index] != a.divisor) {
				this.currentDivisor[a.index] = a.divisor;
				this.gl.vertexAttribDivisor(a.index,a.divisor);
			}
		}
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.vbuf);
		}
		if(ibuf.format.strideBytes == 4) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	,allocInstanceBuffer: function(b,bytes) {
		var data = [];
		var _g = 0;
		var _g1 = b.commandCount;
		while(_g < _g1) {
			var i = _g++;
			var p = i * 5 * 4;
			var indexCount = bytes.getInt32(p);
			var instanceCount = bytes.getInt32(p + 4);
			var offIndex = bytes.getInt32(p + 8);
			var offVertex = bytes.getInt32(p + 12);
			var offInstance = bytes.getInt32(p + 16);
			if(offVertex != 0 || offInstance != 0) {
				throw haxe_Exception.thrown("baseVertex and baseInstance must be zero on this platform");
			}
			data.push(indexCount);
			data.push(offIndex);
			data.push(instanceCount);
		}
		b.data = data;
	}
	,disposeInstanceBuffer: function(b) {
		b.data = null;
	}
	,drawInstanced: function(ibuf,commands) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.vbuf);
		}
		var kind;
		var size;
		if(ibuf.format.strideBytes == 4) {
			kind = 5125;
			size = 4;
		} else {
			kind = 5123;
			size = 2;
		}
		var args = commands.data;
		if(args != null) {
			var p = 0;
			var _g = 0;
			var _g1 = args.length / 3 | 0;
			while(_g < _g1) {
				var i = _g++;
				this.gl.drawElementsInstanced(this.drawMode,args[p++],kind,args[p++] * size,args[p++]);
			}
		} else {
			this.gl.drawElementsInstanced(this.drawMode,commands.indexCount,kind,commands.startIndex * size,commands.commandCount);
		}
	}
	,end: function() {
	}
	,present: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d_impl_GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,unbindTargets: function() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	,capturePixels: function(tex,layer,mipLevel,region) {
		var x;
		var y;
		var w;
		var h;
		if(region != null) {
			if(region.xMax > tex.width) {
				region.xMax = tex.width;
			}
			if(region.yMax > tex.height) {
				region.yMax = tex.height;
			}
			if(region.xMin < 0) {
				region.xMin = 0;
			}
			if(region.yMin < 0) {
				region.yMin = 0;
			}
			w = region.xMax - region.xMin;
			h = region.yMax - region.yMin;
			x = region.xMin;
			y = region.yMin;
		} else {
			w = tex.width;
			h = tex.height;
			x = 0;
			y = 0;
		}
		w >>= mipLevel;
		h >>= mipLevel;
		if(w == 0) {
			w = 1;
		}
		if(h == 0) {
			h = 1;
		}
		var pixels = hxd_Pixels.alloc(w,h,tex.format);
		var old = this.curTarget;
		var oldCount = this.numTargets;
		var oldLayer = this.curTargetLayer;
		var oldMip = this.curTargetMip;
		if(oldCount > 1) {
			this.numTargets = 1;
			var _g = 1;
			var _g1 = oldCount;
			while(_g < _g1) {
				var i = _g++;
				if(this.curTargets[i] == tex) {
					this.gl.framebufferTexture2D(36160,36064 + i,3553,null,0);
				}
			}
		}
		this.setRenderTarget(tex,layer,mipLevel);
		this.captureSubRenderBuffer(pixels,x,y);
		this.setRenderTarget(old,oldLayer,oldMip);
		if(oldCount > 1) {
			var _g = 1;
			var _g1 = oldCount;
			while(_g < _g1) {
				var i = _g++;
				if(this.curTargets[i] == tex) {
					this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
				}
			}
			this.setDrawBuffers(oldCount);
			this.numTargets = oldCount;
		}
		return pixels;
	}
	,setRenderTarget: function(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw haxe_Exception.thrown("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw haxe_Exception.thrown("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			var bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0 ? h3d_impl_GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		if(tex.depthBuffer != null && depthBinding != h3d_DepthBinding.NotBound) {
			if(tex.depthBuffer.hasStencil() && tex.depthBuffer.format == hxd_PixelFormat.Depth24Stencil8) {
				this.gl.framebufferTexture2D(36160,33306,3553,tex.depthBuffer.t.t,0);
			} else {
				this.gl.framebufferTexture2D(36160,33306,3553,null,0);
				this.gl.framebufferTexture2D(36160,36096,3553,tex.depthBuffer.t.t,0);
				this.gl.framebufferTexture2D(36160,36128,3553,tex.depthBuffer.hasStencil() ? tex.depthBuffer.t.t : null,0);
			}
		} else {
			this.gl.framebufferTexture2D(36160,33306,3553,null,0);
			this.gl.framebufferTexture2D(36160,36096,3553,null,0);
			this.gl.framebufferTexture2D(36160,36128,3553,null,0);
		}
		var w = tex.width >> mipLevel;
		if(w == 0) {
			w = 1;
		}
		var h = tex.height >> mipLevel;
		if(h == 0) {
			h = 1;
		}
		this.gl.viewport(0,0,w,h);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
			this.clear(h3d_impl_GlDriver.BLACK);
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe_Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	,setRenderTargets: function(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		this.unbindTargets();
		this.setRenderTarget(textures[0],null,null,depthBinding);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		var needClear = false;
		var _g = 1;
		var _g1 = textures.length;
		while(_g < _g1) {
			var i = _g++;
			var tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			this.curTargets[i] = tex;
			tex.set_lastFrame(this.frame);
			if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
				tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
				needClear = true;
			}
		}
		this.setDrawBuffers(textures.length);
		if(needClear) {
			this.clear(h3d_impl_GlDriver.BLACK);
		}
	}
	,setDepth: function(depthBuffer) {
		this.unbindTargets();
		this.curTarget = depthBuffer;
		depthBuffer.set_lastFrame(this.frame);
		this.curTargetLayer = 0;
		this.curTargetMip = 0;
		this.gl.bindFramebuffer(36160,this.commonFB);
		this.gl.framebufferTexture2D(36160,36064,3553,null,0);
		if(depthBuffer.hasStencil() && depthBuffer.format == hxd_PixelFormat.Depth24Stencil8) {
			this.gl.framebufferTexture2D(36160,33306,3553,depthBuffer.t.t,0);
		} else {
			this.gl.framebufferTexture2D(36160,33306,3553,null,0);
			this.gl.framebufferTexture2D(36160,36096,3553,depthBuffer.t.t,0);
			this.gl.framebufferTexture2D(36160,36128,3553,depthBuffer.hasStencil() ? depthBuffer.t.t : null,0);
		}
		var w = depthBuffer.width;
		if(w == 0) {
			w = 1;
		}
		var h = depthBuffer.height;
		if(h == 0) {
			h = 1;
		}
		this.gl.viewport(0,0,w,h);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe_Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		if(window.document.readyState == "complete") {
			var _g = onCreate;
			var a1 = false;
			haxe_Timer.delay(function() {
				_g(a1);
			},1);
		} else {
			var onLoad = null;
			onLoad = function() {
				window.removeEventListener("load",onLoad);
				onCreate(false);
			};
			window.addEventListener("load",onLoad);
		}
	}
	,hasFeature: function(f) {
		return this.features.get(f);
	}
	,makeFeatures: function() {
		var _g = 0;
		var _g1 = h3d_impl_Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
			if(this.gl.getExtension("EXT_texture_compression_bptc") != null) {
				this.maxCompressedTexturesSupport = 7;
			}
		}
		if(this.glES < 3) {
			this.gl.getExtension("WEBGL_depth_texture");
		}
		this.has16Bits = this.gl.getExtension("EXT_texture_norm16") != null;
	}
	,checkFeature: function(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		case 10:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("ANGLE_instanced_arrays") != null;
			}
			break;
		default:
			return false;
		}
	}
	,uploadTextureVideoElement: function(t,v,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var bind = this.getBindType(t);
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			throw haxe_Exception.thrown("TODO:texImage3D");
		}
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		this.gl.texSubImage2D(face,mipLevel,0,0,v.videoWidth,v.videoHeight,this.getChannels(t.t),t.t.pixelFmt,v);
		this.restoreBind();
	}
	,captureRenderBuffer: function(pixels) {
		this.captureSubRenderBuffer(pixels,0,0);
	}
	,captureSubRenderBuffer: function(pixels,x,y) {
		if(this.curTarget == null) {
			throw haxe_Exception.thrown("Can't capture main render buffer in GL");
		}
		this.gl.getError();
		var buffer = pixels.bytes.b;
		switch(this.curTarget.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(buffer.buffer);
			break;
		case 16:case 17:
			buffer = new Uint32Array(buffer.buffer);
			break;
		case 3:case 6:case 9:case 12:case 18:case 19:case 20:case 21:
			buffer = new Uint16Array(buffer.buffer);
			break;
		default:
		}
		this.gl.readPixels(x,y,pixels.width,pixels.height,this.getChannels(this.curTarget.t),this.curTarget.t.pixelFmt,buffer);
		var error = this.gl.getError();
		if(error != 0) {
			throw haxe_Exception.thrown("Failed to capture pixels (error " + error + ")");
		}
		pixels.set_innerFormat(this.curTarget.format);
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl_InstanceBuffer = function() {
	this.triCount = 0;
};
$hxClasses["h3d.impl.InstanceBuffer"] = h3d_impl_InstanceBuffer;
h3d_impl_InstanceBuffer.__name__ = "h3d.impl.InstanceBuffer";
h3d_impl_InstanceBuffer.prototype = {
	setCommand: function(commandCount,indexCount,startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		this.commandCount = commandCount;
		this.indexCount = indexCount;
		this.triCount = commandCount * indexCount / 3 | 0;
		this.startIndex = startIndex;
	}
	,setBuffer: function(commandCount,bytes) {
		this.dispose();
		var _g = 0;
		var _g1 = commandCount;
		while(_g < _g1) {
			var i = _g++;
			var idxCount = bytes.getInt32(i * 20);
			var instCount = bytes.getInt32(i * 20 + 4);
			var tri = idxCount * instCount / 3 | 0;
			this.triCount += tri;
		}
		this.commandCount = commandCount;
		this.indexCount = 0;
		this.driver = h3d_Engine.CURRENT.driver;
		this.driver.allocInstanceBuffer(this,bytes);
	}
	,dispose: function() {
		if(this.data != null) {
			this.driver.disposeInstanceBuffer(this);
		}
	}
	,__class__: h3d_impl_InstanceBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
$hxClasses["h3d.impl.MemoryManager"] = h3d_impl_MemoryManager;
h3d_impl_MemoryManager.__name__ = "h3d.impl.MemoryManager";
h3d_impl_MemoryManager.prototype = {
	init: function() {
		this.textures = [];
		this.buffers = [];
		this.depths = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var indices = new Array(0);
		var _g = 0;
		while(_g < 65532) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes16 = h3d_Indexes.alloc(indices);
		var indices = new Array(0);
		var p = 0;
		var _g = 0;
		while(_g < 10922) {
			var i = _g++;
			var k = i << 2;
			indices.push(k);
			indices.push(k + 1);
			indices.push(k + 2);
			indices.push(k + 2);
			indices.push(k + 1);
			indices.push(k + 3);
		}
		indices.push(65532);
		this.quadIndexes16 = h3d_Indexes.alloc(indices);
	}
	,garbage: function() {
	}
	,getTriIndexes: function(vertices) {
		if(vertices <= 65532) {
			return this.triIndexes16;
		}
		if(this.triIndexes32 == null || this.triIndexes32.vertices < vertices) {
			var sz = 131072;
			while(sz < vertices) sz <<= 1;
			var bytes = new haxe_io_Bytes(new ArrayBuffer(sz << 2));
			var _g = 0;
			var _g1 = sz;
			while(_g < _g1) {
				var i = _g++;
				bytes.setInt32(i << 2,i);
			}
			if(this.triIndexes32 != null) {
				this.triIndexes32.dispose();
			}
			this.triIndexes32 = h3d_Indexes._new(sz,true);
			this.triIndexes32.uploadBytes(bytes,0,sz);
		}
		return this.triIndexes32;
	}
	,getQuadIndexes: function(vertices) {
		var nquads = (vertices + 3 >> 2) * 6;
		if(nquads <= 65532) {
			return this.quadIndexes16;
		}
		if(this.quadIndexes32 == null || this.quadIndexes32.vertices < vertices) {
			var sz = 131072;
			while(sz < nquads) sz <<= 1;
			var bytes = new haxe_io_Bytes(new ArrayBuffer(sz << 2));
			var p = 0;
			var _g = 0;
			var _g1 = sz / 6 | 0;
			while(_g < _g1) {
				var i = _g++;
				var k = i << 2;
				bytes.setInt32(p++ << 2,k);
				bytes.setInt32(p++ << 2,k + 1);
				bytes.setInt32(p++ << 2,k + 2);
				bytes.setInt32(p++ << 2,k + 2);
				bytes.setInt32(p++ << 2,k + 1);
				bytes.setInt32(p++ << 2,k + 3);
			}
			if(this.quadIndexes32 != null) {
				this.quadIndexes32.dispose();
			}
			this.quadIndexes32 = h3d_Indexes._new(sz,true);
			this.quadIndexes32.uploadBytes(bytes,0,sz);
		}
		return this.quadIndexes32;
	}
	,allocBuffer: function(b) {
		if(b.vbuf != null) {
			return;
		}
		var mem = b.vertices * b.format.strideBytes;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || (b.vbuf = this.driver.allocBuffer(b)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			var size = this.usedMemory;
			this.garbage();
			if(this.usedMemory == size) {
				throw haxe_Exception.thrown("Memory full (" + Math.ceil(size / 1024) + " KB," + this.buffers.length + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.buffers.push(b);
	}
	,freeBuffer: function(b) {
		if(b.vbuf == null) {
			return;
		}
		this.driver.disposeBuffer(b);
		b.vbuf = null;
		if(HxOverrides.remove(this.buffers,b)) {
			this.usedMemory -= b.vertices * b.format.strideBytes;
		}
	}
	,memSize: function(t) {
		if((t.flags & 1 << h3d_mat_TextureFlags.AsyncLoading._hx_index) != 0 && (t.flags & 1 << h3d_mat_TextureFlags.Loading._hx_index) != 0) {
			return 4;
		}
		var size = hxd_Pixels.calcDataSize(t.width,t.height,t.format);
		if(t.get_mipLevels() > 0) {
			var _g = 1;
			var _g1 = t.get_mipLevels();
			while(_g < _g1) {
				var i = _g++;
				var w = t.width >> i;
				if(w == 0) {
					w = 1;
				}
				var h = t.height >> i;
				if(h == 0) {
					h = 1;
				}
				size += hxd_Pixels.calcDataSize(w,h,t.format);
			}
		}
		return size * t.get_layerCount();
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null || (t.isDepth() ? t.t == null : t.t == null && t.realloc == null)) {
				continue;
			}
			if((force || t._lastFrame < hxd_Timer.frameCount - 3600) && t._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1._lastFrame - t2._lastFrame;
	}
	,deleteTexture: function(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= this.memSize(t);
	}
	,allocTexture: function(t) {
		while(true) {
			var free = this.cleanTextures(false);
			t.t = this.driver.allocTexture(t);
			if(t.t != null) {
				break;
			}
			if(this.driver.isDisposed()) {
				return;
			}
			while(this.cleanTextures(false)) {
			}
			if(!free && !this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
		}
		this.textures.push(t);
		this.texMemory += this.memSize(t);
	}
	,allocDepth: function(b) {
		while(true) {
			var free = this.cleanTextures(false);
			b.t = this.driver.allocDepthBuffer(b);
			if(b.t != null) {
				break;
			}
			if(this.driver.isDisposed()) {
				return;
			}
			while(this.cleanTextures(false)) {
			}
			if(!free && !this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
		}
		this.depths.push(b);
		this.texMemory += b.width * b.height * 4;
	}
	,deleteDepth: function(b) {
		if(!HxOverrides.remove(this.depths,b)) {
			return;
		}
		this.driver.disposeDepthBuffer(b);
		this.texMemory -= b.width * b.height * 4;
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		if(this.triIndexes16 != null) {
			this.triIndexes16.dispose();
		}
		if(this.quadIndexes16 != null) {
			this.quadIndexes16.dispose();
		}
		if(this.triIndexes32 != null) {
			this.triIndexes32.dispose();
		}
		if(this.quadIndexes32 != null) {
			this.quadIndexes32.dispose();
		}
		this.triIndexes16 = null;
		this.quadIndexes16 = null;
		this.triIndexes32 = null;
		this.quadIndexes32 = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g = 0;
		var _g1 = this.depths.slice();
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.dispose();
		}
		var _g = 0;
		var _g1 = this.buffers.slice();
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.dispose();
		}
		this.buffers = [];
		this.textures = [];
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,stats: function() {
		var total = 0.;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			total += b.vertices * b.format.strideBytes;
		}
		return { bufferCount : this.buffers.length, bufferMemory : total, totalMemory : this.usedMemory + this.texMemory, textureCount : this.textures.length, textureMemory : this.texMemory};
	}
	,allocStats: function() {
		return [];
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_NullDriver = function() {
	h3d_impl_Driver.call(this);
};
$hxClasses["h3d.impl.NullDriver"] = h3d_impl_NullDriver;
h3d_impl_NullDriver.__name__ = "h3d.impl.NullDriver";
h3d_impl_NullDriver.__super__ = h3d_impl_Driver;
h3d_impl_NullDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	hasFeature: function(f) {
		return true;
	}
	,isSupportedFormat: function(fmt) {
		return true;
	}
	,logImpl: function(str) {
		haxe_Log.trace(str,{ fileName : "h3d/impl/NullDriver.hx", lineNumber : 23, className : "h3d.impl.NullDriver", methodName : "logImpl"});
	}
	,isDisposed: function() {
		return false;
	}
	,getDriverName: function(details) {
		return "NullDriver";
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		onCreate(false);
	}
	,selectShader: function(shader) {
		if(this.cur == shader) {
			return false;
		}
		this.cur = shader;
		return true;
	}
	,allocTexture: function(t) {
		return { };
	}
	,allocBuffer: function(b) {
		return { };
	}
	,__class__: h3d_impl_NullDriver
});
var h3d_impl_Step = $hxEnums["h3d.impl.Step"] = { __ename__:"h3d.impl.Step",__constructs__:null
	,MainDraw: {_hx_name:"MainDraw",_hx_index:0,__enum__:"h3d.impl.Step",toString:$estr}
	,Decals: {_hx_name:"Decals",_hx_index:1,__enum__:"h3d.impl.Step",toString:$estr}
	,Shadows: {_hx_name:"Shadows",_hx_index:2,__enum__:"h3d.impl.Step",toString:$estr}
	,Lighting: {_hx_name:"Lighting",_hx_index:3,__enum__:"h3d.impl.Step",toString:$estr}
	,Forward: {_hx_name:"Forward",_hx_index:4,__enum__:"h3d.impl.Step",toString:$estr}
	,BeforeTonemapping: {_hx_name:"BeforeTonemapping",_hx_index:5,__enum__:"h3d.impl.Step",toString:$estr}
	,AfterTonemapping: {_hx_name:"AfterTonemapping",_hx_index:6,__enum__:"h3d.impl.Step",toString:$estr}
	,Overlay: {_hx_name:"Overlay",_hx_index:7,__enum__:"h3d.impl.Step",toString:$estr}
	,Custom: ($_=function(name) { return {_hx_index:8,name:name,__enum__:"h3d.impl.Step",toString:$estr,__params__:function(){ return [this.name];}}; },$_._hx_name="Custom",$_)
};
h3d_impl_Step.__constructs__ = [h3d_impl_Step.MainDraw,h3d_impl_Step.Decals,h3d_impl_Step.Shadows,h3d_impl_Step.Lighting,h3d_impl_Step.Forward,h3d_impl_Step.BeforeTonemapping,h3d_impl_Step.AfterTonemapping,h3d_impl_Step.Overlay,h3d_impl_Step.Custom];
h3d_impl_Step.__empty_constructs__ = [h3d_impl_Step.MainDraw,h3d_impl_Step.Decals,h3d_impl_Step.Shadows,h3d_impl_Step.Lighting,h3d_impl_Step.Forward,h3d_impl_Step.BeforeTonemapping,h3d_impl_Step.AfterTonemapping,h3d_impl_Step.Overlay];
var h3d_impl_RendererFX = function() { };
$hxClasses["h3d.impl.RendererFX"] = h3d_impl_RendererFX;
h3d_impl_RendererFX.__name__ = "h3d.impl.RendererFX";
h3d_impl_RendererFX.__isInterface__ = true;
h3d_impl_RendererFX.prototype = {
	__class__: h3d_impl_RendererFX
};
var h3d_impl_ShaderCache = function(file,outputFile) {
	this.file = file;
	var tmp = outputFile;
	this.outputFile = tmp != null ? tmp : file;
	this.sourceFile = file + ".source";
};
$hxClasses["h3d.impl.ShaderCache"] = h3d_impl_ShaderCache;
h3d_impl_ShaderCache.__name__ = "h3d.impl.ShaderCache";
h3d_impl_ShaderCache.prototype = {
	disableSave: function() {
		this.outputFile = null;
	}
	,initEmpty: function() {
		this.data = new haxe_ds_StringMap();
		this.sources = new haxe_ds_StringMap();
	}
	,load: function() {
		this.data = new haxe_ds_StringMap();
		try {
			this.loadFile(this.file);
		} catch( _g ) {
		}
		if(this.outputFile != this.file) {
			try {
				this.loadFile(this.outputFile);
			} catch( _g ) {
			}
		}
		if(this.keepSource) {
			try {
				this.loadSources();
			} catch( _g ) {
			}
		}
	}
	,loadFile: function(file) {
		throw haxe_Exception.thrown("Cannot load shader cache with this platform");
	}
	,loadSources: function() {
		throw haxe_Exception.thrown("Cannot load shader cache with this platform");
	}
	,resolveShaderBinary: function(source,configurationKey) {
		if(configurationKey == null) {
			configurationKey = "";
		}
		if(this.data == null) {
			this.load();
		}
		var this1 = this.data;
		var key = configurationKey + haxe_crypto_Md5.encode(source);
		return this1.h[key];
	}
	,saveCompiledShader: function(source,bytes,configurationKey,saveToFile) {
		if(saveToFile == null) {
			saveToFile = true;
		}
		if(configurationKey == null) {
			configurationKey = "";
		}
		if(this.outputFile == null) {
			return;
		}
		if(this.data == null) {
			this.load();
		}
		var key = configurationKey + haxe_crypto_Md5.encode(source);
		if(this.data.h[key] == bytes && (!this.keepSource || this.sources.h[key] == source)) {
			return;
		}
		this.data.h[key] = bytes;
		if(saveToFile) {
			this.save();
		}
		if(this.keepSource) {
			this.sources.h[key] = source;
			this.saveSources();
		}
	}
	,save: function() {
		var out = new haxe_io_BytesOutput();
		var _e = this.data;
		var keys = Lambda.array({ iterator : function() {
			return new haxe_ds__$StringMap_StringMapKeyIterator(_e.h);
		}});
		keys.sort(Reflect.compare);
		var _g = 0;
		while(_g < keys.length) {
			var key = keys[_g];
			++_g;
			out.writeInt32(key.length);
			out.writeString(key);
			var b64 = haxe_crypto_Base64.encode(this.data.h[key]);
			out.writeInt32(b64.length);
			out.writeString(b64);
			out.writeByte(10);
		}
	}
	,saveSources: function() {
		var out = new haxe_io_BytesOutput();
		var _e = this.sources;
		var keys = Lambda.array({ iterator : function() {
			return new haxe_ds__$StringMap_StringMapKeyIterator(_e.h);
		}});
		keys.sort(Reflect.compare);
		var _g = 0;
		while(_g < keys.length) {
			var key = keys[_g];
			++_g;
			out.writeInt32(key.length);
			out.writeString(key);
			var src = this.sources.h[key];
			out.writeInt32(src.length);
			out.writeString(src);
			out.writeByte(10);
			out.writeByte(10);
		}
	}
	,__class__: h3d_impl_ShaderCache
};
var h3d_impl_TextureCache = function() {
	this.position = 0;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_Texture.getDefaultDepth();
};
$hxClasses["h3d.impl.TextureCache"] = h3d_impl_TextureCache;
h3d_impl_TextureCache.__name__ = "h3d.impl.TextureCache";
h3d_impl_TextureCache.prototype = {
	get: function(index) {
		if(index == null) {
			index = 0;
		}
		return this.cache[index];
	}
	,getNamed: function(name) {
		var _g = 0;
		var _g1 = this.position;
		while(_g < _g1) {
			var i = _g++;
			if(this.cache[i].name == name) {
				return this.cache[i];
			}
		}
		return null;
	}
	,set: function(t,index) {
		this.cache[index] = t;
	}
	,begin: function() {
		while(this.cache.length > this.position) {
			var t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	,lookupTarget: function(name,width,height,format,flags) {
		var t = this.cache[this.position];
		var _g = this.position + 1;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var t2 = this.cache[i];
			if(t2 != null && !(t2.isDepth() ? t2.t == null : t2.t == null && t2.realloc == null) && t2.width == width && t2.height == height && t2.format == format) {
				if(flags != null) {
					var fitFlags = true;
					var _g2 = 0;
					while(_g2 < flags.length) {
						var f = flags[_g2];
						++_g2;
						if((t2.flags & 1 << f._hx_index) == 0) {
							fitFlags = false;
							break;
						}
					}
					if(!fitFlags) {
						continue;
					}
				}
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		if(flags == null) {
			flags = [];
		}
		if(flags.indexOf(h3d_mat_TextureFlags.Target) == -1) {
			flags.push(h3d_mat_TextureFlags.Target);
		}
		var newt = new h3d_mat_Texture(width,height,flags,format);
		newt.realloc = function() {
		};
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	,allocTarget: function(name,width,height,defaultDepth,format,flags) {
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		var alloc = false;
		if(t == null || (t.isDepth() ? t.t == null : t.t == null && t.realloc == null) || t.width != width || t.height != height || t.format != format) {
			alloc = true;
		}
		if(!alloc && flags != null) {
			var _g = 0;
			while(_g < flags.length) {
				var f = flags[_g];
				++_g;
				if((t.flags & 1 << f._hx_index) == 0) {
					alloc = true;
					break;
				}
			}
		}
		if(alloc) {
			t = this.lookupTarget(name,width,height,format,flags);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,allocTargetScale: function(name,scale,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var e = h3d_Engine.CURRENT;
		return this.allocTarget(name,Math.ceil(e.width * scale),Math.ceil(e.height * scale),defaultDepth,format);
	}
	,allocTileTarget: function(name,tile,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = false;
		}
		return this.allocTarget(name,Math.ceil(tile.width + tile.x) - Math.floor(tile.x),Math.ceil(tile.height + tile.y) - Math.floor(tile.y),defaultDepth,format);
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.cache;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		this.cache = [];
	}
	,__class__: h3d_impl_TextureCache
};
var hxd_impl_AnyProps = function() { };
$hxClasses["hxd.impl.AnyProps"] = hxd_impl_AnyProps;
hxd_impl_AnyProps.__name__ = "hxd.impl.AnyProps";
hxd_impl_AnyProps.prototype = {
	set_props: function(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	,setDefaultProps: function(kind) {
		this.set_props(this.getDefaultProps(kind));
	}
	,getDefaultProps: function(kind) {
		return { };
	}
	,refreshProps: function() {
	}
	,__class__: hxd_impl_AnyProps
};
var h3d_mat_BaseMaterial = function(shader) {
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
$hxClasses["h3d.mat.BaseMaterial"] = h3d_mat_BaseMaterial;
h3d_mat_BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d_mat_BaseMaterial.__super__ = hxd_impl_AnyProps;
h3d_mat_BaseMaterial.prototype = $extend(hxd_impl_AnyProps.prototype,{
	addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,removePass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	,get_mainPass: function() {
		return this.passes;
	}
	,getPasses: function() {
		var p = this.passes;
		var out = [];
		while(p != null) {
			out.push(p);
			p = p.nextPass;
		}
		return out;
	}
	,getPass: function(name) {
		var p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	,allocPass: function(name,inheritMain) {
		if(inheritMain == null) {
			inheritMain = true;
		}
		var p = this.getPass(name);
		if(p != null) {
			return p;
		}
		var p = new h3d_mat_Pass(name,null,inheritMain ? this.passes : null);
		if(inheritMain && this.passes != null) {
			p.set_batchMode(this.passes.batchMode);
		}
		this.addPass(p);
		return p;
	}
	,clone: function(m) {
		if(m == null) {
			m = new h3d_mat_BaseMaterial();
		}
		m.passes.load(this.passes);
		m.name = this.name;
		m.set_props(this.props);
		return m;
	}
	,__class__: h3d_mat_BaseMaterial
});
var h3d_mat_Face = $hxEnums["h3d.mat.Face"] = { __ename__:"h3d.mat.Face",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_name:"Back",_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_name:"Front",_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_name:"Both",_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d_mat_Face.__constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxEnums["h3d.mat.Blend"] = { __ename__:"h3d.mat.Blend",__constructs__:null
	,One: {_hx_name:"One",_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_name:"SrcAlpha",_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_name:"SrcColor",_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_name:"DstAlpha",_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_name:"DstColor",_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_name:"OneMinusSrcAlpha",_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_name:"OneMinusSrcColor",_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_name:"OneMinusDstAlpha",_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_name:"OneMinusDstColor",_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_name:"ConstantColor",_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_name:"ConstantAlpha",_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_name:"OneMinusConstantColor",_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_name:"OneMinusConstantAlpha",_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_name:"SrcAlphaSaturate",_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d_mat_Blend.__constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxEnums["h3d.mat.Compare"] = { __ename__:"h3d.mat.Compare",__constructs__:null
	,Always: {_hx_name:"Always",_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_name:"Never",_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_name:"Equal",_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_name:"NotEqual",_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_name:"Greater",_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_name:"GreaterEqual",_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_name:"Less",_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_name:"LessEqual",_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d_mat_Compare.__constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__:"h3d.mat.StencilOp",__constructs__:null
	,Keep: {_hx_name:"Keep",_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_name:"Replace",_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_name:"Increment",_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_name:"IncrementWrap",_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_name:"Decrement",_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_name:"DecrementWrap",_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_name:"Invert",_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d_mat_StencilOp.__constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__:"h3d.mat.MipMap",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_name:"Nearest",_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_name:"Linear",_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d_mat_MipMap.__constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxEnums["h3d.mat.Filter"] = { __ename__:"h3d.mat.Filter",__constructs__:null
	,Nearest: {_hx_name:"Nearest",_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_name:"Linear",_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d_mat_Filter.__constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__:"h3d.mat.Wrap",__constructs__:null
	,Clamp: {_hx_name:"Clamp",_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_name:"Repeat",_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d_mat_Wrap.__constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxEnums["h3d.mat.Operation"] = { __ename__:"h3d.mat.Operation",__constructs__:null
	,Add: {_hx_name:"Add",_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_name:"Sub",_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_name:"ReverseSub",_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d_mat_Operation.__constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
var h3d_mat_TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__:"h3d.mat.TextureFlags",__constructs__:null
	,Target: {_hx_name:"Target",_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_name:"Cube",_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_name:"MipMapped",_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_name:"ManualMipMapGen",_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_name:"IsNPOT",_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_name:"NoAlloc",_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_name:"Dynamic",_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_name:"AlphaPremultiplied",_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_name:"WasCleared",_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_name:"Loading",_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_name:"Serialize",_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_name:"IsArray",_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AsyncLoading: {_hx_name:"AsyncLoading",_hx_index:12,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,LazyLoading: {_hx_name:"LazyLoading",_hx_index:13,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d_mat_TextureFlags.__constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray,h3d_mat_TextureFlags.AsyncLoading,h3d_mat_TextureFlags.LazyLoading];
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray,h3d_mat_TextureFlags.AsyncLoading,h3d_mat_TextureFlags.LazyLoading];
var h3d_mat_Defaults = function() { };
$hxClasses["h3d.mat.Defaults"] = h3d_mat_Defaults;
h3d_mat_Defaults.__name__ = "h3d.mat.Defaults";
h3d_mat_Defaults.get_shadowShader = function() {
	var s = h3d_mat_Defaults.shadowShader;
	if(s == null) {
		s = new h3d_shader_Shadow();
		h3d_mat_Defaults.set_shadowShader(s);
		h3d_mat_Defaults.shadowShader.setPriority(-1);
	}
	return s;
};
h3d_mat_Defaults.set_shadowShader = function(s) {
	return h3d_mat_Defaults.shadowShader = s;
};
h3d_mat_Defaults.makeVolumeDecal = function(bounds) {
	return new h3d_shader_VolumeDecal(bounds.xMax - bounds.xMin,bounds.yMax - bounds.yMin);
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
$hxClasses["h3d.mat.Material"] = h3d_mat_Material;
h3d_mat_Material.__name__ = "h3d.mat.Material";
h3d_mat_Material.create = function(tex) {
	var mat = h3d_mat_MaterialSetup.current.createMaterial();
	mat.set_texture(tex);
	mat.set_props(mat.getDefaultProps());
	return mat;
};
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	get_specularPower: function() {
		return this.mshader.specularPower__;
	}
	,set_specularPower: function(v) {
		return this.mshader.specularPower__ = v;
	}
	,get_specularAmount: function() {
		return this.mshader.specularAmount__;
	}
	,set_specularAmount: function(v) {
		return this.mshader.specularAmount__ = v;
	}
	,get_color: function() {
		return this.mshader.color__;
	}
	,set_color: function(v) {
		return this.mshader.color__ = v;
	}
	,get_shadows: function() {
		if(this.castShadows) {
			return this.receiveShadows;
		} else {
			return false;
		}
	}
	,set_shadows: function(v) {
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		return v;
	}
	,set_castShadows: function(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	,set_receiveShadows: function(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			var shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	,set_staticShadows: function(v) {
		var p = this.getPass("shadow");
		if(p != null) {
			p.set_isStatic(v);
		}
		return this.staticShadows = v;
	}
	,clone: function(m) {
		var m1 = m == null ? new h3d_mat_Material() : m;
		h3d_mat_BaseMaterial.prototype.clone.call(this,m1);
		m1.set_castShadows(this.castShadows);
		m1.set_receiveShadows(this.receiveShadows);
		m1.set_texture(this.get_texture());
		m1.set_specularTexture(this.get_specularTexture());
		m1.set_normalMap(this.get_normalMap());
		if(this.textureShader != null) {
			var _this = m1.textureShader;
			_this.constModified = true;
			_this.additive__ = this.textureShader.additive__;
			var _this = m1.textureShader;
			_this.constModified = true;
			_this.killAlpha__ = this.textureShader.killAlpha__;
			m1.textureShader.killAlphaThreshold__ = this.textureShader.killAlphaThreshold__;
		}
		m1.mshader.color__ = this.mshader.color__;
		m1.set_blendMode(this.blendMode);
		return m1;
	}
	,set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,get_specularTexture: function() {
		if(this.specularShader == null) {
			return null;
		} else {
			return this.specularShader.texture__;
		}
	}
	,get_texture: function() {
		if(this.textureShader == null) {
			return null;
		} else {
			return this.textureShader.texture__;
		}
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,get_normalMap: function() {
		if(this.normalShader == null) {
			return null;
		} else {
			return this.normalShader.texture__;
		}
	}
	,set_normalMap: function(t) {
		if(t == null) {
			if(this.normalShader != null) {
				this.passes.removeShader(this.normalShader);
				this.normalShader = null;
			}
		} else {
			if(this.normalShader == null) {
				this.normalShader = new h3d_shader_NormalMap();
				if(this.textureShader != null) {
					this.passes.addShaderAtIndex(this.normalShader,this.passes.getShaderIndex(this.textureShader) + 1);
				} else {
					this.passes.addShader(this.normalShader);
				}
			}
			this.normalShader.texture__ = t;
		}
		return t;
	}
	,set_specularTexture: function(t) {
		if(t == null) {
			if(this.specularShader != null) {
				this.passes.removeShader(this.specularShader);
				this.specularShader = null;
			}
		} else {
			if(this.specularShader == null) {
				this.specularShader = new h3d_shader_SpecularTexture();
				this.passes.addShader(this.specularShader);
			}
			this.specularShader.texture__ = t;
		}
		return t;
	}
	,getDefaultModelProps: function() {
		var props = this.getDefaultProps();
		switch(this.blendMode._hx_index) {
		case 0:
			break;
		case 1:
			props.kind = "Alpha";
			break;
		case 2:
			props.kind = "Add";
			props.culling = false;
			props.shadows = false;
			props.light = false;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported HMD material " + Std.string(this.blendMode));
		}
		return props;
	}
	,getDefaultProps: function(type) {
		var props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	,refreshProps: function() {
		if(this.props == null || this.passes == null) {
			return;
		}
		var props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d_BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d_BlendMode.Alpha);
			break;
		case "AlphaKill":case "Hidden":case "Opaque":
			this.set_blendMode(h2d_BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d_BlendMode.SoftAdd);
			break;
		}
		var tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.kind == "Hidden" ? h3d_mat_Face.Both : props.culling ? h3d_mat_Face.Back : h3d_mat_Face.None);
		this.passes.set_enableLights(props.light);
		var v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
	,__class__: h3d_mat_Material
});
var h3d_mat_MaterialDatabase = function() {
	this.db = new haxe_ds_StringMap();
};
$hxClasses["h3d.mat.MaterialDatabase"] = h3d_mat_MaterialDatabase;
h3d_mat_MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
h3d_mat_MaterialDatabase.prototype = {
	getFilePath: function(model) {
		var dir = model.entry.get_directory();
		var filename = "materials.props";
		if(dir == null || dir == "") {
			return filename;
		} else {
			return model.entry.get_directory() + "/" + filename;
		}
	}
	,getModelData: function(model) {
		if(model == null) {
			return null;
		}
		var this1 = this.db;
		var key = model.entry.get_directory();
		var cached = this1.h[key];
		if(cached != null) {
			return cached.v;
		}
		var file = this.getFilePath(model);
		var value;
		try {
			value = JSON.parse(hxd_res_Loader.currentInstance.load(file).toText());
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof hxd_fs_NotFound)) {
				value = { };
			} else {
				throw _g;
			}
		}
		var this1 = this.db;
		var key = model.entry.get_directory();
		this1.h[key] = { v : value};
		return value;
	}
	,saveData: function(model,data) {
		var file = this.getFilePath(model);
		throw haxe_Exception.thrown("Can't save material props database " + file);
	}
	,loadMatProps: function(material,setup) {
		var p = this.getModelData(material.model);
		if(p == null) {
			return p;
		}
		p = p.materials;
		if(p == null) {
			return p;
		}
		p = Reflect.field(p,setup.name);
		if(p == null) {
			return p;
		}
		if(material.model != null) {
			var specData = Reflect.field(p,material.name + "/" + material.model.entry.name);
			if(specData != null) {
				return specData;
			}
		}
		return Reflect.field(p,material.name);
	}
	,saveMatProps: function(material,setup,defaultProps) {
		var path = ["materials",setup.name,material.name];
		var root = this.getModelData(material.model);
		if(root == null) {
			return;
		}
		var realRoot = root;
		var prevs = [];
		var _g = 0;
		var _g1 = path.length - 1;
		while(_g < _g1) {
			var i = _g++;
			var next = Reflect.field(root,path[i]);
			if(next == null) {
				next = { };
				root[path[i]] = next;
			}
			prevs.push(root);
			root = next;
		}
		var currentProps = material.props;
		var modelSpec = currentProps.__refMode == "modelSpec";
		var name = path.pop();
		if(!modelSpec) {
			Reflect.deleteField(root,name);
		}
		var specName = name + "/" + (material.model != null ? material.model.entry.name : "");
		Reflect.deleteField(root,specName);
		if(defaultProps == null) {
			defaultProps = material.getDefaultProps();
		}
		if(currentProps == null || (defaultProps == null ? "null" : Std.string(defaultProps)) == (currentProps == null ? "null" : Std.string(currentProps))) {
			while(path.length > 0) {
				var name1 = path.pop();
				var root1 = prevs.pop();
				if(Reflect.fields(Reflect.field(root1,name1)).length != 0) {
					break;
				}
				Reflect.deleteField(root1,name1);
			}
		} else {
			root[modelSpec ? specName : name] = currentProps;
		}
		var file = this.getFilePath(material.model);
		if(Reflect.fields(realRoot).length == 0) {
			realRoot = null;
		}
		this.saveData(material.model,realRoot);
	}
	,__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase();
	}
	this.name = name;
};
$hxClasses["h3d.mat.MaterialSetup"] = h3d_mat_MaterialSetup;
h3d_mat_MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
h3d_mat_MaterialSetup.prototype = {
	createRenderer: function() {
		return new h3d_scene_fwd_Renderer();
	}
	,createLightSystem: function() {
		return new h3d_scene_fwd_LightSystem();
	}
	,createMaterial: function() {
		return new h3d_mat_Material();
	}
	,getDefaults: function(kind) {
		if(this.emptyMat == null) {
			this.emptyMat = this.createMaterial();
		}
		return this.emptyMat.getDefaultProps(kind);
	}
	,loadMaterialProps: function(material) {
		return this.database.loadMatProps(material,this);
	}
	,saveMaterialProps: function(material,defaultProps) {
		this.database.saveMatProps(material,this,defaultProps);
	}
	,customMeshInit: function(mesh) {
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.layer = 0;
	this.rendererFlags = 0;
	this.culled = false;
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.colorMask = 15;
};
$hxClasses["h3d.mat.Pass"] = h3d_mat_Pass;
h3d_mat_Pass.__name__ = "h3d.mat.Pass";
h3d_mat_Pass.getEnableLights = function(v) {
	return v & 1;
};
h3d_mat_Pass.getDynamicParameters = function(v) {
	return v >> 1 & 1;
};
h3d_mat_Pass.getIsStatic = function(v) {
	return v >> 2 & 1;
};
h3d_mat_Pass.getBatchMode = function(v) {
	return v >> 3 & 1;
};
h3d_mat_Pass.getCulling = function(v) {
	return v & 3;
};
h3d_mat_Pass.getDepthWrite = function(v) {
	return v >> 2 & 1;
};
h3d_mat_Pass.getDepthTest = function(v) {
	return v >> 3 & 7;
};
h3d_mat_Pass.getBlendSrc = function(v) {
	return v >> 6 & 15;
};
h3d_mat_Pass.getBlendDst = function(v) {
	return v >> 10 & 15;
};
h3d_mat_Pass.getBlendAlphaSrc = function(v) {
	return v >> 14 & 15;
};
h3d_mat_Pass.getBlendAlphaDst = function(v) {
	return v >> 18 & 15;
};
h3d_mat_Pass.getBlendOp = function(v) {
	return v >> 22 & 7;
};
h3d_mat_Pass.getBlendAlphaOp = function(v) {
	return v >> 25 & 7;
};
h3d_mat_Pass.getWireframe = function(v) {
	return v >> 28 & 1;
};
h3d_mat_Pass.getReserved = function(v) {
	return v >> 29 & 1;
};
h3d_mat_Pass.prototype = {
	load: function(p) {
		this.name = p.name;
		this.passId = p.passId;
		this.bits = p.bits;
		this.set_enableLights(p.enableLights);
		this.set_dynamicParameters(p.dynamicParameters);
		this.set_culling(p.culling);
		this.set_depthWrite(p.depthWrite);
		this.set_depthTest(p.depthTest);
		this.set_blendSrc(p.blendSrc);
		this.set_blendDst(p.blendDst);
		this.set_blendOp(p.blendOp);
		this.set_blendAlphaSrc(p.blendAlphaSrc);
		this.set_blendAlphaDst(p.blendAlphaDst);
		this.set_blendAlphaOp(p.blendAlphaOp);
		this.colorMask = p.colorMask;
		if(p.stencil != null) {
			if(this.stencil == null) {
				this.stencil = new h3d_mat_Stencil();
			}
			this.stencil.load(p.stencil);
		}
	}
	,setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,blend: function(src,dst) {
		this.set_blendSrc(src);
		this.set_blendAlphaSrc(src);
		this.set_blendDst(dst);
		this.set_blendAlphaDst(dst);
	}
	,setBlendMode: function(b) {
		this.set_blendOp(h3d_mat_Operation.Add);
		this.set_blendAlphaOp(h3d_mat_Operation.Add);
		switch(b._hx_index) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 1:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 2:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 3:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 4:
			var src = h3d_mat_Blend.OneMinusDstColor;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 5:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 6:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 7:
			var src = h3d_mat_Blend.Zero;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 8:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 9:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.ReverseSub);
			this.set_blendAlphaOp(h3d_mat_Operation.ReverseSub);
			break;
		case 10:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaOp(h3d_mat_Operation.Max);
			this.set_blendOp(h3d_mat_Operation.Max);
			break;
		case 11:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaOp(h3d_mat_Operation.Min);
			this.set_blendOp(h3d_mat_Operation.Min);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,setColorMask: function(r,g,b,a) {
		this.colorMask = (r ? 1 : 0) | (g ? 2 : 0) | (b ? 4 : 0) | (a ? 8 : 0);
	}
	,setColorChannel: function(c) {
		switch(c._hx_index) {
		case 1:
			this.setColorMask(true,false,false,false);
			break;
		case 2:
			this.setColorMask(false,true,false,false);
			break;
		case 3:
			this.setColorMask(false,false,true,false);
			break;
		case 4:
			this.setColorMask(false,false,false,true);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported channel " + Std.string(c));
		}
	}
	,setColorMaski: function(r,g,b,a,i) {
		if(i > 8) {
			throw haxe_Exception.thrown("Color mask i supports 8 Render target");
		}
		var mask = (r ? 1 : 0) | (g ? 2 : 0) | (b ? 4 : 0) | (a ? 8 : 0);
		mask <<= i * 4;
		this.colorMask |= mask;
	}
	,resetRendererFlags: function() {
		this.rendererFlags = 0;
	}
	,addShader: function(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		this.resetRendererFlags();
		return s;
	}
	,addSelfShader: function(s) {
		if(s == null) {
			return null;
		}
		this.selfShadersChanged = true;
		this.selfShaders = hxsl_ShaderList.addSort(s,this.selfShaders);
		this.resetRendererFlags();
		return s;
	}
	,addShaderAtIndex: function(s,index) {
		var prev = null;
		var cur = this.shaders;
		while(index > 0 && cur != this.parentShaders) {
			prev = cur;
			cur = cur.next;
			--index;
		}
		if(prev == null) {
			this.shaders = new hxsl_ShaderList(s,cur);
		} else {
			prev.next = new hxsl_ShaderList(s,cur);
		}
		return s;
	}
	,getShaderIndex: function(s) {
		var index = 0;
		var cur = this.shaders;
		while(cur != this.parentShaders) {
			if(cur.s == s) {
				return index;
			}
			cur = cur.next;
			++index;
		}
		return -1;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		while(sl != null) {
			if(sl.s == s) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		sl = this.selfShaders;
		prev = null;
		while(sl != null) {
			if(sl.s == s) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.selfShaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	,removeShaders: function(t) {
		var sl = this.shaders;
		var prev = null;
		while(sl != null) {
			if(js_Boot.__instanceof(sl.s,t)) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
			} else {
				prev = sl;
			}
			sl = sl.next;
		}
		sl = this.selfShaders;
		prev = null;
		while(sl != null) {
			if(js_Boot.__instanceof(sl.s,t)) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.selfShaders = sl.next;
				} else {
					prev.next = sl.next;
				}
			} else {
				prev = sl;
			}
			sl = sl.next;
		}
	}
	,getShader: function(t) {
		var s = this._getShader(t,this.shaders);
		if(s != null) {
			return s;
		} else {
			return this._getShader(t,this.selfShaders);
		}
	}
	,_getShader: function(t,s) {
		while(s != null && s != this.parentShaders) {
			var value = s.s;
			var sh = js_Boot.__downcastCheck(value,t) ? value : null;
			if(sh != null) {
				return sh;
			}
			s = s.next;
		}
		return null;
	}
	,getShaderByName: function(name) {
		var s = this._getShaderByName(name,this.shaders);
		if(s != null) {
			return s;
		} else {
			return this._getShaderByName(name,this.selfShaders);
		}
	}
	,_getShaderByName: function(name,sl) {
		while(sl != null && sl != this.parentShaders) {
			if(sl.s.shader.data.name == name) {
				return sl.s;
			}
			sl = sl.next;
		}
		return null;
	}
	,getShaders: function() {
		return new hxsl__$ShaderList_ShaderIterator(this.shaders,this.parentShaders);
	}
	,checkInfiniteLoop: function() {
		var shaderList = [];
		var s = this.selfShaders;
		while(s != null) {
			var _g = 0;
			while(_g < shaderList.length) {
				var already = shaderList[_g];
				++_g;
				if(already == s) {
					throw haxe_Exception.thrown("infinite loop");
				}
			}
			shaderList.push(s);
			s = s.next;
		}
	}
	,selfShadersRec: function(rebuild) {
		if(this.selfShaders == null) {
			return this.shaders;
		}
		if(!this.selfShadersChanged && !rebuild && this.shaders == this.selfShadersCache) {
			return this.selfShaders;
		}
		var sl = this.selfShaders;
		var prev = null;
		while(sl != null && sl != this.selfShadersCache) {
			prev = sl;
			sl = sl.next;
		}
		this.selfShadersCache = this.shaders;
		if(prev != null) {
			prev.next = this.selfShadersCache;
		} else {
			this.selfShaders = this.shaders;
		}
		return this.selfShaders;
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.selfShadersRec(false);
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.selfShadersRec(true);
	}
	,clone: function() {
		var p = new h3d_mat_Pass(this.name,this.shaders.clone());
		p.selfShaders = this.selfShaders;
		p.bits = this.bits;
		p.set_enableLights(this.enableLights);
		if(this.stencil != null) {
			p.stencil = this.stencil.clone();
		}
		return p;
	}
	,set_enableLights: function(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	,set_dynamicParameters: function(v) {
		this.flags = this.flags & -3 | (v ? 1 : 0) << 1;
		return this.dynamicParameters = v;
	}
	,set_isStatic: function(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	,set_batchMode: function(v) {
		this.flags = this.flags & -9 | (v ? 1 : 0) << 3;
		return this.batchMode = v;
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
	,set_wireframe: function(v) {
		this.bits = this.bits & -268435457 | (v ? 1 : 0) << 28;
		return this.wireframe = v;
	}
	,set_reserved: function(v) {
		this.bits = this.bits & -536870913 | (v ? 1 : 0) << 29;
		return this.reserved = v;
	}
	,loadFlags: function(bits) {
		this.flags = bits;
		this.set_enableLights((this.flags & 1) != 0);
		this.set_dynamicParameters((this.flags >> 1 & 1) != 0);
		this.set_isStatic((this.flags >> 2 & 1) != 0);
		this.set_batchMode((this.flags >> 3 & 1) != 0);
	}
	,loadBits: function(bits) {
		this.bits = bits;
		this.set_culling(Type.createEnumIndex(h3d_mat_Face,this.bits & 3));
		this.set_depthWrite((this.bits >> 2 & 1) != 0);
		this.set_depthTest(Type.createEnumIndex(h3d_mat_Compare,this.bits >> 3 & 7));
		this.set_blendSrc(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 6 & 15));
		this.set_blendDst(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 10 & 15));
		this.set_blendAlphaSrc(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 14 & 15));
		this.set_blendAlphaDst(Type.createEnumIndex(h3d_mat_Blend,this.bits >> 18 & 15));
		this.set_blendOp(Type.createEnumIndex(h3d_mat_Operation,this.bits >> 22 & 7));
		this.set_blendAlphaOp(Type.createEnumIndex(h3d_mat_Operation,this.bits >> 25 & 7));
		this.set_wireframe((this.bits >> 28 & 1) != 0);
		this.set_reserved((this.bits >> 29 & 1) != 0);
	}
	,__class__: h3d_mat_Pass
};
var h3d_mat_Stencil = function() {
	this.opBits = 0;
	this.maskBits = 0;
	this.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setFunc(h3d_mat_Compare.Always);
};
$hxClasses["h3d.mat.Stencil"] = h3d_mat_Stencil;
h3d_mat_Stencil.__name__ = "h3d.mat.Stencil";
h3d_mat_Stencil.getReadMask = function(v) {
	return v & 255;
};
h3d_mat_Stencil.getWriteMask = function(v) {
	return v >> 8 & 255;
};
h3d_mat_Stencil.getReference = function(v) {
	return v >> 16 & 255;
};
h3d_mat_Stencil.getFrontTest = function(v) {
	return v & 7;
};
h3d_mat_Stencil.getFrontPass = function(v) {
	return v >> 3 & 7;
};
h3d_mat_Stencil.getFrontSTfail = function(v) {
	return v >> 6 & 7;
};
h3d_mat_Stencil.getFrontDPfail = function(v) {
	return v >> 9 & 7;
};
h3d_mat_Stencil.getBackTest = function(v) {
	return v >> 12 & 7;
};
h3d_mat_Stencil.getBackPass = function(v) {
	return v >> 15 & 7;
};
h3d_mat_Stencil.getBackSTfail = function(v) {
	return v >> 18 & 7;
};
h3d_mat_Stencil.getBackDPfail = function(v) {
	return v >> 21 & 7;
};
h3d_mat_Stencil.prototype = {
	setFront: function(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	,setBack: function(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	,setOp: function(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	,setFunc: function(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	,clone: function() {
		var s = new h3d_mat_Stencil();
		s.opBits = this.opBits;
		s.maskBits = this.maskBits;
		return s;
	}
	,load: function(s) {
		this.opBits = s.opBits;
		this.maskBits = s.maskBits;
	}
	,set_readMask: function(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	,set_writeMask: function(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	,set_reference: function(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	,set_frontPass: function(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	,set_backPass: function(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
	,loadOpBits: function(bits) {
		this.opBits = bits;
		this.set_frontTest(Type.createEnumIndex(h3d_mat_Compare,this.opBits & 7));
		this.set_frontPass(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 3 & 7));
		this.set_frontSTfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 6 & 7));
		this.set_frontDPfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 9 & 7));
		this.set_backTest(Type.createEnumIndex(h3d_mat_Compare,this.opBits >> 12 & 7));
		this.set_backPass(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 15 & 7));
		this.set_backSTfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 18 & 7));
		this.set_backDPfail(Type.createEnumIndex(h3d_mat_StencilOp,this.opBits >> 21 & 7));
	}
	,loadMaskBits: function(bits) {
		this.maskBits = bits;
		this.set_readMask(this.maskBits & 255);
		this.set_writeMask(this.maskBits >> 8 & 255);
		this.set_reference(this.maskBits >> 16 & 255);
	}
	,__class__: h3d_mat_Stencil
};
var hxd_PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__:"hxd.PixelFormat",__constructs__:null
	,ARGB: {_hx_name:"ARGB",_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_name:"BGRA",_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_name:"RGBA",_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_name:"RGBA16F",_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_name:"RGBA32F",_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_name:"R8",_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_name:"R16F",_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_name:"R32F",_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_name:"RG8",_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_name:"RG16F",_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_name:"RG32F",_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_name:"RGB8",_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_name:"RGB16F",_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_name:"RGB32F",_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_name:"SRGB",_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_name:"SRGB_ALPHA",_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_name:"RGB10A2",_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_name:"RG11B10UF",_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16U: {_hx_name:"R16U",_hx_index:18,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16U: {_hx_name:"RG16U",_hx_index:19,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16U: {_hx_name:"RGB16U",_hx_index:20,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16U: {_hx_name:"RGBA16U",_hx_index:21,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:22,v:v,__enum__:"hxd.PixelFormat",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="S3TC",$_)
	,Depth16: {_hx_name:"Depth16",_hx_index:23,__enum__:"hxd.PixelFormat",toString:$estr}
	,Depth24: {_hx_name:"Depth24",_hx_index:24,__enum__:"hxd.PixelFormat",toString:$estr}
	,Depth24Stencil8: {_hx_name:"Depth24Stencil8",_hx_index:25,__enum__:"hxd.PixelFormat",toString:$estr}
};
hxd_PixelFormat.__constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF,hxd_PixelFormat.R16U,hxd_PixelFormat.RG16U,hxd_PixelFormat.RGB16U,hxd_PixelFormat.RGBA16U,hxd_PixelFormat.S3TC,hxd_PixelFormat.Depth16,hxd_PixelFormat.Depth24,hxd_PixelFormat.Depth24Stencil8];
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF,hxd_PixelFormat.R16U,hxd_PixelFormat.RG16U,hxd_PixelFormat.RGB16U,hxd_PixelFormat.RGBA16U,hxd_PixelFormat.Depth16,hxd_PixelFormat.Depth24,hxd_PixelFormat.Depth24Stencil8];
var h3d_mat_Texture = function(w,h,flags,format) {
	this.lodBias = 0.;
	this.startingMip = 0;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	this.flags = 0;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	if(!this.isDepth()) {
		var engine = h3d_Engine.CURRENT;
		this.mem = engine.mem;
	}
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
	}
	this.width = w;
	this.height = h;
	if((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0) {
		this.set_mipMap(h3d_mat_Texture.TRILINEAR_FILTERING_ENABLED ? h3d_mat_MipMap.Linear : h3d_mat_MipMap.Nearest);
	} else {
		this.set_mipMap(h3d_mat_MipMap.None);
	}
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Texture.DEFAULT_WRAP);
	this.bits &= 32767;
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0 && (!this.isDepth() || this.width > 0)) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.Texture"] = h3d_mat_Texture;
h3d_mat_Texture.__name__ = "h3d.mat.Texture";
h3d_mat_Texture.fromBitmap = function(bmp) {
	var t = new h3d_mat_Texture(bmp.ctx.canvas.width,bmp.ctx.canvas.height);
	t.uploadBitmap(bmp);
	return t;
};
h3d_mat_Texture.fromPixels = function(pixels,format) {
	var t = new h3d_mat_Texture(pixels.width,pixels.height,null,format != null ? format : pixels.innerFormat);
	t.uploadPixels(pixels);
	return t;
};
h3d_mat_Texture.fromColor = function(color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t = new h3d_mat_Texture(1,1,null);
	t.clear(color,alpha);
	t.realloc = function() {
		t.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t;
	return t;
};
h3d_mat_Texture.genDisc = function(size,color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	return h3d_mat_Texture.genTexture(0,size,color,alpha);
};
h3d_mat_Texture.genTexture = function(mode,size,color,alpha) {
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	color = color & 16777215 | aval << 24;
	var key = (size << 16 | mode) + "," + color;
	var k = h3d_mat_Texture.genTextureKeys.h[key];
	var t = k == null ? null : engine.resCache.h[k.__id__];
	if(t != null) {
		return t;
	}
	if(k == null) {
		k = { };
		h3d_mat_Texture.genTextureKeys.h[key] = k;
	}
	t = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.Target]);
	t.realloc = function() {
		h3d_mat_Texture.drawGenTexture(t,color,mode);
	};
	h3d_mat_Texture.drawGenTexture(t,color,mode);
	engine.resCache.set(k,t);
	return t;
};
h3d_mat_Texture.drawGenTexture = function(t,color,mode) {
	var s = new h3d_pass_ScreenFx(new h3d_shader_GenTexture());
	var engine = h3d_Engine.CURRENT;
	var _this = s.shader;
	_this.constModified = true;
	_this.mode__ = mode;
	var _this = s.shader.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
	engine.pushTarget(t);
	s.render();
	engine.popTarget();
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.genChecker = function(size) {
	var engine = h3d_Engine.CURRENT;
	var k = h3d_mat_Texture.checkerTextureKeys.h[size];
	var t = k == null ? null : engine.resCache.h[k.__id__];
	if(t != null && !(t.isDepth() ? t.t == null : t.t == null && t.realloc == null)) {
		return t;
	}
	if(k == null) {
		k = { };
		h3d_mat_Texture.checkerTextureKeys.h[size] = k;
	}
	var t = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.NoAlloc]);
	var t1 = t;
	var size1 = size;
	t.realloc = function() {
		h3d_mat_Texture.allocChecker(t1,size1);
	};
	engine.resCache.set(k,t);
	return t;
};
h3d_mat_Texture.genNoise = function(size) {
	var engine = h3d_Engine.CURRENT;
	var k = h3d_mat_Texture.noiseTextureKeys.h[size];
	var t = k == null ? null : engine.resCache.h[k.__id__];
	if(t != null && !(t.isDepth() ? t.t == null : t.t == null && t.realloc == null)) {
		return t;
	}
	if(k == null) {
		k = { };
		h3d_mat_Texture.noiseTextureKeys.h[size] = k;
	}
	var t = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.NoAlloc]);
	var t1 = t;
	var size1 = size;
	t.realloc = function() {
		h3d_mat_Texture.allocNoise(t1,size1);
	};
	engine.resCache.set(k,t);
	return t;
};
h3d_mat_Texture.allocNoise = function(t,size) {
	var b = new hxd_BitmapData(size,size);
	var _g = 0;
	var _g1 = size;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = size;
		while(_g2 < _g3) {
			var y = _g2++;
			var n = Std.random(256);
			b.setPixel(x,y,-16777216 | n | n << 8 | n << 16);
		}
	}
	t.uploadBitmap(b);
	b.ctx = null;
	b.pixel = null;
};
h3d_mat_Texture.allocChecker = function(t,size) {
	var b = new hxd_BitmapData(size,size);
	b.clear(-1);
	var _g = 0;
	var _g1 = size >> 1;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 0;
		var _g3 = size >> 1;
		while(_g2 < _g3) {
			var y = _g2++;
			b.setPixel(x,y,-16777216);
			b.setPixel(x + (size >> 1),y + (size >> 1),-16777216);
		}
	}
	t.uploadBitmap(b);
	b.ctx = null;
	b.pixel = null;
};
h3d_mat_Texture.getDefaultDepth = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_Texture.prototype = {
	set_lastFrame: function(lf) {
		if(this._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	,get_lastFrame: function() {
		return this._lastFrame;
	}
	,get_mipLevels: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) == 0) {
			return 1;
		}
		if(this.customMipLevels > 0) {
			return this.customMipLevels;
		}
		var lv = 1;
		var w = this.width;
		var h = this.height;
		while(w >> lv >= 1 || h >> lv >= 1) ++lv;
		return lv;
	}
	,get_layerCount: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	,alloc: function() {
		if(this.isDepth()) {
			h3d_Engine.CURRENT.mem.allocDepth(this);
		} else if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,isSRGB: function() {
		switch(this.format._hx_index) {
		case 14:case 15:
			return true;
		default:
			return false;
		}
	}
	,checkAlloc: function() {
		if(this.t == null && this.realloc != null) {
			this.alloc();
			this.realloc();
		}
	}
	,clone: function() {
		this.checkAlloc();
		if(this.t == null) {
			throw haxe_Exception.thrown("Can't clone disposed texture");
		}
		var old = this._lastFrame;
		this.preventAutoDispose();
		var flags = [];
		var f = h3d_mat_TextureFlags.Target;
		if((this.flags & 1 << f._hx_index) != 0) {
			flags.push(f);
		}
		var f = h3d_mat_TextureFlags.Cube;
		if((this.flags & 1 << f._hx_index) != 0) {
			flags.push(f);
		}
		var f = h3d_mat_TextureFlags.MipMapped;
		if((this.flags & 1 << f._hx_index) != 0) {
			flags.push(f);
		}
		var f = h3d_mat_TextureFlags.IsArray;
		if((this.flags & 1 << f._hx_index) != 0) {
			flags.push(f);
		}
		var t = new h3d_mat_Texture(this.width,this.height,flags,this.format);
		t.name = this.name;
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			h3d_pass_CubeCopy.run(this,t);
		} else {
			h3d_pass_Copy.run(this,t);
		}
		this.set_lastFrame(old);
		return t;
	}
	,preventAutoDispose: function() {
		this.set_lastFrame(h3d_mat_Texture.PREVENT_AUTO_DISPOSE);
	}
	,preventForcedDispose: function() {
		this.set_lastFrame(h3d_mat_Texture.PREVENT_FORCED_DISPOSE);
	}
	,waitLoad: function(f) {
		if((this.flags & 1 << h3d_mat_TextureFlags.Loading._hx_index) == 0) {
			f();
			return;
		}
		if(this.waitLoads == null) {
			this.waitLoads = [];
		}
		this.waitLoads.push(f);
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	,isDisposed: function() {
		if(this.isDepth()) {
			return this.t == null;
		} else if(this.t == null) {
			return this.realloc == null;
		} else {
			return false;
		}
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT._hx_index);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
			this.alloc();
		}
	}
	,clearF: function(r,g,b,a,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(a == null) {
			a = 0.;
		}
		if(b == null) {
			b = 0.;
		}
		if(g == null) {
			g = 0.;
		}
		if(r == null) {
			r = 0.;
		}
		this.alloc();
		if((this.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) == 0) {
			throw haxe_Exception.thrown("Texture should be target");
		}
		var engine = h3d_Engine.CURRENT;
		var x = r;
		var y = g;
		var z = b;
		var w = a;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var color = new h3d_Vector4Impl(x,y,z,w);
		if(layer < 0) {
			var _g = 0;
			var _g1 = this.get_layerCount();
			while(_g < _g1) {
				var i = _g++;
				engine.pushTarget(this,i);
				engine.clearF(color);
				engine.popTarget();
			}
		} else {
			engine.pushTarget(this,layer);
			engine.clearF(color);
			engine.popTarget();
		}
	}
	,clear: function(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if(this.width == 0 || this.height == 0) {
			return;
		}
		if(this.width != 1 || this.height != 1) {
			var engine = h3d_Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
			var k = 0;
			var b = color & 255;
			var g = color >> 8 & 255;
			var r = color >> 16 & 255;
			var a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d_mat_Texture.nativeFormat._hx_index) {
			case 1:
				var tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("TODO");
			}
			var _g = 0;
			var _g1 = this.width * this.height;
			while(_g < _g1) {
				var i = _g++;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					this.uploadPixels(p,0,i);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	,checkSize: function(width,height,mip) {
		var mw = this.width >> mip;
		if(mw == 0) {
			mw = 1;
		}
		var mh = this.height >> mip;
		if(mh == 0) {
			mh = 1;
		}
		if(width != mw || height != mh) {
			throw haxe_Exception.thrown("Invalid upload size : " + width + "x" + height + " should be " + mw + "x" + mh);
		}
	}
	,checkMipMapGen: function(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen._hx_index) == 0 && layer == this.get_layerCount() - 1) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(bmp.ctx.canvas.width,bmp.ctx.canvas.height,mipLevel);
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,uploadPixels: function(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(pixels.width,pixels.height,mipLevel);
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,dispose: function() {
		if(this.t != null) {
			if(this.isDepth()) {
				h3d_Engine.CURRENT.mem.deleteDepth(this);
			} else {
				this.mem.deleteTexture(this);
			}
		}
	}
	,capturePixels: function(face,mipLevel,region) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(face == null) {
			face = 0;
		}
		var old = this._lastFrame;
		this.preventAutoDispose();
		var pix = this.mem.driver.capturePixels(this,face,mipLevel,region);
		this.set_lastFrame(old);
		return pix;
	}
	,hasStencil: function() {
		if(this.format._hx_index == 25) {
			return true;
		} else {
			return false;
		}
	}
	,isDepth: function() {
		switch(this.format._hx_index) {
		case 23:case 24:case 25:
			return true;
		default:
			return false;
		}
	}
	,__class__: h3d_mat_Texture
};
var h3d_mat_TextureArray = function(w,h,layers,flags,format) {
	this.layers = layers;
	if(flags == null) {
		flags = [];
	}
	flags.push(h3d_mat_TextureFlags.IsArray);
	h3d_mat_Texture.call(this,w,h,flags,format);
};
$hxClasses["h3d.mat.TextureArray"] = h3d_mat_TextureArray;
h3d_mat_TextureArray.__name__ = "h3d.mat.TextureArray";
h3d_mat_TextureArray.__super__ = h3d_mat_Texture;
h3d_mat_TextureArray.prototype = $extend(h3d_mat_Texture.prototype,{
	get_layerCount: function() {
		return this.layers;
	}
	,clone: function() {
		var old = this._lastFrame;
		this.preventAutoDispose();
		var t = new h3d_mat_TextureArray(this.width,this.height,this.layers,null,this.format);
		h3d_pass_Copy.run(this,t);
		this.set_lastFrame(old);
		return t;
	}
	,toString: function() {
		return h3d_mat_Texture.prototype.toString.call(this) + "[" + this.layers + "]";
	}
	,__class__: h3d_mat_TextureArray
});
var h3d_pass_ScreenFx = function(shader,output) {
	this.shader = shader;
	this.output = new h3d_pass_OutputShader(output);
	this.pass = new h3d_mat_Pass("screenfx",new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
};
$hxClasses["h3d.pass.ScreenFx"] = h3d_pass_ScreenFx;
h3d_pass_ScreenFx.__name__ = "h3d.pass.ScreenFx";
h3d_pass_ScreenFx.run = function(shader,output,layer) {
	var engine = h3d_Engine.CURRENT;
	engine.pushTarget(output,layer);
	new h3d_pass_ScreenFx(shader).render();
	engine.popTarget();
};
h3d_pass_ScreenFx.prototype = {
	get_engine: function() {
		if(this._engine == null) {
			this._engine = h3d_Engine.CURRENT;
		}
		return this._engine;
	}
	,copy: function(src,dst) {
		h3d_pass_Copy.run(src,dst);
	}
	,addShader: function(s) {
		return this.pass.addShader(s);
	}
	,removeShader: function(s) {
		return this.pass.removeShader(s);
	}
	,getShader: function(cl) {
		return this.pass.getShader(cl);
	}
	,render: function() {
		if(this.primitive == null) {
			this.primitive = h3d_prim_Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		var shaders = this.pass.shaders;
		var ctx = h3d_impl_RenderContext.get();
		var isNewCtx = false;
		if(ctx == null) {
			isNewCtx = true;
			ctx = new h3d_impl_RenderContext();
			ctx.setCurrent();
		}
		var rts = this.output.compileShaders(ctx.globals,shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(rts);
		} else {
			var _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		ctx.fillGlobals(this.buffers,rts);
		ctx.fillParams(this.buffers,rts,shaders);
		this.get_engine().uploadShaderBuffers(this.buffers,0);
		this.get_engine().uploadShaderBuffers(this.buffers,1);
		this.get_engine().uploadShaderBuffers(this.buffers,2);
		this.get_engine().uploadShaderBuffers(this.buffers,3);
		this.primitive.render(this.get_engine());
		if(isNewCtx) {
			ctx.clearCurrent();
		}
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
};
var h3d_pass_Blur = function(radius,gain,linear,quality) {
	if(quality == null) {
		quality = 1.;
	}
	if(linear == null) {
		linear = 0.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,0,1,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_radius(radius);
	this.set_quality(quality);
	this.set_gain(gain);
	this.set_linear(linear);
};
$hxClasses["h3d.pass.Blur"] = h3d_pass_Blur;
h3d_pass_Blur.__name__ = "h3d.pass.Blur";
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_radius: function(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	,set_quality: function(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	,set_gain: function(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	,set_linear: function(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		this.offsets = [];
		var tot = 0.;
		var f = this.quality;
		var qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		var width;
		if(this.radius > 0) {
			var a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		var sigma = Math.sqrt(this.radius);
		var _g = 0;
		var _g1 = width + 1;
		while(_g < _g1) {
			var i = _g++;
			var i1 = i * 2;
			var i2 = i == 0 ? 0 : i * 2 - 1;
			var g1 = this.gauss(i1,sigma);
			var g2 = this.gauss(i2,sigma);
			var g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		var minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			var last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		var _g = 0;
		var _g1 = this.values.length;
		while(_g < _g1) {
			var i = _g++;
			this.values[i] /= tot;
		}
		if(this.linear > 0) {
			var m = this.gain / (this.values.length * 2 - 1);
			var _g = 0;
			var _g1 = this.values.length;
			while(_g < _g1) {
				var i = _g++;
				var a = this.values[i];
				this.values[i] = a + this.linear * (m - a);
				var a1 = this.offsets[i];
				this.offsets[i] = a1 + this.linear * ((i == 0 ? 0 : (i * 2 - 0.5) / (i * qadj)) - a1);
			}
		}
	}
	,getKernelSize: function() {
		if(this.values == null) {
			this.calcValues();
		}
		if(this.radius <= 0) {
			return 0;
		} else {
			return this.values.length * 2 - 1;
		}
	}
	,apply: function(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d_pass_Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		var isCube = (src.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var faceCount = isCube ? 6 : 1;
		var tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube ? [h3d_mat_TextureFlags.Cube] : null);
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = false;
		}
		var _this = this.shader.pixel__;
		var x = 1 / src.width;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		var _this = this.shader.pixel__;
		var x = 0;
		var y = 1 / src.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var outDepth = output.depthBuffer;
		output.depthBuffer = null;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(output,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
	,__class__: h3d_pass_Blur
});
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Border.BorderShader"] = h3d_pass__$Border_BorderShader;
h3d_pass__$Border_BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d_pass__$Border_BorderShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Border_BorderShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$Border_BorderShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.color__ = this.color__;
		return s;
	}
	,__class__: h3d_pass__$Border_BorderShader
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	var bbuf = hxd__$FloatBuffer_Float32Expand._new(0);
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	this.primitive = new h3d_prim_RawPrimitive({ vbuf : bbuf, format : hxd_BufferFormat.make([new hxd_BufferInput("position",2,0)])},true);
	var _this = this.shader.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.Border"] = h3d_pass_Border;
h3d_pass_Border.__name__ = "h3d.pass.Border";
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	dispose: function() {
		h3d_pass_ScreenFx.prototype.dispose.call(this);
		this.primitive.dispose();
	}
	,__class__: h3d_pass_Border
});
var h3d_pass_Output = function(name,output) {
	this.defaultSort = ($_=new h3d_pass_SortByMaterial(),$bind($_,$_.sort));
	this.name = name;
	this.output = new h3d_pass_OutputShader(output);
};
$hxClasses["h3d.pass.Output"] = h3d_pass_Output;
h3d_pass_Output.__name__ = "h3d.pass.Output";
h3d_pass_Output.prototype = {
	get_globals: function() {
		return this.ctx.globals;
	}
	,setContext: function(ctx) {
		this.ctx = ctx;
	}
	,dispose: function() {
	}
	,processShaders: function(p,shaders) {
		var p = this.ctx.extraShaders;
		while(p != null) {
			shaders = this.ctx.allocShaderList(p.s,shaders);
			p = p.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var lightInit = false;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.ctx.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.output.compileShaders(this.ctx.globals,shaders,p.pass.batchMode ? hxsl_LinkMode.Batch : hxsl_LinkMode.Default);
			p.shaders = shaders;
			var t = p.shader.fragment.textures;
			if(t == null || t.type._hx_index == 15) {
				p.texture = 0;
			} else {
				var _this = this.ctx;
				var opt = true;
				if(opt == null) {
					opt = false;
				}
				var t1;
				if(t.perObjectGlobal != null) {
					var v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw haxe_Exception.thrown("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					t1 = t.type._hx_index == 17 ? v.texture : v;
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && !opt) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	,log: function(str) {
		var _this = this.ctx.engine.driver;
		if(_this.logEnable) {
			_this.logImpl(str);
		}
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	,draw: function(passes,sort) {
		if(passes.current == null) {
			return;
		}
		this.ctx.setupTarget();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		var buf = this.ctx.shaderBuffers;
		var prevShader = null;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var _this = this.ctx;
			var v = p.obj.absPos;
			_this.globals.map.h[_this.globalModelView_id] = v;
			if(p.shader.globals.h.hasOwnProperty(this.ctx.globalModelViewInverse_id)) {
				var _this1 = this.ctx;
				var v1 = p.obj.getInvPos();
				_this1.globals.map.h[_this1.globalModelViewInverse_id] = v1;
			}
			if(prevShader != p.shader) {
				prevShader = p.shader;
				if(h3d_pass_Output.onShaderError != null) {
					try {
						this.ctx.engine.selectShader(p.shader);
					} catch( _g ) {
						var e = haxe_Exception.caught(_g).unwrap();
						h3d_pass_Output.onShaderError(e,p);
						continue;
					}
				} else {
					this.ctx.engine.selectShader(p.shader);
				}
				if(buf == null) {
					buf = this.ctx.shaderBuffers = new h3d_shader_Buffers(p.shader);
				} else {
					var s = p.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.ctx.fillGlobals(buf,p.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p.pass.dynamicParameters) {
				this.ctx.fillParams(buf,p.shader,p.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(p);
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
	,__class__: h3d_pass_Output
};
var h3d_pass_Shadows = function(light) {
	this.pcfScale = 1.0;
	this.pcfQuality = 1;
	this.bias = 0.01;
	this.power = 30.0;
	this.samplingKind = h3d_pass_ShadowSamplingKind.None;
	this.size = 1024;
	this.mode = h3d_pass_RenderMode.None;
	this.enabled = true;
	if(this.format == null) {
		this.format = hxd_PixelFormat.R16F;
	}
	if(!h3d_Engine.CURRENT.driver.isSupportedFormat(this.format)) {
		this.format = h3d_mat_Texture.nativeFormat;
	}
	h3d_pass_Output.call(this,"shadow",this.getOutputs());
	this.light = light;
	this.blur = new h3d_pass_Blur(5);
	this.blur.set_quality(0.5);
	var _this = this.blur.shader;
	_this.constModified = true;
	_this.isDepth__ = this.format == h3d_mat_Texture.nativeFormat;
};
$hxClasses["h3d.pass.Shadows"] = h3d_pass_Shadows;
h3d_pass_Shadows.__name__ = "h3d.pass.Shadows";
h3d_pass_Shadows.__super__ = h3d_pass_Output;
h3d_pass_Shadows.prototype = $extend(h3d_pass_Output.prototype,{
	set_mode: function(m) {
		if(m != h3d_pass_RenderMode.None) {
			throw haxe_Exception.thrown("Shadow mode " + Std.string(m) + " not supported for " + Std.string(this.light));
		}
		return this.mode = m;
	}
	,set_enabled: function(b) {
		return this.enabled = b;
	}
	,set_size: function(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	,dispose: function() {
		h3d_pass_Output.prototype.dispose.call(this);
		this.blur.dispose();
		if(this.staticTexture != null) {
			this.staticTexture.dispose();
		}
	}
	,getShadowProj: function() {
		return this.lightCamera.m;
	}
	,getShadowTex: function() {
		return null;
	}
	,isUsingWorldDist: function() {
		return false;
	}
	,getOutputs: function() {
		if(this.isUsingWorldDist()) {
			return [hxsl_Output.Swiz(hxsl_Output.Value("output.worldDist",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
		}
		if(this.format == h3d_mat_Texture.nativeFormat) {
			return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
		}
		return [hxsl_Output.Swiz(hxsl_Output.Value("output.depth",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
	}
	,loadStaticData: function(bytes) {
		return false;
	}
	,saveStaticData: function() {
		return null;
	}
	,computeStatic: function(passes) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,createDefaultShadowMap: function() {
		var tex = h3d_mat_Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	,syncShader: function(texture) {
	}
	,filterPasses: function(passes) {
		if(!this.ctx.computingStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				this.syncShader(this.staticTexture);
				return false;
			case 2:
				return true;
			case 3:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == false) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			}
		} else {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			case 2:
				return false;
			case 3:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			}
		}
	}
	,cullPasses: function(passes,f) {
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
	}
	,__class__: h3d_pass_Shadows
});
var h3d_pass_DirShadowMap = function(light) {
	this.minDist = -1.0;
	this.maxDist = -1.0;
	this.autoZPlanes = false;
	this.autoShrink = true;
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shader = this.dshader = new h3d_shader_DirShadow();
	this.border = new h3d_pass_Border(this.size,this.size);
};
$hxClasses["h3d.pass.DirShadowMap"] = h3d_pass_DirShadowMap;
h3d_pass_DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d_pass_DirShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_DirShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	set_mode: function(m) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	,set_enabled: function(b) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = b && this.mode != h3d_pass_RenderMode.None;
		return this.enabled = b;
	}
	,set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,dispose: function() {
		h3d_pass_Shadows.prototype.dispose.call(this);
		if(this.depth != null) {
			this.depth.dispose();
		}
		if(this.border != null) {
			this.border.dispose();
		}
	}
	,getShadowTex: function() {
		return this.dshader.shadowMap__;
	}
	,calcShadowBounds: function(camera) {
		var _gthis = this;
		var bounds = camera.orthoBounds;
		var zMax = -1e9;
		var zMin = 1e9;
		if(this.autoShrink) {
			var mtmp = new h3d_MatrixImpl();
			var identity = h3d_Matrix.I();
			var btmp = this.autoZPlanes ? new h3d_col_Bounds() : null;
			var obj = this.boundingObject != null ? this.boundingObject : this.ctx.scene;
			obj.iterVisibleMeshes(function(m) {
				if(m.primitive == null || !m.material.castShadows) {
					return;
				}
				var b = m.primitive.getBounds();
				if(b.xMin > b.xMax) {
					return;
				}
				var absPos = ((m.primitive) instanceof h3d_prim_Instanced) ? identity : m.getAbsPos();
				if(_gthis.autoZPlanes) {
					btmp.load(b);
					btmp.transform(absPos);
					if(btmp.zMax > zMax) {
						zMax = btmp.zMax;
					}
					if(btmp.zMin < zMin) {
						zMin = btmp.zMin;
					}
				}
				mtmp.multiply3x4(absPos,camera.mcam);
				var x = b.xMin;
				var y = b.yMin;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMin;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMax;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMax;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMin;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMin;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMax;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMax;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
			});
		} else if(this.mode == h3d_pass_RenderMode.Dynamic) {
			bounds.xMin = -1e20;
			bounds.xMax = 1e20;
			bounds.yMin = -1e20;
			bounds.yMax = 1e20;
			bounds.zMin = -1e20;
			bounds.zMax = 1e20;
		}
		if(this.mode == h3d_pass_RenderMode.Dynamic) {
			var cameraBounds = new h3d_col_Bounds();
			var minDist = this.minDist < 0 ? this.ctx.camera.zNear : this.minDist;
			var maxDist = this.maxDist < 0 ? this.ctx.camera.zFar : this.maxDist;
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(-1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var pt_x = x1;
			var pt_y = y1;
			var pt_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					pt_x = v_x;
					pt_y = v_y;
					pt_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(-1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var pt_x = x1;
			var pt_y = y1;
			var pt_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					pt_x = v_x;
					pt_y = v_y;
					pt_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var pt_x = x1;
			var pt_y = y1;
			var pt_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					pt_x = v_x;
					pt_y = v_y;
					pt_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var pt_x = x1;
			var pt_y = y1;
			var pt_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					pt_x = v_x;
					pt_y = v_y;
					pt_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(-1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var pt_x = x1;
			var pt_y = y1;
			var pt_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					pt_x = v_x;
					pt_y = v_y;
					pt_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(-1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var pt_x = x1;
			var pt_y = y1;
			var pt_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					pt_x = v_x;
					pt_y = v_y;
					pt_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var pt_x = x1;
			var pt_y = y1;
			var pt_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					pt_x = v_x;
					pt_y = v_y;
					pt_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var pt_x = x1;
			var pt_y = y1;
			var pt_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = pt_x - p1_x;
				r.ly = pt_y - p1_y;
				r.lz = pt_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					pt_x = v_x;
					pt_y = v_y;
					pt_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			var x = pt_x;
			var y = pt_y;
			var z = pt_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			if(this.autoShrink) {
				cameraBounds.zMin = bounds.zMin;
				bounds.intersection(bounds,cameraBounds);
				if(this.autoZPlanes) {
					var this1 = camera.target;
					var v = camera.pos;
					var x = this1.x - v.x;
					var y = this1.y - v.y;
					var z = this1.z - v.z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var _this_x = x1;
					var _this_y = y1;
					var _this_z = z1;
					var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
					if(k < 1e-20) {
						k = 0;
					} else {
						k = 1. / Math.sqrt(k);
					}
					var x = _this_x * k;
					var y = _this_y * k;
					var z = _this_z * k;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					var dMin = 1e9;
					var px = bounds.xMin;
					var py = bounds.yMin;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMin;
					var py = bounds.yMax;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMax;
					var py = bounds.yMin;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMax;
					var py = bounds.yMax;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					bounds.zMin += dMin;
				}
			} else {
				bounds.load(cameraBounds);
			}
		}
		bounds.scaleCenter(1.01);
	}
	,syncShader: function(texture) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this = this.dshader.shadowRes__;
		var x = texture.width;
		var y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		this.dshader.pcfScale__ = this.pcfScale;
		this.dshader.set_pcfQuality(this.pcfQuality);
	}
	,saveStaticData: function() {
		if(this.mode != h3d_pass_RenderMode.Mixed && this.mode != h3d_pass_RenderMode.Static) {
			return null;
		}
		if(this.staticTexture == null) {
			throw haxe_Exception.thrown("Data not computed");
		}
		var bytes = haxe_zip_Compress.run(this.staticTexture.capturePixels().bytes,9);
		var buffer = new haxe_io_BytesBuffer();
		buffer.addInt32(this.staticTexture.width);
		buffer.addFloat(this.lightCamera.pos.x);
		buffer.addFloat(this.lightCamera.pos.y);
		buffer.addFloat(this.lightCamera.pos.z);
		buffer.addFloat(this.lightCamera.target.x);
		buffer.addFloat(this.lightCamera.target.y);
		buffer.addFloat(this.lightCamera.target.z);
		buffer.addFloat(this.lightCamera.orthoBounds.xMin);
		buffer.addFloat(this.lightCamera.orthoBounds.yMin);
		buffer.addFloat(this.lightCamera.orthoBounds.zMin);
		buffer.addFloat(this.lightCamera.orthoBounds.xMax);
		buffer.addFloat(this.lightCamera.orthoBounds.yMax);
		buffer.addFloat(this.lightCamera.orthoBounds.zMax);
		buffer.addInt32(bytes.length);
		buffer.add(bytes);
		return buffer.getBytes();
	}
	,loadStaticData: function(bytes) {
		if(this.mode != h3d_pass_RenderMode.Mixed && this.mode != h3d_pass_RenderMode.Static || bytes == null) {
			return false;
		}
		var buffer = new haxe_io_BytesInput(bytes);
		var size = buffer.readInt32();
		if(size != this.size) {
			return false;
		}
		this.lightCamera.pos.x = buffer.readFloat();
		this.lightCamera.pos.y = buffer.readFloat();
		this.lightCamera.pos.z = buffer.readFloat();
		this.lightCamera.target.x = buffer.readFloat();
		this.lightCamera.target.y = buffer.readFloat();
		this.lightCamera.target.z = buffer.readFloat();
		this.lightCamera.orthoBounds.xMin = buffer.readFloat();
		this.lightCamera.orthoBounds.yMin = buffer.readFloat();
		this.lightCamera.orthoBounds.zMin = buffer.readFloat();
		this.lightCamera.orthoBounds.xMax = buffer.readFloat();
		this.lightCamera.orthoBounds.yMax = buffer.readFloat();
		this.lightCamera.orthoBounds.zMax = buffer.readFloat();
		this.lightCamera.update();
		var len = buffer.readInt32();
		var pixels = new hxd_Pixels(size,size,haxe_zip_Uncompress.run(buffer.read(len)),this.format);
		if(this.staticTexture != null) {
			this.staticTexture.dispose();
		}
		this.staticTexture = new h3d_mat_Texture(size,size,[h3d_mat_TextureFlags.Target],this.format);
		this.staticTexture.uploadPixels(pixels);
		this.staticTexture.name = "staticTexture";
		this.staticTexture.preventAutoDispose();
		this.syncShader(this.staticTexture);
		return true;
	}
	,processShadowMap: function(passes,tex,sort) {
		var _this = this.ctx;
		var prevViewProj = _this.globals.map.h[_this.cameraViewProj_id];
		var _this = this.ctx;
		var v = this.getShadowProj();
		_this.globals.map.h[_this.cameraViewProj_id] = v;
		if(tex.isDepth()) {
			this.ctx.engine.pushDepth(tex);
			this.ctx.engine.clear(null,1.0);
		} else {
			this.ctx.engine.pushTarget(tex);
			this.ctx.engine.clear(16777215);
		}
		h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
		var doBlur = this.blur.radius > 0 && (this.mode != h3d_pass_RenderMode.Mixed || !this.ctx.computingStatic);
		if(this.border != null && !doBlur) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic) {
			var merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = tex;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			tex = merge;
		}
		if(doBlur) {
			if(tex.isDepth()) {
				var tmp = this.ctx.textures.allocTarget("dirShadowMapFloat",this.size,this.size,false,this.format);
				h3d_pass_Copy.run(tex,tmp);
				tex = tmp;
			}
			this.blur.apply(this.ctx,tex);
			if(this.border != null) {
				this.ctx.engine.pushTarget(tex);
				this.border.render();
				this.ctx.engine.popTarget();
			}
		}
		var _this = this.ctx;
		_this.globals.map.h[_this.cameraViewProj_id] = prevViewProj;
		return tex;
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var ct = this.ctx.camera.target;
			var slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			var ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				var _this = this.lightCamera.target;
				var x = 0;
				var y = 0;
				var z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
			} else {
				var _this = this.lightCamera.target;
				var x = ldir.x;
				var y = ldir.y;
				var z = ldir.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				var _this = this.lightCamera.target;
				var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
				if(k < 1e-20) {
					k = 0;
				} else {
					k = 1. / Math.sqrt(k);
				}
				_this.x *= k;
				_this.y *= k;
				_this.z *= k;
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			var _this = this.lightCamera.pos;
			_this.x = ct.x;
			_this.y = ct.y;
			_this.z = ct.z;
			this.lightCamera.update();
			var _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			if(passes.current != null) {
				this.calcShadowBounds(this.lightCamera);
			}
			this.lightCamera.update();
		}
		var f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		var texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		var tmp;
		if(!(this.depth == null || this.depth.width != this.size || this.depth.height != this.size)) {
			var _this = this.depth;
			tmp = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_Texture(this.size,this.size,null,hxd_PixelFormat.Depth24Stencil8);
			this.depth.name = "dirShadowMapDepth";
		}
		texture.depthBuffer = this.depth;
		texture = this.processShadowMap(passes,texture,sort);
		this.syncShader(texture);
	}
	,computeStatic: function(passes) {
		if(this.mode != h3d_pass_RenderMode.Static && this.mode != h3d_pass_RenderMode.Mixed) {
			return;
		}
		this.draw(passes);
		var texture = this.dshader.shadowMap__;
		var old = this.staticTexture;
		this.staticTexture = texture.clone();
		this.staticTexture.name = "StaticDirShadowMap";
		this.staticTexture.preventAutoDispose();
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = this.staticTexture;
		if(old != null) {
			old.dispose();
		}
	}
	,drawDebug: function() {
		if(this.g == null) {
			this.g = new h3d_scene_Graphics(this.ctx.scene);
			this.g.name = "frustumDebug";
			this.g.material.passes.setPassName("overlay");
			var _this = this.g;
			var f = 512;
			_this.flags |= f;
		}
		if(!this.debug) {
			return;
		}
		this.g.clear();
		this.drawBounds(this.lightCamera,16777215);
	}
	,drawBounds: function(camera,color) {
		var nearPlaneCorner = [camera.unproject(-1,1,0),camera.unproject(1,1,0),camera.unproject(1,-1,0),camera.unproject(-1,-1,0)];
		var farPlaneCorner = [camera.unproject(-1,1,1),camera.unproject(1,1,1),camera.unproject(1,-1,1),camera.unproject(-1,-1,1)];
		this.g.lineStyle(1,color);
		var last = nearPlaneCorner[nearPlaneCorner.length - 1];
		this.g.moveTo(last.x,last.y,last.z);
		var _g = 0;
		while(_g < nearPlaneCorner.length) {
			var fc = nearPlaneCorner[_g];
			++_g;
			this.g.lineTo(fc.x,fc.y,fc.z);
		}
		var last = farPlaneCorner[farPlaneCorner.length - 1];
		this.g.moveTo(last.x,last.y,last.z);
		var _g = 0;
		while(_g < farPlaneCorner.length) {
			var fc = farPlaneCorner[_g];
			++_g;
			this.g.lineTo(fc.x,fc.y,fc.z);
		}
		var np = nearPlaneCorner[0];
		var fp = farPlaneCorner[0];
		this.g.moveTo(np.x,np.y,np.z);
		this.g.lineTo(fp.x,fp.y,fp.z);
		var np = nearPlaneCorner[1];
		var fp = farPlaneCorner[1];
		this.g.moveTo(np.x,np.y,np.z);
		this.g.lineTo(fp.x,fp.y,fp.z);
		var np = nearPlaneCorner[2];
		var fp = farPlaneCorner[2];
		this.g.moveTo(np.x,np.y,np.z);
		this.g.lineTo(fp.x,fp.y,fp.z);
		var np = nearPlaneCorner[3];
		var fp = farPlaneCorner[3];
		this.g.moveTo(np.x,np.y,np.z);
		this.g.lineTo(fp.x,fp.y,fp.z);
	}
	,__class__: h3d_pass_DirShadowMap
});
var h3d_pass_CascadeShadowMap = function(light) {
	this.debugShader = false;
	this.cascade = 1;
	this.castingMaxDist = 0.0;
	this.firstCascadeSize = 10.0;
	this.pow = 1.0;
	this.params = [];
	this.currentCascadeIndex = 0;
	this.lightCameras = [];
	h3d_pass_DirShadowMap.call(this,light);
	this.format = hxd_PixelFormat.R32F;
	this.shader = this.dshader = this.cshader = new h3d_shader_CascadeShadow();
};
$hxClasses["h3d.pass.CascadeShadowMap"] = h3d_pass_CascadeShadowMap;
h3d_pass_CascadeShadowMap.__name__ = "h3d.pass.CascadeShadowMap";
h3d_pass_CascadeShadowMap.__super__ = h3d_pass_DirShadowMap;
h3d_pass_CascadeShadowMap.prototype = $extend(h3d_pass_DirShadowMap.prototype,{
	set_cascade: function(v) {
		this.cascade = v;
		this.lightCameras = [];
		var _g = 0;
		var _g1 = this.cascade;
		while(_g < _g1) {
			var i = _g++;
			this.lightCameras.push(new h3d_Camera());
			this.lightCameras[i].orthoBounds = new h3d_col_Bounds();
		}
		return this.cascade;
	}
	,getShadowTex: function() {
		return this.cshader.shadowMap__;
	}
	,getShadowTextures: function() {
		return this.cshader.cascadeShadowMaps__;
	}
	,computeNearFar: function(i) {
		var min = this.minDist < 0.0 ? this.ctx.camera.zNear : this.minDist;
		var max = this.maxDist < 0.0 ? this.ctx.camera.zFar : this.maxDist;
		if(i == 0) {
			return { near : min, far : min + this.firstCascadeSize};
		}
		var step = (max - min - this.firstCascadeSize) / (this.cascade - 1);
		var near = min + this.firstCascadeSize + Math.pow((i - 1) / (this.cascade - 1),this.pow) * step;
		var far = min + this.firstCascadeSize + Math.pow(i / (this.cascade - 1),this.pow) * step;
		return { near : near, far : far};
	}
	,updateCascadeBounds: function(camera) {
		var _gthis = this;
		var bounds = camera.orthoBounds;
		var shadowNear = Infinity;
		var shadowFar = -Infinity;
		var corners = this.lightCamera.getFrustumCorners();
		var _g = 0;
		while(_g < corners.length) {
			var corner = corners[_g];
			++_g;
			var m = this.ctx.camera.mcam;
			var px = corner.x * m._11 + corner.y * m._21 + corner.z * m._31 + m._41;
			var py = corner.x * m._12 + corner.y * m._22 + corner.z * m._32 + m._42;
			var pz = corner.x * m._13 + corner.y * m._23 + corner.z * m._33 + m._43;
			corner.x = px;
			corner.y = py;
			corner.z = pz;
			var b = corner.z;
			if(shadowNear > b) {
				shadowNear = b;
			}
			var b1 = corner.z;
			if(shadowFar < b1) {
				shadowFar = b1;
			}
		}
		var _g = 0;
		var _g1 = this.cascade - 1;
		while(_g < _g1) {
			var i = _g++;
			var cascadeBounds = [new h3d_col_Bounds()];
			var addCorner = [(function(cascadeBounds) {
				return function(x,y,d) {
					var this1 = _gthis.ctx.camera.unproject(x,y,_gthis.ctx.camera.distanceToDepth(d));
					var x = this1.x;
					var y = this1.y;
					var z = this1.z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var pt_x = x1;
					var pt_y = y1;
					var pt_z = z1;
					var m = camera.mcam;
					var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
					var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
					var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
					pt_x = px;
					pt_y = py;
					pt_z = pz;
					var x = pt_x;
					var y = pt_y;
					var z = pt_z;
					if(x < cascadeBounds[0].xMin) {
						cascadeBounds[0].xMin = x;
					}
					if(x > cascadeBounds[0].xMax) {
						cascadeBounds[0].xMax = x;
					}
					if(y < cascadeBounds[0].yMin) {
						cascadeBounds[0].yMin = y;
					}
					if(y > cascadeBounds[0].yMax) {
						cascadeBounds[0].yMax = y;
					}
					if(z < cascadeBounds[0].zMin) {
						cascadeBounds[0].zMin = z;
					}
					if(z > cascadeBounds[0].zMax) {
						cascadeBounds[0].zMax = z;
					}
				};
			})(cascadeBounds)];
			var addCorners = (function(addCorner) {
				return function(d) {
					addCorner[0](-1,-1,d);
					addCorner[0](-1,1,d);
					addCorner[0](1,-1,d);
					addCorner[0](1,1,d);
				};
			})(addCorner);
			var nearFar = this.computeNearFar(i);
			addCorners(nearFar.near);
			addCorners(nearFar.far);
			cascadeBounds[0].zMax = this.lightCamera.orthoBounds.zMax;
			cascadeBounds[0].zMin = this.lightCamera.orthoBounds.zMin;
			this.lightCameras[i].orthoBounds = cascadeBounds[0];
		}
		var tmp = this.lightCameras;
		var tmp1 = this.cascade - 1;
		var _this = this.lightCamera.orthoBounds;
		var b = new h3d_col_Bounds();
		b.xMin = _this.xMin;
		b.xMax = _this.xMax;
		b.yMin = _this.yMin;
		b.yMax = _this.yMax;
		b.zMin = _this.zMin;
		b.zMax = _this.zMax;
		tmp[tmp1].orthoBounds = b;
	}
	,getCascadeProj: function(i) {
		return this.lightCameras[i].m;
	}
	,syncCascadeShader: function(textures) {
		var _this = this.cshader;
		_this.constModified = true;
		_this.DEBUG__ = this.debugShader;
		var _g = 0;
		var _g1 = this.cascade;
		while(_g < _g1) {
			var i = _g++;
			var c = this.cascade - 1 - i;
			this.cshader.cascadeShadowMaps__[c] = textures[i];
			this.cshader.cascadeProjs__[c] = this.lightCameras[i].m;
			if(this.debugShader) {
				var c1 = h3d_pass_CascadeShadowMap.debugColors[i];
				var s = 0.00392156862745098;
				var x = (c1 >> 16 & 255) * s;
				var y = (c1 >> 8 & 255) * s;
				var z = (c1 & 255) * s;
				var w = (c1 >>> 24) * s;
				if(w == null) {
					w = 1.;
				}
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				this.cshader.cascadeDebugs__[c] = new h3d_Vector4Impl(x,y,z,w);
			}
			this.cshader.cascadeBias__[c] = this.params[c] != null ? this.params[c].bias : 0.001;
		}
		var _this = this.cshader;
		_this.constModified = true;
		_this.CASCADE_COUNT__ = this.cascade;
		this.cshader.shadowBias__ = this.bias;
		this.cshader.shadowPower__ = this.power;
		this.cshader.shadowProj__ = this.getShadowProj();
		var _this = this.cshader;
		_this.constModified = true;
		_this.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.cshader.shadowPower__ = this.power;
		var _this = this.cshader;
		_this.constModified = true;
		_this.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this = this.cshader.shadowRes__;
		var x = textures[0].width;
		var y = textures[0].height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		this.cshader.pcfScale__ = this.pcfScale;
		this.cshader.set_pcfQuality(this.pcfQuality);
	}
	,getShadowProj: function() {
		return this.getCascadeProj(this.currentCascadeIndex);
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var ct = this.ctx.camera.target;
			var slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			var ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				var _this = this.lightCamera.target;
				var x = 0;
				var y = 0;
				var z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
			} else {
				var _this = this.lightCamera.target;
				var x = ldir.x;
				var y = ldir.y;
				var z = ldir.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				var _this = this.lightCamera.target;
				var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
				if(k < 1e-20) {
					k = 0;
				} else {
					k = 1. / Math.sqrt(k);
				}
				_this.x *= k;
				_this.y *= k;
				_this.z *= k;
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			var _this = this.lightCamera.pos;
			_this.x = ct.x;
			_this.y = ct.y;
			_this.z = ct.z;
			this.lightCamera.update();
			var _g = 0;
			var _g1 = this.lightCameras.length;
			while(_g < _g1) {
				var i = _g++;
				if(ldir == null) {
					var _this = this.lightCameras[i].target;
					var x = 0;
					var y = 0;
					var z = -1;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					_this.x = x;
					_this.y = y;
					_this.z = z;
				} else {
					var _this1 = this.lightCameras[i].target;
					var x1 = ldir.x;
					var y1 = ldir.y;
					var z1 = ldir.z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					_this1.x = x1;
					_this1.y = y1;
					_this1.z = z1;
					var _this2 = this.lightCameras[i].target;
					var k = _this2.x * _this2.x + _this2.y * _this2.y + _this2.z * _this2.z;
					if(k < 1e-20) {
						k = 0;
					} else {
						k = 1. / Math.sqrt(k);
					}
					_this2.x *= k;
					_this2.y *= k;
					_this2.z *= k;
				}
				this.lightCameras[i].target.x += ct.x;
				this.lightCameras[i].target.y += ct.y;
				this.lightCameras[i].target.z += ct.z;
				var _this3 = this.lightCameras[i].pos;
				_this3.x = ct.x;
				_this3.y = ct.y;
				_this3.z = ct.z;
				this.lightCameras[i].update();
			}
			var _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			var _g = 0;
			var _g1 = this.lightCameras;
			while(_g < _g1.length) {
				var lC = _g1[_g];
				++_g;
				var _this = lC.orthoBounds;
				_this.xMin = 1e20;
				_this.xMax = -1e20;
				_this.yMin = 1e20;
				_this.yMax = -1e20;
				_this.zMin = 1e20;
				_this.zMax = -1e20;
			}
			if(passes.current != null) {
				this.calcShadowBounds(this.lightCamera);
			}
			var _this = this.ctx.camera.pos;
			var x = _this.x;
			var y = _this.y;
			var z = _this.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var pt_x = x1;
			var pt_y = y1;
			var pt_z = z1;
			var m = this.lightCamera.mcam;
			var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
			var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
			var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
			pt_x = px;
			pt_y = py;
			pt_z = pz;
			this.lightCamera.orthoBounds.zMax = pt_z + (this.castingMaxDist > 0.0 ? this.castingMaxDist : this.maxDist < 0.0 ? this.ctx.camera.zFar : this.maxDist);
			this.lightCamera.orthoBounds.zMin = pt_z - (this.castingMaxDist > 0.0 ? this.castingMaxDist : this.maxDist < 0.0 ? this.ctx.camera.zFar : this.maxDist);
			this.lightCamera.update();
		}
		var f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		this.updateCascadeBounds(this.lightCamera);
		var _g = 0;
		var _g1 = this.lightCameras;
		while(_g < _g1.length) {
			var lC = _g1[_g];
			++_g;
			lC.update();
		}
		var textures = [];
		var _g = 0;
		var _g1 = this.cascade;
		while(_g < _g1) {
			var i = [_g++];
			var texture = this.ctx.textures.allocTarget("cascadeShadowMap_" + i[0],this.size,this.size,false,this.format);
			var tmp;
			if(!(this.depth == null || this.depth.width != this.size || this.depth.height != this.size)) {
				var _this = this.depth;
				tmp = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
			} else {
				tmp = true;
			}
			if(tmp) {
				if(this.depth != null) {
					this.depth.dispose();
				}
				this.depth = new h3d_mat_Texture(this.size,this.size,null,hxd_PixelFormat.Depth24Stencil8);
				this.depth.name = "dirShadowMapDepth";
			}
			texture.depthBuffer = this.depth;
			this.currentCascadeIndex = i[0];
			var p = passes.lastDisc;
			var f = (function(i) {
				return function(col) {
					return col.inFrustum(_gthis.lightCameras[i[0]].frustum);
				};
			})(i);
			var prevCollider = null;
			var prevResult = true;
			var head = null;
			var prev = null;
			var disc = passes.discarded;
			var discQueue = passes.lastDisc;
			var cur = passes.current;
			while(cur != null) {
				var col = cur.obj.cullingCollider;
				var tmp1;
				if(col == null) {
					tmp1 = true;
				} else {
					if(col != prevCollider) {
						prevCollider = col;
						prevResult = f(col);
					}
					tmp1 = prevResult;
				}
				if(tmp1) {
					if(head == null) {
						prev = cur;
						head = prev;
					} else {
						prev.next = cur;
						prev = cur;
					}
				} else if(disc == null) {
					discQueue = cur;
					disc = discQueue;
				} else {
					discQueue.next = cur;
					discQueue = cur;
				}
				cur = cur.next;
			}
			if(prev != null) {
				prev.next = null;
			}
			if(discQueue != null) {
				discQueue.next = null;
			}
			passes.current = head;
			passes.discarded = disc;
			passes.lastDisc = discQueue;
			texture = this.processShadowMap(passes,texture,sort);
			textures.push(texture);
			if(passes.lastDisc != p) {
				passes.lastDisc.next = passes.current;
				if(p == null) {
					passes.current = passes.discarded;
					passes.discarded = null;
				} else {
					passes.current = p.next;
					p.next = null;
				}
				passes.lastDisc = p;
			}
		}
		this.syncCascadeShader(textures);
	}
	,drawDebug: function() {
		h3d_pass_DirShadowMap.prototype.drawDebug.call(this);
		if(!this.debug) {
			return;
		}
		var _g = 0;
		var _g1 = this.cascade;
		while(_g < _g1) {
			var i = _g++;
			this.drawBounds(this.lightCameras[i],h3d_pass_CascadeShadowMap.debugColors[i]);
		}
	}
	,__class__: h3d_pass_CascadeShadowMap
});
var h3d_pass__$Copy_ArrayCopyShader = function() {
	this.layer__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.ArrayCopyShader"] = h3d_pass__$Copy_ArrayCopyShader;
h3d_pass__$Copy_ArrayCopyShader.__name__ = "h3d.pass._Copy.ArrayCopyShader";
h3d_pass__$Copy_ArrayCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_ArrayCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_layer: function() {
		return this.layer__;
	}
	,set_layer: function(_v) {
		return this.layer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.layer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$Copy_ArrayCopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		s.layer__ = this.layer__;
		return s;
	}
	,__class__: h3d_pass__$Copy_ArrayCopyShader
});
var h3d_pass_ArrayCopy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_ArrayCopyShader());
};
$hxClasses["h3d.pass.ArrayCopy"] = h3d_pass_ArrayCopy;
h3d_pass_ArrayCopy.__name__ = "h3d.pass.ArrayCopy";
h3d_pass_ArrayCopy.run = function(from,fromLayer,to,blend,pass,layer) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_ArrayCopy.__id__];
	if(inst == null) {
		inst = new h3d_pass_ArrayCopy();
		engine.resCache.set(h3d_pass_ArrayCopy,inst);
	}
	inst.apply(from,fromLayer,to,blend,pass,layer);
};
h3d_pass_ArrayCopy.__super__ = h3d_pass_ScreenFx;
h3d_pass_ArrayCopy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,fromLayer,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		this.shader.layer__ = fromLayer;
		if(customPass != null) {
			if(blend != null) {
				customPass.setBlendMode(blend);
			}
			var h = customPass.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			var old = this.pass;
			this.pass = customPass;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		this.shader.layer__ = 0;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_ArrayCopy
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d_pass__$Copy_CopyShader;
h3d_pass__$Copy_CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$Copy_CopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_pass__$Copy_CopyShader
});
var h3d_pass_Copy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_CopyShader());
};
$hxClasses["h3d.pass.Copy"] = h3d_pass_Copy;
h3d_pass_Copy.__name__ = "h3d.pass.Copy";
h3d_pass_Copy.run = function(from,to,blend,pass,layer) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && layer == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_Copy.__id__];
	if(inst == null) {
		inst = new h3d_pass_Copy();
		engine.resCache.set(h3d_pass_Copy,inst);
	}
	inst.apply(from,to,blend,pass,layer);
};
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
h3d_pass_Copy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			if(blend != null) {
				customPass.setBlendMode(blend);
			}
			var h = customPass.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			var old = this.pass;
			this.pass = customPass;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_Copy
});
var h3d_pass__$CubeCopy_CubeCopyShader = function() {
	this.mat__ = new h3d_MatrixImpl();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._CubeCopy.CubeCopyShader"] = h3d_pass__$CubeCopy_CubeCopyShader;
h3d_pass__$CubeCopy_CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d_pass__$CubeCopy_CubeCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$CubeCopy_CubeCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$CubeCopy_CubeCopyShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		s.mat__ = this.mat__;
		return s;
	}
	,__class__: h3d_pass__$CubeCopy_CubeCopyShader
});
var h3d_pass_CubeCopy = function() {
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,0,1,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_pass__$CubeCopy_CubeCopyShader());
};
$hxClasses["h3d.pass.CubeCopy"] = h3d_pass_CubeCopy;
h3d_pass_CubeCopy.__name__ = "h3d.pass.CubeCopy";
h3d_pass_CubeCopy.run = function(from,to,blend,mip) {
	if(mip == null) {
		mip = 0;
	}
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && mip == 0 && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_CubeCopy.__id__];
	if(inst == null) {
		inst = new h3d_pass_CubeCopy();
		engine.resCache.set(h3d_pass_CubeCopy,inst);
	}
	inst.apply(from,to,blend,mip);
};
h3d_pass_CubeCopy.__super__ = h3d_pass_ScreenFx;
h3d_pass_CubeCopy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,mip) {
		if(mip == null) {
			mip = 0;
		}
		this.shader.texture__ = from;
		if(to != null) {
			this.get_engine().pushTarget(to,0,mip);
		}
		this.shader.mat__ = this.cubeDir[0];
		this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		if(to != null) {
			this.get_engine().pushTarget(to,1,mip);
		}
		this.shader.mat__ = this.cubeDir[1];
		this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		if(to != null) {
			this.get_engine().pushTarget(to,2,mip);
		}
		this.shader.mat__ = this.cubeDir[2];
		this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		if(to != null) {
			this.get_engine().pushTarget(to,3,mip);
		}
		this.shader.mat__ = this.cubeDir[3];
		this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		if(to != null) {
			this.get_engine().pushTarget(to,4,mip);
		}
		this.shader.mat__ = this.cubeDir[4];
		this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		if(to != null) {
			this.get_engine().pushTarget(to,5,mip);
		}
		this.shader.mat__ = this.cubeDir[5];
		this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
		this.render();
		if(to != null) {
			this.get_engine().popTarget();
		}
		this.shader.texture__ = null;
	}
	,__class__: h3d_pass_CubeCopy
});
var h3d_pass_CubeFaceFlag = $hxEnums["h3d.pass.CubeFaceFlag"] = { __ename__:"h3d.pass.CubeFaceFlag",__constructs__:null
	,Right: {_hx_name:"Right",_hx_index:0,__enum__:"h3d.pass.CubeFaceFlag",toString:$estr}
	,Left: {_hx_name:"Left",_hx_index:1,__enum__:"h3d.pass.CubeFaceFlag",toString:$estr}
	,Back: {_hx_name:"Back",_hx_index:2,__enum__:"h3d.pass.CubeFaceFlag",toString:$estr}
	,Front: {_hx_name:"Front",_hx_index:3,__enum__:"h3d.pass.CubeFaceFlag",toString:$estr}
	,Top: {_hx_name:"Top",_hx_index:4,__enum__:"h3d.pass.CubeFaceFlag",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:5,__enum__:"h3d.pass.CubeFaceFlag",toString:$estr}
};
h3d_pass_CubeFaceFlag.__constructs__ = [h3d_pass_CubeFaceFlag.Right,h3d_pass_CubeFaceFlag.Left,h3d_pass_CubeFaceFlag.Back,h3d_pass_CubeFaceFlag.Front,h3d_pass_CubeFaceFlag.Top,h3d_pass_CubeFaceFlag.Bottom];
h3d_pass_CubeFaceFlag.__empty_constructs__ = [h3d_pass_CubeFaceFlag.Right,h3d_pass_CubeFaceFlag.Left,h3d_pass_CubeFaceFlag.Back,h3d_pass_CubeFaceFlag.Front,h3d_pass_CubeFaceFlag.Top,h3d_pass_CubeFaceFlag.Bottom];
var h3d_pass_CubeShadowMap = function(light,useWorldDist) {
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.clearDepthColor = new h3d_Vector4Impl(x,y,z,w);
	this.pixelsForRealloc = null;
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,0,1,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_CubeMinMaxShader());
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.screenRatio = 1.0;
	this.lightCamera.fovY = 90;
	this.faceMask |= 1 << h3d_pass_CubeFaceFlag.Front._hx_index;
	this.faceMask |= 1 << h3d_pass_CubeFaceFlag.Back._hx_index;
	this.faceMask |= 1 << h3d_pass_CubeFaceFlag.Top._hx_index;
	this.faceMask |= 1 << h3d_pass_CubeFaceFlag.Bottom._hx_index;
	this.faceMask |= 1 << h3d_pass_CubeFaceFlag.Left._hx_index;
	this.faceMask |= 1 << h3d_pass_CubeFaceFlag.Right._hx_index;
};
$hxClasses["h3d.pass.CubeShadowMap"] = h3d_pass_CubeShadowMap;
h3d_pass_CubeShadowMap.__name__ = "h3d.pass.CubeShadowMap";
h3d_pass_CubeShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_CubeShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	set_size: function(s) {
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,dispose: function() {
		h3d_pass_Shadows.prototype.dispose.call(this);
		if(this.depth != null) {
			this.depth.dispose();
		}
		if(this.tmpTex != null) {
			this.tmpTex.dispose();
		}
	}
	,isUsingWorldDist: function() {
		return true;
	}
	,saveStaticData: function() {
		if(this.mode != h3d_pass_RenderMode.Mixed && this.mode != h3d_pass_RenderMode.Static) {
			return null;
		}
		if(this.staticTexture == null) {
			throw haxe_Exception.thrown("Data not computed");
		}
		var buffer = new haxe_io_BytesBuffer();
		buffer.addInt32(this.staticTexture.width);
		var bytes = haxe_zip_Compress.run(this.staticTexture.capturePixels(0).bytes,9);
		buffer.addInt32(bytes.length);
		buffer.add(bytes);
		var bytes = haxe_zip_Compress.run(this.staticTexture.capturePixels(1).bytes,9);
		buffer.addInt32(bytes.length);
		buffer.add(bytes);
		var bytes = haxe_zip_Compress.run(this.staticTexture.capturePixels(2).bytes,9);
		buffer.addInt32(bytes.length);
		buffer.add(bytes);
		var bytes = haxe_zip_Compress.run(this.staticTexture.capturePixels(3).bytes,9);
		buffer.addInt32(bytes.length);
		buffer.add(bytes);
		var bytes = haxe_zip_Compress.run(this.staticTexture.capturePixels(4).bytes,9);
		buffer.addInt32(bytes.length);
		buffer.add(bytes);
		var bytes = haxe_zip_Compress.run(this.staticTexture.capturePixels(5).bytes,9);
		buffer.addInt32(bytes.length);
		buffer.add(bytes);
		return buffer.getBytes();
	}
	,createStaticTexture: function() {
		var _gthis = this;
		if(this.staticTexture != null && this.staticTexture.width == this.size && this.staticTexture.width == this.size && this.staticTexture.format == this.format) {
			return this.staticTexture;
		}
		if(this.staticTexture != null) {
			this.staticTexture.dispose();
		}
		this.staticTexture = new h3d_mat_Texture(this.size,this.size,[h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube],this.format);
		this.staticTexture.name = "staticTexture";
		this.staticTexture.preventAutoDispose();
		this.staticTexture.realloc = function() {
			if(_gthis.pixelsForRealloc != null && _gthis.pixelsForRealloc.length == 6) {
				var pixels = _gthis.pixelsForRealloc[0];
				_gthis.staticTexture.uploadPixels(pixels,0,0);
				var pixels = _gthis.pixelsForRealloc[1];
				_gthis.staticTexture.uploadPixels(pixels,0,1);
				var pixels = _gthis.pixelsForRealloc[2];
				_gthis.staticTexture.uploadPixels(pixels,0,2);
				var pixels = _gthis.pixelsForRealloc[3];
				_gthis.staticTexture.uploadPixels(pixels,0,3);
				var pixels = _gthis.pixelsForRealloc[4];
				_gthis.staticTexture.uploadPixels(pixels,0,4);
				var pixels = _gthis.pixelsForRealloc[5];
				_gthis.staticTexture.uploadPixels(pixels,0,5);
			}
		};
		return this.staticTexture;
	}
	,loadStaticData: function(bytes) {
		if(this.mode != h3d_pass_RenderMode.Mixed && this.mode != h3d_pass_RenderMode.Static || bytes == null || bytes.length == 0) {
			return false;
		}
		var buffer = new haxe_io_BytesInput(bytes);
		var size = buffer.readInt32();
		if(size != this.size) {
			return false;
		}
		this.createStaticTexture();
		this.pixelsForRealloc = [];
		var len = buffer.readInt32();
		var pixels = new hxd_Pixels(size,size,haxe_zip_Uncompress.run(buffer.read(len)),this.format);
		this.pixelsForRealloc.push(pixels);
		this.staticTexture.uploadPixels(pixels,0,0);
		var len = buffer.readInt32();
		var pixels = new hxd_Pixels(size,size,haxe_zip_Uncompress.run(buffer.read(len)),this.format);
		this.pixelsForRealloc.push(pixels);
		this.staticTexture.uploadPixels(pixels,0,1);
		var len = buffer.readInt32();
		var pixels = new hxd_Pixels(size,size,haxe_zip_Uncompress.run(buffer.read(len)),this.format);
		this.pixelsForRealloc.push(pixels);
		this.staticTexture.uploadPixels(pixels,0,2);
		var len = buffer.readInt32();
		var pixels = new hxd_Pixels(size,size,haxe_zip_Uncompress.run(buffer.read(len)),this.format);
		this.pixelsForRealloc.push(pixels);
		this.staticTexture.uploadPixels(pixels,0,3);
		var len = buffer.readInt32();
		var pixels = new hxd_Pixels(size,size,haxe_zip_Uncompress.run(buffer.read(len)),this.format);
		this.pixelsForRealloc.push(pixels);
		this.staticTexture.uploadPixels(pixels,0,4);
		var len = buffer.readInt32();
		var pixels = new hxd_Pixels(size,size,haxe_zip_Uncompress.run(buffer.read(len)),this.format);
		this.pixelsForRealloc.push(pixels);
		this.staticTexture.uploadPixels(pixels,0,5);
		this.syncShader(this.staticTexture);
		return true;
	}
	,createDefaultShadowMap: function() {
		var _gthis = this;
		if(this.tmpTex != null) {
			return this.tmpTex;
		}
		if(this.mode == h3d_pass_RenderMode.Mixed) {
			this.tmpTex = new h3d_mat_Texture(this.size,this.size,[h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube],this.format);
		} else {
			this.tmpTex = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube],this.format);
		}
		this.tmpTex.name = "defaultCubeShadowMap";
		this.tmpTex.realloc = function() {
			var t = _gthis.tmpTex;
			if(_gthis.format == hxd_PixelFormat.RGBA) {
				t.clear(16777215,-1);
			} else {
				t.clearF(1,1,1,1,-1);
			}
		};
		var t = this.tmpTex;
		if(this.format == hxd_PixelFormat.RGBA) {
			t.clear(16777215,-1);
		} else {
			t.clearF(1,1,1,1,-1);
		}
		return this.tmpTex;
	}
	,clear: function(t,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(this.format == hxd_PixelFormat.RGBA) {
			t.clear(16777215,layer);
		} else {
			t.clearF(1,1,1,1,layer);
		}
	}
	,updateLightCameraNearFar: function(light) {
	}
	,createCollider: function(light) {
		return null;
	}
	,cull: function(lightCollider,col) {
		return false;
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		if(passes.current == null) {
			this.syncShader(this.staticTexture == null ? this.createDefaultShadowMap() : this.staticTexture);
			return;
		}
		var lightCollider = this.createCollider(this.light);
		var f = function(col) {
			return _gthis.cull(lightCollider,col);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		if(passes.current == null) {
			this.syncShader(this.staticTexture == null ? this.createDefaultShadowMap() : this.staticTexture);
			return;
		}
		var texture = this.ctx.computingStatic ? this.createStaticTexture() : this.ctx.textures.allocTarget("pointShadowMap",this.size,this.size,false,this.format,[h3d_mat_TextureFlags.Cube]);
		var tmp;
		if(!(this.depth == null || this.depth.width != texture.width || this.depth.height != texture.height)) {
			var _this = this.depth;
			tmp = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_Texture(texture.width,texture.height,null,hxd_PixelFormat.Depth24Stencil8);
		}
		texture.depthBuffer = this.depth;
		var absPos = this.light.getAbsPos();
		var _this = this.lightCamera.pos;
		var x = absPos._41;
		var y = absPos._42;
		var z = absPos._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.updateLightCameraNearFar(this.light);
		var _this = this.ctx;
		var prevFar = _this.globals.map.h[_this.cameraFar_id];
		var _this = this.ctx;
		var prevPos = _this.globals.map.h[_this.cameraPos_id];
		var _this = this.ctx;
		var prevViewProj = _this.globals.map.h[_this.cameraViewProj_id];
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			if((this.faceMask & 1 << Type.createEnumIndex(h3d_pass_CubeFaceFlag,i,null)._hx_index) == 0) {
				var layer = i;
				if(layer == null) {
					layer = -1;
				}
				if(this.format == hxd_PixelFormat.RGBA) {
					texture.clear(16777215,layer);
				} else {
					texture.clearF(1,1,1,1,layer);
				}
				continue;
			}
			this.lightCamera.setCubeMap(i);
			this.lightCamera.update();
			var save = passes.lastDisc;
			var f = function(col) {
				return col.inFrustum(_gthis.lightCamera.frustum);
			};
			var prevCollider = null;
			var prevResult = true;
			var head = null;
			var prev = null;
			var disc = passes.discarded;
			var discQueue = passes.lastDisc;
			var cur = passes.current;
			while(cur != null) {
				var col = cur.obj.cullingCollider;
				var tmp;
				if(col == null) {
					tmp = true;
				} else {
					if(col != prevCollider) {
						prevCollider = col;
						prevResult = f(col);
					}
					tmp = prevResult;
				}
				if(tmp) {
					if(head == null) {
						prev = cur;
						head = prev;
					} else {
						prev.next = cur;
						prev = cur;
					}
				} else if(disc == null) {
					discQueue = cur;
					disc = discQueue;
				} else {
					discQueue.next = cur;
					discQueue = cur;
				}
				cur = cur.next;
			}
			if(prev != null) {
				prev.next = null;
			}
			if(discQueue != null) {
				discQueue.next = null;
			}
			passes.current = head;
			passes.discarded = disc;
			passes.lastDisc = discQueue;
			if(passes.current == null) {
				if(passes.lastDisc != save) {
					passes.lastDisc.next = passes.current;
					if(save == null) {
						passes.current = passes.discarded;
						passes.discarded = null;
					} else {
						passes.current = save.next;
						save.next = null;
					}
					passes.lastDisc = save;
				}
				var layer1 = i;
				if(layer1 == null) {
					layer1 = -1;
				}
				if(this.format == hxd_PixelFormat.RGBA) {
					texture.clear(16777215,layer1);
				} else {
					texture.clearF(1,1,1,1,layer1);
				}
				continue;
			}
			this.ctx.engine.pushTarget(texture,i);
			if(this.format == hxd_PixelFormat.RGBA) {
				this.ctx.engine.clear(16777215,i);
			} else {
				this.ctx.engine.clearF(this.clearDepthColor,1);
			}
			var _this = this.ctx;
			var v = this.getShadowProj();
			_this.globals.map.h[_this.cameraViewProj_id] = v;
			var _this1 = this.ctx;
			var v1 = this.lightCamera.zFar;
			_this1.globals.map.h[_this1.cameraFar_id] = v1;
			var _this2 = this.ctx;
			var v2 = this.lightCamera.pos;
			_this2.globals.map.h[_this2.cameraPos_id] = v2;
			h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
			if(passes.lastDisc != save) {
				passes.lastDisc.next = passes.current;
				if(save == null) {
					passes.current = passes.discarded;
					passes.discarded = null;
				} else {
					passes.current = save.next;
					save.next = null;
				}
				passes.lastDisc = save;
			}
			this.ctx.engine.popTarget();
		}
		var _this = this.ctx;
		_this.globals.map.h[_this.cameraFar_id] = prevFar;
		var _this = this.ctx;
		_this.globals.map.h[_this.cameraPos_id] = prevPos;
		var _this = this.ctx;
		_this.globals.map.h[_this.cameraViewProj_id] = prevViewProj;
		if(this.blur.radius > 0) {
			this.blur.apply(this.ctx,texture);
		}
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic) {
			this.syncShader(this.merge(texture));
		} else {
			this.syncShader(texture);
		}
	}
	,merge: function(dynamicTex) {
		var validBakedTexture = this.staticTexture != null && this.staticTexture.width == dynamicTex.width;
		var merge = null;
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic && validBakedTexture) {
			merge = this.ctx.textures.allocTarget("mergedPointShadowMap",this.size,this.size,false,this.format,[h3d_mat_TextureFlags.Cube]);
		}
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic && merge != null) {
			var _g = 0;
			while(_g < 6) {
				var i = _g++;
				if((this.faceMask & 1 << Type.createEnumIndex(h3d_pass_CubeFaceFlag,i,null)._hx_index) == 0) {
					continue;
				}
				this.mergePass.shader.texA__ = dynamicTex;
				this.mergePass.shader.texB__ = this.staticTexture;
				this.mergePass.shader.mat__ = this.cubeDir[i];
				this.ctx.engine.pushTarget(merge,i);
				this.mergePass.render();
				this.ctx.engine.popTarget();
			}
		}
		return merge;
	}
	,computeStatic: function(passes) {
		if(this.mode != h3d_pass_RenderMode.Static && this.mode != h3d_pass_RenderMode.Mixed) {
			return;
		}
		this.draw(passes);
	}
	,__class__: h3d_pass_CubeShadowMap
});
var h3d_pass_DefaultShadowMap = function(size,format) {
	if(size == null) {
		size = 1024;
	}
	if(format != null) {
		this.format = format;
	}
	h3d_pass_DirShadowMap.call(this,null);
	this.set_size(size);
	this.color = new h3d_VectorImpl(0.,0.,0.);
	this.set_mode(h3d_pass_RenderMode.Dynamic);
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
};
$hxClasses["h3d.pass.DefaultShadowMap"] = h3d_pass_DefaultShadowMap;
h3d_pass_DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d_pass_DefaultShadowMap.__super__ = h3d_pass_DirShadowMap;
h3d_pass_DefaultShadowMap.prototype = $extend(h3d_pass_DirShadowMap.prototype,{
	draw: function(passes,sort) {
		h3d_pass_DirShadowMap.prototype.draw.call(this,passes,sort);
		this.ctx.globals.map.h[this.shadowMapId] = { texture : this.dshader.shadowMap__, channel : this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R};
		var _this = this.ctx.globals;
		var id = this.shadowProjId;
		var v = this.getShadowProj();
		_this.map.h[id] = v;
		this.ctx.globals.map.h[this.shadowColorId] = this.color;
		this.ctx.globals.map.h[this.shadowPowerId] = this.power;
		this.ctx.globals.map.h[this.shadowBiasId] = this.bias;
	}
	,__class__: h3d_pass_DefaultShadowMap
});
var h3d_pass__$FXAA_FXAAShader = function() {
	this.delta__ = new h3d_VectorImpl(0.,0.,0.);
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._FXAA.FXAAShader"] = h3d_pass__$FXAA_FXAAShader;
h3d_pass__$FXAA_FXAAShader.__name__ = "h3d.pass._FXAA.FXAAShader";
h3d_pass__$FXAA_FXAAShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$FXAA_FXAAShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_delta: function() {
		return this.delta__;
	}
	,set_delta: function(_v) {
		return this.delta__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.delta__;
		case 2:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_pass__$FXAA_FXAAShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.delta__ = this.delta__;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_pass__$FXAA_FXAAShader
});
var h3d_pass_FXAA = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$FXAA_FXAAShader());
};
$hxClasses["h3d.pass.FXAA"] = h3d_pass_FXAA;
h3d_pass_FXAA.__name__ = "h3d.pass.FXAA";
h3d_pass_FXAA.__super__ = h3d_pass_ScreenFx;
h3d_pass_FXAA.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(texture) {
		this.shader.texture__ = texture;
		var _this = this.shader.delta__;
		var x = 1 / texture.width;
		var y = 1 / texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		this.render();
	}
	,__class__: h3d_pass_FXAA
});
var h3d_pass_OutputShader = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
$hxClasses["h3d.pass.OutputShader"] = h3d_pass_OutputShader;
h3d_pass_OutputShader.__name__ = "h3d.pass.OutputShader";
h3d_pass_OutputShader.prototype = {
	setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,compileShaders: function(globals,shaders,mode) {
		if(mode == null) {
			mode = hxsl_LinkMode.Default;
		}
		globals.maxChannels = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(globals);
		}
		this.currentOutput.next = shaders;
		var s = this.shaderCache.link(this.currentOutput,mode);
		this.currentOutput.next = null;
		return s;
	}
	,__class__: h3d_pass_OutputShader
};
var h3d_pass_PassListIterator = function(o) {
	this.o = o;
};
$hxClasses["h3d.pass.PassListIterator"] = h3d_pass_PassListIterator;
h3d_pass_PassListIterator.__name__ = "h3d.pass.PassListIterator";
h3d_pass_PassListIterator.prototype = {
	hasNext: function() {
		return this.o != null;
	}
	,next: function() {
		var tmp = this.o;
		this.o = this.o.next;
		return tmp;
	}
	,__class__: h3d_pass_PassListIterator
};
var h3d_pass_PassList = function(current) {
	this.current = current;
	this.discarded = this.lastDisc = null;
};
$hxClasses["h3d.pass.PassList"] = h3d_pass_PassList;
h3d_pass_PassList.__name__ = "h3d.pass.PassList";
h3d_pass_PassList.prototype = {
	init: function(pass) {
		this.current = pass;
		this.discarded = this.lastDisc = null;
	}
	,reset: function() {
		if(this.discarded != null) {
			this.lastDisc.next = this.current;
			this.current = this.discarded;
			this.discarded = this.lastDisc = null;
		}
	}
	,count: function() {
		var c = this.current;
		var n = 0;
		while(c != null) {
			++n;
			c = c.next;
		}
		return n;
	}
	,save: function() {
		return this.lastDisc;
	}
	,load: function(p) {
		if(this.lastDisc != p) {
			this.lastDisc.next = this.current;
			if(p == null) {
				this.current = this.discarded;
				this.discarded = null;
			} else {
				this.current = p.next;
				p.next = null;
			}
			this.lastDisc = p;
		}
	}
	,isEmpty: function() {
		return this.current == null;
	}
	,clear: function() {
		if(this.current == null) {
			return;
		}
		if(this.discarded == null) {
			this.discarded = this.current;
		} else {
			this.lastDisc.next = this.current;
		}
		var p = this.current;
		while(p.next != null) p = p.next;
		this.lastDisc = p;
		this.current = null;
	}
	,sort: function(f) {
		var list = this.current;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || f(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.current = tmp;
	}
	,filter: function(f) {
		var head = null;
		var prev = null;
		var disc = this.discarded;
		var discQueue = this.lastDisc;
		var cur = this.current;
		while(cur != null) {
			if(f(cur)) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		this.current = head;
		this.discarded = disc;
		this.lastDisc = discQueue;
	}
	,iterator: function() {
		return new h3d_pass_PassListIterator(this.current);
	}
	,getFiltered: function() {
		return new h3d_pass_PassListIterator(this.discarded);
	}
	,__class__: h3d_pass_PassList
};
var h3d_pass_PassObject = function() {
	this.texture = 0;
};
$hxClasses["h3d.pass.PassObject"] = h3d_pass_PassObject;
h3d_pass_PassObject.__name__ = "h3d.pass.PassObject";
h3d_pass_PassObject.prototype = {
	__class__: h3d_pass_PassObject
};
var h3d_pass_PointShadowMap = function(light,useWorldDist) {
	h3d_pass_CubeShadowMap.call(this,light,useWorldDist);
	this.shader = this.pshader = new h3d_shader_PointShadow();
};
$hxClasses["h3d.pass.PointShadowMap"] = h3d_pass_PointShadowMap;
h3d_pass_PointShadowMap.__name__ = "h3d.pass.PointShadowMap";
h3d_pass_PointShadowMap.__super__ = h3d_pass_CubeShadowMap;
h3d_pass_PointShadowMap.prototype = $extend(h3d_pass_CubeShadowMap.prototype,{
	set_mode: function(m) {
		var _this = this.pshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None && this.enabled;
		return this.mode = m;
	}
	,set_enabled: function(b) {
		var _this = this.pshader;
		_this.constModified = true;
		_this.enable__ = b && this.mode != h3d_pass_RenderMode.None;
		return this.enabled = b;
	}
	,getShadowTex: function() {
		return this.pshader.shadowMap__;
	}
	,syncShader: function(texture) {
		if(texture == null) {
			throw haxe_Exception.thrown("assert");
		}
		var pointLight = js_Boot.__cast(this.light , h3d_scene_pbr_PointLight);
		this.pshader.shadowMap__ = texture;
		this.pshader.shadowBias__ = this.bias;
		this.pshader.shadowPower__ = this.power;
		var _this = this.pshader;
		var _this1 = this.light.getAbsPos();
		var v = new h3d_VectorImpl(0.,0.,0.);
		var x = _this1._41;
		var y = _this1._42;
		var z = _this1._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v.x = x;
		v.y = y;
		v.z = z;
		_this.lightPos__ = v;
		this.pshader.zFar__ = pointLight.get_range();
		var _this = this.pshader;
		_this.constModified = true;
		_this.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.pshader.shadowPower__ = this.power;
		var _this = this.pshader;
		_this.constModified = true;
		_this.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		this.pshader.pcfScale__ = this.pcfScale / 100.0;
		var _this = this.pshader;
		_this.constModified = true;
		_this.pcfQuality__ = this.pcfQuality;
	}
	,createCollider: function(light) {
		var absPos = light.getAbsPos();
		var pointLight = js_Boot.__cast(light , h3d_scene_pbr_PointLight);
		return new h3d_col_Sphere(absPos._41,absPos._42,absPos._43,pointLight.get_range());
	}
	,cull: function(lightCollider,col) {
		var sphere = js_Boot.__cast(lightCollider , h3d_col_Sphere);
		return col.inSphere(sphere);
	}
	,updateLightCameraNearFar: function(light) {
		var pointLight = js_Boot.__cast(light , h3d_scene_pbr_PointLight);
		this.lightCamera.zFar = pointLight.get_range();
		this.lightCamera.zNear = pointLight.zNear;
	}
	,__class__: h3d_pass_PointShadowMap
});
var h3d_pass_RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__:"h3d.pass.RenderMode",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_name:"Static",_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_name:"Dynamic",_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_name:"Mixed",_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d_pass_RenderMode.__constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
h3d_pass_RenderMode.__empty_constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
var h3d_pass_ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__:"h3d.pass.ShadowSamplingKind",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_name:"PCF",_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_name:"ESM",_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d_pass_ShadowSamplingKind.__constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
h3d_pass_ShadowSamplingKind.__empty_constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
var h3d_pass_SortByMaterial = function() {
	this.textureCount = 1;
	this.shaderCount = 1;
	this.shaderIdMap = [];
	this.textureIdMap = [];
};
$hxClasses["h3d.pass.SortByMaterial"] = h3d_pass_SortByMaterial;
h3d_pass_SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
h3d_pass_SortByMaterial.prototype = {
	sort: function(passes) {
		var _gthis = this;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			if(this.shaderIdMap[p.shader.id] < shaderStart || this.shaderIdMap[p.shader.id] == null) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart || this.textureIdMap[p.shader.id] == null) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
		}
		var list = passes.current;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							var tmp1;
							if(!(qsize == 0 || q == null)) {
								var tmp2;
								if(p.pass.layer != q.pass.layer) {
									tmp2 = p.pass.layer - q.pass.layer;
								} else {
									var d = _gthis.shaderIdMap[p.shader.id] - _gthis.shaderIdMap[q.shader.id];
									tmp2 = d != 0 ? d : _gthis.textureIdMap[p.texture] - _gthis.textureIdMap[q.texture];
								}
								tmp1 = tmp2 <= 0;
							} else {
								tmp1 = true;
							}
							if(tmp1) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		passes.current = tmp;
	}
	,__class__: h3d_pass_SortByMaterial
};
var h3d_pass_SpotShadowMap = function(light) {
	this.pixelsForRealloc = null;
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
	this.format = hxd_PixelFormat.R32F;
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.screenRatio = 1.0;
	this.lightCamera.zNear = 0.01;
	this.shader = this.sshader = new h3d_shader_SpotShadow();
	this.border = new h3d_pass_Border(this.size,this.size);
};
$hxClasses["h3d.pass.SpotShadowMap"] = h3d_pass_SpotShadowMap;
h3d_pass_SpotShadowMap.__name__ = "h3d.pass.SpotShadowMap";
h3d_pass_SpotShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_SpotShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	set_mode: function(m) {
		var _this = this.sshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	,set_enabled: function(b) {
		var _this = this.sshader;
		_this.constModified = true;
		_this.enable__ = b && this.mode != h3d_pass_RenderMode.None;
		return this.enabled = b;
	}
	,set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,isUsingWorldDist: function() {
		return false;
	}
	,dispose: function() {
		h3d_pass_Shadows.prototype.dispose.call(this);
		if(this.depth != null) {
			this.depth.dispose();
		}
		this.border.dispose();
	}
	,getShadowTex: function() {
		return this.sshader.shadowMap__;
	}
	,syncShader: function(texture) {
		var _this = this.sshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		var _this = this.sshader;
		_this.constModified = true;
		_this.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.sshader.shadowBias__ = this.bias;
		this.sshader.shadowProj__ = this.getShadowProj();
		var _this = this.sshader;
		_this.constModified = true;
		_this.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.sshader.shadowPower__ = this.power;
		var _this = this.sshader;
		_this.constModified = true;
		_this.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this = this.sshader.shadowRes__;
		var x = texture.width;
		var y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		this.sshader.pcfScale__ = this.pcfScale;
		var _this = this.sshader;
		_this.constModified = true;
		_this.pcfQuality__ = this.pcfQuality;
	}
	,saveStaticData: function() {
		if(this.mode != h3d_pass_RenderMode.Mixed && this.mode != h3d_pass_RenderMode.Static) {
			return null;
		}
		if(this.staticTexture == null) {
			throw haxe_Exception.thrown("Data not computed");
		}
		var bytes = haxe_zip_Compress.run(this.staticTexture.capturePixels().bytes,9);
		var buffer = new haxe_io_BytesBuffer();
		buffer.addInt32(this.staticTexture.width);
		buffer.addInt32(bytes.length);
		buffer.add(bytes);
		return buffer.getBytes();
	}
	,createStaticTexture: function() {
		var _gthis = this;
		if(this.staticTexture != null && this.staticTexture.width == this.size && this.staticTexture.width == this.size && this.staticTexture.format == this.format) {
			return this.staticTexture;
		}
		if(this.staticTexture != null) {
			this.staticTexture.dispose();
		}
		this.staticTexture = new h3d_mat_Texture(this.size,this.size,[h3d_mat_TextureFlags.Target],this.format);
		this.staticTexture.name = "staticTexture";
		this.staticTexture.preventAutoDispose();
		this.staticTexture.realloc = function() {
			if(_gthis.pixelsForRealloc != null) {
				_gthis.staticTexture.uploadPixels(_gthis.pixelsForRealloc);
			}
		};
		return this.staticTexture;
	}
	,loadStaticData: function(bytes) {
		if(this.mode != h3d_pass_RenderMode.Mixed && this.mode != h3d_pass_RenderMode.Static || bytes == null) {
			return false;
		}
		var buffer = new haxe_io_BytesInput(bytes);
		var size = buffer.readInt32();
		if(size != this.size) {
			return false;
		}
		this.createStaticTexture();
		var len = buffer.readInt32();
		var pixels = new hxd_Pixels(size,size,haxe_zip_Uncompress.run(buffer.read(len)),this.format);
		this.pixelsForRealloc = pixels;
		this.syncShader(this.staticTexture);
		return true;
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		this.updateCamera();
		var f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		var texture = this.ctx.computingStatic ? this.createStaticTexture() : this.ctx.textures.allocTarget("spotShadowMap",this.size,this.size,false,this.format);
		var tmp;
		if(!(this.depth == null || this.depth.width != texture.width || this.depth.height != texture.height)) {
			var _this = this.depth;
			tmp = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_Texture(texture.width,texture.height,null,hxd_PixelFormat.Depth24Stencil8);
		}
		texture.depthBuffer = this.depth;
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(16777215,1);
		h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
		if(this.border != null) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.blur.radius > 0) {
			this.blur.apply(this.ctx,texture);
		}
		var validBakedTexture = this.staticTexture != null && this.staticTexture.width == texture.width;
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic && validBakedTexture) {
			var merge = this.ctx.textures.allocTarget("mergedSpotShadowMap",this.size,this.size,false,this.format);
			var _this = this.ctx;
			var prev = _this.globals.map.h[_this.cameraViewProj_id];
			var _this = this.ctx;
			var v = this.getShadowProj();
			_this.globals.map.h[_this.cameraViewProj_id] = v;
			this.mergePass.shader.texA__ = texture;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			texture = merge;
			var _this = this.ctx;
			_this.globals.map.h[_this.cameraViewProj_id] = prev;
		}
		this.syncShader(texture);
	}
	,updateCamera: function() {
		var absPos = this.light.getAbsPos();
		var spotLight = js_Boot.__cast(this.light , h3d_scene_pbr_SpotLight);
		var x = absPos._11;
		var y = absPos._12;
		var z = absPos._13;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ldir_x = x1;
		var ldir_y = y1;
		var ldir_z = z1;
		var k = ldir_x * ldir_x + ldir_y * ldir_y + ldir_z * ldir_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		ldir_x *= k;
		ldir_y *= k;
		ldir_z *= k;
		var _this = this.lightCamera.pos;
		var x = absPos._41;
		var y = absPos._42;
		var z = absPos._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.lightCamera.target;
		var x = absPos._41 + ldir_x;
		var y = absPos._42 + ldir_y;
		var z = absPos._43 + ldir_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.lightCamera.fovY = spotLight.angle;
		var tmp = spotLight.get_range();
		this.lightCamera.zNear = tmp * 0.05;
		this.lightCamera.zFar = spotLight.get_range();
		this.lightCamera.update();
	}
	,computeStatic: function(passes) {
		if(this.mode != h3d_pass_RenderMode.Static && this.mode != h3d_pass_RenderMode.Mixed) {
			return;
		}
		this.draw(passes);
	}
	,__class__: h3d_pass_SpotShadowMap
});
var h3d_prim_BigPrimitive = function(format,alloc) {
	this.isStatic = true;
	this.hasTangents = false;
	this.startIndex = 0;
	this.idxPos = 0;
	this.bufPos = 0;
	h3d_prim_Primitive.call(this);
	this.format = format;
	this.buffers = [];
	this.allIndexes = [];
	this.bounds = new h3d_col_Bounds();
	this.allocator = alloc;
	if(format.stride < 3) {
		throw haxe_Exception.thrown("Minimum stride = 3");
	}
};
$hxClasses["h3d.prim.BigPrimitive"] = h3d_prim_BigPrimitive;
h3d_prim_BigPrimitive.__name__ = "h3d.prim.BigPrimitive";
h3d_prim_BigPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_BigPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	begin: function(vcount,icount) {
		this.startIndex = this.bufPos / this.format.stride | 0;
		if(this.startIndex + vcount >= 65535) {
			if(vcount >= 65535) {
				throw haxe_Exception.thrown("Too many vertices in begin()");
			}
			this.flush();
		}
		if(this.tmpBuf == null) {
			this.tmpBuf = h3d_prim_BigPrimitive.PREV_BUFFER;
			if(this.tmpBuf == null) {
				this.tmpBuf = hxd__$FloatBuffer_Float32Expand._new(0);
			} else {
				h3d_prim_BigPrimitive.PREV_BUFFER = null;
			}
			if(this.isStatic) {
				var this1 = this.tmpBuf;
				var _g = this1.pos;
				var _g1 = 65535 * this.format.stride;
				while(_g < _g1) {
					var i = _g++;
					if(this1.pos == this1.array.length) {
						var newSize = this1.array.length << 1;
						if(newSize < 128) {
							newSize = 128;
						}
						var newArray = new Float32Array(newSize);
						newArray.set(this1.array);
						this1.array = newArray;
					}
					this1.array[this1.pos++] = 0.;
				}
			}
		}
		if(!this.isStatic) {
			var this1 = this.tmpBuf;
			var _g = this1.pos;
			var _g1 = vcount * this.format.stride + this.bufPos;
			while(_g < _g1) {
				var i = _g++;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = 0.;
			}
		}
		if(this.tmpIdx == null) {
			this.tmpIdx = h3d_prim_BigPrimitive.PREV_INDEX;
			if(this.tmpIdx == null) {
				this.tmpIdx = new Array(0);
			} else {
				h3d_prim_BigPrimitive.PREV_INDEX = null;
			}
		}
		if(this.idxPos + icount > this.tmpIdx.length) {
			var size = this.tmpIdx.length == 0 ? 1024 : this.tmpIdx.length;
			var req = this.idxPos + icount;
			while(size < req) size <<= 1;
			var this1 = this.tmpIdx;
			while(this1.length < size) this1.push(0);
		}
	}
	,addPoint: function(x,y,z) {
		this.tmpBuf.array[this.bufPos++] = x;
		this.tmpBuf.array[this.bufPos++] = y;
		this.tmpBuf.array[this.bufPos++] = z;
		var _this = this.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
	}
	,addBounds: function(x,y,z) {
		var _this = this.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
	}
	,addVertexValue: function(v) {
		this.tmpBuf.array[this.bufPos++] = v;
	}
	,addIndex: function(i) {
		this.tmpIdx[this.idxPos++] = i + this.startIndex;
	}
	,triCount: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.allIndexes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			count += i.vertices;
		}
		count += this.idxPos;
		return count / 3 | 0;
	}
	,vertexCount: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			count += b.vertices;
		}
		count += this.bufPos / this.format.stride | 0;
		return count;
	}
	,flush: function() {
		if(this.tmpBuf != null) {
			if(this.bufPos > 0 && this.idxPos > 0) {
				this.flushing = true;
				var b;
				if(this.allocator != null) {
					b = this.allocator.ofSubFloats(this.tmpBuf,this.bufPos / this.format.stride | 0,this.format);
				} else {
					b = h3d_Buffer.ofSubFloats(this.tmpBuf,this.bufPos / this.format.stride | 0,this.format);
				}
				this.buffers.push(b);
				var idx = this.allocator != null ? this.allocator.ofIndexes(this.tmpIdx,this.idxPos) : h3d_Indexes.alloc(this.tmpIdx,0,this.idxPos);
				this.allIndexes.push(idx);
				this.flushing = false;
			}
			if(h3d_prim_BigPrimitive.PREV_BUFFER == null || h3d_prim_BigPrimitive.PREV_BUFFER.pos < this.tmpBuf.pos) {
				h3d_prim_BigPrimitive.PREV_BUFFER = this.tmpBuf;
			}
			if(h3d_prim_BigPrimitive.PREV_INDEX == null || h3d_prim_BigPrimitive.PREV_INDEX.length < this.tmpIdx.length) {
				h3d_prim_BigPrimitive.PREV_INDEX = this.tmpIdx;
			}
			this.tmpBuf = null;
			this.tmpIdx = null;
			this.bufPos = 0;
			this.idxPos = 0;
			this.startIndex = 0;
		}
	}
	,render: function(engine) {
		if(this.tmpBuf != null) {
			this.flush();
		}
		var _g = 0;
		var _g1 = this.buffers.length;
		while(_g < _g1) {
			var i = _g++;
			engine.renderIndexed(this.buffers[i],this.allIndexes[i]);
		}
	}
	,getBounds: function() {
		return this.bounds;
	}
	,dispose: function() {
		this.clear();
	}
	,clear: function() {
		if(this.flushing) {
			throw haxe_Exception.thrown("Cannot clear() BigPrimitive while it's flushing");
		}
		var _this = this.bounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(this.allocator != null) {
				this.allocator.disposeBuffer(b);
			} else {
				b.dispose();
			}
		}
		var _g = 0;
		var _g1 = this.allIndexes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(this.allocator != null) {
				this.allocator.disposeIndexBuffer(i);
			} else {
				i.dispose();
			}
		}
		this.buffers = [];
		this.allIndexes = [];
		this.bufPos = 0;
		this.idxPos = 0;
		this.tmpBuf = null;
		this.tmpIdx = null;
	}
	,add: function(buf,idx,dx,dy,dz,rotation,scale,stride) {
		if(stride == null) {
			stride = -1;
		}
		if(scale == null) {
			scale = 1.;
		}
		if(rotation == null) {
			rotation = 0.;
		}
		if(dz == null) {
			dz = 0.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		this.addSub(buf,idx,0,0,buf.pos / (stride < 0 ? this.format.stride : stride) | 0,idx.length / 3 | 0,dx,dy,dz,rotation,scale,stride);
	}
	,addSub: function(buf,idx,startVert,startTri,nvert,triCount,dx,dy,dz,rotation,scale,stride,deltaU,deltaV,color,mat) {
		if(color == null) {
			color = 1.;
		}
		if(deltaV == null) {
			deltaV = 0.;
		}
		if(deltaU == null) {
			deltaU = 0.;
		}
		if(stride == null) {
			stride = -1;
		}
		if(scale == null) {
			scale = 1.;
		}
		if(rotation == null) {
			rotation = 0.;
		}
		if(dz == null) {
			dz = 0.;
		}
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		if(stride < 0) {
			stride = this.format.stride;
		}
		if(stride < this.format.stride) {
			throw haxe_Exception.thrown("only stride >= " + this.format.stride + " allowed");
		}
		this.begin(nvert,triCount * 3);
		var start = this.startIndex;
		var cr = Math.cos(rotation);
		var sr = Math.sin(rotation);
		var pos = this.bufPos;
		var tmpBuf = this.tmpBuf;
		var _g = 0;
		var _g1 = nvert;
		while(_g < _g1) {
			var i = _g++;
			var p = (i + startVert) * stride;
			var x = buf.array[p++];
			var y = buf.array[p++];
			var z = buf.array[p++];
			if(mat != null) {
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var x2 = x1;
				var y2 = y1;
				var z2 = z1;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				var pt_x = x2;
				var pt_y = y2;
				var pt_z = z2;
				var px = pt_x * mat._11 + pt_y * mat._21 + pt_z * mat._31 + mat._41;
				var py = pt_x * mat._12 + pt_y * mat._22 + pt_z * mat._32 + mat._42;
				var pz = pt_x * mat._13 + pt_y * mat._23 + pt_z * mat._33 + mat._43;
				pt_x = px;
				pt_y = py;
				pt_z = pz;
				tmpBuf.array[pos++] = pt_x;
				tmpBuf.array[pos++] = pt_y;
				tmpBuf.array[pos++] = pt_z;
				var _this = this.bounds;
				if(pt_x < _this.xMin) {
					_this.xMin = pt_x;
				}
				if(pt_x > _this.xMax) {
					_this.xMax = pt_x;
				}
				if(pt_y < _this.yMin) {
					_this.yMin = pt_y;
				}
				if(pt_y > _this.yMax) {
					_this.yMax = pt_y;
				}
				if(pt_z < _this.zMin) {
					_this.zMin = pt_z;
				}
				if(pt_z > _this.zMax) {
					_this.zMax = pt_z;
				}
			} else {
				var tx = (x * cr - y * sr) * scale;
				var ty = (x * sr + y * cr) * scale;
				var vx = dx + tx;
				var vy = dy + ty;
				var vz = dz + z * scale;
				tmpBuf.array[pos++] = vx;
				tmpBuf.array[pos++] = vy;
				tmpBuf.array[pos++] = vz;
				var _this1 = this.bounds;
				if(vx < _this1.xMin) {
					_this1.xMin = vx;
				}
				if(vx > _this1.xMax) {
					_this1.xMax = vx;
				}
				if(vy < _this1.yMin) {
					_this1.yMin = vy;
				}
				if(vy > _this1.yMax) {
					_this1.yMax = vy;
				}
				if(vz < _this1.zMin) {
					_this1.zMin = vz;
				}
				if(vz > _this1.zMax) {
					_this1.zMax = vz;
				}
			}
			var stride1 = this.format.stride;
			if(stride1 >= 6) {
				var nx = buf.array[p++];
				var ny = buf.array[p++];
				var nz = buf.array[p++];
				if(mat != null) {
					var x3 = nx;
					var y3 = ny;
					var z3 = nz;
					if(z3 == null) {
						z3 = 0.;
					}
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					var x4 = x3;
					var y4 = y3;
					var z4 = z3;
					if(z4 == null) {
						z4 = 0.;
					}
					if(y4 == null) {
						y4 = 0.;
					}
					if(x4 == null) {
						x4 = 0.;
					}
					var pt_x1 = x4;
					var pt_y1 = y4;
					var pt_z1 = z4;
					var px1 = pt_x1 * mat._11 + pt_y1 * mat._21 + pt_z1 * mat._31;
					var py1 = pt_x1 * mat._12 + pt_y1 * mat._22 + pt_z1 * mat._32;
					var pz1 = pt_x1 * mat._13 + pt_y1 * mat._23 + pt_z1 * mat._33;
					pt_x1 = px1;
					pt_y1 = py1;
					pt_z1 = pz1;
					var k = pt_x1 * pt_x1 + pt_y1 * pt_y1 + pt_z1 * pt_z1;
					if(k < 1e-20) {
						k = 0;
					} else {
						k = 1. / Math.sqrt(k);
					}
					pt_x1 *= k;
					pt_y1 *= k;
					pt_z1 *= k;
					tmpBuf.array[pos++] = pt_x1;
					tmpBuf.array[pos++] = pt_y1;
					tmpBuf.array[pos++] = pt_z1;
				} else {
					var tnx = nx * cr - ny * sr;
					var tny = nx * sr + ny * cr;
					tmpBuf.array[pos++] = tnx;
					tmpBuf.array[pos++] = tny;
					tmpBuf.array[pos++] = nz;
				}
			}
			if(this.hasTangents) {
				var tx1 = buf.array[p++];
				var ty1 = buf.array[p++];
				var tz = buf.array[p++];
				if(mat != null) {
					var x5 = tx1;
					var y5 = ty1;
					var z5 = tz;
					if(z5 == null) {
						z5 = 0.;
					}
					if(y5 == null) {
						y5 = 0.;
					}
					if(x5 == null) {
						x5 = 0.;
					}
					var x6 = x5;
					var y6 = y5;
					var z6 = z5;
					if(z6 == null) {
						z6 = 0.;
					}
					if(y6 == null) {
						y6 = 0.;
					}
					if(x6 == null) {
						x6 = 0.;
					}
					var pt_x2 = x6;
					var pt_y2 = y6;
					var pt_z2 = z6;
					var len = pt_x2 * pt_x2 + pt_y2 * pt_y2 + pt_z2 * pt_z2;
					var px2 = pt_x2 * mat._11 + pt_y2 * mat._21 + pt_z2 * mat._31;
					var py2 = pt_x2 * mat._12 + pt_y2 * mat._22 + pt_z2 * mat._32;
					var pz2 = pt_x2 * mat._13 + pt_y2 * mat._23 + pt_z2 * mat._33;
					pt_x2 = px2;
					pt_y2 = py2;
					pt_z2 = pz2;
					var k1 = pt_x2 * pt_x2 + pt_y2 * pt_y2 + pt_z2 * pt_z2;
					if(k1 < 1e-20) {
						k1 = 0;
					} else {
						k1 = 1. / Math.sqrt(k1);
					}
					pt_x2 *= k1;
					pt_y2 *= k1;
					pt_z2 *= k1;
					if(len < 0.5) {
						pt_x2 *= 0.5;
						pt_y2 *= 0.5;
						pt_z2 *= 0.5;
					}
					tmpBuf.array[pos++] = pt_x2;
					tmpBuf.array[pos++] = pt_y2;
					tmpBuf.array[pos++] = pt_z2;
				} else {
					var tnx1 = tx1 * cr - ty1 * sr;
					var tny1 = tx1 * sr + ty1 * cr;
					tmpBuf.array[pos++] = tnx1;
					tmpBuf.array[pos++] = tny1;
					tmpBuf.array[pos++] = tz;
				}
				stride1 -= 3;
			}
			switch(stride1) {
			case 3:case 6:
				continue;
			case 4:case 7:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				break;
			case 5:case 8:case 9:case 10:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				tmpBuf.array[pos++] = buf.array[p++] + deltaV;
				var _g2 = 8;
				var _g3 = stride1;
				while(_g2 < _g3) {
					var i1 = _g2++;
					tmpBuf.array[pos++] = buf.array[p++];
				}
				break;
			default:
				tmpBuf.array[pos++] = buf.array[p++] + deltaU;
				tmpBuf.array[pos++] = buf.array[p++] + deltaV;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				tmpBuf.array[pos++] = buf.array[p++] * color;
				var _g4 = 11;
				var _g5 = stride1;
				while(_g4 < _g5) {
					var i2 = _g4++;
					tmpBuf.array[pos++] = buf.array[p++];
				}
			}
		}
		this.bufPos = pos;
		start -= startVert;
		var _g = 0;
		var _g1 = triCount * 3;
		while(_g < _g1) {
			var i = _g++;
			var tmp = idx[i + startTri * 3] + start;
			this.tmpIdx[this.idxPos++] = tmp;
		}
	}
	,__class__: h3d_prim_BigPrimitive
});
var h3d_prim_MeshPrimitive = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.MeshPrimitive"] = h3d_prim_MeshPrimitive;
h3d_prim_MeshPrimitive.__name__ = "h3d.prim.MeshPrimitive";
h3d_prim_MeshPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_MeshPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	hasInput: function(name) {
		return this.resolveBuffer(name) != null;
	}
	,resolveBuffer: function(name) {
		if(this.buffers != null) {
			var _g = 0;
			var _g1 = this.buffers;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				if(b.format.hasInput(name)) {
					return b;
				}
			}
			return null;
		}
		if(this.buffer != null && this.buffer.format.hasInput(name)) {
			return this.buffer;
		}
		return null;
	}
	,removeBuffer: function(buf) {
		if(this.buffers != null) {
			HxOverrides.remove(this.buffers,buf);
			if(buf == this.buffer) {
				this.buffer = this.buffers[this.buffers.length - 1];
			}
			if(this.buffers.length == 1) {
				this.buffers = null;
				this.formats = null;
			}
		} else if(this.buffer == buf) {
			this.buffer = null;
		}
	}
	,addBuffer: function(buf) {
		if(this.buffer == null) {
			this.buffer = buf;
		} else {
			if(this.buffers == null) {
				if(buf == this.buffer) {
					throw haxe_Exception.thrown("Duplicate addBuffer()");
				}
				this.buffers = [this.buffer];
			} else if(this.buffers.indexOf(buf) >= 0) {
				throw haxe_Exception.thrown("Duplicate addBuffer()");
			}
			this.buffers.unshift(buf);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.buffers;
			while(_g1 < _g2.length) {
				var b = _g2[_g1];
				++_g1;
				_g.push(b.format);
			}
			this.formats = hxd_MultiFormat.make(_g);
		}
	}
	,dispose: function() {
		h3d_prim_Primitive.prototype.dispose.call(this);
		if(this.buffers != null) {
			var _g = 0;
			var _g1 = this.buffers;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				b.dispose();
			}
			this.buffers = null;
			this.formats = null;
		}
	}
	,render: function(engine) {
		if(this.indexes == null || this.indexes.vbuf == null || this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		if(this.buffers != null) {
			engine.renderMultiBuffers(this.formats,this.buffers,this.indexes);
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,__class__: h3d_prim_MeshPrimitive
});
var h3d_prim_Polygon = function(points,idx) {
	this.translatedZ = 0.;
	this.translatedY = 0.;
	this.translatedX = 0.;
	this.scaled = 1.;
	h3d_prim_MeshPrimitive.call(this);
	this.points = points;
	this.idx = idx;
};
$hxClasses["h3d.prim.Polygon"] = h3d_prim_Polygon;
h3d_prim_Polygon.__name__ = "h3d.prim.Polygon";
h3d_prim_Polygon.__super__ = h3d_prim_MeshPrimitive;
h3d_prim_Polygon.prototype = $extend(h3d_prim_MeshPrimitive.prototype,{
	getBounds: function() {
		var b = new h3d_col_Bounds();
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p.x < b.xMin) {
				b.xMin = p.x;
			}
			if(p.x > b.xMax) {
				b.xMax = p.x;
			}
			if(p.y < b.yMin) {
				b.yMin = p.y;
			}
			if(p.y > b.yMax) {
				b.yMax = p.y;
			}
			if(p.z < b.zMin) {
				b.zMin = p.z;
			}
			if(p.z > b.zMax) {
				b.zMax = p.z;
			}
		}
		return b;
	}
	,alloc: function(engine) {
		this.dispose();
		var format = hxd_BufferFormat.get_POS3D();
		if(this.normals != null) {
			format = format.append("normal",3);
		}
		if(this.tangents != null) {
			format = format.append("tangent",3);
		}
		if(this.uvs != null) {
			format = format.append("uv",2);
		}
		if(this.colors != null) {
			format = format.append("color",3);
		}
		var buf = hxd__$FloatBuffer_Float32Expand._new(0);
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var k = _g++;
			var p = this.points[k];
			var v = p.x;
			if(buf.pos == buf.array.length) {
				var newSize = buf.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(buf.array);
				buf.array = newArray;
			}
			buf.array[buf.pos++] = v;
			var v1 = p.y;
			if(buf.pos == buf.array.length) {
				var newSize1 = buf.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(buf.array);
				buf.array = newArray1;
			}
			buf.array[buf.pos++] = v1;
			var v2 = p.z;
			if(buf.pos == buf.array.length) {
				var newSize2 = buf.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(buf.array);
				buf.array = newArray2;
			}
			buf.array[buf.pos++] = v2;
			if(this.normals != null) {
				var n = this.normals[k];
				var v3 = n.x;
				if(buf.pos == buf.array.length) {
					var newSize3 = buf.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(buf.array);
					buf.array = newArray3;
				}
				buf.array[buf.pos++] = v3;
				var v4 = n.y;
				if(buf.pos == buf.array.length) {
					var newSize4 = buf.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(buf.array);
					buf.array = newArray4;
				}
				buf.array[buf.pos++] = v4;
				var v5 = n.z;
				if(buf.pos == buf.array.length) {
					var newSize5 = buf.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(buf.array);
					buf.array = newArray5;
				}
				buf.array[buf.pos++] = v5;
			}
			if(this.tangents != null) {
				var t = this.tangents[k];
				var v6 = t.x;
				if(buf.pos == buf.array.length) {
					var newSize6 = buf.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(buf.array);
					buf.array = newArray6;
				}
				buf.array[buf.pos++] = v6;
				var v7 = t.y;
				if(buf.pos == buf.array.length) {
					var newSize7 = buf.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(buf.array);
					buf.array = newArray7;
				}
				buf.array[buf.pos++] = v7;
				var v8 = t.z;
				if(buf.pos == buf.array.length) {
					var newSize8 = buf.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(buf.array);
					buf.array = newArray8;
				}
				buf.array[buf.pos++] = v8;
			}
			if(this.uvs != null) {
				var t1 = this.uvs[k];
				var v9 = t1.u;
				if(buf.pos == buf.array.length) {
					var newSize9 = buf.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(buf.array);
					buf.array = newArray9;
				}
				buf.array[buf.pos++] = v9;
				var v10 = t1.v;
				if(buf.pos == buf.array.length) {
					var newSize10 = buf.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(buf.array);
					buf.array = newArray10;
				}
				buf.array[buf.pos++] = v10;
			}
			if(this.colors != null) {
				var c = this.colors[k];
				var v11 = c.x;
				if(buf.pos == buf.array.length) {
					var newSize11 = buf.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(buf.array);
					buf.array = newArray11;
				}
				buf.array[buf.pos++] = v11;
				var v12 = c.y;
				if(buf.pos == buf.array.length) {
					var newSize12 = buf.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(buf.array);
					buf.array = newArray12;
				}
				buf.array[buf.pos++] = v12;
				var v13 = c.z;
				if(buf.pos == buf.array.length) {
					var newSize13 = buf.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(buf.array);
					buf.array = newArray13;
				}
				buf.array[buf.pos++] = v13;
			}
		}
		this.buffer = h3d_Buffer.ofFloats(buf,format);
		if(this.idx != null) {
			this.indexes = h3d_Indexes.alloc(this.idx);
		}
	}
	,unindex: function() {
		if(this.idx != null && this.points.length != this.idx.length) {
			var p = [];
			var _g = 0;
			var _g1 = this.idx.length;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.points[this.idx[i]];
				var x = _this.x;
				var y = _this.y;
				var z = _this.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				p.push(new h3d_VectorImpl(x,y,z));
			}
			if(this.normals != null) {
				var n = [];
				var _g = 0;
				var _g1 = this.idx.length;
				while(_g < _g1) {
					var i = _g++;
					var _this = this.normals[this.idx[i]];
					var x = _this.x;
					var y = _this.y;
					var z = _this.z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					n.push(new h3d_VectorImpl(x,y,z));
				}
				this.normals = n;
			}
			if(this.tangents != null) {
				var t = [];
				var _g = 0;
				var _g1 = this.idx.length;
				while(_g < _g1) {
					var i = _g++;
					var _this = this.tangents[this.idx[i]];
					var x = _this.x;
					var y = _this.y;
					var z = _this.z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					t.push(new h3d_VectorImpl(x,y,z));
				}
				this.tangents = t;
			}
			if(this.colors != null) {
				var n = [];
				var _g = 0;
				var _g1 = this.idx.length;
				while(_g < _g1) {
					var i = _g++;
					var _this = this.colors[this.idx[i]];
					var x = _this.x;
					var y = _this.y;
					var z = _this.z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					n.push(new h3d_VectorImpl(x,y,z));
				}
				this.colors = n;
			}
			if(this.uvs != null) {
				var t = [];
				var _g = 0;
				var _g1 = this.idx.length;
				while(_g < _g1) {
					var i = _g++;
					t.push(this.uvs[this.idx[i]].clone());
				}
				this.uvs = t;
			}
			this.points = p;
			this.idx = null;
		}
	}
	,translate: function(dx,dy,dz) {
		this.translatedX += dx;
		this.translatedY += dy;
		this.translatedZ += dz;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.x += dx;
			p.y += dy;
			p.z += dz;
		}
	}
	,scale: function(s) {
		this.scaled *= s;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.x *= s;
			p.y *= s;
			p.z *= s;
		}
	}
	,addNormals: function() {
		this.normals = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			this.normals[i] = new h3d_VectorImpl(0.,0.,0.);
		}
		var pos = 0;
		var _g = 0;
		var _g1 = this.triCount();
		while(_g < _g1) {
			var i = _g++;
			var i0;
			var i1;
			var i2;
			if(this.idx == null) {
				++pos;
				i0 = pos - 1;
				++pos;
				i1 = pos - 1;
				++pos;
				i2 = pos - 1;
			} else {
				i0 = this.idx[pos++];
				i1 = this.idx[pos++];
				i2 = this.idx[pos++];
			}
			var p0 = this.points[i0];
			var p1 = this.points[i1];
			var p2 = this.points[i2];
			var x = p1.x - p0.x;
			var y = p1.y - p0.y;
			var z = p1.z - p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			var x2 = p2.x - p0.x;
			var y2 = p2.y - p0.y;
			var z2 = p2.z - p0.z;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var x3 = x2;
			var y3 = y2;
			var z3 = z2;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var v_x = x3;
			var v_y = y3;
			var v_z = z3;
			var x4 = _this_y * v_z - _this_z * v_y;
			var y4 = _this_z * v_x - _this_x * v_z;
			var z4 = _this_x * v_y - _this_y * v_x;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var x5 = x4;
			var y5 = y4;
			var z5 = z4;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var n_x = x5;
			var n_y = y5;
			var n_z = z5;
			this.normals[i0].x += n_x;
			this.normals[i0].y += n_y;
			this.normals[i0].z += n_z;
			this.normals[i1].x += n_x;
			this.normals[i1].y += n_y;
			this.normals[i1].z += n_z;
			this.normals[i2].x += n_x;
			this.normals[i2].y += n_y;
			this.normals[i2].z += n_z;
		}
		var _g = 0;
		var _g1 = this.normals;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			var k = n.x * n.x + n.y * n.y + n.z * n.z;
			if(k < 1e-20) {
				k = 0;
			} else {
				k = 1. / Math.sqrt(k);
			}
			n.x *= k;
			n.y *= k;
			n.z *= k;
		}
	}
	,addTangents: function() {
		if(this.normals == null) {
			this.addNormals();
		}
		if(this.uvs == null) {
			this.addUVs();
		}
		this.tangents = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			this.tangents[i] = new h3d_VectorImpl(0.,0.,0.);
		}
		var pos = 0;
		var _g = 0;
		var _g1 = this.triCount();
		while(_g < _g1) {
			var i = _g++;
			var i0;
			var i1;
			var i2;
			if(this.idx == null) {
				++pos;
				i0 = pos - 1;
				++pos;
				i1 = pos - 1;
				++pos;
				i2 = pos - 1;
			} else {
				i0 = this.idx[pos++];
				i1 = this.idx[pos++];
				i2 = this.idx[pos++];
			}
			var p0 = this.points[i0];
			var p1 = this.points[i1];
			var p2 = this.points[i2];
			var uv0 = this.uvs[i0];
			var uv1 = this.uvs[i1];
			var uv2 = this.uvs[i2];
			var n = this.normals[i0];
			var x = p1.x - p0.x;
			var y = p1.y - p0.y;
			var z = p1.z - p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var k0_x = x1;
			var k0_y = y1;
			var k0_z = z1;
			var x2 = p2.x - p0.x;
			var y2 = p2.y - p0.y;
			var z2 = p2.z - p0.z;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var x3 = x2;
			var y3 = y2;
			var z3 = z2;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var k1_x = x3;
			var k1_y = y3;
			var k1_z = z3;
			var v = uv2.v - uv0.v;
			k0_x *= v;
			k0_y *= v;
			k0_z *= v;
			var v1 = uv1.v - uv0.v;
			k1_x *= v1;
			k1_y *= v1;
			k1_z *= v1;
			var x4 = k0_x - k1_x;
			var y4 = k0_y - k1_y;
			var z4 = k0_z - k1_z;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var t = new h3d_VectorImpl(x4,y4,z4);
			var x5 = n.y * t.z - n.z * t.y;
			var y5 = n.z * t.x - n.x * t.z;
			var z5 = n.x * t.y - n.y * t.x;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var x6 = x5;
			var y6 = y5;
			var z6 = z5;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var b_x = x6;
			var b_y = y6;
			var b_z = z6;
			var k = b_x * b_x + b_y * b_y + b_z * b_z;
			if(k < 1e-20) {
				k = 0;
			} else {
				k = 1. / Math.sqrt(k);
			}
			b_x *= k;
			b_y *= k;
			b_z *= k;
			var x7 = b_y * n.z - b_z * n.y;
			var y7 = b_z * n.x - b_x * n.z;
			var z7 = b_x * n.y - b_y * n.x;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			t = new h3d_VectorImpl(x7,y7,z7);
			var k1 = t.x * t.x + t.y * t.y + t.z * t.z;
			if(k1 < 1e-20) {
				k1 = 0;
			} else {
				k1 = 1. / Math.sqrt(k1);
			}
			t.x *= k1;
			t.y *= k1;
			t.z *= k1;
			this.tangents[i0].x += t.x;
			this.tangents[i0].y += t.y;
			this.tangents[i0].z += t.z;
			this.tangents[i1].x += t.x;
			this.tangents[i1].y += t.y;
			this.tangents[i1].z += t.z;
			this.tangents[i2].x += t.x;
			this.tangents[i2].y += t.y;
			this.tangents[i2].z += t.z;
		}
		var _g = 0;
		var _g1 = this.tangents;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			var k = t.x * t.x + t.y * t.y + t.z * t.z;
			if(k < 1e-20) {
				k = 0;
			} else {
				k = 1. / Math.sqrt(k);
			}
			t.x *= k;
			t.y *= k;
			t.z *= k;
		}
	}
	,addUVs: function() {
		this.uvs = [];
		var _g = 0;
		var _g1 = this.points.length;
		while(_g < _g1) {
			var i = _g++;
			this.uvs[i] = new h3d_prim_UV(this.points[i].x,this.points[i].y);
		}
	}
	,uvScale: function(su,sv) {
		if(this.uvs == null) {
			throw haxe_Exception.thrown("Missing UVs");
		}
		var m = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = this.uvs;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(m.h.__keys__[t.__id__] != null) {
				continue;
			}
			m.set(t,true);
			t.u *= su;
			t.v *= sv;
		}
	}
	,triCount: function() {
		var n = h3d_prim_MeshPrimitive.prototype.triCount.call(this);
		if(n != 0) {
			return n;
		}
		return (this.idx == null ? this.points.length : this.idx.length) / 3 | 0;
	}
	,vertexCount: function() {
		return this.points.length;
	}
	,getCollider: function() {
		var vertexes = new Array(this.points.length * 3);
		var indexes = new Array(this.idx.length);
		var vid = 0;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			vertexes[vid++] = p.x;
			vertexes[vid++] = p.y;
			vertexes[vid++] = p.z;
		}
		var _g = 0;
		var _g1 = this.idx.length;
		while(_g < _g1) {
			var i = _g++;
			indexes[i] = this.idx[i];
		}
		var poly = new h3d_col_Polygon();
		poly.addBuffers(vertexes,indexes);
		return poly;
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		var indexes = this.indexes;
		var count = this.triCount();
		if(indexes == null) {
			indexes = engine.mem.getTriIndexes(count * 3);
		}
		if(this.buffers != null) {
			engine.renderMultiBuffers(this.formats,this.buffers,indexes,0,count);
		} else {
			engine.renderIndexed(this.buffer,indexes,0,count);
		}
	}
	,__class__: h3d_prim_Polygon
});
var h3d_prim_Cube = function(x,y,z,centered) {
	if(centered == null) {
		centered = false;
	}
	if(z == null) {
		z = 1.;
	}
	if(y == null) {
		y = 1.;
	}
	if(x == null) {
		x = 1.;
	}
	this.sizeX = x;
	this.sizeY = y;
	this.sizeZ = z;
	var x1 = 0;
	var y1 = 0;
	var z1 = 0;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var this1 = new h3d_VectorImpl(x1,y1,z1);
	var x1 = x;
	var y1 = 0;
	var z1 = 0;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var this2 = new h3d_VectorImpl(x1,y1,z1);
	var x1 = 0;
	var y1 = y;
	var z1 = 0;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var this3 = new h3d_VectorImpl(x1,y1,z1);
	var x1 = 0;
	var y1 = 0;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var this4 = new h3d_VectorImpl(x1,y1,z1);
	var x1 = x;
	var y1 = y;
	var z1 = 0;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var this5 = new h3d_VectorImpl(x1,y1,z1);
	var x1 = x;
	var y1 = 0;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var this6 = new h3d_VectorImpl(x1,y1,z1);
	var x1 = 0;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var this7 = new h3d_VectorImpl(x1,y1,z1);
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var p = [this1,this2,this3,this4,this5,this6,this7,new h3d_VectorImpl(x1,y1,z1)];
	var idx = new Array(0);
	idx.push(0);
	idx.push(1);
	idx.push(5);
	idx.push(0);
	idx.push(5);
	idx.push(3);
	idx.push(1);
	idx.push(4);
	idx.push(7);
	idx.push(1);
	idx.push(7);
	idx.push(5);
	idx.push(3);
	idx.push(5);
	idx.push(7);
	idx.push(3);
	idx.push(7);
	idx.push(6);
	idx.push(0);
	idx.push(6);
	idx.push(2);
	idx.push(0);
	idx.push(3);
	idx.push(6);
	idx.push(2);
	idx.push(7);
	idx.push(4);
	idx.push(2);
	idx.push(6);
	idx.push(7);
	idx.push(0);
	idx.push(4);
	idx.push(1);
	idx.push(0);
	idx.push(2);
	idx.push(4);
	h3d_prim_Polygon.call(this,p,idx);
	if(centered) {
		this.translate(-x * 0.5,-y * 0.5,-z * 0.5);
	}
};
$hxClasses["h3d.prim.Cube"] = h3d_prim_Cube;
h3d_prim_Cube.__name__ = "h3d.prim.Cube";
h3d_prim_Cube.defaultUnitCube = function() {
	var engine = h3d_Engine.CURRENT;
	var c = engine.resCache.h[h3d_prim_Cube.__id__];
	if(c != null) {
		return c;
	}
	c = new h3d_prim_Cube(1,1,1);
	c.translate(-0.5,-0.5,-0.5);
	c.unindex();
	c.addNormals();
	c.addUniformUVs(1.0);
	c.addTangents();
	engine.resCache.set(h3d_prim_Cube,c);
	return c;
};
h3d_prim_Cube.__super__ = h3d_prim_Polygon;
h3d_prim_Cube.prototype = $extend(h3d_prim_Polygon.prototype,{
	addUVs: function() {
		this.unindex();
		var z = new h3d_prim_UV(0,1);
		var x = new h3d_prim_UV(1,1);
		var y = new h3d_prim_UV(0,0);
		var o = new h3d_prim_UV(1,0);
		this.uvs = [x,z,y,x,y,o,x,z,y,x,y,o,x,z,y,x,y,o,z,o,x,z,y,o,z,o,x,z,y,o,z,o,x,z,y,o];
	}
	,addUniformUVs: function(scale) {
		if(scale == null) {
			scale = 1.;
		}
		this.unindex();
		var v = scale;
		this.uvs = [new h3d_prim_UV(v * this.sizeX,v * this.sizeZ),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,0),new h3d_prim_UV(v * this.sizeY,v * this.sizeZ),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeY,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeY,0),new h3d_prim_UV(v * this.sizeX,v * this.sizeY),new h3d_prim_UV(0,v * this.sizeY),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,v * this.sizeY),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,0),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(v * this.sizeY,0),new h3d_prim_UV(v * this.sizeY,v * this.sizeZ),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeY,0),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(v * this.sizeX,0),new h3d_prim_UV(v * this.sizeX,v * this.sizeZ),new h3d_prim_UV(0,v * this.sizeZ),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,0),new h3d_prim_UV(0,v * this.sizeY),new h3d_prim_UV(v * this.sizeX,0),new h3d_prim_UV(v * this.sizeX,v * this.sizeY),new h3d_prim_UV(0,v * this.sizeY),new h3d_prim_UV(0,0),new h3d_prim_UV(v * this.sizeX,0)];
	}
	,getCollider: function() {
		var x = this.translatedX;
		var y = this.translatedY;
		var z = this.translatedZ;
		var dx = this.sizeX * this.scaled;
		var dy = this.sizeY * this.scaled;
		var dz = this.sizeZ * this.scaled;
		var b = new h3d_col_Bounds();
		b.xMin = x;
		b.yMin = y;
		b.zMin = z;
		b.xMax = x + dx;
		b.yMax = y + dy;
		b.zMax = z + dz;
		return b;
	}
	,__class__: h3d_prim_Cube
});
var h3d_prim_HMDModel = function(data,dataPos,lib) {
	h3d_prim_MeshPrimitive.call(this);
	this.data = data;
	this.dataPosition = dataPos;
	this.lib = lib;
};
$hxClasses["h3d.prim.HMDModel"] = h3d_prim_HMDModel;
h3d_prim_HMDModel.__name__ = "h3d.prim.HMDModel";
h3d_prim_HMDModel.__super__ = h3d_prim_MeshPrimitive;
h3d_prim_HMDModel.prototype = $extend(h3d_prim_MeshPrimitive.prototype,{
	hasInput: function(name) {
		if(!h3d_prim_MeshPrimitive.prototype.hasInput.call(this,name)) {
			return this.data.vertexFormat.hasInput(name);
		} else {
			return true;
		}
	}
	,triCount: function() {
		return this.data.get_indexCount() / 3 | 0;
	}
	,vertexCount: function() {
		return this.data.vertexCount;
	}
	,getBounds: function() {
		return this.data.bounds;
	}
	,selectMaterial: function(i) {
		this.curMaterial = i;
	}
	,getMaterialIndexes: function(material) {
		return { start : this.indexesTriPos[material] * 3, count : this.data.indexCounts[material]};
	}
	,getDataBuffers: function(fmt,defaults,material) {
		return this.lib.getBuffers(this.data,fmt,defaults,material);
	}
	,loadSkin: function(skin) {
		this.lib.loadSkin(this.data,skin);
	}
	,alloc: function(engine) {
		this.dispose();
		this.buffer = new h3d_Buffer(this.data.vertexCount,this.data.vertexFormat);
		var entry = this.lib.resource.entry;
		var size = this.data.vertexCount * this.data.vertexFormat.strideBytes;
		var bytes = entry.fetchBytes(this.dataPosition + this.data.vertexPosition,size);
		this.buffer.uploadBytes(bytes,0,this.data.vertexCount);
		this.indexCount = 0;
		this.indexesTriPos = [];
		var _g = 0;
		var _g1 = this.data.indexCounts;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			this.indexesTriPos.push(this.indexCount / 3 | 0);
			this.indexCount += n;
		}
		var is32 = this.data.vertexCount > 65536;
		this.indexes = h3d_Indexes._new(this.indexCount,is32);
		var size = (is32 ? 4 : 2) * this.indexCount;
		var bytes = entry.fetchBytes(this.dataPosition + this.data.indexPosition,size);
		this.indexes.uploadBytes(bytes,0,this.indexCount);
		if(this.normalsRecomputed != null) {
			var name = this.normalsRecomputed;
			this.normalsRecomputed = null;
			this.recomputeNormals(name);
		}
	}
	,recomputeNormals: function(name) {
		if(this.normalsRecomputed != null) {
			return;
		}
		if(name != null && this.data.vertexFormat.hasInput(name)) {
			return;
		}
		if(name == null) {
			name = "normal";
		}
		var pos = this.lib.getBuffers(this.data,hxd_BufferFormat.get_POS3D());
		var ids = [];
		var pts = [];
		var mpts_h = { };
		var _g = 0;
		var _g1 = this.data.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var added = false;
			var px = pos.vertexes[i * 3];
			var py = pos.vertexes[i * 3 + 1];
			var pz = pos.vertexes[i * 3 + 2];
			var pid = (px + py + pz) * 10.01 | 0;
			var arr = mpts_h[pid];
			if(arr == null) {
				arr = [];
				mpts_h[pid] = arr;
			} else {
				var _g2 = 0;
				while(_g2 < arr.length) {
					var idx = arr[_g2];
					++_g2;
					var p = pts[idx];
					if(p.x == px && p.y == py && p.z == pz) {
						ids.push(idx);
						added = true;
						break;
					}
				}
			}
			if(!added) {
				ids.push(pts.length);
				arr.push(pts.length);
				var x = px;
				var y = py;
				var z = pz;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				pts.push(new h3d_VectorImpl(x,y,z));
			}
		}
		var idx = new Array(0);
		var _g = 0;
		var _g1 = pos.indexes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			idx.push(ids[i]);
		}
		var pol = new h3d_prim_Polygon(pts,idx);
		pol.addNormals();
		var v = hxd__$FloatBuffer_Float32Expand._new(0);
		var _g = v.pos;
		var _g1 = this.data.vertexCount * 3;
		while(_g < _g1) {
			var i = _g++;
			if(v.pos == v.array.length) {
				var newSize = v.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(v.array);
				v.array = newArray;
			}
			v.array[v.pos++] = 0.;
		}
		var k = 0;
		var _g = 0;
		var _g1 = this.data.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var n = pol.normals[ids[i]];
			v.array[k++] = n.x;
			v.array[k++] = n.y;
			v.array[k++] = n.z;
		}
		var buf = h3d_Buffer.ofFloats(v,hxd_BufferFormat.make([new hxd_BufferInput(name,3,0)]));
		this.addBuffer(buf);
		this.normalsRecomputed = name;
	}
	,addTangents: function() {
		if(this.hasInput("tangent")) {
			return;
		}
		var pos = this.lib.getBuffers(this.data,hxd_BufferFormat.get_POS3D());
		var ids = [];
		var pts = [];
		var _g = 0;
		var _g1 = this.data.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var added = false;
			var px = pos.vertexes[i * 3];
			var py = pos.vertexes[i * 3 + 1];
			var pz = pos.vertexes[i * 3 + 2];
			var _g2 = 0;
			var _g3 = pts.length;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var p = pts[i1];
				if(p.x == px && p.y == py && p.z == pz) {
					ids.push(i1);
					added = true;
					break;
				}
			}
			if(!added) {
				ids.push(pts.length);
				var x = px;
				var y = py;
				var z = pz;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				pts.push(new h3d_VectorImpl(x,y,z));
			}
		}
		var idx = new Array(0);
		var _g = 0;
		var _g1 = pos.indexes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			idx.push(ids[i]);
		}
		var pol = new h3d_prim_Polygon(pts,idx);
		pol.addNormals();
		pol.addTangents();
		var v = hxd__$FloatBuffer_Float32Expand._new(0);
		var _g = v.pos;
		var _g1 = this.data.vertexCount * 3;
		while(_g < _g1) {
			var i = _g++;
			if(v.pos == v.array.length) {
				var newSize = v.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(v.array);
				v.array = newArray;
			}
			v.array[v.pos++] = 0.;
		}
		var k = 0;
		var _g = 0;
		var _g1 = this.data.vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var t = pol.tangents[ids[i]];
			v.array[k++] = t.x;
			v.array[k++] = t.y;
			v.array[k++] = t.z;
		}
		var buf = h3d_Buffer.ofFloats(v,hxd_BufferFormat.make([new hxd_BufferInput("tangent",3,0)]));
		this.addBuffer(buf);
	}
	,render: function(engine) {
		if(this.curMaterial < 0) {
			h3d_prim_MeshPrimitive.prototype.render.call(this,engine);
			return;
		}
		if(this.indexes == null || this.indexes.vbuf == null) {
			this.alloc(engine);
		}
		if(this.buffers == null) {
			engine.renderIndexed(this.buffer,this.indexes,this.indexesTriPos[this.curMaterial],this.data.indexCounts[this.curMaterial] / 3 | 0);
		} else {
			engine.renderMultiBuffers(this.formats,this.buffers,this.indexes,this.indexesTriPos[this.curMaterial],this.data.indexCounts[this.curMaterial] / 3 | 0);
		}
		this.curMaterial = -1;
	}
	,initCollider: function(poly) {
		var buf = this.lib.getBuffers(this.data,hxd_BufferFormat.get_POS3D());
		poly.setData(buf.vertexes,buf.indexes);
		if(this.collider == null) {
			var _this = this.data.bounds;
			var dx = _this.xMax - _this.xMin;
			var dy = _this.yMax - _this.yMin;
			var dz = _this.zMax - _this.zMin;
			var sphere = new h3d_col_Sphere((_this.xMin + _this.xMax) * 0.5,(_this.yMin + _this.yMax) * 0.5,(_this.zMin + _this.zMax) * 0.5,Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5);
			this.collider = new h3d_col_OptimizedCollider(sphere,poly);
		}
	}
	,getCollider: function() {
		if(this.collider != null) {
			return this.collider;
		}
		var poly = new h3d_col_PolygonBuffer();
		poly.source = { entry : this.lib.resource.entry, geometryName : null};
		var _g = 0;
		var _g1 = this.lib.header.models;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			if(this.lib.header.geometries[h.geometry] == this.data) {
				poly.source.geometryName = h.name;
				break;
			}
		}
		this.initCollider(poly);
		return this.collider;
	}
	,__class__: h3d_prim_HMDModel
});
var h3d_prim_Instanced = function() {
	h3d_prim_Primitive.call(this);
	this.bounds = new h3d_col_Bounds();
	var _this = this.bounds;
	if(0 < _this.xMin) {
		_this.xMin = 0;
	}
	if(0 > _this.xMax) {
		_this.xMax = 0;
	}
	if(0 < _this.yMin) {
		_this.yMin = 0;
	}
	if(0 > _this.yMax) {
		_this.yMax = 0;
	}
	if(0 < _this.zMin) {
		_this.zMin = 0;
	}
	if(0 > _this.zMax) {
		_this.zMax = 0;
	}
	this.tmpBounds = new h3d_col_Bounds();
};
$hxClasses["h3d.prim.Instanced"] = h3d_prim_Instanced;
h3d_prim_Instanced.__name__ = "h3d.prim.Instanced";
h3d_prim_Instanced.__super__ = h3d_prim_Primitive;
h3d_prim_Instanced.prototype = $extend(h3d_prim_Primitive.prototype,{
	setMesh: function(m) {
		if(this.refCount > 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			m.incref();
		}
		this.primitive = m;
		this.baseBounds = m.getBounds();
		if(m.buffer == null || m.indexes == null) {
			m.alloc(h3d_Engine.CURRENT);
		}
	}
	,initBounds: function() {
		var _this = this.bounds;
		_this.xMin = 1e20;
		_this.xMax = -1e20;
		_this.yMin = 1e20;
		_this.yMax = -1e20;
		_this.zMin = 1e20;
		_this.zMax = -1e20;
	}
	,addInstanceBounds: function(absPos) {
		this.tmpBounds.load(this.baseBounds);
		this.tmpBounds.transform(absPos);
		var _this = this.bounds;
		var b = this.tmpBounds;
		if(b.xMin < _this.xMin) {
			_this.xMin = b.xMin;
		}
		if(b.xMax > _this.xMax) {
			_this.xMax = b.xMax;
		}
		if(b.yMin < _this.yMin) {
			_this.yMin = b.yMin;
		}
		if(b.yMax > _this.yMax) {
			_this.yMax = b.yMax;
		}
		if(b.zMin < _this.zMin) {
			_this.zMin = b.zMin;
		}
		if(b.zMax > _this.zMax) {
			_this.zMax = b.zMax;
		}
	}
	,dispose: function() {
	}
	,incref: function() {
		if(this.refCount == 0 && this.primitive != null) {
			this.primitive.incref();
		}
		h3d_prim_Primitive.prototype.incref.call(this);
	}
	,decref: function() {
		h3d_prim_Primitive.prototype.decref.call(this);
		if(this.refCount == 0 && this.primitive != null) {
			this.primitive.decref();
		}
	}
	,getBounds: function() {
		return this.bounds;
	}
	,render: function(engine) {
		if(this.primitive.indexes == null || this.primitive.buffer.vbuf == null) {
			this.primitive.alloc(engine);
		}
		if(engine.needFlushTarget) {
			engine.doFlushTarget();
		}
		if(this.primitive.buffers == null) {
			engine.driver.selectBuffer(this.primitive.buffer);
		} else {
			engine.driver.selectMultiBuffers(this.primitive.formats,this.primitive.buffers);
		}
		var indexes = this.primitive.indexes;
		if(indexes == null) {
			indexes = engine.mem.getTriIndexes(this.triCount() * 3);
		}
		engine.renderInstanced(indexes,this.commands);
	}
	,__class__: h3d_prim_Instanced
});
var h3d_prim_Plane2D = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.Plane2D"] = h3d_prim_Plane2D;
h3d_prim_Plane2D.__name__ = "h3d.prim.Plane2D";
h3d_prim_Plane2D.get = function() {
	var engine = h3d_Engine.CURRENT;
	var inst = engine.resCache.h[h3d_prim_Plane2D.__id__];
	if(inst == null) {
		inst = new h3d_prim_Plane2D();
		engine.resCache.set(h3d_prim_Plane2D,inst);
	}
	return inst;
};
h3d_prim_Plane2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plane2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	triCount: function() {
		return 2;
	}
	,vertexCount: function() {
		return 4;
	}
	,alloc: function(engine) {
		var v = hxd__$FloatBuffer_Float32Expand._new(0);
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,hxd_BufferFormat.get_XY_UV());
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		var b = this.buffer;
		engine.renderBuffer(b,engine.mem.getQuadIndexes(b.vertices),2,0,-1);
	}
	,__class__: h3d_prim_Plane2D
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	h3d_prim_Primitive.call(this);
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
$hxClasses["h3d.prim.RawPrimitive"] = h3d_prim_RawPrimitive;
h3d_prim_RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		if(this.onContextLost == null) {
			throw haxe_Exception.thrown("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.format);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw haxe_Exception.thrown("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,triCount: function() {
		return this.tcount;
	}
	,vertexCount: function() {
		return this.vcount;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_prim_Sphere = function(ray,segsW,segsH,portion) {
	if(portion == null) {
		portion = 1.;
	}
	if(segsH == null) {
		segsH = 6;
	}
	if(segsW == null) {
		segsW = 8;
	}
	if(ray == null) {
		ray = 1.;
	}
	this.ray = ray;
	this.segsH = segsH;
	this.segsW = segsW;
	this.portion = portion;
	var dp = Math.PI * 2 / segsW;
	var pts = [];
	var idx = new Array(0);
	var _g = 0;
	var _g1 = segsH + 1;
	while(_g < _g1) {
		var y = _g++;
		var t = y / segsH * Math.PI * portion;
		var st = Math.sin(t);
		var pz = Math.cos(t);
		var p = 0.;
		var _g2 = 0;
		var _g3 = segsW + 1;
		while(_g2 < _g3) {
			var x = _g2++;
			var px = st * Math.cos(p);
			var py = st * Math.sin(p);
			var x1 = px * ray;
			var y1 = py * ray;
			var z = pz * ray;
			if(z == null) {
				z = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			pts.push(new h3d_VectorImpl(x1,y1,z));
			p += dp;
		}
	}
	var _g = 0;
	var _g1 = segsH;
	while(_g < _g1) {
		var y = _g++;
		var _g2 = 0;
		var _g3 = segsW;
		while(_g2 < _g3) {
			var x = _g2++;
			var v1 = x + 1 + y * (segsW + 1);
			var v2 = x + y * (segsW + 1);
			var v3 = x + (y + 1) * (segsW + 1);
			var v4 = x + 1 + (y + 1) * (segsW + 1);
			if(y != 0) {
				idx.push(v1);
				idx.push(v2);
				idx.push(v4);
			}
			if(y != segsH - 1 || portion != 1.) {
				idx.push(v2);
				idx.push(v3);
				idx.push(v4);
			}
		}
	}
	h3d_prim_Polygon.call(this,pts,idx);
};
$hxClasses["h3d.prim.Sphere"] = h3d_prim_Sphere;
h3d_prim_Sphere.__name__ = "h3d.prim.Sphere";
h3d_prim_Sphere.defaultUnitSphere = function() {
	var engine = h3d_Engine.CURRENT;
	var s = engine.resCache.h[h3d_prim_Sphere.__id__];
	if(s != null) {
		return s;
	}
	s = new h3d_prim_Sphere(1,16,16);
	s.addNormals();
	s.addUVs();
	engine.resCache.set(h3d_prim_Sphere,s);
	return s;
};
h3d_prim_Sphere.__super__ = h3d_prim_Polygon;
h3d_prim_Sphere.prototype = $extend(h3d_prim_Polygon.prototype,{
	getCollider: function() {
		return new h3d_col_Sphere(this.translatedX,this.translatedY,this.translatedZ,this.ray * this.scaled);
	}
	,addNormals: function() {
		this.normals = this.points;
	}
	,addUVs: function() {
		this.uvs = [];
		var _g = 0;
		var _g1 = this.segsH + 1;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.segsW + 1;
			while(_g2 < _g3) {
				var x = _g2++;
				this.uvs.push(new h3d_prim_UV(1 - x / this.segsW,y / this.segsH));
			}
		}
	}
	,__class__: h3d_prim_Sphere
});
var h3d_prim_UV = function(u,v) {
	this.u = u;
	this.v = v;
};
$hxClasses["h3d.prim.UV"] = h3d_prim_UV;
h3d_prim_UV.__name__ = "h3d.prim.UV";
h3d_prim_UV.prototype = {
	clone: function() {
		return new h3d_prim_UV(this.u,this.v);
	}
	,toString: function() {
		return "{" + hxd_Math.fmt(this.u) + "," + hxd_Math.fmt(this.v) + "}";
	}
	,__class__: h3d_prim_UV
};
var h3d_scene_Mesh = function(primitive,material,parent) {
	h3d_scene_Object.call(this,parent);
	this.set_primitive(primitive);
	if(material == null) {
		material = h3d_mat_MaterialSetup.current.createMaterial();
		material.set_props(material.getDefaultProps());
	}
	this.material = material;
};
$hxClasses["h3d.scene.Mesh"] = h3d_scene_Mesh;
h3d_scene_Mesh.__name__ = "h3d.scene.Mesh";
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	getMeshMaterials: function() {
		return [this.material];
	}
	,addBoundsRec: function(b,relativeTo) {
		h3d_scene_Object.prototype.addBoundsRec.call(this,b,relativeTo);
		if(this.primitive == null || (this.flags & 512) != 0) {
			return;
		}
		var bounds = this.primitive.getBounds();
		if(relativeTo == null) {
			var m = this.absPos;
			var b1 = new h3d_col_Bounds();
			b1.xMin = bounds.xMin;
			b1.xMax = bounds.xMax;
			b1.yMin = bounds.yMin;
			b1.yMax = bounds.yMax;
			b1.zMin = bounds.zMin;
			b1.zMax = bounds.zMax;
			var tmp = b1;
			tmp.transform(m);
			if(tmp.xMin < b.xMin) {
				b.xMin = tmp.xMin;
			}
			if(tmp.xMax > b.xMax) {
				b.xMax = tmp.xMax;
			}
			if(tmp.yMin < b.yMin) {
				b.yMin = tmp.yMin;
			}
			if(tmp.yMax > b.yMax) {
				b.yMax = tmp.yMax;
			}
			if(tmp.zMin < b.zMin) {
				b.zMin = tmp.zMin;
			}
			if(tmp.zMax > b.zMax) {
				b.zMax = tmp.zMax;
			}
		} else {
			h3d_scene_Mesh.tmpMat.multiply(this.absPos,relativeTo);
			var m = h3d_scene_Mesh.tmpMat;
			var b1 = new h3d_col_Bounds();
			b1.xMin = bounds.xMin;
			b1.xMax = bounds.xMax;
			b1.yMin = bounds.yMin;
			b1.yMax = bounds.yMax;
			b1.zMin = bounds.zMin;
			b1.zMax = bounds.zMax;
			var tmp = b1;
			tmp.transform(m);
			if(tmp.xMin < b.xMin) {
				b.xMin = tmp.xMin;
			}
			if(tmp.xMax > b.xMax) {
				b.xMax = tmp.xMax;
			}
			if(tmp.yMin < b.yMin) {
				b.yMin = tmp.yMin;
			}
			if(tmp.yMax > b.yMax) {
				b.yMax = tmp.yMax;
			}
			if(tmp.zMin < b.zMin) {
				b.zMin = tmp.zMin;
			}
			if(tmp.zMax > b.zMax) {
				b.zMax = tmp.zMax;
			}
		}
	}
	,clone: function(o) {
		var m = o == null ? new h3d_scene_Mesh(null,this.material) : o;
		m.set_primitive(this.primitive);
		m.material = this.material.clone();
		h3d_scene_Object.prototype.clone.call(this,m);
		return m;
	}
	,getLocalCollider: function() {
		return this.primitive.getCollider();
	}
	,draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,emit: function(ctx) {
		var p = this.material.passes;
		while(p != null) {
			if(!p.culled) {
				ctx.emitPass(p,this).index = 0;
			}
			p = p.nextPass;
		}
	}
	,getMaterialByName: function(name) {
		if(this.material != null && this.material.name == name) {
			return this.material;
		}
		return h3d_scene_Object.prototype.getMaterialByName.call(this,name);
	}
	,getMaterials: function(a,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(a == null) {
			a = [];
		}
		if(this.material != null && a.indexOf(this.material) < 0) {
			a.push(this.material);
		}
		return h3d_scene_Object.prototype.getMaterials.call(this,a,recursive);
	}
	,onAdd: function() {
		h3d_scene_Object.prototype.onAdd.call(this);
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	,onRemove: function() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,set_primitive: function(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
	,__class__: h3d_scene_Mesh
});
var h3d_scene_Graphics = function(parent) {
	this.lineSize = 0.;
	this.curR = 0.;
	this.curZ = 0.;
	this.curY = 0.;
	this.curX = 0.;
	this.bprim = new h3d_prim_BigPrimitive(hxd_BufferFormat.get_POS3D_NORMAL_UV_RGBA());
	this.bprim.isStatic = false;
	h3d_scene_Mesh.call(this,this.bprim,null,parent);
	this.tmpPoints = [];
	this.lineShader = new h3d_shader_LineShader();
	this.lineShader.setPriority(-100);
	var _this = this.material;
	_this.set_castShadows(false);
	_this.set_receiveShadows(false);
	this.material.passes.set_enableLights(false);
	this.material.passes.addShader(this.lineShader);
	var vcolor = new h3d_shader_VertexColorAlpha();
	vcolor.setPriority(-100);
	this.material.passes.addShader(vcolor);
	this.material.passes.set_culling(h3d_mat_Face.None);
};
$hxClasses["h3d.scene.Graphics"] = h3d_scene_Graphics;
h3d_scene_Graphics.__name__ = "h3d.scene.Graphics";
h3d_scene_Graphics.__super__ = h3d_scene_Mesh;
h3d_scene_Graphics.prototype = $extend(h3d_scene_Mesh.prototype,{
	onRemove: function() {
		h3d_scene_Mesh.prototype.onRemove.call(this);
		this.bprim.clear();
	}
	,set_is3D: function(v) {
		if(this.is3D == v) {
			return v;
		}
		if(v) {
			this.material.set_texture(h3d_mat_Texture.fromColor(-1));
			this.material.passes.removeShader(this.lineShader);
		} else {
			this.material.set_texture(null);
			this.material.passes.addShader(this.lineShader);
		}
		this.bprim.clear();
		this.tmpPoints = [];
		return this.is3D = v;
	}
	,flushLine: function() {
		var _gthis = this;
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		var closed = p.x == prev.x && p.y == prev.y && p.z == prev.z;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			pts.push(new h3d_scene__$Graphics_GPoint(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,prev.z * 2 - prevLast.z,0,0,0,0));
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			prev = new h3d_scene__$Graphics_GPoint(p.x * 2 - pNext.x,p.y * 2 - pNext.y,p.z * 2 - pNext.z,0,0,0,0);
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var start = this.bprim.vertexCount();
		var pindex = start;
		var v = 0.;
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			var hasIndex = i < count - 1 || closed;
			this.bprim.begin(2,hasIndex ? 6 : 0);
			var _this = _gthis.bprim;
			_this.tmpBuf.array[_this.bufPos++] = p.x + nx;
			var _this1 = _gthis.bprim;
			_this1.tmpBuf.array[_this1.bufPos++] = p.y + ny;
			var _this2 = _gthis.bprim;
			_this2.tmpBuf.array[_this2.bufPos++] = p.z;
			var _this3 = _gthis.bprim;
			_this3.tmpBuf.array[_this3.bufPos++] = 0;
			var _this4 = _gthis.bprim;
			_this4.tmpBuf.array[_this4.bufPos++] = 0;
			var _this5 = _gthis.bprim;
			_this5.tmpBuf.array[_this5.bufPos++] = 1;
			var _this6 = _gthis.bprim;
			_this6.tmpBuf.array[_this6.bufPos++] = 0;
			var _this7 = _gthis.bprim;
			_this7.tmpBuf.array[_this7.bufPos++] = v;
			var _this8 = _gthis.bprim;
			_this8.tmpBuf.array[_this8.bufPos++] = p.r;
			var _this9 = _gthis.bprim;
			_this9.tmpBuf.array[_this9.bufPos++] = p.g;
			var _this10 = _gthis.bprim;
			_this10.tmpBuf.array[_this10.bufPos++] = p.b;
			var _this11 = _gthis.bprim;
			_this11.tmpBuf.array[_this11.bufPos++] = p.a;
			var _this12 = _gthis.bprim;
			_this12.tmpBuf.array[_this12.bufPos++] = p.x - nx;
			var _this13 = _gthis.bprim;
			_this13.tmpBuf.array[_this13.bufPos++] = p.y - ny;
			var _this14 = _gthis.bprim;
			_this14.tmpBuf.array[_this14.bufPos++] = p.z;
			var _this15 = _gthis.bprim;
			_this15.tmpBuf.array[_this15.bufPos++] = 0;
			var _this16 = _gthis.bprim;
			_this16.tmpBuf.array[_this16.bufPos++] = 0;
			var _this17 = _gthis.bprim;
			_this17.tmpBuf.array[_this17.bufPos++] = 1;
			var _this18 = _gthis.bprim;
			_this18.tmpBuf.array[_this18.bufPos++] = 1;
			var _this19 = _gthis.bprim;
			_this19.tmpBuf.array[_this19.bufPos++] = v;
			var _this20 = _gthis.bprim;
			_this20.tmpBuf.array[_this20.bufPos++] = p.r;
			var _this21 = _gthis.bprim;
			_this21.tmpBuf.array[_this21.bufPos++] = p.g;
			var _this22 = _gthis.bprim;
			_this22.tmpBuf.array[_this22.bufPos++] = p.b;
			var _this23 = _gthis.bprim;
			_this23.tmpBuf.array[_this23.bufPos++] = p.a;
			v = 1 - v;
			if(hasIndex) {
				var pnext = i == last ? start - pindex : 2;
				var _this24 = this.bprim;
				_this24.tmpIdx[_this24.idxPos++] = _this24.startIndex;
				var _this25 = this.bprim;
				_this25.tmpIdx[_this25.idxPos++] = 1 + _this25.startIndex;
				var _this26 = this.bprim;
				_this26.tmpIdx[_this26.idxPos++] = pnext + _this26.startIndex;
				var _this27 = this.bprim;
				_this27.tmpIdx[_this27.idxPos++] = pnext + _this27.startIndex;
				var _this28 = this.bprim;
				_this28.tmpIdx[_this28.idxPos++] = 1 + _this28.startIndex;
				var _this29 = this.bprim;
				_this29.tmpIdx[_this29.idxPos++] = pnext + 1 + _this29.startIndex;
			}
			pindex += 2;
			prev = p;
			p = next;
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.is3D) {
			this.flushLine();
			this.tmpPoints = [];
		}
	}
	,sync: function(ctx) {
		h3d_scene_Mesh.prototype.sync.call(this,ctx);
		this.flush();
		this.bprim.flush();
	}
	,draw: function(ctx) {
		this.flush();
		this.bprim.flush();
		h3d_scene_Mesh.prototype.draw.call(this,ctx);
	}
	,clear: function() {
		this.flush();
		this.bprim.clear();
	}
	,lineStyle: function(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0.;
		}
		this.flush();
		if(size > 0 && this.lineSize != size) {
			this.lineSize = size;
			if(!this.is3D) {
				this.lineShader.width__ = this.lineSize;
			}
		}
		this.setColor(color,alpha);
	}
	,setColorF: function(r,g,b,a) {
		if(a == null) {
			a = 1.;
		}
		this.curA = a;
		this.curR = r;
		this.curG = g;
		this.curB = b;
	}
	,setColor: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.curA = alpha;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
	}
	,drawLine: function(p1,p2) {
		this.moveTo(p1.x,p1.y,p1.z);
		this.lineTo(p2.x,p2.y,p2.z);
	}
	,moveTo: function(x,y,z) {
		if(this.is3D) {
			this.flush();
			this.lineTo(x,y,z);
		} else {
			this.curX = x;
			this.curY = y;
			this.curZ = z;
		}
	}
	,addVertex: function(x,y,z,r,g,b,a) {
		this.tmpPoints.push(new h3d_scene__$Graphics_GPoint(x,y,z,r,g,b,a));
	}
	,lineTo: function(x,y,z) {
		var _gthis = this;
		if(this.is3D) {
			var x1 = this.curX;
			var y1 = this.curY;
			var z1 = this.curZ;
			var _this = this.bprim.bounds;
			if(x1 < _this.xMin) {
				_this.xMin = x1;
			}
			if(x1 > _this.xMax) {
				_this.xMax = x1;
			}
			if(y1 < _this.yMin) {
				_this.yMin = y1;
			}
			if(y1 > _this.yMax) {
				_this.yMax = y1;
			}
			if(z1 < _this.zMin) {
				_this.zMin = z1;
			}
			if(z1 > _this.zMax) {
				_this.zMax = z1;
			}
			var _this = this.bprim.bounds;
			if(x < _this.xMin) {
				_this.xMin = x;
			}
			if(x > _this.xMax) {
				_this.xMax = x;
			}
			if(y < _this.yMin) {
				_this.yMin = y;
			}
			if(y > _this.yMax) {
				_this.yMax = y;
			}
			if(z < _this.zMin) {
				_this.zMin = z;
			}
			if(z > _this.zMax) {
				_this.zMax = z;
			}
			this.tmpPoints.push(new h3d_scene__$Graphics_GPoint(x,y,z,this.curR,this.curG,this.curB,this.curA));
			return;
		}
		this.bprim.begin(4,6);
		var nx = x - this.curX;
		var ny = y - this.curY;
		var nz = z - this.curZ;
		var x1 = this.curX;
		var y1 = this.curY;
		var z1 = this.curZ;
		var _this = this.bprim.bounds;
		if(x1 < _this.xMin) {
			_this.xMin = x1;
		}
		if(x1 > _this.xMax) {
			_this.xMax = x1;
		}
		if(y1 < _this.yMin) {
			_this.yMin = y1;
		}
		if(y1 > _this.yMax) {
			_this.yMax = y1;
		}
		if(z1 < _this.zMin) {
			_this.zMin = z1;
		}
		if(z1 > _this.zMax) {
			_this.zMax = z1;
		}
		var _this = this.bprim.bounds;
		if(x < _this.xMin) {
			_this.xMin = x;
		}
		if(x > _this.xMax) {
			_this.xMax = x;
		}
		if(y < _this.yMin) {
			_this.yMin = y;
		}
		if(y > _this.yMax) {
			_this.yMax = y;
		}
		if(z < _this.zMin) {
			_this.zMin = z;
		}
		if(z > _this.zMax) {
			_this.zMax = z;
		}
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curX;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curY;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curZ;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nx;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = ny;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nz;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 0;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 0;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curR;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curG;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curB;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curA;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curX;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curY;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curZ;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nx;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = ny;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nz;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 0;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 1;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curR;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curG;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curB;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curA;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curX;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curY;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curZ;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nx;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = ny;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nz;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 1;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 0;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curR;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curG;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curB;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curA;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curX;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curY;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curZ;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nx;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = ny;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = nz;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 1;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = 1;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curR;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curG;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curB;
		var _this = _gthis.bprim;
		_this.tmpBuf.array[_this.bufPos++] = _gthis.curA;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = _this.startIndex;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = 1 + _this.startIndex;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = 2 + _this.startIndex;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = 2 + _this.startIndex;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = 3 + _this.startIndex;
		var _this = this.bprim;
		_this.tmpIdx[_this.idxPos++] = 1 + _this.startIndex;
		this.curX = x;
		this.curY = y;
		this.curZ = z;
	}
	,__class__: h3d_scene_Graphics
});
var h3d_scene_Box = function(color,bounds,depth,parent) {
	if(depth == null) {
		depth = true;
	}
	if(color == null) {
		color = -65536;
	}
	this.prevZMax = -1e9;
	this.prevYMax = -1e9;
	this.prevXMax = -1e9;
	this.prevZMin = 1e9;
	this.prevYMin = 1e9;
	this.prevXMin = 1e9;
	this.thickness = 1.0;
	h3d_scene_Graphics.call(this,parent);
	this.color = color;
	this.bounds = bounds;
	if(!depth) {
		this.material.passes.depth(true,h3d_mat_Compare.Always);
	}
};
$hxClasses["h3d.scene.Box"] = h3d_scene_Box;
h3d_scene_Box.__name__ = "h3d.scene.Box";
h3d_scene_Box.__super__ = h3d_scene_Graphics;
h3d_scene_Box.prototype = $extend(h3d_scene_Graphics.prototype,{
	clone: function(o) {
		var b;
		if(o == null) {
			var b1 = this.color;
			var _this = this.bounds;
			var b2 = new h3d_col_Bounds();
			b2.xMin = _this.xMin;
			b2.xMax = _this.xMax;
			b2.yMin = _this.yMin;
			b2.yMax = _this.yMax;
			b2.zMin = _this.zMin;
			b2.zMax = _this.zMax;
			b = new h3d_scene_Box(b1,b2,this.material.passes.depthWrite,null);
		} else {
			b = o;
		}
		h3d_scene_Graphics.prototype.clone.call(this,b);
		var _this = this.bounds;
		var b1 = new h3d_col_Bounds();
		b1.xMin = _this.xMin;
		b1.xMax = _this.xMax;
		b1.yMin = _this.yMin;
		b1.yMax = _this.yMax;
		b1.zMin = _this.zMin;
		b1.zMax = _this.zMax;
		b.bounds = b1;
		b.prevXMin = this.prevXMin;
		b.prevYMin = this.prevYMin;
		b.prevZMin = this.prevZMin;
		b.prevXMax = this.prevXMax;
		b.prevYMax = this.prevYMax;
		b.prevZMax = this.prevZMax;
		return b;
	}
	,getLocalCollider: function() {
		return null;
	}
	,sync: function(ctx) {
		if(this.bounds == null) {
			if(this.prevXMin == -0.5 && this.prevYMin == -0.5 && this.prevZMin == -0.5 && this.prevXMax == 0.5 && this.prevYMax == 0.5 && this.prevZMax == 0.5) {
				return;
			}
			this.prevXMin = -0.5;
			this.prevYMin = -0.5;
			this.prevZMin = -0.5;
			this.prevXMax = 0.5;
			this.prevYMax = 0.5;
			this.prevZMax = 0.5;
		} else {
			if(this.prevXMin == this.bounds.xMin && this.prevYMin == this.bounds.yMin && this.prevZMin == this.bounds.zMin && this.prevXMax == this.bounds.xMax && this.prevYMax == this.bounds.yMax && this.prevZMax == this.bounds.zMax) {
				return;
			}
			this.prevXMin = this.bounds.xMin;
			this.prevYMin = this.bounds.yMin;
			this.prevZMin = this.bounds.zMin;
			this.prevXMax = this.bounds.xMax;
			this.prevYMax = this.bounds.yMax;
			this.prevZMax = this.bounds.zMax;
		}
		this.clear();
		this.lineStyle(this.thickness,this.color);
		this.moveTo(this.prevXMin,this.prevYMin,this.prevZMin);
		this.lineTo(this.prevXMax,this.prevYMin,this.prevZMin);
		this.lineTo(this.prevXMax,this.prevYMax,this.prevZMin);
		this.lineTo(this.prevXMin,this.prevYMax,this.prevZMin);
		this.lineTo(this.prevXMin,this.prevYMin,this.prevZMin);
		this.lineTo(this.prevXMin,this.prevYMin,this.prevZMax);
		this.lineTo(this.prevXMax,this.prevYMin,this.prevZMax);
		this.lineTo(this.prevXMax,this.prevYMax,this.prevZMax);
		this.lineTo(this.prevXMin,this.prevYMax,this.prevZMax);
		this.lineTo(this.prevXMin,this.prevYMin,this.prevZMax);
		this.moveTo(this.prevXMax,this.prevYMin,this.prevZMin);
		this.lineTo(this.prevXMax,this.prevYMin,this.prevZMax);
		this.moveTo(this.prevXMin,this.prevYMax,this.prevZMin);
		this.lineTo(this.prevXMin,this.prevYMax,this.prevZMax);
		this.moveTo(this.prevXMax,this.prevYMax,this.prevZMin);
		this.lineTo(this.prevXMax,this.prevYMax,this.prevZMax);
		h3d_scene_Graphics.prototype.sync.call(this,ctx);
	}
	,__class__: h3d_scene_Box
});
var h3d_scene__$Graphics_GPoint = function(x,y,z,r,g,b,a) {
	this.x = x;
	this.y = y;
	this.z = z;
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
$hxClasses["h3d.scene._Graphics.GPoint"] = h3d_scene__$Graphics_GPoint;
h3d_scene__$Graphics_GPoint.__name__ = "h3d.scene._Graphics.GPoint";
h3d_scene__$Graphics_GPoint.prototype = {
	__class__: h3d_scene__$Graphics_GPoint
};
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.lastClickFrame = -1;
	this.mouseDownButton = -1;
	this.isAbsoluteShape = false;
	this.allowMultiClick = false;
	this.enableRightButton = false;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h3d.scene.Interactive"] = h3d_scene_Interactive;
h3d_scene_Interactive.__name__ = "h3d.scene.Interactive";
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.setupDebugMaterial = function(debugObj) {
	var materials = debugObj.getMaterials();
	var _g = 0;
	while(_g < materials.length) {
		var m = materials[_g];
		++_g;
		var engine = h3d_Engine.CURRENT;
		if(engine.driver.hasFeature(h3d_impl_Feature.Wireframe)) {
			m.passes.set_wireframe(true);
		}
		m.set_castShadows(false);
		m.set_receiveShadows(false);
		m.mshader.color__.w = 0.7;
		m.set_blendMode(h2d_BlendMode.Alpha);
	}
};
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	getPoint: function(ray,bestMatch) {
		var rold_px = ray.px;
		var rold_py = ray.py;
		var rold_pz = ray.pz;
		var rold_lx = ray.lx;
		var rold_ly = ray.ly;
		var rold_lz = ray.lz;
		var m = this.getInvPos();
		var x = ray.px;
		var y = ray.py;
		var z = ray.pz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + m._41;
		var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + m._42;
		var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + m._43;
		p_x = px;
		p_y = py;
		p_z = pz;
		ray.px = p_x;
		ray.py = p_y;
		ray.pz = p_z;
		var x = ray.lx;
		var y = ray.ly;
		var z = ray.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var l_x = x1;
		var l_y = y1;
		var l_z = z1;
		var px = l_x * m._11 + l_y * m._21 + l_z * m._31;
		var py = l_x * m._12 + l_y * m._22 + l_z * m._32;
		var pz = l_x * m._13 + l_y * m._23 + l_z * m._33;
		l_x = px;
		l_y = py;
		l_z = pz;
		ray.lx = l_x;
		ray.ly = l_y;
		ray.lz = l_z;
		ray.normalize();
		var d = this.shape.rayIntersection(ray,bestMatch);
		if(d < 0) {
			ray.px = rold_px;
			ray.py = rold_py;
			ray.pz = rold_pz;
			ray.lx = rold_lx;
			ray.ly = rold_ly;
			ray.lz = rold_lz;
			return null;
		}
		var x = ray.px + d * ray.lx;
		var y = ray.py + d * ray.ly;
		var z = ray.pz + d * ray.lz;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var pt = new h3d_VectorImpl(x,y,z);
		var m = this.getAbsPos();
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		ray.px = rold_px;
		ray.py = rold_py;
		ray.pz = rold_pz;
		ray.lx = rold_lx;
		ray.ly = rold_ly;
		ray.lz = rold_lz;
		return pt;
	}
	,get_showDebug: function() {
		return this.debugObj != null;
	}
	,set_showDebug: function(val) {
		if(!val) {
			if(this.debugObj != null) {
				var _this = this.debugObj;
				if(_this != null && _this.parent != null) {
					_this.parent.removeChild(_this);
				}
			}
			this.debugObj = null;
			return false;
		}
		if(this.debugObj != null) {
			return true;
		}
		this.debugObj = this.shape.makeDebugObj();
		if(this.debugObj != null) {
			h3d_scene_Interactive.setupDebugMaterial(this.debugObj);
			var _this = this.debugObj;
			var b = this.isAbsoluteShape;
			if(b != ((_this.flags & 2048) != 0)) {
				var f = 1;
				var b1 = true;
				if(b1) {
					_this.flags |= f;
				} else {
					_this.flags &= ~f;
				}
			}
			var f = 2048;
			if(b) {
				_this.flags |= f;
			} else {
				_this.flags &= ~f;
			}
			this.addChild(this.debugObj);
		}
		return this.debugObj != null;
	}
	,onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,preventClick: function() {
		this.mouseDownButton = -1;
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				var frame = hxd_Timer.frameCount;
				if(this.mouseDownButton == e.button && (this.lastClickFrame != frame || this.allowMultiClick)) {
					this.onClick(e);
					this.lastClickFrame = frame;
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,focus: function() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	,blur: function() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	,isOver: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.overList.indexOf(this) != -1;
		} else {
			return false;
		}
	}
	,hasFocus: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h3d_scene_Interactive
});
var h3d_scene_Light = function(shader,parent) {
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
$hxClasses["h3d.scene.Light"] = h3d_scene_Light;
h3d_scene_Light.__name__ = "h3d.scene.Light";
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	get_color: function() {
		return new h3d_VectorImpl(0.,0.,0.);
	}
	,set_color: function(v) {
		return v;
	}
	,emit: function(ctx) {
		ctx.emitLight(this);
	}
	,getShadowDirection: function() {
		return null;
	}
	,__class__: h3d_scene_Light
});
var h3d_scene_LightSystem = function() {
	this.drawPasses = 0;
};
$hxClasses["h3d.scene.LightSystem"] = h3d_scene_LightSystem;
h3d_scene_LightSystem.__name__ = "h3d.scene.LightSystem";
h3d_scene_LightSystem.prototype = {
	initGlobals: function(globals) {
	}
	,initLights: function(ctx) {
		this.ctx = ctx;
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			var l = ctx.lights;
			while(l != null) {
				var dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	,computeLight: function(obj,shaders) {
		return shaders;
	}
	,dispose: function() {
	}
	,__class__: h3d_scene_LightSystem
};
var h3d_scene_MultiMaterial = function(prim,mats,parent) {
	h3d_scene_Mesh.call(this,prim,mats == null ? null : mats[0],parent);
	this.materials = mats == null ? [this.material] : mats;
};
$hxClasses["h3d.scene.MultiMaterial"] = h3d_scene_MultiMaterial;
h3d_scene_MultiMaterial.__name__ = "h3d.scene.MultiMaterial";
h3d_scene_MultiMaterial.__super__ = h3d_scene_Mesh;
h3d_scene_MultiMaterial.prototype = $extend(h3d_scene_Mesh.prototype,{
	getMeshMaterials: function() {
		return this.materials.slice();
	}
	,clone: function(o) {
		var m = o == null ? new h3d_scene_MultiMaterial(null,this.materials) : o;
		m.materials = [];
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var mat = _g1[_g];
			++_g;
			m.materials.push(mat == null ? null : mat.clone());
		}
		h3d_scene_Mesh.prototype.clone.call(this,m);
		m.material = m.materials[0];
		return m;
	}
	,emit: function(ctx) {
		var _g = 0;
		var _g1 = this.materials.length;
		while(_g < _g1) {
			var i = _g++;
			var m = this.materials[i];
			if(m != null) {
				var index = i;
				if(index == null) {
					index = 0;
				}
				var p = m.passes;
				while(p != null) {
					if(!p.culled) {
						ctx.emitPass(p,this).index = index;
					}
					p = p.nextPass;
				}
			}
		}
	}
	,getMaterialByName: function(name) {
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m != null && m.name == name) {
				return m;
			}
		}
		return h3d_scene_Mesh.prototype.getMaterialByName.call(this,name);
	}
	,getMaterials: function(a,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(a == null) {
			a = [];
		}
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m != null && a.indexOf(m) < 0) {
				a.push(m);
			}
		}
		if(recursive) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var o = _g1[_g];
				++_g;
				o.getMaterials(a);
			}
		}
		return a;
	}
	,draw: function(ctx) {
		if(this.materials.length > 1) {
			this.primitive.selectMaterial(ctx.drawPass.index);
		}
		h3d_scene_Mesh.prototype.draw.call(this,ctx);
	}
	,__class__: h3d_scene_MultiMaterial
});
var h3d_scene_ObjectFlags = {};
h3d_scene_ObjectFlags._new = function(value) {
	return value;
};
h3d_scene_ObjectFlags.toInt = function(this1) {
	return this1;
};
h3d_scene_ObjectFlags.has = function(this1,f) {
	return (this1 & f) != 0;
};
h3d_scene_ObjectFlags.set = function(this1,f,b) {
	if(b) {
		this1 |= f;
	} else {
		this1 &= ~f;
	}
	return b;
};
var h3d_scene__$RenderContext_SharedGlobal = function(gid,value) {
	this.gid = gid;
	this.value = value;
};
$hxClasses["h3d.scene._RenderContext.SharedGlobal"] = h3d_scene__$RenderContext_SharedGlobal;
h3d_scene__$RenderContext_SharedGlobal.__name__ = "h3d.scene._RenderContext.SharedGlobal";
h3d_scene__$RenderContext_SharedGlobal.prototype = {
	__class__: h3d_scene__$RenderContext_SharedGlobal
};
var h3d_scene_RenderContext = function() {
	h3d_impl_RenderContext.call(this);
	this.cachedShaderList = [];
	this.cachedPassObjects = [];
	this.initGlobals();
};
$hxClasses["h3d.scene.RenderContext"] = h3d_scene_RenderContext;
h3d_scene_RenderContext.__name__ = "h3d.scene.RenderContext";
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	setCamera: function(cam) {
		var v = cam.mcam;
		this.globals.map.h[this.cameraView_id] = v;
		var v = cam.zNear;
		this.globals.map.h[this.cameraNear_id] = v;
		var v = cam.zFar;
		this.globals.map.h[this.cameraFar_id] = v;
		var v = cam.mproj;
		this.globals.map.h[this.cameraProj_id] = v;
		var v = cam.pos;
		this.globals.map.h[this.cameraPos_id] = v;
		var x = cam.mproj._11;
		var y = cam.mproj._22;
		var z = cam.mproj._33;
		var w = cam.mproj._44;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v = new h3d_Vector4Impl(x,y,z,w);
		this.globals.map.h[this.cameraProjDiag_id] = v;
		var v = cam.m;
		this.globals.map.h[this.cameraViewProj_id] = v;
		var v = this.camera.getInverseViewProj();
		this.globals.map.h[this.cameraInverseViewProj_id] = v;
	}
	,setupTarget: function() {
		var v = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.engine.getCurrentTarget() != null ? -1 : 1;
		this.globals.map.h[this.cameraProjFlip_id] = v;
	}
	,getCurrentPixelSize: function() {
		var t = this.engine.getCurrentTarget();
		var x = 2 / (t == null ? this.engine.width : t.width);
		var y = 2 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,0.);
	}
	,emit: function(mat,obj,index) {
		if(index == null) {
			index = 0;
		}
		var p = mat.passes;
		while(p != null) {
			if(!p.culled) {
				this.emitPass(p,obj).index = index;
			}
			p = p.nextPass;
		}
	}
	,start: function() {
		this.lights = null;
		this.drawPass = null;
		this.passes = [];
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
		this.setCurrent();
		var v = this.time;
		this.globals.map.h[this.globalTime_id] = v;
		var v = this.getCurrentPixelSize();
		this.globals.map.h[this.pixelSize_id] = v;
		this.setCamera(this.camera);
	}
	,nextPass: function() {
		this.cachedPos = 0;
		this.drawPass = null;
	}
	,getGlobal: function(name) {
		return this.globals.get(name);
	}
	,setGlobal: function(name,v) {
		this.globals.set(name,v);
	}
	,emitPass: function(pass,obj) {
		if((pass.rendererFlags & 1) == 0) {
			this.scene.renderer.setPassFlags(pass);
		}
		var o = this.allocPool;
		if(o == null) {
			o = new h3d_pass_PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		if(this.passes.length <= pass.passId) {
			this.passes.length = pass.passId;
		}
		o.next = this.passes[pass.passId];
		this.passes[pass.passId] = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,uploadParams: function() {
		this.fillParams(this.shaderBuffers,this.drawPass.shader,this.drawPass.shaders);
		this.engine.uploadShaderBuffers(this.shaderBuffers,1);
		this.engine.uploadShaderBuffers(this.shaderBuffers,2);
		this.engine.uploadShaderBuffers(this.shaderBuffers,3);
	}
	,done: function() {
		this.drawPass = null;
		var p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = [];
		this.lights = null;
		this.clearCurrent();
	}
	,get_cameraView: function() {
		return this.globals.map.h[this.cameraView_id];
	}
	,set_cameraView: function(v) {
		this.globals.map.h[this.cameraView_id] = v;
		return v;
	}
	,get_cameraNear: function() {
		return this.globals.map.h[this.cameraNear_id];
	}
	,set_cameraNear: function(v) {
		this.globals.map.h[this.cameraNear_id] = v;
		return v;
	}
	,get_cameraFar: function() {
		return this.globals.map.h[this.cameraFar_id];
	}
	,set_cameraFar: function(v) {
		this.globals.map.h[this.cameraFar_id] = v;
		return v;
	}
	,get_cameraProj: function() {
		return this.globals.map.h[this.cameraProj_id];
	}
	,set_cameraProj: function(v) {
		this.globals.map.h[this.cameraProj_id] = v;
		return v;
	}
	,get_cameraPos: function() {
		return this.globals.map.h[this.cameraPos_id];
	}
	,set_cameraPos: function(v) {
		this.globals.map.h[this.cameraPos_id] = v;
		return v;
	}
	,get_cameraProjDiag: function() {
		return this.globals.map.h[this.cameraProjDiag_id];
	}
	,set_cameraProjDiag: function(v) {
		this.globals.map.h[this.cameraProjDiag_id] = v;
		return v;
	}
	,get_cameraProjFlip: function() {
		return this.globals.map.h[this.cameraProjFlip_id];
	}
	,set_cameraProjFlip: function(v) {
		this.globals.map.h[this.cameraProjFlip_id] = v;
		return v;
	}
	,get_cameraViewProj: function() {
		return this.globals.map.h[this.cameraViewProj_id];
	}
	,set_cameraViewProj: function(v) {
		this.globals.map.h[this.cameraViewProj_id] = v;
		return v;
	}
	,get_cameraInverseViewProj: function() {
		return this.globals.map.h[this.cameraInverseViewProj_id];
	}
	,set_cameraInverseViewProj: function(v) {
		this.globals.map.h[this.cameraInverseViewProj_id] = v;
		return v;
	}
	,get_globalTime: function() {
		return this.globals.map.h[this.globalTime_id];
	}
	,set_globalTime: function(v) {
		this.globals.map.h[this.globalTime_id] = v;
		return v;
	}
	,get_pixelSize: function() {
		return this.globals.map.h[this.pixelSize_id];
	}
	,set_pixelSize: function(v) {
		this.globals.map.h[this.pixelSize_id] = v;
		return v;
	}
	,get_globalModelView: function() {
		return this.globals.map.h[this.globalModelView_id];
	}
	,set_globalModelView: function(v) {
		this.globals.map.h[this.globalModelView_id] = v;
		return v;
	}
	,get_globalModelViewInverse: function() {
		return this.globals.map.h[this.globalModelViewInverse_id];
	}
	,set_globalModelViewInverse: function(v) {
		this.globals.map.h[this.globalModelViewInverse_id] = v;
		return v;
	}
	,initGlobals: function() {
		this.cameraView_id = hxsl_Globals.allocID("camera.view");
		this.cameraNear_id = hxsl_Globals.allocID("camera.zNear");
		this.cameraFar_id = hxsl_Globals.allocID("camera.zFar");
		this.cameraProj_id = hxsl_Globals.allocID("camera.proj");
		this.cameraPos_id = hxsl_Globals.allocID("camera.position");
		this.cameraProjDiag_id = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjFlip_id = hxsl_Globals.allocID("camera.projFlip");
		this.cameraViewProj_id = hxsl_Globals.allocID("camera.viewProj");
		this.cameraInverseViewProj_id = hxsl_Globals.allocID("camera.inverseViewProj");
		this.globalTime_id = hxsl_Globals.allocID("global.time");
		this.pixelSize_id = hxsl_Globals.allocID("global.pixelSize");
		this.globalModelView_id = hxsl_Globals.allocID("global.modelView");
		this.globalModelViewInverse_id = hxsl_Globals.allocID("global.modelViewInverse");
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassObjects = function() {
	this.passes = new h3d_pass_PassList();
};
$hxClasses["h3d.scene.PassObjects"] = h3d_scene_PassObjects;
h3d_scene_PassObjects.__name__ = "h3d.scene.PassObjects";
h3d_scene_PassObjects.prototype = {
	__class__: h3d_scene_PassObjects
};
var h3d_scene_RenderMode = $hxEnums["h3d.scene.RenderMode"] = { __ename__:"h3d.scene.RenderMode",__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"h3d.scene.RenderMode",toString:$estr}
	,LightProbe: {_hx_name:"LightProbe",_hx_index:1,__enum__:"h3d.scene.RenderMode",toString:$estr}
};
h3d_scene_RenderMode.__constructs__ = [h3d_scene_RenderMode.Default,h3d_scene_RenderMode.LightProbe];
h3d_scene_RenderMode.__empty_constructs__ = [h3d_scene_RenderMode.Default,h3d_scene_RenderMode.LightProbe];
var h3d_scene_Renderer = function() {
	this.shadows = true;
	this.renderMode = h3d_scene_RenderMode.Default;
	this.effects = [];
	this.debugging = false;
	this.hasSetTarget = false;
	this.emptyPasses = new h3d_pass_PassList();
	this.allPasses = [];
	this.passObjects = new haxe_ds_StringMap();
	this.set_props(this.getDefaultProps());
	var _g = this;
	var frontToBack = true;
	this.frontToBack = function(passes) {
		_g.depthSort(frontToBack,passes);
	};
	var _g1 = this;
	var frontToBack1 = false;
	this.backToFront = function(passes) {
		_g1.depthSort(frontToBack1,passes);
	};
};
$hxClasses["h3d.scene.Renderer"] = h3d_scene_Renderer;
h3d_scene_Renderer.__name__ = "h3d.scene.Renderer";
h3d_scene_Renderer.__super__ = hxd_impl_AnyProps;
h3d_scene_Renderer.prototype = $extend(hxd_impl_AnyProps.prototype,{
	getEffect: function(cl) {
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = js_Boot.__downcastCheck(f,cl) ? f : null;
			if(f1 != null) {
				return f1;
			}
		}
		return null;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.dispose();
		}
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.dispose();
		}
		if(this.ctx.lightSystem != null) {
			this.ctx.lightSystem.dispose();
		}
		this.passObjects = new haxe_ds_StringMap();
	}
	,mark: function(id) {
	}
	,addShader: function(s) {
	}
	,getPass: function(c) {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(p,c)) {
				return p;
			}
		}
		return null;
	}
	,getPassByName: function(name) {
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p.name == name) {
				return p;
			}
		}
		return null;
	}
	,hasFeature: function(f) {
		return h3d_Engine.CURRENT.driver.hasFeature(f);
	}
	,getLightSystem: function() {
		return this.ctx.scene.lightSystem;
	}
	,depthSort: function(frontToBack,passes) {
		var cam = this.ctx.camera.m;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = z / w;
		}
		if(frontToBack) {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? 1 : -1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		} else {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? -1 : 1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		}
	}
	,clear: function(color,depth,stencil) {
		this.ctx.engine.clear(color,depth,stencil);
	}
	,allocTarget: function(name,depth,size,format) {
		if(size == null) {
			size = 1.;
		}
		if(depth == null) {
			depth = true;
		}
		return this.ctx.textures.allocTarget(name,Math.round(this.ctx.engine.width * size),Math.round(this.ctx.engine.height * size),depth,format);
	}
	,copy: function(from,to,blend) {
		h3d_pass_Copy.run(from,to,blend);
	}
	,setTarget: function(tex,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
		}
		this.ctx.engine.pushTarget(tex,null,null,depthBinding);
		this.hasSetTarget = true;
	}
	,setTargets: function(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
		}
		this.ctx.engine.pushTargets(textures,depthBinding);
		this.hasSetTarget = true;
	}
	,setDepth: function(depthBuffer) {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
		}
		this.ctx.engine.pushDepth(depthBuffer);
		this.hasSetTarget = true;
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,has: function(name) {
		return this.passObjects.h[name] != null;
	}
	,setPassFlags: function(pass) {
		pass.rendererFlags |= 1;
	}
	,get: function(name) {
		var p = this.passObjects.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	,draw: function(name) {
		this.defaultPass.draw(this.get(name));
	}
	,render: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,computeStatic: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,start: function() {
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = p;
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = null;
		}
	}
	,__class__: h3d_scene_Renderer
});
var h3d_scene_Scene = function(createRenderer,createLightSystem) {
	if(createLightSystem == null) {
		createLightSystem = true;
	}
	if(createRenderer == null) {
		createRenderer = true;
	}
	this.prevEngine = null;
	this.checkPasses = true;
	h3d_scene_Object.call(this,null);
	this.window = hxd_Window.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext();
	if(createRenderer) {
		this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	}
	if(createLightSystem) {
		this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
	}
};
$hxClasses["h3d.scene.Scene"] = h3d_scene_Scene;
h3d_scene_Scene.__name__ = "h3d.scene.Scene";
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,addEventListener: function(f) {
		this.eventListeners.push(f);
	}
	,removeEventListener: function(f) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e == f) {
				HxOverrides.remove(this.eventListeners,e);
				return true;
			}
		}
		return false;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var screenX = (event.relX / this.window.get_width() - 0.5) * 2;
			var screenY = -(event.relY / this.window.get_height() - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var x = p0.x;
			var y = p0.y;
			var z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p1_x = x1;
			var p1_y = y1;
			var p1_z = z1;
			var x = p1.x;
			var y = p1.y;
			var z = p1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p2_x = x1;
			var p2_y = y1;
			var p2_z = z1;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			var saveR_px = r1.px;
			var saveR_py = r1.py;
			var saveR_pz = r1.pz;
			var saveR_lx = r1.lx;
			var saveR_ly = r1.ly;
			var saveR_lz = r1.lz;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				if(!i.isAbsoluteShape) {
					var minv = i.getInvPos();
					var x = r1.px;
					var y = r1.py;
					var z = r1.pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var p_x = x1;
					var p_y = y1;
					var p_z = z1;
					var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + minv._41;
					var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + minv._42;
					var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + minv._43;
					p_x = px;
					p_y = py;
					p_z = pz;
					r1.px = p_x;
					r1.py = p_y;
					r1.pz = p_z;
					var x2 = r1.lx;
					var y2 = r1.ly;
					var z2 = r1.lz;
					if(z2 == null) {
						z2 = 0.;
					}
					if(y2 == null) {
						y2 = 0.;
					}
					if(x2 == null) {
						x2 = 0.;
					}
					var x3 = x2;
					var y3 = y2;
					var z3 = z2;
					if(z3 == null) {
						z3 = 0.;
					}
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					var l_x = x3;
					var l_y = y3;
					var l_z = z3;
					var px1 = l_x * minv._11 + l_y * minv._21 + l_z * minv._31;
					var py1 = l_x * minv._12 + l_y * minv._22 + l_z * minv._32;
					var pz1 = l_x * minv._13 + l_y * minv._23 + l_z * minv._33;
					l_x = px1;
					l_y = py1;
					l_z = pz1;
					r1.lx = l_x;
					r1.ly = l_y;
					r1.lz = l_z;
					r1.normalize();
				}
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var x4 = r1.px + hit * r1.lx;
				var y4 = r1.py + hit * r1.ly;
				var z4 = r1.pz + hit * r1.lz;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var x5 = x4;
				var y5 = y4;
				var z5 = z4;
				if(z5 == null) {
					z5 = 0.;
				}
				if(y5 == null) {
					y5 = 0.;
				}
				if(x5 == null) {
					x5 = 0.;
				}
				var hitPoint_x = x5;
				var hitPoint_y = y5;
				var hitPoint_z = z5;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g = 0;
				var _g1 = this.hitInteractives;
				while(_g < _g1.length) {
					var i = _g1[_g];
					++_g;
					var m = i.invPos;
					var wfactor = 0.;
					if(i.preciseShape != null) {
						var x = r1.px;
						var y = r1.py;
						var z = r1.pz;
						if(z == null) {
							z = 0.;
						}
						if(y == null) {
							y = 0.;
						}
						if(x == null) {
							x = 0.;
						}
						var x1 = x;
						var y1 = y;
						var z1 = z;
						if(z1 == null) {
							z1 = 0.;
						}
						if(y1 == null) {
							y1 = 0.;
						}
						if(x1 == null) {
							x1 = 0.;
						}
						var p_x = x1;
						var p_y = y1;
						var p_z = z1;
						var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + m._41;
						var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + m._42;
						var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + m._43;
						p_x = px;
						p_y = py;
						p_z = pz;
						r1.px = p_x;
						r1.py = p_y;
						r1.pz = p_z;
						var x2 = r1.lx;
						var y2 = r1.ly;
						var z2 = r1.lz;
						if(z2 == null) {
							z2 = 0.;
						}
						if(y2 == null) {
							y2 = 0.;
						}
						if(x2 == null) {
							x2 = 0.;
						}
						var x3 = x2;
						var y3 = y2;
						var z3 = z2;
						if(z3 == null) {
							z3 = 0.;
						}
						if(y3 == null) {
							y3 = 0.;
						}
						if(x3 == null) {
							x3 = 0.;
						}
						var l_x = x3;
						var l_y = y3;
						var l_z = z3;
						var px1 = l_x * m._11 + l_y * m._21 + l_z * m._31;
						var py1 = l_x * m._12 + l_y * m._22 + l_z * m._32;
						var pz1 = l_x * m._13 + l_y * m._23 + l_z * m._33;
						l_x = px1;
						l_y = py1;
						l_z = pz1;
						r1.lx = l_x;
						r1.ly = l_y;
						r1.lz = l_z;
						r1.normalize();
						var hit = i.preciseShape.rayIntersection(r1,i.bestMatch);
						if(hit > 0) {
							var x4 = r1.px + hit * r1.lx;
							var y4 = r1.py + hit * r1.ly;
							var z4 = r1.pz + hit * r1.lz;
							if(z4 == null) {
								z4 = 0.;
							}
							if(y4 == null) {
								y4 = 0.;
							}
							if(x4 == null) {
								x4 = 0.;
							}
							var x5 = x4;
							var y5 = y4;
							var z5 = z4;
							if(z5 == null) {
								z5 = 0.;
							}
							if(y5 == null) {
								y5 = 0.;
							}
							if(x5 == null) {
								x5 = 0.;
							}
							var hitPoint_x = x5;
							var hitPoint_y = y5;
							var hitPoint_z = z5;
							i.hitPoint.x = hitPoint_x;
							i.hitPoint.y = hitPoint_y;
							i.hitPoint.z = hitPoint_z;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					var _this = i.hitPoint;
					var x6 = _this.x;
					var y6 = _this.y;
					var z6 = _this.z;
					var w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z6 == null) {
						z6 = 0.;
					}
					if(y6 == null) {
						y6 = 0.;
					}
					if(x6 == null) {
						x6 = 0.;
					}
					var x7 = x6;
					var y7 = y6;
					var z7 = z6;
					var w1 = w;
					if(w1 == null) {
						w1 = 1.;
					}
					if(z7 == null) {
						z7 = 0.;
					}
					if(y7 == null) {
						y7 = 0.;
					}
					if(x7 == null) {
						x7 = 0.;
					}
					var p_x1 = x7;
					var p_y1 = y7;
					var p_z1 = z7;
					var p_w = w1;
					p_w = 1;
					var m1 = i.absPos;
					var px2 = p_x1 * m1._11 + p_y1 * m1._21 + p_z1 * m1._31 + p_w * m1._41;
					var py2 = p_x1 * m1._12 + p_y1 * m1._22 + p_z1 * m1._32 + p_w * m1._42;
					var pz2 = p_x1 * m1._13 + p_y1 * m1._23 + p_z1 * m1._33 + p_w * m1._43;
					p_x1 = px2;
					p_y1 = py2;
					p_z1 = pz2;
					var m2 = this.camera.m;
					var px3 = p_x1 * m2._11 + p_y1 * m2._21 + p_z1 * m2._31 + p_w * m2._41;
					var py3 = p_x1 * m2._12 + p_y1 * m2._22 + p_z1 * m2._32 + p_w * m2._42;
					var pz3 = p_x1 * m2._13 + p_y1 * m2._23 + p_z1 * m2._33 + p_w * m2._43;
					var iw = 1 / (p_x1 * m2._14 + p_y1 * m2._24 + p_z1 * m2._34 + p_w * m2._44);
					p_x1 = px3 * iw;
					p_y1 = py3 * iw;
					p_z1 = pz3 * iw;
					p_w = 1;
					i.hitPoint.w = p_z1 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i = this.hitInteractives.pop();
			if(i == null) {
				return null;
			}
			event.relX = i.hitPoint.x;
			event.relY = i.hitPoint.y;
			event.relZ = i.hitPoint.z;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i;
		}
		return null;
	}
	,clone: function(o) {
		var s = o == null ? new h3d_scene_Scene() : o;
		s.camera = this.camera.clone();
		h3d_scene_Object.prototype.clone.call(this,s);
		return s;
	}
	,dispose: function() {
		if((this.flags & 32) != 0) {
			this.onRemove();
		}
		this.ctx.dispose();
		if(this.renderer != null) {
			this.renderer.dispose();
			this.set_renderer(new h3d_scene_Renderer());
		}
	}
	,addEventTarget: function(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,syncOnly: function(et) {
		var engine = h3d_Engine.CURRENT;
		this.setElapsedTime(et);
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.syncRec(this.ctx);
		this.ctx.camera = null;
		this.ctx.engine = null;
		this.ctx.scene = null;
	}
	,computeStatic: function() {
		var old = this.ctx.elapsedTime;
		this.ctx.elapsedTime = 0;
		this.ctx.computingStatic = true;
		this.render(h3d_Engine.CURRENT);
		this.ctx.computingStatic = false;
		this.ctx.elapsedTime = old;
	}
	,onContextLost: function() {
		this.ctx.wasContextLost = true;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,1);
		}
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.renderer.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		var passes = [];
		var passIndex = -1;
		var _g = 0;
		var _g1 = this.ctx.passes.length;
		while(_g < _g1) {
			var passId = _g++;
			var curPass = this.ctx.passes[passId];
			if(curPass == null) {
				continue;
			}
			var pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d_scene_PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			var _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(!this.ctx.computingStatic && this.checkPasses) {
			var _g = 0;
			while(_g < passes.length) {
				var p = passes[_g];
				++_g;
				if(!p.rendered) {
					haxe_Log.trace("Pass " + p.name + " has not been rendered : don't know how to handle.",{ fileName : "h3d/scene/Scene.hx", lineNumber : 380, className : "h3d.scene.Scene", methodName : "render"});
				}
			}
		}
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.wasContextLost = false;
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
		var _g = 0;
		var _g1 = passIndex;
		while(_g < _g1) {
			var i = _g++;
			var p = this.ctx.cachedPassObjects[i];
			p.name = null;
			var _this = p.passes;
			_this.current = null;
			_this.discarded = _this.lastDisc = null;
		}
	}
	,setOutputTarget: function(engine,tex) {
		if(tex != null) {
			if(this.prevDB != null) {
				throw haxe_Exception.thrown("missing setOutputTarget()");
			}
			engine.pushTarget(tex);
			engine.width = tex.width;
			engine.height = tex.height;
			this.prevDB = this.ctx.textures.defaultDepthBuffer;
			this.prevEngine = engine;
			this.ctx.textures.defaultDepthBuffer = tex.depthBuffer;
		} else {
			this.prevEngine.popTarget();
			this.prevEngine.width = this.prevDB.width;
			this.prevEngine.height = this.prevDB.height;
			this.ctx.textures.defaultDepthBuffer = this.prevDB;
			this.prevDB = null;
			this.prevEngine = null;
		}
	}
	,__class__: h3d_scene_Scene
});
var h3d_scene_Joint = function(skin,j) {
	h3d_scene_Object.call(this,null);
	this.name = j.name;
	this.skin = skin;
	this.parent = skin;
	this.index = j.index;
};
$hxClasses["h3d.scene.Joint"] = h3d_scene_Joint;
h3d_scene_Joint.__name__ = "h3d.scene.Joint";
h3d_scene_Joint.__super__ = h3d_scene_Object;
h3d_scene_Joint.prototype = $extend(h3d_scene_Object.prototype,{
	getObjectByName: function(name) {
		var sk = this.skin.getSkinData();
		var j = sk.namedJoints.h[name];
		if(j == null) {
			return null;
		}
		var cur = sk.allJoints[this.index];
		if(cur.index != this.index) {
			throw haxe_Exception.thrown("assert");
		}
		var jp = j.parent;
		while(jp != null) {
			if(jp == cur) {
				var jo = new h3d_scene_Joint(this.skin,j);
				jo.parent = this;
				return jo;
			}
			jp = jp.parent;
		}
		return null;
	}
	,syncPos: function() {
		var p = this.parent;
		while(p != null) {
			if((p.flags & 1) != 0) {
				if(this.skin.jointsAbsPosInv == null) {
					var this1 = new h3d_MatrixImpl();
					this.skin.jointsAbsPosInv = this1;
					this.skin.jointsAbsPosInv.zero();
				}
				if(this.skin.jointsAbsPosInv._44 == 0) {
					this.skin.jointsAbsPosInv.inverse3x4(this.parent.absPos);
				}
				this.parent.syncPos();
				this.lastFrame = -1;
				break;
			}
			p = p.parent;
		}
		if(this.lastFrame != this.skin.lastFrame) {
			this.lastFrame = this.skin.lastFrame;
			this.absPos.load(this.skin.currentAbsPose[this.index]);
			if(this.skin.jointsAbsPosInv != null && this.skin.jointsAbsPosInv._44 != 0) {
				this.absPos.multiply3x4(this.absPos,this.skin.jointsAbsPosInv);
				this.absPos.multiply3x4(this.absPos,this.parent.absPos);
			}
		}
	}
	,__class__: h3d_scene_Joint
});
var h3d_scene_Skin = function(s,mat,parent) {
	this.enableRetargeting = true;
	h3d_scene_MultiMaterial.call(this,null,mat,parent);
	if(s != null) {
		this.setSkinData(s);
	}
};
$hxClasses["h3d.scene.Skin"] = h3d_scene_Skin;
h3d_scene_Skin.__name__ = "h3d.scene.Skin";
h3d_scene_Skin.__super__ = h3d_scene_MultiMaterial;
h3d_scene_Skin.prototype = $extend(h3d_scene_MultiMaterial.prototype,{
	clone: function(o) {
		var s = o == null ? new h3d_scene_Skin(null,this.materials.slice()) : o;
		h3d_scene_MultiMaterial.prototype.clone.call(this,s);
		s.setSkinData(this.skinData);
		s.currentRelPose = this.currentRelPose.slice();
		return s;
	}
	,addBoundsRec: function(b,relativeTo) {
		var old = this.primitive;
		this.set_primitive(null);
		h3d_scene_MultiMaterial.prototype.addBoundsRec.call(this,b,relativeTo);
		this.set_primitive(old);
		if((this.flags & 512) != 0) {
			return;
		}
		this.syncJoints();
		if(this.skinData.vertexWeights == null) {
			(js_Boot.__cast(this.primitive , h3d_prim_HMDModel)).loadSkin(this.skinData);
		}
		var _this = this.getAbsPos();
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var absScale_x = x;
		var absScale_y = y;
		var absScale_z = z;
		absScale_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
		absScale_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
		absScale_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
		if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
			absScale_x *= -1;
			absScale_y *= -1;
			absScale_z *= -1;
		}
		var scale = Math.max(Math.max(absScale_x,absScale_y),absScale_z);
		var _g = 0;
		var _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			if(j.offsetRay < 0) {
				continue;
			}
			var m = this.currentPalette[j.bindIndex];
			var _this = j.offsets;
			var x = _this.xMin;
			var y = _this.yMin;
			var z = _this.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var pt_x = x1;
			var pt_y = y1;
			var pt_z = z1;
			if(m != null) {
				var px = pt_x * m._11 + pt_y * m._21 + pt_z * m._31 + m._41;
				var py = pt_x * m._12 + pt_y * m._22 + pt_z * m._32 + m._42;
				var pz = pt_x * m._13 + pt_y * m._23 + pt_z * m._33 + m._43;
				pt_x = px;
				pt_y = py;
				pt_z = pz;
				var x2 = pt_x;
				var y2 = pt_y;
				var z2 = pt_z;
				var r = j.offsetRay * scale;
				if(x2 - r < b.xMin) {
					b.xMin = x2 - r;
				}
				if(x2 + r > b.xMax) {
					b.xMax = x2 + r;
				}
				if(y2 - r < b.yMin) {
					b.yMin = y2 - r;
				}
				if(y2 + r > b.yMax) {
					b.yMax = y2 + r;
				}
				if(z2 - r < b.zMin) {
					b.zMin = z2 - r;
				}
				if(z2 + r > b.zMax) {
					b.zMax = z2 + r;
				}
				var _this1 = j.offsets;
				var x3 = _this1.xMax;
				var y3 = _this1.yMax;
				var z3 = _this1.zMax;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				var x4 = x3;
				var y4 = y3;
				var z4 = z3;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var pt_x1 = x4;
				var pt_y1 = y4;
				var pt_z1 = z4;
				var px1 = pt_x1 * m._11 + pt_y1 * m._21 + pt_z1 * m._31 + m._41;
				var py1 = pt_x1 * m._12 + pt_y1 * m._22 + pt_z1 * m._32 + m._42;
				var pz1 = pt_x1 * m._13 + pt_y1 * m._23 + pt_z1 * m._33 + m._43;
				pt_x1 = px1;
				pt_y1 = py1;
				pt_z1 = pz1;
				var x5 = pt_x1;
				var y5 = pt_y1;
				var z5 = pt_z1;
				var r1 = j.offsetRay * scale;
				if(x5 - r1 < b.xMin) {
					b.xMin = x5 - r1;
				}
				if(x5 + r1 > b.xMax) {
					b.xMax = x5 + r1;
				}
				if(y5 - r1 < b.yMin) {
					b.yMin = y5 - r1;
				}
				if(y5 + r1 > b.yMax) {
					b.yMax = y5 + r1;
				}
				if(z5 - r1 < b.zMin) {
					b.zMin = z5 - r1;
				}
				if(z5 + r1 > b.zMax) {
					b.zMax = z5 + r1;
				}
			}
		}
	}
	,getCurrentSkeletonBounds: function() {
		this.syncJoints();
		var b = new h3d_col_Bounds();
		var _g = 0;
		var _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			if(j.bindIndex < 0) {
				continue;
			}
			var r = this.currentAbsPose[j.index];
			var x = r._41;
			var y = r._42;
			var z = r._43;
			if(x < b.xMin) {
				b.xMin = x;
			}
			if(x > b.xMax) {
				b.xMax = x;
			}
			if(y < b.yMin) {
				b.yMin = y;
			}
			if(y > b.yMax) {
				b.yMax = y;
			}
			if(z < b.zMin) {
				b.zMin = z;
			}
			if(z > b.zMax) {
				b.zMax = z;
			}
		}
		return b;
	}
	,getObjectByName: function(name) {
		if(this.skinData != null && this.skinData.name == name) {
			return this;
		}
		var o = h3d_scene_MultiMaterial.prototype.getObjectByName.call(this,name);
		if(o != null) {
			return o;
		}
		if(this.skinData != null) {
			var j = this.skinData.namedJoints.h[name];
			if(j != null) {
				return new h3d_scene_Joint(this,j);
			}
		}
		return null;
	}
	,getLocalCollider: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,getGlobalCollider: function() {
		var col = js_Boot.__cast(this.primitive.getCollider() , h3d_col_OptimizedCollider);
		(js_Boot.__cast(this.primitive , h3d_prim_HMDModel)).loadSkin(this.skinData);
		return new h3d_col_SkinCollider(this,js_Boot.__cast(col.b , h3d_col_PolygonBuffer));
	}
	,calcAbsPos: function() {
		h3d_scene_MultiMaterial.prototype.calcAbsPos.call(this);
		this.jointsUpdated = true;
	}
	,getSkinData: function() {
		return this.skinData;
	}
	,setSkinData: function(s,shaderInit) {
		if(shaderInit == null) {
			shaderInit = true;
		}
		this.skinData = s;
		this.jointsUpdated = true;
		this.set_primitive(s.primitive);
		if(shaderInit) {
			var hasNormalMap = false;
			var _g = 0;
			var _g1 = this.materials;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				if(m != null && m.get_normalMap() != null) {
					hasNormalMap = true;
					break;
				}
			}
			this.skinShader = hasNormalMap ? new h3d_shader_SkinTangent() : new h3d_shader_Skin();
			var _this = this.skinShader;
			_this.constModified = true;
			_this.fourBonesByVertex__ = this.skinData.bonesPerVertex == 4;
			var maxBones = 0;
			if(this.skinData.splitJoints != null) {
				var _g = 0;
				var _g1 = this.skinData.splitJoints;
				while(_g < _g1.length) {
					var s = _g1[_g];
					++_g;
					if(s.joints.length > maxBones) {
						maxBones = s.joints.length;
					}
				}
			} else {
				maxBones = this.skinData.boundJoints.length;
			}
			if(this.skinShader.MaxBones__ < maxBones) {
				var _this = this.skinShader;
				_this.constModified = true;
				_this.MaxBones__ = maxBones;
			}
			var _g = 0;
			var _g1 = this.materials;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				if(m != null) {
					var s = m.passes.getShader(h3d_shader_SkinTangent);
					if(s != null) {
						m.passes.removeShader(s);
					}
					if(m.get_normalMap() != null) {
						m.passes.addShaderAtIndex(this.skinShader,m.passes.getShaderIndex(m.normalShader) + 1);
					} else {
						m.passes.addShader(this.skinShader);
					}
					if(this.skinData.splitJoints != null) {
						m.passes.set_dynamicParameters(true);
					}
				}
			}
		}
		this.currentRelPose = [];
		this.currentAbsPose = [];
		this.currentPalette = [];
		this.paletteChanged = true;
		var _g = 0;
		var _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			this.currentAbsPose.push(h3d_Matrix.I());
		}
		var _g = 0;
		var _g1 = this.skinData.boundJoints.length;
		while(_g < _g1) {
			var i = _g++;
			this.currentPalette.push(h3d_Matrix.I());
		}
		if(this.skinData.splitJoints != null) {
			this.splitPalette = [];
			var _g = 0;
			var _g1 = this.skinData.splitJoints;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var tmp = this.splitPalette;
				var _g2 = [];
				var _g3 = 0;
				var _g4 = a.joints;
				while(_g3 < _g4.length) {
					var j = _g4[_g3];
					++_g3;
					_g2.push(this.currentPalette[j.bindIndex]);
				}
				tmp.push(_g2);
			}
		} else {
			this.splitPalette = null;
		}
	}
	,sync: function(ctx) {
		if(!ctx.visibleFlag && (this.flags & 64) == 0) {
			return;
		}
		this.syncJoints();
	}
	,syncJoints: function() {
		if(!this.jointsUpdated) {
			return;
		}
		var tmpMat = h3d_scene_Skin.TMP_MAT;
		var _g = 0;
		var _g1 = this.skinData.allJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			if(j.follow != null) {
				continue;
			}
			var id = j.index;
			var m = this.currentAbsPose[id];
			var r = this.currentRelPose[id];
			var bid = j.bindIndex;
			if(r == null) {
				r = j.defMat;
			} else if(j.retargetAnim && this.enableRetargeting) {
				tmpMat.load(r);
				r = tmpMat;
				r._41 = j.defMat._41;
				r._42 = j.defMat._42;
				r._43 = j.defMat._43;
			}
			if(j.parent == null) {
				var b = this.absPos;
				var m11 = r._11;
				var m12 = r._12;
				var m13 = r._13;
				var m21 = r._21;
				var m22 = r._22;
				var m23 = r._23;
				var a31 = r._31;
				var a32 = r._32;
				var a33 = r._33;
				var a41 = r._41;
				var a42 = r._42;
				var a43 = r._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				m._11 = m11 * b11 + m12 * b21 + m13 * b31;
				m._12 = m11 * b12 + m12 * b22 + m13 * b32;
				m._13 = m11 * b13 + m12 * b23 + m13 * b33;
				m._14 = 0;
				m._21 = m21 * b11 + m22 * b21 + m23 * b31;
				m._22 = m21 * b12 + m22 * b22 + m23 * b32;
				m._23 = m21 * b13 + m22 * b23 + m23 * b33;
				m._24 = 0;
				m._31 = a31 * b11 + a32 * b21 + a33 * b31;
				m._32 = a31 * b12 + a32 * b22 + a33 * b32;
				m._33 = a31 * b13 + a32 * b23 + a33 * b33;
				m._34 = 0;
				m._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				m._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				m._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				m._44 = 1;
			} else {
				var b1 = this.currentAbsPose[j.parent.index];
				var m111 = r._11;
				var m121 = r._12;
				var m131 = r._13;
				var m211 = r._21;
				var m221 = r._22;
				var m231 = r._23;
				var a311 = r._31;
				var a321 = r._32;
				var a331 = r._33;
				var a411 = r._41;
				var a421 = r._42;
				var a431 = r._43;
				var b111 = b1._11;
				var b121 = b1._12;
				var b131 = b1._13;
				var b211 = b1._21;
				var b221 = b1._22;
				var b231 = b1._23;
				var b311 = b1._31;
				var b321 = b1._32;
				var b331 = b1._33;
				var b411 = b1._41;
				var b421 = b1._42;
				var b431 = b1._43;
				m._11 = m111 * b111 + m121 * b211 + m131 * b311;
				m._12 = m111 * b121 + m121 * b221 + m131 * b321;
				m._13 = m111 * b131 + m121 * b231 + m131 * b331;
				m._14 = 0;
				m._21 = m211 * b111 + m221 * b211 + m231 * b311;
				m._22 = m211 * b121 + m221 * b221 + m231 * b321;
				m._23 = m211 * b131 + m221 * b231 + m231 * b331;
				m._24 = 0;
				m._31 = a311 * b111 + a321 * b211 + a331 * b311;
				m._32 = a311 * b121 + a321 * b221 + a331 * b321;
				m._33 = a311 * b131 + a321 * b231 + a331 * b331;
				m._34 = 0;
				m._41 = a411 * b111 + a421 * b211 + a431 * b311 + b411;
				m._42 = a411 * b121 + a421 * b221 + a431 * b321 + b421;
				m._43 = a411 * b131 + a421 * b231 + a431 * b331 + b431;
				m._44 = 1;
			}
			if(bid >= 0) {
				var _this = this.currentPalette[bid];
				var a = j.transPos;
				var m112 = a._11;
				var m122 = a._12;
				var m132 = a._13;
				var m212 = a._21;
				var m222 = a._22;
				var m232 = a._23;
				var a312 = a._31;
				var a322 = a._32;
				var a332 = a._33;
				var a412 = a._41;
				var a422 = a._42;
				var a432 = a._43;
				var b112 = m._11;
				var b122 = m._12;
				var b132 = m._13;
				var b212 = m._21;
				var b222 = m._22;
				var b232 = m._23;
				var b312 = m._31;
				var b322 = m._32;
				var b332 = m._33;
				var b412 = m._41;
				var b422 = m._42;
				var b432 = m._43;
				_this._11 = m112 * b112 + m122 * b212 + m132 * b312;
				_this._12 = m112 * b122 + m122 * b222 + m132 * b322;
				_this._13 = m112 * b132 + m122 * b232 + m132 * b332;
				_this._14 = 0;
				_this._21 = m212 * b112 + m222 * b212 + m232 * b312;
				_this._22 = m212 * b122 + m222 * b222 + m232 * b322;
				_this._23 = m212 * b132 + m222 * b232 + m232 * b332;
				_this._24 = 0;
				_this._31 = a312 * b112 + a322 * b212 + a332 * b312;
				_this._32 = a312 * b122 + a322 * b222 + a332 * b322;
				_this._33 = a312 * b132 + a322 * b232 + a332 * b332;
				_this._34 = 0;
				_this._41 = a412 * b112 + a422 * b212 + a432 * b312 + b412;
				_this._42 = a412 * b122 + a422 * b222 + a432 * b322 + b422;
				_this._43 = a412 * b132 + a422 * b232 + a432 * b332 + b432;
				_this._44 = 1;
			}
		}
		this.skinShader.bonesMatrixes__ = this.currentPalette;
		if(this.jointsAbsPosInv != null) {
			this.jointsAbsPosInv._44 = 0;
		}
		this.jointsUpdated = false;
	}
	,emit: function(ctx) {
		this.syncJoints();
		if(this.splitPalette == null) {
			h3d_scene_MultiMaterial.prototype.emit.call(this,ctx);
		} else {
			var _g = 0;
			var _g1 = this.splitPalette.length;
			while(_g < _g1) {
				var i = _g++;
				var m = this.materials[this.skinData.splitJoints[i].material];
				if(m != null) {
					var index = i;
					if(index == null) {
						index = 0;
					}
					var p = m.passes;
					while(p != null) {
						if(!p.culled) {
							ctx.emitPass(p,this).index = index;
						}
						p = p.nextPass;
					}
				}
			}
		}
		if(this.showJoints) {
			if(this.jointsGraphics == null) {
				this.jointsGraphics = new h3d_scene_Graphics(this);
				this.jointsGraphics.material.passes.depth(false,h3d_mat_Compare.Always);
				this.jointsGraphics.material.passes.setPassName("alpha");
			}
			var topParent = this;
			while(topParent.parent != null) topParent = topParent.parent;
			this.jointsGraphics.set_follow(topParent);
			var g = this.jointsGraphics;
			g.clear();
			var _g = 0;
			var _g1 = this.skinData.allJoints;
			while(_g < _g1.length) {
				var j = _g1[_g];
				++_g;
				var m = this.currentAbsPose[j.index];
				var mp = j.parent == null ? this.absPos : this.currentAbsPose[j.parent.index];
				g.lineStyle(1,j.parent == null ? -16776961 : -256);
				g.moveTo(mp._41,mp._42,mp._43);
				g.lineTo(m._41,m._42,m._43);
			}
		} else if(this.jointsGraphics != null) {
			var _this = this.jointsGraphics;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.jointsGraphics = null;
		}
	}
	,draw: function(ctx) {
		if(this.splitPalette == null) {
			h3d_scene_MultiMaterial.prototype.draw.call(this,ctx);
		} else {
			var i = ctx.drawPass.index;
			this.skinShader.bonesMatrixes__ = this.splitPalette[i];
			this.primitive.selectMaterial(i);
			ctx.uploadParams();
			this.primitive.render(ctx.engine);
		}
	}
	,__class__: h3d_scene_Skin
});
var h3d_scene_fwd_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = -1;
	h3d_scene_Light.call(this,shader,parent);
};
$hxClasses["h3d.scene.fwd.Light"] = h3d_scene_fwd_Light;
h3d_scene_fwd_Light.__name__ = "h3d.scene.fwd.Light";
h3d_scene_fwd_Light.__super__ = h3d_scene_Light;
h3d_scene_fwd_Light.prototype = $extend(h3d_scene_Light.prototype,{
	get_enableSpecular: function() {
		return false;
	}
	,set_enableSpecular: function(b) {
		if(b) {
			throw haxe_Exception.thrown("Not implemented for this light");
		}
		return false;
	}
	,__class__: h3d_scene_fwd_Light
});
var h3d_scene_fwd_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	h3d_scene_LightSystem.call(this);
	var x = 0.5;
	var y = 0.5;
	var z = 0.5;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.ambientLight = new h3d_VectorImpl(x,y,z);
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
$hxClasses["h3d.scene.fwd.LightSystem"] = h3d_scene_fwd_LightSystem;
h3d_scene_fwd_LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d_scene_fwd_LightSystem.__super__ = h3d_scene_LightSystem;
h3d_scene_fwd_LightSystem.prototype = $extend(h3d_scene_LightSystem.prototype,{
	get_additiveLighting: function() {
		var value = this.ambientShader;
		return (((value) instanceof h3d_shader_AmbientLight) ? value : null).additive__;
	}
	,set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = ((value) instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		h3d_scene_LightSystem.prototype.initLights.call(this,ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,cullLights: function() {
		var ll = this.ctx.lights;
		var prev = null;
		var s = new h3d_col_Sphere();
		while(ll != null) {
			var l = ((ll) instanceof h3d_scene_fwd_Light) ? ll : null;
			if(l != null) {
				s.x = l.absPos._41;
				s.y = l.absPos._42;
				s.z = l.absPos._43;
				s.r = l.cullingDistance;
			}
			if(l == null || l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = ll.next;
				} else {
					prev.next = ll.next;
				}
				ll = ll.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = ll;
			ll = ll.next;
		}
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var ll = this.ctx.lights;
			while(ll != null) {
				var l = ((ll) instanceof h3d_scene_fwd_Light) ? ll : null;
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					if(dz1 == null) {
						dz1 = 0.;
					}
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				ll = ll.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l = this.ctx.lights;
		var i = 0;
		while(l != null) {
			if(i++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l.shader,shaders);
			l = l.next;
		}
		return shaders;
	}
	,__class__: h3d_scene_fwd_LightSystem
});
var h3d_scene_fwd_DepthPass = function() {
	this.enableSky = false;
	h3d_pass_Output.call(this,"depth",[hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))]);
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
$hxClasses["h3d.scene.fwd.DepthPass"] = h3d_scene_fwd_DepthPass;
h3d_scene_fwd_DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d_scene_fwd_DepthPass.__super__ = h3d_pass_Output;
h3d_scene_fwd_DepthPass.prototype = $extend(h3d_pass_Output.prototype,{
	draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		h3d_pass_Output.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.globals.map.h[this.depthMapId] = { texture : texture};
	}
	,__class__: h3d_scene_fwd_DepthPass
});
var h3d_scene_fwd_NormalPass = function() {
	h3d_pass_Output.call(this,"normal",[hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))]);
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
$hxClasses["h3d.scene.fwd.NormalPass"] = h3d_scene_fwd_NormalPass;
h3d_scene_fwd_NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d_scene_fwd_NormalPass.__super__ = h3d_pass_Output;
h3d_scene_fwd_NormalPass.prototype = $extend(h3d_pass_Output.prototype,{
	draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		h3d_pass_Output.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.globals.map.h[this.normalMapId] = texture;
	}
	,__class__: h3d_scene_fwd_NormalPass
});
var h3d_scene_fwd_Renderer = function() {
	this.shadow = new h3d_pass_DefaultShadowMap(1024);
	this.normal = new h3d_scene_fwd_NormalPass();
	this.depth = new h3d_scene_fwd_DepthPass();
	h3d_scene_Renderer.call(this);
	this.defaultPass = new h3d_pass_Output("default");
	this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
};
$hxClasses["h3d.scene.fwd.Renderer"] = h3d_scene_fwd_Renderer;
h3d_scene_fwd_Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d_scene_fwd_Renderer.__super__ = h3d_scene_Renderer;
h3d_scene_fwd_Renderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	get_def: function() {
		return this.defaultPass;
	}
	,renderPass: function(p,passes,sort) {
		p.draw(passes,sort);
	}
	,getPassByName: function(name) {
		if(name == "alpha" || name == "additive") {
			return this.defaultPass;
		}
		return h3d_scene_Renderer.prototype.getPassByName.call(this,name);
	}
	,render: function() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
	,__class__: h3d_scene_fwd_Renderer
});
var h3d_scene_pbr_Light = function(shader,parent) {
	this.enableForward = true;
	this.occlusionFactor = 0.;
	this.isMainLight = false;
	this.power = 1.;
	h3d_scene_Light.call(this,shader,parent);
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this._color = new h3d_VectorImpl(x,y,z);
	if(this.shadows == null) {
		this.shadows = new h3d_pass_Shadows(this);
	}
};
$hxClasses["h3d.scene.pbr.Light"] = h3d_scene_pbr_Light;
h3d_scene_pbr_Light.__name__ = "h3d.scene.pbr.Light";
h3d_scene_pbr_Light.__super__ = h3d_scene_Light;
h3d_scene_pbr_Light.prototype = $extend(h3d_scene_Light.prototype,{
	onRemove: function() {
		h3d_scene_Light.prototype.onRemove.call(this);
		if(this.shadows != null) {
			this.shadows.dispose();
		}
	}
	,sync: function(ctx) {
		h3d_scene_Light.prototype.sync.call(this,ctx);
		if(this.isMainLight) {
			ctx.globals.set("mainLightColor",this._color);
			ctx.globals.set("mainLightPower",this.power);
			var x = this.absPos._41;
			var y = this.absPos._42;
			var z = this.absPos._43;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this1 = new h3d_VectorImpl(x,y,z);
			ctx.globals.set("mainLightPos",this1);
			var _this = this.absPos;
			var x = _this._11;
			var y = _this._12;
			var z = _this._13;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var v = new h3d_VectorImpl(x,y,z);
			var k = v.x * v.x + v.y * v.y + v.z * v.z;
			if(k < 1e-20) {
				k = 0;
			} else {
				k = 1. / Math.sqrt(k);
			}
			v.x *= k;
			v.y *= k;
			v.z *= k;
			ctx.globals.set("mainLightDir",v);
			var v = this.shadows.getShadowTex();
			ctx.globals.set("mainLightShadowMap",v);
			var v = this.shadows.getShadowProj();
			ctx.globals.set("mainLightViewProj",v);
		}
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(v) {
		return this._color = v;
	}
	,__class__: h3d_scene_pbr_Light
});
var h3d_scene_pbr_DirLight = function(dir,parent,cascade) {
	this.pbr = new h3d_shader_pbr_DirLight();
	this.shadows = cascade ? new h3d_pass_CascadeShadowMap(this) : new h3d_pass_DirShadowMap(this);
	h3d_scene_pbr_Light.call(this,this.pbr,parent);
	if(dir != null) {
		this.setDirection(dir);
	}
};
$hxClasses["h3d.scene.pbr.DirLight"] = h3d_scene_pbr_DirLight;
h3d_scene_pbr_DirLight.__name__ = "h3d.scene.pbr.DirLight";
h3d_scene_pbr_DirLight.__super__ = h3d_scene_pbr_Light;
h3d_scene_pbr_DirLight.prototype = $extend(h3d_scene_pbr_Light.prototype,{
	clone: function(o) {
		var dl = o == null ? new h3d_scene_pbr_DirLight(null) : o;
		h3d_scene_pbr_Light.prototype.clone.call(this,dl);
		return dl;
	}
	,getShadowDirection: function() {
		var _this = this.absPos;
		var x = _this._11;
		var y = _this._12;
		var z = _this._13;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v = new h3d_VectorImpl(x,y,z);
		var k = v.x * v.x + v.y * v.y + v.z * v.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,emit: function(ctx) {
		var _this = this.pbr.lightColor__;
		var v = this._color;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var this1 = this.pbr.lightColor__;
		var v = this.power * this.power;
		this1.x *= v;
		this1.y *= v;
		this1.z *= v;
		var _this = this.pbr.lightDir__;
		var _this1 = this.absPos;
		var x = _this1._11;
		var y = _this1._12;
		var z = _this1._13;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var k = v_x * v_x + v_y * v_y + v_z * v_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		v_x *= k;
		v_y *= k;
		v_z *= k;
		_this.x = v_x;
		_this.y = v_y;
		_this.z = v_z;
		var this1 = this.pbr.lightDir__;
		this1.x *= -1;
		this1.y *= -1;
		this1.z *= -1;
		var _this = this.pbr.lightDir__;
		var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		this.pbr.occlusionFactor__ = this.occlusionFactor;
		h3d_scene_pbr_Light.prototype.emit.call(this,ctx);
	}
	,__class__: h3d_scene_pbr_DirLight
});
var h3d_scene_pbr_IrradBase = function() {
	this.samplesBits__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.scene.pbr.IrradBase"] = h3d_scene_pbr_IrradBase;
h3d_scene_pbr_IrradBase.__name__ = "h3d.scene.pbr.IrradBase";
h3d_scene_pbr_IrradBase.__super__ = h3d_shader_ScreenShader;
h3d_scene_pbr_IrradBase.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_samplesBits: function() {
		return this.samplesBits__;
	}
	,set_samplesBits: function(_v) {
		this.constModified = true;
		return this.samplesBits__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.samplesBits__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("samplesBits" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.samplesBits__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_scene_pbr_IrradBase.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.samplesBits__ = this.samplesBits__;
		return s;
	}
	,__class__: h3d_scene_pbr_IrradBase
});
var h3d_scene_pbr_IrradShader = function() {
	this.hdrMax__ = 0;
	this.cubeScaleFactor__ = 0;
	this.cubeSize__ = 0;
	this.roughness__ = 0;
	this.faceMatrix__ = new h3d_MatrixImpl();
	h3d_scene_pbr_IrradBase.call(this);
};
$hxClasses["h3d.scene.pbr.IrradShader"] = h3d_scene_pbr_IrradShader;
h3d_scene_pbr_IrradShader.__name__ = "h3d.scene.pbr.IrradShader";
h3d_scene_pbr_IrradShader.__super__ = h3d_scene_pbr_IrradBase;
h3d_scene_pbr_IrradShader.prototype = $extend(h3d_scene_pbr_IrradBase.prototype,{
	get_faceMatrix: function() {
		return this.faceMatrix__;
	}
	,set_faceMatrix: function(_v) {
		return this.faceMatrix__ = _v;
	}
	,get_envMap: function() {
		return this.envMap__;
	}
	,set_envMap: function(_v) {
		return this.envMap__ = _v;
	}
	,get_isSpecular: function() {
		return this.isSpecular__;
	}
	,set_isSpecular: function(_v) {
		this.constModified = true;
		return this.isSpecular__ = _v;
	}
	,get_isSRGB: function() {
		return this.isSRGB__;
	}
	,set_isSRGB: function(_v) {
		this.constModified = true;
		return this.isSRGB__ = _v;
	}
	,get_roughness: function() {
		return this.roughness__;
	}
	,set_roughness: function(_v) {
		return this.roughness__ = _v;
	}
	,get_cubeSize: function() {
		return this.cubeSize__;
	}
	,set_cubeSize: function(_v) {
		return this.cubeSize__ = _v;
	}
	,get_cubeScaleFactor: function() {
		return this.cubeScaleFactor__;
	}
	,set_cubeScaleFactor: function(_v) {
		return this.cubeScaleFactor__ = _v;
	}
	,get_hdrMax: function() {
		return this.hdrMax__;
	}
	,set_hdrMax: function(_v) {
		return this.hdrMax__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.samplesBits__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("samplesBits" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isSpecular__) {
			this.constBits |= 256;
		}
		if(this.isSRGB__) {
			this.constBits |= 512;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.samplesBits__;
		case 2:
			return this.faceMatrix__;
		case 3:
			return this.envMap__;
		case 4:
			return this.isSpecular__;
		case 5:
			return this.isSRGB__;
		case 6:
			return this.roughness__;
		case 7:
			return this.cubeSize__;
		case 8:
			return this.cubeScaleFactor__;
		case 9:
			return this.hdrMax__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 6:
			return this.roughness__;
		case 7:
			return this.cubeSize__;
		case 8:
			return this.cubeScaleFactor__;
		case 9:
			return this.hdrMax__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_scene_pbr_IrradShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.samplesBits__ = this.samplesBits__;
		s.faceMatrix__ = this.faceMatrix__;
		s.envMap__ = this.envMap__;
		s.isSpecular__ = this.isSpecular__;
		s.isSRGB__ = this.isSRGB__;
		s.roughness__ = this.roughness__;
		s.cubeSize__ = this.cubeSize__;
		s.cubeScaleFactor__ = this.cubeScaleFactor__;
		s.hdrMax__ = this.hdrMax__;
		return s;
	}
	,__class__: h3d_scene_pbr_IrradShader
});
var h3d_scene_pbr_IrradLut = function() {
	h3d_scene_pbr_IrradBase.call(this);
};
$hxClasses["h3d.scene.pbr.IrradLut"] = h3d_scene_pbr_IrradLut;
h3d_scene_pbr_IrradLut.__name__ = "h3d.scene.pbr.IrradLut";
h3d_scene_pbr_IrradLut.__super__ = h3d_scene_pbr_IrradBase;
h3d_scene_pbr_IrradLut.prototype = $extend(h3d_scene_pbr_IrradBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.samplesBits__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("samplesBits" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.samplesBits__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_scene_pbr_IrradLut.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.samplesBits__ = this.samplesBits__;
		return s;
	}
	,__class__: h3d_scene_pbr_IrradLut
});
var h3d_scene_pbr_PanoramaToCube = function() {
	this.aboveThresholdScale__ = 0;
	this.threshold__ = 0;
	this.faceMatrix__ = new h3d_MatrixImpl();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.scene.pbr.PanoramaToCube"] = h3d_scene_pbr_PanoramaToCube;
h3d_scene_pbr_PanoramaToCube.__name__ = "h3d.scene.pbr.PanoramaToCube";
h3d_scene_pbr_PanoramaToCube.__super__ = h3d_shader_ScreenShader;
h3d_scene_pbr_PanoramaToCube.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_faceMatrix: function() {
		return this.faceMatrix__;
	}
	,set_faceMatrix: function(_v) {
		return this.faceMatrix__ = _v;
	}
	,get_threshold: function() {
		return this.threshold__;
	}
	,set_threshold: function(_v) {
		return this.threshold__ = _v;
	}
	,get_aboveThresholdScale: function() {
		return this.aboveThresholdScale__;
	}
	,set_aboveThresholdScale: function(_v) {
		return this.aboveThresholdScale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.faceMatrix__;
		case 3:
			return this.threshold__;
		case 4:
			return this.aboveThresholdScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 3:
			return this.threshold__;
		case 4:
			return this.aboveThresholdScale__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_scene_pbr_PanoramaToCube.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texture__ = this.texture__;
		s.faceMatrix__ = this.faceMatrix__;
		s.threshold__ = this.threshold__;
		s.aboveThresholdScale__ = this.aboveThresholdScale__;
		return s;
	}
	,__class__: h3d_scene_pbr_PanoramaToCube
});
var h3d_scene_pbr_CubeToPanorama = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.scene.pbr.CubeToPanorama"] = h3d_scene_pbr_CubeToPanorama;
h3d_scene_pbr_CubeToPanorama.__name__ = "h3d.scene.pbr.CubeToPanorama";
h3d_scene_pbr_CubeToPanorama.__super__ = h3d_shader_ScreenShader;
h3d_scene_pbr_CubeToPanorama.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_source: function() {
		return this.source__;
	}
	,set_source: function(_v) {
		return this.source__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.source__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_scene_pbr_CubeToPanorama.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.source__ = this.source__;
		return s;
	}
	,__class__: h3d_scene_pbr_CubeToPanorama
});
var h3d_scene_pbr_Environment = function(src,diffSize,specSize,sampleBits) {
	if(sampleBits == null) {
		sampleBits = 12;
	}
	if(specSize == null) {
		specSize = 512;
	}
	if(diffSize == null) {
		diffSize = 64;
	}
	this.rotation = 0.;
	this.power = 1.;
	this.hdrMax = 10.0;
	this.ignoredSpecLevels = 1;
	this.source = src;
	this.diffSize = diffSize;
	this.specSize = specSize;
	this.sampleBits = sampleBits;
};
$hxClasses["h3d.scene.pbr.Environment"] = h3d_scene_pbr_Environment;
h3d_scene_pbr_Environment.__name__ = "h3d.scene.pbr.Environment";
h3d_scene_pbr_Environment.getDefaultLUT = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_scene_pbr_IrradLut.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(128,128,[h3d_mat_TextureFlags.Target],h3d_scene_pbr_Environment.DEFAULT_FORMAT);
	if(h3d_scene_pbr_Environment.LUT_PIXELS == null) {
		h3d_scene_pbr_Environment.computeIrradLut(t);
		h3d_scene_pbr_Environment.LUT_PIXELS = t.capturePixels();
	} else {
		t.uploadPixels(h3d_scene_pbr_Environment.LUT_PIXELS);
	}
	engine.resCache.set(h3d_scene_pbr_IrradLut,t);
	t.realloc = function() {
		t.uploadPixels(h3d_scene_pbr_Environment.LUT_PIXELS);
	};
	return t;
};
h3d_scene_pbr_Environment.equiToCube = function(source,threshold,scale) {
	if(scale == null) {
		scale = 1.0;
	}
	if(threshold == null) {
		threshold = 1.0;
	}
	if((source.flags & 1 << h3d_mat_TextureFlags.Loading._hx_index) != 0) {
		throw haxe_Exception.thrown("Source is not ready");
	}
	if((source.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
		return source;
	}
	if(source.width != source.height * 2) {
		throw haxe_Exception.thrown("Unrecognized environment map format");
	}
	var env = new h3d_mat_Texture(source.height,source.height,[h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.Target],hxd_Pixels.isFloatFormat(source.format) ? h3d_scene_pbr_Environment.DEFAULT_FORMAT : hxd_PixelFormat.RGBA);
	var pass = new h3d_pass_ScreenFx(new h3d_scene_pbr_PanoramaToCube());
	var engine = h3d_Engine.CURRENT;
	pass.shader.texture__ = source;
	pass.shader.aboveThresholdScale__ = scale;
	pass.shader.threshold__ = threshold;
	engine.pushTarget(env,0);
	pass.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(0);
	pass.render();
	engine.popTarget();
	engine.pushTarget(env,1);
	pass.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(1);
	pass.render();
	engine.popTarget();
	engine.pushTarget(env,2);
	pass.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(2);
	pass.render();
	engine.popTarget();
	engine.pushTarget(env,3);
	pass.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(3);
	pass.render();
	engine.popTarget();
	engine.pushTarget(env,4);
	pass.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(4);
	pass.render();
	engine.popTarget();
	engine.pushTarget(env,5);
	pass.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(5);
	pass.render();
	engine.popTarget();
	return env;
};
h3d_scene_pbr_Environment.getCubeMatrix = function(face) {
	var tmp;
	switch(face) {
	case 0:
		tmp = [0,0,-1,0,0,-1,0,0,1,0,0,0];
		break;
	case 1:
		tmp = [0,0,1,0,0,-1,0,0,-1,0,0,0];
		break;
	case 2:
		tmp = [1,0,0,0,0,0,1,0,0,1,0,0];
		break;
	case 3:
		tmp = [1,0,0,0,0,0,-1,0,0,-1,0,0];
		break;
	case 4:
		tmp = [1,0,0,0,0,-1,0,0,0,0,1,0];
		break;
	default:
		tmp = [-1,0,0,0,0,-1,0,0,0,0,-1,0];
	}
	return h3d_Matrix.L(tmp);
};
h3d_scene_pbr_Environment.computeIrradLut = function(t) {
	var screen = new h3d_pass_ScreenFx(new h3d_scene_pbr_IrradLut());
	var _this = screen.shader;
	_this.constModified = true;
	_this.samplesBits__ = 12;
	var engine = h3d_Engine.CURRENT;
	engine.pushTarget(t);
	screen.render();
	engine.popTarget();
	screen.dispose();
};
h3d_scene_pbr_Environment.getDefault = function() {
	var engine = h3d_Engine.CURRENT;
	var e = engine.resCache.h[h3d_scene_pbr_Environment.__id__];
	if(e != null) {
		return e;
	}
	var SRC = hxd_res_Any.fromBytes("h3d/scene/pbr/envDefault.dds",haxe_Unserializer.run("s1083:RERTIHwAAAAPEAIACAAAABAAAABAAAAAAQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABBAAAAAAAAACAAAAD:AAAAAP8AAAAA:wAAAAD:CBBAAAAAAAAAAAAAAAAAAAAAAABviLX:aIKz:2yFs:%BlLv:hpi%:4eawP%tttL:xsnd:9va5::a2uf:ztHi:8TI3f:AxNr:s7rT:5ilxv%Km7::gJfA:2yFr:9jg7X:Zoa1:1yAs:92kr::prPT:8rN4P:p5u7:9PD0:%7r8::m5e::1dbl:7vB1:%grsv:l6fG:46gvf9qa2r:kJqs:5Slwv%Josf:k6bI:6Kouv%hoqr:uLa2::by8v:x7PD:6eXs:93c5v:Fydn:qrbO:52uy:9naVb:WVM6:3FuXP%Sk47:hYaC:2ZlXf9GRTn:S0o%:2RjUv%bmpT:kZCP:4qLi:%Mj5P:j5SZ:3h7eP98gn::dnBB:3NxQP99dUT:d3JA:21qPP9oYTf:Y10z:15eMP9hYTD:ZmYy:19hMP9YWC3:UFEr:11YNP9mYTj:amY6:2NjNf9cYjP:Y2U1:2NjNf9ZXi::V10s:1VbK:9OVSv:T1Mt:1ZXLv9ZWSz:VlYp:1VWK:9QUiz:UlYu:1pbMv9XVi7:UU8s:1lWMf9WVi7:T1Mo:05RJ:9OVCj:S1An:01QJ:9OUif:UVMp:1FPJ:9RUCj:T1Er:1VULf9VVyv:UE0o:09NKf9RUCr:T04n:05OJv9LSyX:TEwl:0tKJf9LSib:SUoi:0hJIf9NSiT:UlAo:1BSKf9KTCT:TU8l:3GKtv9uibb:eJG8:7nA2f:l4%z:2tro:8HF2v%Wpcb:bnJu:4qQlv%CjZz:dXZ3:6uppP%9u77:r7K7:4%YpP9qajr:b2w8:2FiNP9ZWy7:W1wv:1paLf9VVC7:X141:1JQK:9UUyz:Tk8n:0xPJv9MTib:Tk0l:1FRKf9QUij:doWc:4qVqv:KyM3:pa3A:2BeM:9VVyz:VFQq:1VVLf9tdGn:hoh5:3l%cf8"));
	var DIF = hxd_res_Any.fromBytes("h3d/scene/pbr/envDefault.envd.dds",haxe_Unserializer.run("s8363:RERTIHwAAAAPEAIACAAAAAgAAACAAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAEAAAAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBAAAAD%AAAAAAAAAAAAAAAAAACvxd8%7lPgPpzR6T4AAIA:LPvPPlFXzz680M8%AACAP2HyvT4fRLw%xj6zPgAAgD9:i6E%jMKfPhCzjj4AAIA:5eaDPm%ggj5RKVc%AACAP13kUT4YOFE%13wZPgAAgD9YzCc%R5EoPgzh0T0AAIA:zFYMPlwDDj536pU9AACAPwzv3z45kOE%hpXvPgAAgD8Mwc8%L9HPPkZO0z4AAIA:73q6PiU3uT58iLI%AACAPynMnD5GMJs%u46KPgAAgD8la3Y%I0l0PhKdRD4AAIA:pv8:PoiZPz5dqAU%AACAPxd:Fz62rRg%iNKtPQAAgD:Cc:89p:8BPgIGdj0AAIA:WVTYPgA%3D5Mru4%AACAP4%6yj7rbMw%quvTPgAAgD8xSLQ%6mS0PqH8rz4AAIA:K6qUPtn1kz5OGoQ%AACAPyF4Zj7LZ2U%vVM1PgAAgD:zOzA%bnowPuF86j0AAIA:x%gJPivqCz4zvJE9AACAP3jK6T1Fju89KZVIPQAAgD9Y%cg%vzDPPsWQ5T4AAIA:KA28PiMRwD4DA8w%AACAP426pz76y6k%dnSpPgAAgD%Cj4k%RViKPoCJeT4AAIA:Rm9TPk7vVD7%zCY%AACAPziXHz4ldiE%HRzMPQAAgD%O2fs9PaAAPvE4dT0AAIA::NTaPSsM4T2MNyo9AACAPwDQtz5grcA%EE3aPgAAgD%Iras%8leyPiOvwT4AAIA:LRCWPkvFmj44c54%AACAP9eXcj6D%nc%zNViPgAAgD:9QTo%lBE%PscxFD4AAIA:nZ8RPqneFD4gTbg9AACAPyCe7j155PM96ElhPQAAgD:dPdU9PdXaPT4XID0AAIA:QwqoPkJQsz6mD88%AACAP4sOmz5rKaQ%4xa2PgAAgD96iYY%ztuNPtGGlD4AAIA:BYtaPjIyZD7d21Q%AACAPwfrLD4OnzM%hvINPgAAgD82PA0%pmsSPqbWuz0AAIA:69LsPdai8z0gdWg9AACAP9BD1j0wxNs9ucYjPQAAgD9IdZg%LkClPh9RwT4AAIA:Ih6KPqxwlT4qsqg%AACAPwRGdT6SuoM%qsqLPgAAgD:SdUo%UMxXPs5UTT4AAIA:YCkmPmmVLz7pJw8%AACAPw8%Cj6XCRE%zlXBPQAAgD8SF%89uwj4PXgofT0AAIA:SNXaPehU4T2VGTc9AACAP2I6iz7zY5k%%LW0PgAAgD9D3Hs%JVmKPlLOnD4AAIA:QrBiPoj5dz5Pw4Q%AACAP3hzQD62708%UiFHPgAAgD8fkyM%1uguPiTzET4AAIA:ZFkMPrOcFD4i0889AACAP1b19z2uZAE%R0OQPQAAgD:LWOQ9UOLrPWGRVT0AAIA:nLMFPpo3CD5FSpo9AACAP6vdFz6WKhw%vg7RPQAAgD%nwDM%yzg7PiMMFT4AAIA:yYNTPq5kXj6CFEg%AACAP:zpdz4zFYM%pl6BPgAAgD:2tZA%MqmZPrOqoj4AAIA:%kifPlItqj7us7w%AACAP6O9qz5Garg%jc:TPgAAgD%AB:49k:wAPvinhD0AAIA:L68OPhuhEj5QHLU9AACAP6AGKT5EnTA%g10GPgAAgD8bckk%yhpVPoQnPT4AAIA:kY5tPqcyfj70HXw%AACAP0Nqij5YP5U%RMigPgAAgD:uRJk%O2%mPvarvD4AAIA:fgimPntRtT4:VtU%AACAP93J9D1kAfc9ESdjPQAAgD8mJgc%qhcKPoSbmj0AAIA:n3wdPgIMJD6cq%c9AACAP:3ROD56hEQ%RPcnPgAAgD%YNl0%LjxwPorabj4AAIA:9ouCPukwjz5G15w%AACAP7OvkD5UnJ8%h564PgAAgD8YXJ4%2a%vPuOo0j4AAIA:KlnzPYqr8z1MVU09AACAP5S7BD7KfwY%MXKJPQAAgD%DOhc%0%AcPrHRzT0AAIA:nXEwPieAOz5p4Bk%AACAP8xTTz6DkmI%NRldPgAAgD:8qnE%:ROGPgHOkj4AAIA:INyFPrBVlj4FXLA%AACAP:Nekj6tvaU%EZTLPgAAgD9PZ:U9aRn1PbskRz0AAIA:tjUEPul8BT7XPII9AACAP5gCFD7mSRk%:uG:PQAAgD:wYyk%QbYzPknIDD4AAIA:ChdCPtB7VD5do0k%AACAP78UXz6EKXs%vX%JPgAAgD9Xo3c%iYuNPgwCqD4AAIA:ZjKGPsu4mj4VWcA%AACAP50d:T1Jl:s9ZVlHPQAAgD%HyAc%TJMIPufugT0AAIA:dTwVPgBeGj5:Sb09AACAP0NjJz7v4zE%MsIIPgAAgD%VATs%%pJNPv1gQD4AAIA:UFBQPleJbD5fboA%AACAPxsnZD5YK4Q%qF2dPgAAgD%Km3U%2mmPPuSLsj4AAIA:ElcDPhjAAj5K6lQ9AACAP8qfDT6WmQ4%cc2NPQAAgD8Ltxk%4tYePvtfxz0AAIA::OIoPpkCMz45nwg%AACAPw5iOT5jMUs%jrM6PgAAgD:U6kk%RHFlPkq5dD4AAIA:iotYPon0ez6T5pM%AACAP6bgZz66e4g%lmmpPgAAgD%NlQc%BUcHPlcgaz0AAIA:bGMRPqnXEj5Hp5k9AACAPyjRGz40GyE%trnOPQAAgD9azig%:soyPukdCD4AAIA:b4E2PrIoSD5RkDU%AACAP8tqRT7Fh18%PupoPgAAgD:h%1A%zIdyPvYqiz4AAIA:cVFdPsWZgj4RrZ8%AACAP90WBj7Ljwg%F0adPQAAgD9ppwA%D3ACPikFjj0AAIA:PfT3PYL0%j305IA9AACAPzAc9D3trPY9hUh0PQAAgD8nw:c9vOn6PQ2rdz0AAIA:XiQAPlPkAT5wF4I9AACAP448Bz7Vrgg%z2mOPQAAgD%Eng8%BhoRPslenT0AAIA:ydgZPmOzHT6I5tU9AACAPzByFD6kqxc%acbFPQAAgD92GRE%ELITPlAfuT0AAIA:120QPqsQEj6z47E9AACAP9aWFD5jHBY%pcO0PQAAgD%Wghs%prQcPoeMvj0AAIA:e3AjPlAOJD7vlMs9AACAP:LmKz7NdSw%l:nbPQAAgD%T2Tc%y8s%PtBTGT4AAIA:ALU3Pgx%PT79YhU%AACAPz1xOT7zfT0%TbURPgAAgD83ZTw%EYk%PgD1Dj4AAIA:cWpDPkJ7RD4BQBE%AACAPxG6TD4p0Ew%FTYXPgAAgD:p6VM%IG5TPnpYHD4AAIA:oQdYPkU:Vz5:UCA%AACAP1ktWz6%0mQ%hTdPPgAAgD%HQmE%GU9pPofdUT4AAIA:GPJsPquacj5FhFg%AACAP1e0eD6XfHs%QmVdPgAAgD8N%4E%%nWCPmVWYT4AAIA::MKEPq01hD7VTWE%AACAPwq5hz4JmYY%kaZiPgAAgD%%OIc%ufqFPq0SXz4AAIA:uMuBPvBgiD62u4Y%AACAP0yOiT4hU48%IAWOPgAAgD9c3JQ%sSSZPlnVlj4AAIA:vNmfPoPBoT76AJ0%AACAPxIpqD7uX6g%9ySgPgAAgD%YiKs%fG6qPgOnnj4AAIA:yeyqPlwMqT4nuZo%AACAP6dRpj4Sf6Q%1g%UPgAAgD:B9Jc%hzqgPl6fqD4AAIA:sMGjPl86qz6Y0LQ%AACAP22Wsj7bPLg%UhLCPgAAgD9LcME%e7rEPi0DzD4AAIA:oYTLPsCpzD7BcM8%AACAPzWMzj7sBM4%MKTMPgAAgD%AA8s%62vJPnH0wz4AAIA:knnEPvfSwj73NLo%AACAPxThpj4v:bA%9vzCPgAAgD9JBbc%wizAPvgg1D4AAIA:9l:IPu3mzz4jR%Q%AACAP:%u1z6cEN0%AazvPgAAgD8YxuA%iufjPuTh8j4AAIA:mJ:iPqS44z6l1u0%AACAP6C73j4pcd4%N2TjPgAAgD9pC9Y%1yLVPj0t1j4AAIA:7s%0PmNnwD4h5do%AACAP781xj4w3dA%LrPtPgAAgD%sT9Y%p1TfPpr0:D4AAIA:GFflPuRy7D65LwQ:AACAP3xj7z4jUPQ%ApgGPwAAgD:fXfE%MTP0Ph:%Az8AAIA:a2TuPjDO7z5cM:4%AACAP5725j5rNOc%xs3wPgAAgD8TrFg%RmSAPifHnT4AAIA::LBePg6chD7anaY%AACAP%aRaT69Uos%f9%xPgAAgD:sXnI%s4%PPmpfuD4AAIA:gEN7PhXskj7Mtbo%AACAPyn%gT6ADpY%xpG8PgAAgD9sAYU%K8WWPk3nuD4AAIA:8HSFPr3HlD7wA7E%AACAP0wNTj7dh28%qliJPgAAgD9S5FE%B8d1PmHokD4AAIA:By5ZPhNRfz6KrJk%AACAP1vxXj52CIM%lUagPgAAgD99omY%%WCGPjUNpD4AAIA:JqBuPg75iD4yBaU%AACAP6N8cT7acYg%DcWgPgAAgD8oKXI%GbuGPlJAmj4AAIA:8HRCPjrzWz6d7GM%AACAP7a4RT7NzmE%NMlwPgAAgD:cuEk%LrNnPriufT4AAIA:LtFNPpkRbT6lZIQ%AACAP%okVD6k0nM%6f2JPgAAgD:P41c%fxt1PnXfiT4AAIA:Xr9YPp5Mcz6ZTYY%AACAPwvqWj5Q1nI%MWyDPgAAgD90xzQ%U%JFPqZnMj4AAIA:3AE3PhD0ST4Iljo%AACAP1BuOD69Sk0%4etCPgAAgD8H3Do%Y25QPlFkSj4AAIA:rF88PvREUz5ZUlE%AACAP4ymPT5RR1M%Xr5SPgAAgD%BMD0%mvFQPg3pTT4AAIA:TEc9Pl7yTj4l5Eg%AACAP0IhKT4OFjM%BdkIPgAAgD%uZyo%Gus0PjE3Cz4AAIA:%KcqPmrVNT4uzQ0%AACAPzUNKj7RFDY%XzMQPgAAgD85ACo%vV43PqsGFj4AAIA:Ms8mPuTUND6zMBc%AACAP8eXIj76ETA%ClYTPgAAgD9OgSI%cywvPuKFEz4AAIA:2NAbPuMSIT4ZQs49AACAPxyvGz4JrCA%omPIPQAAgD%2xRs%qIMgPoMrxz0AAIA:x6UZPs95Hz66G8g9AACAP4:YFj7G%B0%T0vMPQAAgD:MQxI%lp4aPgLuzj0AAIA:TGsOPlhuFz4:VM89AACAP1MWDj7jKRc%:dvUPQAAgD8pdBE%e9YSPirBmD0AAIA:VsAPPpgSET71j5A9AACAP75mDT7%hw4%70%LPQAAgD:9RAo%2iQMPsldiD0AAIA:jdUGPsRsCT7JmYg9AACAP4YAAj5:FQY%FU2JPQAAgD%QD:09isQDPuZ9jD0AAIA:p2L8PbkdBD6aPZU9AACAP8U0CD4LAgg%RaRtPQAAgD9u7wU%t7oFPgGpXz0AAIA:66sCPjuFAj5XWFM9AACAP45Z:j3dN:89lgRNPQAAgD:NYvc9BNr5PVaNSz0AAIA:Me:vPSBk9T11Hk89AACAP6sQ6z0mIPI9IKVVPQAAgD9XVOg9hJvwPQoIXT0AAIA:eJ%5PkTUxj46j%c%AACAPxQtyz5Zrtc%TtL6PgAAgD9uId4%syzpPlW:Bj8AAIA:TzjuPt4%9z5hgg0:AACAP:0d%T5j:v8%dW0QPwAAgD9IiPk%3T7%PgUlDT8AAIA:RQ31PhUc%D7zswY:AACAPxMv7D6Jyu0%USz%PgAAgD8IYLU%ZhHFPpbT6j4AAIA:bXTJPuLZ2D5vZAE:AACAP%HE3j7%Ue0%JcoNPwAAgD8uOPM%9yL:Pt5UFj8AAIA:V%3:PiZ2BD%kDhk:AACAP1H7AD%MUQQ:C%IVPwAAgD:4Ivc%DcT7PuaPCz8AAIA:pgvqPtxZ7T6XDwE:AACAP3PxrT6KVMA%bXrqPgAAgD%8wMM%CTXWPnKmAz8AAIA:7zzWPh906D5eUw8:AACAPw0H6z5safs%7bkZPwAAgD82t:g%jwgDP277HD8AAIA:HBP6Ppv5AT:Smxc:AACAP1Hp8j6I4fk%oB4OPwAAgD9Bz%M%w2PpPjiYAT8AAIA:%hqgPqhLtT7mDeQ%AACAP4jIsT54Gcg%VFj:PgAAgD9GpcY%fUTdPsNRDT8AAIA:zK:bPonL8D7SUxg:AACAP0w15j4OYvg%QnEaPwAAgD:CHuk%K%r2Phj9FD8AAIA:HRbkPq697j4GsQs:AACAP25z1T7Jx90%gSL8PgAAgD::lpE%4D%oPkLh1j4AAIA:zByfPv0ytz4ii%4%AACAPxUHrz56Ysg%ofoDPwAAgD8UdMM%4K:bPigbDz8AAIA:InLIPhOa3z537RA:AACAP5lyzj5S9OA%ZZIMPwAAgD%KKsk%YrTXPo2JAj8AAIA:QJzAPtj1yz5MoO4%AACAP0fFgz7bTJo%YYHFPgAAgD9Eh44%o3inPio%3D4AAIA:ViebPgSgtT4aLPI%AACAP5YkqD7zPcI%HesAPwAAgD9Qu7E%YYDKPmARBT8AAIA:XdG1Pt00yz4o%QE:AACAPwrvsz4oKsU%uxX0PgAAgD%AM68%25i8Piq24D4AAIA:leF0PuDIkD69ybg%AACAP8SNgj4Frpo%SAHKPgAAgD%XbIs%uoGkPm3i2T4AAIA:HEuTPk8xrT4ZROc%AACAPyJunD4hU7U%B1vvPgAAgD8HDaI%u0q4PsNq7T4AAIA:qSCiPtOdtD6WpeA%AACAPw7cnj6Z3q0%TSzRPgAAgD8UNmg%YPmJPriOrj4AAIA:q4BvPl6Mjj5kubc%AACAP6KdfT558ZY%enPFPgAAgD:%N4U%86CdProxzz4AAIA:PKaLPtXpoj6WlNM%AACAP2Qejj4RxKM%2bnRPgAAgD%9yo8%s5OiPkxWyj4AAIA:jCCRPl8foT7p3cI%AACAP8cy:j3SIAE%iNByPQAAgD:qkO89GHjzPb7JVz0AAIA:QOzjPQOd5z3NbkM9AACAP:Eb3D3Zkd89vss2PQAAgD9D5Ng9ePjbPflqMz0AAIA:Mk7fPUW24T3sF0M9AACAP6TY6j09Ju09f3RdPQAAgD9PsPg98sL7PeZSfT0AAIA:P5LnPQPC7D3Lk0M9AACAP26Y2T38wd49rIUnPQAAgD%8Ocw9PrjQPZgdDj0AAIA:EWzEPR5hyD3XegA9AACAP1GZwz29Lsc9LYkAPQAAgD:O88095k3QPRL9FD0AAIA:XwjePf2y3z1NxTU9AACAP2J16z0hDe49xf1VPQAAgD:w8tM9SWzaPdjMGz0AAIA:%EvGPWH2zD0qgQE9AACAP3Gduz2MysE9k:LYPAAAgD8jo7Q9j2K6PZCfvzwAAIA:yoy2PW8Juj1T8MY8AACAP0Ypwj03gMQ9jrXpPAAAgD9RINA9BPzRPaY6Dz0AAIA:KvniPV1A5T02qzg9AACAPwojyT2h1889PY4EPQAAgD9V1bs9j63CPelM1DwAAIA:OriyPYOuuT1WfLI8AACAPxR7sD2ysLY9mdepPAAAgD%FH7Q9BHq4PURNsjwAAIA:AqPBPZu5wz1qHdA8AACAP32:0T2dadI9tdEBPQAAgD8oQOE9eY:hPelEJD0AAIA:3hDGPV5bzD0Nuv08AACAP8oiuz1ug8I942vNPAAAgD%7m7Q9zCC7PX4NsjwAAIA:bQG0PW2Guj2mCK08AACAP1w5vD2vIMA9YOC5PAAAgD8Bmcg9xefKPS0v0DwAAIA:LQ:WPYuM1z2LGv48AACAP%ei5T0O2%Q9Z3cfPQAAgD%hhMg9V4HOPSjbAz0AAIA:o5bAPQ3Wxj3:Pd48AACAP90pvj2uVMQ9YKbJPAAAgD:yXMM9BmvHPflAyzwAAIA:89zJPaiczT0GQdY8AACAP1XW1T3Khdc9fGbsPAAAgD95W%M9RI3iPaFNCT0AAIA:xyjvPdU17T0OliI9AACAP4740D3G0NY9HvQXPQAAgD%s8809SbzTPX9zCz0AAIA:j%:NPfix0z36vQA9AACAPxFx0z3s1dY9:ED%PAAAgD9HwNo92V:dPQCUAj0AAIA:v3nkPTdH5T3Y3Aw9AACAP01I7j0fqO09Bb4bPQAAgD8aDPo9%Tz4PTo7Mj0AAIA:mnvdPRcS5D1Ovzc9AACAP%KG3D38r%I9vJYsPQAAgD8:E%A9RtrkPdDGJT0AAIA:L0rmPfDZ6D1U:CE9AACAP18p7D0rse09RpkkPQAAgD%cTfU92sP0PZA3Lj0AAIA:kS39PWu4%z1QcTk9AACAP6wAAj6UTwE%eK9HPQAAgD8"));
	var SPEC = hxd_res_Any.fromBytes("h3d/scene/pbr/envDefault.envs.dds",haxe_Unserializer.run("s11051:RERTIHwAAAAPEAIACAAAAAgAAACAAAAAAQAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAEAAAAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBBAAAD%AAAAAAAAAAAAAAAAAADz2mQ:f6BcPwy6YD8AAIA:t3ouP:TTKD:ulyg:AACAP13r0T4JbMw%mULHPgAAgD%Md4E%jHeBPqPPRD4AAIA:uo0nPiSOJz5ap4g9AACAP1Dk7T0J0:U9okjPPAAAgD%pJdU9kJvVPStQvzwAAIA:mT3APRGCwz0EZbE8AACAPys6Zj%pzl4:Uj5hPwAAgD9Twjo:fCk1P02EMj8AAIA:XOvjPqBd4D7i09M%AACAPwJbhj4CW4Y%o6BGPgAAgD%a2yo%mtsqPiN4ez0AAIA:rNLyPRn38z3bBNc8AACAP4Kbyz2gqNA9ZgzDPAAAgD:HM7I9Qcq6Pa5krDwAAIA:vhNAP%JrOj8sFT4:AACAPwk3Fz:pkRM:TjERPwAAgD8E6q4%CCGqPqMmmD4AAIA:fdw%PoF7Oz6sgvk9AACAPwRpDz5NaQ8%WIoyPQAAgD9YnN09SRvjPQR4zzwAAIA:mGewPbZHvj2CUbo8AACAP6OXoj0xBbA9pnyjPAAAgD%62Rs:J4AYP6uqIj8AAIA:A2zlPjDC3z6OV%I%AACAP:9Ebz7%WGc%4zxKPgAAgD%Hyu49fFrpPTW6gj0AAIA:mr7uPfa:7j2ypwY9AACAP89dyD0x2NI9EbbFPAAAgD:%Qp49AUewPWYfsTwAAIA:BxaVPTWKpj3p7po8AACAPzc8:j5NoQA:1YoTPwAAgD%5U7w%mcu8PspLzD4AAIA:0gg0PtIIND4BoCQ%AACAPznIqD3wx6g9BHw2PQAAgD%eZdk9O2fZPZR47TwAAIA:ep7DPfMK0z06j7w8AACAP0txnT368bQ9LYKoPAAAgD%h4pA9OxCrPS:vkjwAAIA:cUrSPhnP4T44ZAs:AACAP59ooj7kPag%BK3BPgAAgD%YchU%xM4VPlsVDj4AAIA:rwiXPQukjj3:Hh09AACAPxZx1D3r7Mk94eDtPAAAgD:2b9M9U9fTPTS1xTwAAIA:Sq%rPc72wz2a1qg8AACAP39Enj1Ksbk9wDqXPAAAgD%N:7g%k9nPPqsfCT8AAIA:zrqKPtdZlT68O7E%AACAP7RU9z0SsP09EdLuPQAAgD:a:Zk9E7uQPZ9nGj0AAIA:4ErcPRb3xj1DyAA9AACAP:jL6j13G9s9iDbSPAAAgD%4E8Q9rS3VPay2szwAAIA:lQWvPQTwyz2EzZ88AACAP0pqpj4AQMY%MC8KPwAAgD:e0XQ%peOLPkiRrT4AAIA:fGUEPk7iCj4NywM%AACAPx0kzz2:ssI9WuJmPQAAgD9fQPQ9X2jZPXebIz0AAIA:jRb7PV5l5j1H5es8AACAPwIe0j2p1N89Q37APAAAgD%Sz7k9tezVPZTwpTwAAIA:1lRdP3t0VT9FYVk:AACAP%Japz7z26Q%8mmQPgAAgD9hQA8%z1oRPhfzOT0AAIA:wLXAPe5DxD1ZCbE8AACAP4quLD%WTyg:MmgvPwAAgD:Jp14%a%pYPviiKD4AAIA:wNbqPbIf7z24efw8AACAP:MBnD2Vlas98fKePAAAgD9V3OU%sIPvPuiJDj8AAIA:KhTxPUKp7j3fvrk9AACAP6O40D3tFdI9tivWPAAAgD9UGJg94W%yPWh5lTwAAIA:LiefPoUOvj4h%wM:AACAP%%O7j2Ime49vBe8PQAAgD%GQfc9ryjgPYwODT0AAIA:9tO6PfUB1T06:Kc8AACAPxuYQD9hnTo:V00%PwAAgD%HOMg9EfbLPaWk0TwAAIA:9qyUPnQCsD7Dnu8%AACAP%NzwD2e7NI9jK%7PAAAgD%JHBw%dfEdPiDn2j0AAIA:BMWlPbv5sT2YVLQ8AACAPwdiuz10lr0963vOPAAAgD8ifeI9t:vQPbh2%zwAAIA:d3EUPqVZDj7nxo49AACAP4EUTD7%elM%gZQxPgAAgD9JDo8%rXuaPinBpT4AAIA::7PJPixJ3T7o0QI:AACAP8bJ8z5ZgwY::JYnPwAAgD%FFaw9:Cm4Pf:ztzwAAIA:l3zAPRh2xj1dy9M8AACAP2Rd8D2V%%A9AmYAPQAAgD:9cBQ%PuYLPiR4ez0AAIA:RIw3PuqpOz6sShc%AACAP2gffz66O4w%TwWYPgAAgD9fGLU%hALPPlHvAT8AAIA:NxvSPld98j5yeiA:AACAP0iSuD3TTsI9A3LBPAAAgD%HGMc92gXRPVh:3TwAAIA:8qT3PeZB7T2%lwU9AACAP3xtGj5AJBE%otd1PQAAgD%IED8%1IxJPmKOID4AAIA:VNSDPvSglT7AUak%AACAP3Sjrz5PGNQ%%PALPwAAgD8iNLc%ytjePtpcGj8AAIA:o7XCPeMdyj1r1sE8AACAP65q0T2Wgtc98N7nPAAAgD8Ms:09FizzPQVVCz0AAIA:C9YdPruIFz6L1HU9AACAP2igRj7lW1U%VjguPgAAgD9D6YM%VqqcPkJQtj4AAIA:LUOpPsPS0j6a9xA:AACAP2zRqD6lMdM%YNYWPwAAgD8Fod492APcPc1m3jwAAIA:vksCPqju:z0qpQM9AACAP%PrHz6DshY%8FMoPQAAgD8:lzE%E0kkPjfeZj0AAIA:InIUPo9xFD6OxKg9AACAP5U7Qj4FHWE%UaZoPgAAgD979IU%DRysPhVF8z4AAIA:17d8PlV0rD5vxAY:AACAP2rv0z12s9k9znrZPAAAgD8l:vg9CGkCPtGnAj0AAIA:cJscPvsPFz7wUyg9AACAPw5aKj7DeR0%y49QPQAAgD%H6QQ%0rH9PX8:ej0AAIA:ccoaPuBlJD6nmww%AACAP5G9ST5WNW4%m5mRPgAAgD8hFEo%9%GCPtBFvj4AAIA:HMXQPXcm5T0D8d08AACAP2KT9z3txwY%b3YFPQAAgD%g1h4%cysePpq:Kz0AAIA:vDQgPr2VFT7ur0A9AACAP3bV9T0%5No9alY4PQAAgD%:OPE9mLPhPYYnkz0AAIA:2dMUPvcFGD4Swg4%AACAP4ByIj41lj4%uzFpPgAAgD%jRek9IaX7PRLT9zwAAIA:OjALPuOPDz4sQBU9AACAPxM3MD5JvCY%AcY%PQAAgD:YmjE%NQ8hPkObXz0AAIA:fnUUPp7zBj53voA9AACAPwUtFD6Lfw4%11:KPQAAgD:kaDo%XUVCPnc0QD4AAIA:HudNPl7raT490os%AACAP0hhqD29DrM9:M%2PAAAgD8h1QI%keX2PbXCSz0AAIA:ZQJ0PgkrgT7ToHk%AACAP4da7j7FPAM:jAUjPwAAgD%wSb49:XzGPduEwjwAAIA:BbcLPntQBT6%6Tk9AACAP8rwZD4el38%fTp%PgAAgD8a2a4%w57XPgeLFz8AAIA:aNPYPWU92j3kr9s8AACAP38uJT67VBs%Gus:PQAAgD%FxB0%qr4lPtpG%z0AAIA:YLljPr4hlz6houM%AACAPyTX6z1c5:s9D935PAAAgD8Y5S8%oRwjPlqfTj0AAIA:5XAVPjzNCz6Ee6U9AACAP%hRST7JRmY%RpeKPgAAgD%bOLg9A9a%Pd8u3DwAAIA:icLgPnJ09T4g2RU:AACAP3cz9T0FGP09zhUGPQAAgD8Q4Eg%y1lrPofCkT4AAIA:qr4yPnOCNz4YJP89AACAPwTFpT27%bE9mFS0PAAAgD:VqaA9:QiqPakzrTwAAIA:eEGmPUT1qj3VhJ88AACAP4lXrT33V609wOuWPAAAgD9eqK89OxCrPXwJjzwAAIA:ufC2PScItz1kYpc8AACAP%dFvj21sMA9jHilPAAAgD%ZPcA9EYLDPQRlsTwAAIA:B2K7PXSWvT3re848AACAP6AFrT0Rz7E9uvG8PAAAgD9Ob6w97xWxPQCrqjwAAIA::cy1PfusuT1opaE8AACAP3euuT13rrk9snSZPAAAgD9HvMM9QePDPXE5ojwAAIA:dcrOPQox0j3mBbM8AACAP6kl1T2Qm9U9K1C:PAAAgD8ifeI9t:vQPbh2%zwAAIA:nZHMPQSovT1zpd08AACAP2e0sj3KVrI9I161PAAAgD8gta09yFayPU4sozwAAIA:l267PZduuz3k16I8AACAP9pWzz0uic89flO0PAAAgD8Z8989lSnmPS1oxzwAAIA:UOTtPQnT9T2iSM88AACAP3dxFD6lWQ4%58aOPQAAgD9ucg8%xBMHPpQnjD0AAIA:S7:1Pa:L7z1aiWE9AACAP:hk2T1R6%M9PPk8PQAAgD9Rue49:Tn0PZD2PD0AAIA:nAgGPr72CD7Lwks9AACAP%RGFz5B1Rk%mM5zPQAAgD%6jSc%JI4nPlqniD0AAIA:gRRMPv56Uz6BlDE%AACAP9gvaD6maHM%apBdPgAAgD:1vWg%4rd0Pn%rZD4AAIA:3KtkPoSLbD46I1k%AACAP76rZD6flmg%o0FKPgAAgD%22Ww%ttlsPqGgRj4AAIA:PAp2PjwKdj7090U%AACAP4x3gT6Md4E%o89EPgAAgD9JDo8%rXuaPinBpT4AAIA:3IixPtoWvD77O9A%AACAP2TmyT6%9tE%CwHmPgAAgD8kb%E%nwzkPjj18j4AAIA:Nq:nPmOb5D6He:A%AACAPzt:5D4wOeE%3mLkPgAAgD%wZtk%ebbTPux80z4AAIA:XevRPglszD6ZQsc%AACAP:%zyT4sSd0%6NECPwAAgD:lJfk%2wADPw3KGD8AAIA:FMMXP5TtGj%fJS8:AACAPzlWMz9hhjE:kOhCPwAAgD92BEE:A2I7P6tiST8AAIA:40FBP9i%OT8PXUM:AACAP:JVNz94DTA:dyo1PwAAgD%3ei4:9NMoP%6XKD8AAIA:xsnzPlmDBj:8lic:AACAPwkHCj8EmRE:Pu0wPwAAgD%FUh8:EeMiP3cfPj8AAIA:PRQ4P8YnNz%w9k0:AACAPy4KSz%jM0Y:l%lYPwAAgD:LNlg:XDNQP6AaXj8AAIA:1cpgPynSVz%GEmE:AACAP:PaZD9:oFw:DLpgPwAAgD9IYag9vQ6zPfzPtjwAAIA:TsmpPW0jrD0DWps8AACAP6hHsz2xMbE9R4WTPAAAgD:AtcA97kPEPVkJsTwAAIA:IdUCPpHl9j21wks9AACAPzQsyj0xV8w9b0YLPQAAgD9DQuA9fNTiPYETBz0AAIA:YUAPPs9aET4X8zk9AACAP2UCdD4JK4E%06B5PgAAgD8VyqI%zg%oPrP5qj4AAIA:32qrPqR8qj5NvqM%AACAP%Japz7z26Q%8mmQPgAAgD%HWu4%xTwDP4wFIz8AAIA:EAkrP5lnLD8vT0U:AACAPwtOUD:vDUo:yTlaPwAAgD:WVF0:e3RVP0VhWT8AAIA:mzi4PQPWvj3fLtw8AACAP4c4yD0R9ss9paTRPAAAgD%JwuA%cnT1PiDZFT8AAIA:G5hAP2GdOj9XTT4:AACAP1MSWz4ZL18%PMQyPgAAgD8e500%XutpPj3Siz4AAIA:fzdqPqknlD7M684%AACAPxV8Xz7u3pw%b6z1PgAAgD%ZyU8%jACdPlIoAj8AAIA:O344PnUjlj6GdQQ:AACAP:PpXj72K6c%sb4LPwAAgD%Jc40%E0G8PsACET8AAIA:SmqmPgBAxj4wLwo:AACAP%RoOj5dRUI%dzRAPgAAgD:yJ3w%jD%NPpYypT4AAIA:spWNPqnVqz4RQuI%AACAPwv6jz61Dbs%p:8FPwAAgD%8VIE%rPOzPhQfCT8AAIA:hUaCPvG2rz6ARQM:AACAP82jfz5E5KA%tiXePgAAgD:e0XQ%peOLPkiRrT4AAIA:BS0UPot:Dj7XX8o9AACAP5sASj7PFk0%AgcyPgAAgD%WB4I%0fiMPkgSkj4AAIA:avWTPmpYpz6JhL8%AACAPzqsgj6ujJk%5FW4PgAAgD:BeGA%I%eAPj7glT4AAIA:zpUvPv:gQD6G3lA%AACAP3xlBD5O4go%DcsDPgAAgD9%dRQ%nvMGPne%gD0AAIA:LTc2Pp23KD4jSr89AACAP1jCZj5yrl4%Um4ePgAAgD9BvoY%H76GPn5aVT4AAIA:loVsPpaFbD6fdD8%AACAP5%xNj5lbDY%PGEJPgAAgD8Z4gg%mQ4DPnYGsT0AAIA:HSTPPb%ywj1a4mY9AACAP9iaMT41DyE%Q5tfPQAAgD%u4kk%CoAyPgm6gz0AAIA:y3ZRPpANPz5tdJI9AACAPxI8Sj6gdD8%yiiXPQAAgD9XkzE%19kqPiWfhj0AAIA:u0kgPrmZEz59t2U9AACAP%CZCz6QRvo9PXBFPQAAgD9fQPQ9X2jZPXebIz0AAIA:EzcwPkm8Jj4Bxj49AACAP1L7Nj4gRSc%jOhBPQAAgD9i9yk%7kwgPtZTLz0AAIA:05wcPnGUFj4eMyI9AACAP%UyCj5Rtgc%Zk4QPQAAgD:edwE%iOr9PYnyBD0AAIA:h%r9PcNc7T0i0PU8AACAP40W%z1eZeY9R%XrPAAAgD86MAs%448PPixAFT0AAIA:htoPPqaaDj4ZZRM9AACAP6%XBT5fhgU%CX4JPQAAgD8HQ:k9ikn6PaOU:DwAAIA:3N:YPSC:6T38HtQ8AACAPxy3zz3qOeU9QJrIPAAAgD8v5dM98:3hPe1UwTwAAIA:Ah7SPanU3z1DfsA8AACAP6NF6T0hpfs9EtP3PAAAgD8Sv%0980H1Pf2g8zwAAIA:Yu:mPS2O5D1msO08AACAP2g71D1tZtk9%3jZPAAAgD:RqrY9zRzKPdH1rzwAAIA:oVC0PadNyj0vKaM8AACAP0QstT12FNA9%e%jPAAAgD%Sz7k9tezVPZTwpTwAAIA:6FFJPslGZj5Gl4o%AACAP8o9WD5VwJw%U9j7PgAAgD8D30w%3buePvmZBz8AAIA:LiefPoUOvj4h%wM:AACAP%VwFT48zQs%hHulPQAAgD8WQYM%X4mJPkvNfz4AAIA:8C1hPr%MdD4GCHQ%AACAP%%O7j2Ime49vBe8PQAAgD8Y5S8%oRwjPlqfTj0AAIA:bAc3PioPLD6QxWI9AACAP4npFT7hIBA%EEc8PQAAgD%GQfc9ryjgPYwODT0AAIA:JNfrPVzn%z0P3fk8AACAPwVp3T0Z39496PbiPAAAgD8agbY9M4zKPT:cqjwAAIA:9tO6PfUB1T06:Kc8AACAPxDgSD7LWWs%h8KRPgAAgD:2rJQ%dAKwPsOe7z4AAIA:dzP1PQUY:T3OFQY9AACAP%NzwD2e7NI9jK%7PAAAgD9AQ1E%yApWPmIpGT4AAIA:xsnzPlmDBj:8lic:AACAPwkHCj8EmRE:Pu0wPwAAgD%FUh8:EeMiP3cfPj8AAIA:PRQ4P8YnNz%w9k0:AACAPy4KSz%jM0Y:l%lYPwAAgD:LNlg:XDNQP6AaXj8AAIA:1cpgPynSVz%GEmE:AACAP:PaZD9:oFw:DLpgPwAAgD83G9I%V33yPnJ6ID8AAIA:ItTnPm:8AD8%Uyc:AACAPyotCj8w0RE:Nqw0PwAAgD%Odyw:jO0tP2EwST8AAIA:3HtIPy40Rj:Zk1s:AACAP5LtWT%eelM:N3xjPwAAgD%gimQ:w1FcP3uNZT8AAIA:KzpmP6nOXj9SPmE:AACAPyI0tz7K2N4%2lwaPwAAgD:vrrg%eQXePm4dGz8AAIA:jgvYPo3G8T6tyyM:AACAP9l8ED:FQRU:ApM5PwAAgD8%FC8:4XcyP9%BTj8AAIA:cMFUPya8Tj9mW2A:AACAP96AXz%:u1c:MolfPwAAgD%%E0A:4ms6PywVPj8AAIA:bNGoPqUx0z5g1hY:AACAP0GfoD4rlsg%u1MTPwAAgD8E4Jo%kpm:PsidDz8AAIA:vh:HPsN44j5cYh4:AACAP5%IKj:ITiw:OCJIPwAAgD8NlUY:ia5CPyEiVj8AAIA:V8RIP1BdQz8JMFQ:AACAP7rZGz8ngBg:q6oiPwAAgD:Xt3w%VXSsPm:EBj8AAIA:vydhPooIoT7riwc:AACAP%QuMz5GqIc%cq73PgAAgD9QdxQ%u49sPlAO6z4AAIA:G9WoPi5zzD5bqxc:AACAPzO5Bj%3DBA:%4M3PwAAgD87RRY:LagaP8CgOj8AAIA:Nzz%Pk2hAD:VihM:AACAPyEUSj734YI%0EW%PgAAgD%r0iY%yL92Pmzu0D4AAIA:shAPPiMBcT6MnOc%AACAP%GSKT7vaIY%i4b2PgAAgD8FDzw%9ViQPqP7AD8AAIA:W7aTPqTKwT5gmhc:AACAP0IK0T7oke4%xRsjPwAAgD9xStI%Gc:hPjhkCz8AAIA:gHIiPjWWPj67MWk%AACAP246Kj44JG0%meS6PgAAgD9:Ixg%bMR:Po1t7T4AAIA:spESPlXLgT5RBvM%AACAP:nx8j3npGw%ZyzxPgAAgD%cHEI%s9eYPkH2Bz8AAIA:n:mYPtrWwj6olhE:AACAP43:uD6T2c8%qx8JPwAAgD8e500%XutpPj3Siz4AAIA:fzdqPqknlD7M684%AACAPxV8Xz7u3pw%b6z1PgAAgD%ZyU8%jACdPlIoAj8AAIA:O344PnUjlj6GdQQ:AACAP:PpXj72K6c%sb4LPwAAgD%Jc40%E0G8PsACET8AAIA:SmqmPgBAxj4wLwo:AACAP4da7j7FPAM:jAUjPwAAgD8QCSs:mWcsPy9PRT8AAIA:C05QP%8NSj:JOVo:AACAP9ZUXT97dFU:RWFZPwAAgD8a2a4%w57XPgeLFz8AAIA:JYHVPtMv7z6A5iI:AACAP9iYPT9RZjw:pZ9TPwAAgD%Kriw:lk8oPzJoLz8AAIA:YLljPr4hlz6houM%AACAP%ifID5GQH8%jGDwPgAAgD%iG6Q%n1XMPpZDGT8AAIA:VdzlPrCD7z7oiQ4:AACAP%hRST7JRmY%RpeKPgAAgD:KPVg%VcCcPlPY%z4AAIA:A99MPt27nj75mQc:AACAPy4nnz6FDr4%IfsDPwAAgD%JwuA%cnT1PiDZFT8AAIA:G5hAP2GdOj9XTT4:AACAPxDgSD7LWWs%h8KRPgAAgD:2rJQ%dAKwPsOe7z4AAIA:2ZHCPjo93j5uzRc:AACAP5k9wD0RgsM9BGWxPAAAgD:nRb49tbDAPYx4pTwAAIA:ufC2PScItz1kYpc8AACAP16orz07EKs9fAmPPAAAgD%JV60991etPcDrljwAAIA:eEGmPUT1qj3VhJ88AACAP9WpoD39CKo9qTOtPAAAgD8ExaU9u:mxPZhUtDwAAIA:xzOyPUHKuj2uZKw8AACAP3ggrD0LjrQ9wumdPAAAgD8leqo9SmauPUFNkzwAAIA:O%ylPXoVnT3G:IQ8AACAP%wZpT15eKE9UJOMPAAAgD9udJ09GWKlPQYJojwAAIA:5PWnPeovrj3zM608AACAP4UVrD38Kbg9::O3PAAAgD%jl6I9MQWwPaZ8ozwAAIA:psucPSj3qT2YhI48AACAP3oHmD3YtqA93257PAAAgD%Qspc9xUuTPTCNazwAAIA::0mkPfPcnz3oopI8AACAP4OjpD1WI6k9PdGjPAAAgD80KLY9:we4Pd2ZtTwAAIA:SJK4PdNOwj0DcsE8AACAPwcWlT01iqY96e6aPAAAgD93%JI9p6qgPd9ahjwAAIA:x:aOPah1kz0kMHk8AACAP5aWfT3ZsoI9GE82PAAAgD:9%JI9HYCbPbukeDwAAIA:h7egPaGqqT1iEIw8AACAPwhmuD0gJcE9WDumPAAAgD%jtcI94x3KPWvWwTwAAIA:oeKQPTsQqz0v75I8AACAP:Jxiz2deKE9i:yEPAAAgD8LpI49aYiXPXwxeTwAAIA:1LOKPXa0ij1leGo8AACAPzrdnz0dgJs96PCSPAAAgD8Pqqk9bragPZ4kpDwAAIA:P9bDPSsGuz23lMA8AACAPwWh3j3YA9w9zWbePAAAgD9:RJ49SrG5PcA6lzwAAIA:qnmYPT85sz1e3Yw8AACAP750kz23%6Q9DjSEPAAAgD:WXJc9niucPfjpgzwAAIA:GuKtPUd9qT0lJaQ8AACAPwzisj0crqU9mLS1PAAAgD%hRbM9nZOvPXEQujwAAIA:au:TPXaz2T3Oetk8AACAP5UFrz0E8Ms9hM2fPAAAgD9YwqY9eve%PSHUlTwAAIA:HveePeeRrT1pN448AACAP1Gxnj35u7A9AGyPPAAAgD8KFr49yPe%PWyWwDwAAIA:ftTRPaTnyD3pC9s8AACAP%XNzT009M09WyLVPAAAgD8cxdA9dyblPQPx3TwAAIA:ks%5PbXs1T2U8KU8AACAP0QstT12FNA9%e%jPAAAgD%hULQ9p03KPS8pozwAAIA:0aq2Pc0cyj3R9a88AACAP2g71D1tZtk9%3jZPAAAgD9i7%Y9LY7kPWaw7TwAAIA:Er:tPfNB9T39oPM8AACAP6NF6T0hpfs9EtP3PAAAgD:AtcA97kPEPVkJsTwAAIA:qEezPbExsT1HhZM8AACAP07JqT1tI6w9A1qbPAAAgD9IYag9vQ6zPfzPtjwAAIA:8wGcPZWVqz3x8p48AACAPwrujz28X5M9rj5nPAAAgD%IZJ89U3WjPQSAkDwAAIA:sEm%Pf18xj3bhMI8AACAP1QYmD3hb7I9aHmVPAAAgD9dVZE9UW6ZPbOsfTwAAIA:s4%qPZaqoj0QUqQ8AACAP2jT2D1lPdo95K:bPAAAgD:207o99QHVPTr8pzwAAIA:GoG2PTOMyj0:3Ko8AACAPwVp3T0Z39496PbiPAAAgD8k1%s9XOf7PQ:d%TwAAIA:hzjIPRH2yz2lpNE8AACAP5s4uD0D1r493y7cPAAAgD:jc8A9nuzSPYyvuzwAAIA:dzP1PQUY:T3OFQY9AACAPy6Hnz0ofaI9rVOPPAAAgD8"));
	e = new h3d_scene_pbr_Environment(SRC.toImage().toTexture());
	e.diffuse = DIF.toImage().toTexture();
	e.specular = SPEC.toImage().toTexture();
	e.diffSize = e.diffuse.width;
	e.specSize = e.specular.width;
	e.specLevels = e.getMipLevels() - e.ignoredSpecLevels;
	e.sampleBits = 5;
	engine.resCache.set(h3d_scene_pbr_Environment,e);
	return e;
};
h3d_scene_pbr_Environment.prototype = {
	get_lut: function() {
		return h3d_scene_pbr_Environment.getDefaultLUT();
	}
	,get_env: function() {
		var tmp;
		if(this.env != null) {
			var _this = this.env;
			tmp = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
		} else {
			tmp = true;
		}
		if(tmp && this.source != null) {
			this.env = h3d_scene_pbr_Environment.equiToCube(this.source);
		}
		return this.env;
	}
	,dispose: function() {
		if(this.env != null) {
			this.get_env().dispose();
		}
		if(this.diffuse != null) {
			this.diffuse.dispose();
		}
		if(this.specular != null) {
			this.specular.dispose();
		}
	}
	,createTextures: function() {
		if(this.diffuse == null) {
			this.diffuse = new h3d_mat_Texture(this.diffSize,this.diffSize,[h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.Target],h3d_scene_pbr_Environment.DEFAULT_FORMAT);
			this.diffuse.setName("irradDiffuse");
			this.diffuse.preventAutoDispose();
		}
		if(this.specular == null) {
			this.specular = new h3d_mat_Texture(this.specSize,this.specSize,[h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen],h3d_scene_pbr_Environment.DEFAULT_FORMAT);
			this.specular.setName("irradSpecular");
			this.specular.set_mipMap(h3d_mat_MipMap.Linear);
			this.specular.preventAutoDispose();
		}
	}
	,compute: function() {
		this.createTextures();
		this.computeIrradiance();
	}
	,getMipLevels: function() {
		var mipLevels = 1;
		while(this.specular.width > 1 << mipLevels - 1) ++mipLevels;
		return mipLevels;
	}
	,computeIrradiance: function() {
		var screen = new h3d_pass_ScreenFx(new h3d_scene_pbr_IrradShader());
		var _this = screen.shader;
		_this.constModified = true;
		_this.samplesBits__ = this.sampleBits;
		screen.shader.envMap__ = this.get_env();
		var _this = screen.shader;
		var _v = this.get_env().isSRGB();
		_this.constModified = true;
		_this.isSRGB__ = _v;
		screen.shader.hdrMax__ = this.hdrMax;
		var engine = h3d_Engine.CURRENT;
		screen.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(0);
		engine.pushTarget(this.diffuse,0);
		screen.render();
		engine.popTarget();
		screen.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(1);
		engine.pushTarget(this.diffuse,1);
		screen.render();
		engine.popTarget();
		screen.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(2);
		engine.pushTarget(this.diffuse,2);
		screen.render();
		engine.popTarget();
		screen.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(3);
		engine.pushTarget(this.diffuse,3);
		screen.render();
		engine.popTarget();
		screen.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(4);
		engine.pushTarget(this.diffuse,4);
		screen.render();
		engine.popTarget();
		screen.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(5);
		engine.pushTarget(this.diffuse,5);
		screen.render();
		engine.popTarget();
		var _this = screen.shader;
		_this.constModified = true;
		_this.isSpecular__ = true;
		var mipLevels = this.getMipLevels();
		this.specLevels = mipLevels - this.ignoredSpecLevels;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			screen.shader.faceMatrix__ = h3d_scene_pbr_Environment.getCubeMatrix(i);
			var _g1 = 0;
			var _g2 = mipLevels;
			while(_g1 < _g2) {
				var j = _g1++;
				var size = this.specular.width >> j;
				screen.shader.cubeSize__ = size;
				screen.shader.cubeScaleFactor__ = size == 1 ? 0 : size * size / Math.pow(size - 1,3);
				screen.shader.roughness__ = j / this.specLevels;
				engine.pushTarget(this.specular,i,j);
				screen.render();
				engine.popTarget();
			}
		}
	}
	,__class__: h3d_scene_pbr_Environment
};
var h3d_scene_pbr_LightBuffer = function() {
	this.DIR_LIGHT_INFO_SIZE = 5;
	this.SPOT_LIGHT_INFO_SIZE = 8;
	this.POINT_LIGHT_INFO_SIZE = 3;
	this.dirLights = [];
	this.spotLights = [];
	this.pointLights = [];
	this.dirLightsShadow = [];
	this.spotLightsShadow = [];
	this.pointLightsShadow = [];
	this.MAX_POINT_SHADOW = 2;
	this.MAX_SPOT_SHADOW = 2;
	this.MAX_DIR_SHADOW = 1;
	this.MAX_POINT_LIGHT = 10;
	this.MAX_SPOT_LIGHT = 10;
	this.MAX_DIR_LIGHT = 2;
	this.defaultForwardShader = new h3d_shader_pbr_DefaultForward();
	this.createBuffers();
};
$hxClasses["h3d.scene.pbr.LightBuffer"] = h3d_scene_pbr_LightBuffer;
h3d_scene_pbr_LightBuffer.__name__ = "h3d.scene.pbr.LightBuffer";
h3d_scene_pbr_LightBuffer.prototype = {
	createBuffers: function() {
		var stride = 4;
		var size = 0;
		size += this.MAX_DIR_LIGHT * this.DIR_LIGHT_INFO_SIZE;
		size += this.MAX_POINT_LIGHT * this.POINT_LIGHT_INFO_SIZE;
		size += this.MAX_SPOT_LIGHT * this.SPOT_LIGHT_INFO_SIZE;
		if(1 >= size) {
			size = 1;
		}
		var length = size * stride;
		if(length == null) {
			length = 0;
		}
		this.lightInfos = hxd__$FloatBuffer_Float32Expand._new(length);
		this.defaultForwardShader.lightInfos__ = new h3d_Buffer(size,hxd_BufferFormat.make([new hxd_BufferInput("uniformData",4,0)]),[h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.Dynamic]);
		var _this = this.defaultForwardShader;
		_this.constModified = true;
		_this.BUFFER_SIZE__ = size;
		this.defaultForwardShader.dirLightStride__ = this.DIR_LIGHT_INFO_SIZE * this.MAX_DIR_LIGHT;
		this.defaultForwardShader.pointLightStride__ = this.POINT_LIGHT_INFO_SIZE * this.MAX_POINT_LIGHT;
	}
	,setBuffers: function(s) {
		s.lightInfos__ = this.defaultForwardShader.lightInfos__;
		s.dirLightStride__ = this.defaultForwardShader.dirLightStride__;
		s.pointLightStride__ = this.defaultForwardShader.pointLightStride__;
		s.cameraPosition__ = this.defaultForwardShader.cameraPosition__;
		s.emissivePower__ = this.defaultForwardShader.emissivePower__;
		s.constModified = true;
		s.BUFFER_SIZE__ = this.defaultForwardShader.BUFFER_SIZE__;
		s.pointLightCount__ = this.defaultForwardShader.pointLightCount__;
		s.spotLightCount__ = this.defaultForwardShader.spotLightCount__;
		s.dirLightCount__ = this.defaultForwardShader.dirLightCount__;
		s.constModified = true;
		s.DIR_SHADOW_COUNT__ = this.defaultForwardShader.DIR_SHADOW_COUNT__;
		s.constModified = true;
		s.POINT_SHADOW_COUNT__ = this.defaultForwardShader.POINT_SHADOW_COUNT__;
		s.constModified = true;
		s.SPOT_SHADOW_COUNT__ = this.defaultForwardShader.SPOT_SHADOW_COUNT__;
		var _g = 0;
		var _g1 = this.defaultForwardShader.POINT_SHADOW_COUNT__;
		while(_g < _g1) {
			var i = _g++;
			s.pointShadowMaps__[i] = this.defaultForwardShader.pointShadowMaps__[i];
		}
		var _g = 0;
		var _g1 = this.defaultForwardShader.SPOT_SHADOW_COUNT__;
		while(_g < _g1) {
			var i = _g++;
			s.spotShadowMaps__[i] = this.defaultForwardShader.spotShadowMaps__[i];
		}
		var _g = 0;
		var _g1 = this.defaultForwardShader.DIR_SHADOW_COUNT__;
		while(_g < _g1) {
			var i = _g++;
			s.dirShadowMaps__[i] = this.defaultForwardShader.dirShadowMaps__[i];
		}
		s.constModified = true;
		s.USE_INDIRECT__ = this.defaultForwardShader.USE_INDIRECT__;
		if(s.USE_INDIRECT__) {
			s.irrRotation__ = this.defaultForwardShader.irrRotation__;
			s.irrPower__ = this.defaultForwardShader.irrPower__;
			s.irrLut__ = this.defaultForwardShader.irrLut__;
			s.irrDiffuse__ = this.defaultForwardShader.irrDiffuse__;
			s.irrSpecular__ = this.defaultForwardShader.irrSpecular__;
			s.irrSpecularLevels__ = this.defaultForwardShader.irrSpecularLevels__;
		}
	}
	,fillFloats: function(b,f1,f2,f3,f4,i) {
		b.array[i] = f1;
		b.array[i + 1] = f2;
		b.array[i + 2] = f3;
		b.array[i + 3] = f4;
	}
	,fillVector: function(b,v,i) {
		b.array[i] = v.x;
		b.array[i + 1] = v.y;
		b.array[i + 2] = v.z;
		b.array[i + 3] = 1;
	}
	,sortingCriteria: function(l1,l2,cameraTarget) {
		var _this = l1.getAbsPos();
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var x = _this._41;
		var y = _this._42;
		var z = _this._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var x = v_x - cameraTarget.x;
		var y = v_y - cameraTarget.y;
		var z = v_z - cameraTarget.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		var d1 = Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z);
		var _this = l2.getAbsPos();
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var x = _this._41;
		var y = _this._42;
		var z = _this._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		v_x = x;
		v_y = y;
		v_z = z;
		var x = v_x - cameraTarget.x;
		var y = v_y - cameraTarget.y;
		var z = v_z - cameraTarget.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		var d2 = Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z);
		if(d1 > d2) {
			return 1;
		} else {
			return -1;
		}
	}
	,sortLights: function(ctx) {
		var _gthis = this;
		var lights = [];
		var value = ctx.lights;
		var l = ((value) instanceof h3d_scene_pbr_Light) ? value : null;
		if(l == null) {
			return null;
		}
		while(l != null) {
			if(l.enableForward) {
				lights.push(l);
			}
			var value = l.next;
			l = ((value) instanceof h3d_scene_pbr_Light) ? value : null;
		}
		lights.sort(function(l1,l2) {
			return _gthis.sortingCriteria(l1,l2,ctx.camera.target);
		});
		return lights;
	}
	,fillLights: function(lights,shadows) {
		if(lights == null) {
			return;
		}
		this.pointLightsShadow = [];
		this.spotLightsShadow = [];
		this.dirLightsShadow = [];
		this.pointLights = [];
		this.spotLights = [];
		this.dirLights = [];
		var dirShadowCount = 0;
		var pointShadowCount = 0;
		var spotShadowCount = 0;
		var dirLightCount = 0;
		var pointLightCount = 0;
		var spotLightCount = 0;
		var _g = 0;
		while(_g < lights.length) {
			var l = lights[_g];
			++_g;
			var dl = ((l) instanceof h3d_scene_pbr_DirLight) ? l : null;
			if(dl != null) {
				if(dirLightCount + dirShadowCount < this.MAX_DIR_LIGHT) {
					var hasShadow = dl.shadows != null && dl.shadows.enabled && dl.shadows.mode != h3d_pass_RenderMode.None && shadows;
					if(hasShadow && dirShadowCount < this.MAX_DIR_SHADOW) {
						this.dirLightsShadow.push(dl);
						++dirShadowCount;
					} else {
						this.dirLights.push(dl);
						++dirLightCount;
					}
				}
			}
			var pl = ((l) instanceof h3d_scene_pbr_PointLight) ? l : null;
			if(pl != null) {
				if(pointLightCount + pointShadowCount < this.MAX_POINT_LIGHT) {
					var hasShadow1 = pl.shadows != null && pl.shadows.enabled && pl.shadows.mode != h3d_pass_RenderMode.None && shadows;
					if(hasShadow1 && pointShadowCount < this.MAX_POINT_SHADOW) {
						this.pointLightsShadow.push(pl);
						++pointShadowCount;
					} else {
						this.pointLights.push(pl);
						++pointLightCount;
					}
				}
			}
			var sl = ((l) instanceof h3d_scene_pbr_SpotLight) ? l : null;
			if(sl != null) {
				if(spotLightCount + spotShadowCount < this.MAX_SPOT_LIGHT) {
					var hasShadow2 = sl.shadows != null && sl.shadows.enabled && sl.shadows.mode != h3d_pass_RenderMode.None && shadows;
					if(hasShadow2 && spotShadowCount < this.MAX_SPOT_SHADOW) {
						this.spotLightsShadow.push(sl);
						++spotShadowCount;
					} else {
						this.spotLights.push(sl);
						++spotLightCount;
					}
				}
			}
		}
	}
	,sync: function(ctx) {
		if(this.defaultForwardShader.lightInfos__.vbuf == null) {
			this.createBuffers();
		}
		var r = ctx.scene.renderer;
		var pbrRenderer = ((r) instanceof h3d_scene_pbr_Renderer) ? r : null;
		if(pbrRenderer == null) {
			return;
		}
		var p = pbrRenderer.props;
		var s = this.defaultForwardShader;
		s.cameraPosition__ = ctx.camera.pos;
		s.emissivePower__ = p.emissive * p.emissive;
		s.pointLightCount__ = 0;
		s.spotLightCount__ = 0;
		s.dirLightCount__ = 0;
		var _g = 0;
		var _g1 = this.lightInfos.pos;
		while(_g < _g1) {
			var i = _g++;
			this.lightInfos.array[i] = 0;
		}
		var lights = this.sortLights(ctx);
		this.fillLights(lights,pbrRenderer.shadows);
		var _g = 0;
		var _g1 = this.dirLightsShadow.length;
		while(_g < _g1) {
			var li = _g++;
			var dl = this.dirLightsShadow[li];
			var i = li * this.DIR_LIGHT_INFO_SIZE * 4;
			var pbr = dl.pbr;
			var b = this.lightInfos;
			var v = pbr.lightColor__;
			b.array[i] = v.x;
			b.array[i + 1] = v.y;
			b.array[i + 2] = v.z;
			b.array[i + 3] = 1;
			var b1 = this.lightInfos;
			var v1 = pbr.lightDir__;
			var i1 = i + 4;
			b1.array[i1] = v1.x;
			b1.array[i1 + 1] = v1.y;
			b1.array[i1 + 2] = v1.z;
			b1.array[i1 + 3] = 1;
			this.lightInfos.array[i + 3] = 1.0;
			this.lightInfos.array[i + 7] = dl.shadows.bias;
			s.dirShadowMaps__[li] = dl.shadows.getShadowTex();
			var mat = dl.shadows.getShadowProj();
			var b2 = this.lightInfos;
			var i2 = i + 8;
			b2.array[i2] = mat._11;
			b2.array[i2 + 1] = mat._21;
			b2.array[i2 + 2] = mat._31;
			b2.array[i2 + 3] = mat._41;
			var b3 = this.lightInfos;
			var i3 = i + 12;
			b3.array[i3] = mat._12;
			b3.array[i3 + 1] = mat._22;
			b3.array[i3 + 2] = mat._32;
			b3.array[i3 + 3] = mat._42;
			var b4 = this.lightInfos;
			var i4 = i + 16;
			b4.array[i4] = mat._13;
			b4.array[i4 + 1] = mat._23;
			b4.array[i4 + 2] = mat._33;
			b4.array[i4 + 3] = mat._43;
		}
		var _g = 0;
		var _g1 = this.dirLights.length;
		while(_g < _g1) {
			var li = _g++;
			var dl = this.dirLights[li];
			var i = (li + this.dirLightsShadow.length) * this.DIR_LIGHT_INFO_SIZE * 4;
			var pbr = dl.pbr;
			var b = this.lightInfos;
			var v = pbr.lightColor__;
			b.array[i] = v.x;
			b.array[i + 1] = v.y;
			b.array[i + 2] = v.z;
			b.array[i + 3] = 1;
			var b1 = this.lightInfos;
			var v1 = pbr.lightDir__;
			var i1 = i + 4;
			b1.array[i1] = v1.x;
			b1.array[i1 + 1] = v1.y;
			b1.array[i1 + 2] = v1.z;
			b1.array[i1 + 3] = 1;
			this.lightInfos.array[i + 3] = -1.0;
		}
		var _g = 0;
		var _g1 = this.pointLightsShadow.length;
		while(_g < _g1) {
			var li = _g++;
			var pl = this.pointLightsShadow[li];
			var offset = this.MAX_DIR_LIGHT * this.DIR_LIGHT_INFO_SIZE * 4;
			var i = li * this.POINT_LIGHT_INFO_SIZE * 4 + offset;
			var pbr = pl.pbr;
			var b = this.lightInfos;
			var v = pbr.lightColor__;
			b.array[i] = v.x;
			b.array[i + 1] = v.y;
			b.array[i + 2] = v.z;
			b.array[i + 3] = 1;
			this.lightInfos.array[i + 3] = pbr.pointSize__;
			var b1 = this.lightInfos;
			var v1 = pbr.lightPos__;
			var i1 = i + 4;
			b1.array[i1] = v1.x;
			b1.array[i1 + 1] = v1.y;
			b1.array[i1 + 2] = v1.z;
			b1.array[i1 + 3] = 1;
			this.lightInfos.array[i + 7] = pbr.invLightRange4__;
			var this1 = this.lightInfos;
			var value = pl.get_range();
			this1.array[i + 8] = value;
			this.lightInfos.array[i + 9] = 1.0;
			this.lightInfos.array[i + 10] = pl.shadows.bias;
			s.pointShadowMaps__[li] = pl.shadows.getShadowTex();
		}
		var _g = 0;
		var _g1 = this.pointLights.length;
		while(_g < _g1) {
			var li = _g++;
			var pl = this.pointLights[li];
			var offset = this.MAX_DIR_LIGHT * this.DIR_LIGHT_INFO_SIZE * 4;
			var i = (li + this.pointLightsShadow.length) * this.POINT_LIGHT_INFO_SIZE * 4 + offset;
			var pbr = pl.pbr;
			var b = this.lightInfos;
			var v = pbr.lightColor__;
			b.array[i] = v.x;
			b.array[i + 1] = v.y;
			b.array[i + 2] = v.z;
			b.array[i + 3] = 1;
			this.lightInfos.array[i + 3] = pbr.pointSize__;
			var b1 = this.lightInfos;
			var v1 = pbr.lightPos__;
			var i1 = i + 4;
			b1.array[i1] = v1.x;
			b1.array[i1 + 1] = v1.y;
			b1.array[i1 + 2] = v1.z;
			b1.array[i1 + 3] = 1;
			this.lightInfos.array[i + 7] = pbr.invLightRange4__;
			var this1 = this.lightInfos;
			var value = pl.get_range();
			this1.array[i + 8] = value;
			this.lightInfos.array[i + 9] = -1.0;
		}
		var _g = 0;
		var _g1 = this.spotLightsShadow.length;
		while(_g < _g1) {
			var li = _g++;
			var sl = this.spotLightsShadow[li];
			var offset = (this.MAX_DIR_LIGHT * this.DIR_LIGHT_INFO_SIZE + this.MAX_POINT_LIGHT * this.POINT_LIGHT_INFO_SIZE) * 4;
			var i = li * this.SPOT_LIGHT_INFO_SIZE * 4 + offset;
			var pbr = sl.pbr;
			var b = this.lightInfos;
			var v = pbr.lightColor__;
			b.array[i] = v.x;
			b.array[i + 1] = v.y;
			b.array[i + 2] = v.z;
			b.array[i + 3] = 1;
			this.lightInfos.array[i + 3] = pbr.range__;
			var b1 = this.lightInfos;
			var v1 = pbr.lightPos__;
			var i1 = i + 4;
			b1.array[i1] = v1.x;
			b1.array[i1 + 1] = v1.y;
			b1.array[i1 + 2] = v1.z;
			b1.array[i1 + 3] = 1;
			this.lightInfos.array[i + 7] = pbr.invLightRange4__;
			var b2 = this.lightInfos;
			var v2 = pbr.spotDir__;
			var i2 = i + 8;
			b2.array[i2] = v2.x;
			b2.array[i2 + 1] = v2.y;
			b2.array[i2 + 2] = v2.z;
			b2.array[i2 + 3] = 1;
			this.lightInfos.array[i + 12] = pbr.angle__;
			this.lightInfos.array[i + 13] = pbr.fallOff__;
			this.lightInfos.array[i + 14] = 1.0;
			this.lightInfos.array[i + 15] = sl.shadows.bias;
			var mat = sl.shadows.getShadowProj();
			var b3 = this.lightInfos;
			var i3 = i + 16;
			b3.array[i3] = mat._11;
			b3.array[i3 + 1] = mat._21;
			b3.array[i3 + 2] = mat._31;
			b3.array[i3 + 3] = mat._41;
			var b4 = this.lightInfos;
			var i4 = i + 20;
			b4.array[i4] = mat._12;
			b4.array[i4 + 1] = mat._22;
			b4.array[i4 + 2] = mat._32;
			b4.array[i4 + 3] = mat._42;
			var b5 = this.lightInfos;
			var i5 = i + 24;
			b5.array[i5] = mat._13;
			b5.array[i5 + 1] = mat._23;
			b5.array[i5 + 2] = mat._33;
			b5.array[i5 + 3] = mat._43;
			var b6 = this.lightInfos;
			var i6 = i + 28;
			b6.array[i6] = mat._14;
			b6.array[i6 + 1] = mat._24;
			b6.array[i6 + 2] = mat._34;
			b6.array[i6 + 3] = mat._44;
			s.spotShadowMaps__[li] = sl.shadows.getShadowTex();
		}
		var _g = 0;
		var _g1 = this.spotLights.length;
		while(_g < _g1) {
			var li = _g++;
			var sl = this.spotLights[li];
			var offset = (this.MAX_DIR_LIGHT * this.DIR_LIGHT_INFO_SIZE + this.MAX_POINT_LIGHT * this.POINT_LIGHT_INFO_SIZE) * 4;
			var i = (li + this.spotLightsShadow.length) * this.SPOT_LIGHT_INFO_SIZE * 4 + offset;
			var pbr = sl.pbr;
			var b = this.lightInfos;
			var v = pbr.lightColor__;
			b.array[i] = v.x;
			b.array[i + 1] = v.y;
			b.array[i + 2] = v.z;
			b.array[i + 3] = 1;
			this.lightInfos.array[i + 3] = pbr.range__;
			var b1 = this.lightInfos;
			var v1 = pbr.lightPos__;
			var i1 = i + 4;
			b1.array[i1] = v1.x;
			b1.array[i1 + 1] = v1.y;
			b1.array[i1 + 2] = v1.z;
			b1.array[i1 + 3] = 1;
			this.lightInfos.array[i + 7] = pbr.invLightRange4__;
			var b2 = this.lightInfos;
			var v2 = pbr.spotDir__;
			var i2 = i + 8;
			b2.array[i2] = v2.x;
			b2.array[i2 + 1] = v2.y;
			b2.array[i2 + 2] = v2.z;
			b2.array[i2 + 3] = 1;
			this.lightInfos.array[i + 12] = pbr.angle__;
			this.lightInfos.array[i + 13] = pbr.fallOff__;
			this.lightInfos.array[i + 14] = -1.0;
		}
		s.dirLightCount__ = this.dirLights.length;
		s.pointLightCount__ = this.pointLights.length;
		s.spotLightCount__ = this.spotLights.length;
		s.constModified = true;
		s.DIR_SHADOW_COUNT__ = this.MAX_DIR_SHADOW;
		s.constModified = true;
		s.POINT_SHADOW_COUNT__ = this.MAX_POINT_SHADOW;
		s.constModified = true;
		s.SPOT_SHADOW_COUNT__ = this.MAX_SPOT_SHADOW;
		s.lightInfos__.uploadFloats(this.lightInfos,0,s.lightInfos__.vertices,0);
		this.pointLights = [];
		this.spotLights = [];
		this.dirLights = [];
		this.pointLightsShadow = [];
		this.spotLightsShadow = [];
		this.dirLightsShadow = [];
		var pbrIndirect = pbrRenderer.pbrIndirect;
		s.constModified = true;
		s.USE_INDIRECT__ = pbrRenderer.env != null && pbrIndirect.irrLut__ != null;
		if(s.USE_INDIRECT__) {
			s.irrRotation__ = pbrIndirect.irrRotation__;
			s.irrPower__ = pbrIndirect.irrPower__;
			s.irrLut__ = pbrIndirect.irrLut__;
			s.irrDiffuse__ = pbrIndirect.irrDiffuse__;
			s.irrSpecular__ = pbrIndirect.irrSpecular__;
			s.irrSpecularLevels__ = pbrIndirect.irrSpecularLevels__;
		}
	}
	,dispose: function() {
		this.defaultForwardShader.lightInfos__.dispose();
	}
	,__class__: h3d_scene_pbr_LightBuffer
};
var h3d_scene_pbr_LightSystem = function() {
	this.lightingShaders = [];
	this.forwardMode = false;
	h3d_scene_LightSystem.call(this);
	this.lightBuffer = new h3d_scene_pbr_LightBuffer();
};
$hxClasses["h3d.scene.pbr.LightSystem"] = h3d_scene_pbr_LightSystem;
h3d_scene_pbr_LightSystem.__name__ = "h3d.scene.pbr.LightSystem";
h3d_scene_pbr_LightSystem.__super__ = h3d_scene_LightSystem;
h3d_scene_pbr_LightSystem.prototype = $extend(h3d_scene_LightSystem.prototype,{
	computeLight: function(obj,shaders) {
		var light = ((obj) instanceof h3d_scene_pbr_Light) ? obj : null;
		if(light != null) {
			shaders = this.ctx.allocShaderList(light.shader,shaders);
			if(light.shadows.shader != null && light.shadows.mode != h3d_pass_RenderMode.None) {
				shaders = this.ctx.allocShaderList(light.shadows.shader,shaders);
			}
			var _g = 0;
			var _g1 = this.lightingShaders;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				shaders = this.ctx.allocShaderList(s,shaders);
			}
		} else if(this.forwardMode) {
			var found = false;
			var _g_l = shaders;
			var _g_last = null;
			while(_g_l != _g_last) {
				var s = _g_l.s;
				_g_l = _g_l.next;
				var s1 = s;
				var forward = ((s1) instanceof h3d_shader_pbr_DefaultForward) ? s1 : null;
				if(forward != null) {
					this.lightBuffer.setBuffers(forward);
					found = true;
					break;
				}
			}
			if(!found) {
				shaders = this.ctx.allocShaderList(this.lightBuffer.defaultForwardShader,shaders);
			}
		}
		return shaders;
	}
	,drawShadows: function(light,passes) {
		light.shadows.setContext(this.ctx);
		light.shadows.draw(passes);
		if(passes.discarded != null) {
			passes.lastDisc.next = passes.current;
			passes.current = passes.discarded;
			passes.discarded = passes.lastDisc = null;
		}
	}
	,drawScreenLights: function(r,lightPass,shadows) {
		if(shadows == null) {
			shadows = true;
		}
		var plight = this.ctx.lights;
		var currentTarget = this.ctx.engine.getCurrentTarget();
		var width = currentTarget == null ? this.ctx.engine.width : currentTarget.width;
		var height = currentTarget == null ? this.ctx.engine.height : currentTarget.height;
		while(plight != null) {
			var light = ((plight) instanceof h3d_scene_pbr_Light) ? plight : null;
			if(light != null && light.primitive == null) {
				if(light.shadows.shader != null && shadows) {
					lightPass.pass.addShader(light.shadows.shader);
				}
				lightPass.pass.addShader(light.shader);
				var _g = 0;
				var _g1 = this.lightingShaders;
				while(_g < _g1.length) {
					var s = _g1[_g];
					++_g;
					lightPass.pass.addShader(s);
				}
				lightPass.render();
				lightPass.pass.removeShader(light.shader);
				var _g2 = 0;
				var _g3 = this.lightingShaders;
				while(_g2 < _g3.length) {
					var s1 = _g3[_g2];
					++_g2;
					lightPass.pass.removeShader(s1);
				}
				if(light.shadows.shader != null) {
					lightPass.pass.removeShader(light.shadows.shader);
				}
			}
			plight = plight.next;
		}
	}
	,dispose: function() {
		this.lightBuffer.dispose();
	}
	,__class__: h3d_scene_pbr_LightSystem
});
var h3d_scene_pbr_PointLight = function(parent) {
	this.s = new h3d_col_Sphere();
	this.zNear = 0.02;
	this.size = 0.;
	this.pbr = new h3d_shader_pbr_PointLight();
	this.shadows = new h3d_pass_PointShadowMap(this,true);
	h3d_scene_pbr_Light.call(this,this.pbr,parent);
	this.set_range(10);
	this.primitive = h3d_prim_Sphere.defaultUnitSphere();
};
$hxClasses["h3d.scene.pbr.PointLight"] = h3d_scene_pbr_PointLight;
h3d_scene_pbr_PointLight.__name__ = "h3d.scene.pbr.PointLight";
h3d_scene_pbr_PointLight.__super__ = h3d_scene_pbr_Light;
h3d_scene_pbr_PointLight.prototype = $extend(h3d_scene_pbr_Light.prototype,{
	clone: function(o) {
		var pl = o == null ? new h3d_scene_pbr_PointLight(null) : o;
		h3d_scene_pbr_Light.prototype.clone.call(this,pl);
		pl.size = this.size;
		pl.set_range(this.get_range());
		return pl;
	}
	,get_range: function() {
		var minScale = 1.0;
		var p = this.parent;
		while(p != null) {
			var a = p.scaleX;
			var a1 = p.scaleY;
			var b = p.scaleZ;
			var b1 = a1 > b ? b : a1;
			minScale *= a > b1 ? b1 : a;
			p = p.parent;
		}
		return this.scaleX * minScale;
	}
	,set_range: function(v) {
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.scaleY = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.scaleZ = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		return v;
	}
	,draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,sync: function(ctx) {
		h3d_scene_pbr_Light.prototype.sync.call(this,ctx);
		var _this = this.pbr.lightColor__;
		var v = this._color;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var a = this.get_range();
		var range = a < 1e-10 ? 1e-10 : a;
		var a = this.size;
		var size = a > range ? range : a;
		var power = this.power * 10;
		var this1 = this.pbr.lightColor__;
		var v = power * power;
		this1.x *= v;
		this1.y *= v;
		this1.z *= v;
		var _this = this.pbr.lightPos__;
		var x = this.absPos._41;
		var y = this.absPos._42;
		var z = this.absPos._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.pbr.invLightRange4__ = 1 / (range * range * range * range);
		this.pbr.pointSize__ = size;
		this.pbr.occlusionFactor__ = this.occlusionFactor;
	}
	,emit: function(ctx) {
		if(ctx.computingStatic) {
			h3d_scene_pbr_Light.prototype.emit.call(this,ctx);
			return;
		}
		if(ctx.pbrLightPass == null) {
			throw haxe_Exception.thrown("Rendering a pbr light require a PBR compatible scene renderer");
		}
		this.s.x = this.absPos._41;
		this.s.y = this.absPos._42;
		this.s.z = this.absPos._43;
		this.s.r = this.get_range();
		if(!ctx.camera.frustum.hasSphere(this.s)) {
			return;
		}
		h3d_scene_pbr_Light.prototype.emit.call(this,ctx);
		ctx.emitPass(ctx.pbrLightPass,this);
	}
	,__class__: h3d_scene_pbr_PointLight
});
var h3d_scene_pbr_DepthCopy = function() {
	this.depthTextureChannel__ = hxsl_Channel.Unknown;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.scene.pbr.DepthCopy"] = h3d_scene_pbr_DepthCopy;
h3d_scene_pbr_DepthCopy.__name__ = "h3d.scene.pbr.DepthCopy";
h3d_scene_pbr_DepthCopy.__super__ = h3d_shader_ScreenShader;
h3d_scene_pbr_DepthCopy.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_depthTexture: function() {
		return this.depthTexture__;
	}
	,set_depthTexture: function(_v) {
		this.constModified = true;
		return this.depthTexture__ = _v;
	}
	,get_depthTextureChannel: function() {
		return this.depthTextureChannel__;
	}
	,set_depthTextureChannel: function(v) {
		this.constModified = true;
		return this.depthTextureChannel__ = v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.depthTexture__ == null) {
			this.depthTextureChannel__ = hxsl_Channel.Unknown;
		} else if(this.depthTextureChannel__ == hxsl_Channel.Unknown) {
			if(this.depthTexture__.format == h3d_mat_Texture.nativeFormat) {
				this.depthTextureChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw haxe_Exception.thrown("depthTexture" + "Channel is not set");
			}
		}
		this.constBits |= globals.allocChannelID(this.depthTexture__) << 3 | this.depthTextureChannel__._hx_index;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.depthTexture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_scene_pbr_DepthCopy.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.depthTexture__ = this.depthTexture__;
		return s;
	}
	,__class__: h3d_scene_pbr_DepthCopy
});
var hxsl_Output = $hxEnums["hxsl.Output"] = { __ename__:"hxsl.Output",__constructs__:null
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="Const",$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.v,this.size];}}; },$_._hx_name="Value",$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="PackNormal",$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="PackFloat",$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.a];}}; },$_._hx_name="Vec2",$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.a];}}; },$_._hx_name="Vec3",$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.a];}}; },$_._hx_name="Vec4",$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr,__params__:function(){ return [this.a,this.swiz];}}; },$_._hx_name="Swiz",$_)
};
hxsl_Output.__constructs__ = [hxsl_Output.Const,hxsl_Output.Value,hxsl_Output.PackNormal,hxsl_Output.PackFloat,hxsl_Output.Vec2,hxsl_Output.Vec3,hxsl_Output.Vec4,hxsl_Output.Swiz];
hxsl_Output.__empty_constructs__ = [];
var hxsl_Component = $hxEnums["hxsl.Component"] = { __ename__:"hxsl.Component",__constructs__:null
	,X: {_hx_name:"X",_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_name:"Y",_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_name:"Z",_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_name:"W",_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl_Component.__constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var h3d_scene_pbr_Renderer = function(env) {
	this.colorDepthOutput = new h3d_pass_Output("colorDepth",[hxsl_Output.Value("output.color"),hxsl_Output.Vec4([hxsl_Output.Value("output.depth"),hxsl_Output.Const(0),hxsl_Output.Const(0),h3d_scene_pbr_Renderer.ALPHA])]);
	this.emissiveDecalsOutput = new h3d_pass_Output("emissiveDecal",[hxsl_Output.Vec4([hxsl_Output.Swiz(hxsl_Output.Value("output.color"),[hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z]),hxsl_Output.Value("output.albedoStrength",1)]),hxsl_Output.Vec4([hxsl_Output.Value("output.normal",3),hxsl_Output.Value("output.normalStrength",1)]),hxsl_Output.Vec4([hxsl_Output.Value("output.metalness"),hxsl_Output.Value("output.roughness"),hxsl_Output.Value("output.occlusion"),hxsl_Output.Value("output.pbrStrength")]),hxsl_Output.Vec4([hxsl_Output.Value("output.emissive"),hxsl_Output.Value("output.custom1"),hxsl_Output.Value("output.custom2"),hxsl_Output.Value("output.emissiveStrength")])]);
	this.decalsOutput = new h3d_pass_Output("decals",[hxsl_Output.Vec4([hxsl_Output.Swiz(hxsl_Output.Value("output.color"),[hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z]),hxsl_Output.Value("output.albedoStrength",1)]),hxsl_Output.Vec4([hxsl_Output.Value("output.normal",3),hxsl_Output.Value("output.normalStrength",1)]),hxsl_Output.Vec4([hxsl_Output.Value("output.metalness"),hxsl_Output.Value("output.roughness"),hxsl_Output.Value("output.occlusion"),hxsl_Output.Value("output.pbrStrength")])]);
	this.output = new h3d_pass_Output("default",[hxsl_Output.Value("output.color"),hxsl_Output.Vec4([hxsl_Output.Value("output.normal",3),h3d_scene_pbr_Renderer.ALPHA]),hxsl_Output.Vec4([hxsl_Output.Value("output.metalness"),hxsl_Output.Value("output.roughness"),hxsl_Output.Value("output.occlusion"),h3d_scene_pbr_Renderer.ALPHA]),hxsl_Output.Vec4([hxsl_Output.Value("output.emissive"),hxsl_Output.Value("output.custom1"),hxsl_Output.Value("output.custom2"),h3d_scene_pbr_Renderer.ALPHA]),hxsl_Output.Vec4([hxsl_Output.Value("output.depth"),hxsl_Output.Const(0),hxsl_Output.Const(0),h3d_scene_pbr_Renderer.ALPHA])]);
	this.debugShadowMapIndex = 1;
	this.displayMode = "Pbr";
	this.toneMode = "Reinhard";
	this.skyMode = "Hide";
	this.textures = { albedo : null, normal : null, pbr : null, other : null, depth : null, hdr : null, ldr : null};
	this.indirectEnv = true;
	this.performance = new h3d_pass_ScreenFx(new h3d_shader_pbr_PerformanceViewer());
	this.enableFXAA = true;
	this.pbrProps = new h3d_shader_pbr_PropsImport();
	this.pbrDirect = new h3d_shader_pbr_Direct();
	this.pbrIndirect = new h3d_shader_pbr_Indirect();
	this.fxaa = new h3d_pass_FXAA();
	this.depthCopy = new h3d_pass_ScreenFx(new h3d_scene_pbr_DepthCopy());
	this.tonemap = new h3d_pass_ScreenFx(new h3d_shader_pbr_ToneMapping());
	this.pbrOut = new h3d_pass_ScreenFx(new h3d_shader_ScreenShader());
	this.slides = new h3d_pass_ScreenFx(new h3d_shader_pbr_Slides());
	h3d_scene_Renderer.call(this);
	this.env = env;
	this.defaultPass = new h3d_pass_Output("color");
	this.slides.pass.addShader(this.pbrProps);
	this.pbrOut.pass.addShader(this.pbrIndirect);
	this.pbrOut.pass.addShader(this.pbrProps);
	this.pbrOut.pass.setBlendMode(h2d_BlendMode.Add);
	this.pbrOut.pass.stencil = new h3d_mat_Stencil();
	this.pbrOut.pass.stencil.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.pbrOut.pass.stencil.setFunc(h3d_mat_Compare.NotEqual,128,128,128);
	this.allPasses.push(this.output);
	this.allPasses.push(this.defaultPass);
	this.allPasses.push(this.decalsOutput);
	this.allPasses.push(this.colorDepthOutput);
	this.allPasses.push(this.emissiveDecalsOutput);
	this.allPasses.push(new h3d_pass_Shadows(null));
	this.refreshProps();
};
$hxClasses["h3d.scene.pbr.Renderer"] = h3d_scene_pbr_Renderer;
h3d_scene_pbr_Renderer.__name__ = "h3d.scene.pbr.Renderer";
h3d_scene_pbr_Renderer.__super__ = h3d_scene_Renderer;
h3d_scene_pbr_Renderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	dispose: function() {
		h3d_scene_Renderer.prototype.dispose.call(this);
	}
	,addShader: function(s) {
		this.tonemap.pass.addShader(s);
	}
	,get_exposure: function() {
		return this.tonemap.shader.exposure;
	}
	,set_exposure: function(v) {
		return this.tonemap.shader.set_exposure(v);
	}
	,getPassByName: function(name) {
		switch(name) {
		case "additive":case "alpha":case "default":
			return this.output;
		case "decal":
			return this.decalsOutput;
		case "afterTonemapping":case "albedo":case "beforeTonemapping":case "beforeTonemappingAlpha":case "distortion":case "forward":case "forwardAlpha":case "overlay":
			return this.defaultPass;
		}
		return h3d_scene_Renderer.prototype.getPassByName.call(this,name);
	}
	,start: function() {
		if(this.pbrLightPass == null) {
			this.pbrLightPass = new h3d_mat_Pass("lights");
			this.pbrLightPass.addShader(new h3d_shader_BaseMesh());
			this.pbrLightPass.addShader(this.pbrDirect);
			this.pbrLightPass.addShader(this.pbrProps);
			var _this = this.pbrLightPass;
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.One;
			_this.set_blendSrc(src);
			_this.set_blendAlphaSrc(src);
			_this.set_blendDst(dst);
			_this.set_blendAlphaDst(dst);
			this.pbrLightPass.set_culling(h3d_mat_Face.Front);
			this.pbrLightPass.depth(false,h3d_mat_Compare.GreaterEqual);
			this.pbrLightPass.set_enableLights(true);
		}
		this.ctx.pbrLightPass = this.pbrLightPass;
	}
	,cullPasses: function(passes,f) {
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
	}
	,draw: function(name) {
		var _gthis = this;
		var passes = this.get(name);
		var f = function(col) {
			return col.inFrustum(_gthis.ctx.camera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		this.defaultPass.draw(passes);
		if(passes.discarded != null) {
			passes.lastDisc.next = passes.current;
			passes.current = passes.discarded;
			passes.discarded = passes.lastDisc = null;
		}
	}
	,renderPass: function(p,passes,sort) {
		var _gthis = this;
		var f = function(col) {
			return col.inFrustum(_gthis.ctx.camera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		p.draw(passes,sort);
		if(passes.discarded != null) {
			passes.lastDisc.next = passes.current;
			passes.current = passes.discarded;
			passes.discarded = passes.lastDisc = null;
		}
	}
	,lighting: function() {
		this.begin(h3d_impl_Step.Shadows);
		var value = this.getLightSystem();
		var ls = ((value) instanceof h3d_scene_pbr_LightSystem) ? value : null;
		var count = this.ctx.engine.drawCalls;
		if(ls != null) {
			this.drawShadows(ls);
		}
		if(this.ctx.lightSystem != null) {
			this.ctx.lightSystem.drawPasses = this.ctx.engine.drawCalls - count;
		}
		this.end();
		var pbrLightSystem = this.ctx.lightSystem;
		if(pbrLightSystem != null) {
			while(pbrLightSystem.lightingShaders.length != 0) pbrLightSystem.lightingShaders.pop();
			pbrLightSystem.lightBuffer.sync(this.ctx);
		}
		this.begin(h3d_impl_Step.Lighting);
		if(this.displayMode == "Performance") {
			var value = this.getLightSystem();
			var ls1 = ((value) instanceof h3d_scene_pbr_LightSystem) ? value : null;
			var s = new h3d_shader_pbr_Performance();
			this.performance.shader.gradient__ = this.getLightingPerformanceGradient();
			s.maxLights__ = this.performance.shader.gradient__.width - 1;
			ls1.lightingShaders.push(s);
		}
		var lpass = this.screenLightPass;
		if(lpass == null) {
			lpass = new h3d_pass_ScreenFx(new h3d_shader_ScreenShader());
			lpass.pass.addShader(this.pbrProps);
			lpass.pass.addShader(this.pbrDirect);
			lpass.pass.setBlendMode(h2d_BlendMode.Add);
			this.screenLightPass = lpass;
		}
		this.mark("DirectLighting");
		var _this = this.pbrProps;
		_this.constModified = true;
		_this.isScreen__ = true;
		this.beforeFullScreenLights();
		if(ls != null) {
			var count = this.ctx.engine.drawCalls;
			ls.drawScreenLights(this,lpass,this.shadows);
			this.ctx.lightSystem.drawPasses += this.ctx.engine.drawCalls - count;
		}
		this.afterFullScreenLights();
		var _this = this.pbrProps;
		_this.constModified = true;
		_this.isScreen__ = false;
		this.draw(this.pbrLightPass.name);
		if(this.displayMode == "Performance") {
			var perf = this.ctx.textures.allocTarget("performance",Math.round(this.ctx.engine.width * 1.),Math.round(this.ctx.engine.height * 1.),true,hxd_PixelFormat.RGBA16F);
			h3d_pass_Copy.run(this.textures.hdr,perf);
			this.performance.shader.hdrMap__ = perf;
		}
		this.mark("Indirect Lighting");
		if(!this.renderLightProbes() && this.indirectEnv && this.env != null && this.env.power > 0.0) {
			var _this = this.pbrProps;
			_this.constModified = true;
			_this.isScreen__ = true;
			var _this = this.pbrIndirect;
			_this.constModified = true;
			_this.drawIndirectDiffuse__ = true;
			var _this = this.pbrIndirect;
			_this.constModified = true;
			_this.drawIndirectSpecular__ = true;
			this.pbrOut.render();
		}
		this.end();
	}
	,beforeFullScreenLights: function() {
	}
	,afterFullScreenLights: function() {
	}
	,renderLightProbes: function() {
		var probePass = this.get("lightProbe");
		if(probePass.current == null) {
			return false;
		}
		var probeSort = function(passes) {
			var list = passes.current;
			var probeSort;
			if(list == null) {
				probeSort = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.obj.getAbsPos()._44 - q.obj.getAbsPos()._44 | 0) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				probeSort = list;
			}
			passes.current = probeSort;
		};
		var depth = true;
		var size = 1.0;
		if(size == null) {
			size = 1.;
		}
		if(depth == null) {
			depth = true;
		}
		var probeOutput = this.ctx.textures.allocTarget("probeOutput",Math.round(this.ctx.engine.width * size),Math.round(this.ctx.engine.height * size),depth,hxd_PixelFormat.RGBA16F);
		this.ctx.engine.pushTarget(probeOutput);
		this.ctx.engine.clear(0,null,null);
		if(this.indirectEnv && this.env != null && this.env.power > 0.0) {
			var _this = this.pbrProps;
			_this.constModified = true;
			_this.isScreen__ = true;
			var _this = this.pbrIndirect;
			_this.constModified = true;
			_this.drawIndirectDiffuse__ = true;
			var _this = this.pbrIndirect;
			_this.constModified = true;
			_this.drawIndirectSpecular__ = true;
			this.pbrOut.render();
		}
		var _this = this.pbrProps;
		_this.constModified = true;
		_this.isScreen__ = false;
		this.renderPass(this.defaultPass,this.get("lightProbe"),probeSort);
		this.ctx.engine.popTarget();
		h3d_pass_Copy.run(probeOutput,this.textures.hdr,h2d_BlendMode.Add);
		return true;
	}
	,drawShadows: function(ls) {
		var light = this.ctx.lights;
		var passes = this.get("shadow");
		while(light != null) {
			var plight = ((light) instanceof h3d_scene_pbr_Light) ? light : null;
			if(plight != null) {
				if(!this.shadows) {
					passes.clear();
				}
				ls.drawShadows(plight,passes);
			}
			light = light.next;
		}
	}
	,begin: function(step) {
		this.mark($hxEnums[step.__enum__].__constructs__[step._hx_index]._hx_name);
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.enabled) {
				f.begin(this,step);
			}
		}
		this.currentStep = step;
		if(step == h3d_impl_Step.Lighting && this.renderMode == h3d_scene_RenderMode.Default) {
			if(this.displayMode == "Env") {
				this.ctx.engine.pushTarget(this.textures.albedo);
				this.ctx.engine.clear(-12566464,null,null);
				this.ctx.engine.popTarget();
			}
			if(this.displayMode == "MatCap") {
				this.ctx.engine.pushTarget(this.textures.albedo);
				this.ctx.engine.clear(-8355712,null,null);
				this.ctx.engine.popTarget();
				this.ctx.engine.pushTarget(this.textures.pbr);
				this.ctx.engine.clear(16744703,null,null);
				this.ctx.engine.popTarget();
			}
		}
	}
	,end: function() {
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.enabled) {
				f.end(this,this.currentStep);
			}
		}
		this.currentStep = null;
	}
	,computeStatic: function() {
		var light = this.ctx.lights;
		var passes = this.get("shadow");
		if(!this.shadows) {
			passes.clear();
		}
		while(light != null) {
			var plight = ((light) instanceof h3d_scene_pbr_Light) ? light : null;
			if(plight != null) {
				plight.shadows.setContext(this.ctx);
				plight.shadows.computeStatic(passes);
				if(passes.discarded != null) {
					passes.lastDisc.next = passes.current;
					passes.current = passes.discarded;
					passes.discarded = passes.lastDisc = null;
				}
			}
			light = light.next;
		}
	}
	,initTextures: function() {
		var depth = true;
		var size = 1.;
		if(size == null) {
			size = 1.;
		}
		if(depth == null) {
			depth = true;
		}
		var tmp = this.ctx.textures.allocTarget("albedo",Math.round(this.ctx.engine.width * size),Math.round(this.ctx.engine.height * size),depth,null);
		this.textures.albedo = tmp;
		var depth = true;
		var size = 1.;
		if(size == null) {
			size = 1.;
		}
		if(depth == null) {
			depth = true;
		}
		var tmp = this.ctx.textures.allocTarget("normal",Math.round(this.ctx.engine.width * size),Math.round(this.ctx.engine.height * size),depth,hxd_PixelFormat.RGBA16F);
		this.textures.normal = tmp;
		var depth = true;
		var size = 1.;
		if(size == null) {
			size = 1.;
		}
		if(depth == null) {
			depth = true;
		}
		var tmp = this.ctx.textures.allocTarget("pbr",Math.round(this.ctx.engine.width * size),Math.round(this.ctx.engine.height * size),depth,null);
		this.textures.pbr = tmp;
		var depth = true;
		var size = 1.;
		if(size == null) {
			size = 1.;
		}
		if(depth == null) {
			depth = true;
		}
		var tmp = this.ctx.textures.allocTarget("other",Math.round(this.ctx.engine.width * size),Math.round(this.ctx.engine.height * size),depth,null);
		this.textures.other = tmp;
		var depth = true;
		var size = 1.;
		if(size == null) {
			size = 1.;
		}
		if(depth == null) {
			depth = true;
		}
		var tmp = this.ctx.textures.allocTarget("depth",Math.round(this.ctx.engine.width * size),Math.round(this.ctx.engine.height * size),depth,hxd_PixelFormat.R32F);
		this.textures.depth = tmp;
		var depth = true;
		var size = 1;
		if(size == null) {
			size = 1.;
		}
		if(depth == null) {
			depth = true;
		}
		var tmp = this.ctx.textures.allocTarget("hdrOutput",Math.round(this.ctx.engine.width * size),Math.round(this.ctx.engine.height * size),depth,hxd_PixelFormat.RGBA16F);
		this.textures.hdr = tmp;
		var tmp = this.ctx.textures.allocTarget("ldrOutput",Math.round(this.ctx.engine.width * 1.),Math.round(this.ctx.engine.height * 1.),true,null);
		this.textures.ldr = tmp;
	}
	,getPbrDepth: function() {
		return this.textures.depth;
	}
	,initGlobals: function() {
		this.ctx.globals.set("albedoMap",{ texture : this.textures.albedo, channel : hxsl_Channel.R});
		var _this = this.ctx;
		var v = { texture : this.getPbrDepth(), channel : hxsl_Channel.R};
		_this.globals.set("depthMap",v);
		this.ctx.globals.set("normalMap",{ texture : this.textures.normal, channel : hxsl_Channel.R});
		this.ctx.globals.set("occlusionMap",{ texture : this.textures.pbr, channel : hxsl_Channel.B});
		this.ctx.globals.set("hdrMap",this.textures.hdr);
		this.ctx.globals.set("ldrMap",this.textures.ldr);
		this.ctx.globals.set("global.time",this.ctx.time);
		this.ctx.globals.set("camera.position",this.ctx.camera.pos);
		var _this = this.ctx;
		var v = this.ctx.camera.getInverseViewProj();
		_this.globals.set("camera.inverseViewProj",v);
	}
	,beginPbr: function() {
		var props = this.props;
		var s = this.tonemap.pass.shaders;
		while(s != null) {
			if(s.s != this.tonemap.shader) {
				this.tonemap.pass.removeShader(s.s);
			}
			s = s.next;
		}
		this.initTextures();
		this.initGlobals();
		this.pbrProps.albedoTex__ = this.textures.albedo;
		this.pbrProps.normalTex__ = this.textures.normal;
		this.pbrProps.pbrTex__ = this.textures.pbr;
		this.pbrProps.depthTex__ = this.getPbrDepth();
		this.pbrProps.otherTex__ = this.textures.other;
		this.pbrProps.cameraInverseViewProj__ = this.ctx.camera.getInverseViewProj();
		this.pbrProps.occlusionPower__ = props.occlusion * props.occlusion;
		var _this = this.pbrDirect.cameraPosition__;
		var v = this.ctx.camera.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		if(this.env != null) {
			var _this = this.pbrIndirect.cameraPosition__;
			var v = this.ctx.camera.pos;
			_this.x = v.x;
			_this.y = v.y;
			_this.z = v.z;
			this.pbrIndirect.emissivePower__ = props.emissive * props.emissive;
			var _this = this.pbrIndirect.irrRotation__;
			var x = Math.cos(this.env.rotation);
			var y = Math.sin(this.env.rotation);
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			this.pbrIndirect.irrPower__ = this.env.power * this.env.power;
			this.pbrIndirect.irrLut__ = this.env.get_lut();
			this.pbrIndirect.irrDiffuse__ = this.env.diffuse;
			this.pbrIndirect.irrSpecular__ = this.env.specular;
			this.pbrIndirect.irrSpecularLevels__ = this.env.specLevels;
			this.pbrIndirect.cameraInvViewProj__.load(this.ctx.camera.getInverseViewProj());
			this.pbrIndirect.skyHdrMax__ = 1.0;
			var _this = this.pbrIndirect;
			_this.constModified = true;
			_this.drawIndirectDiffuse__ = true;
			var _this = this.pbrIndirect;
			_this.constModified = true;
			_this.drawIndirectSpecular__ = true;
			var _this = this.pbrDirect;
			var tmp = props.forceDirectDiscard;
			_this.constModified = true;
			_this.doDiscard__ = tmp != null && tmp;
			switch(this.renderMode._hx_index) {
			case 0:
				var _this = this.pbrIndirect;
				_this.constModified = true;
				_this.showSky__ = this.skyMode != "Hide";
				var _this = this.pbrIndirect;
				_this.constModified = true;
				_this.skyColor__ = false;
				var _this = this.pbrIndirect;
				var _v;
				switch(this.skyMode) {
				case "Background":
					var _this1 = this.pbrIndirect;
					_this1.constModified = true;
					_this1.skyColor__ = true;
					var _this1 = this.pbrIndirect.skyColorValue__;
					var c = this.ctx.engine.backgroundColor;
					_this1.x = (c >> 16 & 255) / 255;
					_this1.y = (c >> 8 & 255) / 255;
					_this1.z = (c & 255) / 255;
					var _this1 = this.pbrIndirect;
					_this1.constModified = true;
					_this1.gammaCorrect__ = true;
					_v = null;
					break;
				case "CustomColor":
					var _this1 = this.pbrIndirect;
					_this1.constModified = true;
					_this1.skyColor__ = true;
					var _this1 = this.pbrIndirect.skyColorValue__;
					var c = props.skyColor;
					_this1.x = (c >> 16 & 255) / 255;
					_this1.y = (c >> 8 & 255) / 255;
					_this1.z = (c & 255) / 255;
					var _this1 = this.pbrIndirect;
					_this1.constModified = true;
					_this1.gammaCorrect__ = true;
					_v = null;
					break;
				case "Env":
					this.pbrIndirect.skyHdrMax__ = this.env.hdrMax;
					var _this1 = this.pbrIndirect;
					_this1.constModified = true;
					_this1.gammaCorrect__ = true;
					_v = this.env.get_env();
					break;
				case "Hide":
					_v = null;
					break;
				case "Irrad":
					var _this1 = this.pbrIndirect;
					_this1.constModified = true;
					_this1.gammaCorrect__ = false;
					_v = this.env.diffuse;
					break;
				case "Specular":
					var _this1 = this.pbrIndirect;
					_this1.constModified = true;
					_this1.gammaCorrect__ = false;
					_v = this.env.specular;
					break;
				}
				_this.skyMap__ = _v;
				break;
			case 1:
				var _this = this.pbrIndirect;
				_this.constModified = true;
				_this.showSky__ = true;
				this.pbrIndirect.skyMap__ = this.env.get_env();
				var _this = this.pbrIndirect;
				_this.constModified = true;
				_this.gammaCorrect__ = false;
				this.pbrIndirect.skyHdrMax__ = this.env.hdrMax;
				var _this = this.pbrIndirect;
				_this.constModified = true;
				_this.skyColor__ = false;
				break;
			}
			if(this.pbrIndirect.skyMap__ == null && this.pbrIndirect.showSky__ && !this.pbrIndirect.skyColor__) {
				var _this = this.pbrIndirect;
				_this.constModified = true;
				_this.showSky__ = false;
			}
		} else {
			var _this = this.pbrIndirect;
			_this.constModified = true;
			_this.drawIndirectDiffuse__ = false;
			var _this = this.pbrIndirect;
			_this.constModified = true;
			_this.drawIndirectSpecular__ = false;
		}
		var _this = this.tonemap.shader;
		var _v;
		switch(this.toneMode) {
		case "Filmic":
			_v = 2;
			break;
		case "Linear":
			_v = 0;
			break;
		case "Reinhard":
			_v = 1;
			break;
		default:
			_v = 0;
		}
		_this.constModified = true;
		_this.mode__ = _v;
		if(this.toneMode == "Filmic") {
			this.tonemap.shader.a__ = props.a;
			this.tonemap.shader.b__ = props.b;
			this.tonemap.shader.c__ = props.c;
			this.tonemap.shader.d__ = props.d;
			this.tonemap.shader.e__ = props.e;
		}
		this.tonemap.shader.hdrTexture__ = this.textures.hdr;
	}
	,drawPbrDecals: function(passName) {
		var passes = this.get(passName);
		if(passes.current == null) {
			return;
		}
		this.ctx.engine.pushTargets([this.textures.albedo,this.textures.normal,this.textures.pbr]);
		this.renderPass(this.decalsOutput,passes);
		this.ctx.engine.popTarget();
	}
	,drawEmissiveDecals: function(passName) {
		var passes = this.get(passName);
		if(passes.current == null) {
			return;
		}
		this.ctx.engine.pushTargets([this.textures.albedo,this.textures.normal,this.textures.pbr,this.textures.other]);
		this.renderPass(this.emissiveDecalsOutput,passes);
		this.ctx.engine.popTarget();
	}
	,getPbrRenderTargets: function(depth) {
		if(depth) {
			return [this.textures.albedo,this.textures.normal,this.textures.pbr,this.textures.other,this.getPbrDepth()];
		}
		return [this.textures.albedo,this.textures.normal,this.textures.pbr,this.textures.other];
	}
	,render: function() {
		this.beginPbr();
		this.setTarget(this.textures.depth);
		var x = 1;
		if(x == null) {
			x = 0.;
		}
		this.ctx.engine.clearF(new h3d_Vector4Impl(x,0.,0.,1.));
		this.setTargets(this.getPbrRenderTargets(false));
		this.ctx.engine.clear(0,1,0);
		this.setTargets(this.getPbrRenderTargets(true));
		this.begin(h3d_impl_Step.MainDraw);
		this.renderPass(this.output,this.get("terrain"));
		this.drawPbrDecals("terrainDecal");
		this.renderPass(this.output,this.get("default"),this.frontToBack);
		this.renderPass(this.output,this.get("alpha"),this.backToFront);
		this.renderPass(this.output,this.get("additive"));
		this.end();
		this.begin(h3d_impl_Step.Decals);
		this.drawPbrDecals("decal");
		this.drawEmissiveDecals("emissiveDecal");
		this.end();
		this.setTarget(this.textures.hdr);
		this.ctx.engine.clear(0,null,null);
		this.lighting();
		this.begin(h3d_impl_Step.Forward);
		var value = this.getLightSystem();
		var ls = ((value) instanceof h3d_scene_pbr_LightSystem) ? value : null;
		ls.forwardMode = true;
		this.setTargets([this.textures.hdr,this.getPbrDepth()]);
		this.renderPass(this.colorDepthOutput,this.get("forward"));
		this.setTarget(this.textures.hdr);
		this.renderPass(this.defaultPass,this.get("forwardAlpha"),this.backToFront);
		ls.forwardMode = false;
		this.end();
		if(this.renderMode == h3d_scene_RenderMode.LightProbe) {
			this.resetTarget();
			this.copy(this.textures.hdr,null);
			var h = this.passObjects.h;
			var p_h = h;
			var p_keys = Object.keys(h);
			var p_length = p_keys.length;
			var p_current = 0;
			while(p_current < p_length) {
				var p = p_h[p_keys[p_current++]];
				if(p != null) {
					p.rendered = true;
				}
			}
			return;
		}
		this.begin(h3d_impl_Step.BeforeTonemapping);
		this.draw("beforeTonemappingDecal");
		this.draw("beforeTonemapping");
		this.end();
		this.setTarget(this.textures.ldr);
		this.tonemap.render();
		this.begin(h3d_impl_Step.AfterTonemapping);
		this.draw("afterTonemappingDecal");
		this.draw("afterTonemapping");
		this.end();
		this.begin(h3d_impl_Step.Overlay);
		this.draw("overlay");
		this.end();
		this.endPbr();
	}
	,endPbr: function() {
		this.resetTarget();
		var ldr = this.ctx.globals.get("ldrMap");
		switch(this.displayMode) {
		case "Debug":
			var defaultShadows = this.ctx.globals.get("mainLightShadowMap");
			var prev = this.slides.shader.shadowMap__;
			var shadowMap = defaultShadows;
			if(this.debugShadowMapIndex < 0) {
				this.debugShadowMapIndex = 0;
			}
			if(this.debugShadowMapIndex > 0) {
				var k = this.debugShadowMapIndex;
				var l = this.ctx.lights;
				while(l != null && k > 0) {
					var pl = ((l) instanceof h3d_scene_pbr_Light) ? l : null;
					if(pl != null && pl.shadows != null) {
						var value = pl.shadows;
						var cl = ((value) instanceof h3d_pass_CascadeShadowMap) ? value : null;
						if(cl != null) {
							var _g = 0;
							var _g1 = cl.getShadowTextures();
							while(_g < _g1.length) {
								var tex = _g1[_g];
								++_g;
								if(tex != null && tex != defaultShadows) {
									--k;
									shadowMap = tex;
									if(k == 0) {
										break;
									}
								}
							}
							if(k == 0) {
								break;
							}
						} else {
							var tex1 = pl.shadows.getShadowTex();
							if(tex1 != null && tex1 != defaultShadows) {
								--k;
								shadowMap = tex1;
								if(k == 0) {
									break;
								}
							}
						}
					}
					l = l.next;
				}
				if(k > 0) {
					this.debugShadowMapIndex -= k;
				}
			}
			if(shadowMap == null) {
				shadowMap = h3d_mat_Texture.fromColor(0);
			}
			var _this = this.slides.shader;
			_this.constModified = true;
			_this.shadowMap__ = shadowMap;
			this.slides.shader.shadowMapCube__ = shadowMap;
			var _this = this.slides.shader;
			_this.constModified = true;
			_this.shadowIsCube__ = (shadowMap.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
			var _this = this.slides.shader;
			_this.constModified = true;
			_this.shadowMapChannel__ = hxsl_Channel.R;
			var _this = this.pbrProps;
			_this.constModified = true;
			_this.isScreen__ = true;
			this.slides.render();
			if(!this.debugging) {
				this.debugging = true;
				hxd_Window.getInstance().addEventTarget($bind(this,this.onEvent));
			}
			break;
		case "Env":case "MatCap":case "Pbr":
			if(this.enableFXAA) {
				this.mark("FXAA");
				this.fxaa.apply(ldr);
			} else {
				this.copy(ldr,null);
			}
			break;
		case "Performance":
			if(this.enableFXAA) {
				this.mark("FXAA");
				this.fxaa.apply(ldr);
			} else {
				this.copy(ldr,null);
			}
			this.performance.render();
			break;
		}
		if(this.debugging && this.displayMode != "Debug") {
			this.debugging = false;
			hxd_Window.getInstance().removeEventTarget($bind(this,this.onEvent));
		}
		this.mark("vsync");
	}
	,onEvent: function(e) {
		if(e.kind == hxd_EventKind.EPush && e.button == 2) {
			this.debugPushPos = { x : e.relX, y : e.relY};
		}
		var win = hxd_Window.getInstance();
		var tmp;
		if(e.kind == hxd_EventKind.ERelease && e.button == 2) {
			var dx = e.relX - this.debugPushPos.x;
			var dy = e.relY - this.debugPushPos.y;
			var dz = 0.;
			if(dz == null) {
				dz = 0.;
			}
			tmp = Math.sqrt(dx * dx + dy * dy + dz * dz) < 10;
		} else {
			tmp = false;
		}
		if(tmp) {
			var x = e.relX / win.get_width() * 4 | 0;
			var y = e.relY / win.get_height() * 4 | 0;
			if(this.slides.shader.get_mode() != 0) {
				this.slides.shader.set_mode(0);
			} else {
				var a;
				if(y == 3) {
					a = [5,6,7,8];
				} else {
					a = [1,2,3,4];
				}
				this.slides.shader.set_mode(a[x]);
			}
		}
		if(e.kind == hxd_EventKind.EWheel && (this.slides.shader.get_mode() == 8 || this.slides.shader.get_mode() == 0 && e.relX > win.get_width() / 4 && e.relY > win.get_height() / 4)) {
			this.debugShadowMapIndex += e.wheelDelta > 0 ? 1 : -1;
		}
	}
	,getLightingPerformanceGradient: function() {
		var g = this.ctx.engine.resCache.h["lighting_performance_gradient".__id__];
		if(g != null) {
			return g;
		}
		g = hxd_res_Any.fromBytes("h3d/scene/pbr/lighting_performance_gradient.png",haxe_Unserializer.run("s1415:iVBORw0KGgoAAAANSUhEUgAAAAgAAAABCAIAAABsYngUAAAACXBIWXMAAAsSAAALEgHS3X78AAADq2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSIiIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz48eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjQtYzAwMiAxLjAwMDAwMCwgMDAwMC8wMC8wMC0wMDowMDowMCAgICAgICAgIj48cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPjxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyI%PHhtcDpDcmVhdG9yVG9vbD5TdWJzdGFuY2UgRGVzaWduZXI8L3htcDpDcmVhdG9yVG9vbD48L3JkZjpEZXNjcmlwdGlvbj48cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI%PGV4aWY6RXhpZlZlcnNpb24%MDIyMDwvZXhpZjpFeGlmVmVyc2lvbj48ZXhpZjpQaXhlbFhEaW1lbnNpb24%ODwvZXhpZjpQaXhlbFhEaW1lbnNpb24%PGV4aWY6UGl4ZWxZRGltZW5zaW9uPjE8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPjwvcmRmOkRlc2NyaXB0aW9uPjxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIj48dGlmZjpJbWFnZVdpZHRoPjg8L3RpZmY6SW1hZ2VXaWR0aD48dGlmZjpJbWFnZUxlbmd0aD4xPC90aWZmOkltYWdlTGVuZ3RoPjx0aWZmOlhSZXNvbHV0aW9uPjcyPC90aWZmOlhSZXNvbHV0aW9uPjx0aWZmOllSZXNvbHV0aW9uPjcyPC90aWZmOllSZXNvbHV0aW9uPjx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ%PC9yZGY6RGVzY3JpcHRpb24%PC9yZGY6UkRGPjwveDp4bXBtZXRhPjw:eHBhY2tldCBlbmQ9InciPz5zfb:zAAAAIElEQVQIHWNgAIL5DAn:Gf6:Y:jfzfBfj%EGg8U0hmkAZMUI38qwwYwAAAAASUVORK5CYII")).toImage().toTexture();
		this.ctx.engine.resCache.set("lighting_performance_gradient",g);
		g.set_filter(h3d_mat_Filter.Nearest);
		return g;
	}
	,getDefaultProps: function(kind) {
		var props = { mode : "Pbr", emissive : 1., exposure : 0., sky : "Irrad", tone : "Linear", occlusion : 1., a : 2.51, b : 0.03, c : 2.43, d : 0.59, e : 0.14};
		return props;
	}
	,createEnv: function(t) {
		return new h3d_scene_pbr_Environment(t);
	}
	,refreshProps: function() {
		var props = this.props;
		this.displayMode = props.mode;
		this.skyMode = props.sky;
		this.toneMode = props.tone;
		this.tonemap.shader.set_exposure(props.exposure);
	}
	,__class__: h3d_scene_pbr_Renderer
});
var h3d_scene_pbr_SpotLight = function(parent) {
	this.d = new h3d_VectorImpl(0.,0.,0.);
	this.s = new h3d_col_Sphere();
	this.fallOff = 0.;
	this.pbr = new h3d_shader_pbr_SpotLight();
	this.shadows = new h3d_pass_SpotShadowMap(this);
	this.primitive = h3d_scene_pbr_SpotLight.spotLightPrim();
	h3d_scene_pbr_Light.call(this,this.pbr,parent);
	this.lightProj = new h3d_Camera();
	this.lightProj.screenRatio = 1.0;
	this.set_range(10);
	this.set_angle(45);
};
$hxClasses["h3d.scene.pbr.SpotLight"] = h3d_scene_pbr_SpotLight;
h3d_scene_pbr_SpotLight.__name__ = "h3d.scene.pbr.SpotLight";
h3d_scene_pbr_SpotLight.spotLightPrim = function() {
	var engine = h3d_Engine.CURRENT;
	var p = engine.resCache.h[h3d_scene_pbr_SpotLight.__id__];
	if(p != null) {
		return p;
	}
	var points = [];
	var x = 0;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = -1;
	var z = -1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = -1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 0;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = 1;
	var z = -1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 0;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = -1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 0;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = 1;
	var z = -1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = -1;
	var z = -1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = -1;
	var z = -1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = 1;
	var z = -1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = -1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	var x = 1;
	var y = -1;
	var z = -1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	points.push(new h3d_VectorImpl(x,y,z));
	p = new h3d_prim_Polygon(points);
	p.addNormals();
	engine.resCache.set(h3d_scene_pbr_SpotLight,p);
	return p;
};
h3d_scene_pbr_SpotLight.__super__ = h3d_scene_pbr_Light;
h3d_scene_pbr_SpotLight.prototype = $extend(h3d_scene_pbr_Light.prototype,{
	clone: function(o) {
		var sl = o == null ? new h3d_scene_pbr_SpotLight(null) : o;
		h3d_scene_pbr_Light.prototype.clone.call(this,sl);
		sl.set_range(this.get_range());
		sl.set_angle(this.angle);
		sl.fallOff = this.fallOff;
		sl.cookie = this.cookie;
		sl.lightProj.load(this.lightProj);
		return sl;
	}
	,get_range: function() {
		return this.scaleX;
	}
	,set_range: function(v) {
		this.scaleX = v;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.lightProj.zFar = v;
		return v;
	}
	,set_angle: function(v) {
		var v1 = Math.tan(v / 2.0 * 3.14159265358979323 / 180.0) * this.get_range();
		this.scaleY = v1;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var v1 = this.scaleY;
		this.scaleZ = v1;
		var f = 1;
		var b = true;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.lightProj.fovY = v;
		return this.angle = v;
	}
	,generateLightProj: function() {
		var _this = this.lightProj.pos;
		var x = this.absPos._41;
		var y = this.absPos._42;
		var z = this.absPos._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.absPos;
		var x = _this._11;
		var y = _this._12;
		var z = _this._13;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ldir_x = x1;
		var ldir_y = y1;
		var ldir_z = z1;
		var k = ldir_x * ldir_x + ldir_y * ldir_y + ldir_z * ldir_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		ldir_x *= k;
		ldir_y *= k;
		ldir_z *= k;
		var _this = this.lightProj.target;
		var x = this.absPos._41 + ldir_x;
		var y = this.absPos._42 + ldir_y;
		var z = this.absPos._43 + ldir_z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.lightProj.update();
	}
	,getShadowDirection: function() {
		var _this = this.absPos;
		var x = _this._11;
		var y = _this._12;
		var z = _this._13;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v = new h3d_VectorImpl(x,y,z);
		var k = v.x * v.x + v.y * v.y + v.z * v.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		v.x *= k;
		v.y *= k;
		v.z *= k;
		return v;
	}
	,draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,sync: function(ctx) {
		h3d_scene_pbr_Light.prototype.sync.call(this,ctx);
		var _this = this.pbr.lightColor__;
		var v = this._color;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var power = this.power;
		var this1 = this.pbr.lightColor__;
		var v = power * power;
		this1.x *= v;
		this1.y *= v;
		this1.z *= v;
		var _this = this.pbr.lightPos__;
		var x = this.absPos._41;
		var y = this.absPos._42;
		var z = this.absPos._43;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.pbr.spotDir__;
		var _this1 = this.absPos;
		var x = _this1._11;
		var y = _this1._12;
		var z = _this1._13;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var k = v_x * v_x + v_y * v_y + v_z * v_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		v_x *= k;
		v_y *= k;
		v_z *= k;
		_this.x = v_x;
		_this.y = v_y;
		_this.z = v_z;
		this.pbr.angle__ = Math.cos(this.angle / 2.0 * 3.14159265358979323 / 180.0);
		var a = this.angle / 2.0;
		var b = this.fallOff;
		this.pbr.fallOff__ = Math.cos((a > b ? b : a) * 3.14159265358979323 / 180.0);
		this.pbr.range__ = this.get_range();
		this.pbr.invLightRange4__ = 1 / (this.get_range() * this.get_range() * this.get_range() * this.get_range());
		this.pbr.occlusionFactor__ = this.occlusionFactor;
		if(this.cookie != null) {
			var _this = this.pbr;
			_this.constModified = true;
			_this.useCookie__ = true;
			this.pbr.cookieTex__ = this.cookie;
			this.generateLightProj();
			this.pbr.lightProj__.load(this.lightProj.m);
		} else {
			var _this = this.pbr;
			_this.constModified = true;
			_this.useCookie__ = false;
		}
	}
	,emit: function(ctx) {
		if(ctx.computingStatic) {
			h3d_scene_pbr_Light.prototype.emit.call(this,ctx);
			return;
		}
		if(ctx.pbrLightPass == null) {
			throw haxe_Exception.thrown("Rendering a pbr light require a PBR compatible scene renderer");
		}
		var _this = this.d;
		var _this1 = this.absPos;
		var x = _this1._11;
		var y = _this1._12;
		var z = _this1._13;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var k = v_x * v_x + v_y * v_y + v_z * v_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		v_x *= k;
		v_y *= k;
		v_z *= k;
		_this.x = v_x;
		_this.y = v_y;
		_this.z = v_z;
		var this1 = this.d;
		var v = this.get_range() / 2.0;
		this1.x *= v;
		this1.y *= v;
		this1.z *= v;
		this.s.x = this.absPos._41 + this.d.x;
		this.s.y = this.absPos._42 + this.d.y;
		this.s.z = this.absPos._43 + this.d.z;
		var tmp = this.get_range();
		this.s.r = tmp / 2.0;
		if(!ctx.camera.frustum.hasSphere(this.s)) {
			return;
		}
		h3d_scene_pbr_Light.prototype.emit.call(this,ctx);
		ctx.emitPass(ctx.pbrLightPass,this);
	}
	,__class__: h3d_scene_pbr_SpotLight
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.AmbientLight"] = h3d_shader_AmbientLight;
h3d_shader_AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		if(index == 0) {
			this.additive__ = val;
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_AmbientLight.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		return s;
	}
	,__class__: h3d_shader_AmbientLight
});
var h3d_shader_Base2d = function() {
	this.viewportB__ = new h3d_VectorImpl(0.,0.,0.);
	this.viewportA__ = new h3d_VectorImpl(0.,0.,0.);
	this.halfPixelInverse__ = new h3d_VectorImpl(0.,0.,0.);
	this.uvPos__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.filterMatrixB__ = new h3d_VectorImpl(0.,0.,0.);
	this.filterMatrixA__ = new h3d_VectorImpl(0.,0.,0.);
	this.absoluteMatrixB__ = new h3d_VectorImpl(0.,0.,0.);
	this.absoluteMatrixA__ = new h3d_VectorImpl(0.,0.,0.);
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Base2d"] = h3d_shader_Base2d;
h3d_shader_Base2d.__name__ = "h3d.shader.Base2d";
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	get_zValue: function() {
		return this.zValue__;
	}
	,set_zValue: function(_v) {
		return this.zValue__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_isRelative: function() {
		return this.isRelative__;
	}
	,set_isRelative: function(_v) {
		this.constModified = true;
		return this.isRelative__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_absoluteMatrixA: function() {
		return this.absoluteMatrixA__;
	}
	,set_absoluteMatrixA: function(_v) {
		return this.absoluteMatrixA__ = _v;
	}
	,get_absoluteMatrixB: function() {
		return this.absoluteMatrixB__;
	}
	,set_absoluteMatrixB: function(_v) {
		return this.absoluteMatrixB__ = _v;
	}
	,get_filterMatrixA: function() {
		return this.filterMatrixA__;
	}
	,set_filterMatrixA: function(_v) {
		return this.filterMatrixA__ = _v;
	}
	,get_filterMatrixB: function() {
		return this.filterMatrixB__;
	}
	,set_filterMatrixB: function(_v) {
		return this.filterMatrixB__ = _v;
	}
	,get_hasUVPos: function() {
		return this.hasUVPos__;
	}
	,set_hasUVPos: function(_v) {
		this.constModified = true;
		return this.hasUVPos__ = _v;
	}
	,get_uvPos: function() {
		return this.uvPos__;
	}
	,set_uvPos: function(_v) {
		return this.uvPos__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_pixelAlign: function() {
		return this.pixelAlign__;
	}
	,set_pixelAlign: function(_v) {
		this.constModified = true;
		return this.pixelAlign__ = _v;
	}
	,get_halfPixelInverse: function() {
		return this.halfPixelInverse__;
	}
	,set_halfPixelInverse: function(_v) {
		return this.halfPixelInverse__ = _v;
	}
	,get_viewportA: function() {
		return this.viewportA__;
	}
	,set_viewportA: function(_v) {
		return this.viewportA__ = _v;
	}
	,get_viewportB: function() {
		return this.viewportB__;
	}
	,set_viewportB: function(_v) {
		return this.viewportB__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewportA__;
		case 14:
			return this.viewportB__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.zValue__ = val;
			break;
		case 1:
			this.texture__ = val;
			break;
		case 2:
			this.isRelative__ = val;
			break;
		case 3:
			this.color__ = val;
			break;
		case 4:
			this.absoluteMatrixA__ = val;
			break;
		case 5:
			this.absoluteMatrixB__ = val;
			break;
		case 6:
			this.filterMatrixA__ = val;
			break;
		case 7:
			this.filterMatrixB__ = val;
			break;
		case 8:
			this.hasUVPos__ = val;
			break;
		case 9:
			this.uvPos__ = val;
			break;
		case 10:
			this.killAlpha__ = val;
			break;
		case 11:
			this.pixelAlign__ = val;
			break;
		case 12:
			this.halfPixelInverse__ = val;
			break;
		case 13:
			this.viewportA__ = val;
			break;
		case 14:
			this.viewportB__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
		if(index == 0) {
			this.zValue__ = val;
		}
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Base2d.prototype);
		s.shader = this.shader;
		s.zValue__ = this.zValue__;
		s.texture__ = this.texture__;
		s.isRelative__ = this.isRelative__;
		s.color__ = this.color__;
		s.absoluteMatrixA__ = this.absoluteMatrixA__;
		s.absoluteMatrixB__ = this.absoluteMatrixB__;
		s.filterMatrixA__ = this.filterMatrixA__;
		s.filterMatrixB__ = this.filterMatrixB__;
		s.hasUVPos__ = this.hasUVPos__;
		s.uvPos__ = this.uvPos__;
		s.killAlpha__ = this.killAlpha__;
		s.pixelAlign__ = this.pixelAlign__;
		s.halfPixelInverse__ = this.halfPixelInverse__;
		s.viewportA__ = this.viewportA__;
		s.viewportB__ = this.viewportB__;
		return s;
	}
	,__class__: h3d_shader_Base2d
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_VectorImpl(0.,0.,0.);
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	hxsl_Shader.call(this);
	var _this = this.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.specularColor__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
$hxClasses["h3d.shader.BaseMesh"] = h3d_shader_BaseMesh;
h3d_shader_BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_specularPower: function() {
		return this.specularPower__;
	}
	,set_specularPower: function(_v) {
		return this.specularPower__ = _v;
	}
	,get_specularAmount: function() {
		return this.specularAmount__;
	}
	,set_specularAmount: function(_v) {
		return this.specularAmount__ = _v;
	}
	,get_specularColor: function() {
		return this.specularColor__;
	}
	,set_specularColor: function(_v) {
		return this.specularColor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.color__ = val;
			break;
		case 1:
			this.specularPower__ = val;
			break;
		case 2:
			this.specularAmount__ = val;
			break;
		case 3:
			this.specularColor__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
		switch(index) {
		case 1:
			this.specularPower__ = val;
			break;
		case 2:
			this.specularAmount__ = val;
			break;
		default:
		}
	}
	,clone: function() {
		var s = Object.create(h3d_shader_BaseMesh.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		s.specularPower__ = this.specularPower__;
		s.specularAmount__ = this.specularAmount__;
		s.specularColor__ = this.specularColor__;
		return s;
	}
	,__class__: h3d_shader_BaseMesh
});
var h3d_shader_Blur = function() {
	this.cubeDir__ = new h3d_MatrixImpl();
	this.fixedColor__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.pixel__ = new h3d_VectorImpl(0.,0.,0.);
	this.offsets__ = [];
	this.values__ = [];
	this.Quality__ = 0;
	this.cameraInverseViewProj__ = new h3d_MatrixImpl();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Blur"] = h3d_shader_Blur;
h3d_shader_Blur.__name__ = "h3d.shader.Blur";
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_cameraInverseViewProj: function() {
		return this.cameraInverseViewProj__;
	}
	,set_cameraInverseViewProj: function(_v) {
		return this.cameraInverseViewProj__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_depthTexture: function() {
		return this.depthTexture__;
	}
	,set_depthTexture: function(_v) {
		return this.depthTexture__ = _v;
	}
	,get_Quality: function() {
		return this.Quality__;
	}
	,set_Quality: function(_v) {
		this.constModified = true;
		return this.Quality__ = _v;
	}
	,get_isDepth: function() {
		return this.isDepth__;
	}
	,set_isDepth: function(_v) {
		this.constModified = true;
		return this.isDepth__ = _v;
	}
	,get_values: function() {
		return this.values__;
	}
	,set_values: function(_v) {
		return this.values__ = _v;
	}
	,get_offsets: function() {
		return this.offsets__;
	}
	,set_offsets: function(_v) {
		return this.offsets__ = _v;
	}
	,get_pixel: function() {
		return this.pixel__;
	}
	,set_pixel: function(_v) {
		return this.pixel__ = _v;
	}
	,get_hasFixedColor: function() {
		return this.hasFixedColor__;
	}
	,set_hasFixedColor: function(_v) {
		this.constModified = true;
		return this.hasFixedColor__ = _v;
	}
	,get_smoothFixedColor: function() {
		return this.smoothFixedColor__;
	}
	,set_smoothFixedColor: function(_v) {
		this.constModified = true;
		return this.smoothFixedColor__ = _v;
	}
	,get_fixedColor: function() {
		return this.fixedColor__;
	}
	,set_fixedColor: function(_v) {
		return this.fixedColor__ = _v;
	}
	,get_isDepthDependant: function() {
		return this.isDepthDependant__;
	}
	,set_isDepthDependant: function(_v) {
		this.constModified = true;
		return this.isDepthDependant__ = _v;
	}
	,get_hasNormal: function() {
		return this.hasNormal__;
	}
	,set_hasNormal: function(_v) {
		this.constModified = true;
		return this.hasNormal__ = _v;
	}
	,get_normalTexture: function() {
		return this.normalTexture__;
	}
	,set_normalTexture: function(_v) {
		return this.normalTexture__ = _v;
	}
	,get_isCube: function() {
		return this.isCube__;
	}
	,set_isCube: function(_v) {
		this.constModified = true;
		return this.isCube__ = _v;
	}
	,get_cubeTexture: function() {
		return this.cubeTexture__;
	}
	,set_cubeTexture: function(_v) {
		return this.cubeTexture__ = _v;
	}
	,get_cubeDir: function() {
		return this.cubeDir__;
	}
	,set_cubeDir: function(_v) {
		return this.cubeDir__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		if(this.isCube__) {
			this.constBits |= 8192;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.cameraInverseViewProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.hasNormal__;
		case 14:
			return this.normalTexture__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Blur.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.cameraInverseViewProj__ = this.cameraInverseViewProj__;
		s.texture__ = this.texture__;
		s.depthTexture__ = this.depthTexture__;
		s.Quality__ = this.Quality__;
		s.isDepth__ = this.isDepth__;
		s.values__ = this.values__;
		s.offsets__ = this.offsets__;
		s.pixel__ = this.pixel__;
		s.hasFixedColor__ = this.hasFixedColor__;
		s.smoothFixedColor__ = this.smoothFixedColor__;
		s.fixedColor__ = this.fixedColor__;
		s.isDepthDependant__ = this.isDepthDependant__;
		s.hasNormal__ = this.hasNormal__;
		s.normalTexture__ = this.normalTexture__;
		s.isCube__ = this.isCube__;
		s.cubeTexture__ = this.cubeTexture__;
		s.cubeDir__ = this.cubeDir__;
		return s;
	}
	,__class__: h3d_shader_Blur
});
var h3d_shader_ShaderBuffers = function(s) {
	this.globals = new Float32Array(s.globalsSize << 2);
	this.params = new Float32Array(s.paramsSize << 2);
	this.tex = new Array(s.texturesCount);
	this.buffers = s.bufferCount > 0 ? new Array(s.bufferCount) : null;
};
$hxClasses["h3d.shader.ShaderBuffers"] = h3d_shader_ShaderBuffers;
h3d_shader_ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
h3d_shader_ShaderBuffers.prototype = {
	grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.texturesCount;
		var nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			this.tex = new Array(nt);
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			this.buffers = new Array(nb);
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function(s) {
	this.vertex = new h3d_shader_ShaderBuffers(s.vertex);
	this.fragment = new h3d_shader_ShaderBuffers(s.fragment);
};
$hxClasses["h3d.shader.Buffers"] = h3d_shader_Buffers;
h3d_shader_Buffers.__name__ = "h3d.shader.Buffers";
h3d_shader_Buffers.prototype = {
	grow: function(s) {
		this.vertex.grow(s.vertex);
		this.fragment.grow(s.fragment);
	}
	,__class__: h3d_shader_Buffers
};
var h3d_shader_DirShadow = function() {
	this.poissonDisk__ = [];
	this.shadowBias__ = 0;
	this.shadowProj__ = new h3d_MatrixImpl();
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	this.shadowRes__ = new h3d_VectorImpl(0.,0.,0.);
	this.pcfScale__ = 0;
	this.PCF_SAMPLES__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
	this.set_pcfQuality(1);
};
$hxClasses["h3d.shader.DirShadow"] = h3d_shader_DirShadow;
h3d_shader_DirShadow.__name__ = "h3d.shader.DirShadow";
h3d_shader_DirShadow.__super__ = hxsl_Shader;
h3d_shader_DirShadow.prototype = $extend(hxsl_Shader.prototype,{
	set_pcfQuality: function(q) {
		var _v;
		switch(q) {
		case 2:
			var x = -0.326;
			var y = -0.406;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this1 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.840;
			var y = -0.074;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this2 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.696;
			var y = 0.457;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this3 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.203;
			var y = 0.621;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this4 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.962;
			var y = -0.195;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this5 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.473;
			var y = -0.480;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this6 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.519;
			var y = 0.767;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this7 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.185;
			var y = -0.893;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this8 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.507;
			var y = 0.064;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this9 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.896;
			var y = 0.412;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this10 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.322;
			var y = -0.933;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this11 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.792;
			var y = -0.598;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_v = [this1,this2,this3,this4,this5,this6,this7,this8,this9,this10,this11,new h3d_Vector4Impl(x,y,0.,1.)];
			break;
		case 3:
			var x = -0.613392;
			var y = 0.617481;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this1 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.170019;
			var y = -0.040254;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this2 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.299417;
			var y = 0.791925;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this3 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.645680;
			var y = 0.493210;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this4 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.651784;
			var y = 0.717887;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this5 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.421003;
			var y = 0.027070;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this6 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.817194;
			var y = -0.271096;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this7 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.705374;
			var y = -0.668203;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this8 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.977050;
			var y = -0.108615;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this9 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.063326;
			var y = 0.142369;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this10 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.203528;
			var y = 0.214331;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this11 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.667531;
			var y = 0.326090;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this12 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.098422;
			var y = -0.295755;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this13 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.885922;
			var y = 0.215369;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this14 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.566637;
			var y = 0.605213;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this15 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.039766;
			var y = -0.396100;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this16 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.751946;
			var y = 0.453352;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this17 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.078707;
			var y = -0.715323;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this18 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.075838;
			var y = -0.529344;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this19 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.724479;
			var y = -0.580798;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this20 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.222999;
			var y = -0.215125;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this21 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.467574;
			var y = -0.405438;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this22 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.248268;
			var y = -0.814753;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this23 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.354411;
			var y = -0.887570;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this24 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.175817;
			var y = 0.382366;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this25 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.487472;
			var y = -0.063082;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this26 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.084078;
			var y = 0.898312;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this27 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.488876;
			var y = -0.783441;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this28 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.470016;
			var y = 0.217933;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this29 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.696890;
			var y = -0.549791;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this30 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.149693;
			var y = 0.605762;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this31 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.034211;
			var y = 0.979980;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this32 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.503098;
			var y = -0.308878;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this33 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.016205;
			var y = -0.872921;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this34 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.385784;
			var y = -0.393902;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this35 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.146886;
			var y = -0.859249;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this36 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.643361;
			var y = 0.164098;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this37 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.634388;
			var y = -0.049471;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this38 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.688894;
			var y = 0.007843;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this39 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.464034;
			var y = -0.188818;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this40 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.440840;
			var y = 0.137486;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this41 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.364483;
			var y = 0.511704;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this42 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.034028;
			var y = 0.325968;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this43 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.099094;
			var y = -0.308023;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this44 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.693960;
			var y = -0.366253;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this45 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.678884;
			var y = -0.204688;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this46 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.001801;
			var y = 0.780328;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this47 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.145177;
			var y = -0.898984;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this48 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.062655;
			var y = -0.611866;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this49 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.315226;
			var y = -0.604297;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this50 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.780145;
			var y = 0.486251;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this51 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.371868;
			var y = 0.882138;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this52 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.200476;
			var y = 0.494430;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this53 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.494552;
			var y = -0.711051;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this54 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.612476;
			var y = 0.705252;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this55 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.578845;
			var y = -0.768792;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this56 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.772454;
			var y = -0.090976;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this57 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.504440;
			var y = 0.372295;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this58 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.155736;
			var y = 0.065157;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this59 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.391522;
			var y = 0.849605;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this60 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.620106;
			var y = -0.328104;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this61 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.789239;
			var y = -0.419965;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this62 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.545396;
			var y = 0.538133;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this63 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.178564;
			var y = -0.596057;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_v = [this1,this2,this3,this4,this5,this6,this7,this8,this9,this10,this11,this12,this13,this14,this15,this16,this17,this18,this19,this20,this21,this22,this23,this24,this25,this26,this27,this28,this29,this30,this31,this32,this33,this34,this35,this36,this37,this38,this39,this40,this41,this42,this43,this44,this45,this46,this47,this48,this49,this50,this51,this52,this53,this54,this55,this56,this57,this58,this59,this60,this61,this62,this63,new h3d_Vector4Impl(x,y,0.,1.)];
			break;
		default:
			var x = -0.942;
			var y = -0.399;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this1 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.945;
			var y = -0.768;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this2 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.094;
			var y = -0.929;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this3 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.344;
			var y = 0.293;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_v = [this1,this2,this3,new h3d_Vector4Impl(x,y,0.,1.)];
		}
		this.poissonDisk__ = _v;
		this.constModified = true;
		this.PCF_SAMPLES__ = this.poissonDisk__.length;
		return q;
	}
	,get_enable: function() {
		return this.enable__;
	}
	,set_enable: function(_v) {
		this.constModified = true;
		return this.enable__ = _v;
	}
	,get_USE_ESM: function() {
		return this.USE_ESM__;
	}
	,set_USE_ESM: function(_v) {
		this.constModified = true;
		return this.USE_ESM__ = _v;
	}
	,get_shadowPower: function() {
		return this.shadowPower__;
	}
	,set_shadowPower: function(_v) {
		return this.shadowPower__ = _v;
	}
	,get_USE_PCF: function() {
		return this.USE_PCF__;
	}
	,set_USE_PCF: function(_v) {
		this.constModified = true;
		return this.USE_PCF__ = _v;
	}
	,get_PCF_SAMPLES: function() {
		return this.PCF_SAMPLES__;
	}
	,set_PCF_SAMPLES: function(_v) {
		this.constModified = true;
		return this.PCF_SAMPLES__ = _v;
	}
	,get_pcfScale: function() {
		return this.pcfScale__;
	}
	,set_pcfScale: function(_v) {
		return this.pcfScale__ = _v;
	}
	,get_shadowRes: function() {
		return this.shadowRes__;
	}
	,set_shadowRes: function(_v) {
		return this.shadowRes__ = _v;
	}
	,get_shadowMap: function() {
		return this.shadowMap__;
	}
	,set_shadowMap: function(_v) {
		this.constModified = true;
		return this.shadowMap__ = _v;
	}
	,get_shadowMapChannel: function() {
		return this.shadowMapChannel__;
	}
	,set_shadowMapChannel: function(v) {
		this.constModified = true;
		return this.shadowMapChannel__ = v;
	}
	,get_shadowProj: function() {
		return this.shadowProj__;
	}
	,set_shadowProj: function(_v) {
		return this.shadowProj__ = _v;
	}
	,get_shadowBias: function() {
		return this.shadowBias__;
	}
	,set_shadowBias: function(_v) {
		return this.shadowBias__ = _v;
	}
	,get_poissonDisk: function() {
		return this.poissonDisk__;
	}
	,set_poissonDisk: function(_v) {
		return this.poissonDisk__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.PCF_SAMPLES__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("PCF_SAMPLES" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw haxe_Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.PCF_SAMPLES__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDisk__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.enable__ = val;
			break;
		case 1:
			this.USE_ESM__ = val;
			break;
		case 2:
			this.shadowPower__ = val;
			break;
		case 3:
			this.USE_PCF__ = val;
			break;
		case 4:
			this.PCF_SAMPLES__ = val;
			break;
		case 5:
			this.pcfScale__ = val;
			break;
		case 6:
			this.shadowRes__ = val;
			break;
		case 7:
			this.shadowMap__ = val;
			break;
		case 8:
			this.shadowProj__ = val;
			break;
		case 9:
			this.shadowBias__ = val;
			break;
		case 10:
			this.poissonDisk__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
		switch(index) {
		case 2:
			this.shadowPower__ = val;
			break;
		case 5:
			this.pcfScale__ = val;
			break;
		case 9:
			this.shadowBias__ = val;
			break;
		default:
		}
	}
	,clone: function() {
		var s = Object.create(h3d_shader_DirShadow.prototype);
		s.shader = this.shader;
		s.enable__ = this.enable__;
		s.USE_ESM__ = this.USE_ESM__;
		s.shadowPower__ = this.shadowPower__;
		s.USE_PCF__ = this.USE_PCF__;
		s.PCF_SAMPLES__ = this.PCF_SAMPLES__;
		s.pcfScale__ = this.pcfScale__;
		s.shadowRes__ = this.shadowRes__;
		s.shadowMap__ = this.shadowMap__;
		s.shadowProj__ = this.shadowProj__;
		s.shadowBias__ = this.shadowBias__;
		s.poissonDisk__ = this.poissonDisk__;
		return s;
	}
	,__class__: h3d_shader_DirShadow
});
var h3d_shader_CascadeShadow = function() {
	this.cascadeBias__ = [];
	this.cascadeDebugs__ = [];
	this.cascadeProjs__ = [];
	this.cascadeShadowMaps__ = [];
	this.CASCADE_COUNT__ = 0;
	h3d_shader_DirShadow.call(this);
};
$hxClasses["h3d.shader.CascadeShadow"] = h3d_shader_CascadeShadow;
h3d_shader_CascadeShadow.__name__ = "h3d.shader.CascadeShadow";
h3d_shader_CascadeShadow.__super__ = h3d_shader_DirShadow;
h3d_shader_CascadeShadow.prototype = $extend(h3d_shader_DirShadow.prototype,{
	get_CASCADE_COUNT: function() {
		return this.CASCADE_COUNT__;
	}
	,set_CASCADE_COUNT: function(_v) {
		this.constModified = true;
		return this.CASCADE_COUNT__ = _v;
	}
	,get_DEBUG: function() {
		return this.DEBUG__;
	}
	,set_DEBUG: function(_v) {
		this.constModified = true;
		return this.DEBUG__ = _v;
	}
	,get_cascadeShadowMaps: function() {
		return this.cascadeShadowMaps__;
	}
	,set_cascadeShadowMaps: function(_v) {
		return this.cascadeShadowMaps__ = _v;
	}
	,get_cascadeProjs: function() {
		return this.cascadeProjs__;
	}
	,set_cascadeProjs: function(_v) {
		return this.cascadeProjs__ = _v;
	}
	,get_cascadeDebugs: function() {
		return this.cascadeDebugs__;
	}
	,set_cascadeDebugs: function(_v) {
		return this.cascadeDebugs__ = _v;
	}
	,get_cascadeBias: function() {
		return this.cascadeBias__;
	}
	,set_cascadeBias: function(_v) {
		return this.cascadeBias__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.PCF_SAMPLES__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("PCF_SAMPLES" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw haxe_Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		var v = this.CASCADE_COUNT__;
		if(v >>> 3 != 0) {
			throw haxe_Exception.thrown("CASCADE_COUNT" + " is out of range " + v + ">" + 7);
		}
		this.constBits |= v << 17;
		if(this.DEBUG__) {
			this.constBits |= 1048576;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.PCF_SAMPLES__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDisk__;
		case 11:
			return this.CASCADE_COUNT__;
		case 12:
			return this.DEBUG__;
		case 13:
			return this.cascadeShadowMaps__;
		case 14:
			return this.cascadeProjs__;
		case 15:
			return this.cascadeDebugs__;
		case 16:
			return this.cascadeBias__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_CascadeShadow.prototype);
		s.shader = this.shader;
		s.enable__ = this.enable__;
		s.USE_ESM__ = this.USE_ESM__;
		s.shadowPower__ = this.shadowPower__;
		s.USE_PCF__ = this.USE_PCF__;
		s.PCF_SAMPLES__ = this.PCF_SAMPLES__;
		s.pcfScale__ = this.pcfScale__;
		s.shadowRes__ = this.shadowRes__;
		s.shadowMap__ = this.shadowMap__;
		s.shadowProj__ = this.shadowProj__;
		s.shadowBias__ = this.shadowBias__;
		s.poissonDisk__ = this.poissonDisk__;
		s.CASCADE_COUNT__ = this.CASCADE_COUNT__;
		s.DEBUG__ = this.DEBUG__;
		s.cascadeShadowMaps__ = this.cascadeShadowMaps__;
		s.cascadeProjs__ = this.cascadeProjs__;
		s.cascadeDebugs__ = this.cascadeDebugs__;
		s.cascadeBias__ = this.cascadeBias__;
		return s;
	}
	,__class__: h3d_shader_CascadeShadow
});
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_VectorImpl(0.,0.,0.);
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
};
$hxClasses["h3d.shader.ColorAdd"] = h3d_shader_ColorAdd;
h3d_shader_ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		if(index == 0) {
			this.color__ = val;
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ColorAdd.prototype);
		s.shader = this.shader;
		s.color__ = this.color__;
		return s;
	}
	,__class__: h3d_shader_ColorAdd
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorKey"] = h3d_shader_ColorKey;
h3d_shader_ColorKey.__name__ = "h3d.shader.ColorKey";
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	get_colorKey: function() {
		return this.colorKey__;
	}
	,set_colorKey: function(_v) {
		return this.colorKey__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		if(index == 0) {
			this.colorKey__ = val;
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ColorKey.prototype);
		s.shader = this.shader;
		s.colorKey__ = this.colorKey__;
		return s;
	}
	,__class__: h3d_shader_ColorKey
});
var h3d_shader_ColorMatrix = function(m) {
	this.enabled__ = true;
	this.matrix__ = new h3d_MatrixImpl();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.loadValues(m);
	} else {
		this.matrix__.identity();
	}
};
$hxClasses["h3d.shader.ColorMatrix"] = h3d_shader_ColorMatrix;
h3d_shader_ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	get_matrix: function() {
		return this.matrix__;
	}
	,set_matrix: function(_v) {
		return this.matrix__ = _v;
	}
	,get_enabled: function() {
		return this.enabled__;
	}
	,set_enabled: function(_v) {
		this.constModified = true;
		return this.enabled__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enabled__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.matrix__;
		case 1:
			return this.enabled__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.matrix__ = val;
			break;
		case 1:
			this.enabled__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_ColorMatrix.prototype);
		s.shader = this.shader;
		s.matrix__ = this.matrix__;
		s.enabled__ = this.enabled__;
		return s;
	}
	,__class__: h3d_shader_ColorMatrix
});
var h3d_shader_GenTexture = function() {
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.mode__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.GenTexture"] = h3d_shader_GenTexture;
h3d_shader_GenTexture.__name__ = "h3d.shader.GenTexture";
h3d_shader_GenTexture.__super__ = h3d_shader_ScreenShader;
h3d_shader_GenTexture.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_mode: function() {
		return this.mode__;
	}
	,set_mode: function(_v) {
		this.constModified = true;
		return this.mode__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.mode__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("mode" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.mode__;
		case 2:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_GenTexture.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.mode__ = this.mode__;
		s.color__ = this.color__;
		return s;
	}
	,__class__: h3d_shader_GenTexture
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
$hxClasses["h3d.shader.LineShader"] = h3d_shader_LineShader;
h3d_shader_LineShader.__name__ = "h3d.shader.LineShader";
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	get_lengthScale: function() {
		return this.lengthScale__;
	}
	,set_lengthScale: function(_v) {
		return this.lengthScale__ = _v;
	}
	,get_width: function() {
		return this.width__;
	}
	,set_width: function(_v) {
		return this.width__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.lengthScale__ = val;
			break;
		case 1:
			this.width__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
		switch(index) {
		case 0:
			this.lengthScale__ = val;
			break;
		case 1:
			this.width__ = val;
			break;
		default:
		}
	}
	,clone: function() {
		var s = Object.create(h3d_shader_LineShader.prototype);
		s.shader = this.shader;
		s.lengthScale__ = this.lengthScale__;
		s.width__ = this.width__;
		return s;
	}
	,__class__: h3d_shader_LineShader
});
var h3d_shader_MinMaxShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.MinMaxShader"] = h3d_shader_MinMaxShader;
h3d_shader_MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d_shader_MinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_MinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_MinMaxShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texA__ = this.texA__;
		s.texB__ = this.texB__;
		s.isMax__ = this.isMax__;
		return s;
	}
	,__class__: h3d_shader_MinMaxShader
});
var h3d_shader_CubeMinMaxShader = function() {
	this.mat__ = new h3d_MatrixImpl();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.CubeMinMaxShader"] = h3d_shader_CubeMinMaxShader;
h3d_shader_CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d_shader_CubeMinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_CubeMinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_CubeMinMaxShader.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.texA__ = this.texA__;
		s.texB__ = this.texB__;
		s.isMax__ = this.isMax__;
		s.mat__ = this.mat__;
		return s;
	}
	,__class__: h3d_shader_CubeMinMaxShader
});
var h3d_shader_NormalMap = function(texture) {
	hxsl_Shader.call(this);
	this.texture__ = texture;
};
$hxClasses["h3d.shader.NormalMap"] = h3d_shader_NormalMap;
h3d_shader_NormalMap.__name__ = "h3d.shader.NormalMap";
h3d_shader_NormalMap.__super__ = hxsl_Shader;
h3d_shader_NormalMap.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		if(index == 0) {
			this.texture__ = val;
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_NormalMap.prototype);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_shader_NormalMap
});
var h3d_shader_PointShadow = function() {
	this.zFar__ = 0;
	this.shadowBias__ = 0;
	this.lightPos__ = new h3d_VectorImpl(0.,0.,0.);
	this.pcfScale__ = 0;
	this.pcfQuality__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.PointShadow"] = h3d_shader_PointShadow;
h3d_shader_PointShadow.__name__ = "h3d.shader.PointShadow";
h3d_shader_PointShadow.__super__ = hxsl_Shader;
h3d_shader_PointShadow.prototype = $extend(hxsl_Shader.prototype,{
	get_enable: function() {
		return this.enable__;
	}
	,set_enable: function(_v) {
		this.constModified = true;
		return this.enable__ = _v;
	}
	,get_USE_ESM: function() {
		return this.USE_ESM__;
	}
	,set_USE_ESM: function(_v) {
		this.constModified = true;
		return this.USE_ESM__ = _v;
	}
	,get_shadowPower: function() {
		return this.shadowPower__;
	}
	,set_shadowPower: function(_v) {
		return this.shadowPower__ = _v;
	}
	,get_USE_PCF: function() {
		return this.USE_PCF__;
	}
	,set_USE_PCF: function(_v) {
		this.constModified = true;
		return this.USE_PCF__ = _v;
	}
	,get_pcfQuality: function() {
		return this.pcfQuality__;
	}
	,set_pcfQuality: function(_v) {
		this.constModified = true;
		return this.pcfQuality__ = _v;
	}
	,get_pcfScale: function() {
		return this.pcfScale__;
	}
	,set_pcfScale: function(_v) {
		return this.pcfScale__ = _v;
	}
	,get_shadowMap: function() {
		return this.shadowMap__;
	}
	,set_shadowMap: function(_v) {
		return this.shadowMap__ = _v;
	}
	,get_lightPos: function() {
		return this.lightPos__;
	}
	,set_lightPos: function(_v) {
		return this.lightPos__ = _v;
	}
	,get_shadowBias: function() {
		return this.shadowBias__;
	}
	,set_shadowBias: function(_v) {
		return this.shadowBias__ = _v;
	}
	,get_zFar: function() {
		return this.zFar__;
	}
	,set_zFar: function(_v) {
		return this.zFar__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.pcfQuality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("pcfQuality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.pcfQuality__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowMap__;
		case 7:
			return this.lightPos__;
		case 8:
			return this.shadowBias__;
		case 9:
			return this.zFar__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 8:
			return this.shadowBias__;
		case 9:
			return this.zFar__;
		default:
		}
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.enable__ = val;
			break;
		case 1:
			this.USE_ESM__ = val;
			break;
		case 2:
			this.shadowPower__ = val;
			break;
		case 3:
			this.USE_PCF__ = val;
			break;
		case 4:
			this.pcfQuality__ = val;
			break;
		case 5:
			this.pcfScale__ = val;
			break;
		case 6:
			this.shadowMap__ = val;
			break;
		case 7:
			this.lightPos__ = val;
			break;
		case 8:
			this.shadowBias__ = val;
			break;
		case 9:
			this.zFar__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
		switch(index) {
		case 2:
			this.shadowPower__ = val;
			break;
		case 5:
			this.pcfScale__ = val;
			break;
		case 8:
			this.shadowBias__ = val;
			break;
		case 9:
			this.zFar__ = val;
			break;
		default:
		}
	}
	,clone: function() {
		var s = Object.create(h3d_shader_PointShadow.prototype);
		s.shader = this.shader;
		s.enable__ = this.enable__;
		s.USE_ESM__ = this.USE_ESM__;
		s.shadowPower__ = this.shadowPower__;
		s.USE_PCF__ = this.USE_PCF__;
		s.pcfQuality__ = this.pcfQuality__;
		s.pcfScale__ = this.pcfScale__;
		s.shadowMap__ = this.shadowMap__;
		s.lightPos__ = this.lightPos__;
		s.shadowBias__ = this.shadowBias__;
		s.zFar__ = this.zFar__;
		return s;
	}
	,__class__: h3d_shader_PointShadow
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Shadow"] = h3d_shader_Shadow;
h3d_shader_Shadow.__name__ = "h3d.shader.Shadow";
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_SignedDistanceField = function() {
	this.smoothing__ = 0.0416666666666666644;
	this.alphaCutoff__ = 0.5;
	this.autoSmoothing__ = false;
	this.channel__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.SignedDistanceField"] = h3d_shader_SignedDistanceField;
h3d_shader_SignedDistanceField.__name__ = "h3d.shader.SignedDistanceField";
h3d_shader_SignedDistanceField.__super__ = hxsl_Shader;
h3d_shader_SignedDistanceField.prototype = $extend(hxsl_Shader.prototype,{
	get_channel: function() {
		return this.channel__;
	}
	,set_channel: function(_v) {
		this.constModified = true;
		return this.channel__ = _v;
	}
	,get_autoSmoothing: function() {
		return this.autoSmoothing__;
	}
	,set_autoSmoothing: function(_v) {
		this.constModified = true;
		return this.autoSmoothing__ = _v;
	}
	,get_alphaCutoff: function() {
		return this.alphaCutoff__;
	}
	,set_alphaCutoff: function(_v) {
		return this.alphaCutoff__ = _v;
	}
	,get_smoothing: function() {
		return this.smoothing__;
	}
	,set_smoothing: function(_v) {
		return this.smoothing__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.channel__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("channel" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.autoSmoothing__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 1:
			return this.autoSmoothing__;
		case 2:
			return this.alphaCutoff__;
		case 3:
			return this.smoothing__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.alphaCutoff__;
		case 3:
			return this.smoothing__;
		default:
		}
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.channel__ = val;
			break;
		case 1:
			this.autoSmoothing__ = val;
			break;
		case 2:
			this.alphaCutoff__ = val;
			break;
		case 3:
			this.smoothing__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
		switch(index) {
		case 2:
			this.alphaCutoff__ = val;
			break;
		case 3:
			this.smoothing__ = val;
			break;
		default:
		}
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SignedDistanceField.prototype);
		s.shader = this.shader;
		s.channel__ = this.channel__;
		s.autoSmoothing__ = this.autoSmoothing__;
		s.alphaCutoff__ = this.alphaCutoff__;
		s.smoothing__ = this.smoothing__;
		return s;
	}
	,__class__: h3d_shader_SignedDistanceField
});
var h3d_shader_SkinBase = function() {
	this.bonesMatrixes__ = [];
	this.fourBonesByVertex__ = false;
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
$hxClasses["h3d.shader.SkinBase"] = h3d_shader_SkinBase;
h3d_shader_SkinBase.__name__ = "h3d.shader.SkinBase";
h3d_shader_SkinBase.__super__ = hxsl_Shader;
h3d_shader_SkinBase.prototype = $extend(hxsl_Shader.prototype,{
	get_MaxBones: function() {
		return this.MaxBones__;
	}
	,set_MaxBones: function(_v) {
		this.constModified = true;
		return this.MaxBones__ = _v;
	}
	,get_fourBonesByVertex: function() {
		return this.fourBonesByVertex__;
	}
	,set_fourBonesByVertex: function(_v) {
		this.constModified = true;
		return this.fourBonesByVertex__ = _v;
	}
	,get_bonesMatrixes: function() {
		return this.bonesMatrixes__;
	}
	,set_bonesMatrixes: function(_v) {
		return this.bonesMatrixes__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.MaxBones__ = val;
			break;
		case 1:
			this.fourBonesByVertex__ = val;
			break;
		case 2:
			this.bonesMatrixes__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SkinBase.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.fourBonesByVertex__ = this.fourBonesByVertex__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
	,__class__: h3d_shader_SkinBase
});
var h3d_shader_Skin = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.Skin"] = h3d_shader_Skin;
h3d_shader_Skin.__name__ = "h3d.shader.Skin";
h3d_shader_Skin.__super__ = h3d_shader_SkinBase;
h3d_shader_Skin.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Skin.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.fourBonesByVertex__ = this.fourBonesByVertex__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SkinTangent = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.SkinTangent"] = h3d_shader_SkinTangent;
h3d_shader_SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d_shader_SkinTangent.__super__ = h3d_shader_SkinBase;
h3d_shader_SkinTangent.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SkinTangent.prototype);
		s.shader = this.shader;
		s.MaxBones__ = this.MaxBones__;
		s.fourBonesByVertex__ = this.fourBonesByVertex__;
		s.bonesMatrixes__ = this.bonesMatrixes__;
		return s;
	}
	,__class__: h3d_shader_SkinTangent
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
$hxClasses["h3d.shader.SpecularTexture"] = h3d_shader_SpecularTexture;
h3d_shader_SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		if(index == 0) {
			this.texture__ = val;
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SpecularTexture.prototype);
		s.shader = this.shader;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_shader_SpecularTexture
});
var h3d_shader_SpotShadow = function() {
	this.poissonDiskVeryHigh__ = [];
	this.poissonDiskHigh__ = [];
	this.poissonDiskLow__ = [];
	this.shadowBias__ = 0;
	this.shadowProj__ = new h3d_MatrixImpl();
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	this.shadowRes__ = new h3d_VectorImpl(0.,0.,0.);
	this.pcfScale__ = 0;
	this.pcfQuality__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
	var x = -0.942;
	var y = -0.399;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this1 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.945;
	var y = -0.768;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this2 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.094;
	var y = -0.929;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this3 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.344;
	var y = 0.293;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.poissonDiskLow__ = [this1,this2,this3,new h3d_Vector4Impl(x,y,0.,1.)];
	var x = -0.326;
	var y = -0.406;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this1 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.840;
	var y = -0.074;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this2 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.696;
	var y = 0.457;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this3 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.203;
	var y = 0.621;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this4 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.962;
	var y = -0.195;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this5 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.473;
	var y = -0.480;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this6 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.519;
	var y = 0.767;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this7 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.185;
	var y = -0.893;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this8 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.507;
	var y = 0.064;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this9 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.896;
	var y = 0.412;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this10 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.322;
	var y = -0.933;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this11 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.792;
	var y = -0.598;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.poissonDiskHigh__ = [this1,this2,this3,this4,this5,this6,this7,this8,this9,this10,this11,new h3d_Vector4Impl(x,y,0.,1.)];
	var x = -0.613392;
	var y = 0.617481;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this1 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.170019;
	var y = -0.040254;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this2 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.299417;
	var y = 0.791925;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this3 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.645680;
	var y = 0.493210;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this4 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.651784;
	var y = 0.717887;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this5 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.421003;
	var y = 0.027070;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this6 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.817194;
	var y = -0.271096;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this7 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.705374;
	var y = -0.668203;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this8 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.977050;
	var y = -0.108615;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this9 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.063326;
	var y = 0.142369;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this10 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.203528;
	var y = 0.214331;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this11 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.667531;
	var y = 0.326090;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this12 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.098422;
	var y = -0.295755;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this13 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.885922;
	var y = 0.215369;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this14 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.566637;
	var y = 0.605213;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this15 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.039766;
	var y = -0.396100;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this16 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.751946;
	var y = 0.453352;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this17 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.078707;
	var y = -0.715323;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this18 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.075838;
	var y = -0.529344;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this19 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.724479;
	var y = -0.580798;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this20 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.222999;
	var y = -0.215125;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this21 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.467574;
	var y = -0.405438;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this22 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.248268;
	var y = -0.814753;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this23 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.354411;
	var y = -0.887570;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this24 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.175817;
	var y = 0.382366;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this25 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.487472;
	var y = -0.063082;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this26 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.084078;
	var y = 0.898312;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this27 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.488876;
	var y = -0.783441;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this28 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.470016;
	var y = 0.217933;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this29 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.696890;
	var y = -0.549791;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this30 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.149693;
	var y = 0.605762;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this31 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.034211;
	var y = 0.979980;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this32 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.503098;
	var y = -0.308878;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this33 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.016205;
	var y = -0.872921;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this34 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.385784;
	var y = -0.393902;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this35 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.146886;
	var y = -0.859249;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this36 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.643361;
	var y = 0.164098;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this37 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.634388;
	var y = -0.049471;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this38 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.688894;
	var y = 0.007843;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this39 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.464034;
	var y = -0.188818;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this40 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.440840;
	var y = 0.137486;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this41 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.364483;
	var y = 0.511704;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this42 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.034028;
	var y = 0.325968;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this43 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.099094;
	var y = -0.308023;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this44 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.693960;
	var y = -0.366253;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this45 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.678884;
	var y = -0.204688;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this46 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.001801;
	var y = 0.780328;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this47 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.145177;
	var y = -0.898984;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this48 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.062655;
	var y = -0.611866;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this49 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.315226;
	var y = -0.604297;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this50 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.780145;
	var y = 0.486251;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this51 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.371868;
	var y = 0.882138;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this52 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.200476;
	var y = 0.494430;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this53 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.494552;
	var y = -0.711051;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this54 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.612476;
	var y = 0.705252;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this55 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.578845;
	var y = -0.768792;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this56 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.772454;
	var y = -0.090976;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this57 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.504440;
	var y = 0.372295;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this58 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.155736;
	var y = 0.065157;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this59 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.391522;
	var y = 0.849605;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this60 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.620106;
	var y = -0.328104;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this61 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = 0.789239;
	var y = -0.419965;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this62 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.545396;
	var y = 0.538133;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var this63 = new h3d_Vector4Impl(x,y,0.,1.);
	var x = -0.178564;
	var y = -0.596057;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.poissonDiskVeryHigh__ = [this1,this2,this3,this4,this5,this6,this7,this8,this9,this10,this11,this12,this13,this14,this15,this16,this17,this18,this19,this20,this21,this22,this23,this24,this25,this26,this27,this28,this29,this30,this31,this32,this33,this34,this35,this36,this37,this38,this39,this40,this41,this42,this43,this44,this45,this46,this47,this48,this49,this50,this51,this52,this53,this54,this55,this56,this57,this58,this59,this60,this61,this62,this63,new h3d_Vector4Impl(x,y,0.,1.)];
};
$hxClasses["h3d.shader.SpotShadow"] = h3d_shader_SpotShadow;
h3d_shader_SpotShadow.__name__ = "h3d.shader.SpotShadow";
h3d_shader_SpotShadow.__super__ = hxsl_Shader;
h3d_shader_SpotShadow.prototype = $extend(hxsl_Shader.prototype,{
	get_enable: function() {
		return this.enable__;
	}
	,set_enable: function(_v) {
		this.constModified = true;
		return this.enable__ = _v;
	}
	,get_USE_ESM: function() {
		return this.USE_ESM__;
	}
	,set_USE_ESM: function(_v) {
		this.constModified = true;
		return this.USE_ESM__ = _v;
	}
	,get_shadowPower: function() {
		return this.shadowPower__;
	}
	,set_shadowPower: function(_v) {
		return this.shadowPower__ = _v;
	}
	,get_USE_PCF: function() {
		return this.USE_PCF__;
	}
	,set_USE_PCF: function(_v) {
		this.constModified = true;
		return this.USE_PCF__ = _v;
	}
	,get_pcfQuality: function() {
		return this.pcfQuality__;
	}
	,set_pcfQuality: function(_v) {
		this.constModified = true;
		return this.pcfQuality__ = _v;
	}
	,get_pcfScale: function() {
		return this.pcfScale__;
	}
	,set_pcfScale: function(_v) {
		return this.pcfScale__ = _v;
	}
	,get_shadowRes: function() {
		return this.shadowRes__;
	}
	,set_shadowRes: function(_v) {
		return this.shadowRes__ = _v;
	}
	,get_shadowMap: function() {
		return this.shadowMap__;
	}
	,set_shadowMap: function(_v) {
		this.constModified = true;
		return this.shadowMap__ = _v;
	}
	,get_shadowMapChannel: function() {
		return this.shadowMapChannel__;
	}
	,set_shadowMapChannel: function(v) {
		this.constModified = true;
		return this.shadowMapChannel__ = v;
	}
	,get_shadowProj: function() {
		return this.shadowProj__;
	}
	,set_shadowProj: function(_v) {
		return this.shadowProj__ = _v;
	}
	,get_shadowBias: function() {
		return this.shadowBias__;
	}
	,set_shadowBias: function(_v) {
		return this.shadowBias__ = _v;
	}
	,get_poissonDiskLow: function() {
		return this.poissonDiskLow__;
	}
	,set_poissonDiskLow: function(_v) {
		return this.poissonDiskLow__ = _v;
	}
	,get_poissonDiskHigh: function() {
		return this.poissonDiskHigh__;
	}
	,set_poissonDiskHigh: function(_v) {
		return this.poissonDiskHigh__ = _v;
	}
	,get_poissonDiskVeryHigh: function() {
		return this.poissonDiskVeryHigh__;
	}
	,set_poissonDiskVeryHigh: function(_v) {
		return this.poissonDiskVeryHigh__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.pcfQuality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("pcfQuality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw haxe_Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.pcfQuality__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDiskLow__;
		case 11:
			return this.poissonDiskHigh__;
		case 12:
			return this.poissonDiskVeryHigh__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.enable__ = val;
			break;
		case 1:
			this.USE_ESM__ = val;
			break;
		case 2:
			this.shadowPower__ = val;
			break;
		case 3:
			this.USE_PCF__ = val;
			break;
		case 4:
			this.pcfQuality__ = val;
			break;
		case 5:
			this.pcfScale__ = val;
			break;
		case 6:
			this.shadowRes__ = val;
			break;
		case 7:
			this.shadowMap__ = val;
			break;
		case 8:
			this.shadowProj__ = val;
			break;
		case 9:
			this.shadowBias__ = val;
			break;
		case 10:
			this.poissonDiskLow__ = val;
			break;
		case 11:
			this.poissonDiskHigh__ = val;
			break;
		case 12:
			this.poissonDiskVeryHigh__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
		switch(index) {
		case 2:
			this.shadowPower__ = val;
			break;
		case 5:
			this.pcfScale__ = val;
			break;
		case 9:
			this.shadowBias__ = val;
			break;
		default:
		}
	}
	,clone: function() {
		var s = Object.create(h3d_shader_SpotShadow.prototype);
		s.shader = this.shader;
		s.enable__ = this.enable__;
		s.USE_ESM__ = this.USE_ESM__;
		s.shadowPower__ = this.shadowPower__;
		s.USE_PCF__ = this.USE_PCF__;
		s.pcfQuality__ = this.pcfQuality__;
		s.pcfScale__ = this.pcfScale__;
		s.shadowRes__ = this.shadowRes__;
		s.shadowMap__ = this.shadowMap__;
		s.shadowProj__ = this.shadowProj__;
		s.shadowBias__ = this.shadowBias__;
		s.poissonDiskLow__ = this.poissonDiskLow__;
		s.poissonDiskHigh__ = this.poissonDiskHigh__;
		s.poissonDiskVeryHigh__ = this.poissonDiskVeryHigh__;
		return s;
	}
	,__class__: h3d_shader_SpotShadow
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
$hxClasses["h3d.shader.Texture"] = h3d_shader_Texture;
h3d_shader_Texture.__name__ = "h3d.shader.Texture";
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_specularAlpha: function() {
		return this.specularAlpha__;
	}
	,set_specularAlpha: function(_v) {
		this.constModified = true;
		return this.specularAlpha__ = _v;
	}
	,get_killAlphaThreshold: function() {
		return this.killAlphaThreshold__;
	}
	,set_killAlphaThreshold: function(_v) {
		return this.killAlphaThreshold__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.additive__ = val;
			break;
		case 1:
			this.killAlpha__ = val;
			break;
		case 2:
			this.specularAlpha__ = val;
			break;
		case 3:
			this.killAlphaThreshold__ = val;
			break;
		case 4:
			this.texture__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
		if(index == 3) {
			this.killAlphaThreshold__ = val;
		}
	}
	,clone: function() {
		var s = Object.create(h3d_shader_Texture.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		s.killAlpha__ = this.killAlpha__;
		s.specularAlpha__ = this.specularAlpha__;
		s.killAlphaThreshold__ = this.killAlphaThreshold__;
		s.texture__ = this.texture__;
		return s;
	}
	,__class__: h3d_shader_Texture
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_VectorImpl(0.,0.,0.);
	this.uvDelta__ = new h3d_VectorImpl(0.,0.,0.);
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	var x = dx;
	var y = dy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	var _this = this.uvScale__;
	var x = sx;
	var y = sy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
};
$hxClasses["h3d.shader.UVDelta"] = h3d_shader_UVDelta;
h3d_shader_UVDelta.__name__ = "h3d.shader.UVDelta";
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	get_uvDelta: function() {
		return this.uvDelta__;
	}
	,set_uvDelta: function(_v) {
		return this.uvDelta__ = _v;
	}
	,get_uvScale: function() {
		return this.uvScale__;
	}
	,set_uvScale: function(_v) {
		return this.uvScale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.uvDelta__ = val;
			break;
		case 1:
			this.uvScale__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_UVDelta.prototype);
		s.shader = this.shader;
		s.uvDelta__ = this.uvDelta__;
		s.uvScale__ = this.uvScale__;
		return s;
	}
	,__class__: h3d_shader_UVDelta
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d_shader_VertexColorAlpha;
h3d_shader_VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		if(index == 0) {
			this.additive__ = val;
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_VertexColorAlpha.prototype);
		s.shader = this.shader;
		s.additive__ = this.additive__;
		return s;
	}
	,__class__: h3d_shader_VertexColorAlpha
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.isCentered__ = true;
	this.tangent__ = new h3d_VectorImpl(0.,0.,0.);
	this.normal__ = new h3d_VectorImpl(0.,0.,0.);
	this.scale__ = new h3d_VectorImpl(0.,0.,0.);
	hxsl_Shader.call(this);
	var _this = this.normal__;
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	var _this = this.tangent__;
	var x = 1;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	var _this = this.scale__;
	var x = 1 / objectWidth;
	var y = 1 / objectHeight;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
};
$hxClasses["h3d.shader.VolumeDecal"] = h3d_shader_VolumeDecal;
h3d_shader_VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,get_normal: function() {
		return this.normal__;
	}
	,set_normal: function(_v) {
		return this.normal__ = _v;
	}
	,get_tangent: function() {
		return this.tangent__;
	}
	,set_tangent: function(_v) {
		return this.tangent__ = _v;
	}
	,get_isCentered: function() {
		return this.isCentered__;
	}
	,set_isCentered: function(_v) {
		this.constModified = true;
		return this.isCentered__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.scale__ = val;
			break;
		case 1:
			this.normal__ = val;
			break;
		case 2:
			this.tangent__ = val;
			break;
		case 3:
			this.isCentered__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_VolumeDecal.prototype);
		s.shader = this.shader;
		s.scale__ = this.scale__;
		s.normal__ = this.normal__;
		s.tangent__ = this.tangent__;
		s.isCentered__ = this.isCentered__;
		return s;
	}
	,__class__: h3d_shader_VolumeDecal
});
var h3d_shader_pbr_BDRF = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.pbr.BDRF"] = h3d_shader_pbr_BDRF;
h3d_shader_pbr_BDRF.__name__ = "h3d.shader.pbr.BDRF";
h3d_shader_pbr_BDRF.__super__ = hxsl_Shader;
h3d_shader_pbr_BDRF.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,__class__: h3d_shader_pbr_BDRF
});
var h3d_shader_pbr_DefaultForward = function() {
	this.irrRotation__ = new h3d_VectorImpl(0.,0.,0.);
	this.irrPower__ = 0;
	this.irrSpecularLevels__ = 0;
	this.USE_INDIRECT__ = false;
	this.emissivePower__ = 0;
	this.cameraPosition__ = new h3d_VectorImpl(0.,0.,0.);
	this.spotShadowMaps__ = [];
	this.pointShadowMaps__ = [];
	this.dirShadowMaps__ = [];
	this.pointLightStride__ = 0;
	this.dirLightStride__ = 0;
	this.spotLightCount__ = 0;
	this.pointLightCount__ = 0;
	this.dirLightCount__ = 0;
	this.BUFFER_SIZE__ = 1;
	this.SPOT_SHADOW_COUNT__ = 0;
	this.POINT_SHADOW_COUNT__ = 0;
	this.DIR_SHADOW_COUNT__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.pbr.DefaultForward"] = h3d_shader_pbr_DefaultForward;
h3d_shader_pbr_DefaultForward.__name__ = "h3d.shader.pbr.DefaultForward";
h3d_shader_pbr_DefaultForward.__super__ = hxsl_Shader;
h3d_shader_pbr_DefaultForward.prototype = $extend(hxsl_Shader.prototype,{
	get_DIR_SHADOW_COUNT: function() {
		return this.DIR_SHADOW_COUNT__;
	}
	,set_DIR_SHADOW_COUNT: function(_v) {
		this.constModified = true;
		return this.DIR_SHADOW_COUNT__ = _v;
	}
	,get_POINT_SHADOW_COUNT: function() {
		return this.POINT_SHADOW_COUNT__;
	}
	,set_POINT_SHADOW_COUNT: function(_v) {
		this.constModified = true;
		return this.POINT_SHADOW_COUNT__ = _v;
	}
	,get_SPOT_SHADOW_COUNT: function() {
		return this.SPOT_SHADOW_COUNT__;
	}
	,set_SPOT_SHADOW_COUNT: function(_v) {
		this.constModified = true;
		return this.SPOT_SHADOW_COUNT__ = _v;
	}
	,get_BUFFER_SIZE: function() {
		return this.BUFFER_SIZE__;
	}
	,set_BUFFER_SIZE: function(_v) {
		this.constModified = true;
		return this.BUFFER_SIZE__ = _v;
	}
	,get_lightInfos: function() {
		return this.lightInfos__;
	}
	,set_lightInfos: function(_v) {
		return this.lightInfos__ = _v;
	}
	,get_dirLightCount: function() {
		return this.dirLightCount__;
	}
	,set_dirLightCount: function(_v) {
		return this.dirLightCount__ = _v;
	}
	,get_pointLightCount: function() {
		return this.pointLightCount__;
	}
	,set_pointLightCount: function(_v) {
		return this.pointLightCount__ = _v;
	}
	,get_spotLightCount: function() {
		return this.spotLightCount__;
	}
	,set_spotLightCount: function(_v) {
		return this.spotLightCount__ = _v;
	}
	,get_dirLightStride: function() {
		return this.dirLightStride__;
	}
	,set_dirLightStride: function(_v) {
		return this.dirLightStride__ = _v;
	}
	,get_pointLightStride: function() {
		return this.pointLightStride__;
	}
	,set_pointLightStride: function(_v) {
		return this.pointLightStride__ = _v;
	}
	,get_dirShadowMaps: function() {
		return this.dirShadowMaps__;
	}
	,set_dirShadowMaps: function(_v) {
		return this.dirShadowMaps__ = _v;
	}
	,get_pointShadowMaps: function() {
		return this.pointShadowMaps__;
	}
	,set_pointShadowMaps: function(_v) {
		return this.pointShadowMaps__ = _v;
	}
	,get_spotShadowMaps: function() {
		return this.spotShadowMaps__;
	}
	,set_spotShadowMaps: function(_v) {
		return this.spotShadowMaps__ = _v;
	}
	,get_cameraPosition: function() {
		return this.cameraPosition__;
	}
	,set_cameraPosition: function(_v) {
		return this.cameraPosition__ = _v;
	}
	,get_emissivePower: function() {
		return this.emissivePower__;
	}
	,set_emissivePower: function(_v) {
		return this.emissivePower__ = _v;
	}
	,get_USE_INDIRECT: function() {
		return this.USE_INDIRECT__;
	}
	,set_USE_INDIRECT: function(_v) {
		this.constModified = true;
		return this.USE_INDIRECT__ = _v;
	}
	,get_irrLut: function() {
		return this.irrLut__;
	}
	,set_irrLut: function(_v) {
		return this.irrLut__ = _v;
	}
	,get_irrDiffuse: function() {
		return this.irrDiffuse__;
	}
	,set_irrDiffuse: function(_v) {
		return this.irrDiffuse__ = _v;
	}
	,get_irrSpecular: function() {
		return this.irrSpecular__;
	}
	,set_irrSpecular: function(_v) {
		return this.irrSpecular__ = _v;
	}
	,get_irrSpecularLevels: function() {
		return this.irrSpecularLevels__;
	}
	,set_irrSpecularLevels: function(_v) {
		return this.irrSpecularLevels__ = _v;
	}
	,get_irrPower: function() {
		return this.irrPower__;
	}
	,set_irrPower: function(_v) {
		return this.irrPower__ = _v;
	}
	,get_irrRotation: function() {
		return this.irrRotation__;
	}
	,set_irrRotation: function(_v) {
		return this.irrRotation__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.DIR_SHADOW_COUNT__;
		if(v >>> 5 != 0) {
			throw haxe_Exception.thrown("DIR_SHADOW_COUNT" + " is out of range " + v + ">" + 31);
		}
		this.constBits |= v;
		var v = this.POINT_SHADOW_COUNT__;
		if(v >>> 5 != 0) {
			throw haxe_Exception.thrown("POINT_SHADOW_COUNT" + " is out of range " + v + ">" + 31);
		}
		this.constBits |= v << 5;
		var v = this.SPOT_SHADOW_COUNT__;
		if(v >>> 5 != 0) {
			throw haxe_Exception.thrown("SPOT_SHADOW_COUNT" + " is out of range " + v + ">" + 31);
		}
		this.constBits |= v << 10;
		var v = this.BUFFER_SIZE__;
		if(v >>> 9 != 0) {
			throw haxe_Exception.thrown("BUFFER_SIZE" + " is out of range " + v + ">" + 511);
		}
		this.constBits |= v << 15;
		if(this.USE_INDIRECT__) {
			this.constBits |= 16777216;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.DIR_SHADOW_COUNT__;
		case 1:
			return this.POINT_SHADOW_COUNT__;
		case 2:
			return this.SPOT_SHADOW_COUNT__;
		case 3:
			return this.BUFFER_SIZE__;
		case 4:
			return this.lightInfos__;
		case 5:
			return this.dirLightCount__;
		case 6:
			return this.pointLightCount__;
		case 7:
			return this.spotLightCount__;
		case 8:
			return this.dirLightStride__;
		case 9:
			return this.pointLightStride__;
		case 10:
			return this.dirShadowMaps__;
		case 11:
			return this.pointShadowMaps__;
		case 12:
			return this.spotShadowMaps__;
		case 13:
			return this.cameraPosition__;
		case 14:
			return this.emissivePower__;
		case 15:
			return this.USE_INDIRECT__;
		case 16:
			return this.irrLut__;
		case 17:
			return this.irrDiffuse__;
		case 18:
			return this.irrSpecular__;
		case 19:
			return this.irrSpecularLevels__;
		case 20:
			return this.irrPower__;
		case 21:
			return this.irrRotation__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 14:
			return this.emissivePower__;
		case 19:
			return this.irrSpecularLevels__;
		case 20:
			return this.irrPower__;
		default:
		}
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.DIR_SHADOW_COUNT__ = val;
			break;
		case 1:
			this.POINT_SHADOW_COUNT__ = val;
			break;
		case 2:
			this.SPOT_SHADOW_COUNT__ = val;
			break;
		case 3:
			this.BUFFER_SIZE__ = val;
			break;
		case 4:
			this.lightInfos__ = val;
			break;
		case 5:
			this.dirLightCount__ = val;
			break;
		case 6:
			this.pointLightCount__ = val;
			break;
		case 7:
			this.spotLightCount__ = val;
			break;
		case 8:
			this.dirLightStride__ = val;
			break;
		case 9:
			this.pointLightStride__ = val;
			break;
		case 10:
			this.dirShadowMaps__ = val;
			break;
		case 11:
			this.pointShadowMaps__ = val;
			break;
		case 12:
			this.spotShadowMaps__ = val;
			break;
		case 13:
			this.cameraPosition__ = val;
			break;
		case 14:
			this.emissivePower__ = val;
			break;
		case 15:
			this.USE_INDIRECT__ = val;
			break;
		case 16:
			this.irrLut__ = val;
			break;
		case 17:
			this.irrDiffuse__ = val;
			break;
		case 18:
			this.irrSpecular__ = val;
			break;
		case 19:
			this.irrSpecularLevels__ = val;
			break;
		case 20:
			this.irrPower__ = val;
			break;
		case 21:
			this.irrRotation__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
		switch(index) {
		case 14:
			this.emissivePower__ = val;
			break;
		case 19:
			this.irrSpecularLevels__ = val;
			break;
		case 20:
			this.irrPower__ = val;
			break;
		default:
		}
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_DefaultForward.prototype);
		s.shader = this.shader;
		s.DIR_SHADOW_COUNT__ = this.DIR_SHADOW_COUNT__;
		s.POINT_SHADOW_COUNT__ = this.POINT_SHADOW_COUNT__;
		s.SPOT_SHADOW_COUNT__ = this.SPOT_SHADOW_COUNT__;
		s.BUFFER_SIZE__ = this.BUFFER_SIZE__;
		s.lightInfos__ = this.lightInfos__;
		s.dirLightCount__ = this.dirLightCount__;
		s.pointLightCount__ = this.pointLightCount__;
		s.spotLightCount__ = this.spotLightCount__;
		s.dirLightStride__ = this.dirLightStride__;
		s.pointLightStride__ = this.pointLightStride__;
		s.dirShadowMaps__ = this.dirShadowMaps__;
		s.pointShadowMaps__ = this.pointShadowMaps__;
		s.spotShadowMaps__ = this.spotShadowMaps__;
		s.cameraPosition__ = this.cameraPosition__;
		s.emissivePower__ = this.emissivePower__;
		s.USE_INDIRECT__ = this.USE_INDIRECT__;
		s.irrLut__ = this.irrLut__;
		s.irrDiffuse__ = this.irrDiffuse__;
		s.irrSpecular__ = this.irrSpecular__;
		s.irrSpecularLevels__ = this.irrSpecularLevels__;
		s.irrPower__ = this.irrPower__;
		s.irrRotation__ = this.irrRotation__;
		return s;
	}
	,__class__: h3d_shader_pbr_DefaultForward
});
var h3d_shader_pbr_LightEvaluation = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.pbr.LightEvaluation"] = h3d_shader_pbr_LightEvaluation;
h3d_shader_pbr_LightEvaluation.__name__ = "h3d.shader.pbr.LightEvaluation";
h3d_shader_pbr_LightEvaluation.__super__ = hxsl_Shader;
h3d_shader_pbr_LightEvaluation.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,__class__: h3d_shader_pbr_LightEvaluation
});
var h3d_shader_pbr_Light = function() {
	this.occlusionFactor__ = 0;
	var x = 0.5;
	var y = 0.5;
	var z = 0.5;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.lightColor__ = new h3d_VectorImpl(x,y,z);
	h3d_shader_pbr_LightEvaluation.call(this);
};
$hxClasses["h3d.shader.pbr.Light"] = h3d_shader_pbr_Light;
h3d_shader_pbr_Light.__name__ = "h3d.shader.pbr.Light";
h3d_shader_pbr_Light.__super__ = h3d_shader_pbr_LightEvaluation;
h3d_shader_pbr_Light.prototype = $extend(h3d_shader_pbr_LightEvaluation.prototype,{
	get_lightColor: function() {
		return this.lightColor__;
	}
	,set_lightColor: function(_v) {
		return this.lightColor__ = _v;
	}
	,get_occlusionFactor: function() {
		return this.occlusionFactor__;
	}
	,set_occlusionFactor: function(_v) {
		return this.occlusionFactor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lightColor__;
		case 1:
			return this.occlusionFactor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 1) {
			return this.occlusionFactor__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_Light.prototype);
		s.shader = this.shader;
		s.lightColor__ = this.lightColor__;
		s.occlusionFactor__ = this.occlusionFactor__;
		return s;
	}
	,__class__: h3d_shader_pbr_Light
});
var h3d_shader_pbr_SpotLight = function() {
	this.lightProj__ = new h3d_MatrixImpl();
	this.range__ = 0;
	this.invLightRange4__ = 0;
	this.fallOff__ = 0;
	this.angle__ = 0;
	this.lightPos__ = new h3d_VectorImpl(0.,0.,0.);
	this.spotDir__ = new h3d_VectorImpl(0.,0.,0.);
	h3d_shader_pbr_Light.call(this);
};
$hxClasses["h3d.shader.pbr.SpotLight"] = h3d_shader_pbr_SpotLight;
h3d_shader_pbr_SpotLight.__name__ = "h3d.shader.pbr.SpotLight";
h3d_shader_pbr_SpotLight.__super__ = h3d_shader_pbr_Light;
h3d_shader_pbr_SpotLight.prototype = $extend(h3d_shader_pbr_Light.prototype,{
	get_spotDir: function() {
		return this.spotDir__;
	}
	,set_spotDir: function(_v) {
		return this.spotDir__ = _v;
	}
	,get_lightPos: function() {
		return this.lightPos__;
	}
	,set_lightPos: function(_v) {
		return this.lightPos__ = _v;
	}
	,get_angle: function() {
		return this.angle__;
	}
	,set_angle: function(_v) {
		return this.angle__ = _v;
	}
	,get_fallOff: function() {
		return this.fallOff__;
	}
	,set_fallOff: function(_v) {
		return this.fallOff__ = _v;
	}
	,get_invLightRange4: function() {
		return this.invLightRange4__;
	}
	,set_invLightRange4: function(_v) {
		return this.invLightRange4__ = _v;
	}
	,get_range: function() {
		return this.range__;
	}
	,set_range: function(_v) {
		return this.range__ = _v;
	}
	,get_lightProj: function() {
		return this.lightProj__;
	}
	,set_lightProj: function(_v) {
		return this.lightProj__ = _v;
	}
	,get_useCookie: function() {
		return this.useCookie__;
	}
	,set_useCookie: function(_v) {
		this.constModified = true;
		return this.useCookie__ = _v;
	}
	,get_cookieTex: function() {
		return this.cookieTex__;
	}
	,set_cookieTex: function(_v) {
		return this.cookieTex__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useCookie__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lightColor__;
		case 1:
			return this.occlusionFactor__;
		case 2:
			return this.spotDir__;
		case 3:
			return this.lightPos__;
		case 4:
			return this.angle__;
		case 5:
			return this.fallOff__;
		case 6:
			return this.invLightRange4__;
		case 7:
			return this.range__;
		case 8:
			return this.lightProj__;
		case 9:
			return this.useCookie__;
		case 10:
			return this.cookieTex__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.occlusionFactor__;
		case 4:
			return this.angle__;
		case 5:
			return this.fallOff__;
		case 6:
			return this.invLightRange4__;
		case 7:
			return this.range__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_SpotLight.prototype);
		s.shader = this.shader;
		s.lightColor__ = this.lightColor__;
		s.occlusionFactor__ = this.occlusionFactor__;
		s.spotDir__ = this.spotDir__;
		s.lightPos__ = this.lightPos__;
		s.angle__ = this.angle__;
		s.fallOff__ = this.fallOff__;
		s.invLightRange4__ = this.invLightRange4__;
		s.range__ = this.range__;
		s.lightProj__ = this.lightProj__;
		s.useCookie__ = this.useCookie__;
		s.cookieTex__ = this.cookieTex__;
		return s;
	}
	,__class__: h3d_shader_pbr_SpotLight
});
var h3d_shader_pbr_PointLight = function() {
	this.pointSize__ = 0;
	this.invLightRange4__ = 0;
	this.lightPos__ = new h3d_VectorImpl(0.,0.,0.);
	h3d_shader_pbr_Light.call(this);
};
$hxClasses["h3d.shader.pbr.PointLight"] = h3d_shader_pbr_PointLight;
h3d_shader_pbr_PointLight.__name__ = "h3d.shader.pbr.PointLight";
h3d_shader_pbr_PointLight.__super__ = h3d_shader_pbr_Light;
h3d_shader_pbr_PointLight.prototype = $extend(h3d_shader_pbr_Light.prototype,{
	get_lightPos: function() {
		return this.lightPos__;
	}
	,set_lightPos: function(_v) {
		return this.lightPos__ = _v;
	}
	,get_invLightRange4: function() {
		return this.invLightRange4__;
	}
	,set_invLightRange4: function(_v) {
		return this.invLightRange4__ = _v;
	}
	,get_pointSize: function() {
		return this.pointSize__;
	}
	,set_pointSize: function(_v) {
		return this.pointSize__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lightColor__;
		case 1:
			return this.occlusionFactor__;
		case 2:
			return this.lightPos__;
		case 3:
			return this.invLightRange4__;
		case 4:
			return this.pointSize__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.occlusionFactor__;
		case 3:
			return this.invLightRange4__;
		case 4:
			return this.pointSize__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_PointLight.prototype);
		s.shader = this.shader;
		s.lightColor__ = this.lightColor__;
		s.occlusionFactor__ = this.occlusionFactor__;
		s.lightPos__ = this.lightPos__;
		s.invLightRange4__ = this.invLightRange4__;
		s.pointSize__ = this.pointSize__;
		return s;
	}
	,__class__: h3d_shader_pbr_PointLight
});
var h3d_shader_pbr_DirLight = function() {
	this.lightDir__ = new h3d_VectorImpl(0.,0.,0.);
	h3d_shader_pbr_Light.call(this);
};
$hxClasses["h3d.shader.pbr.DirLight"] = h3d_shader_pbr_DirLight;
h3d_shader_pbr_DirLight.__name__ = "h3d.shader.pbr.DirLight";
h3d_shader_pbr_DirLight.__super__ = h3d_shader_pbr_Light;
h3d_shader_pbr_DirLight.prototype = $extend(h3d_shader_pbr_Light.prototype,{
	get_lightDir: function() {
		return this.lightDir__;
	}
	,set_lightDir: function(_v) {
		return this.lightDir__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lightColor__;
		case 1:
			return this.occlusionFactor__;
		case 2:
			return this.lightDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 1) {
			return this.occlusionFactor__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_DirLight.prototype);
		s.shader = this.shader;
		s.lightColor__ = this.lightColor__;
		s.occlusionFactor__ = this.occlusionFactor__;
		s.lightDir__ = this.lightDir__;
		return s;
	}
	,__class__: h3d_shader_pbr_DirLight
});
var h3d_shader_pbr_Performance = function() {
	this.maxLights__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.pbr.Performance"] = h3d_shader_pbr_Performance;
h3d_shader_pbr_Performance.__name__ = "h3d.shader.pbr.Performance";
h3d_shader_pbr_Performance.__super__ = hxsl_Shader;
h3d_shader_pbr_Performance.prototype = $extend(hxsl_Shader.prototype,{
	get_maxLights: function() {
		return this.maxLights__;
	}
	,set_maxLights: function(_v) {
		return this.maxLights__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.maxLights__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		if(index == 0) {
			this.maxLights__ = val;
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_Performance.prototype);
		s.shader = this.shader;
		s.maxLights__ = this.maxLights__;
		return s;
	}
	,__class__: h3d_shader_pbr_Performance
});
var h3d_shader_pbr_CapsuleLight = function() {
	this.left__ = new h3d_VectorImpl(0.,0.,0.);
	this.halfLength__ = 0;
	this.invRange4__ = 0;
	this.radius__ = 0;
	this.lightPos__ = new h3d_VectorImpl(0.,0.,0.);
	h3d_shader_pbr_Light.call(this);
};
$hxClasses["h3d.shader.pbr.CapsuleLight"] = h3d_shader_pbr_CapsuleLight;
h3d_shader_pbr_CapsuleLight.__name__ = "h3d.shader.pbr.CapsuleLight";
h3d_shader_pbr_CapsuleLight.__super__ = h3d_shader_pbr_Light;
h3d_shader_pbr_CapsuleLight.prototype = $extend(h3d_shader_pbr_Light.prototype,{
	get_lightPos: function() {
		return this.lightPos__;
	}
	,set_lightPos: function(_v) {
		return this.lightPos__ = _v;
	}
	,get_radius: function() {
		return this.radius__;
	}
	,set_radius: function(_v) {
		return this.radius__ = _v;
	}
	,get_invRange4: function() {
		return this.invRange4__;
	}
	,set_invRange4: function(_v) {
		return this.invRange4__ = _v;
	}
	,get_halfLength: function() {
		return this.halfLength__;
	}
	,set_halfLength: function(_v) {
		return this.halfLength__ = _v;
	}
	,get_left: function() {
		return this.left__;
	}
	,set_left: function(_v) {
		return this.left__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lightColor__;
		case 1:
			return this.occlusionFactor__;
		case 2:
			return this.lightPos__;
		case 3:
			return this.radius__;
		case 4:
			return this.invRange4__;
		case 5:
			return this.halfLength__;
		case 6:
			return this.left__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.occlusionFactor__;
		case 3:
			return this.radius__;
		case 4:
			return this.invRange4__;
		case 5:
			return this.halfLength__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_CapsuleLight.prototype);
		s.shader = this.shader;
		s.lightColor__ = this.lightColor__;
		s.occlusionFactor__ = this.occlusionFactor__;
		s.lightPos__ = this.lightPos__;
		s.radius__ = this.radius__;
		s.invRange4__ = this.invRange4__;
		s.halfLength__ = this.halfLength__;
		s.left__ = this.left__;
		return s;
	}
	,__class__: h3d_shader_pbr_CapsuleLight
});
var h3d_shader_pbr_PropsDefinition = function() {
	this.cameraPosition__ = new h3d_VectorImpl(0.,0.,0.);
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.pbr.PropsDefinition"] = h3d_shader_pbr_PropsDefinition;
h3d_shader_pbr_PropsDefinition.__name__ = "h3d.shader.pbr.PropsDefinition";
h3d_shader_pbr_PropsDefinition.__super__ = hxsl_Shader;
h3d_shader_pbr_PropsDefinition.prototype = $extend(hxsl_Shader.prototype,{
	get_cameraPosition: function() {
		return this.cameraPosition__;
	}
	,set_cameraPosition: function(_v) {
		return this.cameraPosition__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.cameraPosition__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		if(index == 0) {
			this.cameraPosition__ = val;
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_PropsDefinition.prototype);
		s.shader = this.shader;
		s.cameraPosition__ = this.cameraPosition__;
		return s;
	}
	,__class__: h3d_shader_pbr_PropsDefinition
});
var h3d_shader_pbr_Indirect = function() {
	this.emissivePower__ = 0;
	this.skyColorValue__ = new h3d_VectorImpl(0.,0.,0.);
	this.cameraInvViewProj__ = new h3d_MatrixImpl();
	this.skyHdrMax__ = 0;
	this.irrRotation__ = new h3d_VectorImpl(0.,0.,0.);
	this.irrPower__ = 0;
	this.irrSpecularLevels__ = 0;
	h3d_shader_pbr_PropsDefinition.call(this);
};
$hxClasses["h3d.shader.pbr.Indirect"] = h3d_shader_pbr_Indirect;
h3d_shader_pbr_Indirect.__name__ = "h3d.shader.pbr.Indirect";
h3d_shader_pbr_Indirect.__super__ = h3d_shader_pbr_PropsDefinition;
h3d_shader_pbr_Indirect.prototype = $extend(h3d_shader_pbr_PropsDefinition.prototype,{
	get_drawIndirectDiffuse: function() {
		return this.drawIndirectDiffuse__;
	}
	,set_drawIndirectDiffuse: function(_v) {
		this.constModified = true;
		return this.drawIndirectDiffuse__ = _v;
	}
	,get_drawIndirectSpecular: function() {
		return this.drawIndirectSpecular__;
	}
	,set_drawIndirectSpecular: function(_v) {
		this.constModified = true;
		return this.drawIndirectSpecular__ = _v;
	}
	,get_showSky: function() {
		return this.showSky__;
	}
	,set_showSky: function(_v) {
		this.constModified = true;
		return this.showSky__ = _v;
	}
	,get_skyColor: function() {
		return this.skyColor__;
	}
	,set_skyColor: function(_v) {
		this.constModified = true;
		return this.skyColor__ = _v;
	}
	,get_irrLut: function() {
		return this.irrLut__;
	}
	,set_irrLut: function(_v) {
		return this.irrLut__ = _v;
	}
	,get_irrDiffuse: function() {
		return this.irrDiffuse__;
	}
	,set_irrDiffuse: function(_v) {
		return this.irrDiffuse__ = _v;
	}
	,get_irrSpecular: function() {
		return this.irrSpecular__;
	}
	,set_irrSpecular: function(_v) {
		return this.irrSpecular__ = _v;
	}
	,get_irrSpecularLevels: function() {
		return this.irrSpecularLevels__;
	}
	,set_irrSpecularLevels: function(_v) {
		return this.irrSpecularLevels__ = _v;
	}
	,get_irrPower: function() {
		return this.irrPower__;
	}
	,set_irrPower: function(_v) {
		return this.irrPower__ = _v;
	}
	,get_irrRotation: function() {
		return this.irrRotation__;
	}
	,set_irrRotation: function(_v) {
		return this.irrRotation__ = _v;
	}
	,get_skyMap: function() {
		return this.skyMap__;
	}
	,set_skyMap: function(_v) {
		return this.skyMap__ = _v;
	}
	,get_skyHdrMax: function() {
		return this.skyHdrMax__;
	}
	,set_skyHdrMax: function(_v) {
		return this.skyHdrMax__ = _v;
	}
	,get_gammaCorrect: function() {
		return this.gammaCorrect__;
	}
	,set_gammaCorrect: function(_v) {
		this.constModified = true;
		return this.gammaCorrect__ = _v;
	}
	,get_cameraInvViewProj: function() {
		return this.cameraInvViewProj__;
	}
	,set_cameraInvViewProj: function(_v) {
		return this.cameraInvViewProj__ = _v;
	}
	,get_skyColorValue: function() {
		return this.skyColorValue__;
	}
	,set_skyColorValue: function(_v) {
		return this.skyColorValue__ = _v;
	}
	,get_emissivePower: function() {
		return this.emissivePower__;
	}
	,set_emissivePower: function(_v) {
		return this.emissivePower__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.drawIndirectDiffuse__) {
			this.constBits |= 1;
		}
		if(this.drawIndirectSpecular__) {
			this.constBits |= 2;
		}
		if(this.showSky__) {
			this.constBits |= 4;
		}
		if(this.skyColor__) {
			this.constBits |= 8;
		}
		if(this.gammaCorrect__) {
			this.constBits |= 16;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.cameraPosition__;
		case 1:
			return this.drawIndirectDiffuse__;
		case 2:
			return this.drawIndirectSpecular__;
		case 3:
			return this.showSky__;
		case 4:
			return this.skyColor__;
		case 5:
			return this.irrLut__;
		case 6:
			return this.irrDiffuse__;
		case 7:
			return this.irrSpecular__;
		case 8:
			return this.irrSpecularLevels__;
		case 9:
			return this.irrPower__;
		case 10:
			return this.irrRotation__;
		case 11:
			return this.skyMap__;
		case 12:
			return this.skyHdrMax__;
		case 13:
			return this.gammaCorrect__;
		case 14:
			return this.cameraInvViewProj__;
		case 15:
			return this.skyColorValue__;
		case 16:
			return this.emissivePower__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 8:
			return this.irrSpecularLevels__;
		case 9:
			return this.irrPower__;
		case 12:
			return this.skyHdrMax__;
		case 16:
			return this.emissivePower__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_Indirect.prototype);
		s.shader = this.shader;
		s.cameraPosition__ = this.cameraPosition__;
		s.drawIndirectDiffuse__ = this.drawIndirectDiffuse__;
		s.drawIndirectSpecular__ = this.drawIndirectSpecular__;
		s.showSky__ = this.showSky__;
		s.skyColor__ = this.skyColor__;
		s.irrLut__ = this.irrLut__;
		s.irrDiffuse__ = this.irrDiffuse__;
		s.irrSpecular__ = this.irrSpecular__;
		s.irrSpecularLevels__ = this.irrSpecularLevels__;
		s.irrPower__ = this.irrPower__;
		s.irrRotation__ = this.irrRotation__;
		s.skyMap__ = this.skyMap__;
		s.skyHdrMax__ = this.skyHdrMax__;
		s.gammaCorrect__ = this.gammaCorrect__;
		s.cameraInvViewProj__ = this.cameraInvViewProj__;
		s.skyColorValue__ = this.skyColorValue__;
		s.emissivePower__ = this.emissivePower__;
		return s;
	}
	,__class__: h3d_shader_pbr_Indirect
});
var h3d_shader_pbr_Direct = function() {
	this.doDiscard__ = true;
	h3d_shader_pbr_PropsDefinition.call(this);
};
$hxClasses["h3d.shader.pbr.Direct"] = h3d_shader_pbr_Direct;
h3d_shader_pbr_Direct.__name__ = "h3d.shader.pbr.Direct";
h3d_shader_pbr_Direct.__super__ = h3d_shader_pbr_PropsDefinition;
h3d_shader_pbr_Direct.prototype = $extend(h3d_shader_pbr_PropsDefinition.prototype,{
	get_doDiscard: function() {
		return this.doDiscard__;
	}
	,set_doDiscard: function(_v) {
		this.constModified = true;
		return this.doDiscard__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.doDiscard__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.cameraPosition__;
		case 1:
			return this.doDiscard__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_Direct.prototype);
		s.shader = this.shader;
		s.cameraPosition__ = this.cameraPosition__;
		s.doDiscard__ = this.doDiscard__;
		return s;
	}
	,__class__: h3d_shader_pbr_Direct
});
var h3d_shader_pbr_PerformanceViewer = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.pbr.PerformanceViewer"] = h3d_shader_pbr_PerformanceViewer;
h3d_shader_pbr_PerformanceViewer.__name__ = "h3d.shader.pbr.PerformanceViewer";
h3d_shader_pbr_PerformanceViewer.__super__ = h3d_shader_ScreenShader;
h3d_shader_pbr_PerformanceViewer.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_hdrMap: function() {
		return this.hdrMap__;
	}
	,set_hdrMap: function(_v) {
		return this.hdrMap__ = _v;
	}
	,get_gradient: function() {
		return this.gradient__;
	}
	,set_gradient: function(_v) {
		return this.gradient__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.hdrMap__;
		case 2:
			return this.gradient__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_PerformanceViewer.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.hdrMap__ = this.hdrMap__;
		s.gradient__ = this.gradient__;
		return s;
	}
	,__class__: h3d_shader_pbr_PerformanceViewer
});
var h3d_shader_pbr_PropsImport = function() {
	this.occlusionPower__ = 0;
	this.cameraInverseViewProj__ = new h3d_MatrixImpl();
	this.isScreen__ = true;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.pbr.PropsImport"] = h3d_shader_pbr_PropsImport;
h3d_shader_pbr_PropsImport.__name__ = "h3d.shader.pbr.PropsImport";
h3d_shader_pbr_PropsImport.__super__ = hxsl_Shader;
h3d_shader_pbr_PropsImport.prototype = $extend(hxsl_Shader.prototype,{
	get_albedoTex: function() {
		return this.albedoTex__;
	}
	,set_albedoTex: function(_v) {
		return this.albedoTex__ = _v;
	}
	,get_normalTex: function() {
		return this.normalTex__;
	}
	,set_normalTex: function(_v) {
		return this.normalTex__ = _v;
	}
	,get_pbrTex: function() {
		return this.pbrTex__;
	}
	,set_pbrTex: function(_v) {
		return this.pbrTex__ = _v;
	}
	,get_depthTex: function() {
		return this.depthTex__;
	}
	,set_depthTex: function(_v) {
		return this.depthTex__ = _v;
	}
	,get_otherTex: function() {
		return this.otherTex__;
	}
	,set_otherTex: function(_v) {
		return this.otherTex__ = _v;
	}
	,get_isScreen: function() {
		return this.isScreen__;
	}
	,set_isScreen: function(_v) {
		this.constModified = true;
		return this.isScreen__ = _v;
	}
	,get_cameraInverseViewProj: function() {
		return this.cameraInverseViewProj__;
	}
	,set_cameraInverseViewProj: function(_v) {
		return this.cameraInverseViewProj__ = _v;
	}
	,get_occlusionPower: function() {
		return this.occlusionPower__;
	}
	,set_occlusionPower: function(_v) {
		return this.occlusionPower__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isScreen__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.albedoTex__;
		case 1:
			return this.normalTex__;
		case 2:
			return this.pbrTex__;
		case 3:
			return this.depthTex__;
		case 4:
			return this.otherTex__;
		case 5:
			return this.isScreen__;
		case 6:
			return this.cameraInverseViewProj__;
		case 7:
			return this.occlusionPower__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 7) {
			return this.occlusionPower__;
		}
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.albedoTex__ = val;
			break;
		case 1:
			this.normalTex__ = val;
			break;
		case 2:
			this.pbrTex__ = val;
			break;
		case 3:
			this.depthTex__ = val;
			break;
		case 4:
			this.otherTex__ = val;
			break;
		case 5:
			this.isScreen__ = val;
			break;
		case 6:
			this.cameraInverseViewProj__ = val;
			break;
		case 7:
			this.occlusionPower__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
		if(index == 7) {
			this.occlusionPower__ = val;
		}
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_PropsImport.prototype);
		s.shader = this.shader;
		s.albedoTex__ = this.albedoTex__;
		s.normalTex__ = this.normalTex__;
		s.pbrTex__ = this.pbrTex__;
		s.depthTex__ = this.depthTex__;
		s.otherTex__ = this.otherTex__;
		s.isScreen__ = this.isScreen__;
		s.cameraInverseViewProj__ = this.cameraInverseViewProj__;
		s.occlusionPower__ = this.occlusionPower__;
		return s;
	}
	,__class__: h3d_shader_pbr_PropsImport
});
var h3d_shader_pbr_Slides = function() {
	this.smode__ = 0;
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.pbr.Slides"] = h3d_shader_pbr_Slides;
h3d_shader_pbr_Slides.__name__ = "h3d.shader.pbr.Slides";
h3d_shader_pbr_Slides.__super__ = h3d_shader_ScreenShader;
h3d_shader_pbr_Slides.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_mode: function() {
		return this.smode__;
	}
	,set_mode: function(m) {
		this.constModified = true;
		this.smode__ = m;
		return m;
	}
	,get_shadowMap: function() {
		return this.shadowMap__;
	}
	,set_shadowMap: function(_v) {
		this.constModified = true;
		return this.shadowMap__ = _v;
	}
	,get_shadowMapChannel: function() {
		return this.shadowMapChannel__;
	}
	,set_shadowMapChannel: function(v) {
		this.constModified = true;
		return this.shadowMapChannel__ = v;
	}
	,get_shadowMapCube: function() {
		return this.shadowMapCube__;
	}
	,set_shadowMapCube: function(_v) {
		return this.shadowMapCube__ = _v;
	}
	,get_shadowIsCube: function() {
		return this.shadowIsCube__;
	}
	,set_shadowIsCube: function(_v) {
		this.constModified = true;
		return this.shadowIsCube__ = _v;
	}
	,get_smode: function() {
		return this.smode__;
	}
	,set_smode: function(_v) {
		this.constModified = true;
		return this.smode__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw haxe_Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index;
		if(this.shadowIsCube__) {
			this.constBits |= 64;
		}
		var v = this.smode__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("smode" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 7;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.shadowMap__;
		case 2:
			return this.shadowMapCube__;
		case 3:
			return this.shadowIsCube__;
		case 4:
			return this.smode__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_Slides.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.shadowMap__ = this.shadowMap__;
		s.shadowMapCube__ = this.shadowMapCube__;
		s.shadowIsCube__ = this.shadowIsCube__;
		s.smode__ = this.smode__;
		return s;
	}
	,__class__: h3d_shader_pbr_Slides
});
var h3d_shader_pbr_ToneMapping = function() {
	this.e__ = 0;
	this.d__ = 0;
	this.c__ = 0;
	this.b__ = 0;
	this.a__ = 0;
	this.invGamma__ = 0;
	this.mode__ = 0;
	this.exposureExp__ = 0;
	h3d_shader_ScreenShader.call(this);
	this.set_exposure(0);
	this.set_gamma(2.0);
	this.a__ = 2.51;
	this.b__ = 0.03;
	this.c__ = 2.43;
	this.d__ = 0.59;
	this.e__ = 0.14;
};
$hxClasses["h3d.shader.pbr.ToneMapping"] = h3d_shader_pbr_ToneMapping;
h3d_shader_pbr_ToneMapping.__name__ = "h3d.shader.pbr.ToneMapping";
h3d_shader_pbr_ToneMapping.__super__ = h3d_shader_ScreenShader;
h3d_shader_pbr_ToneMapping.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	set_exposure: function(v) {
		this.exposureExp__ = Math.exp(v);
		return this.exposure = v;
	}
	,set_gamma: function(v) {
		this.invGamma__ = 1.0 / v;
		return this.gamma = v;
	}
	,get_hdrTexture: function() {
		return this.hdrTexture__;
	}
	,set_hdrTexture: function(_v) {
		return this.hdrTexture__ = _v;
	}
	,get_exposureExp: function() {
		return this.exposureExp__;
	}
	,set_exposureExp: function(_v) {
		return this.exposureExp__ = _v;
	}
	,get_isSRBG: function() {
		return this.isSRBG__;
	}
	,set_isSRBG: function(_v) {
		this.constModified = true;
		return this.isSRBG__ = _v;
	}
	,get_mode: function() {
		return this.mode__;
	}
	,set_mode: function(_v) {
		this.constModified = true;
		return this.mode__ = _v;
	}
	,get_invGamma: function() {
		return this.invGamma__;
	}
	,set_invGamma: function(_v) {
		return this.invGamma__ = _v;
	}
	,get_a: function() {
		return this.a__;
	}
	,set_a: function(_v) {
		return this.a__ = _v;
	}
	,get_b: function() {
		return this.b__;
	}
	,set_b: function(_v) {
		return this.b__ = _v;
	}
	,get_c: function() {
		return this.c__;
	}
	,set_c: function(_v) {
		return this.c__ = _v;
	}
	,get_d: function() {
		return this.d__;
	}
	,set_d: function(_v) {
		return this.d__ = _v;
	}
	,get_e: function() {
		return this.e__;
	}
	,set_e: function(_v) {
		return this.e__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isSRBG__) {
			this.constBits |= 1;
		}
		var v = this.mode__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("mode" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 1;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.hdrTexture__;
		case 2:
			return this.exposureExp__;
		case 3:
			return this.isSRBG__;
		case 4:
			return this.mode__;
		case 5:
			return this.invGamma__;
		case 6:
			return this.a__;
		case 7:
			return this.b__;
		case 8:
			return this.c__;
		case 9:
			return this.d__;
		case 10:
			return this.e__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 2:
			return this.exposureExp__;
		case 5:
			return this.invGamma__;
		case 6:
			return this.a__;
		case 7:
			return this.b__;
		case 8:
			return this.c__;
		case 9:
			return this.d__;
		case 10:
			return this.e__;
		default:
		}
		return 0.;
	}
	,clone: function() {
		var s = Object.create(h3d_shader_pbr_ToneMapping.prototype);
		s.shader = this.shader;
		s.flipY__ = this.flipY__;
		s.hdrTexture__ = this.hdrTexture__;
		s.exposureExp__ = this.exposureExp__;
		s.isSRBG__ = this.isSRBG__;
		s.mode__ = this.mode__;
		s.invGamma__ = this.invGamma__;
		s.a__ = this.a__;
		s.b__ = this.b__;
		s.c__ = this.c__;
		s.d__ = this.d__;
		s.e__ = this.e__;
		return s;
	}
	,__class__: h3d_shader_pbr_ToneMapping
});
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(typeof(window) != "undefined") {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(rqf != null) {
			rqf(haxe_EntryPoint.run);
		} else if(nextTick >= 0) {
			setTimeout(haxe_EntryPoint.run,nextTick * 1000);
		}
	} else if(nextTick >= 0) {
		setTimeout(haxe_EntryPoint.run,nextTick * 1000);
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	stop: function() {
		if(this.f == null) {
			return;
		}
		this.f = null;
		this.nextRun = -Infinity;
		if(this.prev == null) {
			haxe_MainLoop.pending = this.next;
		} else {
			this.prev.next = this.next;
		}
		if(this.next != null) {
			this.next.prev = this.prev;
		}
	}
	,__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw haxe_Exception.thrown("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = HxOverrides.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		return new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = "haxe.crypto.Crc32";
haxe_crypto_Crc32.make = function(data) {
	var c_crc = -1;
	var b = data.b.bufferValue;
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var i = _g++;
		var tmp = (c_crc ^ b.bytes[i]) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		c_crc = c_crc >>> 8 ^ tmp;
	}
	return c_crc ^ -1;
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.make = function(b) {
	var h = new haxe_crypto_Md5().doEncode(haxe_crypto_Md5.bytes2blks(b));
	var out = new haxe_io_Bytes(new ArrayBuffer(16));
	var p = 0;
	out.b[p++] = h[0] & 255;
	out.b[p++] = h[0] >> 8 & 255;
	out.b[p++] = h[0] >> 16 & 255;
	out.b[p++] = h[0] >>> 24;
	out.b[p++] = h[1] & 255;
	out.b[p++] = h[1] >> 8 & 255;
	out.b[p++] = h[1] >> 16 & 255;
	out.b[p++] = h[1] >>> 24;
	out.b[p++] = h[2] & 255;
	out.b[p++] = h[2] >> 8 & 255;
	out.b[p++] = h[2] >> 16 & 255;
	out.b[p++] = h[2] >>> 24;
	out.b[p++] = h[3] & 255;
	out.b[p++] = h[3] >> 8 & 255;
	out.b[p++] = h[3] >> 16 & 255;
	out.b[p++] = h[3] >>> 24;
	return out;
};
haxe_crypto_Md5.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	while(i < b.length) {
		blks[i >> 2] |= b.b[i] << (((b.length << 3) + i & 3) << 3);
		++i;
	}
	blks[i >> 2] |= 128 << (b.length * 8 + i) % 4 * 8;
	var l = b.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds_Vector = {};
haxe_ds_Vector.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i = srcPos;
			var j = destPos;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var k = _g++;
				src[j] = src[i];
				++i;
				++j;
			}
		}
	} else {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			dest[destPos + i] = src[srcPos + i];
		}
	}
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
$hxClasses["haxe.http.HttpBase"] = haxe_http_HttpBase;
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	setParameter: function(name,value) {
		var _g = 0;
		var _g1 = this.params.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.params[i].name == name) {
				this.params[i] = { name : name, value : value};
				return;
			}
		}
		this.params.push({ name : name, value : value});
	}
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return $bind(this,this.onData) != this.emptyOnData;
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
$hxClasses["haxe.http.HttpJs"] = haxe_http_HttpJs;
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		this.responseHeaders = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s == 0 && js_Browser.get_supported() && $global.location != null) {
				var protocol = $global.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				var headers = r.getAllResponseHeaders().split("\r\n");
				var _g = [];
				var _g1 = 0;
				var _g2 = headers;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v != "") {
						_g.push(v);
					}
				}
				headers = _g;
				var onreadystatechange = new haxe_ds_StringMap();
				_gthis.responseHeaders = onreadystatechange;
				var _g = 0;
				while(_g < headers.length) {
					var hline = headers[_g];
					++_g;
					var a = hline.split(": ");
					var hname = a.shift();
					var hval = a.length == 1 ? a[0] : a.join(": ");
					hval = StringTools.ltrim(StringTools.rtrim(hval));
					_gthis.responseHeaders.h[hname] = hval;
				}
				_gthis.success(haxe_io_Bytes.ofData(r.response));
			} else if(s == null || s == 0 && r.response == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
				_gthis.responseBytes = onreadystatechange;
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					var onreadystatechange = r.response != null ? haxe_io_Bytes.ofData(r.response) : null;
					_gthis.responseBytes = onreadystatechange;
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postData;
		var _g1 = this.postBytes;
		if(_g == null) {
			if(_g1 == null) {
				uri = null;
			} else {
				var bytes = _g1;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g1 == null) {
			var str = _g;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g = 0;
			var _g1 = this.params;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				if(uri == null) {
					uri = "";
				} else {
					uri = (uri == null ? "null" : Std.string(uri)) + "&";
				}
				var s = p.name;
				var uri1 = (uri == null ? "null" : Std.string(uri)) + encodeURIComponent(s) + "=";
				var s1 = p.value;
				uri = uri1 + encodeURIComponent(s1);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + (uri == null ? "null" : Std.string(uri)),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			this.req = null;
			this.onError(e.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			r.setRequestHeader(h.name,h.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addInt32: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	,addInt64: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setInt32(this.pos,v.low,true);
		this.view.setInt32(this.pos + 4,v.high,true);
		this.pos += 8;
	}
	,addFloat: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	,addDouble: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,close: function() {
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,readLine: function() {
		var buf = new haxe_io_BytesBuffer();
		var last;
		var s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				var e = _g1;
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,flush: function() {
	}
	,close: function() {
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="Custom",$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g_offset = 0;
	var _g_s = tmp;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__:"haxe.macro.Binop",__constructs__:null
	,OpAdd: {_hx_name:"OpAdd",_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_name:"OpMult",_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_name:"OpDiv",_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_name:"OpSub",_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_name:"OpAssign",_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_name:"OpEq",_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_name:"OpNotEq",_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_name:"OpGt",_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_name:"OpGte",_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_name:"OpLt",_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_name:"OpLte",_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_name:"OpAnd",_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_name:"OpOr",_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_name:"OpXor",_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_name:"OpBoolAnd",_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_name:"OpBoolOr",_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_name:"OpShl",_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_name:"OpShr",_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_name:"OpUShr",_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_name:"OpMod",_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr,__params__:function(){ return [this.op];}}; },$_._hx_name="OpAssignOp",$_)
	,OpInterval: {_hx_name:"OpInterval",_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_name:"OpArrow",_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_name:"OpIn",_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNullCoal: {_hx_name:"OpNullCoal",_hx_index:24,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpAssignOp,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn,haxe_macro_Binop.OpNullCoal];
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn,haxe_macro_Binop.OpNullCoal];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__:"haxe.macro.Unop",__constructs__:null
	,OpIncrement: {_hx_name:"OpIncrement",_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_name:"OpDecrement",_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_name:"OpNot",_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_name:"OpNeg",_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_name:"OpNegBits",_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpSpread: {_hx_name:"OpSpread",_hx_index:5,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits,haxe_macro_Unop.OpSpread];
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits,haxe_macro_Unop.OpSpread];
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	return x;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml_Access = {};
haxe_xml_Access.get_innerHTML = function(this1) {
	var s_b = "";
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
	}
	var _g_current = 0;
	var _g_array = this1.children;
	while(_g_current < _g_array.length) {
		var x = _g_array[_g_current++];
		s_b += Std.string(haxe_xml_Printer.print(x));
	}
	return s_b;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Compress = function() { };
$hxClasses["haxe.zip.Compress"] = haxe_zip_Compress;
haxe_zip_Compress.__name__ = "haxe.zip.Compress";
haxe_zip_Compress.run = function(s,level) {
	throw new haxe_exceptions_NotImplementedException("Not implemented for this platform",null,{ fileName : "haxe/zip/Compress.hx", lineNumber : 39, className : "haxe.zip.Compress", methodName : "run"});
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:"haxe.zip.Huffman",__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr,__params__:function(){ return [this.i];}}; },$_._hx_name="Found",$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr,__params__:function(){ return [this.left,this.right];}}; },$_._hx_name="NeedBit",$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr,__params__:function(){ return [this.n,this.table];}}; },$_._hx_name="NeedBits",$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			return 0;
		case 1:
			var a = t.left;
			var b = t.right;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var a = t.left;
				var b = t.right;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var a = t.left;
			var b = t.right;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:"haxe.zip._InflateImpl.State",__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var a = h.left;
			var b = h.right;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var n = h.n;
			var tbl = h.table;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = "haxe.zip.Uncompress";
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxbit_ConvertField = function(path,from,to) {
	this.path = path;
	this.from = from;
	this.to = to;
};
$hxClasses["hxbit.ConvertField"] = hxbit_ConvertField;
hxbit_ConvertField.__name__ = "hxbit.ConvertField";
hxbit_ConvertField.prototype = {
	__class__: hxbit_ConvertField
};
var hxbit_Convert = function(classPath,ourSchema,schema) {
	var ourMap_h = Object.create(null);
	var _g = 0;
	var _g1 = ourSchema.fieldsNames.length;
	while(_g < _g1) {
		var i = _g++;
		ourMap_h[ourSchema.fieldsNames[i]] = ourSchema.fieldsTypes[i];
	}
	this.read = [];
	this.hadCID = !schema.isFinal;
	this.hasCID = !ourSchema.isFinal;
	var map_h = Object.create(null);
	var _g = 0;
	var _g1 = schema.fieldsNames.length;
	while(_g < _g1) {
		var i = _g++;
		var oldT = schema.fieldsTypes[i];
		var newT = ourMap_h[schema.fieldsNames[i]];
		var c = new hxbit_ConvertField(classPath + "." + schema.fieldsNames[i],oldT,newT);
		if(newT != null) {
			if(hxbit_Convert.sameType(oldT,newT)) {
				c.same = true;
			} else {
				c.conv = hxbit_Convert.convFuns.h[c.path];
				c.defaultValue = hxbit_Convert.getDefault(newT);
			}
		}
		c.index = this.read.length;
		this.read.push(c);
		map_h[schema.fieldsNames[i]] = c;
	}
	this.write = [];
	var _g = 0;
	var _g1 = ourSchema.fieldsNames.length;
	while(_g < _g1) {
		var i = _g++;
		var newT = ourSchema.fieldsTypes[i];
		var c = map_h[ourSchema.fieldsNames[i]];
		if(c == null) {
			c = new hxbit_ConvertField(null,null,newT);
			c.defaultValue = hxbit_Convert.getDefault(newT);
		} else {
			c.written = true;
		}
		this.write.push(c);
	}
};
$hxClasses["hxbit.Convert"] = hxbit_Convert;
hxbit_Convert.__name__ = "hxbit.Convert";
hxbit_Convert.sameType = function(a,b) {
	switch(a._hx_index) {
	case 0:
		switch(b._hx_index) {
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		case 16:
			return true;
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 7:
		var _gk = a.k;
		var _gv = a.v;
		switch(b._hx_index) {
		case 7:
			var bk = b.k;
			var bv = b.v;
			var av = _gv;
			var ak = _gk;
			if(hxbit_Convert.sameType(ak,bk)) {
				return hxbit_Convert.sameType(av,bv);
			} else {
				return false;
			}
			break;
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 8:
		var _gk = a.k;
		switch(b._hx_index) {
		case 8:
			var b1 = b.k;
			var a1 = _gk;
			return hxbit_Convert.sameType(a1,b1);
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 9:
		var _gfields = a.fields;
		switch(b._hx_index) {
		case 9:
			var fb = b.fields;
			var fa = _gfields;
			if(fa.length != fb.length) {
				return false;
			}
			var _g = 0;
			var _g1 = fa.length;
			while(_g < _g1) {
				var i = _g++;
				var a1 = fa[i];
				var b1 = fb[i];
				if(a1.name != b1.name || a1.opt != b1.opt || !hxbit_Convert.sameType(a1.type,b1.type)) {
					return false;
				}
			}
			return true;
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 10:
		var _gk = a.k;
		if(b._hx_index == 10) {
			var b1 = b.k;
			var a1 = _gk;
			return hxbit_Convert.sameType(a1,b1);
		} else {
			var a1 = _gk;
			return hxbit_Convert.sameType(a1,b);
		}
		break;
	case 11:
		var _gk = a.k;
		switch(b._hx_index) {
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		case 11:
			var b1 = b.k;
			var a1 = _gk;
			return hxbit_Convert.sameType(a1,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 12:
		var _gt = a.t;
		switch(b._hx_index) {
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		case 12:
			var b1 = b.t;
			var a1 = _gt;
			return hxbit_Convert.sameType(a1,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 16:
		switch(b._hx_index) {
		case 0:
			return true;
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		default:
			return Type.enumEq(a,b);
		}
		break;
	default:
		if(b._hx_index == 10) {
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		} else {
			return Type.enumEq(a,b);
		}
	}
};
hxbit_Convert.getDefault = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:
		return 0.;
	case 2:
		return false;
	case 5:
		return null;
	case 6:
		return null;
	case 7:
		var k = t.k;
		switch(k._hx_index) {
		case 0:
			return new haxe_ds_IntMap();
		case 3:
			return new haxe_ds_StringMap();
		default:
			return new haxe_ds_ObjectMap();
		}
		break;
	case 8:
		return [];
	case 9:
		return null;
	case 10:
		var t1 = t.k;
		return hxbit_Convert.getDefault(t1);
	case 11:
		return new Array(0);
	case 12:
		return null;
	case 15:
		return new haxe__$Int64__$_$_$Int64(0,0);
	case 16:
		return 0;
	case 3:case 4:case 13:case 14:case 17:
		return null;
	case 18:
		return null;
	case 19:
		return null;
	case 20:
		var t1 = t.k;
		return hxbit_Convert.getDefault(t1);
	}
};
hxbit_Convert.registerConverter = function(path,f) {
	hxbit_Convert.convFuns.h[path] = f;
};
hxbit_Convert.prototype = {
	toString: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.write.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var w = this.write[i];
			if(w.from == null) {
				_g.push("insert:" + Std.string(w.defaultValue));
			} else if(w.same) {
				_g.push(i == w.index ? "s" : "@" + w.index);
			} else {
				_g.push("@" + w.index + ":" + Std.string(w.to));
			}
		}
		return _g.toString();
	}
	,__class__: hxbit_Convert
};
var hxbit_EnumConvert = function(classPath,ourSchema,schema) {
	this.enumClass = classPath;
	this.reindex = [];
	this.constructs = [];
	var _g_current = 0;
	var _g_array = schema.fieldsNames;
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var index = _g_key;
		var name = _g_value;
		var found = false;
		var from = schema.fieldsTypes[index];
		var _g_current1 = 0;
		var _g_array1 = ourSchema.fieldsNames;
		while(_g_current1 < _g_array1.length) {
			var _g_value1 = _g_array1[_g_current1];
			var _g_key1 = _g_current1++;
			var i = _g_key1;
			var s = _g_value1;
			if(s == name) {
				this.reindex.push(i);
				var to = ourSchema.fieldsTypes[i];
				if(to == null && from == null && i == index) {
					this.constructs.push(null);
				} else {
					this.constructs.push(new hxbit_Convert(classPath + "." + name,this.makeSchema(to),this.makeSchema(from)));
				}
				found = true;
				break;
			}
		}
		if(!found) {
			this.reindex.push(-1);
			this.constructs.push(new hxbit_Convert(classPath + "." + name,this.makeSchema(null),this.makeSchema(from)));
		}
	}
};
$hxClasses["hxbit.EnumConvert"] = hxbit_EnumConvert;
hxbit_EnumConvert.__name__ = "hxbit.EnumConvert";
hxbit_EnumConvert.prototype = {
	makeSchema: function(t) {
		var s = new hxbit_Schema();
		if(t != null) {
			if(t._hx_index == 9) {
				var fields = t.fields;
				var _g_current = 0;
				var _g_array = fields;
				while(_g_current < _g_array.length) {
					var _g_value = _g_array[_g_current];
					var _g_key = _g_current++;
					var i = _g_key;
					var f = _g_value;
					s.fieldsTypes.push(f.type);
					s.fieldsNames.push("@" + i);
				}
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		return s;
	}
	,__class__: hxbit_EnumConvert
};
var hxbit_AnySerializable = function() { };
$hxClasses["hxbit.AnySerializable"] = hxbit_AnySerializable;
hxbit_AnySerializable.__name__ = "hxbit.AnySerializable";
hxbit_AnySerializable.__isInterface__ = true;
var hxbit_CustomSerializable = function() { };
$hxClasses["hxbit.CustomSerializable"] = hxbit_CustomSerializable;
hxbit_CustomSerializable.__name__ = "hxbit.CustomSerializable";
hxbit_CustomSerializable.__isInterface__ = true;
hxbit_CustomSerializable.__interfaces__ = [hxbit_AnySerializable];
hxbit_CustomSerializable.prototype = {
	__class__: hxbit_CustomSerializable
};
var hxbit_RpcMode = $hxEnums["hxbit.RpcMode"] = { __ename__:"hxbit.RpcMode",__constructs__:null
	,All: {_hx_name:"All",_hx_index:0,__enum__:"hxbit.RpcMode",toString:$estr}
	,Clients: {_hx_name:"Clients",_hx_index:1,__enum__:"hxbit.RpcMode",toString:$estr}
	,Server: {_hx_name:"Server",_hx_index:2,__enum__:"hxbit.RpcMode",toString:$estr}
	,Owner: {_hx_name:"Owner",_hx_index:3,__enum__:"hxbit.RpcMode",toString:$estr}
	,Immediate: {_hx_name:"Immediate",_hx_index:4,__enum__:"hxbit.RpcMode",toString:$estr}
};
hxbit_RpcMode.__constructs__ = [hxbit_RpcMode.All,hxbit_RpcMode.Clients,hxbit_RpcMode.Server,hxbit_RpcMode.Owner,hxbit_RpcMode.Immediate];
hxbit_RpcMode.__empty_constructs__ = [hxbit_RpcMode.All,hxbit_RpcMode.Clients,hxbit_RpcMode.Server,hxbit_RpcMode.Owner,hxbit_RpcMode.Immediate];
var hxbit_PropTypeDesc = $hxEnums["hxbit.PropTypeDesc"] = { __ename__:"hxbit.PropTypeDesc",__constructs__:null
	,PInt: {_hx_name:"PInt",_hx_index:0,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PFloat: {_hx_name:"PFloat",_hx_index:1,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PBool: {_hx_name:"PBool",_hx_index:2,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PString: {_hx_name:"PString",_hx_index:3,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PBytes: {_hx_name:"PBytes",_hx_index:4,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PSerializable: ($_=function(name) { return {_hx_index:5,name:name,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.name];}}; },$_._hx_name="PSerializable",$_)
	,PEnum: ($_=function(name) { return {_hx_index:6,name:name,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.name];}}; },$_._hx_name="PEnum",$_)
	,PMap: ($_=function(k,v) { return {_hx_index:7,k:k,v:v,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.k,this.v];}}; },$_._hx_name="PMap",$_)
	,PArray: ($_=function(k) { return {_hx_index:8,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.k];}}; },$_._hx_name="PArray",$_)
	,PObj: ($_=function(fields) { return {_hx_index:9,fields:fields,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.fields];}}; },$_._hx_name="PObj",$_)
	,PAlias: ($_=function(k) { return {_hx_index:10,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.k];}}; },$_._hx_name="PAlias",$_)
	,PVector: ($_=function(k) { return {_hx_index:11,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.k];}}; },$_._hx_name="PVector",$_)
	,PNull: ($_=function(t) { return {_hx_index:12,t:t,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.t];}}; },$_._hx_name="PNull",$_)
	,PUnknown: {_hx_name:"PUnknown",_hx_index:13,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PDynamic: {_hx_name:"PDynamic",_hx_index:14,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PInt64: {_hx_name:"PInt64",_hx_index:15,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PFlags: ($_=function(t) { return {_hx_index:16,t:t,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.t];}}; },$_._hx_name="PFlags",$_)
	,PCustom: {_hx_name:"PCustom",_hx_index:17,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PSerInterface: ($_=function(name) { return {_hx_index:18,name:name,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.name];}}; },$_._hx_name="PSerInterface",$_)
	,PStruct: ($_=function(name,fields) { return {_hx_index:19,name:name,fields:fields,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.name,this.fields];}}; },$_._hx_name="PStruct",$_)
	,PAliasCDB: ($_=function(k) { return {_hx_index:20,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr,__params__:function(){ return [this.k];}}; },$_._hx_name="PAliasCDB",$_)
};
hxbit_PropTypeDesc.__constructs__ = [hxbit_PropTypeDesc.PInt,hxbit_PropTypeDesc.PFloat,hxbit_PropTypeDesc.PBool,hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PBytes,hxbit_PropTypeDesc.PSerializable,hxbit_PropTypeDesc.PEnum,hxbit_PropTypeDesc.PMap,hxbit_PropTypeDesc.PArray,hxbit_PropTypeDesc.PObj,hxbit_PropTypeDesc.PAlias,hxbit_PropTypeDesc.PVector,hxbit_PropTypeDesc.PNull,hxbit_PropTypeDesc.PUnknown,hxbit_PropTypeDesc.PDynamic,hxbit_PropTypeDesc.PInt64,hxbit_PropTypeDesc.PFlags,hxbit_PropTypeDesc.PCustom,hxbit_PropTypeDesc.PSerInterface,hxbit_PropTypeDesc.PStruct,hxbit_PropTypeDesc.PAliasCDB];
hxbit_PropTypeDesc.__empty_constructs__ = [hxbit_PropTypeDesc.PInt,hxbit_PropTypeDesc.PFloat,hxbit_PropTypeDesc.PBool,hxbit_PropTypeDesc.PString,hxbit_PropTypeDesc.PBytes,hxbit_PropTypeDesc.PUnknown,hxbit_PropTypeDesc.PDynamic,hxbit_PropTypeDesc.PInt64,hxbit_PropTypeDesc.PCustom];
var hxbit__$Macros_Condition = $hxEnums["hxbit._Macros.Condition"] = { __ename__:"hxbit._Macros.Condition",__constructs__:null
	,PartialResolution: {_hx_name:"PartialResolution",_hx_index:0,__enum__:"hxbit._Macros.Condition",toString:$estr}
	,PreventCDB: {_hx_name:"PreventCDB",_hx_index:1,__enum__:"hxbit._Macros.Condition",toString:$estr}
};
hxbit__$Macros_Condition.__constructs__ = [hxbit__$Macros_Condition.PartialResolution,hxbit__$Macros_Condition.PreventCDB];
hxbit__$Macros_Condition.__empty_constructs__ = [hxbit__$Macros_Condition.PartialResolution,hxbit__$Macros_Condition.PreventCDB];
var hxbit_Macros = function() { };
$hxClasses["hxbit.Macros"] = hxbit_Macros;
hxbit_Macros.__name__ = "hxbit.Macros";
hxbit_Macros.initVisibility = function(vis) {
	hxbit_Macros.VISIBILITY_VALUES = vis;
};
hxbit_Macros.makeEnumPath = function(name) {
	name = name.split(".").join("_");
	name = name.charAt(0).toUpperCase() + HxOverrides.substr(name,1,null);
	return "hxbit.enumSer." + name;
};
hxbit_Macros.iterType = function(t,f) {
	switch(t._hx_index) {
	case 7:
		var k = t.k;
		var v = t.v;
		f(k);
		f(v);
		break;
	case 8:
		var t1 = t.k;
		f(t1);
		break;
	case 9:
		var fields = t.fields;
		var _g = 0;
		while(_g < fields.length) {
			var tf = fields[_g];
			++_g;
			f(tf.type);
		}
		break;
	case 10:
		var t1 = t.k;
		f(t1);
		break;
	case 11:
		var t1 = t.k;
		f(t1);
		break;
	case 12:
		var t1 = t.t;
		f(t1);
		break;
	case 20:
		var t1 = t.k;
		f(t1);
		break;
	default:
	}
};
var hxbit_Serializable = function() { };
$hxClasses["hxbit.Serializable"] = hxbit_Serializable;
hxbit_Serializable.__name__ = "hxbit.Serializable";
hxbit_Serializable.__isInterface__ = true;
hxbit_Serializable.__interfaces__ = [hxbit_AnySerializable];
hxbit_Serializable.prototype = {
	__class__: hxbit_Serializable
};
var hxbit_Serializer = function() {
	this.enumConvert = new haxe_ds_StringMap();
	this.usedEnums = new haxe_ds_StringMap();
	this.usedClasses = [];
	if(hxbit_Serializer.CLIDS == null) {
		hxbit_Serializer.initClassIDS();
	}
};
$hxClasses["hxbit.Serializer"] = hxbit_Serializer;
hxbit_Serializer.__name__ = "hxbit.Serializer";
hxbit_Serializer.resetCounters = function() {
	hxbit_Serializer.UID = 0;
	hxbit_Serializer.SEQ = 0;
};
hxbit_Serializer.allocUID = function() {
	return hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
};
hxbit_Serializer.registerClass = function(c) {
	if(hxbit_Serializer.CLIDS != null) {
		throw haxe_Exception.thrown("Too late to register class");
	}
	var idx = hxbit_Serializer.CLASSES.length;
	hxbit_Serializer.CLASSES.push(c);
	return idx;
};
hxbit_Serializer.hash = function(name) {
	var v = 1;
	var _g = 0;
	var _g1 = name.length;
	while(_g < _g1) {
		var i = _g++;
		v = v * 223 + name.charCodeAt(i) | 0;
	}
	v = 1 + (v & 1073741823) % 65423;
	return v;
};
hxbit_Serializer.initClassIDS = function() {
	var cl = hxbit_Serializer.CLASSES;
	var _g = [];
	var _g1 = 0;
	while(_g1 < cl.length) {
		var c = cl[_g1];
		++_g1;
		_g.push([]);
	}
	var subClasses = _g;
	var isSub = [];
	var _g = 0;
	var _g1 = cl.length;
	while(_g < _g1) {
		var i = _g++;
		var c = cl[i];
		while(true) {
			c = c.__super__;
			if(c == null) {
				break;
			}
			var idx = cl.indexOf(c);
			if(idx < 0) {
				break;
			}
			subClasses[idx].push(i);
			isSub[i] = true;
		}
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = hxbit_Serializer.CLASSES.length;
	while(_g1 < _g2) {
		var i = _g1++;
		if(subClasses[i].length == 0 && !isSub[i]) {
			_g.push(0);
		} else {
			var name = cl[i].__name__;
			var v = 1;
			var _g3 = 0;
			var _g4 = name.length;
			while(_g3 < _g4) {
				var i1 = _g3++;
				v = v * 223 + name.charCodeAt(i1) | 0;
			}
			v = 1 + (v & 1073741823) % 65423;
			_g.push(v);
		}
	}
	hxbit_Serializer.CLIDS = _g;
	hxbit_Serializer.CL_BYID = [];
	var _g = 0;
	var _g1 = hxbit_Serializer.CLIDS.length;
	while(_g < _g1) {
		var i = _g++;
		var cid = hxbit_Serializer.CLIDS[i];
		if(cid == 0) {
			continue;
		}
		if(hxbit_Serializer.CL_BYID[cid] != null) {
			var c = hxbit_Serializer.CL_BYID[cid];
			throw haxe_Exception.thrown("Conflicting CLID between " + c.__name__ + " and " + cl[i].__name__);
		}
		hxbit_Serializer.CL_BYID[cid] = cl[i];
	}
};
hxbit_Serializer.getSignature = function() {
	if(hxbit_Serializer.__SIGN != null) {
		return hxbit_Serializer.__SIGN;
	}
	var s = new hxbit_Serializer();
	s.begin();
	s.addInt(hxbit_Serializer.CLASSES.length);
	var _g = 0;
	var _g1 = hxbit_Serializer.CLASSES.length;
	while(_g < _g1) {
		var i = _g++;
		s.addInt(hxbit_Serializer.CLIDS[i]);
		s.addInt32(Object.create(hxbit_Serializer.CLASSES[i].prototype).getSerializeSchema().get_checkSum());
	}
	return hxbit_Serializer.__SIGN = haxe_crypto_Md5.make(s.end());
};
hxbit_Serializer.isClassFinal = function(index) {
	return hxbit_Serializer.CLIDS[index] == 0;
};
hxbit_Serializer.getEnumClass = function(name) {
	var cl = hxbit_Serializer.ENUM_CLASSES.h[name];
	if(cl != null) {
		return cl;
	}
	var path = name.split(".").join("_");
	path = path.charAt(0).toUpperCase() + HxOverrides.substr(path,1,null);
	cl = $hxClasses["hxbit.enumSer." + path];
	if(cl != null) {
		hxbit_Serializer.ENUM_CLASSES.h[name] = cl;
	}
	return cl;
};
hxbit_Serializer.save = function(value) {
	var s = new hxbit_Serializer();
	s.beginSave();
	s.addKnownRef(value);
	return s.endSave();
};
hxbit_Serializer.sortByUID = function(o1,o2) {
	return o1.__uid - o2.__uid;
};
hxbit_Serializer.sortByUIDDesc = function(o1,o2) {
	return o2.__uid - o1.__uid;
};
hxbit_Serializer.load = function(bytes,cl,iterObjects,remapIds) {
	var s = new hxbit_Serializer();
	s.set_remapIds(remapIds);
	s.beginLoad(bytes);
	var value = s.getRef(cl,cl.__clid);
	s.endLoad();
	if(iterObjects != null) {
		var _g = [];
		var o = s.refs.iterator();
		while(o.hasNext()) {
			var o1 = o.next();
			_g.push(o1);
		}
		var objects = _g;
		objects.sort(hxbit_Serializer.sortByUID);
		var _g = 0;
		while(_g < objects.length) {
			var o = objects[_g];
			++_g;
			iterObjects(o);
		}
	}
	return value;
};
hxbit_Serializer.prototype = {
	set_remapIds: function(b) {
		this.remapObjs = b ? new haxe_ds_ObjectMap() : null;
		return b;
	}
	,get_remapIds: function() {
		return this.remapObjs != null;
	}
	,remap: function(s) {
		if(this.remapObjs.h.__keys__[s.__id__] != null) {
			return;
		}
		this.remapObjs.set(s,s.__uid);
		s.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	}
	,begin: function() {
		this.out = new haxe_io_BytesBuffer();
		this.refs = new haxe_ds_IntMap();
	}
	,end: function() {
		var bytes = this.out.getBytes();
		this.out = null;
		this.refs = null;
		return bytes;
	}
	,setInput: function(data,pos) {
		this.input = data;
		this.inPos = pos;
		if(this.refs == null) {
			this.refs = new haxe_ds_IntMap();
		}
	}
	,serialize: function(s) {
		this.begin();
		this.addKnownRef(s);
		return this.out.getBytes();
	}
	,unserialize: function(data,c,startPos) {
		if(startPos == null) {
			startPos = 0;
		}
		this.refs = new haxe_ds_IntMap();
		this.setInput(data,startPos);
		return this.getRef(c,c.__clid);
	}
	,getByte: function() {
		return this.input.b[this.inPos++];
	}
	,addByte: function(v) {
		this.out.addByte(v);
	}
	,addUID: function(v) {
		this.addInt(v);
	}
	,getUID: function() {
		return this.getInt();
	}
	,addInt: function(v) {
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
	}
	,addInt32: function(v) {
		this.out.addInt32(v);
	}
	,addInt64: function(v) {
		this.out.addInt64(v);
	}
	,addFloat: function(v) {
		this.out.addFloat(v);
	}
	,addDouble: function(v) {
		this.out.addDouble(v);
	}
	,addBool: function(v) {
		this.out.addByte(v ? 1 : 0);
	}
	,addArray: function(a,f) {
		if(a == null) {
			this.addByte(0);
			return;
		}
		this.addInt(a.length + 1);
		var _g = 0;
		while(_g < a.length) {
			var v = a[_g];
			++_g;
			f(v);
		}
	}
	,addVector: function(a,f) {
		if(a == null) {
			this.addByte(0);
			return;
		}
		this.addInt(a.length + 1);
		var _g = 0;
		while(_g < a.length) {
			var v = a[_g];
			++_g;
			f(v);
		}
	}
	,getArray: function(f) {
		var len = this.getInt();
		if(len == 0) {
			return null;
		}
		--len;
		var a = [];
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			a[i] = f();
		}
		return a;
	}
	,getVector: function(f) {
		var len = this.getInt();
		if(len == 0) {
			return null;
		}
		--len;
		var a = new Array(len);
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			a[i] = f();
		}
		return a;
	}
	,addMap: function(a,fk,ft) {
		if(a == null) {
			this.addByte(0);
			return;
		}
		var _g = [];
		var k = a.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			_g.push(k1);
		}
		var keys = _g;
		this.addInt(keys.length + 1);
		var _g = 0;
		while(_g < keys.length) {
			var k = keys[_g];
			++_g;
			fk(k);
			ft(a.get(k));
		}
	}
	,getBool: function() {
		return this.input.b[this.inPos++] != 0;
	}
	,getInt: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		return v;
	}
	,skip: function(size) {
		this.inPos += size;
	}
	,getInt32: function() {
		var v = this.input.getInt32(this.inPos);
		this.inPos += 4;
		return v;
	}
	,getInt64: function() {
		var v = this.input.getInt64(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getDouble: function() {
		var v = this.input.getDouble(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getFloat: function() {
		var v = this.input.getFloat(this.inPos);
		this.inPos += 4;
		return v;
	}
	,addString: function(s) {
		if(s == null) {
			this.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			this.addInt(b.length + 1);
			this.out.add(b);
		}
	}
	,addBytes: function(b) {
		if(b == null) {
			this.out.addByte(0);
		} else {
			this.addInt(b.length + 1);
			this.out.add(b);
		}
	}
	,addBytesSub: function(b,pos,len) {
		if(b == null) {
			this.out.addByte(0);
		} else {
			this.addInt(len + 1);
			this.out.addBytes(b,pos,len);
		}
	}
	,getString: function() {
		var len = this.getInt();
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.getString(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getBytes: function() {
		var len = this.getInt();
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.sub(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getDynamic: function() {
		var _g = this.input.b[this.inPos++];
		switch(_g) {
		case 0:
			return null;
		case 1:
			return false;
		case 2:
			return true;
		case 3:
			return this.getInt();
		case 4:
			var v = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v;
		case 5:
			var o = { };
			var _g1 = 0;
			var _g2 = this.getInt();
			while(_g1 < _g2) {
				var i = _g1++;
				o[this.getString()] = this.getDynamic();
			}
			return o;
		case 6:
			return this.getString();
		case 7:
			var _g1 = [];
			var _g2 = 0;
			var _g3 = this.getInt();
			while(_g2 < _g3) {
				var i = _g2++;
				_g1.push(this.getDynamic());
			}
			return _g1;
		case 8:
			return this.getBytes();
		case 9:
			var v = this.getAnyRef();
			return v;
		case 10:
			var ename = this.getString();
			var ser = hxbit_Serializer.getEnumClass(ename);
			if(ser == null) {
				throw haxe_Exception.thrown("Unsupported enum " + ename);
			}
			return ser.doUnserialize(this);
		default:
			var x = _g;
			throw haxe_Exception.thrown("Invalid dynamic prefix " + x);
		}
	}
	,addDynamic: function(v) {
		if(v == null) {
			this.addByte(0);
			return;
		}
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 1:
			this.addByte(3);
			this.addInt(v);
			break;
		case 2:
			this.addByte(4);
			this.addFloat(v);
			break;
		case 3:
			this.addByte(v ? 2 : 1);
			break;
		case 4:
			var fields = Reflect.fields(v);
			this.addByte(5);
			this.addInt(fields.length);
			var _g1 = 0;
			while(_g1 < fields.length) {
				var f = fields[_g1];
				++_g1;
				this.addString(f);
				this.addDynamic(Reflect.field(v,f));
			}
			break;
		case 6:
			var c = _g.c;
			switch(c) {
			case Array:
				this.addByte(7);
				var a = v;
				this.addInt(a.length);
				var _g1 = 0;
				while(_g1 < a.length) {
					var v1 = a[_g1];
					++_g1;
					this.addDynamic(v1);
				}
				break;
			case String:
				this.addByte(6);
				this.addString(v);
				break;
			case haxe_io_Bytes:
				this.addByte(8);
				this.addBytes(v);
				break;
			default:
				if(js_Boot.__implements(v,hxbit_Serializable)) {
					this.addByte(9);
					this.addAnyRef(v);
				} else {
					throw haxe_Exception.thrown("Unsupported dynamic " + Std.string(c));
				}
			}
			break;
		case 7:
			var e = _g.e;
			var ename = e.__ename__;
			var ser = hxbit_Serializer.getEnumClass(ename);
			if(ser == null) {
				throw haxe_Exception.thrown("Unsupported enum " + ename);
			}
			this.addByte(10);
			this.addString(ename);
			ser.doSerialize(this,v);
			break;
		default:
			var t = _g;
			throw haxe_Exception.thrown("Unsupported dynamic " + Std.string(t));
		}
	}
	,addCLID: function(clid) {
		this.out.addByte(clid >> 8);
		this.out.addByte(clid & 255);
	}
	,getCLID: function() {
		return this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
	}
	,addCustom: function(s) {
		if(s == null) {
			this.addByte(0);
			return;
		}
		this.addByte(3);
		var c = js_Boot.getClass(s);
		if(c == null) {
			throw haxe_Exception.thrown(Std.string(s) + " does not have a class ?");
		}
		this.addString(c.__name__);
		s.customSerialize(this);
		this.addByte(255);
	}
	,getCustom: function() {
		switch(this.input.b[this.inPos++]) {
		case 0:
			return null;
		case 3:
			var cname = this.getString();
			var cl = $hxClasses[cname];
			if(cl == null) {
				throw haxe_Exception.thrown("Missing struct class " + cname);
			}
			var s = Object.create(cl.prototype);
			s.customUnserialize(this);
			if(this.input.b[this.inPos++] != 255) {
				throw haxe_Exception.thrown("Invalid customUnserialize for " + Std.string(s));
			}
			return s;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,addObjRef: function(s) {
		this.addInt(s.__uid);
	}
	,getObjRef: function() {
		return this.getInt();
	}
	,addRef: function(s,forceCLID) {
		if(s == null) {
			this.addInt(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		var r = this.refs.h[s.__uid];
		if(r != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		if(forceCLID) {
			this.addCLID(index);
		} else {
			var clid = hxbit_Serializer.CLIDS[index];
			if(clid != 0) {
				this.addCLID(clid);
			}
		}
		s.serialize(this);
		this.onAddNewObject(s);
	}
	,addAnyRef: function(s) {
		if(s == null) {
			this.addInt(0);
		} else {
			if(this.remapObjs != null) {
				this.remap(s);
			}
			this.addObjRef(s);
			var r = this.refs.h[s.__uid];
			if(r == null) {
				this.refs.h[s.__uid] = s;
				var index = s.getCLID();
				this.usedClasses[index] = true;
				this.addCLID(index);
				s.serialize(this);
				this.onAddNewObject(s);
			}
		}
	}
	,addKnownRef: function(s) {
		if(s == null) {
			this.addInt(0);
		} else {
			if(this.remapObjs != null) {
				this.remap(s);
			}
			this.addObjRef(s);
			var r = this.refs.h[s.__uid];
			if(r == null) {
				this.refs.h[s.__uid] = s;
				var index = s.getCLID();
				this.usedClasses[index] = true;
				var clid = hxbit_Serializer.CLIDS[index];
				if(clid != 0) {
					this.addCLID(clid);
				}
				s.serialize(this);
				this.onAddNewObject(s);
			}
		}
	}
	,makeRef: function(id,clidx) {
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid && this.remapObjs == null) {
			hxbit_Serializer.UID = rid;
		}
		var i = Object.create(hxbit_Serializer.CLASSES[clidx].prototype);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.remapObjs != null) {
			this.remap(i);
		}
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		this.onNewObject(i);
		return i;
	}
	,onNewObject: function(i) {
	}
	,onAddNewObject: function(i) {
	}
	,getAnyRef: function() {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var clidx = this.getCLID();
		if(this.mapIndexes != null) {
			clidx = this.mapIndexes[clidx];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid && this.remapObjs == null) {
			hxbit_Serializer.UID = rid;
		}
		var i = Object.create(hxbit_Serializer.CLASSES[clidx].prototype);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.remapObjs != null) {
			this.remap(i);
		}
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		this.onNewObject(i);
		return i;
	}
	,getRef: function(c,clidx) {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		if(this.convert != null && this.convert[clidx] != null) {
			var conv = this.convert[clidx];
			if(conv.hadCID) {
				var realIdx = this.getCLID();
				if(conv.hasCID) {
					c = hxbit_Serializer.CL_BYID[realIdx];
					clidx = c.__clid;
				}
			}
		} else if(hxbit_Serializer.CLIDS[clidx] != 0) {
			var realIdx = this.getCLID();
			c = hxbit_Serializer.CL_BYID[realIdx];
			clidx = c.__clid;
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid && this.remapObjs == null) {
			hxbit_Serializer.UID = rid;
		}
		var i = Object.create(hxbit_Serializer.CLASSES[clidx].prototype);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.remapObjs != null) {
			this.remap(i);
		}
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		this.onNewObject(i);
		return i;
	}
	,getKnownRef: function(c) {
		return this.getRef(c,c.__clid);
	}
	,beginSave: function() {
		this.begin();
		this.usedClasses = [];
		this.usedEnums = new haxe_ds_StringMap();
	}
	,endSave: function(savePosition) {
		if(savePosition == null) {
			savePosition = 0;
		}
		var content = this.end();
		this.begin();
		var classes = [];
		var enums = [];
		var schemas = [];
		var sidx = hxbit_Serializer.CLASSES.indexOf(hxbit_Schema);
		var _g = 0;
		var _g1 = this.usedClasses.length;
		while(_g < _g1) {
			var i = _g++;
			if(!this.usedClasses[i] || i == sidx) {
				continue;
			}
			var c = hxbit_Serializer.CLASSES[i];
			var schema = Object.create(c.prototype).getSerializeSchema();
			schemas.push(schema);
			classes.push(i);
			this.addKnownRef(schema);
			this.refs.remove(schema.__uid);
		}
		var h = this.usedEnums.h;
		var name_h = h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			if(name == "hxbit.PropTypeDesc") {
				continue;
			}
			var schema = hxbit_Serializer.getEnumClass(name).getSchema();
			schemas.push(schema);
			this.addKnownRef(schema);
			this.refs.remove(schema.__uid);
			enums.push(name);
		}
		var schemaData = this.end();
		this.begin();
		this.out.addBytes(content,0,savePosition);
		this.addString("HXS");
		this.addByte(1);
		var _g = 0;
		var _g1 = classes.length;
		while(_g < _g1) {
			var i = _g++;
			var index = classes[i];
			var c = hxbit_Serializer.CLASSES[index];
			this.addString(c.__name__);
			this.addCLID(index);
			this.addInt32(schemas[i].get_checkSum());
		}
		var _g = 0;
		var _g1 = enums.length;
		while(_g < _g1) {
			var i = _g++;
			this.addString(enums[i]);
			this.addCLID(0);
			this.addInt32(schemas[i + classes.length].get_checkSum());
		}
		this.addString(null);
		this.addInt(schemaData.length);
		this.out.add(schemaData);
		this.out.addBytes(content,savePosition,content.length - savePosition);
		return this.end();
	}
	,beginLoad: function(bytes,position) {
		if(position == null) {
			position = 0;
		}
		this.setInput(bytes,position);
		var classByName_h = Object.create(null);
		var schemas = [];
		var enumSchemas = [];
		var mapIndexes = [];
		var indexes = [];
		var needConvert = false;
		var needReindex = false;
		var _g = 0;
		var _g1 = hxbit_Serializer.CLASSES.length;
		while(_g < _g1) {
			var i = _g++;
			var c = hxbit_Serializer.CLASSES[i];
			classByName_h[c.__name__] = i;
			mapIndexes[i] = i;
		}
		if(this.getString() != "HXS") {
			throw haxe_Exception.thrown("Invalid HXS data");
		}
		var version = this.input.b[this.inPos++];
		if(version != 1) {
			throw haxe_Exception.thrown("Unsupported HXS version " + version);
		}
		while(true) {
			var clname = this.getString();
			if(clname == null) {
				break;
			}
			var index = this.getCLID();
			var v = this.input.getInt32(this.inPos);
			this.inPos += 4;
			var crc = v;
			var ourClassIndex = classByName_h[clname];
			if(ourClassIndex == null) {
				if(index == 0) {
					var enumCl = hxbit_Serializer.getEnumClass(clname);
					if(enumCl != null) {
						var ourSchema = enumCl.getSchema();
						if(ourSchema.get_checkSum() != crc) {
							needConvert = true;
						} else {
							ourSchema = null;
						}
						enumSchemas.push({ name : clname, ourSchema : ourSchema});
						continue;
					}
				}
				throw haxe_Exception.thrown("Missing class " + clname + " found in HXS data");
			}
			var ourSchema1 = Object.create(hxbit_Serializer.CLASSES[ourClassIndex].prototype).getSerializeSchema();
			if(ourSchema1.get_checkSum() != crc) {
				needConvert = true;
				schemas[index] = ourSchema1;
			}
			if(index != ourClassIndex) {
				needReindex = true;
				mapIndexes[index] = ourClassIndex;
			}
			indexes.push(index);
		}
		var schemaDataSize = this.getInt();
		if(needConvert) {
			this.set_remapIds(false);
			this.convert = [];
			var _g = 0;
			while(_g < indexes.length) {
				var index = indexes[_g];
				++_g;
				var ourSchema = schemas[index];
				var c = hxbit_Schema;
				var schema = this.getRef(c,c.__clid);
				this.refs.remove(schema.__uid);
				if(ourSchema != null) {
					var c1 = hxbit_Serializer.CLASSES[mapIndexes[index]];
					this.convert[mapIndexes[index]] = new hxbit_Convert(c1.__name__,ourSchema,schema);
				}
			}
			var _g = 0;
			while(_g < enumSchemas.length) {
				var e = enumSchemas[_g];
				++_g;
				var c = hxbit_Schema;
				var schema = this.getRef(c,c.__clid);
				this.refs.remove(schema.__uid);
				if(e.ourSchema != null) {
					var this1 = this.enumConvert;
					var k = e.name;
					var v = new hxbit_EnumConvert(e.name,e.ourSchema,schema);
					this1.h[k] = v;
				}
			}
		} else {
			this.inPos += schemaDataSize;
		}
		if(needReindex) {
			this.mapIndexes = mapIndexes;
		}
	}
	,endLoad: function() {
		this.convert = null;
		this.mapIndexes = null;
		this.setInput(null,0);
	}
	,convertEnum: function(econv) {
		this.inPos--;
		var cid = this.input.b[this.inPos++] - 1;
		var c = econv.constructs[cid];
		var values = new Array(c.read.length);
		var _g = 0;
		var _g1 = c.read;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			values[r.index] = this.readValue(r.from);
		}
		var newCid = econv.reindex[cid];
		if(newCid < 0) {
			return null;
		}
		var bytes = this.writeConvValues(c,values,newCid + 1);
		var oldIn = this.input;
		var oldPos = this.inPos;
		var oldConv = this.enumConvert;
		this.enumConvert = hxbit_Serializer.EMPTY_MAP;
		this.setInput(bytes,0);
		var v = hxbit_Serializer.getEnumClass(econv.enumClass).doUnserialize(this);
		this.setInput(oldIn,oldPos);
		this.enumConvert = oldConv;
		return v;
	}
	,convertRef: function(i,c) {
		var values = new Array(c.read.length);
		var _g = 0;
		var _g1 = c.read;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			values[r.index] = this.readValue(r.from);
		}
		var bytes = this.writeConvValues(c,values);
		var oldIn = this.input;
		var oldPos = this.inPos;
		var oldConv = this.enumConvert;
		this.enumConvert = hxbit_Serializer.EMPTY_MAP;
		this.setInput(bytes,0);
		var obj = Reflect.field(i,"oldHxBitFields");
		if(obj != null) {
			var _g = 0;
			var _g1 = c.read;
			while(_g < _g1.length) {
				var r = _g1[_g];
				++_g;
				if(!r.written) {
					obj[r.path.split(".").pop()] = values[r.index];
				}
			}
		}
		i.unserialize(this);
		this.setInput(oldIn,oldPos);
		this.enumConvert = oldConv;
	}
	,writeConvValues: function(c,values,extraByte) {
		var oldOut = this.out;
		this.out = new haxe_io_BytesBuffer();
		if(extraByte != null) {
			this.out.addByte(extraByte);
		}
		var _g = 0;
		var _g1 = c.write;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			var v;
			if(w.from == null) {
				v = w.defaultValue;
			} else {
				v = values[w.index];
				if(!w.same) {
					if(v == null) {
						v = w.defaultValue;
					} else if(w.conv != null) {
						v = w.conv(v);
					} else {
						v = this.convertValue(w.path,v,w.from,w.to);
					}
				}
			}
			this.writeValue(v,w.to);
		}
		var bytes = this.out.getBytes();
		this.out = oldOut;
		return bytes;
	}
	,isNullable: function(t) {
		switch(t._hx_index) {
		case 0:case 1:case 2:
			return false;
		default:
			return true;
		}
	}
	,convertValue: function(path,v,from,to) {
		if(v == null) {
			return hxbit_Convert.getDefault(to);
		}
		if(hxbit_Convert.sameType(from,to)) {
			return v;
		}
		var conv = hxbit_Convert.convFuns.h[path];
		if(conv != null) {
			return conv(v);
		}
		switch(from._hx_index) {
		case 0:
			switch(to._hx_index) {
			case 1:
				return v * 1.0;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 15:
				var x = v;
				return new haxe__$Int64__$_$_$Int64(x >> 31,x);
			case 20:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 1:
			switch(to._hx_index) {
			case 0:
				return v | 0;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 15:
				var x = v | 0;
				return new haxe__$Int64__$_$_$Int64(x >> 31,x);
			case 20:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 2:
			switch(to._hx_index) {
			case 0:
				if(v) {
					return 1;
				} else {
					return 0;
				}
				break;
			case 1:
				if(v) {
					return 1.;
				} else {
					return 0.;
				}
				break;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 20:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 5:
			switch(to._hx_index) {
			case 5:
				var to1 = to.name;
				var cl = $hxClasses[to1];
				if(cl == null) {
					throw haxe_Exception.thrown("Missing target class " + to1);
				}
				var value = v;
				var v2 = js_Boot.__downcastCheck(value,cl) ? value : null;
				if(v2 != null) {
					return v2;
				}
				break;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 20:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 7:
			var _gk = from.k;
			var _gv = from.v;
			switch(to._hx_index) {
			case 7:
				var tt = to.k;
				var tv = to.v;
				var fv = _gv;
				var ft = _gk;
				if(hxbit_Convert.sameType(ft,tt)) {
					var path1 = path + "[]";
					switch(ft._hx_index) {
					case 0:
						var v1 = v;
						var v2 = new haxe_ds_IntMap();
						var k = v1.keys();
						while(k.hasNext()) {
							var k1 = k.next();
							var value = this.convertValue(path1,v1.h[k1],fv,tv);
							v2.h[k1] = value;
						}
						return v2;
					case 3:
						var v1 = v;
						var v2 = new haxe_ds_StringMap();
						var h = v1.h;
						var k_h = h;
						var k_keys = Object.keys(h);
						var k_length = k_keys.length;
						var k_current = 0;
						while(k_current < k_length) {
							var k = k_keys[k_current++];
							var value = this.convertValue(path1,v1.h[k],fv,tv);
							v2.h[k] = value;
						}
						return v2;
					case 5:
						var v1 = v;
						var v2 = new haxe_ds_ObjectMap();
						var k = v1.keys();
						while(k.hasNext()) {
							var k1 = k.next();
							v2.set(k1,this.convertValue(path1,v1.h[k1.__id__],fv,tv));
						}
						return v2;
					case 6:
						var v1 = v;
						var v2 = new haxe_ds_EnumValueMap();
						var k = v1.keys();
						while(k.hasNext()) {
							var k1 = k.next();
							v2.set(k1,this.convertValue(path1,v1.get(k1),fv,tv));
						}
						return v2;
					case 9:
						var v1 = v;
						var v2 = new haxe_ds_ObjectMap();
						var k = v1.keys();
						while(k.hasNext()) {
							var k1 = k.next();
							v2.set(k1,this.convertValue(path1,v1.h[k1.__id__],fv,tv));
						}
						return v2;
					default:
					}
				}
				break;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 20:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 8:
			var _gk = from.k;
			switch(to._hx_index) {
			case 8:
				var to1 = to.k;
				var from1 = _gk;
				var arr = v;
				var path1 = path + "[]";
				var _g = [];
				var _g1 = 0;
				while(_g1 < arr.length) {
					var v1 = arr[_g1];
					++_g1;
					_g.push(this.convertValue(path1,v1,from1,to1));
				}
				return _g;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 20:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 9:
			var _gfields = from.fields;
			switch(to._hx_index) {
			case 9:
				var obj2 = to.fields;
				var obj1 = _gfields;
				var v2 = { };
				var _g = 0;
				while(_g < obj2.length) {
					var f = obj2[_g];
					++_g;
					var found = false;
					var field = null;
					var _g1 = 0;
					while(_g1 < obj1.length) {
						var f2 = obj1[_g1];
						++_g1;
						if(f2.name == f.name) {
							found = true;
							field = this.convertValue(path + "." + f2.name,Reflect.field(v,f2.name),f2.type,f.type);
							break;
						}
					}
					if(!found) {
						if(f.opt) {
							continue;
						}
						field = hxbit_Convert.getDefault(f.type);
					} else if(field == null && f.opt) {
						continue;
					}
					v2[f.name] = field;
				}
				return v2;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 20:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 10:
			var _gk = from.k;
			switch(to._hx_index) {
			case 10:
				var from1 = _gk;
				return this.convertValue(path,v,from1,to);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 20:
				var from1 = _gk;
				return this.convertValue(path,v,from1,to);
			default:
				var from1 = _gk;
				return this.convertValue(path,v,from1,to);
			}
			break;
		case 12:
			var from1 = from.t;
			return this.convertValue(path,v,from1,to);
		case 15:
			switch(to._hx_index) {
			case 0:
				var x = v;
				if(x.high != x.low >> 31) {
					throw haxe_Exception.thrown("Overflow");
				}
				return x.low;
			case 1:
				var x = v;
				if(x.high != x.low >> 31) {
					throw haxe_Exception.thrown("Overflow");
				}
				return x.low * 1.0;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 20:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 19:
			var _gname = from.name;
			var _gfields = from.fields;
			switch(to._hx_index) {
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 19:
				var name2 = to.name;
				var obj2 = to.fields;
				var obj1 = _gfields;
				var name1 = _gname;
				if(name1 == name2) {
					var v2 = { };
					var _g = 0;
					while(_g < obj2.length) {
						var f = obj2[_g];
						++_g;
						var found = false;
						var field = null;
						var _g1 = 0;
						while(_g1 < obj1.length) {
							var f2 = obj1[_g1];
							++_g1;
							if(f2.name == f.name) {
								found = true;
								field = this.convertValue(path + "." + f2.name,Reflect.field(v,f2.name),f2.type,f.type);
								break;
							}
						}
						if(!found) {
							field = hxbit_Convert.getDefault(f.type);
						}
						if(field == null && this.isNullable(f.type)) {
							continue;
						}
						v2[f.name] = field;
					}
					return v2;
				}
				break;
			case 20:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			default:
			}
			break;
		case 20:
			var _gk = from.k;
			switch(to._hx_index) {
			case 10:
				var from1 = _gk;
				return this.convertValue(path,v,from1,to);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 20:
				var from1 = _gk;
				return this.convertValue(path,v,from1,to);
			default:
				var from1 = _gk;
				return this.convertValue(path,v,from1,to);
			}
			break;
		default:
			switch(to._hx_index) {
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to1 = to.t;
				return this.convertValue(path,v,from,to1);
			case 20:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			default:
			}
		}
		throw haxe_Exception.thrown("Cannot convert " + path + "(" + Std.string(v) + ") from " + Std.string(from) + " to " + Std.string(to));
	}
	,readValue: function(t) {
		var v = this.readValueImpl(t);
		return v;
	}
	,readValueImpl: function(t) {
		var _gthis = this;
		switch(t._hx_index) {
		case 0:
			return this.getInt();
		case 1:
			var v = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v;
		case 2:
			return this.input.b[this.inPos++] != 0;
		case 3:
			return this.getString();
		case 4:
			return this.getBytes();
		case 5:
			var name = t.name;
			var cl = $hxClasses[name];
			if(cl == null) {
				return this.getRef(null,0);
			} else {
				return this.getRef(cl,cl.__clid);
			}
			break;
		case 6:
			var name = t.name;
			var ser = hxbit_Serializer.getEnumClass(name);
			if(ser == null) {
				var e = $hxEnums[name];
				var tmp;
				if(e != null) {
					var o = haxe_rtti_Meta.getType(e);
					tmp = Object.prototype.hasOwnProperty.call(o,"skipSerialize");
				} else {
					tmp = false;
				}
				if(tmp) {
					var _this = this.input;
					var pos = this.inPos++;
					return null;
				}
				throw haxe_Exception.thrown("No enum unserializer found for " + name);
			}
			return ser.doUnserialize(this);
		case 7:
			var k = t.k;
			var v = t.v;
			switch(k._hx_index) {
			case 0:
				var len = this.getInt();
				var tmp;
				if(len == 0) {
					tmp = null;
				} else {
					var m = new haxe_ds_IntMap();
					while(--len > 0) {
						var k1 = _gthis.readValue(k);
						var v1 = _gthis.readValue(v);
						m.h[k1] = v1;
					}
					tmp = m;
				}
				return tmp;
			case 3:
				var len = this.getInt();
				var tmp;
				if(len == 0) {
					tmp = null;
				} else {
					var m = new haxe_ds_StringMap();
					while(--len > 0) {
						var k1 = _gthis.readValue(k);
						var v1 = _gthis.readValue(v);
						m.h[k1] = v1;
					}
					tmp = m;
				}
				return tmp;
			case 6:
				var len = this.getInt();
				if(len == 0) {
					return null;
				}
				var m = new haxe_ds_EnumValueMap();
				while(--len > 0) {
					var k1 = this.readValue(k);
					var v1 = this.readValue(v);
					m.set(k1,v1);
				}
				return m;
			default:
				var len = this.getInt();
				var tmp;
				if(len == 0) {
					tmp = null;
				} else {
					var m = new haxe_ds_ObjectMap();
					while(--len > 0) {
						var k1 = _gthis.readValue(k);
						var v1 = _gthis.readValue(v);
						m.set(k1,v1);
					}
					tmp = m;
				}
				return tmp;
			}
			break;
		case 8:
			var t1 = t.k;
			var len = this.getInt();
			if(len == 0) {
				return null;
			} else {
				--len;
				var a = [];
				var _g = 0;
				var _g1 = len;
				while(_g < _g1) {
					var i = _g++;
					a[i] = _gthis.readValue(t1);
				}
				return a;
			}
			break;
		case 9:
			var fields = t.fields;
			var bits = this.getInt();
			if(bits == 0) {
				return null;
			}
			var o = { };
			--bits;
			var bit = 0;
			var _g = 0;
			while(_g < fields.length) {
				var f = fields[_g];
				++_g;
				if(this.isNullable(f.type)) {
					var flag = 1 << bit;
					++bit;
					if((bits & flag) == 0) {
						continue;
					}
				}
				o[f.name] = this.readValue(f.type);
			}
			return o;
		case 10:
			var t1 = t.k;
			return this.readValue(t1);
		case 11:
			var t1 = t.k;
			var len = this.getInt();
			if(len == 0) {
				return null;
			} else {
				--len;
				var a = new Array(len);
				var _g = 0;
				var _g1 = len;
				while(_g < _g1) {
					var i = _g++;
					a[i] = _gthis.readValue(t1);
				}
				return a;
			}
			break;
		case 12:
			var t1 = t.t;
			if(this.input.b[this.inPos++] == 0) {
				return null;
			} else {
				return this.readValue(t1);
			}
			break;
		case 13:
			throw haxe_Exception.thrown("assert");
		case 14:
			return this.getDynamic();
		case 15:
			var v = this.input.getInt64(this.inPos);
			this.inPos += 8;
			return v;
		case 16:
			return this.getInt();
		case 17:
			return this.getCustom();
		case 18:
			return this.getAnyRef();
		case 19:
			var fields = t.fields;
			var bits = this.getInt();
			if(bits == 0) {
				return null;
			}
			var o = { };
			--bits;
			var bit = 0;
			var _g = 0;
			while(_g < fields.length) {
				var f = fields[_g];
				++_g;
				if(this.isNullable(f.type)) {
					var flag = 1 << bit;
					++bit;
					if((bits & flag) != 0) {
						continue;
					}
				}
				o[f.name] = this.readValue(f.type);
			}
			return o;
		case 20:
			var t1 = t.k;
			return this.readValue(t1);
		}
	}
	,writeValue: function(v,t) {
		var _gthis = this;
		switch(t._hx_index) {
		case 0:
			this.addInt(v);
			break;
		case 1:
			this.addFloat(v);
			break;
		case 2:
			this.addBool(v);
			break;
		case 3:
			this.addString(v);
			break;
		case 4:
			this.addBytes(v);
			break;
		case 5:
			this.addKnownRef(v);
			break;
		case 6:
			var name = t.name;
			var ser = hxbit_Serializer.getEnumClass(name);
			if(ser == null) {
				throw haxe_Exception.thrown("No enum unserializer found for " + name);
			}
			ser.doSerialize(this,v);
			break;
		case 7:
			var k = t.k;
			var t1 = t.v;
			switch(k._hx_index) {
			case 0:
				var v1 = v;
				if(v1 == null) {
					this.addByte(0);
				} else {
					var _g = [];
					var k1 = v1.keys();
					while(k1.hasNext()) {
						var k2 = k1.next();
						_g.push(k2);
					}
					var keys = _g;
					this.addInt(keys.length + 1);
					var _g = 0;
					while(_g < keys.length) {
						var k1 = keys[_g];
						++_g;
						_gthis.writeValue(k1,k);
						_gthis.writeValue(v1.h[k1],t1);
					}
				}
				break;
			case 3:
				var v1 = v;
				if(v1 == null) {
					this.addByte(0);
				} else {
					var _g = [];
					var h = v1.h;
					var k_h = h;
					var k_keys = Object.keys(h);
					var k_length = k_keys.length;
					var k_current = 0;
					while(k_current < k_length) {
						var k1 = k_keys[k_current++];
						_g.push(k1);
					}
					var keys = _g;
					this.addInt(keys.length + 1);
					var _g = 0;
					while(_g < keys.length) {
						var k1 = keys[_g];
						++_g;
						_gthis.writeValue(k1,k);
						_gthis.writeValue(v1.h[k1],t1);
					}
				}
				break;
			case 6:
				if(((v) instanceof haxe_ds_EnumValueMap)) {
					var v1 = v;
					if(v1 == null) {
						this.addByte(0);
						return;
					}
					var _g = [];
					var k1 = v1.keys();
					while(k1.hasNext()) {
						var k2 = k1.next();
						_g.push(k2);
					}
					var keys = _g;
					this.addInt(keys.length + 1);
					var _g = 0;
					while(_g < keys.length) {
						var vk = keys[_g];
						++_g;
						this.writeValue(vk,k);
						this.writeValue(v1.get(vk),t1);
					}
				} else {
					var v1 = v;
					if(v1 == null) {
						this.addByte(0);
					} else {
						var _g = [];
						var k1 = v1.keys();
						while(k1.hasNext()) {
							var k2 = k1.next();
							_g.push(k2);
						}
						var keys = _g;
						this.addInt(keys.length + 1);
						var _g = 0;
						while(_g < keys.length) {
							var k1 = keys[_g];
							++_g;
							_gthis.writeValue(k1,k);
							_gthis.writeValue(v1.h[k1.__id__],t1);
						}
					}
				}
				break;
			default:
				var v1 = v;
				if(v1 == null) {
					this.addByte(0);
				} else {
					var _g = [];
					var k1 = v1.keys();
					while(k1.hasNext()) {
						var k2 = k1.next();
						_g.push(k2);
					}
					var keys = _g;
					this.addInt(keys.length + 1);
					var _g = 0;
					while(_g < keys.length) {
						var k1 = keys[_g];
						++_g;
						_gthis.writeValue(k1,k);
						_gthis.writeValue(v1.h[k1.__id__],t1);
					}
				}
			}
			break;
		case 8:
			var t1 = t.k;
			var a = v;
			if(a == null) {
				this.addByte(0);
			} else {
				this.addInt(a.length + 1);
				var _g = 0;
				while(_g < a.length) {
					var v1 = a[_g];
					++_g;
					_gthis.writeValue(v1,t1);
				}
			}
			break;
		case 9:
			var fields = t.fields;
			if(v == null) {
				this.addByte(0);
			} else {
				var fbits = 0;
				var bit = 0;
				var _g = 0;
				while(_g < fields.length) {
					var f = fields[_g];
					++_g;
					if(this.isNullable(f.type)) {
						if(Reflect.field(v,f.name) != null) {
							fbits |= 1 << bit;
						}
						++bit;
					}
				}
				this.addInt(fbits + 1);
				var _g = 0;
				while(_g < fields.length) {
					var f = fields[_g];
					++_g;
					var v1 = Reflect.field(v,f.name);
					if(v1 == null && this.isNullable(f.type)) {
						continue;
					}
					this.writeValue(v1,f.type);
				}
			}
			break;
		case 10:
			var t1 = t.k;
			this.writeValue(v,t1);
			break;
		case 11:
			var t1 = t.k;
			var a = v;
			if(a == null) {
				this.addByte(0);
			} else {
				this.addInt(a.length + 1);
				var _g = 0;
				while(_g < a.length) {
					var v1 = a[_g];
					++_g;
					_gthis.writeValue(v1,t1);
				}
			}
			break;
		case 12:
			var t1 = t.t;
			if(v == null) {
				this.addByte(0);
			} else {
				this.addByte(1);
				this.writeValue(v,t1);
			}
			break;
		case 13:
			throw haxe_Exception.thrown("assert");
		case 14:
			this.addDynamic(v);
			break;
		case 15:
			this.addInt64(v);
			break;
		case 16:
			this.addInt(v);
			break;
		case 17:
			this.addCustom(v);
			break;
		case 18:
			this.addAnyRef(v);
			break;
		case 19:
			var fields = t.fields;
			if(v == null) {
				this.addByte(0);
			} else {
				var fbits = 0;
				var bit = 0;
				var _g = 0;
				while(_g < fields.length) {
					var f = fields[_g];
					++_g;
					if(this.isNullable(f.type)) {
						if(Reflect.field(v,f.name) == null) {
							fbits |= 1 << bit;
						}
						++bit;
					}
				}
				this.addInt(fbits + 1);
				var _g = 0;
				while(_g < fields.length) {
					var f = fields[_g];
					++_g;
					var v1 = Reflect.field(v,f.name);
					if(v1 == null && this.isNullable(f.type)) {
						continue;
					}
					this.writeValue(v1,f.type);
				}
			}
			break;
		case 20:
			var t1 = t.k;
			this.writeValue(v,t1);
			break;
		}
	}
	,__class__: hxbit_Serializer
};
var hxbit_Schema = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.fieldsNames = [];
	this.fieldsTypes = [];
};
$hxClasses["hxbit.Schema"] = hxbit_Schema;
hxbit_Schema.__name__ = "hxbit.Schema";
hxbit_Schema.__interfaces__ = [hxbit_Serializable];
hxbit_Schema.doSerialize = function(__ctx,__this) {
	__ctx.addBool(__this.isFinal);
	var a = __this.fieldsNames;
	if(a == null) {
		__ctx.addByte(0);
	} else {
		__ctx.addInt(a.length + 1);
		var _g = 0;
		while(_g < a.length) {
			var v = a[_g];
			++_g;
			__ctx.addString(v);
		}
	}
	var a = __this.fieldsTypes;
	if(a == null) {
		__ctx.addByte(0);
	} else {
		__ctx.addInt(a.length + 1);
		var _g = 0;
		while(_g < a.length) {
			var v = a[_g];
			++_g;
			__ctx.usedEnums.h["hxbit.PropTypeDesc"] = true;
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(__ctx,v);
		}
	}
};
hxbit_Schema.doUnserialize = function(__ctx,__this) {
	__this.isFinal = __ctx.input.b[__ctx.inPos++] != 0;
	var e0;
	var len = __ctx.getInt();
	var tmp;
	if(len == 0) {
		tmp = null;
	} else {
		--len;
		var a = [];
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			e0 = __ctx.getString();
			a[i] = e0;
		}
		tmp = a;
	}
	__this.fieldsNames = tmp;
	var e0;
	var len = __ctx.getInt();
	var tmp;
	if(len == 0) {
		tmp = null;
	} else {
		--len;
		var a = [];
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(__ctx);
			e0 = __e;
			a[i] = e0;
		}
		tmp = a;
	}
	__this.fieldsTypes = tmp;
};
hxbit_Schema.prototype = {
	get_checkSum: function() {
		var s = new hxbit_Serializer();
		s.begin();
		var old = this.__uid;
		this.__uid = 0;
		s.addKnownRef(this);
		this.__uid = old;
		var bytes = s.end();
		return haxe_crypto_Crc32.make(bytes);
	}
	,getCLID: function() {
		return hxbit_Schema.__clid;
	}
	,serialize: function(__ctx) {
		hxbit_Schema.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("isFinal");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("fieldsNames");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PString));
		schema.fieldsNames.push("fieldsTypes");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")));
		schema.isFinal = hxbit_Serializer.isClassFinal(hxbit_Schema.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		hxbit_Schema.doUnserialize(__ctx,this);
	}
	,__class__: hxbit_Schema
};
var hxbit_MarkInfo = {};
hxbit_MarkInfo._new = function(set,mask) {
	return set | mask << 16;
};
hxbit_MarkInfo.get_set = function(this1) {
	return this1 & 65535;
};
hxbit_MarkInfo.get_mask = function(this1) {
	return this1 >>> 16;
};
var hxbit_SerializableEnum = function() { };
$hxClasses["hxbit.SerializableEnum"] = hxbit_SerializableEnum;
hxbit_SerializableEnum.__name__ = "hxbit.SerializableEnum";
var hxbit_enumSer_Hxbit_$PropTypeDesc = function() { };
$hxClasses["hxbit.enumSer.Hxbit_PropTypeDesc"] = hxbit_enumSer_Hxbit_$PropTypeDesc;
hxbit_enumSer_Hxbit_$PropTypeDesc.__name__ = "hxbit.enumSer.Hxbit_PropTypeDesc";
hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.addByte(0);
	} else {
		switch(v._hx_index) {
		case 0:
			ctx.addByte(1);
			break;
		case 1:
			ctx.addByte(2);
			break;
		case 2:
			ctx.addByte(3);
			break;
		case 3:
			ctx.addByte(4);
			break;
		case 4:
			ctx.addByte(5);
			break;
		case 5:
			var _name = v.name;
			ctx.addByte(6);
			ctx.addString(_name);
			break;
		case 6:
			var _name = v.name;
			ctx.addByte(7);
			ctx.addString(_name);
			break;
		case 7:
			var _k = v.k;
			var _v = v.v;
			ctx.addByte(8);
			ctx.usedEnums.set("hxbit.PropTypeDesc",true);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_k);
			ctx.usedEnums.set("hxbit.PropTypeDesc",true);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_v);
			break;
		case 8:
			var _k = v.k;
			ctx.addByte(9);
			ctx.usedEnums.set("hxbit.PropTypeDesc",true);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_k);
			break;
		case 9:
			var _fields = v.fields;
			ctx.addByte(10);
			if(_fields == null) {
				ctx.addByte(0);
			} else {
				ctx.addInt(_fields.length + 1);
				var _g = 0;
				while(_g < _fields.length) {
					var v1 = _fields[_g];
					++_g;
					var v2 = v1;
					if(v2 == null) {
						ctx.addByte(0);
					} else {
						var fbits = 0;
						if(v2.name != null) {
							fbits |= 1;
						}
						if(v2.type != null) {
							fbits |= 2;
						}
						ctx.addInt(fbits + 1);
						if((fbits & 1) != 0) {
							ctx.addString(v2.name);
						}
						ctx.addBool(v2.opt);
						if((fbits & 2) != 0) {
							var v3 = v2.type;
							ctx.usedEnums.set("hxbit.PropTypeDesc",true);
							hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,v3);
						}
					}
				}
			}
			break;
		case 10:
			var _k = v.k;
			ctx.addByte(11);
			ctx.usedEnums.set("hxbit.PropTypeDesc",true);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_k);
			break;
		case 11:
			var _k = v.k;
			ctx.addByte(12);
			ctx.usedEnums.set("hxbit.PropTypeDesc",true);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_k);
			break;
		case 12:
			var _t = v.t;
			ctx.addByte(13);
			ctx.usedEnums.set("hxbit.PropTypeDesc",true);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_t);
			break;
		case 13:
			ctx.addByte(14);
			break;
		case 14:
			ctx.addByte(15);
			break;
		case 15:
			ctx.addByte(16);
			break;
		case 16:
			var _t = v.t;
			ctx.addByte(17);
			ctx.usedEnums.set("hxbit.PropTypeDesc",true);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_t);
			break;
		case 17:
			ctx.addByte(18);
			break;
		case 18:
			var _name = v.name;
			ctx.addByte(19);
			ctx.addString(_name);
			break;
		case 19:
			var _name = v.name;
			var _fields = v.fields;
			ctx.addByte(20);
			ctx.addString(_name);
			if(_fields == null) {
				ctx.addByte(0);
			} else {
				ctx.addInt(_fields.length + 1);
				var _g = 0;
				while(_g < _fields.length) {
					var v1 = _fields[_g];
					++_g;
					var v2 = v1;
					if(v2 == null) {
						ctx.addByte(0);
					} else {
						var fbits = 0;
						if(v2.name != null) {
							fbits |= 1;
						}
						if(v2.type != null) {
							fbits |= 2;
						}
						ctx.addInt(fbits + 1);
						if((fbits & 1) != 0) {
							ctx.addString(v2.name);
						}
						if((fbits & 2) != 0) {
							var v3 = v2.type;
							ctx.usedEnums.set("hxbit.PropTypeDesc",true);
							hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,v3);
						}
					}
				}
			}
			break;
		case 20:
			var _k = v.k;
			ctx.addByte(21);
			ctx.usedEnums.set("hxbit.PropTypeDesc",true);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,_k);
			break;
		}
	}
};
hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	var conv = ctx.enumConvert.h["hxbit.PropTypeDesc"];
	if(conv != null && conv.constructs[b - 1] != null) {
		return ctx.convertEnum(conv);
	}
	switch(b) {
	case 1:
		return hxbit_PropTypeDesc.PInt;
	case 2:
		return hxbit_PropTypeDesc.PFloat;
	case 3:
		return hxbit_PropTypeDesc.PBool;
	case 4:
		return hxbit_PropTypeDesc.PString;
	case 5:
		return hxbit_PropTypeDesc.PBytes;
	case 6:
		var _name = ctx.getString();
		return hxbit_PropTypeDesc.PSerializable(_name);
	case 7:
		var _name = ctx.getString();
		return hxbit_PropTypeDesc.PEnum(_name);
	case 8:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		var _v;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_v = __e;
		return hxbit_PropTypeDesc.PMap(_k,_v);
	case 9:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		return hxbit_PropTypeDesc.PArray(_k);
	case 10:
		var _fields;
		var e0;
		var len = ctx.getInt();
		if(len == 0) {
			_fields = null;
		} else {
			--len;
			var a = [];
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var fbits = ctx.getInt();
				if(fbits == 0) {
					e0 = null;
				} else {
					--fbits;
					var type = null;
					var name = null;
					if((fbits & 1) != 0) {
						name = ctx.getString();
					}
					var opt = ctx.input.b[ctx.inPos++] != 0;
					if((fbits & 2) != 0) {
						var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
						type = __e;
					}
					e0 = { name : name, opt : opt, type : type};
				}
				a[i] = e0;
			}
			_fields = a;
		}
		return hxbit_PropTypeDesc.PObj(_fields);
	case 11:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		return hxbit_PropTypeDesc.PAlias(_k);
	case 12:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		return hxbit_PropTypeDesc.PVector(_k);
	case 13:
		var _t;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t = __e;
		return hxbit_PropTypeDesc.PNull(_t);
	case 14:
		return hxbit_PropTypeDesc.PUnknown;
	case 15:
		return hxbit_PropTypeDesc.PDynamic;
	case 16:
		return hxbit_PropTypeDesc.PInt64;
	case 17:
		var _t;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t = __e;
		return hxbit_PropTypeDesc.PFlags(_t);
	case 18:
		return hxbit_PropTypeDesc.PCustom;
	case 19:
		var _name = ctx.getString();
		return hxbit_PropTypeDesc.PSerInterface(_name);
	case 20:
		var _name = ctx.getString();
		var _fields;
		var e0;
		var len = ctx.getInt();
		if(len == 0) {
			_fields = null;
		} else {
			--len;
			var a = [];
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var fbits = ctx.getInt();
				if(fbits == 0) {
					e0 = null;
				} else {
					--fbits;
					var type = null;
					var name = null;
					if((fbits & 1) != 0) {
						name = ctx.getString();
					}
					if((fbits & 2) != 0) {
						var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
						type = __e;
					}
					e0 = { name : name, type : type};
				}
				a[i] = e0;
			}
			_fields = a;
		}
		return hxbit_PropTypeDesc.PStruct(_name,_fields);
	case 21:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		return hxbit_PropTypeDesc.PAliasCDB(_k);
	default:
		throw haxe_Exception.thrown("Invalid enum index " + b);
	}
};
hxbit_enumSer_Hxbit_$PropTypeDesc.getSchema = function() {
	var s = new hxbit_Schema();
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PFloat");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBool");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PString");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBytes");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "name", type : hxbit_PropTypeDesc.PString, opt : false}]));
	s.fieldsNames.push("PSerializable");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "name", type : hxbit_PropTypeDesc.PString, opt : false}]));
	s.fieldsNames.push("PEnum");
	var v;
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "k", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false},{ name : "v", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PMap");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "k", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PArray");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "fields", type : hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PObj([{ opt : false, name : "name", type : hxbit_PropTypeDesc.PString},{ opt : false, name : "opt", type : hxbit_PropTypeDesc.PBool},{ opt : false, name : "type", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")}])), opt : false}]));
	s.fieldsNames.push("PObj");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "k", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PAlias");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "k", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PVector");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "t", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PNull");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PUnknown");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PDynamic");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt64");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "t", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PFlags");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PCustom");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "name", type : hxbit_PropTypeDesc.PString, opt : false}]));
	s.fieldsNames.push("PSerInterface");
	var v;
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "name", type : hxbit_PropTypeDesc.PString, opt : false},{ name : "fields", type : hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PObj([{ opt : false, name : "name", type : hxbit_PropTypeDesc.PString},{ opt : false, name : "type", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")}])), opt : false}]));
	s.fieldsNames.push("PStruct");
	var v;
	s.fieldsTypes.push(hxbit_PropTypeDesc.PObj([{ name : "k", type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc"), opt : false}]));
	s.fieldsNames.push("PAliasCDB");
	return s;
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
$hxClasses["hxd.BitmapData"] = hxd_BitmapData;
hxd_BitmapData.__name__ = "hxd.BitmapData";
hxd_BitmapData.notImplemented = function() {
	throw haxe_Exception.thrown("Not implemented");
};
hxd_BitmapData.fromNative = function(data) {
	var b = new hxd_BitmapData(-101,-102);
	b.ctx = data;
	return b;
};
hxd_BitmapData.prototype = {
	clear: function(color) {
		this.fill(0,0,this.ctx.canvas.width,this.ctx.canvas.height,color);
	}
	,fill: function(x,y,width,height,color) {
		this.ctx.fillStyle = "rgba(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ", " + (color >>> 24) / 255 + ")";
		this.ctx.fillRect(x,y,width,height);
	}
	,draw: function(x,y,src,srcX,srcY,width,height,blendMode) {
		this.drawScaled(x,y,width,height,src,srcX,srcY,width,height,blendMode);
	}
	,drawScaled: function(x,y,width,height,src,srcX,srcY,srcWidth,srcHeight,blendMode,smooth) {
		if(smooth == null) {
			smooth = true;
		}
		if(blendMode == null) {
			blendMode = h2d_BlendMode.Alpha;
		}
		throw haxe_Exception.thrown("Not implemented");
	}
	,line: function(x0,y0,x1,y1,color) {
		var dx = x1 - x0;
		var dy = y1 - y0;
		if(dx == 0) {
			if(y1 < y0) {
				var tmp = y0;
				y0 = y1;
				y1 = tmp;
			}
			if(y0 < 0) {
				y0 = 0;
			}
			if(y1 > this.ctx.canvas.height - 1) {
				y1 = this.ctx.canvas.height - 1;
			}
			var _g = y0;
			var _g1 = y1 + 1;
			while(_g < _g1) {
				var y = _g++;
				this.setPixel(x0,y,color);
			}
		} else if(dy == 0) {
			if(x1 < x0) {
				var tmp = x0;
				x0 = x1;
				x1 = tmp;
			}
			if(x0 < 0) {
				x0 = 0;
			}
			if(x1 > this.ctx.canvas.width - 1) {
				x1 = this.ctx.canvas.width - 1;
			}
			var _g = x0;
			var _g1 = x1 + 1;
			while(_g < _g1) {
				var x = _g++;
				this.setPixel(x,y0,color);
			}
		} else {
			var sx;
			var sy;
			var clip_x0;
			var clip_y0;
			var clip_x1;
			var clip_y1;
			if(x0 < x1) {
				if(x0 >= this.ctx.canvas.width || x1 < 0) {
					return;
				}
				sx = 1;
				clip_x0 = 0;
				clip_x1 = this.ctx.canvas.width - 1;
			} else {
				if(x1 >= this.ctx.canvas.width || x0 < 0) {
					return;
				}
				sx = -1;
				x1 = -x1;
				x0 = -x0;
				clip_x0 = 1 - this.ctx.canvas.width;
				clip_x1 = 0;
			}
			if(y0 < y1) {
				if(y0 >= this.ctx.canvas.height || y1 < 0) {
					return;
				}
				sy = 1;
				clip_y0 = 0;
				clip_y1 = this.ctx.canvas.height - 1;
			} else {
				if(y1 >= this.ctx.canvas.width || y0 < 0) {
					return;
				}
				sy = -1;
				y1 = -y1;
				y0 = -y0;
				clip_y0 = 1 - this.ctx.canvas.height;
				clip_y1 = 0;
			}
			dx = x1 - x0;
			dy = y1 - y0;
			var d2x = dx << 1;
			var d2y = dy << 1;
			var x = x0;
			var y = y0;
			if(dx >= dy) {
				var delta = d2y - dx;
				var tracing_can_start = false;
				if(y0 < clip_y0) {
					var temp = d2x;
					temp = temp * (clip_y0 - y0) - dx;
					var xinc = temp / d2y;
					x += xinc | 0;
					if(x > clip_x1) {
						return;
					}
					if(x >= clip_x0) {
						temp -= xinc * d2y;
						delta -= (temp | 0) + dx;
						y = clip_y0;
						if(temp > 0) {
							++x;
							delta += d2y;
						}
						tracing_can_start = true;
					}
				}
				if(!tracing_can_start && x0 < clip_x0) {
					var temp = d2y;
					temp *= clip_x0 - x0;
					var yinc = temp / d2x;
					y += yinc | 0;
					temp %= d2x;
					if(y > clip_y1 || y == clip_y1 && temp > dx) {
						return;
					}
					x = clip_x0;
					delta += temp | 0;
					if(temp >= dx) {
						++y;
						delta -= d2x;
					}
				}
				var xend = x1;
				if(y1 > clip_y1) {
					var temp = d2x;
					temp = temp * (clip_y1 - y1) + dx;
					var xinc = temp / d2y;
					xend += xinc | 0;
					if(temp - xinc * d2y == 0) {
						--xend;
					}
				}
				if(xend > clip_x1) {
					xend = clip_x1 + 1;
				} else {
					++xend;
				}
				if(sx == -1) {
					x = -x;
					xend = -xend;
				}
				if(sy == -1) {
					y = -y;
				}
				d2x -= d2y;
				while(x != xend) {
					this.setPixel(x,y,color);
					if(delta >= 0) {
						y += sy;
						delta -= d2x;
					} else {
						delta += d2y;
					}
					x += sx;
				}
			} else {
				var delta = d2x - dy;
				var tracing_can_start = false;
				if(x0 < clip_x0) {
					var temp = d2y;
					temp = temp * (clip_x0 - x0) - dy;
					var yinc = temp / d2x;
					y += yinc | 0;
					if(y > clip_y1) {
						return;
					}
					if(y >= clip_y0) {
						temp -= yinc * d2x;
						delta -= (temp | 0) + dy;
						x = clip_x0;
						if(temp > 0) {
							++y;
							delta += d2x;
						}
						tracing_can_start = true;
					}
				}
				if(!tracing_can_start && y0 < clip_y0) {
					var temp = d2x;
					temp *= clip_y0 - y0;
					var xinc = temp / d2y;
					x += xinc | 0;
					temp %= d2y;
					if(x > clip_x1 || x == clip_x1 && temp > dy) {
						return;
					}
					y = clip_y0;
					delta += temp | 0;
					if(temp >= dy) {
						++x;
						delta -= d2y;
					}
				}
				var yend = y1;
				if(x1 > clip_x1) {
					var temp = d2y;
					temp = temp * (clip_x1 - x1) + dy;
					var yinc = temp / d2x;
					yend += yinc | 0;
					if(temp - yinc * d2x == 0) {
						--yend;
					}
				}
				if(yend > clip_y1) {
					yend = clip_y1 + 1;
				} else {
					++yend;
				}
				if(sx == -1) {
					x = -x;
				}
				if(sy == -1) {
					y = -y;
					yend = -yend;
				}
				d2y -= d2x;
				while(y != yend) {
					this.setPixel(x,y,color);
					if(delta >= 0) {
						x += sx;
						delta -= d2y;
					} else {
						delta += d2x;
					}
					y += sy;
				}
			}
		}
	}
	,dispose: function() {
		this.ctx = null;
		this.pixel = null;
	}
	,clone: function() {
		return this.sub(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
	}
	,sub: function(x,y,w,h) {
		var canvas = window.document.createElement("canvas");
		canvas.width = w;
		canvas.height = h;
		var ctx = canvas.getContext("2d",null);
		ctx.drawImage(this.ctx.canvas,x,y,w,h,0,0,w,h);
		return hxd_BitmapData.fromNative(ctx);
	}
	,lock: function() {
		if(this.lockImage == null) {
			this.lockImage = this.ctx.getImageData(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
		}
	}
	,unlock: function() {
		if(this.lockImage != null) {
			this.ctx.putImageData(this.lockImage,0,0);
			this.lockImage = null;
		}
	}
	,getPixel: function(x,y) {
		var i = this.lockImage;
		var a;
		if(i != null) {
			a = x + y * i.width << 2;
		} else {
			a = 0;
			i = this.ctx.getImageData(x,y,1,1);
		}
		return i.data[a] << 16 | i.data[a | 1] << 8 | i.data[a | 2] | i.data[a | 3] << 24;
	}
	,setPixel: function(x,y,c) {
		var i = this.lockImage;
		if(i != null) {
			var a = x + y * i.width << 2;
			i.data[a] = c >> 16 & 255;
			i.data[a | 1] = c >> 8 & 255;
			i.data[a | 2] = c & 255;
			i.data[a | 3] = c >>> 24 & 255;
			return;
		}
		var i = this.pixel;
		if(i == null) {
			i = this.ctx.createImageData(1,1);
			this.pixel = i;
		}
		i.data[0] = c >> 16 & 255;
		i.data[1] = c >> 8 & 255;
		i.data[2] = c & 255;
		i.data[3] = c >>> 24 & 255;
		this.ctx.putImageData(i,x,y);
	}
	,get_width: function() {
		return this.ctx.canvas.width;
	}
	,get_height: function() {
		return this.ctx.canvas.height;
	}
	,getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,setPixels: function(pixels) {
		if(pixels.width != this.ctx.canvas.width || pixels.height != this.ctx.canvas.height) {
			throw haxe_Exception.thrown("Invalid pixels size");
		}
		var img = this.ctx.createImageData(pixels.width,pixels.height);
		pixels.convert(hxd_PixelFormat.RGBA);
		var _g = 0;
		var _g1 = pixels.width * pixels.height * 4;
		while(_g < _g1) {
			var i = _g++;
			img.data[i] = pixels.bytes.b[i];
		}
		this.ctx.putImageData(img,0,0);
	}
	,toNative: function() {
		return this.ctx;
	}
	,toPNG: function() {
		var pixels = this.getPixels();
		var png = pixels.toPNG();
		pixels.dispose();
		return png;
	}
	,__class__: hxd_BitmapData
};
var hxd_Precision = {};
hxd_Precision._new = function(v) {
	return v;
};
hxd_Precision.getSize = function(this1) {
	return hxd_Precision.SIZES[this1];
};
hxd_Precision.toInt = function(this1) {
	return this1;
};
hxd_Precision.fromInt = function(v) {
	return v;
};
hxd_Precision.toString = function(this1) {
	switch(this1) {
	case 0:
		return "F32";
	case 1:
		return "F16";
	case 2:
		return "U8";
	case 3:
		return "S8";
	}
};
var hxd_InputFormat = {};
hxd_InputFormat._new = function(v) {
	return v;
};
hxd_InputFormat.getSize = function(this1) {
	return this1 & 7;
};
hxd_InputFormat.toInt = function(this1) {
	return this1;
};
hxd_InputFormat.toString = function(this1) {
	switch(this1) {
	case 1:
		return "DFloat";
	case 2:
		return "DVec2";
	case 3:
		return "DVec3";
	case 4:
		return "DVec4";
	case 9:
		return "DBytes4";
	}
};
hxd_InputFormat.fromInt = function(v) {
	return v;
};
hxd_InputFormat.fromHXSL = function(t) {
	switch(t._hx_index) {
	case 3:
		return 1;
	case 5:
		var _gt = t.t;
		switch(t.size) {
		case 2:
			if(_gt._hx_index == 1) {
				return 2;
			} else {
				throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
			}
			break;
		case 3:
			if(_gt._hx_index == 1) {
				return 3;
			} else {
				throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
			}
			break;
		case 4:
			if(_gt._hx_index == 1) {
				return 4;
			} else {
				throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
			}
			break;
		default:
			throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
		}
		break;
	case 9:
		if(t.size == 4) {
			return 9;
		} else {
			throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
		}
		break;
	default:
		throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
	}
};
var hxd_BufferInput = function(name,type,precision) {
	if(precision == null) {
		precision = 0;
	}
	this.name = name;
	this.type = type;
	this.precision = precision;
};
$hxClasses["hxd.BufferInput"] = hxd_BufferInput;
hxd_BufferInput.__name__ = "hxd.BufferInput";
hxd_BufferInput.prototype = {
	getBytesSize: function() {
		return (this.type & 7) * hxd_Precision.SIZES[this.precision];
	}
	,equals: function(b) {
		if(this.type == b.type && this.name == b.name) {
			return this.precision == b.precision;
		} else {
			return false;
		}
	}
	,__class__: hxd_BufferInput
};
var hxd_BufferMapping = {};
hxd_BufferMapping._new = function(index,offset,prec) {
	return index << 3 | prec | offset << 16;
};
hxd_BufferMapping.get_bufferIndex = function(this1) {
	return this1 >> 3 & 255;
};
hxd_BufferMapping.get_precision = function(this1) {
	return this1 & 7;
};
hxd_BufferMapping.get_offset = function(this1) {
	return this1 >> 16;
};
var hxd_BufferFormat = function(inputs) {
	this.uid = hxd_BufferFormat._UID++;
	this.stride = this.strideBytes = 0;
	this.inputs = inputs.slice();
	this.hasLowPrecision = false;
	var _g = 0;
	while(_g < inputs.length) {
		var i = inputs[_g];
		++_g;
		this.stride += i.type & 7;
		this.strideBytes += (i.type & 7) * hxd_Precision.SIZES[i.precision];
		if((this.strideBytes & 3) != 0) {
			this.strideBytes += 4 - (this.strideBytes & 3);
		}
		if(i.precision != 0) {
			this.hasLowPrecision = true;
		}
	}
};
$hxClasses["hxd.BufferFormat"] = hxd_BufferFormat;
hxd_BufferFormat.__name__ = "hxd.BufferFormat";
hxd_BufferFormat.get_H2D = function() {
	return hxd_BufferFormat.get_XY_UV_RGBA();
};
hxd_BufferFormat.get_XY_UV_RGBA = function() {
	if(hxd_BufferFormat.XY_UV_RGBA == null) {
		hxd_BufferFormat.XY_UV_RGBA = hxd_BufferFormat.make([new hxd_BufferInput("position",2,0),new hxd_BufferInput("uv",2,0),new hxd_BufferInput("color",4,0)]);
	}
	return hxd_BufferFormat.XY_UV_RGBA;
};
hxd_BufferFormat.get_XY_UV = function() {
	if(hxd_BufferFormat.XY_UV == null) {
		hxd_BufferFormat.XY_UV = hxd_BufferFormat.make([new hxd_BufferInput("position",2,0),new hxd_BufferInput("uv",2,0)]);
	}
	return hxd_BufferFormat.XY_UV;
};
hxd_BufferFormat.get_POS3D = function() {
	if(hxd_BufferFormat.POS3D == null) {
		hxd_BufferFormat.POS3D = hxd_BufferFormat.make([new hxd_BufferInput("position",3,0)]);
	}
	return hxd_BufferFormat.POS3D;
};
hxd_BufferFormat.get_POS3D_NORMAL = function() {
	if(hxd_BufferFormat.POS3D_NORMAL == null) {
		hxd_BufferFormat.POS3D_NORMAL = hxd_BufferFormat.make([new hxd_BufferInput("position",3,0),new hxd_BufferInput("normal",3,0)]);
	}
	return hxd_BufferFormat.POS3D_NORMAL;
};
hxd_BufferFormat.get_POS3D_NORMAL_UV = function() {
	if(hxd_BufferFormat.POS3D_NORMAL_UV == null) {
		hxd_BufferFormat.POS3D_NORMAL_UV = hxd_BufferFormat.make([new hxd_BufferInput("position",3,0),new hxd_BufferInput("normal",3,0),new hxd_BufferInput("uv",2,0)]);
	}
	return hxd_BufferFormat.POS3D_NORMAL_UV;
};
hxd_BufferFormat.get_POS3D_NORMAL_UV_RGBA = function() {
	if(hxd_BufferFormat.POS3D_NORMAL_UV_RGBA == null) {
		hxd_BufferFormat.POS3D_NORMAL_UV_RGBA = hxd_BufferFormat.get_POS3D_NORMAL_UV().append("color",4);
	}
	return hxd_BufferFormat.POS3D_NORMAL_UV_RGBA;
};
hxd_BufferFormat.get_POS3D_UV = function() {
	if(hxd_BufferFormat.POS3D_UV == null) {
		hxd_BufferFormat.POS3D_UV = hxd_BufferFormat.make([new hxd_BufferInput("position",3,0),new hxd_BufferInput("uv",2,0)]);
	}
	return hxd_BufferFormat.POS3D_UV;
};
hxd_BufferFormat.get_VEC4_DATA = function() {
	if(hxd_BufferFormat.VEC4_DATA == null) {
		hxd_BufferFormat.VEC4_DATA = hxd_BufferFormat.make([new hxd_BufferInput("data",4,0)]);
	}
	return hxd_BufferFormat.VEC4_DATA;
};
hxd_BufferFormat.get_INDEX16 = function() {
	if(hxd_BufferFormat.INDEX16 == null) {
		hxd_BufferFormat.INDEX16 = hxd_BufferFormat.make([new hxd_BufferInput("index",1,1)]);
		hxd_BufferFormat.INDEX16.strideBytes = 2;
	}
	return hxd_BufferFormat.INDEX16;
};
hxd_BufferFormat.get_INDEX32 = function() {
	if(hxd_BufferFormat.INDEX32 == null) {
		hxd_BufferFormat.INDEX32 = hxd_BufferFormat.make([new hxd_BufferInput("index",1,0)]);
	}
	return hxd_BufferFormat.INDEX32;
};
hxd_BufferFormat.make = function(inputs) {
	var names = [];
	var _g = 0;
	while(_g < inputs.length) {
		var b = inputs[_g];
		++_g;
		names.push(b.name);
	}
	var key = names.join("|");
	var arr = hxd_BufferFormat.ALL_FORMATS.h[key];
	if(arr == null) {
		arr = [];
		hxd_BufferFormat.ALL_FORMATS.h[key] = arr;
	}
	var _g = 0;
	while(_g < arr.length) {
		var fmt = arr[_g];
		++_g;
		var found = true;
		var _g1 = 0;
		var _g2 = inputs.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var _this = inputs[i];
			var b = fmt.inputs[i];
			if(!(_this.type == b.type && _this.name == b.name && _this.precision == b.precision)) {
				found = false;
				break;
			}
		}
		if(found) {
			return fmt;
		}
	}
	var fmt = new hxd_BufferFormat(inputs);
	arr.push(fmt);
	return fmt;
};
hxd_BufferFormat.float32to16 = function(v,denormalsAreZero) {
	if(denormalsAreZero == null) {
		denormalsAreZero = false;
	}
	var i = haxe_io_FPHelper.floatToI32(v);
	var sign = (i & -2147483648) >>> 16;
	var exp = (i & 2139095040) >>> 23;
	var bits = i & 8388607;
	if(exp > 112) {
		return sign | exp - 112 << 10 & 31744 | bits >> 13;
	}
	if(exp < 113 && exp > 101 && !denormalsAreZero) {
		return sign | (8384512 + bits >> 125 - exp) + 1 >> 1;
	}
	if(exp > 143) {
		return sign | 32767;
	}
	return 0;
};
hxd_BufferFormat.float16to32 = function(v) {
	var sign = (v & 32768) << 16;
	var bits = (v & 1023) << 13;
	var exp = (v & 31744) >> 10;
	if(exp != 0) {
		return haxe_io_FPHelper.i32ToFloat(sign | exp + 112 << 23 | bits);
	}
	if(bits == 0) {
		return 0;
	}
	var bitcount = haxe_io_FPHelper.floatToI32(bits) >> 23;
	return haxe_io_FPHelper.i32ToFloat(sign | bitcount - 37 << 23 | bits << 150 - bitcount & 8380416);
};
hxd_BufferFormat.float32toS8 = function(v) {
	var i = Math.floor(v * 128);
	if(i >= 127) {
		return 127;
	}
	if(i <= -127) {
		return 128;
	}
	if(i >= 0) {
		return i;
	} else {
		return 127 + i | 128;
	}
};
hxd_BufferFormat.floatS8to32 = function(v) {
	return ((v & 128) != 0 ? -1 : 1) * ((v & 127) / 127);
};
hxd_BufferFormat.float32toU8 = function(v) {
	if(v < 0) {
		return 0;
	}
	if(v >= 1) {
		return 255;
	}
	return Math.floor(v * 256);
};
hxd_BufferFormat.floatU8to32 = function(v) {
	return (v & 255) / 255;
};
hxd_BufferFormat.prototype = {
	getInput: function(name) {
		var _g = 0;
		var _g1 = this.inputs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.name == name) {
				return i;
			}
		}
		return null;
	}
	,calculateInputOffset: function(name) {
		var offset = 0;
		var _g = 0;
		var _g1 = this.inputs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.name == name) {
				return offset;
			}
			offset += (i.type & 7) * hxd_Precision.SIZES[i.precision];
			if((offset & 3) != 0) {
				offset += 4 - (offset & 3);
			}
		}
		throw haxe_Exception.thrown("Input not found : " + name);
	}
	,hasInput: function(name,type) {
		var _g = 0;
		var _g1 = this.inputs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.name == name) {
				if(type != null) {
					return type == i.type;
				} else {
					return true;
				}
			}
		}
		return false;
	}
	,append: function(name,type) {
		var inputs = this.inputs.slice();
		inputs.push(new hxd_BufferInput(name,type,0));
		return hxd_BufferFormat.make(inputs);
	}
	,pop: function() {
		var inputs = this.inputs.slice();
		inputs.pop();
		return hxd_BufferFormat.make(inputs);
	}
	,isSubSet: function(fmt) {
		if(fmt == this) {
			return true;
		}
		if(this.inputs.length >= fmt.inputs.length) {
			return false;
		}
		var _g = 0;
		var _g1 = this.inputs.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = this.inputs[i];
			var i2 = fmt.inputs[i];
			if(i1.name != i2.name || i1.type != i2.type) {
				return false;
			}
		}
		return true;
	}
	,resolveMapping: function(target) {
		var m = this.mappings == null ? null : this.mappings[target.uid];
		if(m != null) {
			return m;
		}
		m = [];
		var _g = 0;
		var _g1 = target.inputs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var found = false;
			var _g2 = 0;
			var _g3 = this.inputs;
			while(_g2 < _g3.length) {
				var i2 = _g3[_g2];
				++_g2;
				if(i2.name == i.name && i2.type == i.type) {
					m.push(hxd_BufferMapping._new(0,this.calculateInputOffset(i2.name),i2.precision));
					found = true;
					break;
				}
			}
			if(!found) {
				throw haxe_Exception.thrown("Missing buffer input '" + i.name + "'");
			}
		}
		if(this.mappings == null) {
			this.mappings = [];
		}
		this.mappings[target.uid] = m;
		return m;
	}
	,getInputs: function() {
		return new haxe_iterators_ArrayIterator(this.inputs);
	}
	,toString: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.inputs;
		while(_g1 < _g2.length) {
			var i = _g2[_g1];
			++_g1;
			_g.push(i.name + ":" + hxd_InputFormat.toString(i.type) + (i.precision == 0 ? "" : "." + hxd_Precision.toString(i.precision).toLowerCase()));
		}
		return _g.toString();
	}
	,__class__: hxd_BufferFormat
};
var hxd_MultiFormat = function(formats) {
	this.mappings = [];
	this.uid = hxd_MultiFormat._UID++;
	this.formats = formats;
};
$hxClasses["hxd.MultiFormat"] = hxd_MultiFormat;
hxd_MultiFormat.__name__ = "hxd.MultiFormat";
hxd_MultiFormat.make = function(formats) {
	if(formats.length > hxd_MultiFormat.MAX_FORMATS) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < formats.length) {
			var f = formats[_g1];
			++_g1;
			_g.push(f.toString());
		}
		throw haxe_Exception.thrown("Too many formats (addBuffer leak?) " + Std.string(_g));
	}
	var c = { found : null, nexts : hxd_MultiFormat.CACHE};
	var _g = 0;
	while(_g < formats.length) {
		var f = formats[_g];
		++_g;
		var c2 = c.nexts.h[f.uid];
		if(c2 == null) {
			c2 = { found : null, nexts : new haxe_ds_IntMap()};
			c.nexts.h[f.uid] = c2;
		}
		c = c2;
	}
	if(c.found == null) {
		c.found = new hxd_MultiFormat(formats);
	}
	return c.found;
};
hxd_MultiFormat.prototype = {
	resolveMapping: function(format) {
		var m = this.mappings[format.uid];
		if(m == null) {
			m = this.makeMapping(format);
		}
		return m;
	}
	,makeMapping: function(format) {
		var m = [];
		var _g_current = 0;
		var _g_array = format.inputs;
		while(_g_current < _g_array.length) {
			var input = _g_array[_g_current++];
			var found = false;
			var match = null;
			var _g_current1 = 0;
			var _g_array1 = this.formats;
			while(_g_current1 < _g_array1.length) {
				var _g_value = _g_array1[_g_current1];
				var _g_key = _g_current1++;
				var idx = _g_key;
				var f = _g_value;
				var i = f.getInput(input.name);
				if(i != null) {
					match = i;
					if(i.type != input.type) {
						continue;
					}
					var offset = f.calculateInputOffset(i.name);
					m.push(hxd_BufferMapping._new(idx,offset,i.precision));
					found = true;
					break;
				}
			}
			if(!found) {
				if(match != null) {
					throw haxe_Exception.thrown("Shader buffer " + input.name + " was requested with " + (input.type == null ? "null" : hxd_InputFormat.toString(input.type)) + " but found with " + (match.type == null ? "null" : hxd_InputFormat.toString(match.type)));
				}
				throw haxe_Exception.thrown("Missing shader buffer " + input.name);
			}
		}
		this.mappings[format.uid] = m;
		return m;
	}
	,__class__: hxd_MultiFormat
};
var hxd_Charset = function() {
	var _gthis = this;
	this.map = new haxe_ds_IntMap();
	var _g = 0;
	while(_g < 94) {
		var i = _g++;
		_gthis.map.h[65281 + i] = 33 + i;
	}
	var _g = 192;
	var _g1 = 199;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 65;
	}
	var _g = 224;
	var _g1 = 231;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 97;
	}
	var _g = 200;
	var _g1 = 204;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 69;
	}
	var _g = 232;
	var _g1 = 236;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 101;
	}
	var _g = 204;
	var _g1 = 208;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 73;
	}
	var _g = 236;
	var _g1 = 240;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 105;
	}
	var _g = 210;
	var _g1 = 215;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 79;
	}
	var _g = 242;
	var _g1 = 247;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 111;
	}
	var _g = 217;
	var _g1 = 221;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 85;
	}
	var _g = 249;
	var _g1 = 253;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 117;
	}
	_gthis.map.h[199] = 67;
	_gthis.map.h[231] = 67;
	_gthis.map.h[208] = 68;
	_gthis.map.h[222] = 100;
	_gthis.map.h[209] = 78;
	_gthis.map.h[241] = 110;
	_gthis.map.h[221] = 89;
	_gthis.map.h[253] = 121;
	_gthis.map.h[255] = 121;
	_gthis.map.h[8364] = 69;
	_gthis.map.h[12288] = 32;
	_gthis.map.h[160] = 32;
	_gthis.map.h[171] = 34;
	_gthis.map.h[187] = 34;
	_gthis.map.h[8220] = 34;
	_gthis.map.h[8221] = 34;
	_gthis.map.h[8222] = 34;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8217] = 39;
	_gthis.map.h[180] = 39;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8249] = 60;
	_gthis.map.h[8250] = 62;
	_gthis.map.h[8211] = 45;
};
$hxClasses["hxd.Charset"] = hxd_Charset;
hxd_Charset.__name__ = "hxd.Charset";
hxd_Charset.getDefault = function() {
	if(hxd_Charset.inst == null) {
		hxd_Charset.inst = new hxd_Charset();
	}
	return hxd_Charset.inst;
};
hxd_Charset.prototype = {
	resolveChar: function(code,glyphs) {
		var c = code;
		while(c != null) {
			var g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	,isCJK: function(code) {
		if(!(code >= 11904 && code <= 42191 || code >= 63744 && code <= 64255)) {
			if(code >= 131072) {
				return code <= 262141;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isSpace: function(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	,isBreakChar: function(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	,isComplementChar: function(code) {
		return hxd_Charset.complementChars.h.hasOwnProperty(code);
	}
	,__class__: hxd_Charset
};
var hxd_Cursor = $hxEnums["hxd.Cursor"] = { __ename__:"hxd.Cursor",__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_name:"Button",_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_name:"Move",_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_name:"TextInput",_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_name:"Hide",_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr,__params__:function(){ return [this.custom];}}; },$_._hx_name="Custom",$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr,__params__:function(){ return [this.f];}}; },$_._hx_name="Callback",$_)
};
hxd_Cursor.__constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide,hxd_Cursor.Custom,hxd_Cursor.Callback];
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function(frames,speed,offsetX,offsetY) {
	this.frames = frames;
	this.speed = speed;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.frameDelay = 1 / speed;
	this.frameTime = 0;
	this.frameIndex = 0;
};
$hxClasses["hxd.CustomCursor"] = hxd_CustomCursor;
hxd_CustomCursor.__name__ = "hxd.CustomCursor";
hxd_CustomCursor.getNativeCursor = function(name) {
	var c = new hxd_CustomCursor([],0,0,0);
	c.alloc = [name];
	return hxd_Cursor.Custom(c);
};
hxd_CustomCursor.prototype = {
	reset: function() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	,update: function(dt) {
		var newTime = this.frameTime + dt;
		var delay = this.frameDelay;
		var index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.ctx = null;
			f.pixel = null;
		}
		this.frames = [];
		if(this.alloc != null) {
			this.alloc = null;
		}
	}
	,__class__: hxd_CustomCursor
};
var hxd_DroppedFile = function(file) {
	this.file = file;
};
$hxClasses["hxd.DroppedFile"] = hxd_DroppedFile;
hxd_DroppedFile.__name__ = "hxd.DroppedFile";
hxd_DroppedFile.prototype = {
	__class__: hxd_DroppedFile
};
var hxd_DropFileEvent = function(files,dx,dy) {
	this.files = files;
	this.dropX = dx;
	this.dropY = dy;
};
$hxClasses["hxd.DropFileEvent"] = hxd_DropFileEvent;
hxd_DropFileEvent.__name__ = "hxd.DropFileEvent";
hxd_DropFileEvent.prototype = {
	get_file: function() {
		return this.files[0];
	}
	,__class__: hxd_DropFileEvent
};
var hxd_EventKind = $hxEnums["hxd.EventKind"] = { __ename__:"hxd.EventKind",__constructs__:null
	,EPush: {_hx_name:"EPush",_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_name:"ERelease",_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_name:"EMove",_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_name:"EOver",_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_name:"EOut",_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_name:"EWheel",_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_name:"EFocus",_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_name:"EFocusLost",_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_name:"EKeyDown",_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_name:"EKeyUp",_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_name:"EReleaseOutside",_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_name:"ETextInput",_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_name:"ECheck",_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd_EventKind.__constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
$hxClasses["hxd.Event"] = hxd_Event;
hxd_Event.__name__ = "hxd.Event";
hxd_Event.prototype = {
	toString: function() {
		var tmp = Std.string(this.kind) + "[" + (this.relX | 0) + "," + (this.relY | 0) + "]";
		var tmp1;
		switch(this.kind._hx_index) {
		case 5:
			tmp1 = ",wheelDelta=" + this.wheelDelta;
			break;
		case 8:case 9:
			tmp1 = ",keyCode=" + this.keyCode;
			break;
		case 0:case 1:case 10:
			tmp1 = ",button=" + this.button;
			break;
		case 11:
			tmp1 = ",charCode=" + this.charCode;
			break;
		case 2:case 3:case 4:case 6:case 7:case 12:
			tmp1 = "";
			break;
		}
		return tmp + tmp1;
	}
	,__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand = {};
hxd__$FloatBuffer_Float32Expand._new = function(length) {
	return { pos : length, array : new Float32Array(new ArrayBuffer(length << 2))};
};
hxd__$FloatBuffer_Float32Expand.get_length = function(this1) {
	return this1.pos;
};
hxd__$FloatBuffer_Float32Expand.set_length = function(this1,v) {
	if(this1.pos != v) {
		var newArray = new Float32Array(v);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.pos = v;
	return v;
};
hxd__$FloatBuffer_Float32Expand.push = function(this1,v) {
	if(this1.pos == this1.array.length) {
		var newSize = this1.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.array[this1.pos++] = v;
};
hxd__$FloatBuffer_Float32Expand.get = function(this1,index) {
	return this1.array[index];
};
hxd__$FloatBuffer_Float32Expand.set = function(this1,index,v) {
	return this1.array[index] = v;
};
hxd__$FloatBuffer_Float32Expand.toF32Array = function(this1) {
	return this1.array;
};
hxd__$FloatBuffer_Float32Expand.toArray = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.pos;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(this1.array[i]);
	}
	return _g;
};
var hxd__$FloatBuffer_InnerIterator = function(b) {
	this.b = b;
	this.len = this.b.pos;
	this.pos = 0;
};
$hxClasses["hxd._FloatBuffer.InnerIterator"] = hxd__$FloatBuffer_InnerIterator;
hxd__$FloatBuffer_InnerIterator.__name__ = "hxd._FloatBuffer.InnerIterator";
hxd__$FloatBuffer_InnerIterator.prototype = {
	hasNext: function() {
		return this.pos < this.len;
	}
	,next: function() {
		return this.b.array[this.pos++];
	}
	,__class__: hxd__$FloatBuffer_InnerIterator
};
var hxd_FloatBuffer = {};
hxd_FloatBuffer._new = function(length) {
	if(length == null) {
		length = 0;
	}
	return hxd__$FloatBuffer_Float32Expand._new(length);
};
hxd_FloatBuffer.push = function(this1,v) {
	if(this1.pos == this1.array.length) {
		var newSize = this1.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.array[this1.pos++] = v;
};
hxd_FloatBuffer.grow = function(this1,v) {
	var _g = this1.pos;
	var _g1 = v;
	while(_g < _g1) {
		var i = _g++;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = 0.;
	}
};
hxd_FloatBuffer.resize = function(this1,v) {
	if(this1.pos != v) {
		var newArray = new Float32Array(v);
		newArray.set(this1.array);
		this1.array = newArray;
	}
	this1.pos = v;
};
hxd_FloatBuffer.arrayRead = function(this1,key) {
	return this1.array[key];
};
hxd_FloatBuffer.arrayWrite = function(this1,key,value) {
	return this1.array[key] = value;
};
hxd_FloatBuffer.getNative = function(this1) {
	return this1;
};
hxd_FloatBuffer.iterator = function(this1) {
	return new hxd__$FloatBuffer_InnerIterator(this1);
};
hxd_FloatBuffer.get_length = function(this1) {
	return this1.pos;
};
var hxd__$IndexBuffer_InnerIterator = function(b) {
	this.b = b;
	this.len = this.b.length;
	this.pos = 0;
};
$hxClasses["hxd._IndexBuffer.InnerIterator"] = hxd__$IndexBuffer_InnerIterator;
hxd__$IndexBuffer_InnerIterator.__name__ = "hxd._IndexBuffer.InnerIterator";
hxd__$IndexBuffer_InnerIterator.prototype = {
	hasNext: function() {
		return this.pos < this.len;
	}
	,next: function() {
		return this.b[this.pos++];
	}
	,__class__: hxd__$IndexBuffer_InnerIterator
};
var hxd_IndexBuffer = {};
hxd_IndexBuffer._new = function(length) {
	if(length == null) {
		length = 0;
	}
	return new Array(length);
};
hxd_IndexBuffer.push = function(this1,v) {
	this1.push(v);
};
hxd_IndexBuffer.grow = function(this1,v) {
	while(this1.length < v) this1.push(0);
};
hxd_IndexBuffer.arrayRead = function(this1,key) {
	return this1[key];
};
hxd_IndexBuffer.arrayWrite = function(this1,key,value) {
	return this1[key] = value;
};
hxd_IndexBuffer.getNative = function(this1) {
	return this1;
};
hxd_IndexBuffer.iterator = function(this1) {
	return new hxd__$IndexBuffer_InnerIterator(this1);
};
hxd_IndexBuffer.get_length = function(this1) {
	return this1.length;
};
var hxd_Key = function() { };
$hxClasses["hxd.Key"] = hxd_Key;
hxd_Key.__name__ = "hxd.Key";
hxd_Key.isDown = function(code) {
	return hxd_Key.keyPressed[code] > 0;
};
hxd_Key.getFrame = function() {
	return hxd_Timer.frameCount + 2;
};
hxd_Key.isPressed = function(code) {
	return hxd_Key.keyPressed[code] == hxd_Timer.frameCount + 2 - 1;
};
hxd_Key.isReleased = function(code) {
	return hxd_Key.keyPressed[code] == -(hxd_Timer.frameCount + 2) + 1;
};
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Window.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Window.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	switch(e.kind._hx_index) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = hxd_Timer.frameCount + 2;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(hxd_Timer.frameCount + 2);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd_Timer.frameCount + 2;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = hxd_Timer.frameCount + 2;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(hxd_Timer.frameCount + 2);
		break;
	case 10:
		hxd_Key.keyPressed = [];
		break;
	default:
	}
};
hxd_Key.getKeyName = function(keyCode) {
	var c = keyCode;
	switch(c) {
	case 0:
		return "MouseLeft";
	case 1:
		return "MouseRight";
	case 2:
		return "MouseMiddle";
	case 3:
		return "Mouse3";
	case 4:
		return "Mouse4";
	case 8:
		return "Backspace";
	case 9:
		return "Tab";
	case 13:
		return "Enter";
	case 16:
		return "Shift";
	case 17:
		return "Ctrl";
	case 18:
		return "Alt";
	case 19:
		return "PauseBreak";
	case 20:
		return "CapsLock";
	case 27:
		return "Escape";
	case 32:
		return "Space";
	case 33:
		return "PageUp";
	case 34:
		return "PageDown";
	case 35:
		return "End";
	case 36:
		return "Home";
	case 37:
		return "Left";
	case 38:
		return "Up";
	case 39:
		return "Right";
	case 40:
		return "Down";
	case 45:
		return "Insert";
	case 46:
		return "Delete";
	case 91:
		return "LeftWindowKey";
	case 92:
		return "RightWindowKey";
	case 93:
		return "ContextMenu";
	case 106:
		return "NumPad*";
	case 107:
		return "NumPad+";
	case 108:
		return "NumPadEnter";
	case 109:
		return "NumPad-";
	case 110:
		return "NumPad.";
	case 111:
		return "NumPad/";
	case 144:
		return "NumLock";
	case 145:
		return "ScrollLock";
	case 186:
		return "Semicolon";
	case 187:
		return "Equals";
	case 188:
		return "Comma";
	case 189:
		return "Minus";
	case 190:
		return "Period";
	case 191:
		return "Slash";
	case 192:
		return "Tilde";
	case 219:
		return "BracketLeft";
	case 220:
		return "Backslash";
	case 221:
		return "BracketRight";
	case 222:
		return "Quote";
	case 226:
		return "IntlBackslash";
	case 272:
		return "LShift";
	case 273:
		return "LCtrl";
	case 274:
		return "LAlt";
	case 528:
		return "RShift";
	case 529:
		return "RCtrl";
	case 530:
		return "RAlt";
	default:
		if(c >= 48 && c <= 57) {
			return "" + (c - 48);
		} else if(c >= 96 && c <= 105) {
			return "NumPad" + (c - 96);
		} else if(c >= 65 && c <= 90) {
			return String.fromCodePoint((65 + c - 65));
		} else if(c >= 112 && c <= 135) {
			return "F" + (c - 112 + 1);
		} else {
			return null;
		}
	}
};
var hxd_Math = function() { };
$hxClasses["hxd.Math"] = hxd_Math;
hxd_Math.__name__ = "hxd.Math";
hxd_Math.get_POSITIVE_INFINITY = function() {
	return Infinity;
};
hxd_Math.get_NEGATIVE_INFINITY = function() {
	return -Infinity;
};
hxd_Math.get_NaN = function() {
	return NaN;
};
hxd_Math.isNaN = function(v) {
	return isNaN(v);
};
hxd_Math.fmt = function(v) {
	var neg;
	if(v < 0) {
		neg = -1.0;
		v = -v;
	} else {
		neg = 1.0;
	}
	if(isNaN(v) || !isFinite(v)) {
		return v;
	}
	var digits = 4 - Math.log(v) / Math.log(10) | 0;
	if(digits < 1) {
		digits = 1;
	} else if(digits >= 10) {
		return 0.;
	}
	var exp = Math.pow(10,digits);
	return Math.floor(v * exp + .49999) * neg / exp;
};
hxd_Math.floor = function(f) {
	return Math.floor(f);
};
hxd_Math.ceil = function(f) {
	return Math.ceil(f);
};
hxd_Math.round = function(f) {
	return Math.round(f);
};
hxd_Math.clamp = function(f,min,max) {
	if(max == null) {
		max = 1.;
	}
	if(min == null) {
		min = 0.;
	}
	if(f < min) {
		return min;
	} else if(f > max) {
		return max;
	} else {
		return f;
	}
};
hxd_Math.pow = function(v,p) {
	return Math.pow(v,p);
};
hxd_Math.cos = function(f) {
	return Math.cos(f);
};
hxd_Math.sin = function(f) {
	return Math.sin(f);
};
hxd_Math.tan = function(f) {
	return Math.tan(f);
};
hxd_Math.acos = function(f) {
	return Math.acos(f);
};
hxd_Math.asin = function(f) {
	return Math.asin(f);
};
hxd_Math.atan = function(f) {
	return Math.atan(f);
};
hxd_Math.sqrt = function(f) {
	return Math.sqrt(f);
};
hxd_Math.invSqrt = function(f) {
	return 1. / Math.sqrt(f);
};
hxd_Math.atan2 = function(dy,dx) {
	return Math.atan2(dy,dx);
};
hxd_Math.abs = function(f) {
	if(f < 0) {
		return -f;
	} else {
		return f;
	}
};
hxd_Math.max = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.min = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.iabs = function(i) {
	if(i < 0) {
		return -i;
	} else {
		return i;
	}
};
hxd_Math.imax = function(a,b) {
	if(a < b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.imin = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
hxd_Math.iclamp = function(v,min,max) {
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
hxd_Math.lerp = function(a,b,k) {
	return a + k * (b - a);
};
hxd_Math.inverseLerp = function(a,b,val) {
	return (val - a) / (b - a);
};
hxd_Math.ease = function(a,b,k,easing) {
	var p = Math.pow(k,1 + easing);
	return a + p / (p + Math.pow(1 - k,easing + 1)) * (b - a);
};
hxd_Math.easeFactor = function(k,easing) {
	var p = Math.pow(k,1 + easing);
	return p / (p + Math.pow(1 - k,easing + 1));
};
hxd_Math.lerpTime = function(a,b,k,dt) {
	return a + (1 - Math.pow(1 - k,dt * hxd_Timer.wantedFPS)) * (b - a);
};
hxd_Math.bitCount = function(v) {
	v -= v >> 1 & 1431655765;
	v = (v & 858993459) + (v >> 2 & 858993459);
	return (v + (v >> 4) & 252645135) * 16843009 >> 24;
};
hxd_Math.isPOT = function(v) {
	return (v & v - 1) == 0;
};
hxd_Math.nextPOT = function(v) {
	--v;
	v |= v >> 1;
	v |= v >> 2;
	v |= v >> 4;
	v |= v >> 8;
	v |= v >> 16;
	return ++v;
};
hxd_Math.distanceSq = function(dx,dy,dz) {
	if(dz == null) {
		dz = 0.;
	}
	return dx * dx + dy * dy + dz * dz;
};
hxd_Math.distance = function(dx,dy,dz) {
	if(dz == null) {
		dz = 0.;
	}
	var dz1 = dz;
	if(dz1 == null) {
		dz1 = 0.;
	}
	return Math.sqrt(dx * dx + dy * dy + dz1 * dz1);
};
hxd_Math.colorLerp = function(c1,c2,k) {
	var a1 = c1 >>> 24;
	var r1 = c1 >> 16 & 255;
	var g1 = c1 >> 8 & 255;
	var b1 = c1 & 255;
	var a2 = c2 >>> 24;
	var r2 = c2 >> 16 & 255;
	var g2 = c2 >> 8 & 255;
	var b2 = c2 & 255;
	var a = a1 * (1 - k) + a2 * k | 0;
	var r = r1 * (1 - k) + r2 * k | 0;
	var g = g1 * (1 - k) + g2 * k | 0;
	var b = b1 * (1 - k) + b2 * k | 0;
	return a << 24 | r << 16 | g << 8 | b;
};
hxd_Math.angle = function(da) {
	da %= 6.28318530717958623;
	if(da > 3.14159265358979323) {
		da -= 6.28318530717958623;
	} else if(da <= -3.14159265358979312) {
		da += 6.28318530717958623;
	}
	return da;
};
hxd_Math.angleLerp = function(a,b,k) {
	var da = b - a;
	da %= 6.28318530717958623;
	if(da > 3.14159265358979323) {
		da -= 6.28318530717958623;
	} else if(da <= -3.14159265358979312) {
		da += 6.28318530717958623;
	}
	return a + da * k;
};
hxd_Math.angleMove = function(a,b,max) {
	var da = b - a;
	da %= 6.28318530717958623;
	if(da > 3.14159265358979323) {
		da -= 6.28318530717958623;
	} else if(da <= -3.14159265358979312) {
		da += 6.28318530717958623;
	}
	var da1 = da;
	if(da1 > -max && da1 < max) {
		return b;
	} else {
		return a + (da1 < 0 ? -max : max);
	}
};
hxd_Math.valueMove = function(v,target,max) {
	if(v < target) {
		v += max;
		if(v > target) {
			v = target;
		}
	} else if(v > target) {
		v -= max;
		if(v < target) {
			v = target;
		}
	}
	return v;
};
hxd_Math.shuffle = function(a) {
	var len = a.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var x = Std.random(len);
		var y = Std.random(len);
		var tmp = a[x];
		a[x] = a[y];
		a[y] = tmp;
	}
};
hxd_Math.random = function(max) {
	if(max == null) {
		max = 1.0;
	}
	return Math.random() * max;
};
hxd_Math.srand = function(max) {
	if(max == null) {
		max = 1.0;
	}
	return (Math.random() - 0.5) * (max * 2);
};
hxd_Math.b2f = function(v) {
	return (v & 255) * 0.0039215686274509803921568627451;
};
hxd_Math.f2b = function(v) {
	return (v < 0. ? 0. : v > 1. ? 1. : v) * 255.0 | 0;
};
hxd_Math.umod = function(value,modulo) {
	var r = value % modulo;
	if(r >= 0) {
		return r;
	} else {
		return r + modulo;
	}
};
hxd_Math.ufmod = function(value,modulo) {
	var r = value % modulo;
	if(r >= 0) {
		return r;
	} else {
		return r + modulo;
	}
};
hxd_Math.degToRad = function(deg) {
	return deg * 3.14159265358979323 / 180.0;
};
hxd_Math.radToDeg = function(rad) {
	return rad * 180.0 / 3.14159265358979323;
};
var hxd_Pad = function() {
	this.rawRYAxis = 0.;
	this.rawRXAxis = 0.;
	this.rawYAxis = 0.;
	this.rawXAxis = 0.;
	this.prevButtons = [];
	this.prevValues = [];
	this.values = [];
	this.buttons = [];
	this.axisDeadZone = 0.1;
	this.config = hxd_Pad.DEFAULT_CONFIG;
	this.index = -1;
	this.connected = true;
};
$hxClasses["hxd.Pad"] = hxd_Pad;
hxd_Pad.__name__ = "hxd.Pad";
hxd_Pad.pickConfig = function(name) {
	switch(name) {
	case "054c-05c4-Wireless Controller":case "054c-09cc-Wireless Controller":
		return hxd_Pad.CONFIG_JS_DS4_FF;
	case "Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 05c4)":case "Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 09cc)":
		return hxd_Pad.CONFIG_JS_DS4;
	default:
		return hxd_Pad.CONFIG_JS_STD;
	}
};
hxd_Pad.createDummy = function() {
	var p = new hxd_Pad();
	p.connected = false;
	return p;
};
hxd_Pad.wait = function(onPad) {
	if(!js_Browser.get_supported()) {
		return;
	}
	hxd_Pad.waitPad = onPad;
	if(!hxd_Pad.initDone) {
		hxd_Pad.initDone = true;
		window.addEventListener("gamepadconnected",function(p) {
			var pad = new hxd_Pad();
			pad.d = p.gamepad;
			pad.config = hxd_Pad.pickConfig(pad.d.id);
			pad.index = pad.d.index;
			hxd_Pad.pads.h[pad.d.index] = pad;
			hxd_Pad.waitPad(pad);
		});
		window.addEventListener("gamepaddisconnected",function(p) {
			var pad = hxd_Pad.pads.h[p.gamepad.index];
			if(pad == null) {
				return;
			}
			hxd_Pad.pads.remove(p.gamepad.index);
			pad.connected = false;
			pad.onDisconnect();
		});
		haxe_MainLoop.add(hxd_Pad.syncPads);
	}
};
hxd_Pad.syncPads = function() {
	var freshPads = [];
	try {
		freshPads = $global.navigator.getGamepads();
	} catch( _g ) {
	}
	if(freshPads.length > 0) {
		var _g = 0;
		var _g1 = freshPads.length;
		while(_g < _g1) {
			var i = _g++;
			if(hxd_Pad.pads.h[i] != null) {
				hxd_Pad.pads.h[i].d = freshPads[i];
			}
		}
	}
	var p = hxd_Pad.pads.iterator();
	while(p.hasNext()) {
		var p1 = p.next();
		var _g = 0;
		var _g1 = p1.d.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			p1.prevButtons[i] = p1.buttons[i];
			p1.buttons[i] = p1.d.buttons[i].pressed;
			p1.prevValues[i] = p1.values[i];
			p1.values[i] = p1.d.buttons[i].value;
		}
		var _g2 = 0;
		var _g3 = p1.d.axes.length >> 1;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var x = p1.d.axes[i1 << 1];
			var y = p1.d.axes[(i1 << 1) + 1];
			var ii = (i1 << 1) + p1.d.buttons.length;
			p1.prevValues[ii] = p1.values[ii];
			p1.prevValues[ii + 1] = p1.values[ii + 1];
			p1.values[ii] = x;
			p1.values[ii + 1] = -y;
			if(i1 == 0) {
				p1.rawXAxis = x;
				p1.rawYAxis = y;
			} else if(i1 == 1) {
				p1.rawRXAxis = x;
				p1.rawRYAxis = y;
			}
		}
	}
};
hxd_Pad.prototype = {
	get_xAxis: function() {
		if(this.rawXAxis * this.rawXAxis + this.rawYAxis * this.rawYAxis < this.axisDeadZone * this.axisDeadZone) {
			return 0.;
		}
		return this.rawXAxis;
	}
	,get_yAxis: function() {
		if(this.rawXAxis * this.rawXAxis + this.rawYAxis * this.rawYAxis < this.axisDeadZone * this.axisDeadZone) {
			return 0.;
		}
		return this.rawYAxis;
	}
	,get_rxAxis: function() {
		if(this.rawRXAxis * this.rawRXAxis + this.rawRYAxis * this.rawRYAxis < this.axisDeadZone * this.axisDeadZone) {
			return 0.;
		}
		return this.rawRXAxis;
	}
	,get_ryAxis: function() {
		if(this.rawRXAxis * this.rawRXAxis + this.rawRYAxis * this.rawRYAxis < this.axisDeadZone * this.axisDeadZone) {
			return 0.;
		}
		return this.rawRYAxis;
	}
	,onDisconnect: function() {
	}
	,isDown: function(button) {
		return this.buttons[button];
	}
	,isPressed: function(button) {
		if(this.buttons[button]) {
			return !this.prevButtons[button];
		} else {
			return false;
		}
	}
	,isReleased: function(button) {
		if(!this.buttons[button]) {
			return this.prevButtons[button];
		} else {
			return false;
		}
	}
	,reset: function() {
		this.rawXAxis = this.rawYAxis = 0;
		this.rawRXAxis = this.rawRYAxis = 0;
		var _g = 0;
		var _g1 = this.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			this.buttons[i] = false;
		}
		var _g = 0;
		var _g1 = this.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			this.prevButtons[i] = false;
		}
		var _g = 0;
		var _g1 = this.values.length;
		while(_g < _g1) {
			var i = _g++;
			this.values[i] = 0;
		}
		var _g = 0;
		var _g1 = this.values.length;
		while(_g < _g1) {
			var i = _g++;
			this.prevValues[i] = 0;
		}
	}
	,rumble: function(strength,time_s) {
		var d = this.d;
		var time = time_s * 1000. | 0;
		if(d.hapticActuators != null && d.hapticActuators.length > 0) {
			d.hapticActuators[0].pulse(strength,time);
			return;
		}
		if(d.vibrationActuator != null) {
			d.vibrationActuator.playEffect("dual-rumble",{ duration : time, strongMagnitude : strength, weakMagnitude : strength});
		}
	}
	,get_name: function() {
		if(this.index < 0) {
			return "Dummy GamePad";
		}
		return this.d.id;
	}
	,__class__: hxd_Pad
};
var hxd_Flags = $hxEnums["hxd.Flags"] = { __ename__:"hxd.Flags",__constructs__:null
	,ReadOnly: {_hx_name:"ReadOnly",_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_name:"AlphaPremultiplied",_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
};
hxd_Flags.__constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied];
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied];
var hxd_PixelsARGB = {};
hxd_PixelsARGB.getPixel = function(this1,x,y) {
	var v = this1.bytes.getInt32((x + y * this1.width << 2) + this1.offset);
	return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
};
hxd_PixelsARGB.setPixel = function(this1,x,y,v) {
	this1.bytes.setInt32((x + y * this1.width << 2) + this1.offset,v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24);
};
hxd_PixelsARGB.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.ARGB);
	return p;
};
var hxd_PixelsFloat = {};
hxd_PixelsFloat.getPixelF = function(this1,x,y,v) {
	if(v == null) {
		v = new h3d_Vector4Impl(0.,0.,0.,1.);
	}
	var pix = (x + y * this1.width << 2) + this1.offset;
	v.x = this1.bytes.getFloat(pix);
	return v;
};
hxd_PixelsFloat.setPixelF = function(this1,x,y,v) {
	var pix = (x + y * this1.width << 2) + this1.offset;
	this1.bytes.setFloat(pix,v.x);
};
hxd_PixelsFloat.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.R32F);
	return p;
};
var hxd_PixelsFloatRGBA = {};
hxd_PixelsFloatRGBA.getPixelF = function(this1,x,y,v) {
	if(v == null) {
		v = new h3d_Vector4Impl(0.,0.,0.,1.);
	}
	var pix = (x + y * this1.width << 4) + this1.offset;
	v.x = this1.bytes.getFloat(pix);
	v.y = this1.bytes.getFloat(pix + 4);
	v.z = this1.bytes.getFloat(pix + 8);
	v.w = this1.bytes.getFloat(pix + 12);
	return v;
};
hxd_PixelsFloatRGBA.setPixelF = function(this1,x,y,v) {
	var pix = (x + y * this1.width << 4) + this1.offset;
	this1.bytes.setFloat(pix,v.x);
	this1.bytes.setFloat(pix + 4,v.y);
	this1.bytes.setFloat(pix + 8,v.z);
	this1.bytes.setFloat(pix + 12,v.w);
};
hxd_PixelsFloatRGBA.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.RGBA32F);
	return p;
};
var hxd_Channel = {};
hxd_Channel.toInt = function(this1) {
	return this1;
};
hxd_Channel.fromInt = function(v) {
	return v;
};
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
	var i = 0;
	if(i == null) {
		i = 0;
	}
	this.flags = i;
};
$hxClasses["hxd.Pixels"] = hxd_Pixels;
hxd_Pixels.__name__ = "hxd.Pixels";
hxd_Pixels.switchEndian = function(v) {
	return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
};
hxd_Pixels.switchBR = function(v) {
	return v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
};
hxd_Pixels.calcDataSize = function(width,height,format) {
	if(format._hx_index == 22) {
		return (height + 3 >> 2 << 2) * hxd_Pixels.calcStride(width,format);
	} else {
		return height * hxd_Pixels.calcStride(width,format);
	}
};
hxd_Pixels.calcStride = function(width,format) {
	var tmp;
	switch(format._hx_index) {
	case 3:case 21:
		tmp = 8;
		break;
	case 4:
		tmp = 16;
		break;
	case 5:
		tmp = 1;
		break;
	case 6:case 18:
		tmp = 2;
		break;
	case 7:
		tmp = 4;
		break;
	case 8:
		tmp = 2;
		break;
	case 9:case 19:
		tmp = 4;
		break;
	case 10:
		tmp = 8;
		break;
	case 11:
		tmp = 3;
		break;
	case 12:case 20:
		tmp = 6;
		break;
	case 13:
		tmp = 12;
		break;
	case 0:case 1:case 2:case 14:case 15:
		tmp = 4;
		break;
	case 16:
		tmp = 4;
		break;
	case 17:
		tmp = 4;
		break;
	case 22:
		var n = format.v;
		var blocks = width + 3 >> 2;
		if(n == 1 || n == 4) {
			return blocks << 1;
		}
		return blocks << 2;
	case 23:case 24:case 25:
		throw haxe_Exception.thrown("Not a pixel format");
	}
	return width * tmp;
};
hxd_Pixels.isFloatFormat = function(format) {
	switch(format._hx_index) {
	case 3:case 6:case 9:case 12:
		return true;
	case 4:case 7:case 10:case 13:
		return true;
	case 22:
		if(format.v == 6) {
			return true;
		} else {
			return false;
		}
		break;
	default:
		return false;
	}
};
hxd_Pixels.getChannelOffset = function(format,channel) {
	switch(format._hx_index) {
	case 0:
		return [1,2,3,0][channel];
	case 1:
		return [2,1,0,3][channel];
	case 4:
		return channel * 4;
	case 8:case 9:case 10:case 19:
		var p = hxd_Pixels.calcStride(1,format);
		return [0,p,-1,-1][channel];
	case 2:case 14:case 15:
		return channel;
	case 16:case 17:
		throw haxe_Exception.thrown("Bit packed format");
	case 5:case 6:case 7:case 18:
		if(channel == 0) {
			return 0;
		} else {
			return -1;
		}
		break;
	case 11:case 12:case 13:case 20:
		var p = hxd_Pixels.calcStride(1,format);
		return [0,p,p << 1,-1][channel];
	case 3:case 21:
		return channel * 2;
	case 22:
		throw haxe_Exception.thrown("Not supported");
	case 23:case 24:case 25:
		throw haxe_Exception.thrown("Not supported");
	}
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,new haxe_io_Bytes(new ArrayBuffer(hxd_Pixels.calcDataSize(width,height,format))),format);
};
hxd_Pixels.toDDSLayers = function(pixels,isCubeMap) {
	if(isCubeMap == null) {
		isCubeMap = false;
	}
	if(pixels.length == 0) {
		throw haxe_Exception.thrown("Must contain at least one image");
	}
	var ref = pixels[0];
	var fmt = ref.innerFormat;
	var levels = [];
	var outSize = 0;
	var _g = 0;
	while(_g < pixels.length) {
		var p = pixels[_g];
		++_g;
		if(!Type.enumEq(p.innerFormat,fmt)) {
			throw haxe_Exception.thrown("All images must be of the same pixel format");
		}
		outSize += p.dataSize;
		var found = false;
		var _g1 = 0;
		while(_g1 < levels.length) {
			var sz = levels[_g1];
			++_g1;
			if(sz[0].width == p.width && sz[0].height == p.height) {
				sz.push(p);
				found = true;
				break;
			}
		}
		if(!found) {
			levels.push([p]);
		}
	}
	levels.sort(function(a1,a2) {
		return a2[0].width * a2[0].height - a1[0].width * a1[0].height;
	});
	var layerCount = levels[0].length;
	var width = levels[0][0].width;
	var height = levels[0][0].height;
	var _g = 1;
	var _g1 = levels.length;
	while(_g < _g1) {
		var i = _g++;
		var level = levels[i];
		if(level.length != layerCount) {
			throw haxe_Exception.thrown("Invalid number of mipmaps at level " + i + ": " + level.length + " should be " + layerCount);
		}
		var w = width >> i;
		if(w == 0) {
			w = 1;
		}
		var h = height >> i;
		if(h == 0) {
			h = 1;
		}
		var lw = level[0].width;
		var lh = level[0].height;
		if(lw != w || lh != h) {
			throw haxe_Exception.thrown("Invalid mip level size " + i + ": " + lw + "x" + lh + " should be " + w + "x" + h);
		}
	}
	outSize += 128;
	var dx10h = layerCount > 1 && !isCubeMap;
	if(dx10h) {
		outSize += 20;
	}
	var ddsOut = new haxe_io_Bytes(new ArrayBuffer(outSize));
	var outPos = 0;
	ddsOut.setInt32(outPos,542327876);
	outPos += 4;
	ddsOut.setInt32(outPos,124);
	outPos += 4;
	ddsOut.setInt32(outPos,135183);
	outPos += 4;
	ddsOut.setInt32(outPos,height);
	outPos += 4;
	ddsOut.setInt32(outPos,width);
	outPos += 4;
	ddsOut.setInt32(outPos,ref.stride);
	outPos += 4;
	ddsOut.setInt32(outPos,1);
	outPos += 4;
	ddsOut.setInt32(outPos,levels.length);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,32);
	outPos += 4;
	if(dx10h) {
		ddsOut.setInt32(outPos,4);
		outPos += 4;
		ddsOut.setInt32(outPos,808540228);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
	} else {
		switch(fmt._hx_index) {
		case 0:case 1:case 2:
			ddsOut.setInt32(outPos,65);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
			ddsOut.setInt32(outPos,32);
			outPos += 4;
			var byte = hxd_Pixels.getChannelOffset(fmt,0);
			ddsOut.setInt32(outPos,255 << byte * 8);
			outPos += 4;
			var byte = hxd_Pixels.getChannelOffset(fmt,1);
			ddsOut.setInt32(outPos,255 << byte * 8);
			outPos += 4;
			var byte = hxd_Pixels.getChannelOffset(fmt,2);
			ddsOut.setInt32(outPos,255 << byte * 8);
			outPos += 4;
			var byte = hxd_Pixels.getChannelOffset(fmt,3);
			ddsOut.setInt32(outPos,255 << byte * 8);
			outPos += 4;
			break;
		default:
			ddsOut.setInt32(outPos,4);
			outPos += 4;
			var v;
			switch(fmt._hx_index) {
			case 3:
				v = 113;
				break;
			case 4:
				v = 116;
				break;
			case 6:
				v = 111;
				break;
			case 7:
				v = 114;
				break;
			case 9:
				v = 112;
				break;
			case 10:
				v = 115;
				break;
			default:
				throw haxe_Exception.thrown("Unsupported format " + Std.string(fmt));
			}
			ddsOut.setInt32(outPos,v);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
			ddsOut.setInt32(outPos,0);
			outPos += 4;
		}
	}
	ddsOut.setInt32(outPos,dx10h ? 4096 : (pixels.length == 1 ? 0 : 8) | 4096 | (levels.length == 1 ? 0 : 4194304));
	outPos += 4;
	var cubebits = 1536 | (layerCount > 1 ? 2048 : 0) | (layerCount > 2 ? 4096 : 0) | (layerCount > 3 ? 8192 : 0) | (layerCount > 4 ? 16384 : 0) | (layerCount > 5 ? 32768 : 0);
	ddsOut.setInt32(outPos,isCubeMap ? cubebits : 0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	ddsOut.setInt32(outPos,0);
	outPos += 4;
	if(dx10h) {
		switch(fmt._hx_index) {
		case 2:
			ddsOut.setInt32(outPos,28);
			outPos += 4;
			break;
		case 22:
			var n = fmt.v;
			var v;
			switch(n) {
			case 1:
				v = 71;
				break;
			case 2:
				v = 74;
				break;
			case 3:
				v = 77;
				break;
			default:
				throw haxe_Exception.thrown("Unnsupported format " + Std.string(fmt));
			}
			ddsOut.setInt32(outPos,v);
			outPos += 4;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported DXT10 format " + Std.string(fmt));
		}
		ddsOut.setInt32(outPos,3);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
		ddsOut.setInt32(outPos,layerCount);
		outPos += 4;
		ddsOut.setInt32(outPos,0);
		outPos += 4;
	}
	var _g = 0;
	var _g1 = layerCount;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = levels.length;
		while(_g2 < _g3) {
			var l = _g2++;
			var p = levels[l][i];
			ddsOut.blit(outPos,p.bytes,p.offset,p.dataSize);
			outPos += p.dataSize;
		}
	}
	return ddsOut;
};
hxd_Pixels.prototype = {
	get_format: function() {
		return this.innerFormat;
	}
	,set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd_Pixels.calcStride(this.width,fmt);
		this.dataSize = hxd_Pixels.calcDataSize(this.width,this.height,fmt);
		this.bytesPerPixel = hxd_Pixels.calcStride(1,fmt);
		return fmt;
	}
	,invalidFormat: function() {
		throw haxe_Exception.thrown("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	,sub: function(x,y,width,height) {
		if(x < 0 || y < 0 || x + width > this.width || y + height > this.height) {
			throw haxe_Exception.thrown("Pixels.sub() outside bounds");
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(height * this.stride));
		var stride = hxd_Pixels.calcStride(width,this.innerFormat);
		var outP = 0;
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var dy = _g++;
			var p = (x + (y + dy) * this.width) * this.bytesPerPixel + this.offset;
			out.blit(outP,this.bytes,p,stride);
			outP += stride;
		}
		return new hxd_Pixels(width,height,out,this.innerFormat);
	}
	,blit: function(x,y,src,srcX,srcY,width,height) {
		if(x < 0 || y < 0 || x + width > this.width || y + height > this.height) {
			throw haxe_Exception.thrown("Pixels.blit() outside bounds");
		}
		if(srcX < 0 || srcX < 0 || srcX + width > src.width || srcY + height > src.height) {
			throw haxe_Exception.thrown("Pixels.blit() outside src bounds");
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		src.convert(this.innerFormat);
		var bpp = this.bytesPerPixel;
		if(bpp == 0) {
			throw haxe_Exception.thrown("assert");
		}
		var stride = hxd_Pixels.calcStride(width,this.innerFormat);
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var dy = _g++;
			var srcP = (srcX + (dy + srcY) * src.width) * bpp + src.offset;
			var dstP = (x + (dy + y) * this.width) * bpp + this.offset;
			this.bytes.blit(dstP,src.bytes,srcP,stride);
		}
	}
	,clear: function(color,preserveMask) {
		if(preserveMask == null) {
			preserveMask = 0;
		}
		var mask = preserveMask;
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if((color & 255) == (color >> 8 & 255) && (color & 65535) == color >>> 16 && mask == 0) {
			this.bytes.fill(this.offset,this.width * this.height * this.bytesPerPixel,color & 255);
			return;
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			color = color >>> 24 | color >> 8 & 65280 | color << 8 & 16711680 | color << 24;
			mask = mask >>> 24 | mask >> 8 & 65280 | mask << 8 & 16711680 | mask << 24;
			break;
		case 1:
			break;
		case 2:
			color = color & -16711936 | color << 16 & 16711680 | color >> 16 & 255;
			mask = mask & -16711936 | mask << 16 & 16711680 | mask >> 16 & 255;
			break;
		default:
			this.invalidFormat();
		}
		var p = this.offset;
		if(mask == 0) {
			var _g = 0;
			var _g1 = this.width * this.height;
			while(_g < _g1) {
				var i = _g++;
				this.bytes.setInt32(p,color);
				p += 4;
			}
		} else {
			var _g = 0;
			var _g1 = this.width * this.height;
			while(_g < _g1) {
				var i = _g++;
				this.bytes.setInt32(p,color | this.bytes.getInt32(p) & mask);
				p += 4;
			}
		}
	}
	,toVector: function() {
		var vec = new Array(this.width * this.height);
		var idx = 0;
		var p = this.offset;
		var dl = 0;
		switch(this.innerFormat._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = this.bytes.getInt32(p);
					vec[idx++] = v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
					p += 4;
				}
				p += dl;
			}
			break;
		case 1:
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					vec[idx++] = this.bytes.getInt32(p);
					p += 4;
				}
				p += dl;
			}
			break;
		case 2:
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = this.bytes.getInt32(p);
					vec[idx++] = v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
					p += 4;
				}
				p += dl;
			}
			break;
		default:
			this.invalidFormat();
		}
		return vec;
	}
	,makeSquare: function(copy) {
		var w = this.width;
		var h = this.height;
		var tw = w == 0 ? 0 : 1;
		var th = h == 0 ? 0 : 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(w == tw && h == th) {
			return this;
		}
		var bpp = this.bytesPerPixel;
		var out = new haxe_io_Bytes(new ArrayBuffer(tw * th * bpp));
		var p = 0;
		var b = this.offset;
		var _g = 0;
		var _g1 = h;
		while(_g < _g1) {
			var y = _g++;
			out.blit(p,this.bytes,b,w * bpp);
			p += w * bpp;
			b += w * bpp;
			var _g2 = 0;
			var _g3 = (tw - w) * bpp >> 2;
			while(_g2 < _g3) {
				var i = _g2++;
				out.setInt32(p,0);
				p += 4;
			}
		}
		var _g = 0;
		var _g1 = (th - h) * tw * bpp >> 2;
		while(_g < _g1) {
			var i = _g++;
			out.setInt32(p,0);
			p += 4;
		}
		if(copy) {
			return new hxd_Pixels(tw,th,out,this.innerFormat);
		}
		this.bytes = out;
		this.width = tw;
		this.height = th;
		return this;
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.dataSize));
		this.bytes.blit(0,old,this.offset,this.dataSize);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
	}
	,willChange: function() {
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
	}
	,flipY: function() {
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		var _g = 0;
		var _g1 = this.height >> 1;
		while(_g < _g1) {
			var y = _g++;
			var p1 = y * this.stride + this.offset;
			var p2 = (this.height - 1 - y) * this.stride + this.offset;
			var _g2 = 0;
			var _g3 = this.stride >> 2;
			while(_g2 < _g3) {
				var x = _g2++;
				var a = this.bytes.getInt32(p1);
				var b = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target || Type.enumEq(this.innerFormat,target)) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		var bytes = this.bytes.b;
		var _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var v = bytes[p + 1];
					bytes[p] = v;
					var v1 = bytes[p + 2];
					bytes[p + 1] = v1;
					var v2 = bytes[p + 3];
					bytes[p + 2] = v2;
					bytes[p + 3] = a;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p + 3];
					var v = bytes[p + 2];
					bytes[p + 3] = v;
					var v1 = bytes[p + 1];
					bytes[p + 2] = v1;
					var v2 = bytes[p];
					bytes[p + 1] = v2;
					bytes[p] = a;
				}
				break;
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			case 5:
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height));
				var out = nbytes.b;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var v = bytes[i << 2];
					out[i] = v;
				}
				this.bytes = nbytes;
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 4:
			if(target._hx_index == 7) {
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.height * this.width * 4));
				var out = nbytes.b;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					nbytes.setFloat(i << 2,this.bytes.getFloat(i << 4));
				}
				this.bytes = nbytes;
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 7:
			switch(target._hx_index) {
			case 1:case 2:
				var fbytes = this.bytes;
				var p = 0;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var v = fbytes.getFloat(p) * 255 | 0;
					if(v < 0) {
						v = 0;
					} else if(v > 255) {
						v = 255;
					}
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = 255;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 7) {
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
				var fbytes = this.bytes;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var nv = fbytes.getUInt16(i << 1);
					nbytes.setFloat(i << 2,nv / 65535.0);
				}
				this.bytes = nbytes;
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 22:
			if(target._hx_index == 22) {
				var b = target.v;
				var a = _g.v;
				if(a != b) {
					throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,getPixel: function(x,y) {
		var p = (x + y * this.width) * this.bytesPerPixel + this.offset;
		switch(this.innerFormat._hx_index) {
		case 0:
			var v = this.bytes.getInt32(p);
			return v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
		case 1:
			return this.bytes.getInt32(p);
		case 2:
			var v = this.bytes.getInt32(p);
			return v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
		case 5:
			return this.bytes.b[p];
		case 8:
			var b = this.bytes.getUInt16(p);
			return (b & 255) << 8 | b >> 8;
		default:
			this.invalidFormat();
			return 0;
		}
	}
	,setPixel: function(x,y,color) {
		var p = (x + y * this.width) * this.bytesPerPixel + this.offset;
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			this.bytes.setInt32(p,color >>> 24 | color >> 8 & 65280 | color << 8 & 16711680 | color << 24);
			break;
		case 1:
			this.bytes.setInt32(p,color);
			break;
		case 2:
			this.bytes.setInt32(p,color & -16711936 | color << 16 & 16711680 | color >> 16 & 255);
			break;
		case 5:
			this.bytes.b[p] = color;
			break;
		case 8:
			this.bytes.setUInt16(p,(color & 255) << 8 | (color & 65280) >> 8);
			break;
		default:
			this.invalidFormat();
		}
	}
	,getPixelF: function(x,y,v) {
		if(v == null) {
			v = new h3d_Vector4Impl(0.,0.,0.,1.);
		}
		var p = (x + y * this.width) * this.bytesPerPixel + this.offset;
		switch(this.innerFormat._hx_index) {
		case 4:
			var x1 = this.bytes.getFloat(p);
			var y1 = this.bytes.getFloat(p + 4);
			var z = this.bytes.getFloat(p + 8);
			var w = this.bytes.getFloat(p + 12);
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			v.x = x1;
			v.y = y1;
			v.z = z;
			v.w = w;
			return v;
		case 7:
			var x1 = this.bytes.getFloat(p);
			var y1 = 0;
			var z = 0;
			var w = 0;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			v.x = x1;
			v.y = y1;
			v.z = z;
			v.w = w;
			return v;
		case 10:
			var x1 = this.bytes.getFloat(p);
			var y1 = this.bytes.getFloat(p + 4);
			var z = 0;
			var w = 0;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			v.x = x1;
			v.y = y1;
			v.z = z;
			v.w = w;
			return v;
		case 18:
			var x1 = this.bytes.getUInt16(p) / 65535.0;
			var y1 = 0;
			var z = 0;
			var w = 0;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			v.x = x1;
			v.y = y1;
			v.z = z;
			v.w = w;
			return v;
		default:
			var c = this.getPixel(x,y);
			v.x = (c >> 16 & 255) / 255;
			v.y = (c >> 8 & 255) / 255;
			v.z = (c & 255) / 255;
			v.w = (c >>> 24) / 255;
			return v;
		}
	}
	,setPixelF: function(x,y,v) {
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		var p = (x + y * this.width) * this.bytesPerPixel + this.offset;
		switch(this.innerFormat._hx_index) {
		case 4:
			this.bytes.setFloat(p,v.x);
			this.bytes.setFloat(p + 4,v.y);
			this.bytes.setFloat(p + 8,v.z);
			this.bytes.setFloat(p + 12,v.w);
			break;
		case 7:
			this.bytes.setFloat(p,v.x);
			break;
		default:
			var f = v.w;
			var f1 = v.x;
			var f2 = v.y;
			var f3 = v.z;
			this.setPixel(x,y,((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 24 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 16 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0) << 8 | ((f3 < 0. ? 0. : f3 > 1. ? 1. : f3) * 255 + 0.499 | 0));
		}
	}
	,dispose: function() {
		this.bytes = null;
	}
	,toString: function() {
		return "Pixels(" + this.width + "x" + this.height + " " + Std.string(this.innerFormat) + ")";
	}
	,toPNG: function(level) {
		if(level == null) {
			level = 9;
		}
		var png;
		if(this.offset != 0) {
			this.bytes = this.bytes.sub(this.offset,hxd_Pixels.calcDataSize(this.width,this.height,this.innerFormat));
			this.offset = 0;
		}
		switch(this.innerFormat._hx_index) {
		case 0:
			png = format_png_Tools.build32ARGB(this.width,this.height,this.bytes,level);
			break;
		case 5:
			png = format_png_Tools.buildGrey(this.width,this.height,this.bytes,level);
			break;
		default:
			this.convert(hxd_PixelFormat.BGRA);
			png = format_png_Tools.build32BGRA(this.width,this.height,this.bytes,level);
		}
		var o = new haxe_io_BytesOutput();
		new format_png_Writer(o).write(png);
		return o.getBytes();
	}
	,toDDS: function() {
		return hxd_Pixels.toDDSLayers([this]);
	}
	,clone: function() {
		var p = new hxd_Pixels(this.width,this.height,null,this.innerFormat);
		p.flags = this.flags;
		p.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
		if(this.bytes != null) {
			p.bytes = new haxe_io_Bytes(new ArrayBuffer(this.dataSize));
			p.bytes.blit(0,this.bytes,this.offset,this.dataSize);
		}
		return p;
	}
	,__class__: hxd_Pixels
};
var hxd_Res = function() { };
$hxClasses["hxd.Res"] = hxd_Res;
hxd_Res.__name__ = "hxd.Res";
hxd_Res.load = function(name) {
	return hxd_Res.get_loader().load(name);
};
hxd_Res.get_loader = function() {
	var l = hxd_res_Loader.currentInstance;
	if(l == null) {
		throw haxe_Exception.thrown("Resource loader not initialized: call to hxd.Res.initXXX() required");
	}
	return l;
};
hxd_Res.set_loader = function(l) {
	return hxd_res_Loader.currentInstance = l;
};
var hxd_SceneEvents = function($window) {
	this.defaultCursor = hxd_Cursor.Default;
	this.mouseCheckMove = true;
	this.enablePhysicalMouse = true;
	this.isOut = false;
	this.onOver = new hxd_Event(hxd_EventKind.EOver);
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.overIndex = -1;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	this.overList = [];
	this.overCandidates = [];
	if($window == null) {
		$window = hxd_Window.getInstance();
	}
	this.window = $window;
	$window.addEventTarget($bind(this,this.onEvent));
};
$hxClasses["hxd.SceneEvents"] = hxd_SceneEvents;
hxd_SceneEvents.__name__ = "hxd.SceneEvents";
hxd_SceneEvents.prototype = {
	setMousePos: function(xPos,yPos) {
		this.mouseX = xPos;
		this.mouseY = yPos;
	}
	,onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			var index = this.overList.indexOf(i);
			if(index >= 0) {
				HxOverrides.remove(this.overList,i);
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,removeScene: function(s) {
		if(HxOverrides.remove(this.scenes,s)) {
			s.setEvents(null);
		}
	}
	,dispose: function() {
		this.window.removeEventTarget($bind(this,this.onEvent));
	}
	,focus: function(i) {
		if(this.currentFocus == i) {
			return;
		}
		if(i == null) {
			this.blur();
			return;
		}
		if(this.currentFocus != null) {
			this.blur();
			if(this.currentFocus != null) {
				return;
			}
		}
		var e = new hxd_Event(hxd_EventKind.EFocus);
		i.handleEvent(e);
		if(!e.cancel) {
			this.currentFocus = i;
		}
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var overCandidateCount = 0;
		var handled = false;
		var checkOver = false;
		var fillOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		default:
		}
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						var idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								var info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								do {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
								} while(idx < this.overIndex);
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								do {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
								} while(idx > this.overIndex);
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				while(this.overIndex < this.overList.length) {
					var e = this.overList.pop();
					e.handleEvent(this.onOut);
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				var i = 0;
				var ev = this.onOver;
				do {
					var info = this.overCandidates[i++];
					ev.relX = info.x;
					ev.relY = info.y;
					ev.relZ = info.z;
					if(info.s.isInteractiveVisible(info.i)) {
						info.i.handleEvent(ev);
					} else {
						HxOverrides.remove(this.overList,info.i);
					}
					info.i = null;
					info.s = null;
				} while(i < overCandidateCount);
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g = 0;
			var _g1 = this.pushList;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i == null) {
					event.kind = hxd_EventKind.EReleaseOutside;
					this.dispatchListeners(event);
					event.kind = hxd_EventKind.ERelease;
				} else {
					var s = i.getInteractiveScene();
					if(s == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s.dispatchEvent(event,i);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = !this.mouseCheckMove;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						var i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,startCapture: function(f,onCancel,touchId) {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = { f : f, ref : touchId, onCancel : onCancel};
	}
	,stopCapture: function() {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = null;
	}
	,startDrag: function(f,onCancel,refEvent) {
		this.startCapture(f,onCancel,refEvent != null ? refEvent.touchId : null);
	}
	,stopDrag: function() {
		this.stopCapture();
	}
	,getFocus: function() {
		return this.currentFocus;
	}
	,updateCursor: function(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	,set_defaultCursor: function(c) {
		if(Type.enumEq(c,this.defaultCursor)) {
			return c;
		}
		this.defaultCursor = c;
		this.selectCursor();
		return c;
	}
	,selectCursor: function() {
		var cur = this.defaultCursor;
		var _g = 0;
		var _g1 = this.overList;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			var f = cur.f;
			f();
		} else {
			hxd_System.setCursor(cur);
		}
	}
	,onEvent: function(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd_EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
};
var hxd_Platform = $hxEnums["hxd.Platform"] = { __ename__:"hxd.Platform",__constructs__:null
	,IOS: {_hx_name:"IOS",_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_name:"Android",_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_name:"WebGL",_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_name:"PC",_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_name:"Console",_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_name:"FlashPlayer",_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd_Platform.__constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__:"hxd.SystemValue",__constructs__:null
	,IsTouch: {_hx_name:"IsTouch",_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_name:"IsWindowed",_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_name:"IsMobile",_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd_SystemValue.__constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var hxd_Timer = function() { };
$hxClasses["hxd.Timer"] = hxd_Timer;
hxd_Timer.__name__ = "hxd.Timer";
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = HxOverrides.now() / 1000;
	hxd_Timer.elapsedTime = newTime - hxd_Timer.lastTimeStamp;
	hxd_Timer.lastTimeStamp = newTime;
	if(hxd_Timer.elapsedTime < hxd_Timer.maxDeltaTime) {
		var a = hxd_Timer.elapsedTime;
		hxd_Timer.currentDT = a + hxd_Timer.smoothFactor * (hxd_Timer.currentDT - a);
	} else {
		hxd_Timer.elapsedTime = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.dt = hxd_Timer.currentDT;
};
hxd_Timer.get_tmod = function() {
	return hxd_Timer.dt * hxd_Timer.wantedFPS;
};
hxd_Timer.set_tmod = function(v) {
	hxd_Timer.dt = v / hxd_Timer.wantedFPS;
	return v;
};
hxd_Timer.fps = function() {
	return 1. / hxd_Timer.currentDT;
};
hxd_Timer.skip = function() {
	hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
};
hxd_Timer.reset = function() {
	hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
	hxd_Timer.dt = hxd_Timer.currentDT = 1. / hxd_Timer.wantedFPS;
};
var hxd_Window = function(canvas,globalEvents) {
	this.canLockMouse = true;
	this.discardMouseUp = -1;
	this.discardMouseCaptureEvent = true;
	this.useScreenPixels = js_Browser.get_supported();
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	this.mouseMode = hxd_impl_MouseMode.Absolute;
	var _gthis = this;
	var customCanvas = canvas != null;
	this.eventTargets = new haxe_ds_List();
	this.resizeEvents = new haxe_ds_List();
	this.dropTargets = new haxe_ds_List();
	if(!js_Browser.get_supported()) {
		this.canvasPos = { "width" : 0, "top" : 0, "left" : 0, "height" : 0};
		return;
	}
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw haxe_Exception.thrown("Missing canvas #webgl");
		}
		if(canvas.getAttribute("globalEvents") == "1") {
			globalEvents = true;
		}
	}
	this.canvas = canvas;
	this.propagateKeyEvents = globalEvents;
	var propagate = canvas.getAttribute("propagateKeyEvents");
	if(propagate != null) {
		this.propagateKeyEvents = propagate != "0" && propagate != "false";
	}
	this.focused = globalEvents;
	this.element = globalEvents ? window : canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	if(customCanvas) {
		canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
	} else {
		window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	}
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("mouseleave",$bind(this,this.onMouseLeave));
	this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	var _g = this;
	var b = false;
	var tmp = function() {
		_g.onFocus(b);
	};
	this.element.addEventListener("blur",tmp);
	var _g1 = this;
	var b1 = true;
	var tmp = function() {
		_g1.onFocus(b1);
	};
	this.element.addEventListener("focus",tmp);
	if(window.ResizeObserver != null) {
		this.observer = new ResizeObserver(function(e) {
			_gthis.checkResize();
		});
		this.observer.observe(canvas);
	}
	window.addEventListener("resize",$bind(this,this.checkResize));
	window.document.addEventListener("pointerlockchange",$bind(this,this.onPointerLockChange));
	canvas.addEventListener("contextmenu",function(e) {
		e.stopPropagation();
		if(e.button == 2) {
			e.preventDefault();
		}
		return false;
	});
	if(globalEvents) {
		canvas.addEventListener("mousedown",function(e) {
			_gthis.onMouseDown(e);
			e.stopPropagation();
			e.preventDefault();
		});
		this.element.addEventListener("contextmenu",function(e) {
			e.stopPropagation();
			e.preventDefault();
			return false;
		});
	} else {
		if(canvas.getAttribute("tabindex") == null) {
			canvas.setAttribute("tabindex","1");
		}
		canvas.style.outline = "none";
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
};
$hxClasses["hxd.Window"] = hxd_Window;
hxd_Window.__name__ = "hxd.Window";
hxd_Window.getInstance = function() {
	if(hxd_Window.inst == null) {
		hxd_Window.inst = new hxd_Window();
	}
	return hxd_Window.inst;
};
hxd_Window.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,dispose: function() {
		if(hxd_Window.inst == this) {
			hxd_Window.inst = null;
		}
		if(window.ResizeObserver != null) {
			this.observer.disconnect();
			this.observer = null;
		}
	}
	,onClose: function() {
		return true;
	}
	,onMouseModeChange: function(from,to) {
		return null;
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e == et) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e == f) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,resize: function(width,height) {
	}
	,addDragAndDropTarget: function(f) {
		if(this.dropTargets.length == 0) {
			var element = this.canvas;
			element.addEventListener("dragover",$bind(this,this.handleDragAndDropEvent));
			element.addEventListener("drop",$bind(this,this.handleDragAndDropEvent));
		}
		this.dropTargets.add(f);
	}
	,removeDragAndDropTarget: function(f) {
		var _g_head = this.dropTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e == f) {
				this.dropTargets.remove(f);
				break;
			}
		}
		if(this.dropTargets.length == 0) {
			var element = this.canvas;
			element.removeEventListener("dragover",$bind(this,this.handleDragAndDropEvent));
			element.removeEventListener("drop",$bind(this,this.handleDragAndDropEvent));
		}
	}
	,handleDragAndDropEvent: function(e) {
		e.preventDefault();
		if(e.type == "dragover" || e.dataTransfer == null || e.dataTransfer.files.length == 0) {
			return;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = e.dataTransfer.files;
		while(_g1 < _g2.length) {
			var file = _g2[_g1];
			++_g1;
			_g.push(new hxd__$Window_NativeDroppedFile(file));
		}
		var ev = new hxd_DropFileEvent(_g,Math.round((e.clientX - this.canvasPos.left) * this.getPixelRatio()),Math.round((e.clientY - this.canvasPos.top) * this.getPixelRatio()));
		var _g_head = this.dropTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var dt = val;
			dt(ev);
		}
	}
	,setFullScreen: function(v) {
		var doc = window.document;
		var elt = doc.documentElement;
		if(doc.fullscreenElement == elt == v) {
			return;
		}
		if(v) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
	}
	,setCursorPos: function(x,y,emitEvent) {
		if(emitEvent == null) {
			emitEvent = false;
		}
		if(this.mouseMode == hxd_impl_MouseMode.Absolute) {
			throw haxe_Exception.thrown("setCursorPos only allowed in relative mouse modes on this platform.");
		}
		this.curMouseX = x + this.canvasPos.left;
		this.curMouseY = y + this.canvasPos.top;
		if(emitEvent) {
			this.event(new hxd_Event(hxd_EventKind.EMove,x,y));
		}
	}
	,setCurrent: function() {
		hxd_Window.inst = this;
	}
	,getPixelRatio: function() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	,get_mouseLock: function() {
		if(this.mouseMode._hx_index == 2) {
			return true;
		} else {
			return false;
		}
	}
	,set_mouseLock: function(v) {
		return Type.enumEq(this.set_mouseMode(v ? hxd_impl_MouseMode.AbsoluteUnbound(true) : hxd_impl_MouseMode.Absolute),hxd_impl_MouseMode.AbsoluteUnbound(true));
	}
	,get_mouseClip: function() {
		return false;
	}
	,set_mouseClip: function(v) {
		if(v) {
			throw haxe_Exception.thrown("Can't clip cursor on this platform.");
		}
		return false;
	}
	,set_mouseMode: function(v) {
		if(Type.enumEq(v,this.mouseMode)) {
			return v;
		}
		var forced = this.onMouseModeChange(this.mouseMode,v);
		if(forced != null) {
			v = forced;
		}
		var target = this.pointerLockTarget = this.canvas != null ? this.canvas : window.document.documentElement;
		if(v == hxd_impl_MouseMode.Absolute) {
			if(target.ownerDocument.pointerLockElement == target) {
				target.ownerDocument.exitPointerLock();
			}
		} else if(this.canLockMouse) {
			if(target.ownerDocument.pointerLockElement != target) {
				target.requestPointerLock();
			}
		}
		return this.mouseMode = v;
	}
	,get_vsync: function() {
		return true;
	}
	,set_vsync: function(b) {
		if(!b) {
			throw haxe_Exception.thrown("Can't disable vsync on this platform");
		}
		return true;
	}
	,onPointerLockChange: function(e) {
		if(this.mouseMode != hxd_impl_MouseMode.Absolute && this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
			this.canLockMouse = false;
			this.set_mouseMode(hxd_impl_MouseMode.Absolute);
			this.canLockMouse = true;
		}
	}
	,onMouseDown: function(e) {
		if(this.mouseMode == hxd_impl_MouseMode.Absolute) {
			if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
				this.onMouseMove(e);
			}
		} else {
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				this.pointerLockTarget.requestPointerLock();
				if(this.discardMouseCaptureEvent) {
					this.discardMouseUp = e.button;
					return;
				}
			}
			if(e.movementX != 0 || e.movementY != 0) {
				this.onMouseMove(e);
			}
		}
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		if(this.discardMouseUp == e.button) {
			this.discardMouseUp = -1;
			return;
		}
		if(this.mouseMode == hxd_impl_MouseMode.Absolute ? e.clientX != this.curMouseX || e.clientY != this.curMouseY : e.movementX != 0 || e.movementY != 0) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseLeave: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EReleaseOutside,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		var _g = this.mouseMode;
		switch(_g._hx_index) {
		case 0:
			this.curMouseX = e.clientX;
			this.curMouseY = e.clientY;
			this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
			break;
		case 1:
			var callback = _g.callback;
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				return;
			}
			var ev = new hxd_Event(hxd_EventKind.EMove,e.movementX,e.movementY);
			callback(ev);
			if(!ev.cancel && ev.propagate) {
				ev.cancel = false;
				ev.propagate = false;
				ev.relX = this.curMouseX;
				ev.relY = this.curMouseY;
				this.event(ev);
			}
			break;
		case 2:
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				return;
			}
			this.curMouseX += e.movementX;
			this.curMouseY += e.movementY;
			this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
			break;
		}
	}
	,onMouseWheel: function(e) {
		e.preventDefault();
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onFocus: function(b) {
		this.event(new hxd_Event(b ? hxd_EventKind.EFocus : hxd_EventKind.EFocusLost));
		this.focused = b;
	}
	,get_isFocused: function() {
		return this.focused;
	}
	,get_displayMode: function() {
		var doc = window.document;
		if(doc.fullscreenElement != null) {
			return hxd_DisplayMode.Borderless;
		}
		return hxd_DisplayMode.Windowed;
	}
	,set_displayMode: function(m) {
		if(!js_Browser.get_supported()) {
			return m;
		}
		var doc = window.document;
		var elt = doc.documentElement;
		var fullscreen = m != hxd_DisplayMode.Windowed;
		if(doc.fullscreenElement == elt == fullscreen) {
			return hxd_DisplayMode.Windowed;
		}
		if(m != hxd_DisplayMode.Windowed) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
		return m;
	}
	,get_title: function() {
		return window.document.title;
	}
	,set_title: function(t) {
		return window.document.title = t;
	}
	,__class__: hxd_Window
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
var hxd_System = function() { };
$hxClasses["hxd.System"] = hxd_System;
hxd_System.__name__ = "hxd.System";
hxd_System.timeoutTick = function() {
};
hxd_System.getCurrentLoop = function() {
	return hxd_System.loopFunc;
};
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	if(js_Browser.get_supported()) {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(hxd_System.fpsLimit > 0) {
			window.setTimeout(function() {
				return rqf(hxd_System.browserLoop);
			},1000 / hxd_System.fpsLimit);
		} else {
			rqf(hxd_System.browserLoop);
		}
	} else {
		throw haxe_Exception.thrown("Cannot use browserLoop without Browser support nor defining nodejs + hxnodejs");
	}
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	if(hxd_System.currentNativeCursor != null && Type.enumEq(c,hxd_System.currentNativeCursor)) {
		return;
	}
	hxd_System.currentNativeCursor = c;
	hxd_System.currentCustomCursor = null;
	var canvas = hxd_Window.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			var cur = c.custom;
			if(cur.alloc == null) {
				cur.alloc = [];
				var _g = 0;
				var _g1 = cur.frames;
				while(_g < _g1.length) {
					var frame = _g1[_g];
					++_g;
					cur.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + cur.offsetX + " " + cur.offsetY + ", default");
				}
			}
			if(cur.frames.length > 1) {
				hxd_System.currentCustomCursor = cur;
				cur.reset();
			}
			tmp = cur.alloc[cur.frameIndex];
			break;
		case 6:
			throw haxe_Exception.thrown("assert");
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDeviceName = function() {
	return "Unknown";
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	switch(s._hx_index) {
	case 0:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	case 1:
		return true;
	case 2:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	}
};
hxd_System.exit = function() {
};
hxd_System.openURL = function(url) {
	window.open(url,"_blank");
};
hxd_System.updateCursor = function() {
	if(hxd_System.currentCustomCursor != null) {
		var change = hxd_System.currentCustomCursor.update(hxd_Timer.elapsedTime);
		if(change != -1) {
			var canvas = hxd_Window.getInstance().canvas;
			if(canvas != null) {
				canvas.style.cursor = hxd_System.currentCustomCursor.alloc[change];
			}
		}
	}
};
hxd_System.getClipboardText = function() {
	return null;
};
hxd_System.setClipboardText = function(text) {
	return false;
};
hxd_System.getLocale = function() {
	return $global.navigator.language + "_" + $global.navigator.language.toUpperCase();
};
hxd_System.get_width = function() {
	return Math.round(window.document.body.clientWidth * window.devicePixelRatio);
};
hxd_System.get_height = function() {
	return Math.round(window.document.body.clientHeight * window.devicePixelRatio);
};
hxd_System.get_lang = function() {
	return $global.navigator.language;
};
hxd_System.get_platform = function() {
	var ua = $global.navigator.userAgent.toLowerCase();
	if(ua.indexOf("android") >= 0) {
		return hxd_Platform.Android;
	} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
		return hxd_Platform.IOS;
	} else {
		return hxd_Platform.PC;
	}
};
hxd_System.get_screenDPI = function() {
	return 72;
};
hxd_System.get_allowTimeout = function() {
	return false;
};
hxd_System.set_allowTimeout = function(b) {
	return false;
};
var hxd_DisplayMode = $hxEnums["hxd.DisplayMode"] = { __ename__:"hxd.DisplayMode",__constructs__:null
	,Windowed: {_hx_name:"Windowed",_hx_index:0,__enum__:"hxd.DisplayMode",toString:$estr}
	,Borderless: {_hx_name:"Borderless",_hx_index:1,__enum__:"hxd.DisplayMode",toString:$estr}
	,Fullscreen: {_hx_name:"Fullscreen",_hx_index:2,__enum__:"hxd.DisplayMode",toString:$estr}
	,FullscreenResize: {_hx_name:"FullscreenResize",_hx_index:3,__enum__:"hxd.DisplayMode",toString:$estr}
};
hxd_DisplayMode.__constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
hxd_DisplayMode.__empty_constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
var hxd__$Window_NativeDroppedFile = function(native) {
	hxd_DroppedFile.call(this,native.name);
	this.native = native;
};
$hxClasses["hxd._Window.NativeDroppedFile"] = hxd__$Window_NativeDroppedFile;
hxd__$Window_NativeDroppedFile.__name__ = "hxd._Window.NativeDroppedFile";
hxd__$Window_NativeDroppedFile.__super__ = hxd_DroppedFile;
hxd__$Window_NativeDroppedFile.prototype = $extend(hxd_DroppedFile.prototype,{
	getBytes: function(callback) {
		var reader = new FileReader();
		reader.onload = function(_) {
			callback(haxe_io_Bytes.ofData(reader.result));
		};
		reader.onerror = function(_) {
			callback(null);
		};
		reader.readAsArrayBuffer(this.native);
	}
	,__class__: hxd__$Window_NativeDroppedFile
});
var hxd_clipper_ClipType = $hxEnums["hxd.clipper.ClipType"] = { __ename__:"hxd.clipper.ClipType",__constructs__:null
	,Intersection: {_hx_name:"Intersection",_hx_index:0,__enum__:"hxd.clipper.ClipType",toString:$estr}
	,Union: {_hx_name:"Union",_hx_index:1,__enum__:"hxd.clipper.ClipType",toString:$estr}
	,Difference: {_hx_name:"Difference",_hx_index:2,__enum__:"hxd.clipper.ClipType",toString:$estr}
	,Xor: {_hx_name:"Xor",_hx_index:3,__enum__:"hxd.clipper.ClipType",toString:$estr}
};
hxd_clipper_ClipType.__constructs__ = [hxd_clipper_ClipType.Intersection,hxd_clipper_ClipType.Union,hxd_clipper_ClipType.Difference,hxd_clipper_ClipType.Xor];
hxd_clipper_ClipType.__empty_constructs__ = [hxd_clipper_ClipType.Intersection,hxd_clipper_ClipType.Union,hxd_clipper_ClipType.Difference,hxd_clipper_ClipType.Xor];
var hxd_clipper__$Clipper_EdgeSide = $hxEnums["hxd.clipper._Clipper.EdgeSide"] = { __ename__:"hxd.clipper._Clipper.EdgeSide",__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"hxd.clipper._Clipper.EdgeSide",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"hxd.clipper._Clipper.EdgeSide",toString:$estr}
};
hxd_clipper__$Clipper_EdgeSide.__constructs__ = [hxd_clipper__$Clipper_EdgeSide.Left,hxd_clipper__$Clipper_EdgeSide.Right];
hxd_clipper__$Clipper_EdgeSide.__empty_constructs__ = [hxd_clipper__$Clipper_EdgeSide.Left,hxd_clipper__$Clipper_EdgeSide.Right];
var hxd_clipper__$Clipper_Direction = $hxEnums["hxd.clipper._Clipper.Direction"] = { __ename__:"hxd.clipper._Clipper.Direction",__constructs__:null
	,RightToLeft: {_hx_name:"RightToLeft",_hx_index:0,__enum__:"hxd.clipper._Clipper.Direction",toString:$estr}
	,LeftToRight: {_hx_name:"LeftToRight",_hx_index:1,__enum__:"hxd.clipper._Clipper.Direction",toString:$estr}
};
hxd_clipper__$Clipper_Direction.__constructs__ = [hxd_clipper__$Clipper_Direction.RightToLeft,hxd_clipper__$Clipper_Direction.LeftToRight];
hxd_clipper__$Clipper_Direction.__empty_constructs__ = [hxd_clipper__$Clipper_Direction.RightToLeft,hxd_clipper__$Clipper_Direction.LeftToRight];
var hxd_clipper__$Clipper_PolyNode = function() {
	var points = [];
	this.polygon = points == null ? [] : points;
	this.childs = [];
};
$hxClasses["hxd.clipper._Clipper.PolyNode"] = hxd_clipper__$Clipper_PolyNode;
hxd_clipper__$Clipper_PolyNode.__name__ = "hxd.clipper._Clipper.PolyNode";
hxd_clipper__$Clipper_PolyNode.prototype = {
	isHoleNode: function() {
		var result = true;
		var node = this.parent;
		while(node != null) {
			result = !result;
			node = node.parent;
		}
		return result;
	}
	,get_childCount: function() {
		return this.childs.length;
	}
	,get_contour: function() {
		return this.polygon;
	}
	,addChild: function(child) {
		var cnt = this.childs.length;
		this.childs.push(child);
		child.parent = this;
		child.index = cnt;
	}
	,getNext: function() {
		if(this.childs.length > 0) {
			return this.childs[0];
		} else {
			return this.getNextSiblingUp();
		}
	}
	,getNextSiblingUp: function() {
		if(this.parent == null) {
			return null;
		} else if(this.index == this.parent.childs.length - 1) {
			return this.parent.getNextSiblingUp();
		} else {
			return this.parent.childs[this.index + 1];
		}
	}
	,isHole: function() {
		return this.isHoleNode();
	}
	,__class__: hxd_clipper__$Clipper_PolyNode
};
var hxd_clipper__$Clipper_PolyTree = function() {
	hxd_clipper__$Clipper_PolyNode.call(this);
	this.allPolys = [];
};
$hxClasses["hxd.clipper._Clipper.PolyTree"] = hxd_clipper__$Clipper_PolyTree;
hxd_clipper__$Clipper_PolyTree.__name__ = "hxd.clipper._Clipper.PolyTree";
hxd_clipper__$Clipper_PolyTree.__super__ = hxd_clipper__$Clipper_PolyNode;
hxd_clipper__$Clipper_PolyTree.prototype = $extend(hxd_clipper__$Clipper_PolyNode.prototype,{
	toPolygons: function(polygons) {
		polygons = [];
		this.addRec(this,polygons);
	}
	,addRec: function(polynode,polygons) {
		if(polynode.polygon.length > 0) {
			polygons.push(polynode.polygon);
		}
		var _g = 0;
		var _g1 = polynode.childs;
		while(_g < _g1.length) {
			var pn = _g1[_g];
			++_g;
			this.addRec(pn,polygons);
		}
	}
	,clear: function() {
		this.allPolys = [];
		this.childs = [];
	}
	,getFirst: function() {
		if(this.childs.length > 0) {
			return this.childs[0];
		}
		return null;
	}
	,get_total: function() {
		var result = this.allPolys.length;
		if(result > 0 && this.childs[0] != this.allPolys[0]) {
			--result;
		}
		return result;
	}
	,__class__: hxd_clipper__$Clipper_PolyTree
});
var hxd_clipper__$Clipper_Ref = function(v) {
	this.val = v;
};
$hxClasses["hxd.clipper._Clipper.Ref"] = hxd_clipper__$Clipper_Ref;
hxd_clipper__$Clipper_Ref.__name__ = "hxd.clipper._Clipper.Ref";
hxd_clipper__$Clipper_Ref.prototype = {
	__class__: hxd_clipper__$Clipper_Ref
};
var hxd_clipper__$Clipper_TEdge = function() {
};
$hxClasses["hxd.clipper._Clipper.TEdge"] = hxd_clipper__$Clipper_TEdge;
hxd_clipper__$Clipper_TEdge.__name__ = "hxd.clipper._Clipper.TEdge";
hxd_clipper__$Clipper_TEdge.prototype = {
	get_top: function() {
		return new h2d_col_IPoint(this.topX,this.topY);
	}
	,get_bot: function() {
		return new h2d_col_IPoint(this.botX,this.botY);
	}
	,get_curr: function() {
		return new h2d_col_IPoint(this.currX,this.currY);
	}
	,set_top: function(p) {
		this.topX = p.x;
		this.topY = p.y;
		return p;
	}
	,set_bot: function(p) {
		this.botX = p.x;
		this.botY = p.y;
		return p;
	}
	,set_curr: function(p) {
		this.currX = p.x;
		this.currY = p.y;
		return p;
	}
	,__class__: hxd_clipper__$Clipper_TEdge
};
var hxd_clipper__$Clipper_IntersectNode = function() {
};
$hxClasses["hxd.clipper._Clipper.IntersectNode"] = hxd_clipper__$Clipper_IntersectNode;
hxd_clipper__$Clipper_IntersectNode.__name__ = "hxd.clipper._Clipper.IntersectNode";
hxd_clipper__$Clipper_IntersectNode.prototype = {
	__class__: hxd_clipper__$Clipper_IntersectNode
};
var hxd_clipper__$Clipper_LocalMinima = function() {
};
$hxClasses["hxd.clipper._Clipper.LocalMinima"] = hxd_clipper__$Clipper_LocalMinima;
hxd_clipper__$Clipper_LocalMinima.__name__ = "hxd.clipper._Clipper.LocalMinima";
hxd_clipper__$Clipper_LocalMinima.prototype = {
	__class__: hxd_clipper__$Clipper_LocalMinima
};
var hxd_clipper__$Clipper_Scanbeam = function() {
};
$hxClasses["hxd.clipper._Clipper.Scanbeam"] = hxd_clipper__$Clipper_Scanbeam;
hxd_clipper__$Clipper_Scanbeam.__name__ = "hxd.clipper._Clipper.Scanbeam";
hxd_clipper__$Clipper_Scanbeam.prototype = {
	__class__: hxd_clipper__$Clipper_Scanbeam
};
var hxd_clipper__$Clipper_OutRec = function() {
};
$hxClasses["hxd.clipper._Clipper.OutRec"] = hxd_clipper__$Clipper_OutRec;
hxd_clipper__$Clipper_OutRec.__name__ = "hxd.clipper._Clipper.OutRec";
hxd_clipper__$Clipper_OutRec.prototype = {
	__class__: hxd_clipper__$Clipper_OutRec
};
var hxd_clipper__$Clipper_OutPt = function() {
};
$hxClasses["hxd.clipper._Clipper.OutPt"] = hxd_clipper__$Clipper_OutPt;
hxd_clipper__$Clipper_OutPt.__name__ = "hxd.clipper._Clipper.OutPt";
hxd_clipper__$Clipper_OutPt.prototype = {
	__class__: hxd_clipper__$Clipper_OutPt
};
var hxd_clipper__$Clipper_Join = function() {
};
$hxClasses["hxd.clipper._Clipper.Join"] = hxd_clipper__$Clipper_Join;
hxd_clipper__$Clipper_Join.__name__ = "hxd.clipper._Clipper.Join";
hxd_clipper__$Clipper_Join.prototype = {
	__class__: hxd_clipper__$Clipper_Join
};
var hxd_clipper__$Clipper_ClipperBase = function() {
	this.m_edges = [];
	this.m_MinimaList = null;
	this.m_CurrentLM = null;
};
$hxClasses["hxd.clipper._Clipper.ClipperBase"] = hxd_clipper__$Clipper_ClipperBase;
hxd_clipper__$Clipper_ClipperBase.__name__ = "hxd.clipper._Clipper.ClipperBase";
hxd_clipper__$Clipper_ClipperBase.nearZero = function(v) {
	if(v > -1e-20) {
		return v < 1E-20;
	} else {
		return false;
	}
};
hxd_clipper__$Clipper_ClipperBase.getBounds = function(pols) {
	var result = new hxd_clipper_Rect();
	var i = 0;
	var count = pols.length;
	while(i < count && pols[i].length == 0) ++i;
	var tmp = i == count;
	result.left = result.right = pols[i][0].x;
	result.top = result.bottom = pols[i][0].y;
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		var _g_i = 0;
		var _g_a = pols[i];
		var _g_l = _g_a.length;
		while(_g_i < _g_l) {
			var p = _g_a[_g_i++];
			if(p.x < result.left) {
				result.left = p.x;
			} else if(p.x > result.right) {
				result.right = p.x;
			}
			if(p.y < result.top) {
				result.top = p.y;
			} else if(p.y > result.bottom) {
				result.bottom = p.y;
			}
		}
	}
	return result;
};
hxd_clipper__$Clipper_ClipperBase.prototype = {
	isHorizontal: function(e) {
		return e.deltaY == 0;
	}
	,abs: function(i) {
		if(i < 0) {
			return -i;
		} else {
			return i;
		}
	}
	,PointIsVertex: function(pt,pp) {
		var pp2 = pp;
		do {
			var pt1 = pp2.pt;
			if(pt1.x == pt.x && pt1.y == pt.y) {
				return true;
			}
			pp2 = pp2.next;
		} while(pp2 != pp);
		return false;
	}
	,PointOnLineSegment: function(pt,linePt1,linePt2) {
		if(!(pt.x == linePt1.x && pt.y == linePt1.y || pt.x == linePt2.x && pt.y == linePt2.y)) {
			if(pt.x > linePt1.x == pt.x < linePt2.x && pt.y > linePt1.y == pt.y < linePt2.y) {
				return (pt.x - linePt1.x) * (linePt2.y - linePt1.y) == (linePt2.x - linePt1.x) * (pt.y - linePt1.y);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,PointOnPolygon: function(pt,pp) {
		var pp2 = pp;
		do {
			if(this.PointOnLineSegment(pt,pp2.pt,pp2.next.pt)) {
				return true;
			}
			pp2 = pp2.next;
		} while(pp2 != pp);
		return false;
	}
	,SlopesEqual: function(e1,e2) {
		return e1.deltaY * e2.deltaX == e1.deltaX * e2.deltaY;
	}
	,SlopesEqual3: function(pt1,pt2,pt3) {
		return (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) == 0;
	}
	,clear: function() {
		this.disposeLocalMinimaList();
		this.m_edges = [];
	}
	,disposeLocalMinimaList: function() {
		while(this.m_MinimaList != null) {
			var tmpLm = this.m_MinimaList.next;
			this.m_MinimaList = null;
			this.m_MinimaList = tmpLm;
		}
		this.m_CurrentLM = null;
	}
	,addPolygons: function(ppg,polyType) {
		var result = false;
		var _g_i = 0;
		var _g_a = ppg;
		var _g_l = _g_a.length;
		while(_g_i < _g_l) {
			var p = _g_a[_g_i++];
			if(this.addPolygon(p,polyType)) {
				result = true;
			}
		}
		return result;
	}
	,addPolygon: function(pg,polyType) {
		var highI = pg.length - 1;
		while(highI > 0 && pg[highI] == pg[0]) --highI;
		while(highI > 0 && pg[highI] == pg[highI - 1]) --highI;
		if(highI < 2) {
			return false;
		}
		var edges = [];
		var _g = 0;
		var _g1 = highI + 1;
		while(_g < _g1) {
			var i = _g++;
			edges.push(new hxd_clipper__$Clipper_TEdge());
		}
		var isFlat = true;
		var _this = edges[1];
		var p = pg[1];
		_this.currX = p.x;
		_this.currY = p.y;
		var e = edges[0];
		var pt = pg[0];
		e.next = edges[1];
		e.prev = edges[highI];
		e.currX = pt.x;
		e.currY = pt.y;
		e.outIdx = -1;
		var e = edges[highI];
		var pt = pg[highI];
		e.next = edges[0];
		e.prev = edges[highI - 1];
		e.currX = pt.x;
		e.currY = pt.y;
		e.outIdx = -1;
		var i = highI - 1;
		while(i > 0) {
			var e = edges[i];
			var pt = pg[i];
			e.next = edges[i + 1];
			e.prev = edges[i - 1];
			e.currX = pt.x;
			e.currY = pt.y;
			e.outIdx = -1;
			--i;
		}
		var eStart = edges[0];
		var eStop = eStart;
		var e = eStart;
		while(true) {
			if(e.currX == e.next.currX && e.currY == e.next.currY) {
				if(e == e.next) {
					break;
				}
				if(e == eStart) {
					eStart = e.next;
				}
				e = this.RemoveEdge(e);
				eStop = e;
				continue;
			}
			if(e.prev == e.next) {
				break;
			}
			var tmp;
			var _this = e.prev;
			var x = _this.currX;
			var y = _this.currY;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var pt1_x = x;
			var pt1_y = y;
			var x1 = e.currX;
			var y1 = e.currY;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			var pt2_x = x1;
			var pt2_y = y1;
			var _this1 = e.next;
			var x2 = _this1.currX;
			var y2 = _this1.currY;
			if(y2 == null) {
				y2 = 0;
			}
			if(x2 == null) {
				x2 = 0;
			}
			var pt3_x = x2;
			var pt3_y = y2;
			if((pt1_y - pt2_y) * (pt2_x - pt3_x) - (pt1_x - pt2_x) * (pt2_y - pt3_y) == 0) {
				if(this.preserveCollinear) {
					var _this2 = e.prev;
					var tmp1 = new h2d_col_IPoint(_this2.currX,_this2.currY);
					var tmp2 = new h2d_col_IPoint(e.currX,e.currY);
					var _this3 = e.next;
					tmp = !this.Pt2IsBetweenPt1AndPt3(tmp1,tmp2,new h2d_col_IPoint(_this3.currX,_this3.currY));
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				if(e == eStart) {
					eStart = e.next;
				}
				e = this.RemoveEdge(e);
				e = e.prev;
				eStop = e;
				continue;
			}
			e = e.next;
			if(e == eStop) {
				break;
			}
		}
		if(e.prev == e.next) {
			return false;
		}
		e = eStart;
		do {
			if(e.currY >= e.next.currY) {
				e.botX = e.currX;
				e.botY = e.currY;
				e.topX = e.next.currX;
				e.topY = e.next.currY;
			} else {
				e.topX = e.currX;
				e.topY = e.currY;
				e.botX = e.next.currX;
				e.botY = e.next.currY;
			}
			this.SetDx(e);
			e.polyType = polyType;
			e = e.next;
			if(e.currY != eStart.currY) {
				isFlat = false;
			}
		} while(e != eStart);
		if(isFlat) {
			return false;
		}
		this.m_edges.push(edges);
		var leftBoundIsForward;
		var eMin = null;
		if(e.prev.botX == e.prev.topX && e.prev.botY == e.prev.topY) {
			e = e.next;
		}
		var old = null;
		while(true) {
			e = this.FindNextLocMin(e);
			if(e == eMin) {
				break;
			} else if(eMin == null) {
				eMin = e;
			}
			if(e == old) {
				throw haxe_Exception.thrown("!");
			}
			old = e;
			var locMin = new hxd_clipper__$Clipper_LocalMinima();
			locMin.next = null;
			locMin.y = e.botY;
			if(e.dx < e.prev.dx) {
				locMin.leftBound = e.prev;
				locMin.rightBound = e;
				leftBoundIsForward = false;
			} else {
				locMin.leftBound = e;
				locMin.rightBound = e.prev;
				leftBoundIsForward = true;
			}
			locMin.leftBound.side = hxd_clipper__$Clipper_EdgeSide.Left;
			locMin.rightBound.side = hxd_clipper__$Clipper_EdgeSide.Right;
			if(locMin.leftBound.next == locMin.rightBound) {
				locMin.leftBound.windDelta = -1;
			} else {
				locMin.leftBound.windDelta = 1;
			}
			locMin.rightBound.windDelta = -locMin.leftBound.windDelta;
			e = this.ProcessBound(locMin.leftBound,leftBoundIsForward);
			if(e.outIdx == -2) {
				e = this.ProcessBound(e,leftBoundIsForward);
			}
			var e2 = this.ProcessBound(locMin.rightBound,!leftBoundIsForward);
			if(e2.outIdx == -2) {
				e2 = this.ProcessBound(e2,!leftBoundIsForward);
			}
			if(locMin.leftBound.outIdx == -2) {
				locMin.leftBound = null;
			} else if(locMin.rightBound.outIdx == -2) {
				locMin.rightBound = null;
			}
			this.InsertLocalMinima(locMin);
			if(!leftBoundIsForward) {
				e = e2;
			}
		}
		return true;
	}
	,InitEdge: function(e,eNext,ePrev,pt) {
		e.next = eNext;
		e.prev = ePrev;
		e.currX = pt.x;
		e.currY = pt.y;
		e.outIdx = -1;
	}
	,InitEdge2: function(e,polyType) {
		if(e.currY >= e.next.currY) {
			e.botX = e.currX;
			e.botY = e.currY;
			e.topX = e.next.currX;
			e.topY = e.next.currY;
		} else {
			e.topX = e.currX;
			e.topY = e.currY;
			e.botX = e.next.currX;
			e.botY = e.next.currY;
		}
		this.SetDx(e);
		e.polyType = polyType;
	}
	,RemoveEdge: function(e) {
		e.prev.next = e.next;
		e.next.prev = e.prev;
		var result = e.next;
		e.prev = null;
		return result;
	}
	,FindNextLocMin: function(e) {
		var e2;
		while(true) {
			while(e.botX != e.prev.botX || e.botY != e.prev.botY || e.currX == e.topX && e.currY == e.topY) e = e.next;
			if(e.dx != -9007199254740992. && e.prev.dx != -9007199254740992.) {
				break;
			}
			while(e.prev.dx == -9007199254740992.) e = e.prev;
			e2 = e;
			while(e.dx == -9007199254740992.) e = e.next;
			if(e.topY == e.prev.botY) {
				continue;
			}
			if(e2.prev.botX < e.botX) {
				e = e2;
			}
			break;
		}
		return e;
	}
	,ProcessBound: function(E,LeftBoundIsForward) {
		var EStart;
		var Horz;
		var Result = E;
		if(Result.outIdx == -2) {
			E = Result;
			if(LeftBoundIsForward) {
				while(E.topY == E.next.botY) E = E.next;
				while(E != Result && E.dx == -9007199254740992.) E = E.prev;
			} else {
				while(E.topY == E.prev.botY) E = E.prev;
				while(E != Result && E.dx == -9007199254740992.) E = E.next;
			}
			if(E == Result) {
				if(LeftBoundIsForward) {
					Result = E.next;
				} else {
					Result = E.prev;
				}
			} else {
				if(LeftBoundIsForward) {
					E = Result.next;
				} else {
					E = Result.prev;
				}
				var locMin = new hxd_clipper__$Clipper_LocalMinima();
				locMin.next = null;
				locMin.y = E.botY;
				locMin.leftBound = null;
				locMin.rightBound = E;
				E.windDelta = 0;
				Result = this.ProcessBound(E,LeftBoundIsForward);
				this.InsertLocalMinima(locMin);
			}
			return Result;
		}
		if(E.dx == -9007199254740992.) {
			if(LeftBoundIsForward) {
				EStart = E.prev;
			} else {
				EStart = E.next;
			}
			if(EStart.outIdx != -2) {
				if(EStart.dx == -9007199254740992.) {
					if(EStart.botX != E.botX && EStart.topX != E.botX) {
						this.ReverseHorizontal(E);
					}
				} else if(EStart.botX != E.botX) {
					this.ReverseHorizontal(E);
				}
			}
		}
		EStart = E;
		if(LeftBoundIsForward) {
			while(Result.topY == Result.next.botY && Result.next.outIdx != -2) Result = Result.next;
			if(Result.dx == -9007199254740992. && Result.next.outIdx != -2) {
				Horz = Result;
				while(Horz.prev.dx == -9007199254740992.) Horz = Horz.prev;
				if(Horz.prev.topX == Result.next.topX) {
					if(!LeftBoundIsForward) {
						Result = Horz.prev;
					}
				} else if(Horz.prev.topX > Result.next.topX) {
					Result = Horz.prev;
				}
			}
			while(E != Result) {
				E.nextInLML = E.next;
				if(E.dx == -9007199254740992. && E != EStart && E.botX != E.prev.topX) {
					this.ReverseHorizontal(E);
				}
				E = E.next;
			}
			if(E.dx == -9007199254740992. && E != EStart && E.botX != E.prev.topX) {
				this.ReverseHorizontal(E);
			}
			Result = Result.next;
		} else {
			while(Result.topY == Result.prev.botY && Result.prev.outIdx != -2) Result = Result.prev;
			if(Result.dx == -9007199254740992. && Result.prev.outIdx != -2) {
				Horz = Result;
				while(Horz.next.dx == -9007199254740992.) Horz = Horz.next;
				if(Horz.next.topX == Result.prev.topX) {
					if(!LeftBoundIsForward) {
						Result = Horz.next;
					}
				} else if(Horz.next.topX > Result.prev.topX) {
					Result = Horz.next;
				}
			}
			while(E != Result) {
				E.nextInLML = E.prev;
				if(E.dx == -9007199254740992. && E != EStart && E.botX != E.next.topX) {
					this.ReverseHorizontal(E);
				}
				E = E.prev;
			}
			if(E.dx == -9007199254740992. && E != EStart && E.botX != E.next.topX) {
				this.ReverseHorizontal(E);
			}
			Result = Result.prev;
		}
		return Result;
	}
	,ReverseHorizontal: function(e) {
		var tmp = e.topX;
		e.topX = e.botX;
		e.botX = tmp;
	}
	,Pt2IsBetweenPt1AndPt3: function(pt1,pt2,pt3) {
		if(pt1.x == pt3.x && pt1.y == pt3.y || pt1.x == pt2.x && pt1.y == pt2.y || pt3.x == pt2.x && pt3.y == pt2.y) {
			return false;
		} else if(pt1.x != pt3.x) {
			return pt2.x > pt1.x == pt2.x < pt3.x;
		} else {
			return pt2.y > pt1.y == pt2.y < pt3.y;
		}
	}
	,SetDx: function(e) {
		e.deltaX = e.topX - e.botX;
		e.deltaY = e.topY - e.botY;
		if(e.deltaY == 0) {
			e.dx = -9007199254740992.;
		} else {
			e.dx = e.deltaX / e.deltaY;
		}
	}
	,InsertLocalMinima: function(newLm) {
		if(this.m_MinimaList == null) {
			this.m_MinimaList = newLm;
		} else if(newLm.y >= this.m_MinimaList.y) {
			newLm.next = this.m_MinimaList;
			this.m_MinimaList = newLm;
		} else {
			var tmpLm = this.m_MinimaList;
			while(tmpLm.next != null && newLm.y < tmpLm.next.y) tmpLm = tmpLm.next;
			newLm.next = tmpLm.next;
			tmpLm.next = newLm;
		}
	}
	,PopLocalMinima: function() {
		if(this.m_CurrentLM == null) {
			return;
		}
		this.m_CurrentLM = this.m_CurrentLM.next;
	}
	,SwapX: function(e) {
		e.currX = e.topX;
		e.topX = e.botX;
		e.botX = e.currX;
	}
	,equals: function(pt1,pt2) {
		if(pt1.x == pt2.x) {
			return pt1.y == pt2.y;
		} else {
			return false;
		}
	}
	,Reset: function() {
		this.m_CurrentLM = this.m_MinimaList;
		var lm = this.m_MinimaList;
		while(lm != null) {
			var e = lm.leftBound;
			if(e != null) {
				e.currX = e.botX;
				e.currY = e.botY;
				e.side = hxd_clipper__$Clipper_EdgeSide.Left;
				e.outIdx = -1;
				e = e.nextInLML;
			}
			e = lm.rightBound;
			if(e != null) {
				e.currX = e.botX;
				e.currY = e.botY;
				e.side = hxd_clipper__$Clipper_EdgeSide.Right;
				e.outIdx = -1;
				e = e.nextInLML;
			}
			lm = lm.next;
		}
	}
	,__class__: hxd_clipper__$Clipper_ClipperBase
};
var hxd_clipper_NodeType = $hxEnums["hxd.clipper.NodeType"] = { __ename__:"hxd.clipper.NodeType",__constructs__:null
	,Any: {_hx_name:"Any",_hx_index:0,__enum__:"hxd.clipper.NodeType",toString:$estr}
	,Open: {_hx_name:"Open",_hx_index:1,__enum__:"hxd.clipper.NodeType",toString:$estr}
	,Closed: {_hx_name:"Closed",_hx_index:2,__enum__:"hxd.clipper.NodeType",toString:$estr}
};
hxd_clipper_NodeType.__constructs__ = [hxd_clipper_NodeType.Any,hxd_clipper_NodeType.Open,hxd_clipper_NodeType.Closed];
hxd_clipper_NodeType.__empty_constructs__ = [hxd_clipper_NodeType.Any,hxd_clipper_NodeType.Open,hxd_clipper_NodeType.Closed];
var hxd_clipper_ResultKind = $hxEnums["hxd.clipper.ResultKind"] = { __ename__:"hxd.clipper.ResultKind",__constructs__:null
	,All: {_hx_name:"All",_hx_index:0,__enum__:"hxd.clipper.ResultKind",toString:$estr}
	,NoHoles: {_hx_name:"NoHoles",_hx_index:1,__enum__:"hxd.clipper.ResultKind",toString:$estr}
	,HolesOnly: {_hx_name:"HolesOnly",_hx_index:2,__enum__:"hxd.clipper.ResultKind",toString:$estr}
};
hxd_clipper_ResultKind.__constructs__ = [hxd_clipper_ResultKind.All,hxd_clipper_ResultKind.NoHoles,hxd_clipper_ResultKind.HolesOnly];
hxd_clipper_ResultKind.__empty_constructs__ = [hxd_clipper_ResultKind.All,hxd_clipper_ResultKind.NoHoles,hxd_clipper_ResultKind.HolesOnly];
var hxd_clipper_Clipper = function() {
	hxd_clipper__$Clipper_ClipperBase.call(this);
	this.m_Scanbeam = null;
	this.m_ActiveEdges = null;
	this.m_SortedEdges = null;
	this.m_IntersectList = [];
	this.m_ExecuteLocked = false;
	this.m_UsingPolyTree = false;
	this.m_PolyOuts = [];
	this.m_Joins = [];
	this.m_GhostJoins = [];
	this.reverseSolution = false;
	this.strictlySimple = false;
	this.preserveCollinear = false;
	this.resultKind = hxd_clipper_ResultKind.All;
};
$hxClasses["hxd.clipper.Clipper"] = hxd_clipper_Clipper;
hxd_clipper_Clipper.__name__ = "hxd.clipper.Clipper";
hxd_clipper_Clipper.compareY = function(n1,n2) {
	if(n2.pt.y - n1.pt.y >= 0) {
		return 1;
	} else {
		return -1;
	}
};
hxd_clipper_Clipper.Orientation = function(poly) {
	return hxd_clipper_Clipper.polArea(poly) >= 0;
};
hxd_clipper_Clipper.polArea = function(poly) {
	var cnt = poly.length;
	if(cnt < 3) {
		return 0.;
	}
	var a = 0.;
	var j = cnt - 1;
	var _g = 0;
	var _g1 = cnt;
	while(_g < _g1) {
		var i = _g++;
		a += (poly[j].x + poly[i].x) * (poly[j].y - poly[i].y);
		j = i;
	}
	return -a * 0.5;
};
hxd_clipper_Clipper.SimplifyPolygon = function(poly,fillType) {
	if(fillType == null) {
		fillType = hxd_clipper_PolyFillType.EvenOdd;
	}
	var c = new hxd_clipper_Clipper();
	c.strictlySimple = true;
	c.addPolygon(poly,hxd_clipper_PolyType.Subject);
	return c.execute(hxd_clipper_ClipType.Union,fillType,fillType);
};
hxd_clipper_Clipper.SimplifyPolygons = function(polys,fillType) {
	if(fillType == null) {
		fillType = hxd_clipper_PolyFillType.EvenOdd;
	}
	var c = new hxd_clipper_Clipper();
	c.strictlySimple = true;
	c.addPolygons(polys,hxd_clipper_PolyType.Subject);
	return c.execute(hxd_clipper_ClipType.Union,fillType,fillType);
};
hxd_clipper_Clipper.MinkowskiSums = function(pattern,pols,kind) {
	var c = new hxd_clipper_Clipper();
	c.resultKind = kind == null ? hxd_clipper_ResultKind.All : kind;
	var _g = 0;
	var _g1 = pols.length;
	while(_g < _g1) {
		var i = _g++;
		var tmp = c.Minkowski(pattern,pols[i],true);
		c.addPolygons(tmp,hxd_clipper_PolyType.Subject);
		var path = c.TranslatePath(pols[i],pattern[0]);
		c.addPolygon(path,hxd_clipper_PolyType.Clip);
	}
	return c.execute(hxd_clipper_ClipType.Union,hxd_clipper_PolyFillType.NonZero,hxd_clipper_PolyFillType.NonZero);
};
hxd_clipper_Clipper.MinkowskiDiff = function(pattern,pol,kind) {
	var c = new hxd_clipper_Clipper();
	var paths = c.Minkowski(pattern,pol,false);
	c.resultKind = kind == null ? hxd_clipper_ResultKind.All : kind;
	c.addPolygons(paths,hxd_clipper_PolyType.Subject);
	return c.execute(hxd_clipper_ClipType.Union,hxd_clipper_PolyFillType.NonZero,hxd_clipper_PolyFillType.NonZero);
};
hxd_clipper_Clipper.__super__ = hxd_clipper__$Clipper_ClipperBase;
hxd_clipper_Clipper.prototype = $extend(hxd_clipper__$Clipper_ClipperBase.prototype,{
	xor: function(a,b) {
		if(a) {
			return !b;
		} else {
			return b;
		}
	}
	,DisposeScanbeamList: function() {
		while(this.m_Scanbeam != null) {
			var sb2 = this.m_Scanbeam.next;
			this.m_Scanbeam = null;
			this.m_Scanbeam = sb2;
		}
	}
	,Reset: function() {
		hxd_clipper__$Clipper_ClipperBase.prototype.Reset.call(this);
		this.m_Scanbeam = null;
		this.m_ActiveEdges = null;
		this.m_SortedEdges = null;
		var lm = this.m_MinimaList;
		while(lm != null) {
			this.InsertScanbeam(lm.y);
			lm = lm.next;
		}
	}
	,InsertScanbeam: function(y) {
		if(this.m_Scanbeam == null) {
			this.m_Scanbeam = new hxd_clipper__$Clipper_Scanbeam();
			this.m_Scanbeam.next = null;
			this.m_Scanbeam.y = y;
		} else if(y > this.m_Scanbeam.y) {
			var newSb = new hxd_clipper__$Clipper_Scanbeam();
			newSb.y = y;
			newSb.next = this.m_Scanbeam;
			this.m_Scanbeam = newSb;
		} else {
			var sb2 = this.m_Scanbeam;
			while(sb2.next != null && y <= sb2.next.y) sb2 = sb2.next;
			if(y == sb2.y) {
				return;
			}
			var newSb = new hxd_clipper__$Clipper_Scanbeam();
			newSb.y = y;
			newSb.next = sb2.next;
			sb2.next = newSb;
		}
	}
	,execute: function(clipType,subjFillType,clipFillType) {
		if(subjFillType == null) {
			subjFillType = hxd_clipper_PolyFillType.EvenOdd;
		}
		if(clipFillType == null) {
			clipFillType = hxd_clipper_PolyFillType.EvenOdd;
		}
		if(this.m_ExecuteLocked) {
			return [];
		}
		this.m_ExecuteLocked = true;
		var solution = [];
		this.m_SubjFillType = subjFillType;
		this.m_ClipFillType = clipFillType;
		this.m_ClipType = clipType;
		this.m_UsingPolyTree = false;
		var succeeded = this.ExecuteInternal();
		if(succeeded) {
			solution = this.BuildResult();
		}
		this.DisposeAllPolyPts();
		this.m_ExecuteLocked = false;
		return solution;
	}
	,ExecuteTree: function(clipType,polytree,subjFillType,clipFillType) {
		if(subjFillType == null) {
			subjFillType = hxd_clipper_PolyFillType.EvenOdd;
		}
		if(clipFillType == null) {
			clipFillType = hxd_clipper_PolyFillType.EvenOdd;
		}
		if(this.m_ExecuteLocked) {
			return false;
		}
		this.m_ExecuteLocked = true;
		this.m_SubjFillType = subjFillType;
		this.m_ClipFillType = clipFillType;
		this.m_ClipType = clipType;
		this.m_UsingPolyTree = true;
		var succeeded = this.ExecuteInternal();
		if(succeeded) {
			this.BuildResult2(polytree);
		}
		this.m_ExecuteLocked = false;
		return succeeded;
	}
	,FixHoleLinkage: function(outRec) {
		if(outRec.firstLeft == null || outRec.isHole != outRec.firstLeft.isHole && outRec.firstLeft.pts != null) {
			return;
		}
		var orfl = outRec.firstLeft;
		while(orfl != null && (orfl.isHole == outRec.isHole || orfl.pts == null)) orfl = orfl.firstLeft;
		outRec.firstLeft = orfl;
	}
	,ExecuteInternal: function() {
		this.Reset();
		if(this.m_CurrentLM == null) {
			return false;
		}
		var botY = this.PopScanbeam();
		do {
			this.InsertLocalMinimaIntoAEL(botY);
			if(this.m_GhostJoins.length > 0) {
				this.m_GhostJoins = [];
			}
			this.ProcessHorizontals(false);
			if(this.m_Scanbeam == null) {
				break;
			}
			var topY = this.PopScanbeam();
			if(!this.ProcessIntersections(topY)) {
				return false;
			}
			this.ProcessEdgesAtTopOfScanbeam(topY);
			botY = topY;
		} while(this.m_Scanbeam != null || this.m_CurrentLM != null);
		var _g = 0;
		var _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			var outRec = _g1[_g];
			++_g;
			if(outRec.pts == null) {
				continue;
			}
			var b = this.reverseSolution;
			if((outRec.isHole ? !b : b) == this.Area(outRec) > 0) {
				this.ReversePolyPtLinks(outRec.pts);
			}
		}
		this.JoinCommonEdges();
		var _g = 0;
		var _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			var outRec = _g1[_g];
			++_g;
			if(outRec.pts != null) {
				this.FixupOutPolygon(outRec);
			}
		}
		if(this.strictlySimple) {
			this.DoSimplePolygons();
		}
		this.m_Joins = [];
		this.m_GhostJoins = [];
		return true;
	}
	,PopScanbeam: function() {
		var y = this.m_Scanbeam.y;
		this.m_Scanbeam = this.m_Scanbeam.next;
		return y;
	}
	,DisposeAllPolyPts: function() {
		var _g = 0;
		var _g1 = this.m_PolyOuts.length;
		while(_g < _g1) {
			var i = _g++;
			this.DisposeOutRec(i);
		}
		this.m_PolyOuts = [];
	}
	,DisposeOutRec: function(index) {
		var outRec = this.m_PolyOuts[index];
		outRec.pts = null;
		outRec = null;
		this.m_PolyOuts[index] = null;
	}
	,AddJoin: function(op1,op2,offPt) {
		var j = new hxd_clipper__$Clipper_Join();
		j.outPt1 = op1;
		j.outPt2 = op2;
		j.offPt = offPt;
		this.m_Joins.push(j);
	}
	,AddGhostJoin: function(op,offPt) {
		var j = new hxd_clipper__$Clipper_Join();
		j.outPt1 = op;
		j.offPt = offPt;
		this.m_GhostJoins.push(j);
	}
	,InsertLocalMinimaIntoAEL: function(botY) {
		while(this.m_CurrentLM != null && this.m_CurrentLM.y == botY) {
			var lb = this.m_CurrentLM.leftBound;
			var rb = this.m_CurrentLM.rightBound;
			this.PopLocalMinima();
			var op1 = null;
			if(lb == null) {
				this.InsertEdgeIntoAEL(rb);
				this.SetWindingCount(rb);
				if(this.IsContributing(rb)) {
					op1 = this.AddOutPt(rb,new h2d_col_IPoint(rb.botX,rb.botY));
				}
			} else if(rb == null) {
				this.InsertEdgeIntoAEL(lb);
				this.SetWindingCount(lb);
				if(this.IsContributing(lb)) {
					op1 = this.AddOutPt(lb,new h2d_col_IPoint(lb.botX,lb.botY));
				}
				this.InsertScanbeam(lb.topY);
			} else {
				this.InsertEdgeIntoAEL(lb);
				this.InsertEdgeIntoAEL(rb,lb);
				this.SetWindingCount(lb);
				rb.windCnt = lb.windCnt;
				rb.windCnt2 = lb.windCnt2;
				if(this.IsContributing(lb)) {
					op1 = this.AddLocalMinPoly(lb,rb,new h2d_col_IPoint(lb.botX,lb.botY));
				}
				this.InsertScanbeam(lb.topY);
			}
			if(rb != null) {
				if(rb.deltaY == 0) {
					this.AddEdgeToSEL(rb);
				} else {
					this.InsertScanbeam(rb.topY);
				}
			}
			if(lb == null || rb == null) {
				continue;
			}
			if(op1 != null && rb.deltaY == 0 && this.m_GhostJoins.length > 0 && rb.windDelta != 0) {
				var _g = 0;
				var _g1 = this.m_GhostJoins;
				while(_g < _g1.length) {
					var j = _g1[_g];
					++_g;
					if(this.HorzSegmentsOverlap(j.outPt1.pt.x,j.offPt.x,rb.botX,rb.topX)) {
						this.AddJoin(j.outPt1,op1,j.offPt);
					}
				}
			}
			var tmp;
			if(lb.outIdx >= 0 && lb.prevInAEL != null && lb.prevInAEL.currX == lb.botX && lb.prevInAEL.outIdx >= 0) {
				var e1 = lb.prevInAEL;
				tmp = e1.deltaY * lb.deltaX == e1.deltaX * lb.deltaY;
			} else {
				tmp = false;
			}
			if(tmp && lb.windDelta != 0 && lb.prevInAEL.windDelta != 0) {
				var op2 = this.AddOutPt(lb.prevInAEL,new h2d_col_IPoint(lb.botX,lb.botY));
				this.AddJoin(op1,op2,new h2d_col_IPoint(lb.topX,lb.topY));
			}
			if(lb.nextInAEL != rb) {
				var tmp1;
				if(rb.outIdx >= 0 && rb.prevInAEL.outIdx >= 0) {
					var e11 = rb.prevInAEL;
					tmp1 = e11.deltaY * rb.deltaX == e11.deltaX * rb.deltaY;
				} else {
					tmp1 = false;
				}
				if(tmp1 && rb.windDelta != 0 && rb.prevInAEL.windDelta != 0) {
					var op21 = this.AddOutPt(rb.prevInAEL,new h2d_col_IPoint(rb.botX,rb.botY));
					this.AddJoin(op1,op21,new h2d_col_IPoint(rb.topX,rb.topY));
				}
				var e = lb.nextInAEL;
				if(e != null) {
					while(e != rb) {
						this.IntersectEdges(rb,e,new h2d_col_IPoint(lb.currX,lb.currY));
						e = e.nextInAEL;
					}
				}
			}
		}
	}
	,InsertEdgeIntoAEL: function(edge,startEdge) {
		if(this.m_ActiveEdges == null) {
			edge.prevInAEL = null;
			edge.nextInAEL = null;
			this.m_ActiveEdges = edge;
		} else if(startEdge == null && this.E2InsertsBeforeE1(this.m_ActiveEdges,edge)) {
			edge.prevInAEL = null;
			edge.nextInAEL = this.m_ActiveEdges;
			this.m_ActiveEdges.prevInAEL = edge;
			this.m_ActiveEdges = edge;
		} else {
			if(startEdge == null) {
				startEdge = this.m_ActiveEdges;
			}
			while(startEdge.nextInAEL != null && !this.E2InsertsBeforeE1(startEdge.nextInAEL,edge)) startEdge = startEdge.nextInAEL;
			edge.nextInAEL = startEdge.nextInAEL;
			if(startEdge.nextInAEL != null) {
				startEdge.nextInAEL.prevInAEL = edge;
			}
			edge.prevInAEL = startEdge;
			startEdge.nextInAEL = edge;
		}
	}
	,E2InsertsBeforeE1: function(e1,e2) {
		if(e2.currX == e1.currX) {
			if(e2.topY > e1.topY) {
				var currentY = e2.topY;
				var tmp;
				if(currentY == e1.topY) {
					tmp = e1.topX;
				} else {
					var value = e1.dx * (currentY - e1.botY);
					tmp = e1.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
				}
				return e2.topX < tmp;
			} else {
				var currentY = e1.topY;
				var tmp;
				if(currentY == e2.topY) {
					tmp = e2.topX;
				} else {
					var value = e2.dx * (currentY - e2.botY);
					tmp = e2.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
				}
				return e1.topX > tmp;
			}
		} else {
			return e2.currX < e1.currX;
		}
	}
	,IsEvenOddFillType: function(edge) {
		if(edge.polyType == hxd_clipper_PolyType.Subject) {
			return this.m_SubjFillType == hxd_clipper_PolyFillType.EvenOdd;
		} else {
			return this.m_ClipFillType == hxd_clipper_PolyFillType.EvenOdd;
		}
	}
	,IsEvenOddAltFillType: function(edge) {
		if(edge.polyType == hxd_clipper_PolyType.Subject) {
			return this.m_ClipFillType == hxd_clipper_PolyFillType.EvenOdd;
		} else {
			return this.m_SubjFillType == hxd_clipper_PolyFillType.EvenOdd;
		}
	}
	,IsContributing: function(edge) {
		var pft;
		var pft2;
		if(edge.polyType == hxd_clipper_PolyType.Subject) {
			pft = this.m_SubjFillType;
			pft2 = this.m_ClipFillType;
		} else {
			pft = this.m_ClipFillType;
			pft2 = this.m_SubjFillType;
		}
		switch(pft._hx_index) {
		case 0:
			if(edge.windDelta == 0 && edge.windCnt != 1) {
				return false;
			}
			break;
		case 1:
			var f = edge.windCnt;
			if((f < 0 ? -f : f) != 1) {
				return false;
			}
			break;
		case 2:
			if(edge.windCnt != 1) {
				return false;
			}
			break;
		default:
			if(edge.windCnt != -1) {
				return false;
			}
		}
		switch(this.m_ClipType._hx_index) {
		case 0:
			switch(pft2._hx_index) {
			case 0:case 1:
				return edge.windCnt2 != 0;
			case 2:
				return edge.windCnt2 > 0;
			default:
				return edge.windCnt2 < 0;
			}
			break;
		case 1:
			switch(pft2._hx_index) {
			case 0:case 1:
				return edge.windCnt2 == 0;
			case 2:
				return edge.windCnt2 <= 0;
			default:
				return edge.windCnt2 >= 0;
			}
			break;
		case 2:
			if(edge.polyType == hxd_clipper_PolyType.Subject) {
				switch(pft2._hx_index) {
				case 0:case 1:
					return edge.windCnt2 == 0;
				case 2:
					return edge.windCnt2 <= 0;
				default:
					return edge.windCnt2 >= 0;
				}
			} else {
				switch(pft2._hx_index) {
				case 0:case 1:
					return edge.windCnt2 != 0;
				case 2:
					return edge.windCnt2 > 0;
				default:
					return edge.windCnt2 < 0;
				}
			}
			break;
		case 3:
			if(edge.windDelta == 0) {
				switch(pft2._hx_index) {
				case 0:case 1:
					return edge.windCnt2 == 0;
				case 2:
					return edge.windCnt2 <= 0;
				default:
					return edge.windCnt2 >= 0;
				}
			} else {
				return true;
			}
			break;
		}
	}
	,SetWindingCount: function(edge) {
		var e = edge.prevInAEL;
		while(e != null && (e.polyType != edge.polyType || e.windDelta == 0)) e = e.prevInAEL;
		if(e == null) {
			edge.windCnt = edge.windDelta == 0 ? 1 : edge.windDelta;
			edge.windCnt2 = 0;
			e = this.m_ActiveEdges;
		} else if(edge.windDelta == 0 && this.m_ClipType != hxd_clipper_ClipType.Union) {
			edge.windCnt = 1;
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		} else if(edge.polyType == hxd_clipper_PolyType.Subject ? this.m_SubjFillType == hxd_clipper_PolyFillType.EvenOdd : this.m_ClipFillType == hxd_clipper_PolyFillType.EvenOdd) {
			if(edge.windDelta == 0) {
				var Inside = true;
				var e2 = e.prevInAEL;
				while(e2 != null) {
					if(e2.polyType == e.polyType && e2.windDelta != 0) {
						Inside = !Inside;
					}
					e2 = e2.prevInAEL;
				}
				edge.windCnt = Inside ? 0 : 1;
			} else {
				edge.windCnt = edge.windDelta;
			}
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		} else {
			if(e.windCnt * e.windDelta < 0) {
				if(e.windCnt > 1 || e.windCnt < -1) {
					if(e.windDelta * edge.windDelta < 0) {
						edge.windCnt = e.windCnt;
					} else {
						edge.windCnt = e.windCnt + edge.windDelta;
					}
				} else {
					edge.windCnt = edge.windDelta == 0 ? 1 : edge.windDelta;
				}
			} else if(edge.windDelta == 0) {
				edge.windCnt = e.windCnt < 0 ? e.windCnt - 1 : e.windCnt + 1;
			} else if(e.windDelta * edge.windDelta < 0) {
				edge.windCnt = e.windCnt;
			} else {
				edge.windCnt = e.windCnt + edge.windDelta;
			}
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		}
		if(edge.polyType == hxd_clipper_PolyType.Subject ? this.m_ClipFillType == hxd_clipper_PolyFillType.EvenOdd : this.m_SubjFillType == hxd_clipper_PolyFillType.EvenOdd) {
			while(e != edge) {
				if(e.windDelta != 0) {
					edge.windCnt2 = edge.windCnt2 == 0 ? 1 : 0;
				}
				e = e.nextInAEL;
			}
		} else {
			while(e != edge) {
				edge.windCnt2 += e.windDelta;
				e = e.nextInAEL;
			}
		}
	}
	,AddEdgeToSEL: function(edge) {
		if(this.m_SortedEdges == null) {
			this.m_SortedEdges = edge;
			edge.prevInSEL = null;
			edge.nextInSEL = null;
		} else {
			edge.nextInSEL = this.m_SortedEdges;
			edge.prevInSEL = null;
			this.m_SortedEdges.prevInSEL = edge;
			this.m_SortedEdges = edge;
		}
	}
	,CopyAELToSEL: function() {
		var e = this.m_ActiveEdges;
		this.m_SortedEdges = e;
		while(e != null) {
			e.prevInSEL = e.prevInAEL;
			e.nextInSEL = e.nextInAEL;
			e = e.nextInAEL;
		}
	}
	,SwapPositionsInAEL: function(edge1,edge2) {
		if(edge1.nextInAEL == edge1.prevInAEL || edge2.nextInAEL == edge2.prevInAEL) {
			return;
		}
		if(edge1.nextInAEL == edge2) {
			var next = edge2.nextInAEL;
			if(next != null) {
				next.prevInAEL = edge1;
			}
			var prev = edge1.prevInAEL;
			if(prev != null) {
				prev.nextInAEL = edge2;
			}
			edge2.prevInAEL = prev;
			edge2.nextInAEL = edge1;
			edge1.prevInAEL = edge2;
			edge1.nextInAEL = next;
		} else if(edge2.nextInAEL == edge1) {
			var next = edge1.nextInAEL;
			if(next != null) {
				next.prevInAEL = edge2;
			}
			var prev = edge2.prevInAEL;
			if(prev != null) {
				prev.nextInAEL = edge1;
			}
			edge1.prevInAEL = prev;
			edge1.nextInAEL = edge2;
			edge2.prevInAEL = edge1;
			edge2.nextInAEL = next;
		} else {
			var next = edge1.nextInAEL;
			var prev = edge1.prevInAEL;
			edge1.nextInAEL = edge2.nextInAEL;
			if(edge1.nextInAEL != null) {
				edge1.nextInAEL.prevInAEL = edge1;
			}
			edge1.prevInAEL = edge2.prevInAEL;
			if(edge1.prevInAEL != null) {
				edge1.prevInAEL.nextInAEL = edge1;
			}
			edge2.nextInAEL = next;
			if(edge2.nextInAEL != null) {
				edge2.nextInAEL.prevInAEL = edge2;
			}
			edge2.prevInAEL = prev;
			if(edge2.prevInAEL != null) {
				edge2.prevInAEL.nextInAEL = edge2;
			}
		}
		if(edge1.prevInAEL == null) {
			this.m_ActiveEdges = edge1;
		} else if(edge2.prevInAEL == null) {
			this.m_ActiveEdges = edge2;
		}
	}
	,SwapPositionsInSEL: function(edge1,edge2) {
		if(edge1.nextInSEL == null && edge1.prevInSEL == null) {
			return;
		}
		if(edge2.nextInSEL == null && edge2.prevInSEL == null) {
			return;
		}
		if(edge1.nextInSEL == edge2) {
			var next = edge2.nextInSEL;
			if(next != null) {
				next.prevInSEL = edge1;
			}
			var prev = edge1.prevInSEL;
			if(prev != null) {
				prev.nextInSEL = edge2;
			}
			edge2.prevInSEL = prev;
			edge2.nextInSEL = edge1;
			edge1.prevInSEL = edge2;
			edge1.nextInSEL = next;
		} else if(edge2.nextInSEL == edge1) {
			var next = edge1.nextInSEL;
			if(next != null) {
				next.prevInSEL = edge2;
			}
			var prev = edge2.prevInSEL;
			if(prev != null) {
				prev.nextInSEL = edge1;
			}
			edge1.prevInSEL = prev;
			edge1.nextInSEL = edge2;
			edge2.prevInSEL = edge1;
			edge2.nextInSEL = next;
		} else {
			var next = edge1.nextInSEL;
			var prev = edge1.prevInSEL;
			edge1.nextInSEL = edge2.nextInSEL;
			if(edge1.nextInSEL != null) {
				edge1.nextInSEL.prevInSEL = edge1;
			}
			edge1.prevInSEL = edge2.prevInSEL;
			if(edge1.prevInSEL != null) {
				edge1.prevInSEL.nextInSEL = edge1;
			}
			edge2.nextInSEL = next;
			if(edge2.nextInSEL != null) {
				edge2.nextInSEL.prevInSEL = edge2;
			}
			edge2.prevInSEL = prev;
			if(edge2.prevInSEL != null) {
				edge2.prevInSEL.nextInSEL = edge2;
			}
		}
		if(edge1.prevInSEL == null) {
			this.m_SortedEdges = edge1;
		} else if(edge2.prevInSEL == null) {
			this.m_SortedEdges = edge2;
		}
	}
	,AddLocalMaxPoly: function(e1,e2,pt) {
		this.AddOutPt(e1,pt);
		if(e2.windDelta == 0) {
			this.AddOutPt(e2,pt);
		}
		if(e1.outIdx == e2.outIdx) {
			e1.outIdx = -1;
			e2.outIdx = -1;
		} else if(e1.outIdx < e2.outIdx) {
			this.AppendPolygon(e1,e2);
		} else {
			this.AppendPolygon(e2,e1);
		}
	}
	,AddLocalMinPoly: function(e1,e2,pt) {
		var result;
		var e;
		var prevE;
		if(e2.deltaY == 0 || e1.dx > e2.dx) {
			result = this.AddOutPt(e1,pt);
			e2.outIdx = e1.outIdx;
			e1.side = hxd_clipper__$Clipper_EdgeSide.Left;
			e2.side = hxd_clipper__$Clipper_EdgeSide.Right;
			e = e1;
			if(e.prevInAEL == e2) {
				prevE = e2.prevInAEL;
			} else {
				prevE = e.prevInAEL;
			}
		} else {
			result = this.AddOutPt(e2,pt);
			e1.outIdx = e2.outIdx;
			e1.side = hxd_clipper__$Clipper_EdgeSide.Right;
			e2.side = hxd_clipper__$Clipper_EdgeSide.Left;
			e = e2;
			if(e.prevInAEL == e1) {
				prevE = e1.prevInAEL;
			} else {
				prevE = e.prevInAEL;
			}
		}
		var tmp;
		if(prevE != null && prevE.outIdx >= 0) {
			var currentY = pt.y;
			var tmp1;
			if(currentY == prevE.topY) {
				tmp1 = prevE.topX;
			} else {
				var value = prevE.dx * (currentY - prevE.botY);
				tmp1 = prevE.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
			var currentY = pt.y;
			var tmp2;
			if(currentY == e.topY) {
				tmp2 = e.topX;
			} else {
				var value = e.dx * (currentY - e.botY);
				tmp2 = e.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
			tmp = tmp1 == tmp2;
		} else {
			tmp = false;
		}
		if(tmp && e.deltaY * prevE.deltaX == e.deltaX * prevE.deltaY && e.windDelta != 0 && prevE.windDelta != 0) {
			var out = this.AddOutPt(prevE,pt);
			this.AddJoin(result,out,new h2d_col_IPoint(e.topX,e.topY));
		}
		return result;
	}
	,CreateOutRec: function() {
		var result = new hxd_clipper__$Clipper_OutRec();
		result.idx = -1;
		result.isHole = false;
		result.firstLeft = null;
		result.pts = null;
		result.bottomPt = null;
		result.polyNode = null;
		this.m_PolyOuts.push(result);
		result.idx = this.m_PolyOuts.length - 1;
		return result;
	}
	,AddOutPt: function(e,pt) {
		var ToFront = e.side == hxd_clipper__$Clipper_EdgeSide.Left;
		if(e.outIdx < 0) {
			var outRec = this.CreateOutRec();
			var op = new hxd_clipper__$Clipper_OutPt();
			outRec.pts = op;
			op.idx = outRec.idx;
			op.pt = new h2d_col_IPoint(pt.x,pt.y);
			op.next = op;
			op.prev = op;
			this.SetHoleState(e,outRec);
			e.outIdx = outRec.idx;
			return op;
		} else {
			var outRec = this.m_PolyOuts[e.outIdx];
			var op = outRec.pts;
			var tmp;
			if(ToFront) {
				var pt2 = op.pt;
				tmp = pt.x == pt2.x && pt.y == pt2.y;
			} else {
				tmp = false;
			}
			if(tmp) {
				return op;
			} else {
				var tmp;
				if(!ToFront) {
					var pt2 = op.prev.pt;
					tmp = pt.x == pt2.x && pt.y == pt2.y;
				} else {
					tmp = false;
				}
				if(tmp) {
					return op.prev;
				}
			}
			var op2 = new hxd_clipper__$Clipper_OutPt();
			op2.idx = outRec.idx;
			op2.pt = new h2d_col_IPoint(pt.x,pt.y);
			op2.next = op;
			op2.prev = op.prev;
			op2.prev.next = op2;
			op.prev = op2;
			if(ToFront) {
				outRec.pts = op2;
			}
			return op2;
		}
	}
	,HorzSegmentsOverlap: function(seg1a,seg1b,seg2a,seg2b) {
		if(seg1a > seg1b) {
			var tmp = seg1a;
			seg1a = seg1b;
			seg1b = tmp;
		}
		if(seg2a > seg2b) {
			var tmp = seg2a;
			seg2a = seg2b;
			seg2b = tmp;
		}
		if(seg1a < seg2b) {
			return seg2a < seg1b;
		} else {
			return false;
		}
	}
	,SetHoleState: function(e,outRec) {
		var isHole = false;
		var e2 = e.prevInAEL;
		while(e2 != null) {
			if(e2.outIdx >= 0 && e2.windDelta != 0) {
				isHole = !isHole;
				if(outRec.firstLeft == null) {
					outRec.firstLeft = this.m_PolyOuts[e2.outIdx];
				}
			}
			e2 = e2.prevInAEL;
		}
		if(isHole) {
			outRec.isHole = true;
		}
	}
	,GetDx: function(pt1,pt2) {
		if(pt1.y == pt2.y) {
			return -9007199254740992.;
		} else {
			return (pt2.x - pt1.x) / (pt2.y - pt1.y);
		}
	}
	,FirstIsBottomPt: function(btmPt1,btmPt2) {
		var p = btmPt1.prev;
		while(true) {
			var pt1 = p.pt;
			var pt2 = btmPt1.pt;
			if(!(pt1.x == pt2.x && pt1.y == pt2.y && p != btmPt1)) {
				break;
			}
			p = p.prev;
		}
		var f = this.GetDx(btmPt1.pt,p.pt);
		var dx1p = f < 0 ? -f : f;
		p = btmPt1.next;
		while(true) {
			var pt1 = p.pt;
			var pt2 = btmPt1.pt;
			if(!(pt1.x == pt2.x && pt1.y == pt2.y && p != btmPt1)) {
				break;
			}
			p = p.next;
		}
		var f = this.GetDx(btmPt1.pt,p.pt);
		var dx1n = f < 0 ? -f : f;
		p = btmPt2.prev;
		while(true) {
			var pt1 = p.pt;
			var pt2 = btmPt2.pt;
			if(!(pt1.x == pt2.x && pt1.y == pt2.y && p != btmPt2)) {
				break;
			}
			p = p.prev;
		}
		var f = this.GetDx(btmPt2.pt,p.pt);
		var dx2p = f < 0 ? -f : f;
		p = btmPt2.next;
		while(true) {
			var pt1 = p.pt;
			var pt2 = btmPt2.pt;
			if(!(pt1.x == pt2.x && pt1.y == pt2.y && p != btmPt2)) {
				break;
			}
			p = p.next;
		}
		var f = this.GetDx(btmPt2.pt,p.pt);
		var dx2n = f < 0 ? -f : f;
		if(!(dx1p >= dx2p && dx1p >= dx2n)) {
			if(dx1n >= dx2p) {
				return dx1n >= dx2n;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,GetBottomPt: function(pp) {
		var dups = null;
		var p = pp.next;
		while(p != pp) {
			if(p.pt.y > pp.pt.y) {
				pp = p;
				dups = null;
			} else if(p.pt.y == pp.pt.y && p.pt.x <= pp.pt.x) {
				if(p.pt.x < pp.pt.x) {
					dups = null;
					pp = p;
				} else if(p.next != pp && p.prev != pp) {
					dups = p;
				}
			}
			p = p.next;
		}
		if(dups != null) {
			var n = 0;
			while(dups != p) {
				if(!this.FirstIsBottomPt(p,dups)) {
					pp = dups;
				}
				dups = dups.next;
				while(true) {
					var pt1 = dups.pt;
					var pt2 = pp.pt;
					if(pt1.x == pt2.x && pt1.y == pt2.y) {
						break;
					}
					dups = dups.next;
				}
			}
		}
		return pp;
	}
	,GetLowermostRec: function(outRec1,outRec2) {
		if(outRec1.bottomPt == null) {
			outRec1.bottomPt = this.GetBottomPt(outRec1.pts);
		}
		if(outRec2.bottomPt == null) {
			outRec2.bottomPt = this.GetBottomPt(outRec2.pts);
		}
		var bPt1 = outRec1.bottomPt;
		var bPt2 = outRec2.bottomPt;
		if(bPt1.pt.y > bPt2.pt.y) {
			return outRec1;
		} else if(bPt1.pt.y < bPt2.pt.y) {
			return outRec2;
		} else if(bPt1.pt.x < bPt2.pt.x) {
			return outRec1;
		} else if(bPt1.pt.x > bPt2.pt.x) {
			return outRec2;
		} else if(bPt1.next == bPt1) {
			return outRec2;
		} else if(bPt2.next == bPt2) {
			return outRec1;
		} else if(this.FirstIsBottomPt(bPt1,bPt2)) {
			return outRec1;
		} else {
			return outRec2;
		}
	}
	,Param1RightOfParam2: function(outRec1,outRec2) {
		do {
			outRec1 = outRec1.firstLeft;
			if(outRec1 == outRec2) {
				return true;
			}
		} while(outRec1 != null);
		return false;
	}
	,GetOutRec: function(idx) {
		var outrec = this.m_PolyOuts[idx];
		while(outrec != this.m_PolyOuts[outrec.idx]) outrec = this.m_PolyOuts[outrec.idx];
		return outrec;
	}
	,AppendPolygon: function(e1,e2) {
		var outRec1 = this.m_PolyOuts[e1.outIdx];
		var outRec2 = this.m_PolyOuts[e2.outIdx];
		var holeStateRec;
		if(this.Param1RightOfParam2(outRec1,outRec2)) {
			holeStateRec = outRec2;
		} else if(this.Param1RightOfParam2(outRec2,outRec1)) {
			holeStateRec = outRec1;
		} else {
			holeStateRec = this.GetLowermostRec(outRec1,outRec2);
		}
		var p1_lft = outRec1.pts;
		var p1_rt = p1_lft.prev;
		var p2_lft = outRec2.pts;
		var p2_rt = p2_lft.prev;
		var side;
		if(e1.side == hxd_clipper__$Clipper_EdgeSide.Left) {
			if(e2.side == hxd_clipper__$Clipper_EdgeSide.Left) {
				this.ReversePolyPtLinks(p2_lft);
				p2_lft.next = p1_lft;
				p1_lft.prev = p2_lft;
				p1_rt.next = p2_rt;
				p2_rt.prev = p1_rt;
				outRec1.pts = p2_rt;
			} else {
				p2_rt.next = p1_lft;
				p1_lft.prev = p2_rt;
				p2_lft.prev = p1_rt;
				p1_rt.next = p2_lft;
				outRec1.pts = p2_lft;
			}
			side = hxd_clipper__$Clipper_EdgeSide.Left;
		} else {
			if(e2.side == hxd_clipper__$Clipper_EdgeSide.Right) {
				this.ReversePolyPtLinks(p2_lft);
				p1_rt.next = p2_rt;
				p2_rt.prev = p1_rt;
				p2_lft.next = p1_lft;
				p1_lft.prev = p2_lft;
			} else {
				p1_rt.next = p2_lft;
				p2_lft.prev = p1_rt;
				p1_lft.prev = p2_rt;
				p2_rt.next = p1_lft;
			}
			side = hxd_clipper__$Clipper_EdgeSide.Right;
		}
		outRec1.bottomPt = null;
		if(holeStateRec == outRec2) {
			if(outRec2.firstLeft != outRec1) {
				outRec1.firstLeft = outRec2.firstLeft;
			}
			outRec1.isHole = outRec2.isHole;
		}
		outRec2.pts = null;
		outRec2.bottomPt = null;
		outRec2.firstLeft = outRec1;
		var OKIdx = e1.outIdx;
		var ObsoleteIdx = e2.outIdx;
		e1.outIdx = -1;
		e2.outIdx = -1;
		var e = this.m_ActiveEdges;
		while(e != null) {
			if(e.outIdx == ObsoleteIdx) {
				e.outIdx = OKIdx;
				e.side = side;
				break;
			}
			e = e.nextInAEL;
		}
		outRec2.idx = outRec1.idx;
	}
	,ReversePolyPtLinks: function(pp) {
		if(pp == null) {
			return;
		}
		var pp2;
		var pp1 = pp;
		do {
			pp2 = pp1.next;
			pp1.next = pp1.prev;
			pp1.prev = pp2;
			pp1 = pp2;
		} while(pp1 != pp);
	}
	,SwapSides: function(edge1,edge2) {
		var side = edge1.side;
		edge1.side = edge2.side;
		edge2.side = side;
	}
	,SwapPolyIndexes: function(edge1,edge2) {
		var outIdx = edge1.outIdx;
		edge1.outIdx = edge2.outIdx;
		edge2.outIdx = outIdx;
	}
	,IntersectEdges: function(e1,e2,pt) {
		var e1Contributing = e1.outIdx >= 0;
		var e2Contributing = e2.outIdx >= 0;
		if(e1.polyType == e2.polyType) {
			if(e1.polyType == hxd_clipper_PolyType.Subject ? this.m_SubjFillType == hxd_clipper_PolyFillType.EvenOdd : this.m_ClipFillType == hxd_clipper_PolyFillType.EvenOdd) {
				var oldE1WindCnt = e1.windCnt;
				e1.windCnt = e2.windCnt;
				e2.windCnt = oldE1WindCnt;
			} else {
				if(e1.windCnt + e2.windDelta == 0) {
					e1.windCnt = -e1.windCnt;
				} else {
					e1.windCnt += e2.windDelta;
				}
				if(e2.windCnt - e1.windDelta == 0) {
					e2.windCnt = -e2.windCnt;
				} else {
					e2.windCnt -= e1.windDelta;
				}
			}
		} else {
			if(!(e2.polyType == hxd_clipper_PolyType.Subject ? this.m_SubjFillType == hxd_clipper_PolyFillType.EvenOdd : this.m_ClipFillType == hxd_clipper_PolyFillType.EvenOdd)) {
				e1.windCnt2 += e2.windDelta;
			} else {
				e1.windCnt2 = e1.windCnt2 == 0 ? 1 : 0;
			}
			if(!(e1.polyType == hxd_clipper_PolyType.Subject ? this.m_SubjFillType == hxd_clipper_PolyFillType.EvenOdd : this.m_ClipFillType == hxd_clipper_PolyFillType.EvenOdd)) {
				e2.windCnt2 -= e1.windDelta;
			} else {
				e2.windCnt2 = e2.windCnt2 == 0 ? 1 : 0;
			}
		}
		var e1FillType;
		var e2FillType;
		var e1FillType2;
		var e2FillType2;
		if(e1.polyType == hxd_clipper_PolyType.Subject) {
			e1FillType = this.m_SubjFillType;
			e1FillType2 = this.m_ClipFillType;
		} else {
			e1FillType = this.m_ClipFillType;
			e1FillType2 = this.m_SubjFillType;
		}
		if(e2.polyType == hxd_clipper_PolyType.Subject) {
			e2FillType = this.m_SubjFillType;
			e2FillType2 = this.m_ClipFillType;
		} else {
			e2FillType = this.m_ClipFillType;
			e2FillType2 = this.m_SubjFillType;
		}
		var e1Wc;
		var e2Wc;
		switch(e1FillType._hx_index) {
		case 2:
			e1Wc = e1.windCnt;
			break;
		case 3:
			e1Wc = -e1.windCnt;
			break;
		default:
			var i = e1.windCnt;
			e1Wc = i < 0 ? -i : i;
		}
		switch(e2FillType._hx_index) {
		case 2:
			e2Wc = e2.windCnt;
			break;
		case 3:
			e2Wc = -e2.windCnt;
			break;
		default:
			var i = e2.windCnt;
			e2Wc = i < 0 ? -i : i;
		}
		if(e1Contributing && e2Contributing) {
			if(e1Wc != 0 && e1Wc != 1 || e2Wc != 0 && e2Wc != 1 || e1.polyType != e2.polyType && this.m_ClipType != hxd_clipper_ClipType.Xor) {
				this.AddLocalMaxPoly(e1,e2,pt);
			} else {
				this.AddOutPt(e1,pt);
				this.AddOutPt(e2,pt);
				var side = e1.side;
				e1.side = e2.side;
				e2.side = side;
				this.SwapPolyIndexes(e1,e2);
			}
		} else if(e1Contributing) {
			if(e2Wc == 0 || e2Wc == 1) {
				this.AddOutPt(e1,pt);
				var side = e1.side;
				e1.side = e2.side;
				e2.side = side;
				this.SwapPolyIndexes(e1,e2);
			}
		} else if(e2Contributing) {
			if(e1Wc == 0 || e1Wc == 1) {
				this.AddOutPt(e2,pt);
				var side = e1.side;
				e1.side = e2.side;
				e2.side = side;
				this.SwapPolyIndexes(e1,e2);
			}
		} else if((e1Wc == 0 || e1Wc == 1) && (e2Wc == 0 || e2Wc == 1)) {
			var e1Wc2;
			var e2Wc2;
			switch(e1FillType2._hx_index) {
			case 2:
				e1Wc2 = e1.windCnt2;
				break;
			case 3:
				e1Wc2 = -e1.windCnt2;
				break;
			default:
				var i = e1.windCnt2;
				e1Wc2 = i < 0 ? -i : i;
			}
			switch(e2FillType2._hx_index) {
			case 2:
				e2Wc2 = e2.windCnt2;
				break;
			case 3:
				e2Wc2 = -e2.windCnt2;
				break;
			default:
				var i = e2.windCnt2;
				e2Wc2 = i < 0 ? -i : i;
			}
			if(e1.polyType != e2.polyType) {
				this.AddLocalMinPoly(e1,e2,pt);
			} else if(e1Wc == 1 && e2Wc == 1) {
				switch(this.m_ClipType._hx_index) {
				case 0:
					if(e1Wc2 > 0 && e2Wc2 > 0) {
						this.AddLocalMinPoly(e1,e2,pt);
					}
					break;
				case 1:
					if(e1Wc2 <= 0 && e2Wc2 <= 0) {
						this.AddLocalMinPoly(e1,e2,pt);
					}
					break;
				case 2:
					if(e1.polyType == hxd_clipper_PolyType.Clip && e1Wc2 > 0 && e2Wc2 > 0 || e1.polyType == hxd_clipper_PolyType.Subject && e1Wc2 <= 0 && e2Wc2 <= 0) {
						this.AddLocalMinPoly(e1,e2,pt);
					}
					break;
				case 3:
					this.AddLocalMinPoly(e1,e2,pt);
					break;
				}
			} else {
				var side = e1.side;
				e1.side = e2.side;
				e2.side = side;
			}
		}
	}
	,DeleteFromAEL: function(e) {
		var AelPrev = e.prevInAEL;
		var AelNext = e.nextInAEL;
		if(AelPrev == null && AelNext == null && e != this.m_ActiveEdges) {
			return;
		}
		if(AelPrev != null) {
			AelPrev.nextInAEL = AelNext;
		} else {
			this.m_ActiveEdges = AelNext;
		}
		if(AelNext != null) {
			AelNext.prevInAEL = AelPrev;
		}
		e.nextInAEL = null;
		e.prevInAEL = null;
	}
	,DeleteFromSEL: function(e) {
		var SelPrev = e.prevInSEL;
		var SelNext = e.nextInSEL;
		if(SelPrev == null && SelNext == null && e != this.m_SortedEdges) {
			return;
		}
		if(SelPrev != null) {
			SelPrev.nextInSEL = SelNext;
		} else {
			this.m_SortedEdges = SelNext;
		}
		if(SelNext != null) {
			SelNext.prevInSEL = SelPrev;
		}
		e.nextInSEL = null;
		e.prevInSEL = null;
	}
	,UpdateEdgeIntoAEL: function(e) {
		if(e.nextInLML == null) {
			throw haxe_Exception.thrown("UpdateEdgeIntoAEL: invalid call");
		}
		var AelPrev = e.prevInAEL;
		var AelNext = e.nextInAEL;
		e.nextInLML.outIdx = e.outIdx;
		if(AelPrev != null) {
			AelPrev.nextInAEL = e.nextInLML;
		} else {
			this.m_ActiveEdges = e.nextInLML;
		}
		if(AelNext != null) {
			AelNext.prevInAEL = e.nextInLML;
		}
		e.nextInLML.side = e.side;
		e.nextInLML.windDelta = e.windDelta;
		e.nextInLML.windCnt = e.windCnt;
		e.nextInLML.windCnt2 = e.windCnt2;
		e = e.nextInLML;
		e.currX = e.botX;
		e.currY = e.botY;
		e.prevInAEL = AelPrev;
		e.nextInAEL = AelNext;
		if(e.deltaY != 0) {
			this.InsertScanbeam(e.topY);
		}
		return e;
	}
	,GetHorzDirection: function(HorzEdge) {
		if(HorzEdge.botX < HorzEdge.topX) {
			return { left : HorzEdge.botX, right : HorzEdge.topX, dir : hxd_clipper__$Clipper_Direction.LeftToRight};
		} else {
			return { left : HorzEdge.topX, right : HorzEdge.botX, dir : hxd_clipper__$Clipper_Direction.RightToLeft};
		}
	}
	,ProcessHorizontals: function(isTopOfScanbeam) {
		var horzEdge = this.m_SortedEdges;
		while(horzEdge != null) {
			this.DeleteFromSEL(horzEdge);
			this.ProcessHorizontal(horzEdge,isTopOfScanbeam);
			horzEdge = this.m_SortedEdges;
		}
	}
	,ProcessHorizontal: function(horzEdge,isTopOfScanbeam) {
		var res = this.GetHorzDirection(horzEdge);
		var dir = res.dir;
		var horzLeft = res.left;
		var horzRight = res.right;
		var eLastHorz = horzEdge;
		var eMaxPair = null;
		while(eLastHorz.nextInLML != null && eLastHorz.nextInLML.deltaY == 0) eLastHorz = eLastHorz.nextInLML;
		if(eLastHorz.nextInLML == null) {
			eMaxPair = this.GetMaximaPair(eLastHorz);
		}
		while(true) {
			var IsLastHorz = horzEdge == eLastHorz;
			var e = dir == hxd_clipper__$Clipper_Direction.LeftToRight ? horzEdge.nextInAEL : horzEdge.prevInAEL;
			while(e != null) {
				if(e.currX == horzEdge.topX && horzEdge.nextInLML != null && e.dx < horzEdge.nextInLML.dx) {
					break;
				}
				var eNext = dir == hxd_clipper__$Clipper_Direction.LeftToRight ? e.nextInAEL : e.prevInAEL;
				if(dir == hxd_clipper__$Clipper_Direction.LeftToRight && e.currX <= horzRight || dir == hxd_clipper__$Clipper_Direction.RightToLeft && e.currX >= horzLeft) {
					if(e == eMaxPair && IsLastHorz) {
						if(horzEdge.outIdx >= 0) {
							var op1 = this.AddOutPt(horzEdge,new h2d_col_IPoint(horzEdge.topX,horzEdge.topY));
							var eNextHorz = this.m_SortedEdges;
							while(eNextHorz != null) {
								if(eNextHorz.outIdx >= 0 && this.HorzSegmentsOverlap(horzEdge.botX,horzEdge.topX,eNextHorz.botX,eNextHorz.topX)) {
									var op2 = this.AddOutPt(eNextHorz,new h2d_col_IPoint(eNextHorz.botX,eNextHorz.botY));
									this.AddJoin(op2,op1,new h2d_col_IPoint(eNextHorz.topX,eNextHorz.topY));
								}
								eNextHorz = eNextHorz.nextInSEL;
							}
							this.AddGhostJoin(op1,new h2d_col_IPoint(horzEdge.botX,horzEdge.botY));
							this.AddLocalMaxPoly(horzEdge,eMaxPair,new h2d_col_IPoint(horzEdge.topX,horzEdge.topY));
						}
						this.DeleteFromAEL(horzEdge);
						this.DeleteFromAEL(eMaxPair);
						return;
					} else if(dir == hxd_clipper__$Clipper_Direction.LeftToRight) {
						var Pt = new h2d_col_IPoint(e.currX,horzEdge.currY);
						this.IntersectEdges(horzEdge,e,Pt);
					} else {
						var Pt1 = new h2d_col_IPoint(e.currX,horzEdge.currY);
						this.IntersectEdges(e,horzEdge,Pt1);
					}
					this.SwapPositionsInAEL(horzEdge,e);
				} else if(dir == hxd_clipper__$Clipper_Direction.LeftToRight && e.currX >= horzRight || dir == hxd_clipper__$Clipper_Direction.RightToLeft && e.currX <= horzLeft) {
					break;
				}
				e = eNext;
			}
			if(horzEdge.nextInLML != null && horzEdge.nextInLML.deltaY == 0) {
				horzEdge = this.UpdateEdgeIntoAEL(horzEdge);
				if(horzEdge.outIdx >= 0) {
					this.AddOutPt(horzEdge,new h2d_col_IPoint(horzEdge.botX,horzEdge.botY));
				}
				var out = this.GetHorzDirection(horzEdge);
				dir = out.dir;
				horzLeft = out.left;
				horzRight = out.right;
			} else {
				break;
			}
		}
		if(horzEdge.nextInLML != null) {
			if(horzEdge.outIdx >= 0) {
				var op1 = this.AddOutPt(horzEdge,new h2d_col_IPoint(horzEdge.topX,horzEdge.topY));
				if(isTopOfScanbeam) {
					this.AddGhostJoin(op1,new h2d_col_IPoint(horzEdge.botX,horzEdge.botY));
				}
				horzEdge = this.UpdateEdgeIntoAEL(horzEdge);
				if(horzEdge.windDelta == 0) {
					return;
				}
				var ePrev = horzEdge.prevInAEL;
				var eNext = horzEdge.nextInAEL;
				if(ePrev != null && ePrev.currX == horzEdge.botX && ePrev.currY == horzEdge.botY && ePrev.windDelta != 0 && (ePrev.outIdx >= 0 && ePrev.currY > ePrev.topY && horzEdge.deltaY * ePrev.deltaX == horzEdge.deltaX * ePrev.deltaY)) {
					var op2 = this.AddOutPt(ePrev,new h2d_col_IPoint(horzEdge.botX,horzEdge.botY));
					this.AddJoin(op1,op2,new h2d_col_IPoint(horzEdge.topX,horzEdge.topY));
				} else if(eNext != null && eNext.currX == horzEdge.botX && eNext.currY == horzEdge.botY && eNext.windDelta != 0 && eNext.outIdx >= 0 && eNext.currY > eNext.topY && horzEdge.deltaY * eNext.deltaX == horzEdge.deltaX * eNext.deltaY) {
					var op2 = this.AddOutPt(eNext,new h2d_col_IPoint(horzEdge.botX,horzEdge.botY));
					this.AddJoin(op1,op2,new h2d_col_IPoint(horzEdge.topX,horzEdge.topY));
				}
			} else {
				horzEdge = this.UpdateEdgeIntoAEL(horzEdge);
			}
		} else {
			if(horzEdge.outIdx >= 0) {
				this.AddOutPt(horzEdge,new h2d_col_IPoint(horzEdge.topX,horzEdge.topY));
			}
			this.DeleteFromAEL(horzEdge);
		}
	}
	,GetNextInAEL: function(e,dir) {
		if(dir == hxd_clipper__$Clipper_Direction.LeftToRight) {
			return e.nextInAEL;
		} else {
			return e.prevInAEL;
		}
	}
	,IsMinima: function(e) {
		if(e != null && e.prev.nextInLML != e) {
			return e.next.nextInLML != e;
		} else {
			return false;
		}
	}
	,IsMaxima: function(e,y) {
		if(e != null && e.topY == y) {
			return e.nextInLML == null;
		} else {
			return false;
		}
	}
	,IsIntermediate: function(e,y) {
		if(e.topY == y) {
			return e.nextInLML != null;
		} else {
			return false;
		}
	}
	,GetMaximaPair: function(e) {
		var result = null;
		if(e.next.topX == e.topX && e.next.topY == e.topY && e.next.nextInLML == null) {
			result = e.next;
		} else if(e.prev.topX == e.topX && e.prev.topY == e.topY && e.prev.nextInLML == null) {
			result = e.prev;
		}
		if(result != null && (result.outIdx == -2 || result.nextInAEL == result.prevInAEL && result.deltaY != 0)) {
			return null;
		}
		return result;
	}
	,ProcessIntersections: function(topY) {
		if(this.m_ActiveEdges == null) {
			return true;
		}
		this.BuildIntersectList(topY);
		if(this.m_IntersectList.length == 0) {
			return true;
		}
		if(this.m_IntersectList.length == 1 || this.FixupIntersectionOrder()) {
			this.ProcessIntersectList();
		} else {
			return false;
		}
		this.m_SortedEdges = null;
		return true;
	}
	,BuildIntersectList: function(topY) {
		if(this.m_ActiveEdges == null) {
			return;
		}
		var e = this.m_ActiveEdges;
		this.m_SortedEdges = e;
		while(e != null) {
			e.prevInSEL = e.prevInAEL;
			e.nextInSEL = e.nextInAEL;
			var tmp;
			if(topY == e.topY) {
				tmp = e.topX;
			} else {
				var value = e.dx * (topY - e.botY);
				tmp = e.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
			e.currX = tmp;
			e = e.nextInAEL;
		}
		var isModified = true;
		while(isModified && this.m_SortedEdges != null) {
			isModified = false;
			e = this.m_SortedEdges;
			while(e.nextInSEL != null) {
				var eNext = e.nextInSEL;
				var pt;
				if(e.currX > eNext.currX) {
					var ipx;
					var ipy;
					var b1;
					var b2;
					if(e.dx == eNext.dx) {
						ipy = e.currY;
						if(ipy == e.topY) {
							ipx = e.topX;
						} else {
							var value = e.dx * (ipy - e.botY);
							ipx = e.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
						}
						pt = new h2d_col_IPoint(ipx,ipy);
					} else {
						if(e.deltaX == 0) {
							ipx = e.botX;
							if(eNext.deltaY == 0) {
								ipy = eNext.botY;
							} else {
								b2 = eNext.botY - eNext.botX / eNext.dx;
								var value1 = ipx / eNext.dx + b2;
								ipy = value1 < 0 ? value1 - 0.5 | 0 : value1 + 0.5 | 0;
							}
						} else if(eNext.deltaX == 0) {
							ipx = eNext.botX;
							if(e.deltaY == 0) {
								ipy = e.botY;
							} else {
								b1 = e.botY - e.botX / e.dx;
								var value2 = ipx / e.dx + b1;
								ipy = value2 < 0 ? value2 - 0.5 | 0 : value2 + 0.5 | 0;
							}
						} else {
							b1 = e.botX - e.botY * e.dx;
							b2 = eNext.botX - eNext.botY * eNext.dx;
							var q = (b2 - b1) / (e.dx - eNext.dx);
							ipy = q < 0 ? q - 0.5 | 0 : q + 0.5 | 0;
							var f = e.dx;
							var f1 = eNext.dx;
							if((f < 0 ? -f : f) < (f1 < 0 ? -f1 : f1)) {
								var value3 = e.dx * q + b1;
								ipx = value3 < 0 ? value3 - 0.5 | 0 : value3 + 0.5 | 0;
							} else {
								var value4 = eNext.dx * q + b2;
								ipx = value4 < 0 ? value4 - 0.5 | 0 : value4 + 0.5 | 0;
							}
						}
						if(ipy < e.topY || ipy < eNext.topY) {
							if(e.topY > eNext.topY) {
								ipy = e.topY;
							} else {
								ipy = eNext.topY;
							}
							var f2 = e.dx;
							var f3 = eNext.dx;
							if((f2 < 0 ? -f2 : f2) < (f3 < 0 ? -f3 : f3)) {
								if(ipy == e.topY) {
									ipx = e.topX;
								} else {
									var value5 = e.dx * (ipy - e.botY);
									ipx = e.botX + (value5 < 0 ? value5 - 0.5 | 0 : value5 + 0.5 | 0);
								}
							} else if(ipy == eNext.topY) {
								ipx = eNext.topX;
							} else {
								var value6 = eNext.dx * (ipy - eNext.botY);
								ipx = eNext.botX + (value6 < 0 ? value6 - 0.5 | 0 : value6 + 0.5 | 0);
							}
						}
						if(ipy > e.currY) {
							ipy = e.currY;
							var f4 = e.dx;
							var f5 = eNext.dx;
							if((f4 < 0 ? -f4 : f4) > (f5 < 0 ? -f5 : f5)) {
								if(ipy == eNext.topY) {
									ipx = eNext.topX;
								} else {
									var value7 = eNext.dx * (ipy - eNext.botY);
									ipx = eNext.botX + (value7 < 0 ? value7 - 0.5 | 0 : value7 + 0.5 | 0);
								}
							} else if(ipy == e.topY) {
								ipx = e.topX;
							} else {
								var value8 = e.dx * (ipy - e.botY);
								ipx = e.botX + (value8 < 0 ? value8 - 0.5 | 0 : value8 + 0.5 | 0);
							}
						}
						pt = new h2d_col_IPoint(ipx,ipy);
					}
					var newNode = new hxd_clipper__$Clipper_IntersectNode();
					newNode.edge1 = e;
					newNode.edge2 = eNext;
					newNode.pt = pt;
					this.m_IntersectList.push(newNode);
					this.SwapPositionsInSEL(e,eNext);
					isModified = true;
				} else {
					e = eNext;
				}
			}
			if(e.prevInSEL != null) {
				e.prevInSEL.nextInSEL = null;
			} else {
				break;
			}
		}
		this.m_SortedEdges = null;
	}
	,EdgesAdjacent: function(inode) {
		if(inode.edge1.nextInSEL != inode.edge2) {
			return inode.edge1.prevInSEL == inode.edge2;
		} else {
			return true;
		}
	}
	,IntersectNodeSort: function(node1,node2) {
		return node2.pt.y - node1.pt.y | 0;
	}
	,FixupIntersectionOrder: function() {
		this.m_IntersectList.sort(hxd_clipper_Clipper.compareY);
		var e = this.m_ActiveEdges;
		this.m_SortedEdges = e;
		while(e != null) {
			e.prevInSEL = e.prevInAEL;
			e.nextInSEL = e.nextInAEL;
			e = e.nextInAEL;
		}
		var cnt = this.m_IntersectList.length;
		var _g = 0;
		var _g1 = cnt;
		while(_g < _g1) {
			var i = _g++;
			var inode = this.m_IntersectList[i];
			if(!(inode.edge1.nextInSEL == inode.edge2 || inode.edge1.prevInSEL == inode.edge2)) {
				var j = i + 1;
				while(true) {
					var tmp;
					if(j < cnt) {
						var inode1 = this.m_IntersectList[j];
						tmp = !(inode1.edge1.nextInSEL == inode1.edge2 || inode1.edge1.prevInSEL == inode1.edge2);
					} else {
						tmp = false;
					}
					if(!tmp) {
						break;
					}
					++j;
				}
				if(j == cnt) {
					return false;
				}
				var tmp1 = this.m_IntersectList[i];
				this.m_IntersectList[i] = this.m_IntersectList[j];
				this.m_IntersectList[j] = tmp1;
			}
			this.SwapPositionsInSEL(this.m_IntersectList[i].edge1,this.m_IntersectList[i].edge2);
		}
		return true;
	}
	,ProcessIntersectList: function() {
		var _g = 0;
		var _g1 = this.m_IntersectList.length;
		while(_g < _g1) {
			var i = _g++;
			var iNode = this.m_IntersectList[i];
			this.IntersectEdges(iNode.edge1,iNode.edge2,iNode.pt);
			this.SwapPositionsInAEL(iNode.edge1,iNode.edge2);
		}
		this.m_IntersectList = [];
	}
	,Round: function(value) {
		if(value < 0) {
			return value - 0.5 | 0;
		} else {
			return value + 0.5 | 0;
		}
	}
	,TopX: function(edge,currentY) {
		if(currentY == edge.topY) {
			return edge.topX;
		}
		var value = edge.dx * (currentY - edge.botY);
		return edge.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
	}
	,IntersectPoint: function(edge1,edge2) {
		var ipx;
		var ipy;
		var b1;
		var b2;
		if(edge1.dx == edge2.dx) {
			ipy = edge1.currY;
			if(ipy == edge1.topY) {
				ipx = edge1.topX;
			} else {
				var value = edge1.dx * (ipy - edge1.botY);
				ipx = edge1.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
			return new h2d_col_IPoint(ipx,ipy);
		}
		if(edge1.deltaX == 0) {
			ipx = edge1.botX;
			if(edge2.deltaY == 0) {
				ipy = edge2.botY;
			} else {
				b2 = edge2.botY - edge2.botX / edge2.dx;
				var value = ipx / edge2.dx + b2;
				ipy = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
			}
		} else if(edge2.deltaX == 0) {
			ipx = edge2.botX;
			if(edge1.deltaY == 0) {
				ipy = edge1.botY;
			} else {
				b1 = edge1.botY - edge1.botX / edge1.dx;
				var value = ipx / edge1.dx + b1;
				ipy = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
			}
		} else {
			b1 = edge1.botX - edge1.botY * edge1.dx;
			b2 = edge2.botX - edge2.botY * edge2.dx;
			var q = (b2 - b1) / (edge1.dx - edge2.dx);
			ipy = q < 0 ? q - 0.5 | 0 : q + 0.5 | 0;
			var f = edge1.dx;
			var f1 = edge2.dx;
			if((f < 0 ? -f : f) < (f1 < 0 ? -f1 : f1)) {
				var value = edge1.dx * q + b1;
				ipx = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
			} else {
				var value = edge2.dx * q + b2;
				ipx = value < 0 ? value - 0.5 | 0 : value + 0.5 | 0;
			}
		}
		if(ipy < edge1.topY || ipy < edge2.topY) {
			if(edge1.topY > edge2.topY) {
				ipy = edge1.topY;
			} else {
				ipy = edge2.topY;
			}
			var f = edge1.dx;
			var f1 = edge2.dx;
			if((f < 0 ? -f : f) < (f1 < 0 ? -f1 : f1)) {
				if(ipy == edge1.topY) {
					ipx = edge1.topX;
				} else {
					var value = edge1.dx * (ipy - edge1.botY);
					ipx = edge1.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
				}
			} else if(ipy == edge2.topY) {
				ipx = edge2.topX;
			} else {
				var value = edge2.dx * (ipy - edge2.botY);
				ipx = edge2.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
		}
		if(ipy > edge1.currY) {
			ipy = edge1.currY;
			var f = edge1.dx;
			var f1 = edge2.dx;
			if((f < 0 ? -f : f) > (f1 < 0 ? -f1 : f1)) {
				if(ipy == edge2.topY) {
					ipx = edge2.topX;
				} else {
					var value = edge2.dx * (ipy - edge2.botY);
					ipx = edge2.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
				}
			} else if(ipy == edge1.topY) {
				ipx = edge1.topX;
			} else {
				var value = edge1.dx * (ipy - edge1.botY);
				ipx = edge1.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
			}
		}
		return new h2d_col_IPoint(ipx,ipy);
	}
	,ProcessEdgesAtTopOfScanbeam: function(topY) {
		var e = this.m_ActiveEdges;
		while(e != null) {
			var IsMaximaEdge = e != null && e.topY == topY && e.nextInLML == null;
			if(IsMaximaEdge) {
				var eMaxPair = this.GetMaximaPair(e);
				IsMaximaEdge = eMaxPair == null || eMaxPair.deltaY != 0;
			}
			if(IsMaximaEdge) {
				var ePrev = e.prevInAEL;
				this.DoMaxima(e);
				if(ePrev == null) {
					e = this.m_ActiveEdges;
				} else {
					e = ePrev.nextInAEL;
				}
			} else {
				if(e.topY == topY && e.nextInLML != null && e.nextInLML.deltaY == 0) {
					e = this.UpdateEdgeIntoAEL(e);
					if(e.outIdx >= 0) {
						this.AddOutPt(e,new h2d_col_IPoint(e.botX,e.botY));
					}
					this.AddEdgeToSEL(e);
				} else {
					var tmp;
					if(topY == e.topY) {
						tmp = e.topX;
					} else {
						var value = e.dx * (topY - e.botY);
						tmp = e.botX + (value < 0 ? value - 0.5 | 0 : value + 0.5 | 0);
					}
					e.currX = tmp;
					e.currY = topY;
				}
				if(this.strictlySimple) {
					var ePrev1 = e.prevInAEL;
					if(e.outIdx >= 0 && e.windDelta != 0 && ePrev1 != null && ePrev1.outIdx >= 0 && ePrev1.currX == e.currX && ePrev1.windDelta != 0) {
						var ip = new h2d_col_IPoint(e.currX,e.currY);
						var op = this.AddOutPt(ePrev1,ip);
						var op2 = this.AddOutPt(e,ip);
						this.AddJoin(op,op2,ip);
					}
				}
				e = e.nextInAEL;
			}
		}
		this.ProcessHorizontals(true);
		e = this.m_ActiveEdges;
		while(e != null) {
			if(e.topY == topY && e.nextInLML != null) {
				var op = null;
				if(e.outIdx >= 0) {
					op = this.AddOutPt(e,new h2d_col_IPoint(e.topX,e.topY));
				}
				e = this.UpdateEdgeIntoAEL(e);
				var ePrev = e.prevInAEL;
				var eNext = e.nextInAEL;
				if(ePrev != null && ePrev.currX == e.botX && ePrev.currY == e.botY && op != null && ePrev.outIdx >= 0 && ePrev.currY > ePrev.topY && e.deltaY * ePrev.deltaX == e.deltaX * ePrev.deltaY && e.windDelta != 0 && ePrev.windDelta != 0) {
					var op2 = this.AddOutPt(ePrev,new h2d_col_IPoint(e.botX,e.botY));
					this.AddJoin(op,op2,new h2d_col_IPoint(e.topX,e.topY));
				} else if(eNext != null && eNext.currX == e.botX && eNext.currY == e.botY && op != null && eNext.outIdx >= 0 && eNext.currY > eNext.topY && e.deltaY * eNext.deltaX == e.deltaX * eNext.deltaY && e.windDelta != 0 && eNext.windDelta != 0) {
					var op21 = this.AddOutPt(eNext,new h2d_col_IPoint(e.botX,e.botY));
					this.AddJoin(op,op21,new h2d_col_IPoint(e.topX,e.topY));
				}
			}
			e = e.nextInAEL;
		}
	}
	,DoMaxima: function(e) {
		var eMaxPair = this.GetMaximaPair(e);
		if(eMaxPair == null) {
			if(e.outIdx >= 0) {
				this.AddOutPt(e,new h2d_col_IPoint(e.topX,e.topY));
			}
			this.DeleteFromAEL(e);
			return;
		}
		var eNext = e.nextInAEL;
		while(eNext != null && eNext != eMaxPair) {
			this.IntersectEdges(e,eNext,new h2d_col_IPoint(e.topX,e.topY));
			this.SwapPositionsInAEL(e,eNext);
			eNext = e.nextInAEL;
		}
		if(e.outIdx == -1 && eMaxPair.outIdx == -1) {
			this.DeleteFromAEL(e);
			this.DeleteFromAEL(eMaxPair);
		} else if(e.outIdx >= 0 && eMaxPair.outIdx >= 0) {
			if(e.outIdx >= 0) {
				this.AddLocalMaxPoly(e,eMaxPair,new h2d_col_IPoint(e.topX,e.topY));
			}
			this.DeleteFromAEL(e);
			this.DeleteFromAEL(eMaxPair);
		} else {
			throw haxe_Exception.thrown("DoMaxima error");
		}
	}
	,reversePolygons: function(polys) {
		var _g_i = 0;
		var _g_a = polys;
		var _g_l = _g_a.length;
		while(_g_i < _g_l) {
			var p = _g_a[_g_i++];
			h2d_col_IPolygon.reverse(p);
		}
	}
	,PointCount: function(pts) {
		if(pts == null) {
			return 0;
		}
		var result = 0;
		var p = pts;
		do {
			++result;
			p = p.next;
		} while(p != pts);
		return result;
	}
	,BuildResult: function() {
		var solution = [];
		var _g = 0;
		var _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			var outRec = _g1[_g];
			++_g;
			if(outRec.pts == null) {
				continue;
			}
			if(this.resultKind == hxd_clipper_ResultKind.NoHoles && outRec.isHole) {
				continue;
			}
			if(this.resultKind == hxd_clipper_ResultKind.HolesOnly && !outRec.isHole) {
				continue;
			}
			var p = outRec.pts.prev;
			var cnt = this.PointCount(p);
			if(cnt < 2) {
				continue;
			}
			var points = null;
			var pg = points == null ? [] : points;
			var _g2 = 0;
			var _g3 = cnt;
			while(_g2 < _g3) {
				var j = _g2++;
				pg.push(p.pt);
				p = p.prev;
			}
			solution.push(pg);
		}
		return solution;
	}
	,BuildResult2: function(polytree) {
		polytree.clear();
		var _g = 0;
		var _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			var outRec = _g1[_g];
			++_g;
			var cnt = this.PointCount(outRec.pts);
			if(cnt < 3) {
				continue;
			}
			this.FixHoleLinkage(outRec);
			var pn = new hxd_clipper__$Clipper_PolyNode();
			polytree.allPolys.push(pn);
			outRec.polyNode = pn;
			var op = outRec.pts.prev;
			var _g2 = 0;
			var _g3 = cnt;
			while(_g2 < _g3) {
				var j = _g2++;
				pn.polygon.push(op.pt);
				op = op.prev;
			}
		}
		var _g = 0;
		var _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			var outRec = _g1[_g];
			++_g;
			if(outRec.polyNode == null) {
				continue;
			} else if(outRec.firstLeft != null && outRec.firstLeft.polyNode != null) {
				outRec.firstLeft.polyNode.addChild(outRec.polyNode);
			} else {
				polytree.addChild(outRec.polyNode);
			}
		}
	}
	,FixupOutPolygon: function(outRec) {
		var lastOK = null;
		outRec.bottomPt = null;
		var pp = outRec.pts;
		while(true) {
			if(pp.prev == pp || pp.prev == pp.next) {
				outRec.pts = null;
				return;
			}
			var tmp;
			var tmp1;
			var pt1 = pp.pt;
			var pt2 = pp.next.pt;
			if(!(pt1.x == pt2.x && pt1.y == pt2.y)) {
				var pt11 = pp.pt;
				var pt21 = pp.prev.pt;
				tmp1 = pt11.x == pt21.x && pt11.y == pt21.y;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				var pt12 = pp.prev.pt;
				var pt22 = pp.pt;
				var pt3 = pp.next.pt;
				tmp = (pt12.y - pt22.y) * (pt22.x - pt3.x) - (pt12.x - pt22.x) * (pt22.y - pt3.y) == 0 && (!this.preserveCollinear || !this.Pt2IsBetweenPt1AndPt3(pp.prev.pt,pp.pt,pp.next.pt));
			} else {
				tmp = true;
			}
			if(tmp) {
				lastOK = null;
				var tmp2 = pp;
				pp.prev.next = pp.next;
				pp.next.prev = pp.prev;
				pp = pp.prev;
				tmp2 = null;
			} else if(pp == lastOK) {
				break;
			} else {
				if(lastOK == null) {
					lastOK = pp;
				}
				pp = pp.next;
			}
		}
		outRec.pts = pp;
	}
	,DupOutPt: function(outPt,InsertAfter) {
		var result = new hxd_clipper__$Clipper_OutPt();
		result.pt = outPt.pt;
		result.idx = outPt.idx;
		if(InsertAfter) {
			result.next = outPt.next;
			result.prev = outPt;
			outPt.next.prev = result;
			outPt.next = result;
		} else {
			result.prev = outPt.prev;
			result.next = outPt;
			outPt.prev.next = result;
			outPt.prev = result;
		}
		return result;
	}
	,GetOverlap: function(a1,a2,b1,b2) {
		var Left;
		var Right;
		if(a1 < a2) {
			if(b1 < b2) {
				Left = a1 < b1 ? b1 : a1;
				Right = a2 > b2 ? b2 : a2;
			} else {
				Left = a1 < b2 ? b2 : a1;
				Right = a2 > b1 ? b1 : a2;
			}
		} else if(b1 < b2) {
			Left = a2 < b1 ? b1 : a2;
			Right = a1 > b2 ? b2 : a1;
		} else {
			Left = a2 < b2 ? b2 : a2;
			Right = a1 > b1 ? b1 : a1;
		}
		return { left : Left, right : Right, done : Left < Right};
	}
	,JoinHorz: function(op1,op1b,op2,op2b,pt,DiscardLeft) {
		var Dir1 = op1.pt.x > op1b.pt.x ? hxd_clipper__$Clipper_Direction.RightToLeft : hxd_clipper__$Clipper_Direction.LeftToRight;
		var Dir2 = op2.pt.x > op2b.pt.x ? hxd_clipper__$Clipper_Direction.RightToLeft : hxd_clipper__$Clipper_Direction.LeftToRight;
		if(Dir1 == Dir2) {
			return false;
		}
		if(Dir1 == hxd_clipper__$Clipper_Direction.LeftToRight) {
			while(op1.next.pt.x <= pt.x && op1.next.pt.x >= op1.pt.x && op1.next.pt.y == pt.y) op1 = op1.next;
			if(DiscardLeft && op1.pt.x != pt.x) {
				op1 = op1.next;
			}
			op1b = this.DupOutPt(op1,!DiscardLeft);
			if(op1b.pt != pt) {
				op1 = op1b;
				op1.pt = pt;
				op1b = this.DupOutPt(op1,!DiscardLeft);
			}
		} else {
			while(op1.next.pt.x >= pt.x && op1.next.pt.x <= op1.pt.x && op1.next.pt.y == pt.y) op1 = op1.next;
			if(!DiscardLeft && op1.pt.x != pt.x) {
				op1 = op1.next;
			}
			op1b = this.DupOutPt(op1,DiscardLeft);
			if(op1b.pt != pt) {
				op1 = op1b;
				op1.pt = pt;
				op1b = this.DupOutPt(op1,DiscardLeft);
			}
		}
		if(Dir2 == hxd_clipper__$Clipper_Direction.LeftToRight) {
			while(op2.next.pt.x <= pt.x && op2.next.pt.x >= op2.pt.x && op2.next.pt.y == pt.y) op2 = op2.next;
			if(DiscardLeft && op2.pt.x != pt.x) {
				op2 = op2.next;
			}
			op2b = this.DupOutPt(op2,!DiscardLeft);
			if(op2b.pt != pt) {
				op2 = op2b;
				op2.pt = pt;
				op2b = this.DupOutPt(op2,!DiscardLeft);
			}
		} else {
			while(op2.next.pt.x >= pt.x && op2.next.pt.x <= op2.pt.x && op2.next.pt.y == pt.y) op2 = op2.next;
			if(!DiscardLeft && op2.pt.x != pt.x) {
				op2 = op2.next;
			}
			op2b = this.DupOutPt(op2,DiscardLeft);
			if(op2b.pt != pt) {
				op2 = op2b;
				op2.pt = pt;
				op2b = this.DupOutPt(op2,DiscardLeft);
			}
		}
		if(Dir1 == hxd_clipper__$Clipper_Direction.LeftToRight == DiscardLeft) {
			op1.prev = op2;
			op2.next = op1;
			op1b.next = op2b;
			op2b.prev = op1b;
		} else {
			op1.next = op2;
			op2.prev = op1;
			op1b.prev = op2b;
			op2b.next = op1b;
		}
		return true;
	}
	,JoinPoints: function(j,outRec1,outRec2) {
		var op1 = j.outPt1;
		var op1b;
		var op2 = j.outPt2;
		var op2b;
		var isHorizontal = j.outPt1.pt.y == j.offPt.y;
		var tmp;
		var tmp1;
		if(isHorizontal) {
			var pt1 = j.offPt;
			var pt2 = j.outPt1.pt;
			tmp1 = pt1.x == pt2.x && pt1.y == pt2.y;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var pt1 = j.offPt;
			var pt2 = j.outPt2.pt;
			tmp = pt1.x == pt2.x && pt1.y == pt2.y;
		} else {
			tmp = false;
		}
		if(tmp) {
			if(outRec1 != outRec2) {
				return false;
			}
			op1b = j.outPt1.next;
			while(true) {
				var tmp;
				if(op1b != op1) {
					var pt1 = op1b.pt;
					var pt2 = j.offPt;
					tmp = pt1.x == pt2.x && pt1.y == pt2.y;
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				op1b = op1b.next;
			}
			var reverse1 = op1b.pt.y > j.offPt.y;
			op2b = j.outPt2.next;
			while(true) {
				var tmp;
				if(op2b != op2) {
					var pt1 = op2b.pt;
					var pt2 = j.offPt;
					tmp = pt1.x == pt2.x && pt1.y == pt2.y;
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				op2b = op2b.next;
			}
			var reverse2 = op2b.pt.y > j.offPt.y;
			if(reverse1 == reverse2) {
				return false;
			}
			if(reverse1) {
				op1b = this.DupOutPt(op1,false);
				op2b = this.DupOutPt(op2,true);
				op1.prev = op2;
				op2.next = op1;
				op1b.next = op2b;
				op2b.prev = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			} else {
				op1b = this.DupOutPt(op1,true);
				op2b = this.DupOutPt(op2,false);
				op1.next = op2;
				op2.prev = op1;
				op1b.prev = op2b;
				op2b.next = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			}
		} else if(isHorizontal) {
			op1b = op1;
			while(op1.prev.pt.y == op1.pt.y && op1.prev != op1b && op1.prev != op2) op1 = op1.prev;
			while(op1b.next.pt.y == op1b.pt.y && op1b.next != op1 && op1b.next != op2) op1b = op1b.next;
			if(op1b.next == op1 || op1b.next == op2) {
				return false;
			}
			op2b = op2;
			while(op2.prev.pt.y == op2.pt.y && op2.prev != op2b && op2.prev != op1b) op2 = op2.prev;
			while(op2b.next.pt.y == op2b.pt.y && op2b.next != op2 && op2b.next != op1) op2b = op2b.next;
			if(op2b.next == op2 || op2b.next == op1) {
				return false;
			}
			var out = this.GetOverlap(op1.pt.x,op1b.pt.x,op2.pt.x,op2b.pt.x);
			if(!out.done) {
				return false;
			}
			var Left = out.left;
			var Right = out.right;
			var Pt;
			var DiscardLeftSide;
			if(op1.pt.x >= Left && op1.pt.x <= Right) {
				Pt = op1.pt;
				DiscardLeftSide = op1.pt.x > op1b.pt.x;
			} else if(op2.pt.x >= Left && op2.pt.x <= Right) {
				Pt = op2.pt;
				DiscardLeftSide = op2.pt.x > op2b.pt.x;
			} else if(op1b.pt.x >= Left && op1b.pt.x <= Right) {
				Pt = op1b.pt;
				DiscardLeftSide = op1b.pt.x > op1.pt.x;
			} else {
				Pt = op2b.pt;
				DiscardLeftSide = op2b.pt.x > op2.pt.x;
			}
			j.outPt1 = op1;
			j.outPt2 = op2;
			return this.JoinHorz(op1,op1b,op2,op2b,Pt,DiscardLeftSide);
		} else {
			op1b = op1.next;
			while(true) {
				var pt1 = op1b.pt;
				var pt2 = op1.pt;
				if(!(pt1.x == pt2.x && pt1.y == pt2.y && op1b != op1)) {
					break;
				}
				op1b = op1b.next;
			}
			var Reverse1;
			if(op1b.pt.y <= op1.pt.y) {
				var pt1 = op1.pt;
				var pt2 = op1b.pt;
				var pt3 = j.offPt;
				Reverse1 = (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) != 0;
			} else {
				Reverse1 = true;
			}
			if(Reverse1) {
				op1b = op1.prev;
				while(true) {
					var pt1 = op1b.pt;
					var pt2 = op1.pt;
					if(!(pt1.x == pt2.x && pt1.y == pt2.y && op1b != op1)) {
						break;
					}
					op1b = op1b.prev;
				}
				var tmp;
				if(op1b.pt.y <= op1.pt.y) {
					var pt1 = op1.pt;
					var pt2 = op1b.pt;
					var pt3 = j.offPt;
					tmp = (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) != 0;
				} else {
					tmp = true;
				}
				if(tmp) {
					return false;
				}
			}
			op2b = op2.next;
			while(true) {
				var pt1 = op2b.pt;
				var pt2 = op2.pt;
				if(!(pt1.x == pt2.x && pt1.y == pt2.y && op2b != op2)) {
					break;
				}
				op2b = op2b.next;
			}
			var Reverse2;
			if(op2b.pt.y <= op2.pt.y) {
				var pt1 = op2.pt;
				var pt2 = op2b.pt;
				var pt3 = j.offPt;
				Reverse2 = (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) != 0;
			} else {
				Reverse2 = true;
			}
			if(Reverse2) {
				op2b = op2.prev;
				while(true) {
					var pt1 = op2b.pt;
					var pt2 = op2.pt;
					if(!(pt1.x == pt2.x && pt1.y == pt2.y && op2b != op2)) {
						break;
					}
					op2b = op2b.prev;
				}
				var tmp;
				if(op2b.pt.y <= op2.pt.y) {
					var pt1 = op2.pt;
					var pt2 = op2b.pt;
					var pt3 = j.offPt;
					tmp = (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) != 0;
				} else {
					tmp = true;
				}
				if(tmp) {
					return false;
				}
			}
			if(op1b == op1 || op2b == op2 || op1b == op2b || outRec1 == outRec2 && Reverse1 == Reverse2) {
				return false;
			}
			if(Reverse1) {
				op1b = this.DupOutPt(op1,false);
				op2b = this.DupOutPt(op2,true);
				op1.prev = op2;
				op2.next = op1;
				op1b.next = op2b;
				op2b.prev = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			} else {
				op1b = this.DupOutPt(op1,true);
				op2b = this.DupOutPt(op2,false);
				op1.next = op2;
				op2.prev = op1;
				op1b.prev = op2b;
				op2b.next = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			}
		}
	}
	,PointInPolygon: function(pt,pol) {
		var result = 0;
		var cnt = pol.length;
		if(cnt < 3) {
			return 0;
		}
		var ip = pol[0];
		var _g = 1;
		var _g1 = cnt + 1;
		while(_g < _g1) {
			var i = _g++;
			var ipNext = i == cnt ? pol[0] : pol[i];
			if(ipNext.y == pt.y) {
				if(ipNext.x == pt.x || ip.y == pt.y && ipNext.x > pt.x == ip.x < pt.x) {
					return -1;
				}
			}
			if(ip.y < pt.y != ipNext.y < pt.y) {
				if(ip.x >= pt.x) {
					if(ipNext.x > pt.x) {
						result = 1 - result;
					} else {
						var d = (ip.x - pt.x) * (ipNext.y - pt.y) - (ipNext.x - pt.x) * (ip.y - pt.y);
						if(d == 0) {
							return -1;
						} else if(d > 0 == ipNext.y > ip.y) {
							result = 1 - result;
						}
					}
				} else if(ipNext.x > pt.x) {
					var d1 = (ip.x - pt.x) * (ipNext.y - pt.y) - (ipNext.x - pt.x) * (ip.y - pt.y);
					if(d1 == 0) {
						return -1;
					} else if(d1 > 0 == ipNext.y > ip.y) {
						result = 1 - result;
					}
				}
			}
			ip = ipNext;
		}
		return result;
	}
	,PointInPolygon2: function(pt,op) {
		var result = 0;
		var startOp = op;
		var ptx = pt.x;
		var pty = pt.y;
		var poly0x = op.pt.x;
		var poly0y = op.pt.y;
		do {
			op = op.next;
			var poly1x = op.pt.x;
			var poly1y = op.pt.y;
			if(poly1y == pty) {
				if(poly1x == ptx || poly0y == pty && poly1x > ptx == poly0x < ptx) {
					return -1;
				}
			}
			if(poly0y < pty != poly1y < pty) {
				if(poly0x >= ptx) {
					if(poly1x > ptx) {
						result = 1 - result;
					} else {
						var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);
						if(d == 0) {
							return -1;
						}
						if(d > 0 == poly1y > poly0y) {
							result = 1 - result;
						}
					}
				} else if(poly1x > ptx) {
					var d1 = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);
					if(d1 == 0) {
						return -1;
					}
					if(d1 > 0 == poly1y > poly0y) {
						result = 1 - result;
					}
				}
			}
			poly0x = poly1x;
			poly0y = poly1y;
		} while(startOp != op);
		return result;
	}
	,Poly2ContainsPoly1: function(outPt1,outPt2) {
		var op = outPt1;
		do {
			var res = this.PointInPolygon2(op.pt,outPt2);
			if(res >= 0) {
				return res > 0;
			}
			op = op.next;
		} while(op != outPt1);
		return true;
	}
	,FixupFirstLefts1: function(OldOutRec,NewOutRec) {
		var _g = 0;
		var _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			var outRec = _g1[_g];
			++_g;
			if(outRec.pts == null || outRec.firstLeft == null) {
				continue;
			}
			var firstLeft = this.ParseFirstLeft(outRec.firstLeft);
			if(firstLeft == OldOutRec) {
				if(this.Poly2ContainsPoly1(outRec.pts,NewOutRec.pts)) {
					outRec.firstLeft = NewOutRec;
				}
			}
		}
	}
	,FixupFirstLefts2: function(OldOutRec,NewOutRec) {
		var _g = 0;
		var _g1 = this.m_PolyOuts;
		while(_g < _g1.length) {
			var outRec = _g1[_g];
			++_g;
			if(outRec.firstLeft == OldOutRec) {
				outRec.firstLeft = NewOutRec;
			}
		}
	}
	,ParseFirstLeft: function(FirstLeft) {
		while(FirstLeft != null && FirstLeft.pts == null) FirstLeft = FirstLeft.firstLeft;
		return FirstLeft;
	}
	,JoinCommonEdges: function() {
		var _g = 0;
		var _g1 = this.m_Joins.length;
		while(_g < _g1) {
			var i = _g++;
			var join = this.m_Joins[i];
			var outRec1 = this.GetOutRec(join.outPt1.idx);
			var outRec2 = this.GetOutRec(join.outPt2.idx);
			if(outRec1.pts == null || outRec2.pts == null) {
				continue;
			}
			var holeStateRec;
			if(outRec1 == outRec2) {
				holeStateRec = outRec1;
			} else if(this.Param1RightOfParam2(outRec1,outRec2)) {
				holeStateRec = outRec2;
			} else if(this.Param1RightOfParam2(outRec2,outRec1)) {
				holeStateRec = outRec1;
			} else {
				holeStateRec = this.GetLowermostRec(outRec1,outRec2);
			}
			if(!this.JoinPoints(join,outRec1,outRec2)) {
				continue;
			}
			if(outRec1 == outRec2) {
				outRec1.pts = join.outPt1;
				outRec1.bottomPt = null;
				outRec2 = this.CreateOutRec();
				outRec2.pts = join.outPt2;
				this.UpdateOutPtIdxs(outRec2);
				if(this.m_UsingPolyTree) {
					var _g2 = 0;
					var _g3 = this.m_PolyOuts.length - 1;
					while(_g2 < _g3) {
						var j = _g2++;
						var oRec = this.m_PolyOuts[j];
						if(oRec.pts == null || this.ParseFirstLeft(oRec.firstLeft) != outRec1 || oRec.isHole == outRec1.isHole) {
							continue;
						}
						if(this.Poly2ContainsPoly1(oRec.pts,join.outPt2)) {
							oRec.firstLeft = outRec2;
						}
					}
				}
				if(this.Poly2ContainsPoly1(outRec2.pts,outRec1.pts)) {
					outRec2.isHole = !outRec1.isHole;
					outRec2.firstLeft = outRec1;
					if(this.m_UsingPolyTree) {
						this.FixupFirstLefts2(outRec2,outRec1);
					}
					var b = this.reverseSolution;
					if((outRec2.isHole ? !b : b) == this.Area(outRec2) > 0) {
						this.ReversePolyPtLinks(outRec2.pts);
					}
				} else if(this.Poly2ContainsPoly1(outRec1.pts,outRec2.pts)) {
					outRec2.isHole = outRec1.isHole;
					outRec1.isHole = !outRec2.isHole;
					outRec2.firstLeft = outRec1.firstLeft;
					outRec1.firstLeft = outRec2;
					if(this.m_UsingPolyTree) {
						this.FixupFirstLefts2(outRec1,outRec2);
					}
					var b1 = this.reverseSolution;
					if((outRec1.isHole ? !b1 : b1) == this.Area(outRec1) > 0) {
						this.ReversePolyPtLinks(outRec1.pts);
					}
				} else {
					outRec2.isHole = outRec1.isHole;
					outRec2.firstLeft = outRec1.firstLeft;
					if(this.m_UsingPolyTree) {
						this.FixupFirstLefts1(outRec1,outRec2);
					}
				}
			} else {
				outRec2.pts = null;
				outRec2.bottomPt = null;
				outRec2.idx = outRec1.idx;
				outRec1.isHole = holeStateRec.isHole;
				if(holeStateRec == outRec2) {
					outRec1.firstLeft = outRec2.firstLeft;
				}
				outRec2.firstLeft = outRec1;
				if(this.m_UsingPolyTree) {
					this.FixupFirstLefts2(outRec2,outRec1);
				}
			}
		}
	}
	,UpdateOutPtIdxs: function(outrec) {
		var op = outrec.pts;
		do {
			op.idx = outrec.idx;
			op = op.prev;
		} while(op != outrec.pts);
	}
	,DoSimplePolygons: function() {
		var i = 0;
		while(i < this.m_PolyOuts.length) {
			var outrec = this.m_PolyOuts[i++];
			var op = outrec.pts;
			if(op == null) {
				continue;
			}
			do {
				var op2 = op.next;
				while(op2 != outrec.pts) {
					var pt1 = op.pt;
					var pt2 = op2.pt;
					if(pt1.x == pt2.x && pt1.y == pt2.y && op2.next != op && op2.prev != op) {
						var op3 = op.prev;
						var op4 = op2.prev;
						op.prev = op4;
						op4.next = op;
						op2.prev = op3;
						op3.next = op2;
						outrec.pts = op;
						var outrec2 = this.CreateOutRec();
						outrec2.pts = op2;
						this.UpdateOutPtIdxs(outrec2);
						if(this.Poly2ContainsPoly1(outrec2.pts,outrec.pts)) {
							outrec2.isHole = !outrec.isHole;
							outrec2.firstLeft = outrec;
						} else if(this.Poly2ContainsPoly1(outrec.pts,outrec2.pts)) {
							outrec2.isHole = outrec.isHole;
							outrec.isHole = !outrec2.isHole;
							outrec2.firstLeft = outrec.firstLeft;
							outrec.firstLeft = outrec2;
						} else {
							outrec2.isHole = outrec.isHole;
							outrec2.firstLeft = outrec.firstLeft;
						}
						op2 = op;
					}
					op2 = op2.next;
				}
				op = op.next;
			} while(op != outrec.pts);
		}
	}
	,Area: function(outRec) {
		var op = outRec.pts;
		if(op == null) {
			return 0.;
		}
		var a = 0;
		do {
			a += (op.pt.x + op.prev.pt.x) * (op.prev.pt.y - op.pt.y);
			op = op.next;
		} while(op != outRec.pts);
		return a / 2;
	}
	,DistanceFromLineSqrd: function(pt,ln1,ln2) {
		var A = ln1.y - ln2.y;
		var B = ln2.x - ln1.x;
		var C = A * ln1.x + B * ln1.y;
		C = A * pt.x + B * pt.y - C;
		return C * C / (A * A + B * B);
	}
	,SlopesNearCollinear: function(pt1,pt2,pt3,distSqrd) {
		var f = pt1.x - pt2.x;
		var f1 = pt1.y - pt2.y;
		if((f < 0 ? -f : f) > (f1 < 0 ? -f1 : f1)) {
			if(pt1.x > pt2.x == pt1.x < pt3.x) {
				return this.DistanceFromLineSqrd(pt1,pt2,pt3) < distSqrd;
			} else if(pt2.x > pt1.x == pt2.x < pt3.x) {
				return this.DistanceFromLineSqrd(pt2,pt1,pt3) < distSqrd;
			} else {
				return this.DistanceFromLineSqrd(pt3,pt1,pt2) < distSqrd;
			}
		} else if(pt1.y > pt2.y == pt1.y < pt3.y) {
			return this.DistanceFromLineSqrd(pt1,pt2,pt3) < distSqrd;
		} else if(pt2.y > pt1.y == pt2.y < pt3.y) {
			return this.DistanceFromLineSqrd(pt2,pt1,pt3) < distSqrd;
		} else {
			return this.DistanceFromLineSqrd(pt3,pt1,pt2) < distSqrd;
		}
	}
	,PointsAreClose: function(pt1,pt2,distSqrd) {
		var dx = pt1.x - pt2.x;
		var dy = pt1.y - pt2.y;
		return dx * dx + dy * dy <= distSqrd;
	}
	,ExcludeOp: function(op) {
		var result = op.prev;
		result.next = op.next;
		op.next.prev = result;
		result.idx = 0;
		return result;
	}
	,CleanPolygon: function(path,distance) {
		if(distance == null) {
			distance = 1.415;
		}
		var cnt = path.length;
		if(cnt == 0) {
			var points = null;
			return points == null ? [] : points;
		}
		var outPts = [];
		var _g = 0;
		var _g1 = cnt;
		while(_g < _g1) {
			var i = _g++;
			outPts[i] = new hxd_clipper__$Clipper_OutPt();
			outPts[i].pt = path[i];
			outPts[i].next = outPts[(i + 1) % cnt];
			outPts[i].next.prev = outPts[i];
			outPts[i].idx = 0;
		}
		var distSqrd = distance * distance;
		var op = outPts[0];
		while(op.idx == 0 && op.next != op.prev) if(this.PointsAreClose(op.pt,op.prev.pt,distSqrd)) {
			op = this.ExcludeOp(op);
			--cnt;
		} else if(this.PointsAreClose(op.prev.pt,op.next.pt,distSqrd)) {
			this.ExcludeOp(op.next);
			op = this.ExcludeOp(op);
			cnt -= 2;
		} else if(this.SlopesNearCollinear(op.prev.pt,op.pt,op.next.pt,distSqrd)) {
			op = this.ExcludeOp(op);
			--cnt;
		} else {
			op.idx = 1;
			op = op.next;
		}
		if(cnt < 3) {
			cnt = 0;
		}
		var points = null;
		var result = points == null ? [] : points;
		var _g = 0;
		var _g1 = cnt;
		while(_g < _g1) {
			var i = _g++;
			result.push(op.pt);
			op = op.next;
		}
		outPts = null;
		return result;
	}
	,CleanPolygons: function(polys,distance) {
		if(distance == null) {
			distance = 1.415;
		}
		var polygons = null;
		var result = polygons == null ? [] : polygons;
		var _g = 0;
		var _g1 = polys.length;
		while(_g < _g1) {
			var i = _g++;
			result.push(this.CleanPolygon(polys[i],distance));
		}
		return result;
	}
	,Minkowski: function(pattern,path,IsSum) {
		var polyCnt = pattern.length;
		var pathCnt = path.length;
		var polygons = null;
		var result = polygons == null ? [] : polygons;
		var _g = 0;
		var _g1 = pathCnt;
		while(_g < _g1) {
			var i = _g++;
			var points = null;
			var p = points == null ? [] : points;
			var _g_i = 0;
			var _g_a = pattern;
			var _g_l = _g_a.length;
			while(_g_i < _g_l) {
				var ip = _g_a[_g_i++];
				if(IsSum) {
					p.push(new h2d_col_IPoint(path[i].x + ip.x,path[i].y + ip.y));
				} else {
					p.push(new h2d_col_IPoint(path[i].x - ip.x,path[i].y - ip.y));
				}
			}
			result.push(p);
		}
		var polygons = null;
		var quads = polygons == null ? [] : polygons;
		var _g = 0;
		var _g1 = pathCnt;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = polyCnt;
			while(_g2 < _g3) {
				var j = _g2++;
				var points = null;
				var quad = points == null ? [] : points;
				quad.push(result[i % pathCnt][j % polyCnt]);
				quad.push(result[(i + 1) % pathCnt][j % polyCnt]);
				quad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);
				quad.push(result[i % pathCnt][(j + 1) % polyCnt]);
				if(!(hxd_clipper_Clipper.polArea(quad) >= 0)) {
					h2d_col_IPolygon.reverse(quad);
				}
				quads.push(quad);
			}
		}
		return quads;
	}
	,MinkowskiSum: function(pattern,pol,kind) {
		var paths = this.Minkowski(pattern,pol,true);
		var c = new hxd_clipper_Clipper();
		c.resultKind = kind == null ? hxd_clipper_ResultKind.All : kind;
		c.addPolygons(paths,hxd_clipper_PolyType.Subject);
		return c.execute(hxd_clipper_ClipType.Union,hxd_clipper_PolyFillType.NonZero,hxd_clipper_PolyFillType.NonZero);
	}
	,TranslatePath: function(path,delta) {
		var points = null;
		var outPath = points == null ? [] : points;
		var _g = 0;
		var _g1 = path.length;
		while(_g < _g1) {
			var i = _g++;
			outPath.push(new h2d_col_IPoint(path[i].x + delta.x,path[i].y + delta.y));
		}
		return outPath;
	}
	,PolyTreeToPaths: function(polytree) {
		var polygons = null;
		var result = polygons == null ? [] : polygons;
		this.AddPolyNodeToPaths(polytree,hxd_clipper_NodeType.Any,result);
		return result;
	}
	,AddPolyNodeToPaths: function(polynode,nt,paths) {
		var match = true;
		if(nt._hx_index == 1) {
			return;
		}
		if(polynode.polygon.length > 0 && match) {
			paths.push(polynode.polygon);
		}
		var _g = 0;
		var _g1 = polynode.childs;
		while(_g < _g1.length) {
			var pn = _g1[_g];
			++_g;
			this.AddPolyNodeToPaths(pn,nt,paths);
		}
	}
	,__class__: hxd_clipper_Clipper
});
var hxd_clipper_ClipperOffset = function(miterLimit,arcTolerance) {
	if(arcTolerance == null) {
		arcTolerance = 0.25;
	}
	if(miterLimit == null) {
		miterLimit = 2.0;
	}
	this.two_pi = 6.28318530717958623;
	this.def_arc_tolerance = 0.25;
	this.MiterLimit = miterLimit;
	this.ArcTolerance = arcTolerance;
	this.m_lowest = new h2d_col_IPoint(-1,0);
	this.m_normals = [];
	this.m_polyNodes = new hxd_clipper__$Clipper_PolyNode();
	this.resultKind = hxd_clipper_ResultKind.All;
};
$hxClasses["hxd.clipper.ClipperOffset"] = hxd_clipper_ClipperOffset;
hxd_clipper_ClipperOffset.__name__ = "hxd.clipper.ClipperOffset";
hxd_clipper_ClipperOffset.prototype = {
	clear: function() {
		this.m_polyNodes = new hxd_clipper__$Clipper_PolyNode();
		this.m_lowest = new h2d_col_IPoint(-1,0);
	}
	,addPolygon: function(pol,joinType,endType) {
		var highI = pol.length - 1;
		if(highI < 0) {
			return;
		}
		var newNode = new hxd_clipper__$Clipper_PolyNode();
		newNode.jointype = joinType;
		newNode.endtype = endType;
		if(endType == hxd_clipper_EndType.ClosedLine || endType == hxd_clipper_EndType.ClosedPol) {
			while(highI > 0 && pol[0] == pol[highI]) --highI;
		}
		newNode.polygon.push(pol[0]);
		var j = 0;
		var k = 0;
		var _g = 1;
		var _g1 = highI + 1;
		while(_g < _g1) {
			var i = _g++;
			if(newNode.polygon[j] != pol[i]) {
				++j;
				newNode.polygon.push(pol[i]);
				if(pol[i].y > newNode.polygon[k].y || pol[i].y == newNode.polygon[k].y && pol[i].x < newNode.polygon[k].x) {
					k = j;
				}
			}
		}
		if(endType == hxd_clipper_EndType.ClosedPol && j < 2) {
			return;
		}
		this.m_polyNodes.addChild(newNode);
		if(endType != hxd_clipper_EndType.ClosedPol) {
			return;
		}
		if(this.m_lowest.x < 0) {
			this.m_lowest = new h2d_col_IPoint(this.m_polyNodes.childs.length - 1,k);
		} else {
			var ip = this.m_polyNodes.childs[this.m_lowest.x].polygon[this.m_lowest.y];
			if(newNode.polygon[k].y > ip.y || newNode.polygon[k].y == ip.y && newNode.polygon[k].x < ip.x) {
				this.m_lowest = new h2d_col_IPoint(this.m_polyNodes.childs.length - 1,k);
			}
		}
	}
	,addPolygons: function(pols,joinType,endType) {
		var _g_i = 0;
		var _g_a = pols;
		var _g_l = _g_a.length;
		while(_g_i < _g_l) {
			var p = _g_a[_g_i++];
			this.addPolygon(p,joinType,endType);
		}
	}
	,fixOrientations: function() {
		if(this.m_lowest.x >= 0 && !(hxd_clipper_Clipper.polArea(this.m_polyNodes.childs[this.m_lowest.x].polygon) >= 0)) {
			var _g = 0;
			var _g1 = this.m_polyNodes.childs;
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				if(node.endtype == hxd_clipper_EndType.ClosedPol || node.endtype == hxd_clipper_EndType.ClosedLine && hxd_clipper_Clipper.polArea(node.polygon) >= 0) {
					h2d_col_IPolygon.reverse(node.polygon);
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.m_polyNodes.childs;
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				if(node.endtype == hxd_clipper_EndType.ClosedLine && !(hxd_clipper_Clipper.polArea(node.polygon) >= 0)) {
					h2d_col_IPolygon.reverse(node.polygon);
				}
			}
		}
	}
	,getUnitNormal: function(pt1,pt2) {
		var dx = pt2.x - pt1.x;
		var dy = pt2.y - pt1.y;
		if(dx == 0 && dy == 0) {
			return new h2d_col_PointImpl(0.,0.);
		}
		var dz = 0.;
		if(dz == null) {
			dz = 0.;
		}
		var f = 1 / Math.sqrt(dx * dx + dy * dy + dz * dz);
		dx *= f;
		var x = dy *= f;
		var y = -dx;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,doOffset: function(delta) {
		var polygons = null;
		this.m_destPolys = polygons == null ? [] : polygons;
		this.m_delta = delta;
		if(delta > -1e-20 && delta < 1E-20) {
			var _g = 0;
			var _g1 = this.m_polyNodes.childs;
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				if(node.endtype == hxd_clipper_EndType.ClosedPol) {
					this.m_destPolys.push(node.polygon);
				}
			}
			return;
		}
		if(this.MiterLimit > 2) {
			this.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);
		} else {
			this.m_miterLim = 0.5;
		}
		var y;
		if(this.ArcTolerance <= 0.0) {
			y = this.def_arc_tolerance;
		} else if(this.ArcTolerance > (delta < 0 ? -delta : delta) * this.def_arc_tolerance) {
			y = (delta < 0 ? -delta : delta) * this.def_arc_tolerance;
		} else {
			y = this.ArcTolerance;
		}
		var steps = 3.14159265358979323 / Math.acos(1 - y / (delta < 0 ? -delta : delta)) | 0;
		this.m_sin = Math.sin(this.two_pi / steps);
		this.m_cos = Math.cos(this.two_pi / steps);
		this.m_StepsPerRad = steps / this.two_pi;
		if(delta < 0.) {
			this.m_sin = -this.m_sin;
		}
		var _g = 0;
		var _g1 = this.m_polyNodes.childs;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			this.m_srcPoly = node.polygon;
			var len = this.m_srcPoly.length;
			if(len == 0 || delta <= 0 && (len < 3 || node.endtype != hxd_clipper_EndType.ClosedPol)) {
				continue;
			}
			var points = null;
			this.m_destPoly = points == null ? [] : points;
			if(len == 1) {
				if(node.jointype == hxd_clipper_JoinType.Round) {
					var X = 1.;
					var Y = 0.;
					var _g2 = 1;
					var _g3 = steps + 1;
					while(_g2 < _g3) {
						var j = _g2++;
						this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[0].x + X * delta),Math.round(this.m_srcPoly[0].y + Y * delta)));
						var X2 = X;
						X = X * this.m_cos - this.m_sin * Y;
						Y = X2 * this.m_sin + Y * this.m_cos;
					}
				} else {
					var X1 = -1.;
					var Y1 = -1.;
					this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[0].x + X1 * delta),Math.round(this.m_srcPoly[0].y + Y1 * delta)));
					if(X1 < 0) {
						X1 = 1;
					} else if(Y1 < 0) {
						Y1 = 1;
					} else {
						X1 = -1;
					}
					this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[0].x + X1 * delta),Math.round(this.m_srcPoly[0].y + Y1 * delta)));
					if(X1 < 0) {
						X1 = 1;
					} else if(Y1 < 0) {
						Y1 = 1;
					} else {
						X1 = -1;
					}
					this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[0].x + X1 * delta),Math.round(this.m_srcPoly[0].y + Y1 * delta)));
					if(X1 < 0) {
						X1 = 1;
					} else if(Y1 < 0) {
						Y1 = 1;
					} else {
						X1 = -1;
					}
					this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[0].x + X1 * delta),Math.round(this.m_srcPoly[0].y + Y1 * delta)));
					if(X1 < 0) {
						X1 = 1;
					} else if(Y1 < 0) {
						Y1 = 1;
					} else {
						X1 = -1;
					}
				}
				this.m_destPolys.push(this.m_destPoly);
				continue;
			}
			this.m_normals = [];
			var _g4 = 0;
			var _g5 = len - 1;
			while(_g4 < _g5) {
				var j1 = _g4++;
				this.m_normals.push(this.getUnitNormal(this.m_srcPoly[j1],this.m_srcPoly[j1 + 1]));
			}
			if(node.endtype == hxd_clipper_EndType.ClosedLine || node.endtype == hxd_clipper_EndType.ClosedPol) {
				this.m_normals.push(this.getUnitNormal(this.m_srcPoly[len - 1],this.m_srcPoly[0]));
			} else {
				this.m_normals.push(this.m_normals[len - 2]);
			}
			if(node.endtype == hxd_clipper_EndType.ClosedPol) {
				var k = len - 1;
				var _g6 = 0;
				var _g7 = len;
				while(_g6 < _g7) {
					var j2 = _g6++;
					k = this.offsetPoint(j2,k,node.jointype);
				}
				this.m_destPolys.push(this.m_destPoly);
			} else if(node.endtype == hxd_clipper_EndType.ClosedLine) {
				var k1 = len - 1;
				var _g8 = 0;
				var _g9 = len;
				while(_g8 < _g9) {
					var j3 = _g8++;
					k1 = this.offsetPoint(j3,k1,node.jointype);
				}
				this.m_destPolys.push(this.m_destPoly);
				var points1 = null;
				this.m_destPoly = points1 == null ? [] : points1;
				var n = this.m_normals[len - 1];
				var j4 = len - 1;
				while(j4 > 0) {
					var x = -this.m_normals[j4 - 1].x;
					var y = -this.m_normals[j4 - 1].y;
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					this.m_normals[j4] = new h2d_col_PointImpl(x,y);
					--j4;
				}
				var x1 = -n.x;
				var y1 = -n.y;
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				this.m_normals[0] = new h2d_col_PointImpl(x1,y1);
				k1 = 0;
				var j5 = len - 1;
				while(j5 > 0) {
					k1 = this.offsetPoint(j5,k1,node.jointype);
					--j5;
				}
				this.m_destPolys.push(this.m_destPoly);
			} else {
				var k2 = 0;
				var _g10 = 1;
				var _g11 = len - 1;
				while(_g10 < _g11) {
					var j6 = _g10++;
					k2 = this.offsetPoint(j6,k2,node.jointype);
				}
				var pt1;
				if(node.endtype == hxd_clipper_EndType.OpenButt) {
					var j7 = len - 1;
					pt1 = new h2d_col_IPoint(Math.round(this.m_srcPoly[j7].x + this.m_normals[j7].x * delta),Math.round(this.m_srcPoly[j7].y + this.m_normals[j7].y * delta));
					this.m_destPoly.push(pt1);
					pt1 = new h2d_col_IPoint(Math.round(this.m_srcPoly[j7].x - this.m_normals[j7].x * delta),Math.round(this.m_srcPoly[j7].y - this.m_normals[j7].y * delta));
					this.m_destPoly.push(pt1);
				} else {
					var j8 = len - 1;
					k2 = len - 2;
					this.m_sinA = 0;
					var x2 = -this.m_normals[j8].x;
					var y2 = -this.m_normals[j8].y;
					if(y2 == null) {
						y2 = 0.;
					}
					if(x2 == null) {
						x2 = 0.;
					}
					this.m_normals[j8] = new h2d_col_PointImpl(x2,y2);
					if(node.endtype == hxd_clipper_EndType.OpenSquare) {
						var dx = Math.tan(Math.atan2(this.m_sinA,this.m_normals[k2].x * this.m_normals[j8].x + this.m_normals[k2].y * this.m_normals[j8].y) * 0.25);
						this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j8].x + this.m_delta * (this.m_normals[k2].x - this.m_normals[k2].y * dx)),Math.round(this.m_srcPoly[j8].y + this.m_delta * (this.m_normals[k2].y + this.m_normals[k2].x * dx))));
						this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j8].x + this.m_delta * (this.m_normals[j8].x + this.m_normals[j8].y * dx)),Math.round(this.m_srcPoly[j8].y + this.m_delta * (this.m_normals[j8].y - this.m_normals[j8].x * dx))));
					} else {
						var a = Math.atan2(this.m_sinA,this.m_normals[k2].x * this.m_normals[j8].x + this.m_normals[k2].y * this.m_normals[j8].y);
						var a1 = Math.round(this.m_StepsPerRad * (a < 0 ? -a : a));
						var steps1 = a1 < 1 ? 1 : a1;
						var X3 = this.m_normals[k2].x;
						var Y2 = this.m_normals[k2].y;
						var X21;
						var _g12 = 0;
						var _g13 = steps1;
						while(_g12 < _g13) {
							var i = _g12++;
							this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j8].x + X3 * this.m_delta),Math.round(this.m_srcPoly[j8].y + Y2 * this.m_delta)));
							X21 = X3;
							X3 = X3 * this.m_cos - this.m_sin * Y2;
							Y2 = X21 * this.m_sin + Y2 * this.m_cos;
						}
						this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j8].x + this.m_normals[j8].x * this.m_delta),Math.round(this.m_srcPoly[j8].y + this.m_normals[j8].y * this.m_delta)));
					}
				}
				var j9 = len - 1;
				while(j9 > 0) {
					var x3 = -this.m_normals[j9 - 1].x;
					var y3 = -this.m_normals[j9 - 1].y;
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					this.m_normals[j9] = new h2d_col_PointImpl(x3,y3);
					--j9;
				}
				var x4 = -this.m_normals[1].x;
				var y4 = -this.m_normals[1].y;
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				this.m_normals[0] = new h2d_col_PointImpl(x4,y4);
				k2 = len - 1;
				var j10 = k2 - 1;
				while(j10 > 0) {
					k2 = this.offsetPoint(j10,k2,node.jointype);
					--j10;
				}
				if(node.endtype == hxd_clipper_EndType.OpenButt) {
					pt1 = new h2d_col_IPoint(Math.round(this.m_srcPoly[0].x - this.m_normals[0].x * delta),Math.round(this.m_srcPoly[0].y - this.m_normals[0].y * delta));
					this.m_destPoly.push(pt1);
					pt1 = new h2d_col_IPoint(Math.round(this.m_srcPoly[0].x + this.m_normals[0].x * delta),Math.round(this.m_srcPoly[0].y + this.m_normals[0].y * delta));
					this.m_destPoly.push(pt1);
				} else {
					k2 = 1;
					this.m_sinA = 0;
					if(node.endtype == hxd_clipper_EndType.OpenSquare) {
						var dx1 = Math.tan(Math.atan2(this.m_sinA,this.m_normals[1].x * this.m_normals[0].x + this.m_normals[1].y * this.m_normals[0].y) * 0.25);
						this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[0].x + this.m_delta * (this.m_normals[1].x - this.m_normals[1].y * dx1)),Math.round(this.m_srcPoly[0].y + this.m_delta * (this.m_normals[1].y + this.m_normals[1].x * dx1))));
						this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[0].x + this.m_delta * (this.m_normals[0].x + this.m_normals[0].y * dx1)),Math.round(this.m_srcPoly[0].y + this.m_delta * (this.m_normals[0].y - this.m_normals[0].x * dx1))));
					} else {
						var a2 = Math.atan2(this.m_sinA,this.m_normals[1].x * this.m_normals[0].x + this.m_normals[1].y * this.m_normals[0].y);
						var a3 = Math.round(this.m_StepsPerRad * (a2 < 0 ? -a2 : a2));
						var steps2 = a3 < 1 ? 1 : a3;
						var X4 = this.m_normals[1].x;
						var Y3 = this.m_normals[1].y;
						var X22;
						var _g14 = 0;
						var _g15 = steps2;
						while(_g14 < _g15) {
							var i1 = _g14++;
							this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[0].x + X4 * this.m_delta),Math.round(this.m_srcPoly[0].y + Y3 * this.m_delta)));
							X22 = X4;
							X4 = X4 * this.m_cos - this.m_sin * Y3;
							Y3 = X22 * this.m_sin + Y3 * this.m_cos;
						}
						this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[0].x + this.m_normals[0].x * this.m_delta),Math.round(this.m_srcPoly[0].y + this.m_normals[0].y * this.m_delta)));
					}
				}
				this.m_destPolys.push(this.m_destPoly);
			}
		}
	}
	,execute: function(delta) {
		this.fixOrientations();
		this.doOffset(delta);
		var clpr = new hxd_clipper_Clipper();
		clpr.resultKind = this.resultKind;
		clpr.addPolygons(this.m_destPolys,hxd_clipper_PolyType.Subject);
		if(delta > 0) {
			return clpr.execute(hxd_clipper_ClipType.Union,hxd_clipper_PolyFillType.Positive,hxd_clipper_PolyFillType.Positive);
		} else {
			var r = hxd_clipper__$Clipper_ClipperBase.getBounds(this.m_destPolys);
			var points = null;
			var outer = points == null ? [] : points;
			outer.push(new h2d_col_IPoint(r.left - 10,r.bottom + 10));
			outer.push(new h2d_col_IPoint(r.right + 10,r.bottom + 10));
			outer.push(new h2d_col_IPoint(r.right + 10,r.top - 10));
			outer.push(new h2d_col_IPoint(r.left - 10,r.top - 10));
			clpr.addPolygon(outer,hxd_clipper_PolyType.Subject);
			clpr.reverseSolution = true;
			var out = clpr.execute(hxd_clipper_ClipType.Union,hxd_clipper_PolyFillType.Negative,hxd_clipper_PolyFillType.Negative);
			if(out.length > 0) {
				out.shift();
			}
			return out;
		}
	}
	,offsetPoint: function(j,k,jointype) {
		this.m_sinA = this.m_normals[k].x * this.m_normals[j].y - this.m_normals[j].x * this.m_normals[k].y;
		var f = this.m_sinA * this.m_delta;
		if((f < 0 ? -f : f) < 1.0) {
			var cosA = this.m_normals[k].x * this.m_normals[j].x + this.m_normals[j].y * this.m_normals[k].y;
			if(cosA > 0) {
				this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[k].x * this.m_delta),Math.round(this.m_srcPoly[j].y + this.m_normals[k].y * this.m_delta)));
				return k;
			}
		} else if(this.m_sinA > 1.0) {
			this.m_sinA = 1.0;
		} else if(this.m_sinA < -1.0) {
			this.m_sinA = -1.0;
		}
		if(this.m_sinA * this.m_delta < 0) {
			var p1 = new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[k].x * this.m_delta),Math.round(this.m_srcPoly[j].y + this.m_normals[k].y * this.m_delta));
			var p2 = new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[j].x * this.m_delta),Math.round(this.m_srcPoly[j].y + this.m_normals[j].y * this.m_delta));
			this.m_destPoly.push(p1);
			var dx = p1.x - p2.x;
			var dy = p1.y - p2.y;
			if(dx * dx + dy * dy > 1) {
				this.m_destPoly.push(this.m_srcPoly[j]);
				this.m_destPoly.push(p2);
			}
		} else {
			switch(jointype._hx_index) {
			case 0:
				var dx = Math.tan(Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y) * 0.25);
				this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[k].x - this.m_normals[k].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[k].y + this.m_normals[k].x * dx))));
				this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[j].x + this.m_normals[j].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[j].y - this.m_normals[j].x * dx))));
				break;
			case 1:
				var a = Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y);
				var a1 = Math.round(this.m_StepsPerRad * (a < 0 ? -a : a));
				var steps = a1 < 1 ? 1 : a1;
				var X = this.m_normals[k].x;
				var Y = this.m_normals[k].y;
				var X2;
				var _g = 0;
				var _g1 = steps;
				while(_g < _g1) {
					var i = _g++;
					this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + X * this.m_delta),Math.round(this.m_srcPoly[j].y + Y * this.m_delta)));
					X2 = X;
					X = X * this.m_cos - this.m_sin * Y;
					Y = X2 * this.m_sin + Y * this.m_cos;
				}
				this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[j].x * this.m_delta),Math.round(this.m_srcPoly[j].y + this.m_normals[j].y * this.m_delta)));
				break;
			case 2:
				var r = 1 + (this.m_normals[j].x * this.m_normals[k].x + this.m_normals[j].y * this.m_normals[k].y);
				if(r >= this.m_miterLim) {
					var q = this.m_delta / r;
					this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + (this.m_normals[k].x + this.m_normals[j].x) * q),Math.round(this.m_srcPoly[j].y + (this.m_normals[k].y + this.m_normals[j].y) * q)));
				} else {
					var dx = Math.tan(Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y) * 0.25);
					this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[k].x - this.m_normals[k].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[k].y + this.m_normals[k].x * dx))));
					this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[j].x + this.m_normals[j].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[j].y - this.m_normals[j].x * dx))));
				}
				break;
			}
		}
		return j;
	}
	,doSquare: function(j,k) {
		var dx = Math.tan(Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y) * 0.25);
		this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[k].x - this.m_normals[k].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[k].y + this.m_normals[k].x * dx))));
		this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + this.m_delta * (this.m_normals[j].x + this.m_normals[j].y * dx)),Math.round(this.m_srcPoly[j].y + this.m_delta * (this.m_normals[j].y - this.m_normals[j].x * dx))));
	}
	,doMiter: function(j,k,r) {
		var q = this.m_delta / r;
		this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + (this.m_normals[k].x + this.m_normals[j].x) * q),Math.round(this.m_srcPoly[j].y + (this.m_normals[k].y + this.m_normals[j].y) * q)));
	}
	,doRound: function(j,k) {
		var a = Math.atan2(this.m_sinA,this.m_normals[k].x * this.m_normals[j].x + this.m_normals[k].y * this.m_normals[j].y);
		var a1 = Math.round(this.m_StepsPerRad * (a < 0 ? -a : a));
		var steps = a1 < 1 ? 1 : a1;
		var X = this.m_normals[k].x;
		var Y = this.m_normals[k].y;
		var X2;
		var _g = 0;
		var _g1 = steps;
		while(_g < _g1) {
			var i = _g++;
			this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + X * this.m_delta),Math.round(this.m_srcPoly[j].y + Y * this.m_delta)));
			X2 = X;
			X = X * this.m_cos - this.m_sin * Y;
			Y = X2 * this.m_sin + Y * this.m_cos;
		}
		this.m_destPoly.push(new h2d_col_IPoint(Math.round(this.m_srcPoly[j].x + this.m_normals[j].x * this.m_delta),Math.round(this.m_srcPoly[j].y + this.m_normals[j].y * this.m_delta)));
	}
	,__class__: hxd_clipper_ClipperOffset
};
var hxd_clipper_EndType = $hxEnums["hxd.clipper.EndType"] = { __ename__:"hxd.clipper.EndType",__constructs__:null
	,ClosedPol: {_hx_name:"ClosedPol",_hx_index:0,__enum__:"hxd.clipper.EndType",toString:$estr}
	,ClosedLine: {_hx_name:"ClosedLine",_hx_index:1,__enum__:"hxd.clipper.EndType",toString:$estr}
	,OpenButt: {_hx_name:"OpenButt",_hx_index:2,__enum__:"hxd.clipper.EndType",toString:$estr}
	,OpenSquare: {_hx_name:"OpenSquare",_hx_index:3,__enum__:"hxd.clipper.EndType",toString:$estr}
	,OpenRound: {_hx_name:"OpenRound",_hx_index:4,__enum__:"hxd.clipper.EndType",toString:$estr}
};
hxd_clipper_EndType.__constructs__ = [hxd_clipper_EndType.ClosedPol,hxd_clipper_EndType.ClosedLine,hxd_clipper_EndType.OpenButt,hxd_clipper_EndType.OpenSquare,hxd_clipper_EndType.OpenRound];
hxd_clipper_EndType.__empty_constructs__ = [hxd_clipper_EndType.ClosedPol,hxd_clipper_EndType.ClosedLine,hxd_clipper_EndType.OpenButt,hxd_clipper_EndType.OpenSquare,hxd_clipper_EndType.OpenRound];
var hxd_clipper_JoinType = $hxEnums["hxd.clipper.JoinType"] = { __ename__:"hxd.clipper.JoinType",__constructs__:null
	,Square: {_hx_name:"Square",_hx_index:0,__enum__:"hxd.clipper.JoinType",toString:$estr}
	,Round: {_hx_name:"Round",_hx_index:1,__enum__:"hxd.clipper.JoinType",toString:$estr}
	,Miter: {_hx_name:"Miter",_hx_index:2,__enum__:"hxd.clipper.JoinType",toString:$estr}
};
hxd_clipper_JoinType.__constructs__ = [hxd_clipper_JoinType.Square,hxd_clipper_JoinType.Round,hxd_clipper_JoinType.Miter];
hxd_clipper_JoinType.__empty_constructs__ = [hxd_clipper_JoinType.Square,hxd_clipper_JoinType.Round,hxd_clipper_JoinType.Miter];
var hxd_clipper_PolyFillType = $hxEnums["hxd.clipper.PolyFillType"] = { __ename__:"hxd.clipper.PolyFillType",__constructs__:null
	,EvenOdd: {_hx_name:"EvenOdd",_hx_index:0,__enum__:"hxd.clipper.PolyFillType",toString:$estr}
	,NonZero: {_hx_name:"NonZero",_hx_index:1,__enum__:"hxd.clipper.PolyFillType",toString:$estr}
	,Positive: {_hx_name:"Positive",_hx_index:2,__enum__:"hxd.clipper.PolyFillType",toString:$estr}
	,Negative: {_hx_name:"Negative",_hx_index:3,__enum__:"hxd.clipper.PolyFillType",toString:$estr}
};
hxd_clipper_PolyFillType.__constructs__ = [hxd_clipper_PolyFillType.EvenOdd,hxd_clipper_PolyFillType.NonZero,hxd_clipper_PolyFillType.Positive,hxd_clipper_PolyFillType.Negative];
hxd_clipper_PolyFillType.__empty_constructs__ = [hxd_clipper_PolyFillType.EvenOdd,hxd_clipper_PolyFillType.NonZero,hxd_clipper_PolyFillType.Positive,hxd_clipper_PolyFillType.Negative];
var hxd_clipper_PolyType = $hxEnums["hxd.clipper.PolyType"] = { __ename__:"hxd.clipper.PolyType",__constructs__:null
	,Subject: {_hx_name:"Subject",_hx_index:0,__enum__:"hxd.clipper.PolyType",toString:$estr}
	,Clip: {_hx_name:"Clip",_hx_index:1,__enum__:"hxd.clipper.PolyType",toString:$estr}
};
hxd_clipper_PolyType.__constructs__ = [hxd_clipper_PolyType.Subject,hxd_clipper_PolyType.Clip];
hxd_clipper_PolyType.__empty_constructs__ = [hxd_clipper_PolyType.Subject,hxd_clipper_PolyType.Clip];
var hxd_clipper_Rect = function(l,t,r,b) {
	if(b == null) {
		b = 0;
	}
	if(r == null) {
		r = 0;
	}
	if(t == null) {
		t = 0;
	}
	if(l == null) {
		l = 0;
	}
	this.left = l;
	this.top = t;
	this.right = r;
	this.bottom = b;
};
$hxClasses["hxd.clipper.Rect"] = hxd_clipper_Rect;
hxd_clipper_Rect.__name__ = "hxd.clipper.Rect";
hxd_clipper_Rect.prototype = {
	__class__: hxd_clipper_Rect
};
var hxd_earcut_EarNode = function() {
};
$hxClasses["hxd.earcut.EarNode"] = hxd_earcut_EarNode;
hxd_earcut_EarNode.__name__ = "hxd.earcut.EarNode";
hxd_earcut_EarNode.prototype = {
	__class__: hxd_earcut_EarNode
};
var hxd_earcut_Earcut = function() {
};
$hxClasses["hxd.earcut.Earcut"] = hxd_earcut_Earcut;
hxd_earcut_Earcut.__name__ = "hxd.earcut.Earcut";
hxd_earcut_Earcut.prototype = {
	triangulate_anon_y_Float_x_Float: function(points,holes) {
		var hasHoles = holes != null && holes.length > 0;
		var outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		var root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	,triangulate_h2d_GPoint: function(points,holes) {
		var hasHoles = holes != null && holes.length > 0;
		var outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		var root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	,eliminateHoles_triangulate_T: function(points,holes,root) {
		var queue = [];
		var _g = 0;
		var _g1 = holes.length;
		while(_g < _g1) {
			var i = _g++;
			var s = holes[i];
			var e = i == holes.length - 1 ? points.length : holes[i + 1];
			var node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		var _g = 0;
		while(_g < queue.length) {
			var q = queue[_g];
			++_g;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	,setLinkedList_eliminateHoles_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var i = _g++;
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			var i = end - 1;
			while(i >= start) {
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,setLinkedList_triangulate_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var i = _g++;
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			var i = end - 1;
			while(i >= start) {
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,triangulateNode: function(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			var maxX = root.x;
			this.minX = maxX;
			var maxY = root.y;
			this.minY = maxY;
			var p = root.next;
			while(p != root) {
				var x = p.x;
				var y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			var a = maxX - this.minX;
			var b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		var result = this.triangles;
		this.triangles = null;
		var n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	,eliminateHole: function(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			var b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	,findHoleBridge: function(hole,root) {
		var p = root;
		var hx = hole.x;
		var hy = hole.y;
		var qx = -Infinity;
		var m = null;
		do {
			if(hy <= p.y && hy >= p.next.y) {
				var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
		} while(p != root);
		if(m == null) {
			return null;
		}
		var stop = m;
		var tanMin = Infinity;
		var tan;
		p = m.next;
		while(p != stop) {
			var tmp;
			if(hx >= p.x && p.x >= m.x) {
				var ax = hy < m.y ? hx : qx;
				var bx = m.x;
				var by = m.y;
				var cx = hy < m.y ? qx : hx;
				var px = p.x;
				var py = p.y;
				tmp = (cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0 && (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				var tmp1;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					var p1 = p.prev;
					var r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						var r1 = p.next;
						if((hole.y - p.y) * (r1.x - hole.x) - (hole.x - p.x) * (r1.y - hole.y) >= 0) {
							var q = p.prev;
							tmp1 = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp1 = false;
						}
					} else {
						var r2 = p.prev;
						if(!((hole.y - p.y) * (r2.x - hole.x) - (hole.x - p.x) * (r2.y - hole.y) < 0)) {
							var q1 = p.next;
							tmp1 = (q1.y - p.y) * (hole.x - q1.x) - (q1.x - p.x) * (hole.y - q1.y) < 0;
						} else {
							tmp1 = true;
						}
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	,getLeftmost: function(node) {
		var p = node;
		var leftmost = node;
		do {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
		} while(p != node);
		return leftmost;
	}
	,compareX: function(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	,equals: function(p1,p2) {
		if(p1.x == p2.x) {
			return p1.y == p2.y;
		} else {
			return false;
		}
	}
	,area: function(p,q,r) {
		return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
	}
	,intersects: function(p1,q1,p2,q2) {
		if((q1.y - p1.y) * (p2.x - q1.x) - (q1.x - p1.x) * (p2.y - q1.y) > 0 != (q1.y - p1.y) * (q2.x - q1.x) - (q1.x - p1.x) * (q2.y - q1.y) > 0) {
			return (q2.y - p2.y) * (p1.x - q2.x) - (q2.x - p2.x) * (p1.y - q2.y) > 0 != (q2.y - p2.y) * (q1.x - q2.x) - (q2.x - p2.x) * (q1.y - q2.y) > 0;
		} else {
			return false;
		}
	}
	,locallyInside: function(a,b) {
		var p = a.prev;
		var r = a.next;
		if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
			var r = a.next;
			if((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) >= 0) {
				var q = a.prev;
				return (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
			} else {
				return false;
			}
		} else {
			var r = a.prev;
			if(!((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) < 0)) {
				var q = a.next;
				return (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) < 0;
			} else {
				return true;
			}
		}
	}
	,filterPoints: function(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		var p = start;
		var again;
		do {
			again = false;
			var tmp;
			if(!p.steiner) {
				var p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					var p1 = p.prev;
					var r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
		} while(again || p != end);
		return end;
	}
	,removeNode: function(p) {
		p.next.prev = p.prev;
		p.prev.next = p.next;
		if(p.prevZ != null) {
			p.prevZ.nextZ = p.nextZ;
		}
		if(p.nextZ != null) {
			p.nextZ.prevZ = p.prevZ;
		}
	}
	,allocNode: function(i,x,y,last) {
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		return n;
	}
	,earcutLinked: function(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		var stop = ear;
		var prev;
		var next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(ear == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(ear),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(ear);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(ear);
					break;
				}
				break;
			}
		}
	}
	,isEar: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var p = ear.next.next;
		while(p != ear.prev) {
			var tmp;
			var ax = a.x;
			var ay = a.y;
			var bx = b.x;
			var by = b.y;
			var cx = c.x;
			var cy = c.y;
			var px = p.x;
			var py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	,isEarHashed: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
		var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
		var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
		var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
		var x = 32767 * (minTX - this.minX) / this.size | 0;
		var y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var minZ = x | y << 1;
		var x = 32767 * (maxTX - this.minX) / this.size | 0;
		var y = 32767 * (maxTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var maxZ = x | y << 1;
		var p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	,cureLocalIntersections: function(start) {
		var p = start;
		do {
			var a = p.prev;
			var b = p.next.next;
			var tmp;
			var tmp1;
			var p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				var p1 = a.prev;
				var r = a.next;
				if((a.y - p1.y) * (r.x - a.x) - (a.x - p1.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p3 = b.prev;
				var r3 = b.next;
				if((b.y - p3.y) * (r3.x - b.x) - (b.x - p3.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				var p4 = p.next;
				p4.next.prev = p4.prev;
				p4.prev.next = p4.next;
				if(p4.prevZ != null) {
					p4.prevZ.nextZ = p4.nextZ;
				}
				if(p4.nextZ != null) {
					p4.nextZ.prevZ = p4.prevZ;
				}
				start = b;
				p = start;
			}
			p = p.next;
		} while(p != start);
		return p;
	}
	,splitEarcut: function(start) {
		var a = start;
		do {
			var b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					var c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
		} while(a != start);
	}
	,splitPolygon: function(a,b) {
		var i = a.i;
		var x = a.x;
		var y = a.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var a2 = n;
		var i = b.i;
		var x = b.x;
		var y = b.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var b2 = n;
		var an = a.next;
		var bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	,pointInTriangle: function(ax,ay,bx,by,cx,cy,px,py) {
		if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0) {
			return (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
		} else {
			return false;
		}
	}
	,isValidDiagonal: function(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			var tmp;
			var tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				var p = a.prev;
				var r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					var r = a.next;
					if((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r = a.prev;
					if(!((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) < 0)) {
						var q = a.next;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p = b.prev;
				var r = b.next;
				if((b.y - p.y) * (r.x - b.x) - (b.x - p.x) * (r.y - b.y) < 0) {
					var r = b.next;
					if((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) >= 0) {
						var q = b.prev;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r = b.prev;
					if(!((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) < 0)) {
						var q = b.next;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,middleInside: function(a,b) {
		var p = a;
		var inside = false;
		var px = (a.x + b.x) / 2;
		var py = (a.y + b.y) / 2;
		do {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
		} while(p != a);
		return inside;
	}
	,intersectsPolygon: function(a,b) {
		var p = a;
		do {
			var tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				var q1 = p.next;
				tmp = (q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0 && (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
		} while(p != a);
		return false;
	}
	,zOrder: function(px,py) {
		var x = 32767 * (px - this.minX) / this.size | 0;
		var y = 32767 * (py - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		return x | y << 1;
	}
	,indexCurve: function(start) {
		var p = start;
		do {
			if(p.z < 0) {
				var x = 32767 * (p.x - this.minX) / this.size | 0;
				var y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
		} while(p != start);
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	,sortLinked: function(list) {
		var p;
		var q;
		var e;
		var tail;
		var numMerges;
		var pSize;
		var qSize;
		var inSize = 1;
		do {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				var _g = 0;
				var _g1 = inSize;
				while(_g < _g1) {
					var i = _g++;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
		} while(numMerges > 1);
		return list;
	}
	,__class__: hxd_earcut_Earcut
};
var hxd_fmt_bfnt_FontParser = function() { };
$hxClasses["hxd.fmt.bfnt.FontParser"] = hxd_fmt_bfnt_FontParser;
hxd_fmt_bfnt_FontParser.__name__ = "hxd.fmt.bfnt.FontParser";
hxd_fmt_bfnt_FontParser.parse = function(bytes,path,resolveTile) {
	var tile = null;
	var font = new h2d_Font(null,0);
	var glyphs = font.glyphs;
	font.baseLine = 0;
	var _g = bytes.getInt32(0);
	switch(_g) {
	case 54938946:
		var bytes1 = new haxe_io_BytesInput(bytes);
		bytes1.set_position(bytes1.pos + 4);
		var pageCount = 0;
		while(bytes1.pos < bytes1.totlen) {
			var id = bytes1.readByte();
			var length = bytes1.readInt32();
			var pos = bytes1.pos;
			switch(id) {
			case 1:
				font.size = font.initSize = bytes1.readInt16();
				bytes1.set_position(bytes1.pos + 12);
				font.name = bytes1.readUntil(0);
				break;
			case 2:
				font.lineHeight = bytes1.readUInt16();
				font.baseLine = bytes1.readUInt16();
				bytes1.set_position(bytes1.pos + 4);
				pageCount = bytes1.readUInt16();
				if(pageCount != 1) {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 220, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
				break;
			case 3:
				var name = bytes1.readUntil(0);
				try {
					font.tilePath = name;
					tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),name]));
				} catch( _g1 ) {
					haxe_Log.trace("Warning: Could not find referenced font texture at \"" + name + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					font.tilePath = new haxe_io_Path(path).file + ".png";
					tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
				}
				break;
			case 4:
				var count = length / 20 | 0;
				while(count > 0) {
					var cid = bytes1.readInt32();
					var t = tile.sub(bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readInt16(),bytes1.readInt16());
					var fc = new h2d_FontChar(t,bytes1.readInt16());
					glyphs.h[cid] = fc;
					bytes1.set_position(bytes1.pos + 2);
					--count;
				}
				break;
			case 5:
				var count1 = length / 10 | 0;
				while(count1 > 0) {
					var first = bytes1.readInt32();
					var key = bytes1.readInt32();
					var fc1 = glyphs.h[key];
					if(fc1 != null) {
						fc1.addKerning(first,bytes1.readInt16());
					} else {
						bytes1.set_position(bytes1.pos + 2);
					}
					--count1;
				}
				break;
			}
			bytes1.set_position(pos + length);
		}
		break;
	case 1414415938:
		return new hxd_fmt_bfnt_Reader(new haxe_io_BytesInput(bytes)).read(function(tp) {
			try {
				font.tilePath = tp;
				tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tp]));
			} catch( _g ) {
				haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tp + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				font.tilePath = new haxe_io_Path(path).file + ".png";
				tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
			}
			return tile;
		});
	case 1836597052:case 1852794428:
		var xml = Xml.parse(bytes.toString());
		var x = xml.firstElement();
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var xml = x;
		if(haxe_xml__$Access_HasNodeAccess.resolve(xml,"info")) {
			var tmp = haxe_xml__$Access_NodeAccess.resolve(xml,"info");
			font.name = haxe_xml__$Access_AttribAccess.resolve(tmp,"face");
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"info"),"size");
			font.size = font.initSize = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"lineHeight");
			font.lineHeight = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"base");
			font.baseLine = Std.parseInt(tmp);
			var p = haxe_xml__$Access_NodeAccess.resolve(xml,"pages").elements();
			while(p.hasNext()) {
				var p1 = p.next();
				if(haxe_xml__$Access_AttribAccess.resolve(p1,"id") == "0") {
					var tilePath = haxe_xml__$Access_AttribAccess.resolve(p1,"file");
					try {
						font.tilePath = tilePath;
						tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]));
					} catch( _g1 ) {
						haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						font.tilePath = new haxe_io_Path(path).file + ".png";
						tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
					}
				} else {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 62, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
			}
			var chars = haxe_xml__$Access_NodeAccess.resolve(xml,"chars").elements();
			var c = chars;
			while(c.hasNext()) {
				var c1 = c.next();
				var t = tile.sub(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"y")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"width")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"height")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"xoffset")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"yoffset")));
				var fc = new h2d_FontChar(t,Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"xadvance")));
				var kerns = haxe_xml__$Access_NodeAccess.resolve(xml,"kernings").elements();
				var k = kerns;
				while(k.hasNext()) {
					var k1 = k.next();
					if(haxe_xml__$Access_AttribAccess.resolve(k1,"second") == haxe_xml__$Access_AttribAccess.resolve(c1,"id")) {
						fc.addKerning(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"first")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"amount")));
					}
				}
				var key = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"id"));
				glyphs.h[key] = fc;
			}
		} else {
			font.tilePath = new haxe_io_Path(path).file + ".png";
			tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
			font.name = haxe_xml__$Access_AttribAccess.resolve(xml,"family");
			var tmp = haxe_xml__$Access_AttribAccess.resolve(xml,"size");
			font.size = font.initSize = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(xml,"height");
			font.lineHeight = Std.parseInt(tmp);
			var kernings = [];
			var c = xml.elements();
			while(c.hasNext()) {
				var c1 = c.next();
				var r = haxe_xml__$Access_AttribAccess.resolve(c1,"rect").split(" ");
				var o = haxe_xml__$Access_AttribAccess.resolve(c1,"offset").split(" ");
				var t = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
				var fc = new h2d_FontChar(t,Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"width")));
				var code = haxe_xml__$Access_AttribAccess.resolve(c1,"code");
				var code1 = StringTools.startsWith(code,"&#") ? Std.parseInt(HxOverrides.substr(code,2,code.length - 3)) : HxOverrides.cca(code,0);
				var k = c1.elements();
				while(k.hasNext()) {
					var k1 = k.next();
					var code2 = haxe_xml__$Access_AttribAccess.resolve(k1,"id");
					var next = StringTools.startsWith(code2,"&#") ? Std.parseInt(HxOverrides.substr(code2,2,code2.length - 3)) : HxOverrides.cca(code2,0);
					var adv = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"advance"));
					if(glyphs.h.hasOwnProperty(next)) {
						glyphs.h[next].addKerning(code1,adv);
					} else {
						kernings.push({ prev : code1, next : next, adv : adv});
					}
				}
				glyphs.h[code1] = fc;
			}
			var _g1 = 0;
			while(_g1 < kernings.length) {
				var k = kernings[_g1];
				++_g1;
				var g = glyphs.h[k.next];
				if(g == null) {
					continue;
				}
				g.addKerning(k.prev,k.adv);
			}
		}
		break;
	case 1868983913:
		var lines = bytes.toString().split("\n");
		var reg = new EReg(" *?([0-9a-zA-Z]+)=(\"[^\"]+\"|.+?)(?:[ \r]|$)","");
		var idx;
		var pageCount = 0;
		var _g1 = 0;
		while(_g1 < lines.length) {
			var line = lines[_g1];
			++_g1;
			idx = line.indexOf(" ");
			switch(HxOverrides.substr(line,0,idx)) {
			case "char":
				var id = 0;
				var x = 0;
				var y = 0;
				var width = 0;
				var height = 0;
				var xoffset = 0;
				var yoffset = 0;
				var xadvance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "height":
						var v = reg.matched(2);
						height = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
						break;
					case "id":
						var v1 = reg.matched(2);
						id = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
						break;
					case "width":
						var v2 = reg.matched(2);
						width = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
						break;
					case "x":
						var v3 = reg.matched(2);
						x = Std.parseInt(HxOverrides.cca(v3,0) == 34 ? v3.substring(1,v3.length - 1) : v3);
						break;
					case "xadvance":
						var v4 = reg.matched(2);
						xadvance = Std.parseInt(HxOverrides.cca(v4,0) == 34 ? v4.substring(1,v4.length - 1) : v4);
						break;
					case "xoffset":
						var v5 = reg.matched(2);
						xoffset = Std.parseInt(HxOverrides.cca(v5,0) == 34 ? v5.substring(1,v5.length - 1) : v5);
						break;
					case "y":
						var v6 = reg.matched(2);
						y = Std.parseInt(HxOverrides.cca(v6,0) == 34 ? v6.substring(1,v6.length - 1) : v6);
						break;
					case "yoffset":
						var v7 = reg.matched(2);
						yoffset = Std.parseInt(HxOverrides.cca(v7,0) == 34 ? v7.substring(1,v7.length - 1) : v7);
						break;
					}
					var pos = reg.matchedPos();
					idx = pos.pos + pos.len;
				}
				var t = tile.sub(x,y,width,height,xoffset,yoffset);
				var fc = new h2d_FontChar(t,xadvance);
				glyphs.h[id] = fc;
				break;
			case "common":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "base":
						var v8 = reg.matched(2);
						font.baseLine = Std.parseInt(HxOverrides.cca(v8,0) == 34 ? v8.substring(1,v8.length - 1) : v8);
						break;
					case "lineHeight":
						var v9 = reg.matched(2);
						font.lineHeight = Std.parseInt(HxOverrides.cca(v9,0) == 34 ? v9.substring(1,v9.length - 1) : v9);
						break;
					case "pages":
						var v10 = reg.matched(2);
						pageCount = Std.parseInt(HxOverrides.cca(v10,0) == 34 ? v10.substring(1,v10.length - 1) : v10);
						if(pageCount != 1) {
							haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 153, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						}
						break;
					}
					var pos1 = reg.matchedPos();
					idx = pos1.pos + pos1.len;
				}
				break;
			case "info":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "face":
						var v11 = reg.matched(2);
						font.name = HxOverrides.cca(v11,0) == 34 ? v11.substring(1,v11.length - 1) : v11;
						break;
					case "size":
						var v12 = reg.matched(2);
						font.size = font.initSize = Std.parseInt(HxOverrides.cca(v12,0) == 34 ? v12.substring(1,v12.length - 1) : v12);
						break;
					}
					var pos2 = reg.matchedPos();
					idx = pos2.pos + pos2.len;
				}
				break;
			case "kerning":
				var first = 0;
				var second = 0;
				var advance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "amount":
						var v13 = reg.matched(2);
						advance = Std.parseInt(HxOverrides.cca(v13,0) == 34 ? v13.substring(1,v13.length - 1) : v13);
						break;
					case "first":
						var v14 = reg.matched(2);
						first = Std.parseInt(HxOverrides.cca(v14,0) == 34 ? v14.substring(1,v14.length - 1) : v14);
						break;
					case "second":
						var v15 = reg.matched(2);
						second = Std.parseInt(HxOverrides.cca(v15,0) == 34 ? v15.substring(1,v15.length - 1) : v15);
						break;
					}
					var pos3 = reg.matchedPos();
					idx = pos3.pos + pos3.len;
				}
				var fc1 = glyphs.h[second];
				if(fc1 != null) {
					fc1.addKerning(first,advance);
				}
				break;
			case "page":
				while(idx < line.length && reg.matchSub(line,idx)) {
					if(reg.matched(1) == "file") {
						var v16 = reg.matched(2);
						var tilePath = HxOverrides.cca(v16,0) == 34 ? v16.substring(1,v16.length - 1) : v16;
						try {
							font.tilePath = tilePath;
							tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]));
						} catch( _g2 ) {
							haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
							font.tilePath = new haxe_io_Path(path).file + ".png";
							tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
						}
					}
					var pos4 = reg.matchedPos();
					idx = pos4.pos + pos4.len;
				}
				break;
			}
		}
		break;
	default:
		var sign = _g;
		throw haxe_Exception.thrown("Unknown font signature " + StringTools.hex(sign,8));
	}
	if(glyphs.h[32] == null) {
		var value = new h2d_FontChar(tile.sub(0,0,0,0),font.size >> 1);
		glyphs.h[32] = value;
	}
	font.tile = tile;
	if(font.baseLine == 0) {
		font.baseLine = font.calcBaseLine();
	}
	var fallback = glyphs.h[65533];
	if(fallback == null) {
		fallback = glyphs.h[9633];
	}
	if(fallback == null) {
		fallback = glyphs.h[63];
	}
	if(fallback != null) {
		font.defaultChar = fallback;
	}
	return font;
};
var hxd_fmt_bfnt_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.bfnt.Reader"] = hxd_fmt_bfnt_Reader;
hxd_fmt_bfnt_Reader.__name__ = "hxd.fmt.bfnt.Reader";
hxd_fmt_bfnt_Reader.parse = function(bytes,resolveTile) {
	return new hxd_fmt_bfnt_Reader(new haxe_io_BytesInput(bytes)).read(resolveTile);
};
hxd_fmt_bfnt_Reader.prototype = {
	read: function(resolveTile) {
		if(this.i.readString(4) != "BFNT" || this.i.readByte() != 0) {
			throw haxe_Exception.thrown("Not a BFNT file!");
		}
		var font = null;
		var _g = this.i.readByte();
		if(_g == 1) {
			font = new h2d_Font(this.i.readString(this.i.readUInt16()),this.i.readInt16());
			font.tilePath = this.i.readString(this.i.readUInt16());
			var tile = font.tile = resolveTile(font.tilePath);
			font.lineHeight = this.i.readInt16();
			font.baseLine = this.i.readInt16();
			var defaultChar = this.i.readInt32();
			var id;
			while(true) {
				id = this.i.readInt32();
				if(!(id != 0)) {
					break;
				}
				var t = tile.sub(this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readInt16(),this.i.readInt16());
				var glyph = new h2d_FontChar(t,this.i.readInt16());
				font.glyphs.h[id] = glyph;
				if(id == defaultChar) {
					font.defaultChar = glyph;
				}
				var prevChar;
				while(true) {
					prevChar = this.i.readInt32();
					if(!(prevChar != 0)) {
						break;
					}
					glyph.addKerning(prevChar,this.i.readInt16());
				}
			}
		} else {
			var ver = _g;
			throw haxe_Exception.thrown("Unknown BFNT version: " + ver);
		}
		return font;
	}
	,__class__: hxd_fmt_bfnt_Reader
};
var hxd_fmt_hdr_Reader = function() { };
$hxClasses["hxd.fmt.hdr.Reader"] = hxd_fmt_hdr_Reader;
hxd_fmt_hdr_Reader.__name__ = "hxd.fmt.hdr.Reader";
hxd_fmt_hdr_Reader.decode = function(bytes,sRGB) {
	var f = new haxe_io_BytesInput(bytes);
	var width = 0;
	var height = 0;
	var keys_h = Object.create(null);
	while(true) {
		var line = f.readLine();
		if(line == "") {
			break;
		}
		if(HxOverrides.cca(line,0) == 35) {
			continue;
		}
		var nameValue = line.split("=");
		if(nameValue.length > 1) {
			keys_h[nameValue.shift()] = nameValue.join("=");
		}
	}
	var parts = f.readLine().split(" ");
	height = Std.parseInt(parts[1]);
	width = Std.parseInt(parts[3]);
	var gamma = keys_h["GAMMA"] == "1";
	var data = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 * 4));
	var exposure = 1.0;
	var exp = keys_h["EXPOSURE"];
	if(exp != null) {
		var exp1 = parseFloat(exp);
		if(exp1 < 1e-12 || exp1 < 1e12) {
			exposure = exp1;
		}
	}
	var gammaCorrect = sRGB ? 1 : 0.45454545454545453;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var e = _g1++;
		_g.push(Math.pow(e,gammaCorrect));
	}
	var gammaVals = _g;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var e = _g1++;
		_g.push(Math.pow(Math.pow(2,e - 128) / (256 * exposure),gammaCorrect));
	}
	var exps = _g;
	var _g = keys_h["FORMAT"];
	if(_g == null) {
		var fmt = _g;
		throw haxe_Exception.thrown("Unsupported HDR format " + fmt);
	} else if(_g == "32-bit_rle_rgbe") {
		var dataPos = f.pos;
		var scanLen = width * 4;
		var scanLine = new haxe_io_Bytes(new ArrayBuffer(scanLen));
		var widthBE = width >> 8 | (width & 255) << 8;
		var _g1 = 0;
		var _g2 = height;
		while(_g1 < _g2) {
			var y = _g1++;
			var h = bytes.getInt32(dataPos);
			if((h & 65535) != 514 || h >>> 16 != widthBE) {
				scanLine.blit(0,bytes,dataPos,width * 4);
				dataPos += width * 4;
			} else {
				dataPos += 4;
				var p = 0;
				var end = width * 4;
				while(p < end) {
					var len = bytes.b[dataPos++];
					if(len > 128) {
						len -= 128;
						scanLine.fill(p,len,bytes.b[dataPos++]);
					} else {
						scanLine.blit(p,bytes,dataPos,len);
						dataPos += len;
					}
					p += len;
				}
			}
			var pos = y * width * 16;
			var _g3 = 0;
			var _g4 = width;
			while(_g3 < _g4) {
				var x = _g3++;
				var e = exps[scanLine.b[x + width * 3]];
				data.setFloat(pos,gammaVals[scanLine.b[x]] * e);
				pos += 4;
				data.setFloat(pos,gammaVals[scanLine.b[x + width]] * e);
				pos += 4;
				data.setFloat(pos,gammaVals[scanLine.b[x + (width << 1)]] * e);
				pos += 4;
				data.setFloat(pos,1.0);
				pos += 4;
			}
		}
	} else {
		var fmt = _g;
		throw haxe_Exception.thrown("Unsupported HDR format " + fmt);
	}
	return { width : width, height : height, bytes : data, gamma : gamma};
};
var hxd_fmt_hmd_Property = $hxEnums["hxd.fmt.hmd.Property"] = { __ename__:"hxd.fmt.hmd.Property",__constructs__:null
	,CameraFOVY: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxd.fmt.hmd.Property",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="CameraFOVY",$_)
	,Unused_HasMaterialFlags: {_hx_name:"Unused_HasMaterialFlags",_hx_index:1,__enum__:"hxd.fmt.hmd.Property",toString:$estr}
	,HasExtraTextures: {_hx_name:"HasExtraTextures",_hx_index:2,__enum__:"hxd.fmt.hmd.Property",toString:$estr}
	,FourBonesByVertex: {_hx_name:"FourBonesByVertex",_hx_index:3,__enum__:"hxd.fmt.hmd.Property",toString:$estr}
};
hxd_fmt_hmd_Property.__constructs__ = [hxd_fmt_hmd_Property.CameraFOVY,hxd_fmt_hmd_Property.Unused_HasMaterialFlags,hxd_fmt_hmd_Property.HasExtraTextures,hxd_fmt_hmd_Property.FourBonesByVertex];
hxd_fmt_hmd_Property.__empty_constructs__ = [hxd_fmt_hmd_Property.Unused_HasMaterialFlags,hxd_fmt_hmd_Property.HasExtraTextures,hxd_fmt_hmd_Property.FourBonesByVertex];
var hxd_fmt_hmd_Position = function() {
};
$hxClasses["hxd.fmt.hmd.Position"] = hxd_fmt_hmd_Position;
hxd_fmt_hmd_Position.__name__ = "hxd.fmt.hmd.Position";
hxd_fmt_hmd_Position.prototype = {
	loadQuaternion: function(q) {
		q.x = this.qx;
		q.y = this.qy;
		q.z = this.qz;
		q.w = this.get_qw();
	}
	,get_qw: function() {
		var qw = 1 - (this.qx * this.qx + this.qy * this.qy + this.qz * this.qz);
		if(qw < 0) {
			return -Math.sqrt(-qw);
		} else {
			return Math.sqrt(qw);
		}
	}
	,toMatrix: function(postScale) {
		if(postScale == null) {
			postScale = false;
		}
		var m = new h3d_MatrixImpl();
		var q = hxd_fmt_hmd_Position.QTMP;
		q.x = this.qx;
		q.y = this.qy;
		q.z = this.qz;
		q.w = this.get_qw();
		q.toMatrix(m);
		if(postScale) {
			m.translate(this.x,this.y,this.z);
			m.scale(this.sx,this.sy,this.sz);
		} else {
			m._11 *= this.sx;
			m._12 *= this.sx;
			m._13 *= this.sx;
			m._21 *= this.sy;
			m._22 *= this.sy;
			m._23 *= this.sy;
			m._31 *= this.sz;
			m._32 *= this.sz;
			m._33 *= this.sz;
			m.translate(this.x,this.y,this.z);
		}
		return m;
	}
	,__class__: hxd_fmt_hmd_Position
};
var hxd_fmt_hmd_Geometry = function() {
};
$hxClasses["hxd.fmt.hmd.Geometry"] = hxd_fmt_hmd_Geometry;
hxd_fmt_hmd_Geometry.__name__ = "hxd.fmt.hmd.Geometry";
hxd_fmt_hmd_Geometry.prototype = {
	get_indexCount: function() {
		var k = 0;
		var _g = 0;
		var _g1 = this.indexCounts;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			k += i;
		}
		return k;
	}
	,__class__: hxd_fmt_hmd_Geometry
};
var hxd_fmt_hmd_Material = function() {
};
$hxClasses["hxd.fmt.hmd.Material"] = hxd_fmt_hmd_Material;
hxd_fmt_hmd_Material.__name__ = "hxd.fmt.hmd.Material";
hxd_fmt_hmd_Material.prototype = {
	__class__: hxd_fmt_hmd_Material
};
var hxd_fmt_hmd_SkinJoint = function() {
};
$hxClasses["hxd.fmt.hmd.SkinJoint"] = hxd_fmt_hmd_SkinJoint;
hxd_fmt_hmd_SkinJoint.__name__ = "hxd.fmt.hmd.SkinJoint";
hxd_fmt_hmd_SkinJoint.prototype = {
	__class__: hxd_fmt_hmd_SkinJoint
};
var hxd_fmt_hmd_SkinSplit = function() {
};
$hxClasses["hxd.fmt.hmd.SkinSplit"] = hxd_fmt_hmd_SkinSplit;
hxd_fmt_hmd_SkinSplit.__name__ = "hxd.fmt.hmd.SkinSplit";
hxd_fmt_hmd_SkinSplit.prototype = {
	__class__: hxd_fmt_hmd_SkinSplit
};
var hxd_fmt_hmd_Skin = function() {
};
$hxClasses["hxd.fmt.hmd.Skin"] = hxd_fmt_hmd_Skin;
hxd_fmt_hmd_Skin.__name__ = "hxd.fmt.hmd.Skin";
hxd_fmt_hmd_Skin.prototype = {
	__class__: hxd_fmt_hmd_Skin
};
var hxd_fmt_hmd_Model = function() {
};
$hxClasses["hxd.fmt.hmd.Model"] = hxd_fmt_hmd_Model;
hxd_fmt_hmd_Model.__name__ = "hxd.fmt.hmd.Model";
hxd_fmt_hmd_Model.prototype = {
	__class__: hxd_fmt_hmd_Model
};
var hxd_fmt_hmd_AnimationFlag = $hxEnums["hxd.fmt.hmd.AnimationFlag"] = { __ename__:"hxd.fmt.hmd.AnimationFlag",__constructs__:null
	,HasPosition: {_hx_name:"HasPosition",_hx_index:0,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasRotation: {_hx_name:"HasRotation",_hx_index:1,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasScale: {_hx_name:"HasScale",_hx_index:2,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasUV: {_hx_name:"HasUV",_hx_index:3,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasAlpha: {_hx_name:"HasAlpha",_hx_index:4,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,SingleFrame: {_hx_name:"SingleFrame",_hx_index:5,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,HasProps: {_hx_name:"HasProps",_hx_index:6,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
	,Reserved: {_hx_name:"Reserved",_hx_index:7,__enum__:"hxd.fmt.hmd.AnimationFlag",toString:$estr}
};
hxd_fmt_hmd_AnimationFlag.__constructs__ = [hxd_fmt_hmd_AnimationFlag.HasPosition,hxd_fmt_hmd_AnimationFlag.HasRotation,hxd_fmt_hmd_AnimationFlag.HasScale,hxd_fmt_hmd_AnimationFlag.HasUV,hxd_fmt_hmd_AnimationFlag.HasAlpha,hxd_fmt_hmd_AnimationFlag.SingleFrame,hxd_fmt_hmd_AnimationFlag.HasProps,hxd_fmt_hmd_AnimationFlag.Reserved];
hxd_fmt_hmd_AnimationFlag.__empty_constructs__ = [hxd_fmt_hmd_AnimationFlag.HasPosition,hxd_fmt_hmd_AnimationFlag.HasRotation,hxd_fmt_hmd_AnimationFlag.HasScale,hxd_fmt_hmd_AnimationFlag.HasUV,hxd_fmt_hmd_AnimationFlag.HasAlpha,hxd_fmt_hmd_AnimationFlag.SingleFrame,hxd_fmt_hmd_AnimationFlag.HasProps,hxd_fmt_hmd_AnimationFlag.Reserved];
var hxd_fmt_hmd_AnimationObject = function() {
};
$hxClasses["hxd.fmt.hmd.AnimationObject"] = hxd_fmt_hmd_AnimationObject;
hxd_fmt_hmd_AnimationObject.__name__ = "hxd.fmt.hmd.AnimationObject";
hxd_fmt_hmd_AnimationObject.prototype = {
	getStride: function() {
		var stride = 0;
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasPosition._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasRotation._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasScale._hx_index) != 0) {
			stride += 3;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasUV._hx_index) != 0) {
			stride += 2;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasAlpha._hx_index) != 0) {
			++stride;
		}
		if((this.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
			stride += this.props.length;
		}
		return stride;
	}
	,__class__: hxd_fmt_hmd_AnimationObject
};
var hxd_fmt_hmd_AnimationEvent = function() {
};
$hxClasses["hxd.fmt.hmd.AnimationEvent"] = hxd_fmt_hmd_AnimationEvent;
hxd_fmt_hmd_AnimationEvent.__name__ = "hxd.fmt.hmd.AnimationEvent";
hxd_fmt_hmd_AnimationEvent.prototype = {
	__class__: hxd_fmt_hmd_AnimationEvent
};
var hxd_fmt_hmd_Animation = function() {
};
$hxClasses["hxd.fmt.hmd.Animation"] = hxd_fmt_hmd_Animation;
hxd_fmt_hmd_Animation.__name__ = "hxd.fmt.hmd.Animation";
hxd_fmt_hmd_Animation.prototype = {
	__class__: hxd_fmt_hmd_Animation
};
var hxd_fmt_hmd_Data = function() {
};
$hxClasses["hxd.fmt.hmd.Data"] = hxd_fmt_hmd_Data;
hxd_fmt_hmd_Data.__name__ = "hxd.fmt.hmd.Data";
hxd_fmt_hmd_Data.prototype = {
	__class__: hxd_fmt_hmd_Data
};
var hxd_fmt_hmd__$Library_FormatMap = function(size,offset,def,prec) {
	this.size = size;
	this.offset = offset;
	this.precision = prec;
	this.def = def;
};
$hxClasses["hxd.fmt.hmd._Library.FormatMap"] = hxd_fmt_hmd__$Library_FormatMap;
hxd_fmt_hmd__$Library_FormatMap.__name__ = "hxd.fmt.hmd._Library.FormatMap";
hxd_fmt_hmd__$Library_FormatMap.prototype = {
	__class__: hxd_fmt_hmd__$Library_FormatMap
};
var hxd_fmt_hmd_GeometryBuffer = function() {
};
$hxClasses["hxd.fmt.hmd.GeometryBuffer"] = hxd_fmt_hmd_GeometryBuffer;
hxd_fmt_hmd_GeometryBuffer.__name__ = "hxd.fmt.hmd.GeometryBuffer";
hxd_fmt_hmd_GeometryBuffer.prototype = {
	__class__: hxd_fmt_hmd_GeometryBuffer
};
var hxd_fmt_hmd_Library = function(res,header) {
	this.resource = res;
	this.header = header;
	this.cachedPrimitives = [];
	this.cachedAnimations = new haxe_ds_StringMap();
	this.cachedSkin = new haxe_ds_StringMap();
};
$hxClasses["hxd.fmt.hmd.Library"] = hxd_fmt_hmd_Library;
hxd_fmt_hmd_Library.__name__ = "hxd.fmt.hmd.Library";
hxd_fmt_hmd_Library.prototype = {
	getData: function() {
		var entry = this.resource.entry;
		var b = new haxe_io_Bytes(new ArrayBuffer(entry.get_size() - this.header.dataPosition));
		entry.readFull(b,this.header.dataPosition,b.length);
		return b;
	}
	,getDefaultFormat: function(stride) {
		var format = [new hxd_BufferInput("position",3)];
		var defs = [null];
		if(stride > 3) {
			format.push(new hxd_BufferInput("normal",3));
			defs.push(null);
		}
		if(stride > 6) {
			format.push(new hxd_BufferInput("uv",2));
			defs.push(null);
		}
		if(stride > 8) {
			format.push(new hxd_BufferInput("color",3));
			var x = 1;
			var y = 1;
			var z = 1;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			defs.push(new h3d_VectorImpl(x,y,z));
		}
		if(stride > 11) {
			throw haxe_Exception.thrown("Unsupported stride");
		}
		return { format : hxd_BufferFormat.make(format), defs : defs};
	}
	,load: function(format,defaults,modelIndex) {
		if(modelIndex == null) {
			modelIndex = -1;
		}
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var vtmp_x = x;
		var vtmp_y = y;
		var vtmp_z = z;
		var models = modelIndex < 0 ? this.header.models : [this.header.models[modelIndex]];
		var outVertex = hxd__$FloatBuffer_Float32Expand._new(0);
		var outIndex = new Array(0);
		var stride = format.stride;
		var mid = -1;
		var _g = 0;
		while(_g < models.length) {
			var m = models[_g];
			++_g;
			var geom = this.header.geometries[m.geometry];
			if(geom == null) {
				continue;
			}
			var _g1 = 0;
			var _g2 = m.materials;
			while(_g1 < _g2.length) {
				var mat = _g2[_g1];
				++_g1;
				if(mid < 0) {
					mid = mat;
				}
				if(mid != mat) {
					throw haxe_Exception.thrown("Models have several materials");
				}
			}
			var pos = m.position.toMatrix();
			var data = this.getBuffers(geom,format,defaults);
			var start = outVertex.pos / stride | 0;
			var _g3 = 0;
			var _g4 = data.vertexes.length / stride | 0;
			while(_g3 < _g4) {
				var i = _g3++;
				var p = i * stride;
				vtmp_x = data.vertexes[p++];
				vtmp_y = data.vertexes[p++];
				vtmp_z = data.vertexes[p++];
				var px = vtmp_x * pos._11 + vtmp_y * pos._21 + vtmp_z * pos._31 + pos._41;
				var py = vtmp_x * pos._12 + vtmp_y * pos._22 + vtmp_z * pos._32 + pos._42;
				var pz = vtmp_x * pos._13 + vtmp_y * pos._23 + vtmp_z * pos._33 + pos._43;
				vtmp_x = px;
				vtmp_y = py;
				vtmp_z = pz;
				if(outVertex.pos == outVertex.array.length) {
					var newSize = outVertex.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(outVertex.array);
					outVertex.array = newArray;
				}
				outVertex.array[outVertex.pos++] = vtmp_x;
				if(outVertex.pos == outVertex.array.length) {
					var newSize1 = outVertex.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(outVertex.array);
					outVertex.array = newArray1;
				}
				outVertex.array[outVertex.pos++] = vtmp_y;
				if(outVertex.pos == outVertex.array.length) {
					var newSize2 = outVertex.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(outVertex.array);
					outVertex.array = newArray2;
				}
				outVertex.array[outVertex.pos++] = vtmp_z;
				var _g5 = 0;
				var _g6 = stride - 3;
				while(_g5 < _g6) {
					var j = _g5++;
					var v = data.vertexes[p++];
					if(outVertex.pos == outVertex.array.length) {
						var newSize3 = outVertex.array.length << 1;
						if(newSize3 < 128) {
							newSize3 = 128;
						}
						var newArray3 = new Float32Array(newSize3);
						newArray3.set(outVertex.array);
						outVertex.array = newArray3;
					}
					outVertex.array[outVertex.pos++] = v;
				}
			}
			var _g7 = 0;
			var _g8 = data.indexes;
			while(_g7 < _g8.length) {
				var idx = _g8[_g7];
				++_g7;
				outIndex.push(idx + start);
			}
		}
		return { vertex : outVertex, index : outIndex};
	}
	,getBuffers: function(geom,format,defaults,material) {
		if(material == 0 && geom.indexCounts.length == 1) {
			material = null;
		}
		var maps = [];
		var index = 0;
		var stride = 0;
		var lowPrec = false;
		var _g_current = 0;
		var _g_array = format.inputs;
		while(_g_current < _g_array.length) {
			var i = _g_array[_g_current++];
			var i2 = geom.vertexFormat.getInput(i.name);
			var map;
			if(i2 == null) {
				var def = defaults == null ? null : defaults[index];
				if(def == null) {
					throw haxe_Exception.thrown("Missing required " + i.name);
				}
				map = new hxd_fmt_hmd__$Library_FormatMap(i.type & 7,0,def,0);
			} else {
				if(i2.type != i.type) {
					throw haxe_Exception.thrown("Requested " + i.name + " " + (i.type == null ? "null" : hxd_InputFormat.toString(i.type)) + " but found " + (i2.type == null ? "null" : hxd_InputFormat.toString(i2.type)));
				}
				map = new hxd_fmt_hmd__$Library_FormatMap(i.type & 7,geom.vertexFormat.calculateInputOffset(i2.name),null,i2.precision);
				if(i2.precision != 0) {
					lowPrec = true;
				}
			}
			maps.push(map);
			stride += i.type & 7;
			++index;
		}
		var geomStride = geom.vertexFormat.strideBytes;
		var vsize = geom.vertexCount * geomStride;
		var vbuf = new haxe_io_Bytes(new ArrayBuffer(vsize));
		var entry = this.resource.entry;
		entry.readFull(vbuf,this.header.dataPosition + geom.vertexPosition,vsize);
		var dataPos = this.header.dataPosition + geom.indexPosition;
		var isSmall = geom.vertexCount <= 65536;
		var imult = isSmall ? 2 : 4;
		var isize;
		if(material == null) {
			isize = geom.get_indexCount() * imult;
		} else {
			var ipos = 0;
			var _g = 0;
			var _g1 = material;
			while(_g < _g1) {
				var i = _g++;
				ipos += geom.indexCounts[i];
			}
			dataPos += ipos * imult;
			isize = geom.indexCounts[material] * imult;
		}
		var ibuf = new haxe_io_Bytes(new ArrayBuffer(isize));
		entry.readFull(ibuf,dataPos,isize);
		var buf = new hxd_fmt_hmd_GeometryBuffer();
		if(material == null) {
			buf.vertexes = new Array(stride * geom.vertexCount);
			buf.indexes = new Array(geom.get_indexCount());
			var w = 0;
			var _g = 0;
			var _g1 = geom.vertexCount;
			while(_g < _g1) {
				var vid = _g++;
				var _g2 = 0;
				while(_g2 < maps.length) {
					var m = maps[_g2];
					++_g2;
					if(m.def == null) {
						var _g3 = 0;
						var _g4 = m.size;
						while(_g3 < _g4) {
							var i = _g3++;
							var this1 = buf.vertexes;
							var index = w++;
							var val;
							if(lowPrec) {
								switch(m.precision) {
								case 0:
									val = vbuf.getFloat(vid * geomStride + (i << 2) + m.offset);
									break;
								case 1:
									val = hxd_BufferFormat.float16to32(vbuf.getUInt16(vid * geomStride + (i << 1) + m.offset));
									break;
								case 2:
									val = (vbuf.b[vid * geomStride + i + m.offset] & 255) / 255;
									break;
								case 3:
									val = hxd_BufferFormat.floatS8to32(vbuf.b[vid * geomStride + i + m.offset]);
									break;
								}
							} else {
								val = vbuf.getFloat(vid * geomStride + (i << 2) + m.offset);
							}
							this1[index] = val;
						}
					} else {
						switch(m.size) {
						case 1:
							buf.vertexes[w++] = m.def.x;
							break;
						case 2:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							break;
						case 3:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							buf.vertexes[w++] = m.def.z;
							break;
						default:
							buf.vertexes[w++] = m.def.x;
							buf.vertexes[w++] = m.def.y;
							buf.vertexes[w++] = m.def.z;
							buf.vertexes[w++] = m.def.w;
						}
					}
				}
			}
			if(isSmall) {
				var r = 0;
				var _g = 0;
				var _g1 = buf.indexes.length;
				while(_g < _g1) {
					var i = _g++;
					buf.indexes[i] = ibuf.b[r++] | ibuf.b[r++] << 8;
				}
			} else {
				var _g = 0;
				var _g1 = buf.indexes.length;
				while(_g < _g1) {
					var i = _g++;
					buf.indexes[i] = ibuf.getInt32(i << 2);
				}
			}
		} else {
			var icount = geom.indexCounts[material];
			var vmap = new Array(geom.vertexCount);
			var vertexes = hxd__$FloatBuffer_Float32Expand._new(0);
			buf.indexes = new Array(icount);
			var r = 0;
			var vcount = 0;
			var _g = 0;
			var _g1 = buf.indexes.length;
			while(_g < _g1) {
				var i = _g++;
				var vid = isSmall ? ibuf.b[r++] | ibuf.b[r++] << 8 : ibuf.getInt32(i << 2);
				var rid = vmap[vid];
				if(rid == 0) {
					++vcount;
					rid = vcount;
					vmap[vid] = rid;
					var _g2 = 0;
					while(_g2 < maps.length) {
						var m = maps[_g2];
						++_g2;
						if(m.def == null) {
							var _g3 = 0;
							var _g4 = m.size;
							while(_g3 < _g4) {
								var i1 = _g3++;
								var v;
								if(lowPrec) {
									switch(m.precision) {
									case 0:
										v = vbuf.getFloat(vid * geomStride + (i1 << 2) + m.offset);
										break;
									case 1:
										v = hxd_BufferFormat.float16to32(vbuf.getUInt16(vid * geomStride + (i1 << 1) + m.offset));
										break;
									case 2:
										v = (vbuf.b[vid * geomStride + i1 + m.offset] & 255) / 255;
										break;
									case 3:
										v = hxd_BufferFormat.floatS8to32(vbuf.b[vid * geomStride + i1 + m.offset]);
										break;
									}
								} else {
									v = vbuf.getFloat(vid * geomStride + (i1 << 2) + m.offset);
								}
								if(vertexes.pos == vertexes.array.length) {
									var newSize = vertexes.array.length << 1;
									if(newSize < 128) {
										newSize = 128;
									}
									var newArray = new Float32Array(newSize);
									newArray.set(vertexes.array);
									vertexes.array = newArray;
								}
								vertexes.array[vertexes.pos++] = v;
							}
						} else {
							switch(m.size) {
							case 1:
								var v1 = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize1 = vertexes.array.length << 1;
									if(newSize1 < 128) {
										newSize1 = 128;
									}
									var newArray1 = new Float32Array(newSize1);
									newArray1.set(vertexes.array);
									vertexes.array = newArray1;
								}
								vertexes.array[vertexes.pos++] = v1;
								break;
							case 2:
								var v2 = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize2 = vertexes.array.length << 1;
									if(newSize2 < 128) {
										newSize2 = 128;
									}
									var newArray2 = new Float32Array(newSize2);
									newArray2.set(vertexes.array);
									vertexes.array = newArray2;
								}
								vertexes.array[vertexes.pos++] = v2;
								var v3 = m.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize3 = vertexes.array.length << 1;
									if(newSize3 < 128) {
										newSize3 = 128;
									}
									var newArray3 = new Float32Array(newSize3);
									newArray3.set(vertexes.array);
									vertexes.array = newArray3;
								}
								vertexes.array[vertexes.pos++] = v3;
								break;
							case 3:
								var v4 = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize4 = vertexes.array.length << 1;
									if(newSize4 < 128) {
										newSize4 = 128;
									}
									var newArray4 = new Float32Array(newSize4);
									newArray4.set(vertexes.array);
									vertexes.array = newArray4;
								}
								vertexes.array[vertexes.pos++] = v4;
								var v5 = m.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize5 = vertexes.array.length << 1;
									if(newSize5 < 128) {
										newSize5 = 128;
									}
									var newArray5 = new Float32Array(newSize5);
									newArray5.set(vertexes.array);
									vertexes.array = newArray5;
								}
								vertexes.array[vertexes.pos++] = v5;
								var v6 = m.def.z;
								if(vertexes.pos == vertexes.array.length) {
									var newSize6 = vertexes.array.length << 1;
									if(newSize6 < 128) {
										newSize6 = 128;
									}
									var newArray6 = new Float32Array(newSize6);
									newArray6.set(vertexes.array);
									vertexes.array = newArray6;
								}
								vertexes.array[vertexes.pos++] = v6;
								break;
							default:
								var v7 = m.def.x;
								if(vertexes.pos == vertexes.array.length) {
									var newSize7 = vertexes.array.length << 1;
									if(newSize7 < 128) {
										newSize7 = 128;
									}
									var newArray7 = new Float32Array(newSize7);
									newArray7.set(vertexes.array);
									vertexes.array = newArray7;
								}
								vertexes.array[vertexes.pos++] = v7;
								var v8 = m.def.y;
								if(vertexes.pos == vertexes.array.length) {
									var newSize8 = vertexes.array.length << 1;
									if(newSize8 < 128) {
										newSize8 = 128;
									}
									var newArray8 = new Float32Array(newSize8);
									newArray8.set(vertexes.array);
									vertexes.array = newArray8;
								}
								vertexes.array[vertexes.pos++] = v8;
								var v9 = m.def.z;
								if(vertexes.pos == vertexes.array.length) {
									var newSize9 = vertexes.array.length << 1;
									if(newSize9 < 128) {
										newSize9 = 128;
									}
									var newArray9 = new Float32Array(newSize9);
									newArray9.set(vertexes.array);
									vertexes.array = newArray9;
								}
								vertexes.array[vertexes.pos++] = v9;
								var v10 = m.def.w;
								if(vertexes.pos == vertexes.array.length) {
									var newSize10 = vertexes.array.length << 1;
									if(newSize10 < 128) {
										newSize10 = 128;
									}
									var newArray10 = new Float32Array(newSize10);
									newArray10.set(vertexes.array);
									vertexes.array = newArray10;
								}
								vertexes.array[vertexes.pos++] = v10;
							}
						}
					}
				}
				buf.indexes[i] = rid - 1;
			}
			var this1 = vertexes;
			var _g = [];
			var _g1 = 0;
			var _g2 = this1.pos;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this1.array[i]);
			}
			buf.vertexes = _g;
		}
		return buf;
	}
	,makePrimitive: function(id) {
		var p = this.cachedPrimitives[id];
		if(p != null) {
			return p;
		}
		p = new h3d_prim_HMDModel(this.header.geometries[id],this.header.dataPosition,this);
		p.incref();
		this.cachedPrimitives[id] = p;
		return p;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.cachedPrimitives;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p != null) {
				p.decref();
			}
		}
		this.cachedPrimitives = [];
	}
	,makeMaterial: function(model,mid,loadTexture) {
		var m = this.header.materials[mid];
		var mat = h3d_mat_MaterialSetup.current.createMaterial();
		mat.name = m.name;
		mat.model = this.resource;
		mat.set_blendMode(m.blendMode);
		var props = h3d_mat_MaterialSetup.current.loadMaterialProps(mat);
		if(props == null) {
			props = mat.getDefaultModelProps();
		}
		if(m.diffuseTexture != null) {
			mat.set_texture(loadTexture(m.diffuseTexture));
			if(mat.get_texture() == null) {
				mat.set_texture(h3d_mat_Texture.fromColor(16711935));
			}
		}
		if(m.specularTexture != null) {
			mat.set_specularTexture(loadTexture(m.specularTexture));
		}
		if(m.normalMap != null) {
			mat.set_normalMap(loadTexture(m.normalMap));
		}
		mat.set_props(props);
		return mat;
	}
	,makeSkin: function(skin,geom) {
		var s = this.cachedSkin.h[skin.name];
		if(s != null) {
			return s;
		}
		s = new h3d_anim_Skin(skin.name,0,geom.props != null && geom.props.indexOf(hxd_fmt_hmd_Property.FourBonesByVertex) >= 0 ? 4 : 3);
		s.namedJoints = new haxe_ds_StringMap();
		s.allJoints = [];
		s.boundJoints = [];
		s.rootJoints = [];
		var _g = 0;
		var _g1 = skin.joints;
		while(_g < _g1.length) {
			var joint = _g1[_g];
			++_g;
			var j = new h3d_anim_Joint();
			j.name = joint.name;
			j.index = s.allJoints.length;
			j.defMat = joint.position.toMatrix();
			if(joint.bind >= 0) {
				j.bindIndex = joint.bind;
				j.transPos = joint.transpos.toMatrix(true);
				s.boundJoints[j.bindIndex] = j;
			}
			if(joint.parent >= 0) {
				var p = s.allJoints[joint.parent];
				p.subs.push(j);
				j.parent = p;
			} else {
				s.rootJoints.push(j);
			}
			s.allJoints.push(j);
			s.namedJoints.h[j.name] = j;
		}
		if(skin.split != null) {
			s.splitJoints = [];
			var _g = 0;
			var _g1 = skin.split;
			while(_g < _g1.length) {
				var ss = _g1[_g];
				++_g;
				var s1 = s.splitJoints;
				var ss1 = ss.materialIndex;
				var _g2 = [];
				var _g3 = 0;
				var _g4 = ss.joints;
				while(_g3 < _g4.length) {
					var j = _g4[_g3];
					++_g3;
					_g2.push(s.allJoints[j]);
				}
				s1.push({ material : ss1, joints : _g2});
			}
		}
		this.cachedSkin.h[skin.name] = s;
		return s;
	}
	,getModelProperty: function(objName,p,def) {
		var _g = 0;
		var _g1 = this.header.models;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.name == objName) {
				if(m.props != null) {
					var _g2 = 0;
					var _g3 = m.props;
					while(_g2 < _g3.length) {
						var pr = _g3[_g2];
						++_g2;
						if(pr._hx_index == p._hx_index) {
							return Type.enumParameters(pr)[0];
						}
					}
				}
				return def;
			}
		}
		if(def == null) {
			throw haxe_Exception.thrown("Model " + objName + " not found");
		}
		return def;
	}
	,makeObject: function(loadTexture) {
		if(loadTexture == null) {
			loadTexture = function(_) {
				return h3d_mat_Texture.fromColor(16711935);
			};
		}
		if(this.header.models.length == 0) {
			throw haxe_Exception.thrown("This file does not contain any model");
		}
		var objs = [];
		var _g = 0;
		var _g1 = this.header.models;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			var obj;
			if(m.geometry < 0) {
				obj = new h3d_scene_Object();
			} else {
				var prim = this.makePrimitive(m.geometry);
				if(m.skin != null) {
					var skinData = this.makeSkin(m.skin,this.header.geometries[m.geometry]);
					skinData.primitive = prim;
					var _g2 = [];
					var _g3 = 0;
					var _g4 = m.materials;
					while(_g3 < _g4.length) {
						var mat = _g4[_g3];
						++_g3;
						_g2.push(this.makeMaterial(m,mat,loadTexture));
					}
					obj = new h3d_scene_Skin(skinData,_g2);
				} else if(m.materials.length == 1) {
					obj = new h3d_scene_Mesh(prim,this.makeMaterial(m,m.materials[0],loadTexture));
				} else {
					var _g5 = [];
					var _g6 = 0;
					var _g7 = m.materials;
					while(_g6 < _g7.length) {
						var mat1 = _g7[_g6];
						++_g6;
						_g5.push(this.makeMaterial(m,mat1,loadTexture));
					}
					obj = new h3d_scene_MultiMaterial(prim,_g5);
				}
			}
			obj.name = m.name;
			var v = m.position.toMatrix();
			obj.defaultTransform = v;
			var f = 1;
			var b = true;
			if(b) {
				obj.flags |= f;
			} else {
				obj.flags &= ~f;
			}
			objs.push(obj);
			var p = objs[m.parent];
			if(p != null) {
				p.addChild(obj);
			}
		}
		var o = objs[0];
		if(o != null) {
			var f = 256;
			o.flags |= f;
		}
		return o;
	}
	,loadAnimation: function(name) {
		var a = this.cachedAnimations.h[name == null ? "" : name];
		if(a != null) {
			return a;
		}
		var a = null;
		if(name == null) {
			if(this.header.animations.length == 0) {
				return null;
			}
			a = this.header.animations[0];
		} else {
			var _g = 0;
			var _g1 = this.header.animations;
			while(_g < _g1.length) {
				var a2 = _g1[_g];
				++_g;
				if(a2.name == name) {
					a = a2;
					break;
				}
			}
			if(a == null) {
				throw haxe_Exception.thrown("Animation " + name + " not found !");
			}
		}
		var l = this.header.version <= 2 ? this.makeLinearAnimation(a) : this.makeAnimation(a);
		l.speed = a.speed;
		l.loop = a.loop;
		if(a.events != null) {
			l.setEvents(a.events);
		}
		l.resourcePath = this.resource.entry.get_path();
		this.cachedAnimations.h[a.name] = l;
		if(name == null) {
			this.cachedAnimations.h[""] = l;
		}
		return l;
	}
	,makeAnimation: function(a) {
		var b = new h3d_anim_BufferAnimation(a.name,a.frames,a.sampling);
		var stride = 0;
		var singleFrames = [];
		var otherFrames = [];
		var _g = 0;
		var _g1 = a.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var c = b.addObject(o.name,0);
			var sm = 1;
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.SingleFrame._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.SingleFrame._hx_index;
				singleFrames.push(c);
				sm = 0;
			} else {
				otherFrames.push(c);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasPosition._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Position._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasRotation._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Rotation._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasScale._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Scale._hx_index;
				stride += 3 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasUV._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.UV._hx_index;
				stride += 2 * sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasAlpha._hx_index) != 0) {
				c.layout |= 1 << h3d_anim_DataLayout.Alpha._hx_index;
				stride += sm;
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
				var _g2 = 0;
				var _g3 = o.props.length;
				while(_g2 < _g3) {
					var i = _g2++;
					var c1 = c;
					if(i > 0) {
						c1 = b.addObject(o.name,0);
						if(sm == 0) {
							singleFrames.push(c1);
						} else {
							otherFrames.push(c1);
						}
					}
					c1.layout |= 1 << h3d_anim_DataLayout.Property._hx_index;
					c1.propName = o.props[i];
					stride += sm;
				}
			}
		}
		var pos = 0;
		var _g = 0;
		while(_g < singleFrames.length) {
			var b1 = singleFrames[_g];
			++_g;
			b1.dataOffset = pos;
			pos += b1.getStride();
		}
		var singleStride = pos;
		var _g = 0;
		while(_g < otherFrames.length) {
			var b1 = otherFrames[_g];
			++_g;
			b1.dataOffset = pos;
			pos += b1.getStride();
		}
		var entry = this.resource.entry;
		var count = stride * a.frames + singleStride;
		var data = new haxe_io_Bytes(new ArrayBuffer(count * 4));
		entry.readFull(data,this.header.dataPosition + a.dataPosition,data.length);
		b.setData(new Float32Array(data.b.buffer),stride);
		return b;
	}
	,makeLinearAnimation: function(a) {
		var l = new h3d_anim_LinearAnimation(a.name,a.frames,a.sampling);
		var entry = this.resource.entry;
		var dataPos = this.header.dataPosition + a.dataPosition;
		var _g = 0;
		var _g1 = a.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var pos = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasPosition._hx_index) != 0;
			var rot = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasRotation._hx_index) != 0;
			var scale = (o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasScale._hx_index) != 0;
			if(pos || rot || scale) {
				var frameCount = a.frames;
				if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.SingleFrame._hx_index) != 0) {
					frameCount = 1;
				}
				var fl = new Array(frameCount);
				var size = ((pos ? 3 : 0) + (rot ? 3 : 0) + (scale ? 3 : 0)) * 4 * frameCount;
				var data = entry.fetchBytes(dataPos,size);
				dataPos += size;
				var p = 0;
				var _g2 = 0;
				var _g3 = frameCount;
				while(_g2 < _g3) {
					var i = _g2++;
					var f = new h3d_anim_LinearFrame();
					if(pos) {
						f.tx = data.getFloat(p);
						p += 4;
						f.ty = data.getFloat(p);
						p += 4;
						f.tz = data.getFloat(p);
						p += 4;
					} else {
						f.tx = 0;
						f.ty = 0;
						f.tz = 0;
					}
					if(rot) {
						f.qx = data.getFloat(p);
						p += 4;
						f.qy = data.getFloat(p);
						p += 4;
						f.qz = data.getFloat(p);
						p += 4;
						var qw = 1 - (f.qx * f.qx + f.qy * f.qy + f.qz * f.qz);
						f.qw = qw < 0 ? -Math.sqrt(-qw) : Math.sqrt(qw);
					} else {
						f.qx = 0;
						f.qy = 0;
						f.qz = 0;
						f.qw = 1;
					}
					if(scale) {
						f.sx = data.getFloat(p);
						p += 4;
						f.sy = data.getFloat(p);
						p += 4;
						f.sz = data.getFloat(p);
						p += 4;
					} else {
						f.sx = 1;
						f.sy = 1;
						f.sz = 1;
					}
					fl[i] = f;
				}
				l.addCurve(o.name,fl,true,rot,scale);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasUV._hx_index) != 0) {
				var fl1 = new Array(a.frames * 2);
				var size1 = 8 * a.frames;
				var data1 = entry.fetchBytes(dataPos,size1);
				dataPos += size1;
				var _g4 = 0;
				var _g5 = fl1.length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					fl1[i1] = data1.getFloat(i1 * 4);
				}
				l.addUVCurve(o.name,fl1);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasAlpha._hx_index) != 0) {
				var fl2 = new Array(a.frames);
				var size2 = 4 * a.frames;
				var data2 = entry.fetchBytes(dataPos,size2);
				dataPos += size2;
				var _g6 = 0;
				var _g7 = fl2.length;
				while(_g6 < _g7) {
					var i2 = _g6++;
					fl2[i2] = data2.getFloat(i2 * 4);
				}
				l.addAlphaCurve(o.name,fl2);
			}
			if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
				var _g8 = 0;
				var _g9 = o.props;
				while(_g8 < _g9.length) {
					var p1 = _g9[_g8];
					++_g8;
					var fl3 = new Array(a.frames);
					var size3 = 4 * a.frames;
					var data3 = entry.fetchBytes(dataPos,size3);
					dataPos += size3;
					var _g10 = 0;
					var _g11 = fl3.length;
					while(_g10 < _g11) {
						var i3 = _g10++;
						fl3[i3] = data3.getFloat(i3 * 4);
					}
					l.addPropCurve(o.name,p1,fl3);
				}
			}
		}
		return l;
	}
	,loadSkin: function(geom,skin,optimize) {
		if(optimize == null) {
			optimize = true;
		}
		if(skin.vertexWeights != null) {
			return;
		}
		var bonesPerVertex = skin.bonesPerVertex;
		if(!(bonesPerVertex == 3 || bonesPerVertex == 4)) {
			throw haxe_Exception.thrown("assert");
		}
		var use4Bones = bonesPerVertex == 4;
		skin.vertexCount = geom.vertexCount;
		var format = hxd_BufferFormat.make([new hxd_BufferInput("position",3),new hxd_BufferInput("weights",3),new hxd_BufferInput("indexes",9)]);
		var data = this.getBuffers(geom,format);
		var formatStride = format.stride;
		skin.vertexWeights = new Array(skin.vertexCount * bonesPerVertex);
		skin.vertexJoints = new Array(skin.vertexCount * bonesPerVertex);
		var _g = 0;
		var _g1 = skin.boundJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			j.offsets = new h3d_col_Bounds();
		}
		var vbuf = data.vertexes;
		var idx = 0;
		var bounds_xMin = 1e20;
		var bounds_xMax = -1e20;
		var bounds_yMin = 1e20;
		var bounds_yMax = -1e20;
		var bounds_zMin = 1e20;
		var bounds_zMax = -1e20;
		var out = NaN;
		var ranges;
		if(skin.splitJoints == null) {
			var jointsByBind = [];
			var _g = 0;
			var _g1 = skin.boundJoints;
			while(_g < _g1.length) {
				var j = _g1[_g];
				++_g;
				jointsByBind[j.bindIndex] = j;
			}
			ranges = [{ index : 0, pos : 0, count : data.indexes.length, joints : jointsByBind}];
		} else {
			var idx = 0;
			var triPos = [];
			var pos = 0;
			var _g = 0;
			var _g1 = geom.indexCounts;
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				triPos.push(pos);
				pos += n;
			}
			var _g = [];
			var _g1 = 0;
			var _g2 = skin.splitJoints;
			while(_g1 < _g2.length) {
				var j = _g2[_g1];
				++_g1;
				_g.push({ index : idx, pos : triPos[idx], count : geom.indexCounts[idx++], joints : j.joints});
			}
			ranges = _g;
		}
		var _g = 0;
		while(_g < ranges.length) {
			var r = ranges[_g];
			++_g;
			var _g1 = r.pos;
			var _g2 = r.pos + r.count;
			while(_g1 < _g2) {
				var idx = _g1++;
				var vidx = data.indexes[idx];
				var p = vidx * formatStride;
				var x = vbuf[p];
				if(x != x) {
					continue;
				}
				vbuf[p++] = out;
				var y = vbuf[p++];
				var z = vbuf[p++];
				var w1 = vbuf[p++];
				var w2 = vbuf[p++];
				var w3 = vbuf[p++];
				var w4 = 0.0;
				var vout = vidx * bonesPerVertex;
				skin.vertexWeights[vout] = w1;
				skin.vertexWeights[vout + 1] = w2;
				skin.vertexWeights[vout + 2] = w3;
				if(use4Bones) {
					w4 = 1.0 - w1 - w2 - w3;
					skin.vertexWeights[vout + 3] = w4;
				}
				var w = (w1 == 0 ? 1 : 0) | (w2 == 0 ? 2 : 0) | (w3 == 0 ? 4 : 0) | (w4 == 0 ? 8 : 0);
				var idx1 = haxe_io_FPHelper.floatToI32(vbuf[p++]);
				if(x < bounds_xMin) {
					bounds_xMin = x;
				}
				if(x > bounds_xMax) {
					bounds_xMax = x;
				}
				if(y < bounds_yMin) {
					bounds_yMin = y;
				}
				if(y > bounds_yMax) {
					bounds_yMax = y;
				}
				if(z < bounds_zMin) {
					bounds_zMin = z;
				}
				if(z > bounds_zMax) {
					bounds_zMax = z;
				}
				var _g3 = 0;
				var _g4 = bonesPerVertex;
				while(_g3 < _g4) {
					var i = _g3++;
					if((w & 1 << i) != 0) {
						skin.vertexJoints[vout++] = -1;
						continue;
					}
					var idx2 = idx1 >> (i << 3) & 255;
					var j = r.joints[idx2];
					var _this = j.offsets;
					if(x < _this.xMin) {
						_this.xMin = x;
					}
					if(x > _this.xMax) {
						_this.xMax = x;
					}
					if(y < _this.yMin) {
						_this.yMin = y;
					}
					if(y > _this.yMax) {
						_this.yMax = y;
					}
					if(z < _this.zMin) {
						_this.zMin = z;
					}
					if(z > _this.zMax) {
						_this.zMax = z;
					}
					skin.vertexJoints[vout++] = j.bindIndex;
				}
			}
		}
		if(optimize) {
			var idx = skin.allJoints.length - 1;
			var optOut = 0;
			var refVolume = (bounds_xMax - bounds_xMin) * (bounds_yMax - bounds_yMin) * (bounds_zMax - bounds_zMin);
			while(idx >= 0) {
				var j = skin.allJoints[idx--];
				if(j.offsets == null || j.parent == null || j.parent.offsets == null) {
					continue;
				}
				var poff = j.parent.offsets;
				var _this = j.offsets;
				var dx = _this.xMax - _this.xMin;
				var dy = _this.yMax - _this.yMin;
				var dz = _this.zMax - _this.zMin;
				var x = (_this.xMin + _this.xMax) * 0.5;
				var y = (_this.yMin + _this.yMax) * 0.5;
				var z = (_this.zMin + _this.zMax) * 0.5;
				var r = Math.sqrt(dx * dx + dy * dy + dz * dz) * 0.5;
				if(r == null) {
					r = 1.;
				}
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var sx = x;
				var sy = y;
				var sz = z;
				var sr = r;
				if(sr == null) {
					sr = 0.;
				}
				if(sz == null) {
					sz = 0.;
				}
				if(sy == null) {
					sy = 0.;
				}
				if(sx == null) {
					sx = 0.;
				}
				var sp_x = sx;
				var sp_y = sy;
				var sp_z = sz;
				var sp_r = sr;
				if(poff.xMin <= sp_x - sp_r && poff.yMin <= sp_y - sp_r && poff.zMin <= sp_z - sp_r && poff.xMax >= sp_x + sp_r && poff.yMax >= sp_y + sp_r && poff.zMax >= sp_z + sp_r) {
					j.offsets = null;
					++optOut;
					continue;
				}
				var b = new h3d_col_Bounds();
				b.xMin = poff.xMin;
				b.xMax = poff.xMax;
				b.yMin = poff.yMin;
				b.yMax = poff.yMax;
				b.zMin = poff.zMin;
				b.zMax = poff.zMax;
				var pext = b;
				var x1 = sp_x;
				var y1 = sp_y;
				var z1 = sp_z;
				var r1 = sp_r;
				if(x1 - r1 < pext.xMin) {
					pext.xMin = x1 - r1;
				}
				if(x1 + r1 > pext.xMax) {
					pext.xMax = x1 + r1;
				}
				if(y1 - r1 < pext.yMin) {
					pext.yMin = y1 - r1;
				}
				if(y1 + r1 > pext.yMax) {
					pext.yMax = y1 + r1;
				}
				if(z1 - r1 < pext.zMin) {
					pext.zMin = z1 - r1;
				}
				if(z1 + r1 > pext.zMax) {
					pext.zMax = z1 + r1;
				}
				var ratio = Math.sqrt(refVolume * 1.5 / ((pext.xMax - pext.xMin) * (pext.yMax - pext.yMin) * (pext.zMax - pext.zMin)));
				var k = (pext.xMax - pext.xMin) * (pext.yMax - pext.yMin) * (pext.zMax - pext.zMin) / ((poff.xMax - poff.xMin) * (poff.yMax - poff.yMin) * (poff.zMax - poff.zMin));
				if(k < ratio) {
					j.parent.offsets = pext;
					j.offsets = null;
					++optOut;
					continue;
				}
			}
		}
		var _g = 0;
		var _g1 = skin.allJoints;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			if(j.offsets == null) {
				j.offsetRay = -1;
				continue;
			}
			var b = j.offsets;
			var pt1;
			var pt2;
			var x = (b.xMin + b.xMax) * 0.5;
			var y = (b.yMin + b.yMax) * 0.5;
			var z = (b.zMin + b.zMax) * 0.5;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var off_x = x1;
			var off_y = y1;
			var off_z = z1;
			var r;
			if(b.xMax - b.xMin > b.yMax - b.yMin && b.xMax - b.xMin > b.zMax - b.zMin) {
				var a = b.yMax - b.yMin;
				var b1 = b.zMax - b.zMin;
				r = (a < b1 ? b1 : a) * 0.5;
				var x2 = b.xMin + r;
				var y2 = off_y;
				var z2 = off_z;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				pt1 = new h3d_VectorImpl(x2,y2,z2);
				var x3 = b.xMax - r;
				var y3 = off_y;
				var z3 = off_z;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				pt2 = new h3d_VectorImpl(x3,y3,z3);
			} else if(b.yMax - b.yMin > b.zMax - b.zMin) {
				var a1 = b.xMax - b.xMin;
				var b2 = b.zMax - b.zMin;
				r = (a1 < b2 ? b2 : a1) * 0.5;
				var x4 = off_x;
				var y4 = b.yMin + r;
				var z4 = off_z;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				pt1 = new h3d_VectorImpl(x4,y4,z4);
				var x5 = off_x;
				var y5 = b.yMax - r;
				var z5 = off_z;
				if(z5 == null) {
					z5 = 0.;
				}
				if(y5 == null) {
					y5 = 0.;
				}
				if(x5 == null) {
					x5 = 0.;
				}
				pt2 = new h3d_VectorImpl(x5,y5,z5);
			} else {
				var a2 = b.xMax - b.xMin;
				var b3 = b.yMax - b.yMin;
				r = (a2 < b3 ? b3 : a2) * 0.5;
				var x6 = off_x;
				var y6 = off_y;
				var z6 = b.zMin + r;
				if(z6 == null) {
					z6 = 0.;
				}
				if(y6 == null) {
					y6 = 0.;
				}
				if(x6 == null) {
					x6 = 0.;
				}
				pt1 = new h3d_VectorImpl(x6,y6,z6);
				var x7 = off_x;
				var y7 = off_y;
				var z7 = b.zMax - r;
				if(z7 == null) {
					z7 = 0.;
				}
				if(y7 == null) {
					y7 = 0.;
				}
				if(x7 == null) {
					x7 = 0.;
				}
				pt2 = new h3d_VectorImpl(x7,y7,z7);
			}
			b.xMin = pt1.x;
			b.yMin = pt1.y;
			b.zMin = pt1.z;
			b.xMax = pt2.x;
			b.yMax = pt2.y;
			b.zMax = pt2.z;
			j.offsetRay = r;
		}
	}
	,__class__: hxd_fmt_hmd_Library
};
var hxd_fmt_hmd_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.hmd.Reader"] = hxd_fmt_hmd_Reader;
hxd_fmt_hmd_Reader.__name__ = "hxd.fmt.hmd.Reader";
hxd_fmt_hmd_Reader.prototype = {
	readProperty: function() {
		var _g = this.i.readByte();
		switch(_g) {
		case 0:
			return hxd_fmt_hmd_Property.CameraFOVY(this.i.readFloat());
		case 1:
			throw haxe_Exception.thrown("Obsolete HasMaterialFlags");
		case 2:
			return hxd_fmt_hmd_Property.HasExtraTextures;
		case 3:
			return hxd_fmt_hmd_Property.FourBonesByVertex;
		default:
			var unk = _g;
			throw haxe_Exception.thrown("Unknown property #" + unk);
		}
	}
	,readProps: function() {
		if(this.version == 1) {
			return null;
		}
		var n = this.i.readByte();
		if(n == 0) {
			return null;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = n;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.readProperty());
		}
		return _g;
	}
	,readName: function() {
		var b = this.i.readByte();
		if(b == 255) {
			return null;
		}
		return this.i.readString(b);
	}
	,readCachedName: function() {
		var name = this.readName();
		if(name == null) {
			return null;
		}
		if(hxd_fmt_hmd_Reader.HMD_STRINGS == null) {
			hxd_fmt_hmd_Reader.HMD_STRINGS = new haxe_ds_StringMap();
		}
		var n = hxd_fmt_hmd_Reader.HMD_STRINGS.h[name];
		if(n != null) {
			return n;
		}
		hxd_fmt_hmd_Reader.HMD_STRINGS.h[name] = name;
		return name;
	}
	,readPosition: function(hasScale) {
		if(hasScale == null) {
			hasScale = true;
		}
		var p = new hxd_fmt_hmd_Position();
		p.x = this.i.readFloat();
		p.y = this.i.readFloat();
		p.z = this.i.readFloat();
		p.qx = this.i.readFloat();
		p.qy = this.i.readFloat();
		p.qz = this.i.readFloat();
		if(hasScale) {
			p.sx = this.i.readFloat();
			p.sy = this.i.readFloat();
			p.sz = this.i.readFloat();
		} else {
			p.sx = 1;
			p.sy = 1;
			p.sz = 1;
		}
		return p;
	}
	,readBounds: function() {
		var b = new h3d_col_Bounds();
		b.xMin = this.i.readFloat();
		b.yMin = this.i.readFloat();
		b.zMin = this.i.readFloat();
		b.xMax = this.i.readFloat();
		b.yMax = this.i.readFloat();
		b.zMax = this.i.readFloat();
		return b;
	}
	,readSkin: function() {
		var name = this.readCachedName();
		if(name == null) {
			return null;
		}
		var s = new hxd_fmt_hmd_Skin();
		s.props = this.readProps();
		s.name = name;
		s.joints = [];
		var _g = 0;
		var _g1 = this.i.readUInt16();
		while(_g < _g1) {
			var k = _g++;
			var j = new hxd_fmt_hmd_SkinJoint();
			j.props = this.readProps();
			j.name = this.readCachedName();
			var pid = this.i.readUInt16();
			var hasScale = (pid & 32768) != 0;
			if(hasScale) {
				pid &= 32767;
			}
			j.parent = pid - 1;
			j.position = this.readPosition(hasScale);
			j.bind = this.i.readUInt16() - 1;
			if(j.bind >= 0) {
				j.transpos = this.readPosition(hasScale);
			}
			s.joints.push(j);
		}
		var count = this.i.readByte();
		if(count > 0) {
			s.split = [];
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var k = _g++;
				var ss = new hxd_fmt_hmd_SkinSplit();
				ss.materialIndex = this.i.readByte();
				var _g2 = [];
				var _g3 = 0;
				var _g4 = this.i.readByte();
				while(_g3 < _g4) {
					var k1 = _g3++;
					_g2.push(this.i.readUInt16());
				}
				ss.joints = _g2;
				s.split.push(ss);
			}
		}
		return s;
	}
	,readHeader: function(fast) {
		if(fast == null) {
			fast = false;
		}
		var d = new hxd_fmt_hmd_Data();
		var h = this.i.readString(3);
		if(h != "HMD") {
			if(HxOverrides.cca(h,0) == 59) {
				throw haxe_Exception.thrown("FBX was not converted to HMD");
			}
			throw haxe_Exception.thrown("Invalid HMD header " + encodeURIComponent(h));
		}
		this.version = this.i.readByte();
		if(this.version > 3) {
			throw haxe_Exception.thrown("Can't read HMD v" + this.version);
		}
		d.version = this.version;
		d.geometries = [];
		d.dataPosition = this.i.readInt32();
		if(fast) {
			this.i = new haxe_io_BytesInput(this.i.read(d.dataPosition - 12));
		}
		d.props = this.readProps();
		var _g = 0;
		var _g1 = this.i.readInt32();
		while(_g < _g1) {
			var k = _g++;
			var g = new hxd_fmt_hmd_Geometry();
			g.props = this.readProps();
			g.vertexCount = this.i.readInt32();
			var stride = this.i.readByte();
			var _g2 = [];
			var _g3 = 0;
			var _g4 = this.i.readByte();
			while(_g3 < _g4) {
				var k1 = _g3++;
				var name = this.readCachedName();
				var type = this.i.readByte();
				_g2.push(new hxd_BufferInput(name,type & 15,type >> 4));
			}
			g.vertexFormat = hxd_BufferFormat.make(_g2);
			if(stride != g.vertexFormat.stride) {
				throw haxe_Exception.thrown("assert");
			}
			g.vertexPosition = this.i.readInt32();
			var subCount = this.i.readByte();
			if(subCount == 255) {
				subCount = this.i.readInt32();
			}
			var _g5 = [];
			var _g6 = 0;
			var _g7 = subCount;
			while(_g6 < _g7) {
				var k2 = _g6++;
				_g5.push(this.i.readInt32());
			}
			g.indexCounts = _g5;
			g.indexPosition = this.i.readInt32();
			g.bounds = this.readBounds();
			d.geometries.push(g);
		}
		d.materials = [];
		var _g = 0;
		var _g1 = this.i.readInt32();
		while(_g < _g1) {
			var k = _g++;
			var m = new hxd_fmt_hmd_Material();
			m.props = this.readProps();
			m.name = this.readName();
			m.diffuseTexture = this.readName();
			m.blendMode = hxd_fmt_hmd_Reader.BLEND[this.i.readByte()];
			this.i.readByte();
			this.i.readFloat();
			if(m.props != null && m.props.indexOf(hxd_fmt_hmd_Property.HasExtraTextures) >= 0) {
				m.specularTexture = this.readName();
				m.normalMap = this.readName();
			}
			d.materials.push(m);
		}
		d.models = [];
		var _g = 0;
		var _g1 = this.i.readInt32();
		while(_g < _g1) {
			var k = _g++;
			var m = new hxd_fmt_hmd_Model();
			m.props = this.readProps();
			m.name = this.readCachedName();
			m.parent = this.i.readInt32() - 1;
			m.follow = this.readCachedName();
			m.position = this.readPosition();
			m.geometry = this.i.readInt32() - 1;
			d.models.push(m);
			if(m.geometry < 0) {
				continue;
			}
			m.materials = [];
			var matCount = this.i.readByte();
			if(matCount == 255) {
				matCount = this.i.readInt32();
			}
			var _g2 = 0;
			var _g3 = matCount;
			while(_g2 < _g3) {
				var k1 = _g2++;
				m.materials.push(this.i.readInt32());
			}
			m.skin = this.readSkin();
		}
		d.animations = [];
		var _g = 0;
		var _g1 = this.i.readInt32();
		while(_g < _g1) {
			var k = _g++;
			var a = new hxd_fmt_hmd_Animation();
			a.props = this.readProps();
			a.name = this.readName();
			a.frames = this.i.readInt32();
			a.sampling = this.i.readFloat();
			a.speed = this.i.readFloat();
			var flags = this.i.readByte();
			a.loop = (flags & 1) != 0;
			a.dataPosition = this.i.readInt32();
			a.objects = [];
			var _g2 = 0;
			var _g3 = this.i.readInt32();
			while(_g2 < _g3) {
				var k1 = _g2++;
				var o = new hxd_fmt_hmd_AnimationObject();
				o.name = this.readCachedName();
				var i = this.i.readByte();
				if(i == null) {
					i = 0;
				}
				o.flags = i;
				a.objects.push(o);
				if((o.flags & 1 << hxd_fmt_hmd_AnimationFlag.HasProps._hx_index) != 0) {
					var _g4 = [];
					var _g5 = 0;
					var _g6 = this.i.readByte();
					while(_g5 < _g6) {
						var i1 = _g5++;
						_g4.push(this.readName());
					}
					o.props = _g4;
				}
			}
			if((flags & 2) != 0) {
				a.events = [];
				var _g7 = 0;
				var _g8 = this.i.readInt32();
				while(_g7 < _g8) {
					var k2 = _g7++;
					var e = new hxd_fmt_hmd_AnimationEvent();
					e.frame = this.i.readInt32();
					e.data = this.readCachedName();
					a.events.push(e);
				}
			}
			d.animations.push(a);
		}
		return d;
	}
	,read: function() {
		var h = this.readHeader();
		h.data = this.i.read(this.i.readInt32());
		return h;
	}
	,__class__: hxd_fmt_hmd_Reader
};
var hxd_fmt_pak_File = function() {
};
$hxClasses["hxd.fmt.pak.File"] = hxd_fmt_pak_File;
hxd_fmt_pak_File.__name__ = "hxd.fmt.pak.File";
hxd_fmt_pak_File.prototype = {
	__class__: hxd_fmt_pak_File
};
var hxd_fmt_pak_Data = function() {
};
$hxClasses["hxd.fmt.pak.Data"] = hxd_fmt_pak_Data;
hxd_fmt_pak_Data.__name__ = "hxd.fmt.pak.Data";
hxd_fmt_pak_Data.prototype = {
	__class__: hxd_fmt_pak_Data
};
var hxd_fmt_pak_FileSeekMode = $hxEnums["hxd.fmt.pak.FileSeekMode"] = { __ename__:"hxd.fmt.pak.FileSeekMode",__constructs__:null
	,SeekBegin: {_hx_name:"SeekBegin",_hx_index:0,__enum__:"hxd.fmt.pak.FileSeekMode",toString:$estr}
	,SeekEnd: {_hx_name:"SeekEnd",_hx_index:1,__enum__:"hxd.fmt.pak.FileSeekMode",toString:$estr}
	,SeedCurrent: {_hx_name:"SeedCurrent",_hx_index:2,__enum__:"hxd.fmt.pak.FileSeekMode",toString:$estr}
};
hxd_fmt_pak_FileSeekMode.__constructs__ = [hxd_fmt_pak_FileSeekMode.SeekBegin,hxd_fmt_pak_FileSeekMode.SeekEnd,hxd_fmt_pak_FileSeekMode.SeedCurrent];
hxd_fmt_pak_FileSeekMode.__empty_constructs__ = [hxd_fmt_pak_FileSeekMode.SeekBegin,hxd_fmt_pak_FileSeekMode.SeekEnd,hxd_fmt_pak_FileSeekMode.SeedCurrent];
var hxd_fmt_pak_FileInput = function(b,pos,len) {
	haxe_io_BytesInput.call(this,b,pos,len);
};
$hxClasses["hxd.fmt.pak.FileInput"] = hxd_fmt_pak_FileInput;
hxd_fmt_pak_FileInput.__name__ = "hxd.fmt.pak.FileInput";
hxd_fmt_pak_FileInput.__super__ = haxe_io_BytesInput;
hxd_fmt_pak_FileInput.prototype = $extend(haxe_io_BytesInput.prototype,{
	seek: function(pos,seekMode) {
		switch(seekMode._hx_index) {
		case 0:
			this.set_position(pos);
			break;
		case 1:
			this.set_position(this.totlen - pos);
			break;
		case 2:
			this.set_position(this.pos + pos);
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,__class__: hxd_fmt_pak_FileInput
});
var hxd_fmt_pak_FileSeek = function() { };
$hxClasses["hxd.fmt.pak.FileSeek"] = hxd_fmt_pak_FileSeek;
hxd_fmt_pak_FileSeek.__name__ = "hxd.fmt.pak.FileSeek";
hxd_fmt_pak_FileSeek.seek = function(f,pos,mode) {
	if(pos > 2147483647) {
		throw haxe_Exception.thrown(haxe_io_Error.Custom("seek out of bounds"));
	}
	f.seek(pos | 0,mode);
};
var hxd_fs_FileEntry = function() { };
$hxClasses["hxd.fs.FileEntry"] = hxd_fs_FileEntry;
hxd_fs_FileEntry.__name__ = "hxd.fs.FileEntry";
hxd_fs_FileEntry.prototype = {
	getBytes: function() {
		return null;
	}
	,readBytes: function(out,outPos,pos,len) {
		throw haxe_Exception.thrown("readBytes() not implemented");
	}
	,fetchBytes: function(pos,len) {
		var bytes = hxd_fs_FileEntry.TMP_BYTES;
		if(bytes == null || bytes.length < len) {
			var allocSize = len + 65535 & -65536;
			bytes = new haxe_io_Bytes(new ArrayBuffer(allocSize));
			hxd_fs_FileEntry.TMP_BYTES = bytes;
		}
		this.readFull(bytes,pos,len);
		return bytes;
	}
	,readFull: function(bytes,pos,len) {
		if(this.readBytes(bytes,0,pos,len) < len) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
	}
	,getSign: function() {
		var bytes = this.fetchBytes(0,4);
		return bytes.b[0] | bytes.b[1] << 8 | bytes.b[2] << 16 | bytes.b[3] << 24;
	}
	,getText: function() {
		return this.getBytes().toString();
	}
	,open: function() {
		return new hxd_fs_FileInput(this);
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw haxe_Exception.thrown("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw haxe_Exception.thrown("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,exists: function(name) {
		return false;
	}
	,get: function(name) {
		return null;
	}
	,iterator: function() {
		return null;
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_isDirectory: function() {
		return false;
	}
	,get_size: function() {
		return 0;
	}
	,get_path: function() {
		throw haxe_Exception.thrown("path() not implemented");
	}
	,get_directory: function() {
		var idx = this.get_path().lastIndexOf("/");
		if(idx < 0) {
			return "";
		}
		return HxOverrides.substr(this.get_path(),0,idx);
	}
	,get_extension: function() {
		var idx = this.name.lastIndexOf(".");
		if(idx < 0) {
			return "";
		}
		return HxOverrides.substr(this.name,idx + 1,null).toLowerCase();
	}
	,__class__: hxd_fs_FileEntry
};
var hxd_fmt_pak__$FileSystem_PakEntry = function(fs,parent,f,p) {
	this.fs = fs;
	this.file = f;
	this.pakFile = p;
	this.parent = parent;
	this.name = this.file.name;
	if(f.isDirectory) {
		this.subs = [];
	}
};
$hxClasses["hxd.fmt.pak._FileSystem.PakEntry"] = hxd_fmt_pak__$FileSystem_PakEntry;
hxd_fmt_pak__$FileSystem_PakEntry.__name__ = "hxd.fmt.pak._FileSystem.PakEntry";
hxd_fmt_pak__$FileSystem_PakEntry.__super__ = hxd_fs_FileEntry;
hxd_fmt_pak__$FileSystem_PakEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	get_path: function() {
		if(this.relPath != null) {
			return this.relPath;
		}
		this.relPath = this.parent == null ? "<root>" : this.parent.parent == null ? this.name : this.parent.get_path() + "/" + this.name;
		return this.relPath;
	}
	,get_size: function() {
		return this.file.dataSize;
	}
	,get_isDirectory: function() {
		return this.file.isDirectory;
	}
	,setPos: function() {
		var pak = this.fs.getFile(this.pakFile);
		hxd_fmt_pak_FileSeek.seek(pak,this.file.dataPosition,hxd_fmt_pak_FileSeekMode.SeekBegin);
	}
	,getBytes: function() {
		this.setPos();
		this.fs.totalReadBytes += this.file.dataSize;
		this.fs.totalReadCount++;
		var pak = this.fs.getFile(this.pakFile);
		return pak.read(this.file.dataSize);
	}
	,readBytes: function(out,outPos,pos,len) {
		var pak = this.fs.getFile(this.pakFile);
		hxd_fmt_pak_FileSeek.seek(pak,this.file.dataPosition + pos,hxd_fmt_pak_FileSeekMode.SeekBegin);
		if(pos + len > this.file.dataSize) {
			len = this.file.dataSize - pos;
		}
		var tot = 0;
		while(len > 0) {
			var k = pak.readBytes(out,outPos,len);
			if(k <= 0) {
				break;
			}
			len -= k;
			outPos += k;
			tot += k;
			this.fs.totalReadBytes += k;
			this.fs.totalReadCount++;
		}
		return tot;
	}
	,exists: function(name) {
		if(this.subs != null) {
			var _g = 0;
			var _g1 = this.subs;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(c.name == name) {
					return true;
				}
			}
		}
		return false;
	}
	,get: function(name) {
		if(this.subs != null) {
			var _g = 0;
			var _g1 = this.subs;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(c.name == name) {
					return c;
				}
			}
		}
		return null;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry(this.subs);
	}
	,__class__: hxd_fmt_pak__$FileSystem_PakEntry
});
var hxd_fs_FileSystem = function() { };
$hxClasses["hxd.fs.FileSystem"] = hxd_fs_FileSystem;
hxd_fs_FileSystem.__name__ = "hxd.fs.FileSystem";
hxd_fs_FileSystem.__isInterface__ = true;
hxd_fs_FileSystem.prototype = {
	__class__: hxd_fs_FileSystem
};
var hxd_fmt_pak_FileSystem = function() {
	this.totalReadCount = 0;
	this.totalReadBytes = 0;
	this.dict = new haxe_ds_StringMap();
	var f = new hxd_fmt_pak_File();
	f.name = "<root>";
	f.isDirectory = true;
	f.content = [];
	this.files = [];
	this.root = new hxd_fmt_pak__$FileSystem_PakEntry(this,null,f,-1);
};
$hxClasses["hxd.fmt.pak.FileSystem"] = hxd_fmt_pak_FileSystem;
hxd_fmt_pak_FileSystem.__name__ = "hxd.fmt.pak.FileSystem";
hxd_fmt_pak_FileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fmt_pak_FileSystem.prototype = {
	loadPak: function(file) {
		var index = this.files.length;
		this.files.push({ path : file, inputs : []});
		var s = this.getFile(index);
		var pak = new hxd_fmt_pak_Reader(s).readHeader();
		if(pak.root.isDirectory) {
			var _g = 0;
			var _g1 = pak.root.content;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				this.addRec(this.root,f.name,f,index,pak.headerSize);
			}
		} else {
			this.addRec(this.root,pak.root.name,pak.root,index,pak.headerSize);
		}
	}
	,addPak: function(file,path) {
		var index = this.files.length;
		var info = { path : path, inputs : []};
		info.inputs[0] = file;
		this.files.push(info);
		var pak = new hxd_fmt_pak_Reader(file).readHeader();
		if(pak.root.isDirectory) {
			var _g = 0;
			var _g1 = pak.root.content;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				this.addRec(this.root,f.name,f,index,pak.headerSize);
			}
		} else {
			this.addRec(this.root,pak.root.name,pak.root,index,pak.headerSize);
		}
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.files;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = f.inputs;
			while(_g2 < _g3.length) {
				var i = _g3[_g2];
				++_g2;
				if(i != null) {
					i.close();
				}
			}
		}
		this.files = [];
	}
	,getThreadID: function() {
		return 0;
	}
	,getFile: function(pakFile) {
		var f = this.files[pakFile];
		var id = 0;
		var input = f.inputs[id];
		if(input == null) {
			throw haxe_Exception.thrown("File.read not implemented");
		}
		return input;
	}
	,addRec: function(parent,path,f,pakFile,delta) {
		var ent = this.dict.h[path];
		if(ent != null) {
			ent.file = f;
			ent.pakFile = pakFile;
		} else {
			ent = new hxd_fmt_pak__$FileSystem_PakEntry(this,parent,f,pakFile);
			this.dict.h[path] = ent;
			parent.subs.push(ent);
		}
		if(f.isDirectory) {
			var _g = 0;
			var _g1 = f.content;
			while(_g < _g1.length) {
				var sub = _g1[_g];
				++_g;
				this.addRec(ent,path + "/" + sub.name,sub,pakFile,delta);
			}
		} else {
			f.dataPosition += delta;
		}
	}
	,getRoot: function() {
		return this.root;
	}
	,get: function(path) {
		var f = this.dict.h[path];
		if(f == null) {
			throw haxe_Exception.thrown(new hxd_fs_NotFound(path));
		}
		return f;
	}
	,exists: function(path) {
		return Object.prototype.hasOwnProperty.call(this.dict.h,path);
	}
	,dir: function(path) {
		var f = this.dict.h[path];
		if(f == null) {
			throw haxe_Exception.thrown(new hxd_fs_NotFound(path));
		}
		if(!f.get_isDirectory()) {
			throw haxe_Exception.thrown(path + " is not a directory");
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = f.subs;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			_g.push(s);
		}
		return _g;
	}
	,__class__: hxd_fmt_pak_FileSystem
};
var hxd_fmt_pak_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.pak.Reader"] = hxd_fmt_pak_Reader;
hxd_fmt_pak_Reader.__name__ = "hxd.fmt.pak.Reader";
hxd_fmt_pak_Reader.prototype = {
	readHeader: function() {
		if(this.i.readString(3) != "PAK") {
			throw haxe_Exception.thrown("Invalid PAK file");
		}
		var pak = new hxd_fmt_pak_Data();
		pak.version = this.i.readByte();
		pak.headerSize = this.i.readInt32();
		pak.dataSize = this.i.readInt32();
		var old = this.i;
		this.i = new haxe_io_BytesInput(this.i.read(pak.headerSize - 16));
		pak.root = this.readFile();
		this.i = old;
		if(this.i.readString(4) != "DATA") {
			throw haxe_Exception.thrown("Corrupted PAK header");
		}
		return pak;
	}
	,readFile: function() {
		var f = new hxd_fmt_pak_File();
		f.name = this.i.readString(this.i.readByte());
		var flags = this.i.readByte();
		if((flags & 1) != 0) {
			f.isDirectory = true;
			f.content = [];
			var _g = 0;
			var _g1 = this.i.readInt32();
			while(_g < _g1) {
				var i = _g++;
				f.content.push(this.readFile());
			}
		} else {
			f.dataPosition = (flags & 2) != 0 ? this.i.readDouble() : this.i.readInt32();
			f.dataSize = this.i.readInt32();
			f.checksum = this.i.readInt32();
		}
		return f;
	}
	,__class__: hxd_fmt_pak_Reader
};
var hxd_fs_BytesFileEntry = function(path,bytes) {
	this.fullPath = path;
	this.name = path.split("/").pop();
	this.bytes = bytes;
};
$hxClasses["hxd.fs.BytesFileEntry"] = hxd_fs_BytesFileEntry;
hxd_fs_BytesFileEntry.__name__ = "hxd.fs.BytesFileEntry";
hxd_fs_BytesFileEntry.__super__ = hxd_fs_FileEntry;
hxd_fs_BytesFileEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	get_path: function() {
		return this.fullPath;
	}
	,getBytes: function() {
		return this.bytes;
	}
	,readBytes: function(out,outPos,pos,len) {
		if(pos + len > this.bytes.length) {
			len = this.bytes.length - pos;
		}
		if(len < 0) {
			len = 0;
		}
		out.blit(outPos,this.bytes,pos,len);
		return len;
	}
	,load: function(onReady) {
		haxe_Timer.delay(onReady,1);
	}
	,loadBitmap: function(onLoaded) {
		var mime;
		switch(haxe_io_Path.extension(this.fullPath).toLowerCase()) {
		case "gif":
			mime = "image/gif";
			break;
		case "jpeg":case "jpg":
			mime = "image/jpeg";
			break;
		case "png":
			mime = "image/png";
			break;
		default:
			throw haxe_Exception.thrown("Cannot determine image encoding, try adding an extension to the resource path");
		}
		var img = new Image();
		img.onload = function() {
			onLoaded(img);
		};
		var tmp = haxe_crypto_Base64.encode(this.bytes);
		img.src = "data:" + mime + ";base64," + tmp;
	}
	,exists: function(name) {
		return false;
	}
	,get: function(name) {
		return null;
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry([]);
	}
	,get_size: function() {
		return this.bytes.length;
	}
	,__class__: hxd_fs_BytesFileEntry
});
var hxd_fs_BytesFileSystem = function() {
};
$hxClasses["hxd.fs.BytesFileSystem"] = hxd_fs_BytesFileSystem;
hxd_fs_BytesFileSystem.__name__ = "hxd.fs.BytesFileSystem";
hxd_fs_BytesFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_BytesFileSystem.prototype = {
	getRoot: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,getBytes: function(path) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,exists: function(path) {
		return this.getBytes(path) != null;
	}
	,get: function(path) {
		var bytes = this.getBytes(path);
		if(bytes == null) {
			throw haxe_Exception.thrown("Resource not found '" + path + "'");
		}
		return new hxd_fs_BytesFileEntry(path,bytes);
	}
	,dispose: function() {
	}
	,dir: function(path) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,__class__: hxd_fs_BytesFileSystem
};
var hxd_fs_FileInput = function(entry) {
	this.nextReadPos = 0;
	this.cacheLen = 0;
	this.cachePos = 0;
	this.entry = entry;
};
$hxClasses["hxd.fs.FileInput"] = hxd_fs_FileInput;
hxd_fs_FileInput.__name__ = "hxd.fs.FileInput";
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	fetch: function(dataSize) {
		if(dataSize == null) {
			dataSize = 256;
		}
		var prev = this.cache;
		if(this.cache == null || this.cache.length < dataSize) {
			this.cache = hxd_fs_FileInput.PREFETCH_CACHE;
			if(this.cache != null && this.cache.length >= dataSize) {
				hxd_fs_FileInput.PREFETCH_CACHE = null;
			} else {
				this.cache = new haxe_io_Bytes(new ArrayBuffer(dataSize));
			}
		}
		var startPos = 0;
		if(this.cacheLen > 0) {
			startPos = this.cacheLen;
			dataSize -= this.cacheLen;
			this.cache.blit(0,prev,this.cachePos,this.cacheLen);
		}
		var read = this.entry.readBytes(this.cache,startPos,this.nextReadPos,dataSize);
		this.cachePos = 0;
		this.cacheLen = startPos + read;
		this.nextReadPos += read;
		if(this.cacheLen == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
	}
	,skip: function(nbytes) {
		if(this.cacheLen > 0) {
			var a = this.cacheLen;
			var k = a > nbytes ? nbytes : a;
			this.cachePos += k;
			this.cacheLen -= k;
			nbytes -= k;
		}
		this.nextReadPos += nbytes;
	}
	,readByte: function() {
		if(this.cacheLen == 0) {
			this.fetch();
		}
		var b = this.cache.b[this.cachePos++];
		this.cacheLen--;
		return b;
	}
	,readBytes: function(b,pos,len) {
		var tot = 0;
		if(len < 256 && this.cacheLen < len) {
			this.fetch();
		}
		if(this.cacheLen > 0) {
			var b1 = this.cacheLen;
			var k = len > b1 ? b1 : len;
			b.blit(pos,this.cache,this.cachePos,k);
			this.cachePos += k;
			this.cacheLen -= k;
			len -= k;
			if(len == 0) {
				return k;
			}
			pos += k;
			tot += k;
		}
		if(len > 0) {
			var k = this.entry.readBytes(b,pos,this.nextReadPos,len);
			this.nextReadPos += k;
			tot += k;
		}
		return tot;
	}
	,close: function() {
		if(this.cache != null && (hxd_fs_FileInput.PREFETCH_CACHE == null || hxd_fs_FileInput.PREFETCH_CACHE.length < this.cache.length)) {
			hxd_fs_FileInput.PREFETCH_CACHE = this.cache;
		}
		this.cache = null;
		this.cacheLen = 0;
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs_LoadedBitmap = {};
hxd_fs_LoadedBitmap._new = function(data) {
	return data;
};
hxd_fs_LoadedBitmap.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
hxd_fs_LoadedBitmap.toNative = function(this1) {
	return this1;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
$hxClasses["hxd.fs.NotFound"] = hxd_fs_NotFound;
hxd_fs_NotFound.__name__ = "hxd.fs.NotFound";
hxd_fs_NotFound.prototype = {
	toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_impl_BufferFlags = {};
hxd_impl_BufferFlags.toInt = function(this1) {
	return this1;
};
var hxd_impl_Allocator = function() {
};
$hxClasses["hxd.impl.Allocator"] = hxd_impl_Allocator;
hxd_impl_Allocator.__name__ = "hxd.impl.Allocator";
hxd_impl_Allocator.set = function(a) {
	hxd_impl_Allocator.inst = a;
};
hxd_impl_Allocator.get = function() {
	if(hxd_impl_Allocator.inst == null) {
		hxd_impl_Allocator.inst = new hxd_impl_Allocator();
	}
	return hxd_impl_Allocator.inst;
};
hxd_impl_Allocator.prototype = {
	allocBuffer: function(vertices,format,flags) {
		if(flags == null) {
			flags = 0;
		}
		var tmp;
		switch(flags) {
		case 0:
			tmp = [h3d_BufferFlag.Dynamic];
			break;
		case 1:
			tmp = null;
			break;
		case 2:
			tmp = [h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.Dynamic];
			break;
		}
		return new h3d_Buffer(vertices,format,tmp);
	}
	,ofFloats: function(v,format,flags) {
		if(flags == null) {
			flags = 0;
		}
		var nvert = v.pos / format.stride | 0;
		return this.ofSubFloats(v,nvert,format,flags);
	}
	,ofSubFloats: function(v,vertices,format,flags) {
		if(flags == null) {
			flags = 0;
		}
		var b = this.allocBuffer(vertices,format,flags);
		b.uploadFloats(v,0,vertices);
		return b;
	}
	,disposeBuffer: function(b) {
		b.dispose();
	}
	,allocIndexBuffer: function(count) {
		return h3d_Indexes._new(count);
	}
	,ofIndexes: function(ib,length) {
		if(length == null) {
			length = -1;
		}
		if(length < 0 && ib != null) {
			length = ib.length;
		}
		var idx = this.allocIndexBuffer(length);
		h3d_Indexes.uploadIndexes(idx,ib,0,length);
		return idx;
	}
	,disposeIndexBuffer: function(i) {
		i.dispose();
	}
	,onContextLost: function() {
	}
	,allocFloats: function(count) {
		var length = count;
		if(length == null) {
			length = 0;
		}
		return hxd__$FloatBuffer_Float32Expand._new(length);
	}
	,disposeFloats: function(f) {
	}
	,allocIndexes: function(count) {
		var length = count;
		if(length == null) {
			length = 0;
		}
		return new Array(length);
	}
	,disposeIndexes: function(i) {
	}
	,__class__: hxd_impl_Allocator
};
var hxd_impl_ArrayIterator = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator"] = hxd_impl_ArrayIterator;
hxd_impl_ArrayIterator.__name__ = "hxd.impl.ArrayIterator";
hxd_impl_ArrayIterator.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator
};
var hxd_impl_ArrayIterator_$h2d_$Object = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_h2d_Object"] = hxd_impl_ArrayIterator_$h2d_$Object;
hxd_impl_ArrayIterator_$h2d_$Object.__name__ = "hxd.impl.ArrayIterator_h2d_Object";
hxd_impl_ArrayIterator_$h2d_$Object.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h2d_$Object
};
var hxd_impl_ArrayIterator_$h2d_$col_$IPoint = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_h2d_col_IPoint"] = hxd_impl_ArrayIterator_$h2d_$col_$IPoint;
hxd_impl_ArrayIterator_$h2d_$col_$IPoint.__name__ = "hxd.impl.ArrayIterator_h2d_col_IPoint";
hxd_impl_ArrayIterator_$h2d_$col_$IPoint.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h2d_$col_$IPoint
};
var hxd_impl_ArrayIterator_$h2d_$col_$IPolygon = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_h2d_col_IPolygon"] = hxd_impl_ArrayIterator_$h2d_$col_$IPolygon;
hxd_impl_ArrayIterator_$h2d_$col_$IPolygon.__name__ = "hxd.impl.ArrayIterator_h2d_col_IPolygon";
hxd_impl_ArrayIterator_$h2d_$col_$IPolygon.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h2d_$col_$IPolygon
};
var hxd_impl_ArrayIterator_$h2d_$col_$Point = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_h2d_col_Point"] = hxd_impl_ArrayIterator_$h2d_$col_$Point;
hxd_impl_ArrayIterator_$h2d_$col_$Point.__name__ = "hxd.impl.ArrayIterator_h2d_col_Point";
hxd_impl_ArrayIterator_$h2d_$col_$Point.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h2d_$col_$Point
};
var hxd_impl_ArrayIterator_$h2d_$col_$Polygon = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_h2d_col_Polygon"] = hxd_impl_ArrayIterator_$h2d_$col_$Polygon;
hxd_impl_ArrayIterator_$h2d_$col_$Polygon.__name__ = "hxd.impl.ArrayIterator_h2d_col_Polygon";
hxd_impl_ArrayIterator_$h2d_$col_$Polygon.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h2d_$col_$Polygon
};
var hxd_impl_ArrayIterator_$h2d_$col_$Segment = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_h2d_col_Segment"] = hxd_impl_ArrayIterator_$h2d_$col_$Segment;
hxd_impl_ArrayIterator_$h2d_$col_$Segment.__name__ = "hxd.impl.ArrayIterator_h2d_col_Segment";
hxd_impl_ArrayIterator_$h2d_$col_$Segment.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h2d_$col_$Segment
};
var hxd_impl_ArrayIterator_$h3d_$scene_$Object = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_h3d_scene_Object"] = hxd_impl_ArrayIterator_$h3d_$scene_$Object;
hxd_impl_ArrayIterator_$h3d_$scene_$Object.__name__ = "hxd.impl.ArrayIterator_h3d_scene_Object";
hxd_impl_ArrayIterator_$h3d_$scene_$Object.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$h3d_$scene_$Object
};
var hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_fs_FileEntry"] = hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry;
hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry.__name__ = "hxd.impl.ArrayIterator_hxd_fs_FileEntry";
hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry
};
var hxd_impl_ArrayIterator_$hxd_$res_$Any = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_res_Any"] = hxd_impl_ArrayIterator_$hxd_$res_$Any;
hxd_impl_ArrayIterator_$hxd_$res_$Any.__name__ = "hxd.impl.ArrayIterator_hxd_res_Any";
hxd_impl_ArrayIterator_$hxd_$res_$Any.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$res_$Any
};
var hxd_impl_ArrayIterator_$hxd_$snd_$Channel = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_snd_Channel"] = hxd_impl_ArrayIterator_$hxd_$snd_$Channel;
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.__name__ = "hxd.impl.ArrayIterator_hxd_snd_Channel";
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$snd_$Channel
};
var hxd_impl_AsyncLoader = function() { };
$hxClasses["hxd.impl.AsyncLoader"] = hxd_impl_AsyncLoader;
hxd_impl_AsyncLoader.__name__ = "hxd.impl.AsyncLoader";
hxd_impl_AsyncLoader.__isInterface__ = true;
hxd_impl_AsyncLoader.prototype = {
	__class__: hxd_impl_AsyncLoader
};
var hxd_impl_BitSet = {};
hxd_impl_BitSet._new = function(count) {
	return new haxe_io_Bytes(new ArrayBuffer(count + 7 >> 3));
};
hxd_impl_BitSet.get = function(this1,index) {
	return (this1.b[index >> 3] & 1 << (index & 7)) != 0;
};
hxd_impl_BitSet.set = function(this1,index) {
	var p = index >> 3;
	this1.b[p] |= 1 << (index & 7);
};
hxd_impl_BitSet.unset = function(this1,index) {
	var p = index >> 3;
	this1.b[p] &= ~(1 << (index & 7));
};
hxd_impl_BitSet.toggle = function(this1,index,b) {
	var p = index >> 3;
	var v = this1.b[p];
	var mask = 1 << (index & 7);
	this1.b[p] = b ? v | mask : v & ~mask;
};
hxd_impl_BitSet.clear = function(this1,b) {
	if(b == null) {
		b = false;
	}
	this1.fill(0,this1.length,b ? 255 : 0);
};
var hxd_impl_MouseMode = $hxEnums["hxd.impl.MouseMode"] = { __ename__:"hxd.impl.MouseMode",__constructs__:null
	,Absolute: {_hx_name:"Absolute",_hx_index:0,__enum__:"hxd.impl.MouseMode",toString:$estr}
	,Relative: ($_=function(callback,restorePos) { return {_hx_index:1,callback:callback,restorePos:restorePos,__enum__:"hxd.impl.MouseMode",toString:$estr,__params__:function(){ return [this.callback,this.restorePos];}}; },$_._hx_name="Relative",$_)
	,AbsoluteUnbound: ($_=function(restorePos) { return {_hx_index:2,restorePos:restorePos,__enum__:"hxd.impl.MouseMode",toString:$estr,__params__:function(){ return [this.restorePos];}}; },$_._hx_name="AbsoluteUnbound",$_)
};
hxd_impl_MouseMode.__constructs__ = [hxd_impl_MouseMode.Absolute,hxd_impl_MouseMode.Relative,hxd_impl_MouseMode.AbsoluteUnbound];
hxd_impl_MouseMode.__empty_constructs__ = [hxd_impl_MouseMode.Absolute];
var hxd_impl_UncheckedBytes = {};
hxd_impl_UncheckedBytes._new = function(v) {
	return v;
};
hxd_impl_UncheckedBytes.get = function(this1,i) {
	return this1[i];
};
hxd_impl_UncheckedBytes.set = function(this1,i,v) {
	this1[i] = v;
	return v;
};
hxd_impl_UncheckedBytes.fromBytes = function(b) {
	return b.b;
};
var hxd_net_BinaryLoader = function(url) {
	this.url = url;
};
$hxClasses["hxd.net.BinaryLoader"] = hxd_net_BinaryLoader;
hxd_net_BinaryLoader.__name__ = "hxd.net.BinaryLoader";
hxd_net_BinaryLoader.prototype = {
	onLoaded: function(bytes) {
	}
	,onProgress: function(cur,max) {
	}
	,onError: function(msg) {
		throw haxe_Exception.thrown(msg);
	}
	,load: function() {
		var _gthis = this;
		var xhr = new XMLHttpRequest();
		xhr.open("GET",this.url,true);
		xhr.responseType = "arraybuffer";
		xhr.onerror = function(e) {
			_gthis.onError(xhr.statusText);
		};
		xhr.onload = function(e) {
			if(xhr.status != 200) {
				_gthis.onError(xhr.statusText);
				return;
			}
			_gthis.onLoaded(haxe_io_Bytes.ofData(xhr.response));
		};
		xhr.onprogress = function(e) {
			_gthis.onProgress(e.loaded || e.position | 0,e.total || e.totalSize | 0);
		};
		xhr.send();
	}
	,__class__: hxd_net_BinaryLoader
};
var hxd_poly2tri_Edge = function(p1,p2) {
	if(p1 == null || p2 == null) {
		throw haxe_Exception.thrown("Edge::new p1 or p2 is null");
	}
	var swap = false;
	if(p1.y > p2.y) {
		swap = true;
	} else if(p1.y == p2.y) {
		if(p1.x == p2.x) {
			throw haxe_Exception.thrown("Edge::repeat points " + Std.string(p1));
		}
		swap = p1.x > p2.x;
	}
	if(swap) {
		this.q = p1;
		this.p = p2;
	} else {
		this.p = p1;
		this.q = p2;
	}
	this.q.get_edge_list().push(this);
};
$hxClasses["hxd.poly2tri.Edge"] = hxd_poly2tri_Edge;
hxd_poly2tri_Edge.__name__ = "hxd.poly2tri.Edge";
hxd_poly2tri_Edge.prototype = {
	toString: function() {
		return "Edge(" + Std.string(this.p) + ", " + Std.string(this.q) + ")";
	}
	,__class__: hxd_poly2tri_Edge
};
var hxd_poly2tri_Point = function(x,y) {
	this.x = x;
	this.y = y;
	this.id = hxd_poly2tri_Point.C_ID;
	hxd_poly2tri_Point.C_ID++;
};
$hxClasses["hxd.poly2tri.Point"] = hxd_poly2tri_Point;
hxd_poly2tri_Point.__name__ = "hxd.poly2tri.Point";
hxd_poly2tri_Point.sortPoints = function(points) {
	points.sort(hxd_poly2tri_Point.cmpPoints);
};
hxd_poly2tri_Point.cmpPoints = function(l,r) {
	var ret = l.y - r.y;
	if(ret == 0) {
		ret = l.x - r.x;
	}
	if(ret < 0) {
		return -1;
	}
	if(ret > 0) {
		return 1;
	}
	return 0;
};
hxd_poly2tri_Point.prototype = {
	get_edge_list: function() {
		if(this.edge_list == null) {
			this.edge_list = [];
		}
		return this.edge_list;
	}
	,equals: function(that) {
		if(this.x == that.x) {
			return this.y == that.y;
		} else {
			return false;
		}
	}
	,toString: function() {
		return "Point(" + this.x + ", " + this.y + ")";
	}
	,__class__: hxd_poly2tri_Point
};
var hxd_res__$Any_SingleFileSystem = function(path,bytes) {
	hxd_fs_BytesFileSystem.call(this);
	this.path = path;
	this.bytes = bytes;
};
$hxClasses["hxd.res._Any.SingleFileSystem"] = hxd_res__$Any_SingleFileSystem;
hxd_res__$Any_SingleFileSystem.__name__ = "hxd.res._Any.SingleFileSystem";
hxd_res__$Any_SingleFileSystem.__super__ = hxd_fs_BytesFileSystem;
hxd_res__$Any_SingleFileSystem.prototype = $extend(hxd_fs_BytesFileSystem.prototype,{
	getBytes: function(p) {
		if(p == this.path) {
			return this.bytes;
		} else {
			return null;
		}
	}
	,__class__: hxd_res__$Any_SingleFileSystem
});
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
$hxClasses["hxd.res.Resource"] = hxd_res_Resource;
hxd_res_Resource.__name__ = "hxd.res.Resource";
hxd_res_Resource.prototype = {
	get_name: function() {
		return this.entry.name;
	}
	,toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
};
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.Any"] = hxd_res_Any;
hxd_res_Any.__name__ = "hxd.res.Any";
hxd_res_Any.fromBytes = function(path,bytes) {
	var fs = new hxd_res__$Any_SingleFileSystem(path,bytes);
	return new hxd_res_Loader(fs).load(path);
};
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	toModel: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Model);
	}
	,toTexture: function() {
		return this.toImage().toTexture();
	}
	,toTile: function() {
		return this.toImage().toTile();
	}
	,toText: function() {
		return this.entry.getText();
	}
	,toImage: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Image);
	}
	,toSound: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Sound);
	}
	,toPrefab: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Resource);
	}
	,to: function(c) {
		return this.loader.loadCache(this.entry.get_path(),c);
	}
	,iterator: function() {
		var _g = [];
		var _g1 = this.entry.iterator();
		while(_g1.i < _g1.l) {
			var f = _g1.a[_g1.i++];
			_g.push(new hxd_res_Any(this.loader,f));
		}
		return new hxd_impl_ArrayIterator_$hxd_$res_$Any(_g);
	}
	,__class__: hxd_res_Any
});
var hxd_res_BitmapFont = function(entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = hxd_res_Loader.currentInstance;
};
$hxClasses["hxd.res.BitmapFont"] = hxd_res_BitmapFont;
hxd_res_BitmapFont.__name__ = "hxd.res.BitmapFont";
hxd_res_BitmapFont.__super__ = hxd_res_Resource;
hxd_res_BitmapFont.prototype = $extend(hxd_res_Resource.prototype,{
	toFont: function() {
		if(this.font == null) {
			this.font = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveTile));
		}
		return this.font;
	}
	,toSdfFont: function(size,channel,alphaCutoff,smoothing) {
		if(smoothing == null) {
			smoothing = -1;
		}
		if(alphaCutoff == null) {
			alphaCutoff = 0.5;
		}
		if(channel == null) {
			channel = 0;
		}
		if(this.sdfFonts == null) {
			this.sdfFonts = [];
		}
		if(size == null) {
			size = this.toFont().size;
		}
		var _g = 0;
		var _g1 = this.sdfFonts;
		while(_g < _g1.length) {
			var font = _g1[_g];
			++_g;
			var _g2 = font.type;
			if(_g2._hx_index == 1) {
				var fchannel = _g2.channel;
				var falphaCutoff = _g2.alphaCutoff;
				var fsmoothing = _g2.smoothing;
				if(font.size == size && fchannel == channel && falphaCutoff == alphaCutoff && fsmoothing == smoothing) {
					return font;
				}
			}
		}
		var font = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveSdfTile));
		font.type = h2d_FontType.SignedDistanceField(channel,alphaCutoff,smoothing);
		font.resizeTo(size);
		this.sdfFonts.push(font);
		return font;
	}
	,resolveSdfTile: function(path) {
		var tex = this.loader.load(path).toTexture();
		tex.set_filter(h3d_mat_Filter.Linear);
		return h2d_Tile.fromTexture(tex);
	}
	,resolveTile: function(path) {
		return this.loader.load(path).toTile();
	}
	,__class__: hxd_res_BitmapFont
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(o.__params__) {
				s = s + "\t";
				var params = o.__params__();
				var _g = 0;
				var _g1 = params.length;
				while(true) {
					if(!(_g < _g1)) {
						break;
					}
					var i = (function($this) {
						var $r;
						_g = _g + 1;
						$r = _g - 1;
						return $r;
					}(this));
					params[i] = js_Boot.__string_rec(params[i],s);
				}
				return (n == null ? "null" : "" + n) + "(" + params.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxd_res_Embed = function() { };
$hxClasses["hxd.res.Embed"] = hxd_res_Embed;
hxd_res_Embed.__name__ = "hxd.res.Embed";
var hxd_res_ImageFormat = {};
hxd_res_ImageFormat.get_useLoadBitmap = function(this1) {
	return this1 == 0;
};
hxd_res_ImageFormat.toInt = function(this1) {
	return this1;
};
hxd_res_ImageFormat.getName = function(this1) {
	switch(this1) {
	case 0:
		return "JPG";
	case 1:
		return "PNG";
	case 2:
		return "GIF";
	case 3:
		return "TGA";
	case 4:
		return "DDS";
	case 5:
		return "RAW";
	case 6:
		return "HDR";
	}
};
var hxd_res_ImageInfoFlag = $hxEnums["hxd.res.ImageInfoFlag"] = { __ename__:"hxd.res.ImageInfoFlag",__constructs__:null
	,IsCube: {_hx_name:"IsCube",_hx_index:0,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
	,Dxt10Header: {_hx_name:"Dxt10Header",_hx_index:1,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
};
hxd_res_ImageInfoFlag.__constructs__ = [hxd_res_ImageInfoFlag.IsCube,hxd_res_ImageInfoFlag.Dxt10Header];
hxd_res_ImageInfoFlag.__empty_constructs__ = [hxd_res_ImageInfoFlag.IsCube,hxd_res_ImageInfoFlag.Dxt10Header];
var hxd_res_ImageInfo = function() {
	this.layerCount = 1;
	this.mipOffset = 0;
	this.mipLevels = 1;
	this.height = 0;
	this.width = 0;
	this.flags = 0;
};
$hxClasses["hxd.res.ImageInfo"] = hxd_res_ImageInfo;
hxd_res_ImageInfo.__name__ = "hxd.res.ImageInfo";
hxd_res_ImageInfo.prototype = {
	__class__: hxd_res_ImageInfo
};
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Image"] = hxd_res_Image;
hxd_res_Image.__name__ = "hxd.res.Image";
hxd_res_Image.customCheckInfo = function(i) {
};
hxd_res_Image.setupTextureFlags = function(tex) {
};
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	getFormat: function() {
		return this.getInfo().dataFormat;
	}
	,getPixelFormat: function() {
		return this.getInfo().pixelFormat;
	}
	,getSize: function() {
		return this.getInfo();
	}
	,getInfo: function() {
		if(this.inf != null) {
			return this.inf;
		}
		this.inf = new hxd_res_ImageInfo();
		var f = this.entry.open();
		f.fetch(256);
		var head;
		try {
			head = f.readUInt16();
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				head = 0;
			} else {
				throw _g;
			}
		}
		switch(head) {
		case 16163:
			this.inf.dataFormat = 6;
			while(f.readLine() != "") {
			}
			var parts = f.readLine().split(" ");
			this.inf.pixelFormat = hxd_PixelFormat.RGBA32F;
			this.inf.height = Std.parseInt(parts[1]);
			this.inf.width = Std.parseInt(parts[3]);
			break;
		case 17476:
			this.inf.dataFormat = 4;
			f.skip(10);
			this.inf.height = f.readInt32();
			this.inf.width = f.readInt32();
			f.skip(8);
			this.inf.mipLevels = f.readInt32();
			f.skip(48);
			var caps = f.readInt32();
			var fourCC = f.readInt32();
			var bpp = f.readInt32();
			var rMask = f.readInt32();
			var gMask = f.readInt32();
			var bMask = f.readInt32();
			var aMask = f.readInt32();
			var caps2 = f.readInt32();
			var cubes = f.readInt32();
			if((cubes & 65024) == 65024) {
				this.inf.flags |= 1 << hxd_res_ImageInfoFlag.IsCube._hx_index;
			}
			switch(fourCC & 16777215) {
			case 0:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					switch(bpp) {
					case 16:
						if(rMask == 65535) {
							if(gMask == 0) {
								if(bMask == 0) {
									if(aMask == 0) {
										this.inf.pixelFormat = hxd_PixelFormat.R16U;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
						} else {
							throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
						}
						break;
					case 32:
						switch(rMask) {
						case 255:
							if(gMask == 65280) {
								if(bMask == 16711680) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd_PixelFormat.RGBA;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						case 65535:
							if(gMask == -65536) {
								if(bMask == 0) {
									if(aMask == 0) {
										this.inf.pixelFormat = hxd_PixelFormat.RG16U;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						case 16711680:
							if(gMask == 65280) {
								if(bMask == 255) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd_PixelFormat.BGRA;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						default:
							throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
						}
						break;
					default:
						throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
					}
				}
				break;
			case 36:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA16U;
				}
				break;
			case 111:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.R16F;
				}
				break;
			case 112:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RG16F;
				}
				break;
			case 113:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA16F;
				}
				break;
			case 114:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.R32F;
				}
				break;
			case 115:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RG32F;
				}
				break;
			case 116:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA32F;
				}
				break;
			case 4805697:
				var v = (fourCC >>> 24) - 48;
				var tmp;
				switch(v) {
				case 1:
					tmp = hxd_PixelFormat.S3TC(4);
					break;
				case 2:
					tmp = hxd_PixelFormat.S3TC(5);
					break;
				default:
					tmp = null;
				}
				this.inf.pixelFormat = tmp;
				break;
			case 5527620:
				var dxt = (fourCC >>> 24) - 48;
				var tmp;
				switch(dxt) {
				case 1:
					tmp = hxd_PixelFormat.S3TC(1);
					break;
				case 2:case 3:
					tmp = hxd_PixelFormat.S3TC(2);
					break;
				case 4:case 5:
					tmp = hxd_PixelFormat.S3TC(3);
					break;
				default:
					tmp = null;
				}
				this.inf.pixelFormat = tmp;
				break;
			default:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				}
			}
			if(this.inf.pixelFormat == null) {
				var fid = String.fromCodePoint((fourCC & 255)) + String.fromCodePoint((fourCC >> 8 & 255)) + String.fromCodePoint((fourCC >> 16 & 255)) + String.fromCodePoint((fourCC >>> 24));
				if((fourCC & 255) == fourCC) {
					fid = "" + fourCC;
				}
				throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported 4CC " + fid);
			}
			break;
		case 18759:
			this.inf.dataFormat = 2;
			this.inf.pixelFormat = hxd_PixelFormat.BGRA;
			f.readInt32();
			this.inf.width = f.readUInt16();
			this.inf.height = f.readUInt16();
			break;
		case 20617:
			this.inf.dataFormat = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					this.inf.width = f.readInt32();
					this.inf.height = f.readInt32();
					var colbits = f.readByte();
					var colType = f.readByte();
					var tmp;
					switch(colbits) {
					case 8:
						tmp = hxd_PixelFormat.BGRA;
						break;
					case 16:
						switch(colType) {
						case 0:
							tmp = hxd_PixelFormat.R16U;
							break;
						case 2:
							tmp = hxd_PixelFormat.RGBA16U;
							break;
						case 4:
							tmp = hxd_PixelFormat.RG16U;
							break;
						case 6:
							tmp = hxd_PixelFormat.RGBA16U;
							break;
						default:
							throw haxe_Exception.thrown("Unsupported png format " + colbits + "/" + colType + "(" + this.entry.get_path() + ")");
						}
						break;
					default:
						throw haxe_Exception.thrown("Unsupported png format " + colbits + "/" + colType + "(" + this.entry.get_path() + ")");
					}
					this.inf.pixelFormat = tmp;
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			this.inf.dataFormat = 0;
			this.inf.pixelFormat = hxd_PixelFormat.BGRA;
			f.set_bigEndian(true);
			_hx_loop3: while(true) switch(f.readUInt16()) {
			case 65472:case 65473:case 65474:
				var len = f.readUInt16();
				var prec = f.readByte();
				this.inf.height = f.readUInt16();
				this.inf.width = f.readUInt16();
				break _hx_loop3;
			default:
				f.skip(f.readUInt16() - 2);
			}
			break;
		default:
			if(this.entry.get_extension() == "tga") {
				this.inf.dataFormat = 3;
				this.inf.pixelFormat = hxd_PixelFormat.ARGB;
				f.skip(10);
				this.inf.width = f.readUInt16();
				this.inf.height = f.readUInt16();
			} else if(this.entry.get_extension() == "raw") {
				this.inf.dataFormat = 5;
				this.inf.pixelFormat = hxd_PixelFormat.R32F;
				var size = Math.sqrt(this.entry.get_size() >> 2) | 0;
				if(this.entry.get_size() != size * size * 4) {
					var size2 = Math.sqrt(this.entry.get_size() >> 1) | 0;
					if(this.entry.get_size() == size2 * size2 * 2) {
						this.inf.pixelFormat = hxd_PixelFormat.R16F;
						size = size2;
					} else {
						throw haxe_Exception.thrown("RAW format does not match 32 bit per components on " + size + "x" + size);
					}
				}
				this.inf.width = this.inf.height = size;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + this.entry.get_path());
			}
		}
		f.close();
		if(this.inf.pixelFormat == null) {
			throw haxe_Exception.thrown("Unsupported internal format (" + this.entry.get_path() + ")");
		}
		if(hxd_res_Image.MIPMAP_MAX_SIZE != 0 && this.inf.mipLevels > 1) {
			while(((this.inf.width | this.inf.height) & 7) == 0 && this.inf.width >> 1 >= hxd_res_Image.MIPMAP_MAX_SIZE && this.inf.height >> 1 >= hxd_res_Image.MIPMAP_MAX_SIZE) {
				this.inf.width >>= 1;
				this.inf.height >>= 1;
				this.inf.mipLevels--;
				this.inf.mipOffset++;
			}
		}
		hxd_res_Image.customCheckInfo(this);
		return this.inf;
	}
	,getPixels: function(fmt,index) {
		var pixels;
		if(index == null) {
			index = 0;
		}
		switch(this.getInfo().dataFormat) {
		case 0:
			var bytes = this.entry.getBytes();
			if(this.inf.pixelFormat != hxd_PixelFormat.BGRA) {
				throw haxe_Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes = this.entry.getBytes();
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,this.inf.pixelFormat);
			var pdata = png.read();
			switch(this.inf.pixelFormat._hx_index) {
			case 1:
				format_png_Tools.extract32(pdata,pixels.bytes,false);
				break;
			case 18:case 19:case 20:case 21:
				var pixels1 = pixels.bytes;
				var tmp;
				if(this.inf.pixelFormat == hxd_PixelFormat.RGBA16U) {
					var _g = format_png_Tools.getHeader(pdata).color;
					tmp = _g._hx_index == 1 && _g.alpha == false;
				} else {
					tmp = false;
				}
				format_png_Tools.extract(pdata,pixels1,tmp);
				break;
			default:
				throw haxe_Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			break;
		case 2:
			var bytes = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes)).read();
			if(fmt == hxd_PixelFormat.RGBA) {
				pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullRGBA(gif,0),hxd_PixelFormat.RGBA);
			} else {
				pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			}
			break;
		case 3:
			var bytes = this.entry.getBytes();
			var r = new format_tga_Reader(new haxe_io_BytesInput(bytes)).read();
			if(r.header.imageType != format_tga_ImageType.UncompressedTrueColor || r.header.bitsPerPixel != 32) {
				throw haxe_Exception.thrown("Not supported TGA " + Std.string(r.header.imageType) + "/" + r.header.bitsPerPixel);
			}
			var w = r.header.width;
			var h = r.header.height;
			if(fmt == hxd_PixelFormat.RGBA) {
				pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.RGBA);
				var bytes = pixels.bytes;
				var _g = 0;
				var _g1 = w * h;
				while(_g < _g1) {
					var i = _g++;
					var c = r.imageData[i];
					c = c >>> 24 | c << 8;
					bytes.setInt32(i << 2,c);
				}
			} else {
				pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.ARGB);
				var access = hxd_PixelsARGB.fromPixels(pixels);
				var p = 0;
				var _g = 0;
				var _g1 = h;
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g3 = w;
					while(_g2 < _g3) {
						var x = _g2++;
						var c = r.imageData[p++];
						access.bytes.setInt32((x + y * access.width << 2) + access.offset,c >>> 24 | c >> 8 & 65280 | c << 8 & 16711680 | c << 24);
					}
				}
			}
			switch(r.header.imageOrigin._hx_index) {
			case 0:
				pixels.flipY();
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("Not supported " + Std.string(r.header.imageOrigin));
			}
			break;
		case 4:
			var pos = 128;
			var mipLevel = 0;
			if((this.inf.flags & 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index) != 0) {
				pos += 20;
			}
			index += this.inf.mipOffset;
			if(index > 0) {
				var totLevels = this.inf.mipLevels + this.inf.mipOffset;
				var bpp = hxd_Pixels.calcStride(1,this.inf.pixelFormat);
				var layer = index / totLevels | 0;
				mipLevel = index % totLevels;
				var totSize = 0;
				var _g = 0;
				var _g1 = totLevels;
				while(_g < _g1) {
					var i = _g++;
					var w = this.inf.width << this.inf.mipOffset >> i;
					var h = this.inf.height << this.inf.mipOffset >> i;
					if(w == 0) {
						w = 1;
					}
					if(h == 0) {
						h = 1;
					}
					var size = hxd_Pixels.calcDataSize(w,h,this.inf.pixelFormat);
					totSize += size;
					if(i < mipLevel) {
						pos += size;
					} else if(layer == 0) {
						break;
					}
				}
				pos += totSize * layer;
			}
			var bytes;
			var w = this.inf.width >> mipLevel - this.inf.mipOffset;
			var h = this.inf.height >> mipLevel - this.inf.mipOffset;
			if(w == 0) {
				w = 1;
			}
			if(h == 0) {
				h = 1;
			}
			if(this.inf.mipLevels + this.inf.mipOffset == 1 && (this.inf.flags & 1 << hxd_res_ImageInfoFlag.IsCube._hx_index) == 0) {
				bytes = this.entry.getBytes();
			} else {
				var size = hxd_Pixels.calcDataSize(w,h,this.inf.pixelFormat);
				bytes = new haxe_io_Bytes(new ArrayBuffer(size));
				this.entry.readFull(bytes,pos,size);
				pos = 0;
			}
			pixels = new hxd_Pixels(w,h,bytes,this.inf.pixelFormat,pos);
			break;
		case 5:
			var bytes = this.entry.getBytes();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,bytes,this.inf.pixelFormat);
			break;
		case 6:
			var data = hxd_fmt_hdr_Reader.decode(this.entry.getBytes(),false);
			pixels = new hxd_Pixels(data.width,data.height,data.bytes,this.inf.pixelFormat);
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		return pixels;
	}
	,toBitmap: function() {
		this.getInfo();
		var bmp = new hxd_BitmapData(this.inf.width,this.inf.height);
		var pixels = this.getPixels();
		bmp.setPixels(pixels);
		pixels.dispose();
		return bmp;
	}
	,watchCallb: function() {
		var w = this.inf.width;
		var h = this.inf.height;
		this.inf = null;
		var s = this.getInfo();
		if(w != s.width || h != s.height) {
			this.tex.resize(s.width,s.height);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,asyncLoad: function(data) {
		var tmp;
		if(this.tex != null) {
			var _this = this.tex;
			tmp = _this.isDepth() ? _this.t == null : _this.t == null && _this.realloc == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			return;
		}
		this.tex.dispose();
		this.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading._hx_index);
		this.tex.format = this.inf.pixelFormat;
		this.tex.width = this.inf.width;
		this.tex.height = this.inf.height;
		this.loadTexture(data);
	}
	,loadTexture: function(asyncData) {
		var _gthis = this;
		if(this.getInfo().dataFormat == 0) {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs_LoadedBitmap.toBitmap(bmp);
				_gthis.tex.alloc();
				_gthis.tex.uploadBitmap(bmp1);
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = function() {
					_gthis.loadTexture();
				};
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading._hx_index);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			});
			return;
		}
		var load = function() {
			if((_gthis.enableAsyncLoading || (_gthis.tex.flags & 1 << h3d_mat_TextureFlags.AsyncLoading._hx_index) != 0) && asyncData == null && hxd_res_Image.ASYNC_LOADER.isSupported(_gthis)) {
				_gthis.tex.dispose();
				_gthis.tex.format = hxd_PixelFormat.RGBA;
				_gthis.tex.width = 1;
				_gthis.tex.height = 1;
				_gthis.tex.customMipLevels = 1;
				_gthis.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
				_gthis.tex.alloc();
				_gthis.tex.uploadPixels(hxd_res_Image.BLACK_1x1);
				_gthis.tex.width = _gthis.inf.width;
				_gthis.tex.height = _gthis.inf.height;
				hxd_res_Image.ASYNC_LOADER.load(_gthis);
				_gthis.tex.realloc = function() {
					_gthis.loadTexture();
				};
				return;
			}
			var t0 = HxOverrides.now() / 1000;
			_gthis.tex.customMipLevels = _gthis.inf.mipLevels;
			_gthis.tex.alloc();
			if(_gthis.inf.dataFormat == 4) {
				var pos = 128;
				if((_gthis.inf.flags & 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index) != 0) {
					pos += 20;
				}
				var _g = 0;
				var _g1 = _gthis.tex.get_layerCount();
				while(_g < _g1) {
					var layer = _g++;
					var _g2 = 0;
					var _g3 = _gthis.inf.mipOffset;
					while(_g2 < _g3) {
						var mip = _g2++;
						var w = _gthis.inf.width << _gthis.inf.mipOffset >> mip;
						var h = _gthis.inf.height << _gthis.inf.mipOffset >> mip;
						var size = hxd_Pixels.calcDataSize(w,h,_gthis.inf.pixelFormat);
						pos += size;
					}
					var _g4 = 0;
					var _g5 = _gthis.inf.mipLevels;
					while(_g4 < _g5) {
						var mip1 = _g4++;
						var w1 = _gthis.inf.width >> mip1;
						var h1 = _gthis.inf.height >> mip1;
						if(w1 == 0) {
							w1 = 1;
						}
						if(h1 == 0) {
							h1 = 1;
						}
						var size1 = hxd_Pixels.calcDataSize(w1,h1,_gthis.inf.pixelFormat);
						var bytes = asyncData == null ? _gthis.entry.fetchBytes(pos,size1) : asyncData;
						_gthis.tex.uploadPixels(new hxd_Pixels(w1,h1,bytes,_gthis.inf.pixelFormat,asyncData == null ? 0 : pos),mip1,layer);
						pos += size1;
					}
				}
			} else {
				var _g = 0;
				var _g1 = _gthis.tex.get_layerCount();
				while(_g < _g1) {
					var layer = _g++;
					var _g2 = 0;
					var _g3 = _gthis.inf.mipLevels;
					while(_g2 < _g3) {
						var mip = _g2++;
						var pixels = _gthis.getPixels(_gthis.tex.format,layer * _gthis.inf.mipLevels + mip);
						_gthis.tex.uploadPixels(pixels,mip,layer);
						pixels.dispose();
					}
				}
			}
			if(hxd_res_Image.LOG_TEXTURE_LOAD && asyncData == null) {
				var time = (HxOverrides.now() / 1000 - t0) * 1000.0;
				var fmtStr = _gthis.inf.pixelFormat._hx_index == 22 ? "DXT" : hxd_res_ImageFormat.getName(_gthis.inf.dataFormat);
				haxe_Log.trace(fmtStr + " " + (time | 0) + "." + (time * 10 | 0) % 10 + "ms " + _gthis.inf.width + "x" + _gthis.inf.height + " " + _gthis.entry.get_path(),{ fileName : "hxd/res/Image.hx", lineNumber : 597, className : "hxd.res.Image", methodName : "loadTexture"});
			}
			_gthis.tex.realloc = function() {
				_gthis.loadTexture();
			};
			if(hxd_res_Image.ENABLE_AUTO_WATCH) {
				_gthis.watch($bind(_gthis,_gthis.watchCallb));
			}
		};
		if(this.entry.get_isAvailable()) {
			load();
		} else {
			this.entry.load(load);
		}
	}
	,toTexture: function() {
		var _gthis = this;
		if(this.tex != null) {
			return this.tex;
		}
		this.getInfo();
		var flags = [h3d_mat_TextureFlags.NoAlloc];
		var fmt = this.inf.pixelFormat;
		if(fmt == hxd_PixelFormat.BGRA || fmt == hxd_PixelFormat.ARGB || fmt == hxd_PixelFormat.RGBA) {
			fmt = h3d_mat_Texture.nativeFormat;
		}
		if((this.inf.flags & 1 << hxd_res_ImageInfoFlag.IsCube._hx_index) != 0) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		if(this.inf.mipLevels > 1) {
			flags.push(h3d_mat_TextureFlags.MipMapped);
			flags.push(h3d_mat_TextureFlags.ManualMipMapGen);
		}
		if(this.inf.layerCount > 1) {
			this.tex = new h3d_mat_TextureArray(this.inf.width,this.inf.height,this.inf.layerCount,flags,fmt);
		} else {
			this.tex = new h3d_mat_Texture(this.inf.width,this.inf.height,flags,fmt);
		}
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		hxd_res_Image.setupTextureFlags(this.tex);
		if((this.tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 || (this.tex.flags & 1 << h3d_mat_TextureFlags.LazyLoading._hx_index) == 0) {
			this.loadTexture();
		} else {
			this.tex.realloc = function() {
				_gthis.loadTexture();
			};
		}
		return this.tex;
	}
	,toTile: function() {
		this.getInfo();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,this.inf.width,this.inf.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["hxd.res.Loader"] = hxd_res_Loader;
hxd_res_Loader.__name__ = "hxd.res.Loader";
hxd_res_Loader.prototype = {
	cleanCache: function() {
		this.cache = new haxe_ds_StringMap();
	}
	,dir: function(path) {
		var r = [];
		var entries = this.fs.dir(path);
		var _g = 0;
		while(_g < entries.length) {
			var e = entries[_g];
			++_g;
			r.push(new hxd_res_Any(this,e));
		}
		return r;
	}
	,exists: function(path) {
		return this.fs.exists(path);
	}
	,load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadCache: function(path,c) {
		var res = this.cache.h[path];
		if(res == null) {
			var entry = this.fs.get(path);
			var old = hxd_res_Loader.currentInstance;
			hxd_res_Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd_res_Loader.currentInstance = old;
			this.cache.h[path] = res;
		} else if((js_Boot.__downcastCheck(res,c) ? res : null) == null) {
			throw haxe_Exception.thrown(path + " has been reintrepreted from " + Std.string(js_Boot.getClass(res)) + " to " + Std.string(c));
		}
		return res;
	}
	,dispose: function() {
		this.cleanCache();
		this.fs.dispose();
	}
	,__class__: hxd_res_Loader
};
var hxd_res_Model = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Model"] = hxd_res_Model;
hxd_res_Model.__name__ = "hxd.res.Model";
hxd_res_Model.__super__ = hxd_res_Resource;
hxd_res_Model.prototype = $extend(hxd_res_Resource.prototype,{
	toHmd: function() {
		var fs = this.entry.open();
		var hmd = new hxd_fmt_hmd_Reader(fs).readHeader();
		fs.close();
		return new hxd_fmt_hmd_Library(this,hmd);
	}
	,__class__: hxd_res_Model
});
var hxd_res_Filter = $hxEnums["hxd.res.Filter"] = { __ename__:"hxd.res.Filter",__constructs__:null
	,Fast: {_hx_name:"Fast",_hx_index:0,__enum__:"hxd.res.Filter",toString:$estr}
	,Chromatic: {_hx_name:"Chromatic",_hx_index:1,__enum__:"hxd.res.Filter",toString:$estr}
};
hxd_res_Filter.__constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_FastBytes = {};
hxd_res__$NanoJpeg_FastBytes._new = function(b) {
	return b;
};
hxd_res__$NanoJpeg_FastBytes.get = function(this1,i) {
	return this1.b[i];
};
hxd_res__$NanoJpeg_FastBytes.set = function(this1,i,v) {
	this1.b[i] = v;
};
var hxd_res__$NanoJpeg_Component = function() {
};
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd_res__$NanoJpeg_Component;
hxd_res__$NanoJpeg_Component.__name__ = "hxd.res._NanoJpeg.Component";
hxd_res__$NanoJpeg_Component.prototype = {
	__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	this.qtab = [new Array(64),new Array(64),new Array(64),new Array(64)].slice(0);
	this.counts = new Array(16);
	this.block = new Array(64);
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
$hxClasses["hxd.res.NanoJpeg"] = hxd_res_NanoJpeg;
hxd_res_NanoJpeg.__name__ = "hxd.res.NanoJpeg";
hxd_res_NanoJpeg.CF = function(x) {
	var x1 = x + 64 >> 7;
	if(x1 < 0) {
		return 0;
	} else if(x1 > 255) {
		return 255;
	} else {
		return x1;
	}
};
hxd_res_NanoJpeg.njClip = function(x) {
	if(x < 0) {
		return 0;
	} else if(x > 255) {
		return 255;
	} else {
		return x;
	}
};
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	alloc: function(nbytes) {
		return new haxe_io_Bytes(new ArrayBuffer(nbytes));
	}
	,free: function(bytes) {
	}
	,njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		if(this.vlctab[0] == null) {
			this.vlctab[0] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[1] == null) {
			this.vlctab[1] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[2] == null) {
			this.vlctab[2] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[3] == null) {
			this.vlctab[3] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		this.comps[0].dcpred = 0;
		this.comps[1].dcpred = 0;
		this.comps[2].dcpred = 0;
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				c.pixels = null;
			}
		}
		if(this.vlctab[0] != null) {
			this.vlctab[0] = null;
		}
		if(this.vlctab[1] != null) {
			this.vlctab[1] = null;
		}
		if(this.vlctab[2] != null) {
			this.vlctab[2] = null;
		}
		if(this.vlctab[3] != null) {
			this.vlctab[3] = null;
		}
		if(this.vlctab[4] != null) {
			this.vlctab[4] = null;
		}
		if(this.vlctab[5] != null) {
			this.vlctab[5] = null;
		}
		if(this.vlctab[6] != null) {
			this.vlctab[6] = null;
		}
		if(this.vlctab[7] != null) {
			this.vlctab[7] = null;
		}
	}
	,njSkip: function(count) {
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,syntax: function(flag) {
		if(flag) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,get: function(p) {
		return this.bytes.b[this.pos + p];
	}
	,njDecode16: function(p) {
		return this.bytes.b[this.pos + p] << 8 | this.bytes.b[this.pos + (p + 1)];
	}
	,njByteAlign: function() {
		this.bufbits &= 248;
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				if(this.size == 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					if((marker & 248) != 208) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njSkipBits: function(bits) {
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
	}
	,njGetBits: function(bits) {
		var r = this.njShowBits(bits);
		this.bufbits -= bits;
		return r;
	}
	,njDecodeLength: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njSkipMarker: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeSOF: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.length < 9) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		switch(this.ncomp) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		if(this.length < this.ncomp * 3) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		var ssxmax = 0;
		var ssymax = 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if(c.ssx == 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if(c.ssy == 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			if((c.qtsel & 252) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c.ssx = c.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.width = (this.width * c.ssx + ssxmax - 1) / ssxmax | 0;
			c.stride = c.width + 7 & 2147483640;
			c.height = (this.height * c.ssy + ssymax - 1) / ssymax | 0;
			c.stride = this.mbwidth * this.mbsizex * c.ssx / ssxmax | 0;
			if(c.width < 3 && c.ssx != ssxmax || c.height < 3 && c.ssy != ssymax) {
				this.notSupported();
			}
			c.pixels = new haxe_io_Bytes(new ArrayBuffer(c.stride * (this.mbheight * this.mbsizey * c.ssy / ssymax | 0)));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeDQT: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			if((i & 252) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
		}
		if(this.length != 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeDHT: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			if((i & 236) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			i = i >> 4 & 1 | (i & 3) << 1;
			this.counts[0] = this.bytes.b[this.pos + 1];
			this.counts[1] = this.bytes.b[this.pos + 2];
			this.counts[2] = this.bytes.b[this.pos + 3];
			this.counts[3] = this.bytes.b[this.pos + 4];
			this.counts[4] = this.bytes.b[this.pos + 5];
			this.counts[5] = this.bytes.b[this.pos + 6];
			this.counts[6] = this.bytes.b[this.pos + 7];
			this.counts[7] = this.bytes.b[this.pos + 8];
			this.counts[8] = this.bytes.b[this.pos + 9];
			this.counts[9] = this.bytes.b[this.pos + 10];
			this.counts[10] = this.bytes.b[this.pos + 11];
			this.counts[11] = this.bytes.b[this.pos + 12];
			this.counts[12] = this.bytes.b[this.pos + 13];
			this.counts[13] = this.bytes.b[this.pos + 14];
			this.counts[14] = this.bytes.b[this.pos + 15];
			this.counts[15] = this.bytes.b[this.pos + 16];
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g = 1;
			while(_g < 17) {
				var codelen = _g++;
				spread >>= 1;
				var currcnt = this.counts[codelen - 1];
				if(currcnt == 0) {
					continue;
				}
				if(this.length < currcnt) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				remain -= currcnt << 16 - codelen;
				if(remain < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				var _g1 = 0;
				var _g2 = currcnt;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var code = this.bytes.b[this.pos + i1];
					var _g3 = 0;
					var _g4 = spread;
					while(_g3 < _g4) {
						var j = _g3++;
						vlc.b[vpos++] = codelen;
						vlc.b[vpos++] = code;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
				if(this.size < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
		if(this.length != 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njDecodeDRI: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.length < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
	}
	,njGetVLC: function(vlc) {
		var value = this.njShowBits(16);
		var bits = vlc.b[value << 1];
		if(bits == 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value = vlc.b[value << 1 | 1];
		this.vlcCode = value;
		bits = value & 15;
		if(bits == 0) {
			return 0;
		}
		var r = this.njShowBits(bits);
		this.bufbits -= bits;
		value = r;
		if(value < 1 << bits - 1) {
			value += (-1 << bits) + 1;
		}
		return value;
	}
	,njRowIDCT: function(bp) {
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
			return;
		}
		var x0 = (this.block[bp] << 11) + 128;
		var x8 = 565 * (x4 + x5);
		x4 = x8 + 2276 * x4;
		x5 = x8 - 3406 * x5;
		x8 = 2408 * (x6 + x7);
		x6 = x8 - 799 * x6;
		x7 = x8 - 4017 * x7;
		x8 = x0 + x1;
		x0 -= x1;
		x1 = 1108 * (x3 + x2);
		x2 = x1 - 3784 * x2;
		x3 = x1 + 1568 * x3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = 181 * (x4 + x5) + 128 >> 8;
		x4 = 181 * (x4 - x5) + 128 >> 8;
		this.block[bp] = x7 + x1 >> 8;
		this.block[bp + 1] = x3 + x2 >> 8;
		this.block[bp + 2] = x0 + x4 >> 8;
		this.block[bp + 3] = x8 + x6 >> 8;
		this.block[bp + 4] = x8 - x6 >> 8;
		this.block[bp + 5] = x0 - x4 >> 8;
		this.block[bp + 6] = x3 - x2 >> 8;
		this.block[bp + 7] = x7 - x1 >> 8;
	}
	,njColIDCT: function(bp,out,po,stride) {
		var x1 = this.block[bp + 32] << 8;
		var x2 = this.block[bp + 48];
		var x3 = this.block[bp + 16];
		var x4 = this.block[bp + 8];
		var x5 = this.block[bp + 56];
		var x6 = this.block[bp + 40];
		var x7 = this.block[bp + 24];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[bp] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			out.b[po] = x1;
			po += stride;
			return;
		}
		var x0 = (this.block[bp] << 8) + 8192;
		var x8 = 565 * (x4 + x5) + 4;
		x4 = x8 + 2276 * x4 >> 3;
		x5 = x8 - 3406 * x5 >> 3;
		x8 = 2408 * (x6 + x7) + 4;
		x6 = x8 - 799 * x6 >> 3;
		x7 = x8 - 4017 * x7 >> 3;
		x8 = x0 + x1;
		x0 -= x1;
		x1 = 1108 * (x3 + x2) + 4;
		x2 = x1 - 3784 * x2 >> 3;
		x3 = x1 + 1568 * x3 >> 3;
		x1 = x4 + x6;
		x4 -= x6;
		x6 = x5 + x7;
		x5 -= x7;
		x7 = x8 + x3;
		x8 -= x3;
		x3 = x0 + x2;
		x0 -= x2;
		x2 = 181 * (x4 + x5) + 128 >> 8;
		x4 = 181 * (x4 - x5) + 128 >> 8;
		var x = (x7 + x1 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x3 + x2 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x0 + x4 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x8 + x6 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x8 - x6 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x0 - x4 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x3 - x2 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
		po += stride;
		var x = (x7 - x1 >> 14) + 128;
		out.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
	}
	,njDecodeBlock: function(c,po) {
		var out = c.pixels;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(bits == 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		do {
			var value1 = this.njShowBits(16);
			var bits = at.b[value1 << 1];
			if(bits == 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if(this.bufbits < bits) {
				this.njShowBits(bits);
			}
			this.bufbits -= bits;
			value1 = at.b[value1 << 1 | 1];
			this.vlcCode = value1;
			bits = value1 & 15;
			if(bits == 0) {
				value = 0;
			} else {
				var r = this.njShowBits(bits);
				this.bufbits -= bits;
				value1 = r;
				if(value1 < 1 << bits - 1) {
					value1 += (-1 << bits) + 1;
				}
				value = value1;
			}
			if(this.vlcCode == 0) {
				break;
			}
			if((this.vlcCode & 15) == 0 && this.vlcCode != 240) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			coef += (this.vlcCode >> 4) + 1;
			if(coef > 63) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.block[this.njZZ[coef]] = value * qt[coef];
		} while(coef < 63);
		var bp = 0;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 8;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 16;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 24;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 32;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 40;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 48;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 56;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var po1 = po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[32] << 8;
		var x2 = this.block[48];
		var x3 = this.block[16];
		var x4 = this.block[8];
		var x5 = this.block[56];
		var x6 = this.block[40];
		var x7 = this.block[24];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[0] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[0] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 1 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[33] << 8;
		var x2 = this.block[49];
		var x3 = this.block[17];
		var x4 = this.block[9];
		var x5 = this.block[57];
		var x6 = this.block[41];
		var x7 = this.block[25];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[1] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[1] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 2 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[34] << 8;
		var x2 = this.block[50];
		var x3 = this.block[18];
		var x4 = this.block[10];
		var x5 = this.block[58];
		var x6 = this.block[42];
		var x7 = this.block[26];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[2] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[2] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 3 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[35] << 8;
		var x2 = this.block[51];
		var x3 = this.block[19];
		var x4 = this.block[11];
		var x5 = this.block[59];
		var x6 = this.block[43];
		var x7 = this.block[27];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[3] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[3] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 4 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[36] << 8;
		var x2 = this.block[52];
		var x3 = this.block[20];
		var x4 = this.block[12];
		var x5 = this.block[60];
		var x6 = this.block[44];
		var x7 = this.block[28];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[4] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[4] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 5 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[37] << 8;
		var x2 = this.block[53];
		var x3 = this.block[21];
		var x4 = this.block[13];
		var x5 = this.block[61];
		var x6 = this.block[45];
		var x7 = this.block[29];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[5] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[5] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 6 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[38] << 8;
		var x2 = this.block[54];
		var x3 = this.block[22];
		var x4 = this.block[14];
		var x5 = this.block[62];
		var x6 = this.block[46];
		var x7 = this.block[30];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[6] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[6] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 7 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[39] << 8;
		var x2 = this.block[55];
		var x3 = this.block[23];
		var x4 = this.block[15];
		var x5 = this.block[63];
		var x6 = this.block[47];
		var x7 = this.block[31];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[7] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[7] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
	}
	,notSupported: function() {
		throw haxe_Exception.thrown("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		if(this.size < 2) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		if(this.length > this.size) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.length < 4 + 2 * this.ncomp) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			if(this.bytes.b[this.pos] != c.cid) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			if((this.bytes.b[this.pos + 1] & 236) != 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g = 0;
			var _g1 = this.ncomp;
			while(_g < _g1) {
				var i = _g++;
				var c = this.comps[i];
				var _g2 = 0;
				var _g3 = c.ssy;
				while(_g2 < _g3) {
					var sby = _g2++;
					var _g4 = 0;
					var _g5 = c.ssx;
					while(_g4 < _g5) {
						var sbx = _g4++;
						this.njDecodeBlock(c,(mby * c.ssy + sby) * c.stride + mbx * c.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i1 = r;
				if((i1 & 65528) != 65488 || (i1 & 7) != nextrst) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				this.comps[0].dcpred = 0;
				this.comps[1].dcpred = 0;
				this.comps[2].dcpred = 0;
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var lout = cout;
		var lin = c.pixels;
		var pi = 0;
		var po = 0;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			var _g2 = 0;
			var _g3 = xmax;
			while(_g2 < _g3) {
				var x3 = _g2++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.width <<= 1;
		c.stride = c.width;
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var pi = 0;
		var po = 0;
		var cout = out;
		var cin = c.pixels;
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			var x = _g++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po += w;
			pi += s1;
			var _g2 = 0;
			var _g3 = c.height - 2;
			while(_g2 < _g3) {
				var y = _g2++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.height <<= 1;
		c.stride = c.width;
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height));
		var lin = c.pixels;
		var pout = 0;
		var lout = out;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var pin = (y >> yshift) * c.stride;
			var _g2 = 0;
			var _g3 = c.width;
			while(_g2 < _g3) {
				var x = _g2++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin];
			}
		}
		c.stride = c.width;
		c.pixels = out;
	}
	,njConvert: function() {
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			switch(this.filter._hx_index) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw haxe_Exception.thrown("assert");
			}
		}
		var pixels = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
		if(this.ncomp == 3) {
			var py = this.comps[0].pixels;
			var pcb = this.comps[1].pixels;
			var pcr = this.comps[2].pixels;
			var pix = pixels;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var yy = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b;
					pix.b[out++] = g;
					pix.b[out++] = r;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw haxe_Exception.thrown("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw haxe_Exception.thrown("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.size < 0) {
			throw haxe_Exception.thrown("Invalid JPEG file");
		}
		_hx_loop1: while(true) {
			if(this.size < 2 || this.bytes.b[this.pos] != 255) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			if(this.size < 0) {
				throw haxe_Exception.thrown("Invalid JPEG file");
			}
			switch(this.bytes.b[this.pos + (-1)]) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw haxe_Exception.thrown("Unsupported progressive JPG");
				}
				if(this.vlctab[4] == null) {
					this.vlctab[4] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[5] == null) {
					this.vlctab[5] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[6] == null) {
					this.vlctab[6] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[7] == null) {
					this.vlctab[7] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw haxe_Exception.thrown("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				if(this.size < 2) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				if(this.length > this.size) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				if(this.size < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				var count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				if(this.size < 0) {
					throw haxe_Exception.thrown("Invalid JPEG file");
				}
				break;
			default:
				switch(this.bytes.b[this.pos + (-1)] & 240) {
				case 192:
					throw haxe_Exception.thrown("Unsupported jpeg type " + (this.bytes.b[this.pos + (-1)] & 15));
				case 224:
					if(this.size < 2) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					if(this.length > this.size) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					if(this.size < 0) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					var count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					if(this.size < 0) {
						throw haxe_Exception.thrown("Invalid JPEG file");
					}
					break;
				default:
					throw haxe_Exception.thrown("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + (-1)],2));
				}
			}
		}
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxd_res_SoundFormat = $hxEnums["hxd.res.SoundFormat"] = { __ename__:"hxd.res.SoundFormat",__constructs__:null
	,Wav: {_hx_name:"Wav",_hx_index:0,__enum__:"hxd.res.SoundFormat",toString:$estr}
	,Mp3: {_hx_name:"Mp3",_hx_index:1,__enum__:"hxd.res.SoundFormat",toString:$estr}
	,OggVorbis: {_hx_name:"OggVorbis",_hx_index:2,__enum__:"hxd.res.SoundFormat",toString:$estr}
};
hxd_res_SoundFormat.__constructs__ = [hxd_res_SoundFormat.Wav,hxd_res_SoundFormat.Mp3,hxd_res_SoundFormat.OggVorbis];
hxd_res_SoundFormat.__empty_constructs__ = [hxd_res_SoundFormat.Wav,hxd_res_SoundFormat.Mp3,hxd_res_SoundFormat.OggVorbis];
var hxd_res_Sound = function(entry) {
	this.lastPlay = 0.;
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Sound"] = hxd_res_Sound;
hxd_res_Sound.__name__ = "hxd.res.Sound";
hxd_res_Sound.supportedFormat = function(fmt) {
	switch(fmt._hx_index) {
	case 0:case 1:
		return true;
	case 2:
		return false;
	}
};
hxd_res_Sound.startWorker = function() {
	return false;
};
hxd_res_Sound.__super__ = hxd_res_Resource;
hxd_res_Sound.prototype = $extend(hxd_res_Resource.prototype,{
	getData: function() {
		if(this.data != null) {
			return this.data;
		}
		var bytes = this.entry.getBytes();
		switch(bytes.b[0]) {
		case 73:case 255:
			this.data = new hxd_snd_Mp3Data(bytes);
			break;
		case 79:
			throw haxe_Exception.thrown("OGG format requires -lib stb_ogg_sound (for " + this.entry.get_path() + ")");
		case 82:
			this.data = new hxd_snd_WavData(bytes);
			break;
		default:
		}
		if(this.data == null) {
			throw haxe_Exception.thrown("Unsupported sound format " + this.entry.get_path());
		}
		if(hxd_res_Sound.ENABLE_AUTO_WATCH) {
			this.watch($bind(this,this.watchCallb));
		}
		return this.data;
	}
	,dispose: function() {
		this.stop();
		this.data = null;
	}
	,stop: function() {
		if(this.channel != null) {
			this.channel.stop();
			this.channel = null;
		}
	}
	,play: function(loop,volume,channelGroup,soundGroup) {
		if(volume == null) {
			volume = 1.;
		}
		if(loop == null) {
			loop = false;
		}
		this.lastPlay = HxOverrides.now() / 1000;
		this.channel = hxd_snd_Manager.get().play(this,channelGroup,soundGroup);
		this.channel.loop = loop;
		this.channel.set_volume(volume);
		return this.channel;
	}
	,watchCallb: function() {
		var old = this.data;
		this.data = null;
		var data = this.getData();
		if(old != null) {
			if(old.channels != data.channels || old.samples != data.samples || old.sampleFormat != data.sampleFormat || old.samplingRate != data.samplingRate) {
				var manager = hxd_snd_Manager.get();
				var ch = manager.getAll(this);
				while(ch.hasNext()) {
					var ch1 = ch.next();
					ch1.duration = data.get_duration();
					ch1.set_position(ch1.position);
				}
			}
		}
	}
	,__class__: hxd_res_Sound
});
var hxd_snd_ChannelBase = function() {
	this.volume = 1.;
	this.bindedEffects = [];
	this.effects = [];
	this.mute = false;
	this.priority = 0.;
};
$hxClasses["hxd.snd.ChannelBase"] = hxd_snd_ChannelBase;
hxd_snd_ChannelBase.__name__ = "hxd.snd.ChannelBase";
hxd_snd_ChannelBase.prototype = {
	getEffect: function(etype) {
		if(this.effects == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var e1 = js_Boot.__downcastCheck(e,etype) ? e : null;
			if(e1 != null) {
				return e1;
			}
		}
		return null;
	}
	,set_volume: function(v) {
		this.currentFade = null;
		return this.volume = v;
	}
	,fadeTo: function(volume,time,onEnd) {
		if(time == null) {
			time = 1.;
		}
		this.currentFade = { start : HxOverrides.now() / 1000, duration : time, startVolume : this.volume, targetVolume : volume, onEnd : onEnd};
	}
	,updateCurrentVolume: function(now) {
		if(this.currentFade != null) {
			var f = this.currentFade;
			var dt = now - f.start;
			if(dt >= f.duration) {
				this.set_volume(f.targetVolume);
				if(f.onEnd != null) {
					f.onEnd();
				}
			} else {
				this.set_volume(f.startVolume + dt / f.duration * (f.targetVolume - f.startVolume));
				this.currentFade = f;
			}
		}
		this.currentVolume = this.volume;
	}
	,addEffect: function(e) {
		if(e == null) {
			throw haxe_Exception.thrown("Can't add null effect");
		}
		if(this.effects.indexOf(e) >= 0) {
			throw haxe_Exception.thrown("effect already added on this channel");
		}
		this.effects.push(e);
		return e;
	}
	,removeEffect: function(e) {
		HxOverrides.remove(this.effects,e);
	}
	,__class__: hxd_snd_ChannelBase
};
var hxd_snd_Channel = function() {
	this.queue = [];
	this.positionChanged = false;
	this.isLoading = false;
	this.isVirtual = false;
	this.lastStamp = 0.0;
	this.audibleVolume = 1.0;
	this.allowVirtual = true;
	this.loop = false;
	this.pause = false;
	this.position = 0.0;
	hxd_snd_ChannelBase.call(this);
	this.id = hxd_snd_Channel.ID++;
};
$hxClasses["hxd.snd.Channel"] = hxd_snd_Channel;
hxd_snd_Channel.__name__ = "hxd.snd.Channel";
hxd_snd_Channel.__super__ = hxd_snd_ChannelBase;
hxd_snd_Channel.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	onEnd: function() {
	}
	,set_position: function(v) {
		this.lastStamp = HxOverrides.now() / 1000;
		this.positionChanged = true;
		if(v > this.duration) {
			v = this.duration;
		} else if(v < 0) {
			v = 0;
		}
		return this.position = v;
	}
	,set_pause: function(v) {
		if(!v) {
			this.lastStamp = HxOverrides.now() / 1000;
		}
		return this.pause = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.pause && this.currentFade != null) {
			var f = this.currentFade;
			this.currentFade = null;
			this.updateCurrentVolume(now);
			this.currentFade = f;
		}
		hxd_snd_ChannelBase.prototype.updateCurrentVolume.call(this,now);
		this.channelGroup.updateCurrentVolume(now);
		this.currentVolume *= this.channelGroup.currentVolume * this.soundGroup.volume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
		}
	}
	,calcAudibleVolume: function(now) {
		this.updateCurrentVolume(now);
		this.audibleVolume = this.currentVolume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
		}
	}
	,queueSound: function(sound) {
		this.queue.push(sound);
	}
	,stop: function() {
		if(this.manager != null) {
			this.manager.releaseChannel(this);
		}
	}
	,isReleased: function() {
		return this.manager == null;
	}
	,__class__: hxd_snd_Channel
});
var hxd_snd_ChannelGroup = function(name) {
	hxd_snd_ChannelBase.call(this);
	this.name = name;
};
$hxClasses["hxd.snd.ChannelGroup"] = hxd_snd_ChannelGroup;
hxd_snd_ChannelGroup.__name__ = "hxd.snd.ChannelGroup";
hxd_snd_ChannelGroup.__super__ = hxd_snd_ChannelBase;
hxd_snd_ChannelGroup.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	__class__: hxd_snd_ChannelGroup
});
var hxd_snd_SampleFormat = $hxEnums["hxd.snd.SampleFormat"] = { __ename__:"hxd.snd.SampleFormat",__constructs__:null
	,UI8: {_hx_name:"UI8",_hx_index:0,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,I16: {_hx_name:"I16",_hx_index:1,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,F32: {_hx_name:"F32",_hx_index:2,__enum__:"hxd.snd.SampleFormat",toString:$estr}
};
hxd_snd_SampleFormat.__constructs__ = [hxd_snd_SampleFormat.UI8,hxd_snd_SampleFormat.I16,hxd_snd_SampleFormat.F32];
hxd_snd_SampleFormat.__empty_constructs__ = [hxd_snd_SampleFormat.UI8,hxd_snd_SampleFormat.I16,hxd_snd_SampleFormat.F32];
var hxd_snd_Data = function() { };
$hxClasses["hxd.snd.Data"] = hxd_snd_Data;
hxd_snd_Data.__name__ = "hxd.snd.Data";
hxd_snd_Data.formatBytes = function(format) {
	switch(format._hx_index) {
	case 0:
		return 1;
	case 1:
		return 2;
	case 2:
		return 4;
	}
};
hxd_snd_Data.prototype = {
	isLoading: function() {
		return false;
	}
	,decode: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		if(sampleStart < 0 || sampleCount < 0 || outPos < 0 || outPos + sampleCount * bpp > out.length) {
			var s = "sampleStart = " + sampleStart;
			s += " sampleCount = " + sampleCount;
			s += " outPos = " + outPos;
			s += " bpp = " + bpp;
			s += " out.length = " + out.length;
			throw haxe_Exception.thrown(s);
		}
		if(sampleStart + sampleCount >= this.samples) {
			var count = 0;
			if(sampleStart < this.samples) {
				count = this.samples - sampleStart;
				this.decodeBuffer(out,outPos,sampleStart,count);
			}
			out.fill(outPos + count * bpp,(sampleCount - count) * bpp,0);
			return;
		}
		this.decodeBuffer(out,outPos,sampleStart,sampleCount);
	}
	,resample: function(rate,format,channels) {
		if(this.sampleFormat == format && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		var newSamples = Math.ceil(this.samples * (rate / this.samplingRate));
		var bpp = this.getBytesPerSample();
		var data = new haxe_io_Bytes(new ArrayBuffer(bpp * this.samples));
		this.decodeBuffer(data,0,0,this.samples);
		var out = channels * newSamples;
		var out1;
		switch(format._hx_index) {
		case 0:
			out1 = 1;
			break;
		case 1:
			out1 = 2;
			break;
		case 2:
			out1 = 4;
			break;
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(out * out1));
		this.resampleBuffer(out2,0,data,0,rate,format,channels,this.samples);
		var data = new hxd_snd_WavData(null);
		data.channels = channels;
		data.samples = newSamples;
		data.sampleFormat = format;
		data.samplingRate = rate;
		data.rawData = out2;
		return data;
	}
	,resampleBuffer: function(out,outPos,input,inPos,rate,format,channels,samples) {
		var bpp = this.getBytesPerSample();
		var newSamples = Math.ceil(samples * (rate / this.samplingRate));
		var resample = samples != newSamples;
		if(!resample && this.sampleFormat == hxd_snd_SampleFormat.I16 && format == hxd_snd_SampleFormat.I16 && channels == 1 && this.channels == 2) {
			var r = inPos;
			var w = outPos;
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				var sl = input.getUInt16(r);
				r += 2;
				var sr = input.getUInt16(r);
				r += 2;
				var s;
				if((sl ^ sr) >= 32768) {
					if((sl & 32768) != 0) {
						sl |= -65536;
					}
					if((sr & 32768) != 0) {
						sr |= -65536;
					}
					s = sl + sr >> 1 & 65535;
				} else {
					s = sl + sr >> 1;
				}
				out.setUInt16(w,s);
				w += 2;
			}
			return;
		}
		var srcChannels = this.channels;
		var commonChannels = channels < srcChannels ? channels : srcChannels;
		var extraChannels = channels - commonChannels;
		var sval = 0.;
		var ival = 0;
		var _g = 0;
		var _g1 = newSamples;
		while(_g < _g1) {
			var i = _g++;
			var targetSample = i / (newSamples - 1) * (samples - 1);
			var isample = targetSample | 0;
			var offset = targetSample - isample;
			var srcPos = inPos + isample * bpp;
			if(isample == samples - 1) {
				resample = false;
			}
			var _g2 = 0;
			var _g3 = commonChannels;
			while(_g2 < _g3) {
				var k = _g2++;
				var sval1;
				var sval2 = 0.;
				switch(this.sampleFormat._hx_index) {
				case 0:
					sval1 = input.b[srcPos] / 255;
					if(resample) {
						sval2 = input.b[srcPos + bpp] / 255;
					}
					++srcPos;
					break;
				case 1:
					var v = input.getUInt16(srcPos);
					sval1 = ((v & 32768) == 0 ? v : v | -65536) / 32768;
					if(resample) {
						var v1 = input.getUInt16(srcPos + bpp);
						sval2 = ((v1 & 32768) == 0 ? v1 : v1 | -65536) / 32768;
					}
					srcPos += 2;
					break;
				case 2:
					sval1 = input.getFloat(srcPos);
					if(resample) {
						sval2 = input.getFloat(srcPos + bpp);
					}
					srcPos += 4;
					break;
				}
				sval = resample ? sval1 + offset * (sval2 - sval1) : sval1;
				switch(format._hx_index) {
				case 0:
					ival = (sval + 1) * 128 | 0;
					if(ival > 255) {
						ival = 255;
					}
					out.b[outPos++] = ival;
					break;
				case 1:
					ival = sval * 32768 | 0;
					if(ival > 32767) {
						ival = 32767;
					}
					ival &= 65535;
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
			var _g4 = 0;
			var _g5 = extraChannels;
			while(_g4 < _g5) {
				var i1 = _g4++;
				switch(format._hx_index) {
				case 0:
					out.b[outPos++] = ival;
					break;
				case 1:
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,getBytesPerSample: function() {
		var tmp;
		switch(this.sampleFormat._hx_index) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 4;
			break;
		}
		return this.channels * tmp;
	}
	,load: function(onEnd) {
		onEnd();
	}
	,get_duration: function() {
		return this.samples / this.samplingRate;
	}
	,__class__: hxd_snd_Data
};
var hxd_snd_EffectDriver = function() {
};
$hxClasses["hxd.snd.EffectDriver"] = hxd_snd_EffectDriver;
hxd_snd_EffectDriver.__name__ = "hxd.snd.EffectDriver";
hxd_snd_EffectDriver.prototype = {
	acquire: function() {
	}
	,release: function() {
	}
	,update: function(e) {
	}
	,bind: function(e,source) {
	}
	,apply: function(e,source) {
	}
	,unbind: function(e,source) {
	}
	,__class__: hxd_snd_EffectDriver
};
var hxd_snd_DriverFeature = $hxEnums["hxd.snd.DriverFeature"] = { __ename__:"hxd.snd.DriverFeature",__constructs__:null
	,MasterVolume: {_hx_name:"MasterVolume",_hx_index:0,__enum__:"hxd.snd.DriverFeature",toString:$estr}
};
hxd_snd_DriverFeature.__constructs__ = [hxd_snd_DriverFeature.MasterVolume];
hxd_snd_DriverFeature.__empty_constructs__ = [hxd_snd_DriverFeature.MasterVolume];
var hxd_snd_Driver = function() { };
$hxClasses["hxd.snd.Driver"] = hxd_snd_Driver;
hxd_snd_Driver.__name__ = "hxd.snd.Driver";
hxd_snd_Driver.__isInterface__ = true;
hxd_snd_Driver.prototype = {
	__class__: hxd_snd_Driver
};
var hxd_snd_Effect = function(type) {
	this.refs = 0;
	this.priority = 0;
	this.retainTime = 0.0;
	this.lastStamp = 0.0;
	var managerDriver = hxd_snd_Manager.get().driver;
	if(managerDriver != null) {
		this.driver = managerDriver.getEffectDriver(type);
	}
};
$hxClasses["hxd.snd.Effect"] = hxd_snd_Effect;
hxd_snd_Effect.__name__ = "hxd.snd.Effect";
hxd_snd_Effect.prototype = {
	applyAudibleVolumeModifier: function(v) {
		return v;
	}
	,getVolumeModifier: function() {
		return 1;
	}
	,__class__: hxd_snd_Effect
};
var hxd_snd_Listener = function() {
	this.position = new h3d_VectorImpl(0.,0.,0.);
	this.velocity = new h3d_VectorImpl(0.,0.,0.);
	var x = 1;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.direction = new h3d_VectorImpl(x,y,z);
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.up = new h3d_VectorImpl(x,y,z);
};
$hxClasses["hxd.snd.Listener"] = hxd_snd_Listener;
hxd_snd_Listener.__name__ = "hxd.snd.Listener";
hxd_snd_Listener.prototype = {
	syncCamera: function(cam) {
		var _this = this.position;
		var v = cam.pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this = this.direction;
		var x = cam.target.x - cam.pos.x;
		var y = cam.target.y - cam.pos.y;
		var z = cam.target.z - cam.pos.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.direction;
		var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		var _this = this.up;
		var v = cam.up;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
	}
	,__class__: hxd_snd_Listener
};
var hxd_snd_Source = function(driver) {
	this.start = 0;
	this.playing = false;
	this.volume = -1.0;
	this.id = hxd_snd_Source.ID++;
	this.handle = driver.createSource();
	this.buffers = [];
};
$hxClasses["hxd.snd.Source"] = hxd_snd_Source;
hxd_snd_Source.__name__ = "hxd.snd.Source";
hxd_snd_Source.prototype = {
	dispose: function() {
		hxd_snd_Manager.get().driver.destroySource(this.handle);
	}
	,__class__: hxd_snd_Source
};
var hxd_snd_Buffer = function(driver) {
	this.end = 0;
	this.handle = driver.createBuffer();
	this.refs = 0;
	this.lastStop = HxOverrides.now() / 1000;
};
$hxClasses["hxd.snd.Buffer"] = hxd_snd_Buffer;
hxd_snd_Buffer.__name__ = "hxd.snd.Buffer";
hxd_snd_Buffer.prototype = {
	dispose: function() {
		hxd_snd_Manager.get().driver.destroyBuffer(this.handle);
	}
	,__class__: hxd_snd_Buffer
};
var hxd_snd_Manager = function() {
	this.suspended = false;
	this.timeOffset = 0.;
	try {
		this.driver = new hxd_snd_webaudio_Driver();
	} catch( _g ) {
		if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
			this.driver = null;
		} else {
			throw _g;
		}
	}
	this.masterVolume = 1.0;
	this.hasMasterVolume = this.driver == null ? true : this.driver.hasFeature(hxd_snd_DriverFeature.MasterVolume);
	this.masterSoundGroup = new hxd_snd_SoundGroup("master");
	this.masterChannelGroup = new hxd_snd_ChannelGroup("master");
	this.listener = new hxd_snd_Listener();
	this.soundBufferMap = new haxe_ds_StringMap();
	this.soundBufferKeys = [];
	this.freeStreamBuffers = [];
	this.effectGC = [];
	this.soundBufferCount = 0;
	if(this.driver != null) {
		this.sources = [];
		var _g = 0;
		var _g1 = hxd_snd_Manager.MAX_SOURCES;
		while(_g < _g1) {
			var i = _g++;
			this.sources.push(new hxd_snd_Source(this.driver));
		}
	}
	this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(24));
	this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * 2));
};
$hxClasses["hxd.snd.Manager"] = hxd_snd_Manager;
hxd_snd_Manager.__name__ = "hxd.snd.Manager";
hxd_snd_Manager.get = function() {
	if(hxd_snd_Manager.instance == null) {
		hxd_snd_Manager.instance = new hxd_snd_Manager();
		hxd_snd_Manager.instance.updateEvent = haxe_MainLoop.add(($_=hxd_snd_Manager.instance,$bind($_,$_.update)));
		hxd_snd_Manager.instance.updateEvent.isBlocking = false;
	}
	return hxd_snd_Manager.instance;
};
hxd_snd_Manager.regEffect = function(list,e) {
	var l = list;
	while(l != null) {
		if(l == e) {
			return list;
		}
		l = l.next;
	}
	e.next = list;
	return e;
};
hxd_snd_Manager.prototype = {
	getTmpBytes: function(size) {
		if(this.cachedBytes.length < size) {
			this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.cachedBytes;
	}
	,getResampleBytes: function(size) {
		if(this.resampleBytes.length < size) {
			this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.resampleBytes;
	}
	,stopAll: function() {
		while(this.channels != null) this.channels.stop();
	}
	,stopAllNotLooping: function() {
		var c = this.channels;
		while(c != null) {
			var n = c.next;
			if(!c.loop) {
				c.stop();
			}
			c = n;
		}
	}
	,stopByName: function(name) {
		var c = this.channels;
		while(c != null) {
			var n = c.next;
			if(c.soundGroup != null && c.soundGroup.name == name) {
				c.stop();
			}
			c = n;
		}
	}
	,getAll: function(sound) {
		var ch = this.channels;
		var result = [];
		while(ch != null) {
			if(ch.sound == sound) {
				result.push(ch);
			}
			ch = ch.next;
		}
		return new hxd_impl_ArrayIterator_$hxd_$snd_$Channel(result);
	}
	,cleanCache: function() {
		var i = 0;
		while(i < this.soundBufferKeys.length) {
			var k = this.soundBufferKeys[i];
			var b = this.soundBufferMap.h[k];
			++i;
			if(b.refs > 0) {
				continue;
			}
			var _this = this.soundBufferMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,k)) {
				delete(_this.h[k]);
			}
			HxOverrides.remove(this.soundBufferKeys,k);
			--i;
			b.dispose();
			--this.soundBufferCount;
		}
	}
	,dispose: function() {
		this.stopAll();
		if(this.driver != null) {
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				s.dispose();
			}
			var h = this.soundBufferMap.h;
			var b_h = h;
			var b_keys = Object.keys(h);
			var b_length = b_keys.length;
			var b_current = 0;
			while(b_current < b_length) {
				var b = b_h[b_keys[b_current++]];
				b.dispose();
			}
			var _g = 0;
			var _g1 = this.freeStreamBuffers;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				b.dispose();
			}
			var _g = 0;
			var _g1 = this.effectGC;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				e.driver.release();
			}
			this.driver.dispose();
		}
		this.sources = null;
		this.soundBufferMap = null;
		this.soundBufferKeys = null;
		this.freeStreamBuffers = null;
		this.effectGC = null;
		this.updateEvent.stop();
		hxd_snd_Manager.instance = null;
	}
	,play: function(sound,channelGroup,soundGroup) {
		if(soundGroup == null) {
			soundGroup = this.masterSoundGroup;
		}
		if(channelGroup == null) {
			channelGroup = this.masterChannelGroup;
		}
		var sdat = sound.getData();
		if(sdat.samples == 0) {
			throw haxe_Exception.thrown(Std.string(sound) + " has no samples");
		}
		var c = new hxd_snd_Channel();
		c.sound = sound;
		c.duration = sdat.get_duration();
		c.manager = this;
		c.soundGroup = soundGroup;
		c.channelGroup = channelGroup;
		c.next = this.channels;
		c.isLoading = sdat.isLoading();
		c.isVirtual = this.driver == null;
		c.lastStamp = HxOverrides.now() / 1000;
		this.channels = c;
		return c;
	}
	,updateVirtualChannels: function(now) {
		var c = this.channels;
		while(c != null) {
			if(c.pause || !c.isVirtual || c.isLoading) {
				c = c.next;
				continue;
			}
			var a = now - c.lastStamp;
			c.set_position(c.position + (a < 0.0 ? 0.0 : a));
			c.lastStamp = now;
			var next = c.next;
			while(c.position >= c.duration) {
				c.set_position(c.position - c.duration);
				c.onEnd();
				if(next != null && next.manager == null) {
					next = null;
				}
				if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
				} else if(!c.loop) {
					this.releaseChannel(c);
					break;
				}
			}
			c = next;
		}
	}
	,update: function() {
		if(this.timeOffset != 0) {
			var c = this.channels;
			while(c != null) {
				c.lastStamp += this.timeOffset;
				if(c.currentFade != null) {
					c.currentFade.start += this.timeOffset;
				}
				c = c.next;
			}
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = s.buffers;
				while(_g2 < _g3.length) {
					var b = _g3[_g2];
					++_g2;
					b.lastStop += this.timeOffset;
				}
			}
			this.timeOffset = 0;
		}
		this.now = HxOverrides.now() / 1000;
		if(this.driver == null) {
			this.updateVirtualChannels(this.now);
			return;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			if(c.positionChanged) {
				this.releaseSource(s);
				continue;
			}
			var lastBuffer = null;
			var count = this.driver.getProcessedBuffers(s.handle);
			var _g2 = 0;
			var _g3 = count;
			while(_g2 < _g3) {
				var i = _g2++;
				var b = this.unqueueBuffer(s);
				if(b == null) {
					continue;
				}
				lastBuffer = b;
				if(b.isEnd) {
					c.sound = b.sound;
					c.duration = b.sound.getData().get_duration();
					c.set_position(c.duration);
					c.positionChanged = false;
					c.onEnd();
					s.start = 0;
				}
			}
			if(s.buffers.length == 0) {
				if(!lastBuffer.isEnd) {
					c.set_position((lastBuffer.start + lastBuffer.samples) / lastBuffer.sampleRate);
					this.releaseSource(s);
				} else if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
					c.set_position(0);
					this.releaseSource(s);
				} else if(c.loop) {
					c.set_position(0);
					this.releaseSource(s);
				} else {
					this.releaseChannel(c);
				}
				continue;
			}
			c.sound = s.buffers[0].sound;
			c.duration = c.sound.getData().get_duration();
			var playedSamples = this.driver.getPlayedSampleCount(s.handle);
			if(playedSamples < 0) {
				haxe_Log.trace("playedSamples should positive : bug in driver",{ fileName : "hxd/snd/Manager.hx", lineNumber : 361, className : "hxd.snd.Manager", methodName : "update"});
				playedSamples = 0;
			}
			c.set_position(s.start / this.targetRate + playedSamples / s.buffers[0].sampleRate);
			c.positionChanged = false;
			if(s.buffers.length < hxd_snd_Manager.BUFFER_QUEUE_LENGTH) {
				var b1 = s.buffers[s.buffers.length - 1];
				if(!b1.isEnd) {
					this.queueBuffer(s,b1.sound,b1.start + b1.samples);
				} else if(c.queue.length > 0) {
					var snd = c.queue[0];
					if(this.queueBuffer(s,snd,0)) {
						c.queue.shift();
					}
				} else if(c.loop) {
					this.queueBuffer(s,b1.sound,0);
				}
			}
		}
		var c = this.channels;
		while(c != null) {
			c.calcAudibleVolume(this.now);
			if(c.isLoading && !c.sound.getData().isLoading()) {
				c.isLoading = false;
			}
			c.isVirtual = this.suspended || c.pause || c.mute || c.channelGroup.mute || c.allowVirtual && c.audibleVolume < hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD || c.isLoading;
			c = c.next;
		}
		var list = this.channels;
		var cmp = $bind(this,this.sortChannel);
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.channels = tmp;
		var audibleCount = 0;
		var c = this.channels;
		while(c != null && !c.isVirtual) {
			if(++audibleCount > this.sources.length) {
				c.isVirtual = true;
			} else if(c.soundGroup.maxAudible >= 0) {
				if(c.soundGroup.lastUpdate != this.now) {
					c.soundGroup.lastUpdate = this.now;
					c.soundGroup.numAudible = 0;
				}
				if(++c.soundGroup.numAudible > c.soundGroup.maxAudible) {
					c.isVirtual = true;
					--audibleCount;
				}
			}
			c = c.next;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.channel == null || !s.channel.isVirtual) {
				continue;
			}
			this.releaseSource(s);
		}
		var c = this.channels;
		while(c != null) {
			if(c.source != null || c.isVirtual) {
				c = c.next;
				continue;
			}
			var s = null;
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s2 = _g1[_g];
				++_g;
				if(s2.channel == null) {
					s = s2;
					break;
				}
			}
			if(s == null) {
				throw haxe_Exception.thrown("could not get a source");
			}
			s.channel = c;
			c.source = s;
			this.checkTargetFormat(c.sound.getData(),c.soundGroup.mono);
			s.start = Math.floor(c.position * this.targetRate);
			if(s.start < 0) {
				s.start = 0;
			}
			this.queueBuffer(s,c.sound,s.start);
			c.positionChanged = false;
			c = c.next;
		}
		var usedEffects = null;
		var volume = this.hasMasterVolume ? 1. : this.masterVolume;
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			var v = c.currentVolume * volume;
			if(s.volume != v) {
				if(v < 0) {
					v = 0;
				}
				s.volume = v;
				this.driver.setSourceVolume(s.handle,v);
			}
			if(!s.playing) {
				this.driver.playSource(s.handle);
				s.playing = true;
			}
			var i = c.bindedEffects.length;
			while(--i >= 0) {
				var e = c.bindedEffects[i];
				if(c.effects.indexOf(e) < 0 && c.channelGroup.effects.indexOf(e) < 0) {
					this.unbindEffect(c,s,e);
				}
			}
			var _g2 = 0;
			var _g3 = c.channelGroup.effects;
			while(_g2 < _g3.length) {
				var e1 = _g3[_g2];
				++_g2;
				if(c.bindedEffects.indexOf(e1) < 0) {
					this.bindEffect(c,s,e1);
				}
			}
			var _g4 = 0;
			var _g5 = c.effects;
			while(_g4 < _g5.length) {
				var e2 = _g5[_g4];
				++_g4;
				if(c.bindedEffects.indexOf(e2) < 0) {
					this.bindEffect(c,s,e2);
				}
			}
			var _g6 = 0;
			var _g7 = c.bindedEffects;
			while(_g6 < _g7.length) {
				var e3 = _g7[_g6];
				++_g6;
				usedEffects = hxd_snd_Manager.regEffect(usedEffects,e3);
			}
		}
		var list = usedEffects;
		var cmp = $bind(this,this.sortEffect);
		if(list == null) {
			usedEffects = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			usedEffects = list;
		}
		var e = usedEffects;
		while(e != null) {
			e.driver.update(e);
			e = e.next;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			var _g2 = 0;
			var _g3 = c.bindedEffects;
			while(_g2 < _g3.length) {
				var e = _g3[_g2];
				++_g2;
				e.driver.apply(e,s.handle);
			}
		}
		var _g = 0;
		var _g1 = this.effectGC;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(this.now - e.lastStamp > e.retainTime) {
				e.driver.release();
				HxOverrides.remove(this.effectGC,e);
				break;
			}
		}
		this.updateVirtualChannels(this.now);
		var _this = this.listener.direction;
		var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		var _this = this.listener.up;
		var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		if(this.hasMasterVolume) {
			this.driver.setMasterVolume(this.masterVolume);
		}
		this.driver.setListenerParams(this.listener.position,this.listener.direction,this.listener.up,this.listener.velocity);
		this.driver.update();
		if(this.soundBufferCount >= hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE) {
			var now = HxOverrides.now() / 1000;
			var i = 0;
			while(i < this.soundBufferKeys.length) {
				var k = this.soundBufferKeys[i];
				var b = this.soundBufferMap.h[k];
				++i;
				if(b.refs > 0 || b.lastStop + 60.0 > now) {
					continue;
				}
				var _this = this.soundBufferMap;
				if(Object.prototype.hasOwnProperty.call(_this.h,k)) {
					delete(_this.h[k]);
				}
				HxOverrides.remove(this.soundBufferKeys,k);
				--i;
				b.dispose();
				--this.soundBufferCount;
			}
		}
	}
	,progressiveDecodeBuffer: function(s,snd,start) {
		var data = snd.getData();
		var samples = Math.ceil(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT / hxd_snd_Manager.BUFFER_STREAM_SPLIT);
		if(s.streamStart != start || s.streamSound != snd) {
			s.streamSound = snd;
			s.streamStart = start;
			s.streamPos = start;
		}
		var end = start + hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(s.streamPos == end) {
			return true;
		}
		var bpp = data.getBytesPerSample();
		var reqSize = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * bpp;
		if(s.streamBuffer == null || s.streamBuffer.length < reqSize) {
			s.streamBuffer = new haxe_io_Bytes(new ArrayBuffer(reqSize));
			s.streamPos = start;
		}
		var remain = end - s.streamPos;
		if(remain > samples) {
			remain = samples;
		}
		data.decode(s.streamBuffer,(s.streamPos - start) * bpp,s.streamPos,remain);
		s.streamPos += remain;
		return s.streamPos == end;
	}
	,queueBuffer: function(s,snd,start) {
		var data = snd.getData();
		var sgroup = s.channel.soundGroup;
		var b = null;
		if(data.get_duration() <= hxd_snd_Manager.STREAM_DURATION) {
			b = this.getSoundBuffer(snd,sgroup);
			this.driver.queueBuffer(s.handle,b.handle,start,true);
		} else {
			if(s.buffers.length > 0 && hxd_snd_Manager.BUFFER_STREAM_SPLIT > 1 && !this.progressiveDecodeBuffer(s,snd,start)) {
				return false;
			}
			b = this.getStreamBuffer(s,snd,sgroup,start);
			this.driver.queueBuffer(s.handle,b.handle,0,b.isEnd);
		}
		s.buffers.push(b);
		return true;
	}
	,unqueueBuffer: function(s) {
		var b = s.buffers.shift();
		if(b == null) {
			return null;
		}
		this.driver.unqueueBuffer(s.handle,b.handle);
		if(b.isStream) {
			this.freeStreamBuffers.unshift(b);
		} else if(--b.refs == 0) {
			b.lastStop = HxOverrides.now() / 1000;
		}
		return b;
	}
	,bindEffect: function(c,s,e) {
		if(e.refs == 0 && !HxOverrides.remove(this.effectGC,e)) {
			e.driver.acquire();
		}
		++e.refs;
		e.driver.bind(e,s.handle);
		c.bindedEffects.push(e);
	}
	,unbindEffect: function(c,s,e) {
		e.driver.unbind(e,s.handle);
		HxOverrides.remove(c.bindedEffects,e);
		if(--e.refs == 0) {
			e.lastStamp = this.now;
			this.effectGC.push(e);
		}
	}
	,releaseSource: function(s) {
		if(s.channel != null) {
			var _g = 0;
			var _g1 = s.channel.bindedEffects.slice();
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.unbindEffect(s.channel,s,e);
			}
			s.channel.bindedEffects = [];
			s.channel.source = null;
			s.channel = null;
		}
		if(s.playing) {
			s.playing = false;
			this.driver.stopSource(s.handle);
			s.volume = -1.0;
		}
		while(s.buffers.length > 0) this.unqueueBuffer(s);
	}
	,checkTargetFormat: function(dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		this.targetRate = dat.samplingRate;
		this.targetChannels = forceMono || dat.channels == 1 ? 1 : 2;
		var tmp;
		switch(dat.sampleFormat._hx_index) {
		case 0:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 1:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		case 2:
			tmp = hxd_snd_SampleFormat.F32;
			break;
		}
		this.targetFormat = tmp;
		if(this.targetChannels == dat.channels && this.targetFormat == dat.sampleFormat) {
			return this.targetRate == dat.samplingRate;
		} else {
			return false;
		}
	}
	,getSoundBuffer: function(snd,grp) {
		var _gthis = this;
		var data = snd.getData();
		var mono = grp.mono;
		var key = snd.entry.get_path();
		if(mono && data.channels != 1) {
			key += "mono";
		}
		var b = this.soundBufferMap.h[key];
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = false;
			b.isEnd = true;
			b.sound = snd;
			data.load(function() {
				_gthis.fillSoundBuffer(b,data,mono);
			});
			this.soundBufferMap.h[key] = b;
			this.soundBufferKeys.push(key);
			++this.soundBufferCount;
		}
		++b.refs;
		return b;
	}
	,fillSoundBuffer: function(buf,dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		if(!this.checkTargetFormat(dat,forceMono)) {
			dat = dat.resample(this.targetRate,this.targetFormat,this.targetChannels);
		}
		var length = dat.samples * dat.getBytesPerSample();
		var bytes = this.getTmpBytes(length);
		dat.decode(bytes,0,0,dat.samples);
		this.driver.setBufferData(buf.handle,bytes,length,this.targetFormat,this.targetChannels,this.targetRate);
		buf.sampleRate = this.targetRate;
		buf.samples = dat.samples;
	}
	,getStreamBuffer: function(src,snd,grp,start) {
		var data = snd.getData();
		var b = this.freeStreamBuffers.shift();
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = true;
		}
		var samples = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(start + samples >= data.samples) {
			samples = data.samples - start;
			b.isEnd = true;
		} else {
			b.isEnd = false;
		}
		b.sound = snd;
		b.samples = samples;
		b.start = start;
		var size = samples * data.getBytesPerSample();
		var bytes;
		if(src.streamSound == snd && src.streamStart == start) {
			while(!this.progressiveDecodeBuffer(src,snd,start)) {
			}
			bytes = src.streamBuffer;
		} else {
			bytes = this.getTmpBytes(size);
			data.decode(bytes,0,start,samples);
		}
		if(!this.checkTargetFormat(data,grp.mono)) {
			var size1 = Math.ceil(samples * (this.targetRate / data.samplingRate)) * this.targetChannels;
			var size2;
			switch(this.targetFormat._hx_index) {
			case 0:
				size2 = 1;
				break;
			case 1:
				size2 = 2;
				break;
			case 2:
				size2 = 4;
				break;
			}
			size = size1 * size2;
			var resampleBytes = this.getResampleBytes(size);
			data.resampleBuffer(resampleBytes,0,bytes,0,this.targetRate,this.targetFormat,this.targetChannels,samples);
			bytes = resampleBytes;
		}
		this.driver.setBufferData(b.handle,bytes,size,this.targetFormat,this.targetChannels,this.targetRate);
		b.sampleRate = this.targetRate;
		return b;
	}
	,sortChannel: function(a,b) {
		if(a.isVirtual != b.isVirtual) {
			if(a.isVirtual) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.channelGroup.priority != b.channelGroup.priority) {
			if(a.channelGroup.priority < b.channelGroup.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.priority != b.priority) {
			if(a.priority < b.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.audibleVolume != b.audibleVolume) {
			if(a.audibleVolume < b.audibleVolume) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.id < b.id) {
			return 1;
		} else {
			return -1;
		}
	}
	,sortEffect: function(a,b) {
		return b.priority - a.priority;
	}
	,releaseChannel: function(c) {
		if(c.manager == null) {
			return;
		}
		if(this.channels == c) {
			this.channels = c.next;
		} else {
			var prev = this.channels;
			while(prev.next != c) prev = prev.next;
			prev.next = c.next;
		}
		var _g = 0;
		var _g1 = c.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			c.removeEffect(e);
		}
		if(c.source != null) {
			this.releaseSource(c.source);
		}
		c.next = null;
		c.manager = null;
		c.effects = null;
		c.bindedEffects = null;
		c.currentFade = null;
		var snd = c.sound;
		if(snd != null && snd.channel == c) {
			snd.channel = null;
		}
	}
	,__class__: hxd_snd_Manager
};
var hxd_snd_Mp3Data = function(bytes) {
	var mp = new format_mp3_Reader(new haxe_io_BytesInput(bytes)).read();
	this.samples = mp.sampleCount;
	var frame = mp.frames[0].data;
	var lame = -1;
	var _g = 0;
	var _g1 = frame.length - 24;
	while(_g < _g1) {
		var i = _g++;
		if(frame.b[i] == 76 && frame.b[i + 1] == 65 && frame.b[i + 2] == 77 && frame.b[i + 3] == 69) {
			lame = i;
			break;
		}
	}
	if(lame >= 0) {
		var startEnd = frame.b[lame + 21] << 16 | frame.b[lame + 22] << 8 | frame.b[lame + 23];
		var start = startEnd >> 12;
		var end = startEnd & 4095;
		this.samples -= start + end + 1152;
	}
	var header = mp.frames[0].header;
	this.sampleFormat = hxd_snd_SampleFormat.F32;
	this.samplingRate = format_mp3_MPEG.srEnum2Num(header.samplingRate);
	this.channels = header.channelMode == format_mp3_ChannelMode.Mono ? 1 : 2;
	var ctx = hxd_snd_webaudio_Context.get();
	if(ctx == null) {
		return;
	}
	ctx.decodeAudioData(bytes.b.bufferValue,$bind(this,this.processBuffer));
	var decodedRate = ctx.sampleRate | 0;
	this.samples = Math.ceil(this.samples * decodedRate / this.samplingRate);
	this.samplingRate = decodedRate;
};
$hxClasses["hxd.snd.Mp3Data"] = hxd_snd_Mp3Data;
hxd_snd_Mp3Data.__name__ = "hxd.snd.Mp3Data";
hxd_snd_Mp3Data.__super__ = hxd_snd_Data;
hxd_snd_Mp3Data.prototype = $extend(hxd_snd_Data.prototype,{
	isLoading: function() {
		return this.buffer == null;
	}
	,load: function(onEnd) {
		if(this.buffer != null) {
			onEnd();
		} else {
			this.onEnd = onEnd;
		}
	}
	,processBuffer: function(buf) {
		var left = buf.getChannelData(0);
		this.samples = buf.length;
		if(this.channels == 1) {
			this.buffer = haxe_io_Bytes.ofData(left.buffer);
			return;
		}
		var right = buf.numberOfChannels < 2 ? left : buf.getChannelData(1);
		var join = new Float32Array(left.length * 2);
		var w = 0;
		var _g = 0;
		var _g1 = buf.length;
		while(_g < _g1) {
			var i = _g++;
			join[w++] = left[i];
			join[w++] = right[i];
		}
		this.buffer = haxe_io_Bytes.ofData(join.buffer);
		if(this.onEnd != null) {
			this.onEnd();
			this.onEnd = null;
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		if(this.buffer == null) {
			out.fill(outPos,sampleCount * 4 * this.channels,0);
		} else {
			out.blit(outPos,this.buffer,sampleStart * 4 * this.channels,sampleCount * 4 * this.channels);
		}
	}
	,__class__: hxd_snd_Mp3Data
});
var hxd_snd_SoundGroup = function(name) {
	this.name = name;
	this.maxAudible = -1;
	this.volume = 1;
	this.mono = false;
};
$hxClasses["hxd.snd.SoundGroup"] = hxd_snd_SoundGroup;
hxd_snd_SoundGroup.__name__ = "hxd.snd.SoundGroup";
hxd_snd_SoundGroup.prototype = {
	__class__: hxd_snd_SoundGroup
};
var hxd_snd_WavData = function(bytes) {
	if(bytes != null) {
		this.init(new format_wav_Reader(new haxe_io_BytesInput(bytes)).read());
	}
};
$hxClasses["hxd.snd.WavData"] = hxd_snd_WavData;
hxd_snd_WavData.__name__ = "hxd.snd.WavData";
hxd_snd_WavData.__super__ = hxd_snd_Data;
hxd_snd_WavData.prototype = $extend(hxd_snd_Data.prototype,{
	init: function(d) {
		var h = d.header;
		this.samplingRate = h.samplingRate;
		this.channels = h.channels;
		var tmp;
		switch(h.bitsPerSample) {
		case 8:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 16:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported WAV " + h.bitsPerSample + " bits");
		}
		this.sampleFormat = tmp;
		this.rawData = d.data;
		this.samples = this.rawData.length / this.getBytesPerSample() | 0;
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		out.blit(outPos,this.rawData,sampleStart * bpp,sampleCount * bpp);
	}
	,__class__: hxd_snd_WavData
});
var hxd_snd_effect_LowPass = function() {
	hxd_snd_Effect.call(this,"lowpass");
	this.priority = 100;
	this.gainHF = 1.0;
};
$hxClasses["hxd.snd.effect.LowPass"] = hxd_snd_effect_LowPass;
hxd_snd_effect_LowPass.__name__ = "hxd.snd.effect.LowPass";
hxd_snd_effect_LowPass.__super__ = hxd_snd_Effect;
hxd_snd_effect_LowPass.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_LowPass
});
var hxd_snd_effect_Pitch = function(value) {
	if(value == null) {
		value = 1.0;
	}
	hxd_snd_Effect.call(this,"pitch");
	this.value = value;
};
$hxClasses["hxd.snd.effect.Pitch"] = hxd_snd_effect_Pitch;
hxd_snd_effect_Pitch.__name__ = "hxd.snd.effect.Pitch";
hxd_snd_effect_Pitch.__super__ = hxd_snd_Effect;
hxd_snd_effect_Pitch.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_Pitch
});
var hxd_snd_effect_Spatialization = function() {
	hxd_snd_Effect.call(this,"spatialization");
	this.position = new h3d_VectorImpl(0.,0.,0.);
	this.velocity = new h3d_VectorImpl(0.,0.,0.);
	this.direction = new h3d_VectorImpl(0.,0.,0.);
	this.referenceDistance = 1.0;
	this.rollOffFactor = 1.0;
};
$hxClasses["hxd.snd.effect.Spatialization"] = hxd_snd_effect_Spatialization;
hxd_snd_effect_Spatialization.__name__ = "hxd.snd.effect.Spatialization";
hxd_snd_effect_Spatialization.__super__ = hxd_snd_Effect;
hxd_snd_effect_Spatialization.prototype = $extend(hxd_snd_Effect.prototype,{
	getVolumeModifier: function() {
		if(this.fadeDistance == null) {
			return 1.;
		}
		var _this = hxd_snd_Manager.get().listener.position;
		var v = this.position;
		var dx = v.x - _this.x;
		var dy = v.y - _this.y;
		var dz = v.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		if(this.maxDistance != null) {
			dist -= this.maxDistance;
		} else {
			dist -= this.referenceDistance;
		}
		var volume = 1 - dist / this.fadeDistance;
		if(volume > 1) {
			volume = 1;
		}
		if(volume < 0) {
			volume = 0;
		}
		return volume;
	}
	,applyAudibleVolumeModifier: function(v) {
		var _this = hxd_snd_Manager.get().listener.position;
		var v1 = this.position;
		var dx = v1.x - _this.x;
		var dy = v1.y - _this.y;
		var dz = v1.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		var b = this.referenceDistance;
		if(dist < b) {
			dist = b;
		}
		if(this.maxDistance != null) {
			var b = this.maxDistance;
			if(dist > b) {
				dist = b;
			}
		}
		var volume = this.referenceDistance / (this.referenceDistance + this.rollOffFactor * (dist - this.referenceDistance));
		return v * volume;
	}
	,__class__: hxd_snd_effect_Spatialization
});
var hxd_snd_webaudio_BufferHandle = function() {
};
$hxClasses["hxd.snd.webaudio.BufferHandle"] = hxd_snd_webaudio_BufferHandle;
hxd_snd_webaudio_BufferHandle.__name__ = "hxd.snd.webaudio.BufferHandle";
hxd_snd_webaudio_BufferHandle.prototype = {
	__class__: hxd_snd_webaudio_BufferHandle
};
var hxd_snd_webaudio_SourceHandle = function() {
	this.buffers = [];
	this.sampleOffset = 0;
	this.pitch = 1;
	this.firstPlay = true;
};
$hxClasses["hxd.snd.webaudio.SourceHandle"] = hxd_snd_webaudio_SourceHandle;
hxd_snd_webaudio_SourceHandle.__name__ = "hxd.snd.webaudio.SourceHandle";
hxd_snd_webaudio_SourceHandle.prototype = {
	updateDestination: function() {
		this.destination = this.gain;
		if(this.lowPass != null) {
			this.lowPass.connect(this.destination);
			this.destination = this.lowPass;
		}
		if(this.panner != null) {
			this.panner.connect(this.destination);
			this.destination = this.panner;
		}
		this.gain.connect(hxd_snd_webaudio_Context.destination);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.node != null) {
				b.restart(this);
			}
		}
	}
	,applyPitch: function() {
		var t = 0.;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			t = b.readjust(t,this);
		}
	}
	,__class__: hxd_snd_webaudio_SourceHandle
};
var hxd_snd_webaudio_BufferPlayback = function() {
};
$hxClasses["hxd.snd.webaudio.BufferPlayback"] = hxd_snd_webaudio_BufferPlayback;
hxd_snd_webaudio_BufferPlayback.__name__ = "hxd.snd.webaudio.BufferPlayback";
hxd_snd_webaudio_BufferPlayback.prototype = {
	get_currentSample: function() {
		if(this.consumed) {
			return this.buffer.samples;
		}
		if(this.node == null || !this.dirty || this.node.context.currentTime < this.lastTime) {
			return 0;
		}
		this.lastSamples += Math.floor((this.node.context.currentTime - this.lastTime) * this.buffer.inst.sampleRate * this.node.playbackRate.value);
		this.lastTime = this.node.context.currentTime;
		return this.lastSamples;
	}
	,set: function(buf,grainOffset) {
		this.buffer = buf;
		this.offset = isNaN(grainOffset) ? 0 : grainOffset;
		this.dirty = false;
		this.consumed = false;
		this.starts = 0;
		this.ends = 0;
	}
	,start: function(ctx,source,time) {
		this.dirty = true;
		this.consumed = false;
		if(this.node != null) {
			this.stop();
		}
		if(source.firstPlay && this.buffer.samples > 10) {
			source.firstPlay = false;
			var _g = [];
			var _g1 = 0;
			var _g2 = this.buffer.inst.numberOfChannels;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.buffer.inst.getChannelData(i));
			}
			var channels = _g;
			var j = 0;
			var fade = 0.;
			while(j < 10) {
				var i = 0;
				while(i < channels.length) {
					channels[i][j] *= fade;
					++i;
				}
				++j;
				fade += 0.1;
				if(fade > 1) {
					fade = 1;
				}
			}
		}
		this.node = ctx.createBufferSource();
		this.node.buffer = this.buffer.inst;
		this.node.addEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.connect(source.destination);
		this.node.playbackRate.value = source.pitch;
		this.node.start(time,this.offset);
		this.lastSamples = 0;
		this.lastTime = time;
		this.starts = time;
		return this.ends = time + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,readjust: function(time,source) {
		if(this.consumed || this.node == null) {
			return this.ends;
		}
		var ctx = source.driver.ctx;
		var shiftTime = ctx.currentTime;
		this.node.playbackRate.setValueAtTime(source.pitch,shiftTime);
		var elapsed = shiftTime - this.starts;
		if(elapsed < 0) {
			return this.start(ctx,source,time == 0 ? shiftTime : time);
		}
		this.starts = shiftTime - elapsed / source.pitch;
		return this.ends = this.starts + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,restart: function(source) {
		if(this.consumed || this.node == null) {
			return;
		}
		var ctx = hxd_snd_webaudio_Context.get();
		if(ctx.currentTime > this.starts) {
			this.offset += (ctx.currentTime - this.starts) * source.pitch;
			this.start(ctx,source,ctx.currentTime);
		} else {
			this.start(ctx,source,this.starts);
		}
	}
	,stop: function(immediate) {
		if(immediate == null) {
			immediate = true;
		}
		if(this.node != null) {
			this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
			if(immediate) {
				this.node.disconnect();
			} else {
				this.node.stop();
			}
			this.node = null;
		}
	}
	,onBufferConsumed: function(e) {
		this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.disconnect();
		this.node = null;
		this.consumed = true;
	}
	,clear: function() {
		this.buffer = null;
		this.node = null;
	}
	,__class__: hxd_snd_webaudio_BufferPlayback
};
var hxd_snd_webaudio_Context = function() { };
$hxClasses["hxd.snd.webaudio.Context"] = hxd_snd_webaudio_Context;
hxd_snd_webaudio_Context.__name__ = "hxd.snd.webaudio.Context";
hxd_snd_webaudio_Context.get = function() {
	if(hxd_snd_webaudio_Context.ctx == null) {
		try {
			hxd_snd_webaudio_Context.ctx = new AudioContext();
		} catch( _g ) {
			try {
				hxd_snd_webaudio_Context.ctx = new window.webkitAudioContext();
			} catch( _g1 ) {
				hxd_snd_webaudio_Context.ctx = null;
			}
		}
		if(hxd_snd_webaudio_Context.ctx == null) {
			throw haxe_Exception.thrown("WebAudio API not available in this browser!");
		}
		if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
			hxd_snd_webaudio_Context.waitForPageInput();
		}
		hxd_snd_webaudio_Context.ctx.addEventListener("statechange",function(_) {
			if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
				hxd_snd_webaudio_Context.waitForPageInput();
			}
		});
		hxd_snd_webaudio_Context.bufferPool = [];
		hxd_snd_webaudio_Context.gainPool = [];
		hxd_snd_webaudio_Context.masterGain = hxd_snd_webaudio_Context.ctx.createGain();
		hxd_snd_webaudio_Context.masterGain.connect(hxd_snd_webaudio_Context.ctx.destination);
		hxd_snd_webaudio_Context.destination = hxd_snd_webaudio_Context.masterGain;
	}
	return hxd_snd_webaudio_Context.ctx;
};
hxd_snd_webaudio_Context.getGain = function() {
	if(hxd_snd_webaudio_Context.gainPool.length != 0) {
		return hxd_snd_webaudio_Context.gainPool.pop();
	} else {
		return hxd_snd_webaudio_Context.ctx.createGain();
	}
};
hxd_snd_webaudio_Context.putGain = function(gain) {
	hxd_snd_webaudio_Context.gainPool.push(gain);
	gain.gain.value = 1;
};
hxd_snd_webaudio_Context.waitForPageInput = function() {
	if(!hxd_snd_webaudio_Context.suspended) {
		window.document.addEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = true;
	}
};
hxd_snd_webaudio_Context.resumeContext = function(_) {
	if(hxd_snd_webaudio_Context.suspended) {
		if(hxd_snd_webaudio_Context.ctx != null) {
			hxd_snd_webaudio_Context.ctx.resume();
		}
		window.document.removeEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = false;
	}
};
hxd_snd_webaudio_Context.getBuffer = function(channels,sampleCount,rate) {
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == channels && pool.samples == sampleCount && pool.rate == rate) {
			if(pool.pool.length != 0) {
				return pool.pool.pop();
			} else {
				return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
			}
		}
	}
	var pool = new hxd_snd_webaudio__$Context_BufferPool(channels,sampleCount,rate);
	hxd_snd_webaudio_Context.bufferPool.push(pool);
	return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
};
hxd_snd_webaudio_Context.putBuffer = function(buf) {
	var rate = buf.sampleRate | 0;
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == buf.numberOfChannels && pool.samples == buf.length && pool.rate == rate) {
			pool.pool.push(buf);
			break;
		}
	}
};
var hxd_snd_webaudio__$Context_BufferPool = function(channels,samples,rate) {
	this.pool = [];
	this.channels = channels;
	this.samples = samples;
	this.rate = rate;
};
$hxClasses["hxd.snd.webaudio._Context.BufferPool"] = hxd_snd_webaudio__$Context_BufferPool;
hxd_snd_webaudio__$Context_BufferPool.__name__ = "hxd.snd.webaudio._Context.BufferPool";
hxd_snd_webaudio__$Context_BufferPool.prototype = {
	__class__: hxd_snd_webaudio__$Context_BufferPool
};
var hxd_snd_webaudio_Driver = function() {
	this.playbackPool = [];
	this.ctx = hxd_snd_webaudio_Context.get();
};
$hxClasses["hxd.snd.webaudio.Driver"] = hxd_snd_webaudio_Driver;
hxd_snd_webaudio_Driver.__name__ = "hxd.snd.webaudio.Driver";
hxd_snd_webaudio_Driver.__interfaces__ = [hxd_snd_Driver];
hxd_snd_webaudio_Driver.prototype = {
	getBuffer: function(channels,sampleCount,rate) {
		return hxd_snd_webaudio_Context.getBuffer(channels,sampleCount,rate);
	}
	,putBuffer: function(buf) {
		hxd_snd_webaudio_Context.putBuffer(buf);
	}
	,getGain: function() {
		if(hxd_snd_webaudio_Context.gainPool.length != 0) {
			return hxd_snd_webaudio_Context.gainPool.pop();
		} else {
			return hxd_snd_webaudio_Context.ctx.createGain();
		}
	}
	,putGain: function(gain) {
		hxd_snd_webaudio_Context.gainPool.push(gain);
		gain.gain.value = 1;
	}
	,hasFeature: function(d) {
		return true;
	}
	,setMasterVolume: function(value) {
		hxd_snd_webaudio_Context.masterGain.gain.value = value;
	}
	,setListenerParams: function(position,direction,up,velocity) {
		this.ctx.listener.setPosition(-position.x,position.y,position.z);
		this.ctx.listener.setOrientation(-direction.x,direction.y,direction.z,-up.x,up.y,up.z);
	}
	,createSource: function() {
		var s = new hxd_snd_webaudio_SourceHandle();
		s.driver = this;
		s.gain = hxd_snd_webaudio_Context.gainPool.length != 0 ? hxd_snd_webaudio_Context.gainPool.pop() : hxd_snd_webaudio_Context.ctx.createGain();
		s.updateDestination();
		return s;
	}
	,playSource: function(source) {
		if(!source.playing) {
			source.playing = true;
			if(source.buffers.length != 0) {
				var time = this.ctx.currentTime;
				var _g = 0;
				var _g1 = source.buffers;
				while(_g < _g1.length) {
					var b = _g1[_g];
					++_g;
					if(b.consumed) {
						continue;
					}
					time = b.start(this.ctx,source,time);
				}
			}
		}
	}
	,stopSource: function(source) {
		source.playing = false;
		source.sampleOffset = 0;
	}
	,setSourceVolume: function(source,value) {
		source.gain.gain.value = value;
	}
	,destroySource: function(source) {
		this.stopSource(source);
		source.gain.disconnect();
		source.driver = null;
		var gain = source.gain;
		hxd_snd_webaudio_Context.gainPool.push(gain);
		gain.gain.value = 1;
		source.gain = null;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.stop();
			b.clear();
			this.playbackPool.push(b);
		}
		source.buffers = [];
	}
	,createBuffer: function() {
		var b = new hxd_snd_webaudio_BufferHandle();
		b.samples = 0;
		return b;
	}
	,setBufferData: function(buffer,data,size,format,channelCount,samplingRate) {
		var sampleCount;
		switch(format._hx_index) {
		case 0:
			sampleCount = 1;
			break;
		case 1:
			sampleCount = 2;
			break;
		case 2:
			sampleCount = 4;
			break;
		}
		var sampleCount1 = size / sampleCount / channelCount | 0;
		buffer.samples = sampleCount1;
		if(sampleCount1 == 0) {
			return;
		}
		if(buffer.inst == null) {
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		} else if(buffer.inst.sampleRate != samplingRate || buffer.inst.numberOfChannels != channelCount || buffer.inst.length != sampleCount1) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		}
		switch(format._hx_index) {
		case 0:
			var ui8 = new Uint8Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = (ui8[i] - 128) / 128;
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = (ui8[r] - 128) / 128;
					right[i] = (ui8[r + 1] - 128) / 128;
					r += channelCount;
				}
			}
			break;
		case 1:
			var i16 = new Int16Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = i16[i] / 32768;
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = i16[r] / 32768;
					right[i] = i16[r + 1] / 32768;
					r += channelCount;
				}
			}
			break;
		case 2:
			var f32 = new Float32Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = f32[i];
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = f32[r];
					right[i] = f32[r + 1];
					r += channelCount;
				}
			}
			break;
		}
	}
	,destroyBuffer: function(buffer) {
		if(buffer.inst != null) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
		}
		buffer.inst = null;
	}
	,queueBuffer: function(source,buffer,sampleStart,endOfStream) {
		var buf = this.playbackPool.length != 0 ? this.playbackPool.pop() : new hxd_snd_webaudio_BufferPlayback();
		if(buffer.inst == null) {
			return;
		}
		buf.set(buffer,sampleStart / buffer.inst.length * buffer.inst.duration);
		buffer.isEnd = endOfStream;
		source.buffers.push(buf);
		if(source.playing) {
			if(source.buffers.length != 1) {
				var t = source.buffers[source.buffers.length - 2].ends;
				var tmp = this.ctx;
				var tmp1;
				if(isFinite(t)) {
					var b = this.ctx.currentTime;
					tmp1 = t < b ? b : t;
				} else {
					tmp1 = this.ctx.currentTime;
				}
				buf.start(tmp,source,tmp1);
			} else {
				buf.start(this.ctx,source,this.ctx.currentTime);
			}
		}
	}
	,unqueueBuffer: function(source,buffer) {
		var i = 0;
		while(i < source.buffers.length) {
			var b = source.buffers[i];
			if(b.buffer == buffer) {
				source.buffers.splice(i,1);
				b.stop(!buffer.isEnd);
				b.clear();
				this.playbackPool.push(b);
				break;
			}
		}
		if(buffer.isEnd || !source.playing) {
			source.sampleOffset = 0;
		} else {
			source.sampleOffset += buffer.samples;
		}
	}
	,getProcessedBuffers: function(source) {
		var cnt = 0;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				++cnt;
			}
		}
		return cnt;
	}
	,getPlayedSampleCount: function(source) {
		var consumed = 0;
		var buf = null;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				consumed += b.buffer.samples;
			} else if(b.dirty) {
				buf = b;
				break;
			}
		}
		if(buf != null) {
			return source.sampleOffset + consumed + buf.get_currentSample();
		}
		return source.sampleOffset + consumed;
	}
	,update: function() {
	}
	,dispose: function() {
	}
	,getEffectDriver: function(type) {
		switch(type) {
		case "lowpass":
			return new hxd_snd_webaudio_LowPassDriver();
		case "pitch":
			return new hxd_snd_webaudio_PitchDriver();
		case "spatialization":
			return new hxd_snd_webaudio_SpatializationDriver();
		default:
			return new hxd_snd_EffectDriver();
		}
	}
	,get_masterGain: function() {
		return hxd_snd_webaudio_Context.masterGain;
	}
	,set_destination: function(node) {
		return hxd_snd_webaudio_Context.destination = node;
	}
	,get_destination: function() {
		return hxd_snd_webaudio_Context.destination;
	}
	,__class__: hxd_snd_webaudio_Driver
};
var hxd_snd_webaudio_LowPassDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.LowPassDriver"] = hxd_snd_webaudio_LowPassDriver;
hxd_snd_webaudio_LowPassDriver.__name__ = "hxd.snd.webaudio.LowPassDriver";
hxd_snd_webaudio_LowPassDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_LowPassDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createBiquadFilter();
		node.type = "lowpass";
		return node;
	}
	,bind: function(e,source) {
		source.lowPass = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		var min = 40;
		var max = source.driver.ctx.sampleRate / 2;
		var octaves = Math.log(max / min) / Math.LN2;
		source.lowPass.frequency.value = max * Math.pow(2,octaves * (e.gainHF - 1));
	}
	,unbind: function(e,source) {
		this.pool.push(source.lowPass);
		source.lowPass.disconnect();
		source.lowPass = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_LowPassDriver
});
var hxd_snd_webaudio_PitchDriver = function() {
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.PitchDriver"] = hxd_snd_webaudio_PitchDriver;
hxd_snd_webaudio_PitchDriver.__name__ = "hxd.snd.webaudio.PitchDriver";
hxd_snd_webaudio_PitchDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_PitchDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	apply: function(e,source) {
		if(source.pitch != e.value) {
			source.pitch = e.value;
			source.applyPitch();
		}
	}
	,unbind: function(e,source) {
		source.pitch = 1;
		source.applyPitch();
	}
	,__class__: hxd_snd_webaudio_PitchDriver
});
var hxd_snd_webaudio_SpatializationDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.SpatializationDriver"] = hxd_snd_webaudio_SpatializationDriver;
hxd_snd_webaudio_SpatializationDriver.__name__ = "hxd.snd.webaudio.SpatializationDriver";
hxd_snd_webaudio_SpatializationDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_SpatializationDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createPanner();
		return node;
	}
	,bind: function(e,source) {
		source.panner = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		source.panner.setPosition(-e.position.x,e.position.y,e.position.z);
		source.panner.setOrientation(-e.direction.x,e.direction.y,e.direction.z);
		source.panner.rolloffFactor = e.rollOffFactor;
		source.panner.refDistance = e.referenceDistance;
		var maxDist = e.maxDistance == null ? 3.40282347e38 : e.maxDistance;
		source.panner.maxDistance = maxDist;
	}
	,unbind: function(e,source) {
		this.pool.push(source.panner);
		source.panner.disconnect();
		source.panner = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_SpatializationDriver
});
var hxsl_BufferKind = $hxEnums["hxsl.BufferKind"] = { __ename__:"hxsl.BufferKind",__constructs__:null
	,Uniform: {_hx_name:"Uniform",_hx_index:0,__enum__:"hxsl.BufferKind",toString:$estr}
	,RW: {_hx_name:"RW",_hx_index:1,__enum__:"hxsl.BufferKind",toString:$estr}
};
hxsl_BufferKind.__constructs__ = [hxsl_BufferKind.Uniform,hxsl_BufferKind.RW];
hxsl_BufferKind.__empty_constructs__ = [hxsl_BufferKind.Uniform,hxsl_BufferKind.RW];
var hxsl_Type = $hxEnums["hxsl.Type"] = { __ename__:"hxsl.Type",__constructs__:null
	,TVoid: {_hx_name:"TVoid",_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_name:"TString",_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.size,this.t];}}; },$_._hx_name="TVec",$_)
	,TMat3: {_hx_name:"TMat3",_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_name:"TMat4",_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_name:"TMat3x4",_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.size];}}; },$_._hx_name="TBytes",$_)
	,TSampler2D: {_hx_name:"TSampler2D",_hx_index:10,__enum__:"hxsl.Type",toString:$estr}
	,TSampler2DArray: {_hx_name:"TSampler2DArray",_hx_index:11,__enum__:"hxsl.Type",toString:$estr}
	,TSamplerCube: {_hx_name:"TSamplerCube",_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.vl];}}; },$_._hx_name="TStruct",$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.variants];}}; },$_._hx_name="TFun",$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.t,this.size];}}; },$_._hx_name="TArray",$_)
	,TBuffer: ($_=function(t,size,kind) { return {_hx_index:16,t:t,size:size,kind:kind,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.t,this.size,this.kind];}}; },$_._hx_name="TBuffer",$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr,__params__:function(){ return [this.size];}}; },$_._hx_name="TChannel",$_)
	,TMat2: {_hx_name:"TMat2",_hx_index:18,__enum__:"hxsl.Type",toString:$estr}
};
hxsl_Type.__constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TVec,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TBytes,hxsl_Type.TSampler2D,hxsl_Type.TSampler2DArray,hxsl_Type.TSamplerCube,hxsl_Type.TStruct,hxsl_Type.TFun,hxsl_Type.TArray,hxsl_Type.TBuffer,hxsl_Type.TChannel,hxsl_Type.TMat2];
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TSampler2D,hxsl_Type.TSampler2DArray,hxsl_Type.TSamplerCube,hxsl_Type.TMat2];
var hxsl_VecType = $hxEnums["hxsl.VecType"] = { __ename__:"hxsl.VecType",__constructs__:null
	,VInt: {_hx_name:"VInt",_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_name:"VFloat",_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_name:"VBool",_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl_VecType.__constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__:"hxsl.SizeDecl",__constructs__:null
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="SConst",$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="SVar",$_)
};
hxsl_SizeDecl.__constructs__ = [hxsl_SizeDecl.SConst,hxsl_SizeDecl.SVar];
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["hxsl.Error"] = hxsl_Error;
hxsl_Error.__name__ = "hxsl.Error";
hxsl_Error.t = function(msg,pos) {
	throw haxe_Exception.thrown(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxEnums["hxsl.VarKind"] = { __ename__:"hxsl.VarKind",__constructs__:null
	,Global: {_hx_name:"Global",_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_name:"Input",_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_name:"Param",_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_name:"Var",_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_name:"Local",_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_name:"Output",_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_name:"Function",_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl_VarKind.__constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__:"hxsl.VarQualifier",__constructs__:null
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.max];}}; },$_._hx_name="Const",$_)
	,Private: {_hx_name:"Private",_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_name:"Nullable",_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_name:"PerObject",_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.n];}}; },$_._hx_name="Name",$_)
	,Shared: {_hx_name:"Shared",_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.p];}}; },$_._hx_name="Precision",$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.min,this.max];}}; },$_._hx_name="Range",$_)
	,Ignore: {_hx_name:"Ignore",_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="PerInstance",$_)
	,Doc: ($_=function(s) { return {_hx_index:10,s:s,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.s];}}; },$_._hx_name="Doc",$_)
	,Borrow: ($_=function(source) { return {_hx_index:11,source:source,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.source];}}; },$_._hx_name="Borrow",$_)
	,Sampler: ($_=function(name) { return {_hx_index:12,name:name,__enum__:"hxsl.VarQualifier",toString:$estr,__params__:function(){ return [this.name];}}; },$_._hx_name="Sampler",$_)
};
hxsl_VarQualifier.__constructs__ = [hxsl_VarQualifier.Const,hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Name,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Precision,hxsl_VarQualifier.Range,hxsl_VarQualifier.Ignore,hxsl_VarQualifier.PerInstance,hxsl_VarQualifier.Doc,hxsl_VarQualifier.Borrow,hxsl_VarQualifier.Sampler];
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore];
var hxsl_Prec = $hxEnums["hxsl.Prec"] = { __ename__:"hxsl.Prec",__constructs__:null
	,Low: {_hx_name:"Low",_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_name:"Medium",_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_name:"High",_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl_Prec.__constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxEnums["hxsl.Const"] = { __ename__:"hxsl.Const",__constructs__:null
	,CNull: {_hx_name:"CNull",_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr,__params__:function(){ return [this.b];}}; },$_._hx_name="CBool",$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="CInt",$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="CFloat",$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="CString",$_)
};
hxsl_Const.__constructs__ = [hxsl_Const.CNull,hxsl_Const.CBool,hxsl_Const.CInt,hxsl_Const.CFloat,hxsl_Const.CString];
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_ExprDef = $hxEnums["hxsl.ExprDef"] = { __ename__:"hxsl.ExprDef",__constructs__:null
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.c];}}; },$_._hx_name="EConst",$_)
	,EIdent: ($_=function(i) { return {_hx_index:1,i:i,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.i];}}; },$_._hx_name="EIdent",$_)
	,EParenthesis: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="EParenthesis",$_)
	,EField: ($_=function(e,f) { return {_hx_index:3,e:e,f:f,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e,this.f];}}; },$_._hx_name="EField",$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:4,op:op,e1:e1,e2:e2,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.op,this.e1,this.e2];}}; },$_._hx_name="EBinop",$_)
	,EUnop: ($_=function(op,e1) { return {_hx_index:5,op:op,e1:e1,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.op,this.e1];}}; },$_._hx_name="EUnop",$_)
	,ECall: ($_=function(e,args) { return {_hx_index:6,e:e,args:args,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e,this.args];}}; },$_._hx_name="ECall",$_)
	,EBlock: ($_=function(el) { return {_hx_index:7,el:el,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.el];}}; },$_._hx_name="EBlock",$_)
	,EVars: ($_=function(v) { return {_hx_index:8,v:v,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="EVars",$_)
	,EFunction: ($_=function(f) { return {_hx_index:9,f:f,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.f];}}; },$_._hx_name="EFunction",$_)
	,EIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.econd,this.eif,this.eelse];}}; },$_._hx_name="EIf",$_)
	,EDiscard: {_hx_name:"EDiscard",_hx_index:11,__enum__:"hxsl.ExprDef",toString:$estr}
	,EFor: ($_=function(v,loop,block) { return {_hx_index:12,v:v,loop:loop,block:block,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.v,this.loop,this.block];}}; },$_._hx_name="EFor",$_)
	,EReturn: ($_=function(e) { return {_hx_index:13,e:e,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="EReturn",$_)
	,EBreak: {_hx_name:"EBreak",_hx_index:14,__enum__:"hxsl.ExprDef",toString:$estr}
	,EContinue: {_hx_name:"EContinue",_hx_index:15,__enum__:"hxsl.ExprDef",toString:$estr}
	,EArray: ($_=function(e,eindex) { return {_hx_index:16,e:e,eindex:eindex,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e,this.eindex];}}; },$_._hx_name="EArray",$_)
	,EArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.el];}}; },$_._hx_name="EArrayDecl",$_)
	,ESwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.e,this.cases,this.def];}}; },$_._hx_name="ESwitch",$_)
	,EWhile: ($_=function(cond,loop,normalWhile) { return {_hx_index:19,cond:cond,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.cond,this.loop,this.normalWhile];}}; },$_._hx_name="EWhile",$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:20,name:name,args:args,e:e,__enum__:"hxsl.ExprDef",toString:$estr,__params__:function(){ return [this.name,this.args,this.e];}}; },$_._hx_name="EMeta",$_)
};
hxsl_ExprDef.__constructs__ = [hxsl_ExprDef.EConst,hxsl_ExprDef.EIdent,hxsl_ExprDef.EParenthesis,hxsl_ExprDef.EField,hxsl_ExprDef.EBinop,hxsl_ExprDef.EUnop,hxsl_ExprDef.ECall,hxsl_ExprDef.EBlock,hxsl_ExprDef.EVars,hxsl_ExprDef.EFunction,hxsl_ExprDef.EIf,hxsl_ExprDef.EDiscard,hxsl_ExprDef.EFor,hxsl_ExprDef.EReturn,hxsl_ExprDef.EBreak,hxsl_ExprDef.EContinue,hxsl_ExprDef.EArray,hxsl_ExprDef.EArrayDecl,hxsl_ExprDef.ESwitch,hxsl_ExprDef.EWhile,hxsl_ExprDef.EMeta];
hxsl_ExprDef.__empty_constructs__ = [hxsl_ExprDef.EDiscard,hxsl_ExprDef.EBreak,hxsl_ExprDef.EContinue];
var hxsl_TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__:"hxsl.TExprDef",__constructs__:null
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.c];}}; },$_._hx_name="TConst",$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="TVar",$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.g];}}; },$_._hx_name="TGlobal",$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="TParenthesis",$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.el];}}; },$_._hx_name="TBlock",$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.op,this.e1,this.e2];}}; },$_._hx_name="TBinop",$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.op,this.e1];}}; },$_._hx_name="TUnop",$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.v,this.init];}}; },$_._hx_name="TVarDecl",$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e,this.args];}}; },$_._hx_name="TCall",$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e,this.regs];}}; },$_._hx_name="TSwiz",$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.econd,this.eif,this.eelse];}}; },$_._hx_name="TIf",$_)
	,TDiscard: {_hx_name:"TDiscard",_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="TReturn",$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.v,this.it,this.loop];}}; },$_._hx_name="TFor",$_)
	,TContinue: {_hx_name:"TContinue",_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_name:"TBreak",_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e,this.index];}}; },$_._hx_name="TArray",$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.el];}}; },$_._hx_name="TArrayDecl",$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e,this.cases,this.def];}}; },$_._hx_name="TSwitch",$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.e,this.loop,this.normalWhile];}}; },$_._hx_name="TWhile",$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr,__params__:function(){ return [this.m,this.args,this.e];}}; },$_._hx_name="TMeta",$_)
};
hxsl_TExprDef.__constructs__ = [hxsl_TExprDef.TConst,hxsl_TExprDef.TVar,hxsl_TExprDef.TGlobal,hxsl_TExprDef.TParenthesis,hxsl_TExprDef.TBlock,hxsl_TExprDef.TBinop,hxsl_TExprDef.TUnop,hxsl_TExprDef.TVarDecl,hxsl_TExprDef.TCall,hxsl_TExprDef.TSwiz,hxsl_TExprDef.TIf,hxsl_TExprDef.TDiscard,hxsl_TExprDef.TReturn,hxsl_TExprDef.TFor,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak,hxsl_TExprDef.TArray,hxsl_TExprDef.TArrayDecl,hxsl_TExprDef.TSwitch,hxsl_TExprDef.TWhile,hxsl_TExprDef.TMeta];
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__:"hxsl.FunctionKind",__constructs__:null
	,Vertex: {_hx_name:"Vertex",_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_name:"Fragment",_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_name:"Init",_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_name:"Helper",_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Main: {_hx_name:"Main",_hx_index:4,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl_FunctionKind.__constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper,hxsl_FunctionKind.Main];
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper,hxsl_FunctionKind.Main];
var hxsl_TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__:"hxsl.TGlobal",__constructs__:null
	,Radians: {_hx_name:"Radians",_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_name:"Degrees",_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_name:"Sin",_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_name:"Cos",_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_name:"Tan",_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_name:"Asin",_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_name:"Acos",_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_name:"Atan",_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_name:"Pow",_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_name:"Exp",_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_name:"Log",_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_name:"Exp2",_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_name:"Log2",_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_name:"Sqrt",_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_name:"Inversesqrt",_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_name:"Abs",_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_name:"Sign",_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_name:"Floor",_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_name:"Ceil",_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_name:"Fract",_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_name:"Mod",_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_name:"Clamp",_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_name:"Mix",_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_name:"Step",_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_name:"Smoothstep",_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_name:"Length",_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_name:"Distance",_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_name:"Dot",_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_name:"Cross",_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_name:"Normalize",_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_name:"LReflect",_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_name:"Texture",_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_name:"TextureLod",_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_name:"Texel",_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureSize: {_hx_name:"TextureSize",_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_name:"ToInt",_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_name:"ToFloat",_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_name:"ToBool",_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_name:"Vec2",_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_name:"Vec3",_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_name:"Vec4",_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_name:"IVec2",_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_name:"IVec3",_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_name:"IVec4",_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_name:"BVec2",_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_name:"BVec3",_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_name:"BVec4",_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_name:"Mat2",_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_name:"Mat3",_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_name:"Mat4",_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_name:"Mat3x4",_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_name:"Saturate",_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_name:"Pack",_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_name:"Unpack",_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_name:"PackNormal",_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_name:"UnpackNormal",_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_name:"ScreenToUv",_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_name:"UvToScreen",_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_name:"DFdx",_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_name:"DFdy",_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_name:"Fwidth",_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_name:"ChannelRead",_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_name:"ChannelReadLod",_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_name:"ChannelFetch",_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelTextureSize: {_hx_name:"ChannelTextureSize",_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_name:"Trace",_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_name:"VertexID",_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_name:"InstanceID",_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
	,FragCoord: {_hx_name:"FragCoord",_hx_index:70,__enum__:"hxsl.TGlobal",toString:$estr}
	,FrontFacing: {_hx_name:"FrontFacing",_hx_index:71,__enum__:"hxsl.TGlobal",toString:$estr}
	,FloatBitsToInt: {_hx_name:"FloatBitsToInt",_hx_index:72,__enum__:"hxsl.TGlobal",toString:$estr}
	,FloatBitsToUint: {_hx_name:"FloatBitsToUint",_hx_index:73,__enum__:"hxsl.TGlobal",toString:$estr}
	,IntBitsToFloat: {_hx_name:"IntBitsToFloat",_hx_index:74,__enum__:"hxsl.TGlobal",toString:$estr}
	,UintBitsToFloat: {_hx_name:"UintBitsToFloat",_hx_index:75,__enum__:"hxsl.TGlobal",toString:$estr}
	,RoundEven: {_hx_name:"RoundEven",_hx_index:76,__enum__:"hxsl.TGlobal",toString:$estr}
	,SetLayout: {_hx_name:"SetLayout",_hx_index:77,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl_TGlobal.__constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TextureSize,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelTextureSize,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord,hxsl_TGlobal.FrontFacing,hxsl_TGlobal.FloatBitsToInt,hxsl_TGlobal.FloatBitsToUint,hxsl_TGlobal.IntBitsToFloat,hxsl_TGlobal.UintBitsToFloat,hxsl_TGlobal.RoundEven,hxsl_TGlobal.SetLayout];
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TextureSize,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelTextureSize,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord,hxsl_TGlobal.FrontFacing,hxsl_TGlobal.FloatBitsToInt,hxsl_TGlobal.FloatBitsToUint,hxsl_TGlobal.IntBitsToFloat,hxsl_TGlobal.UintBitsToFloat,hxsl_TGlobal.RoundEven,hxsl_TGlobal.SetLayout];
var hxsl_Tools = function() { };
$hxClasses["hxsl.Tools"] = hxsl_Tools;
hxsl_Tools.__name__ = "hxsl.Tools";
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q._hx_index == 4) {
			var n = q.n;
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getDoc = function(v) {
	if(v.qualifiers == null) {
		return null;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q._hx_index == 10) {
			var s = q.s;
			return s;
		}
	}
	return null;
};
hxsl_Tools.getConstBits = function(v) {
	switch(v.type._hx_index) {
	case 1:
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q._hx_index == 0) {
				var n = q.max;
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 17:
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	if(v.type._hx_index == 17) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q._hx_index == 0) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isStruct = function(v) {
	if(v.type._hx_index == 13) {
		return true;
	} else {
		return false;
	}
};
hxsl_Tools.isArray = function(v) {
	if(v.type._hx_index == 15) {
		return true;
	} else {
		return false;
	}
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.hasBorrowQualifier = function(v,path) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q._hx_index == 11) {
				var s = q.source;
				return path == s;
			}
		}
	}
	return false;
};
hxsl_Tools.isSampler = function(t) {
	switch(t._hx_index) {
	case 10:case 11:case 12:
		return true;
	case 17:
		return true;
	default:
		return false;
	}
};
hxsl_Tools.toString = function(t) {
	switch(t._hx_index) {
	case 5:
		var size = t.size;
		var t1 = t.t;
		var prefix;
		switch(t1._hx_index) {
		case 0:
			prefix = "I";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "B";
			break;
		}
		return prefix + "Vec" + size;
	case 9:
		var n = t.size;
		return "Bytes" + n;
	case 13:
		var vl = t.vl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + Std.string(hxsl_Tools.toString(v.type)));
		}
		return "{" + _g.join(",") + "}";
	case 15:
		var t1 = t.t;
		var s = t.size;
		var tmp = Std.string(hxsl_Tools.toString(t1)) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	case 16:
		var t1 = t.t;
		var s = t.size;
		var k = t.kind;
		var prefix;
		switch(k._hx_index) {
		case 0:
			prefix = "buffer";
			break;
		case 1:
			prefix = "rwbuffer";
			break;
		}
		var tmp = prefix + " " + Std.string(hxsl_Tools.toString(t1)) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	default:
		return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index]._hx_name,1,null);
	}
};
hxsl_Tools.toType = function(t) {
	switch(t._hx_index) {
	case 0:
		return hxsl_Type.TInt;
	case 1:
		return hxsl_Type.TFloat;
	case 2:
		return hxsl_Type.TBool;
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		return false;
	case 1:
		return false;
	case 2:
		return false;
	case 3:
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 5:
		var _ge = _g.e1;
		var _ge1 = _g.e2;
		switch(_g.op._hx_index) {
		case 4:
			return true;
		case 20:
			return true;
		default:
			var e1 = _ge;
			var e2 = _ge1;
			if(!hxsl_Tools.hasSideEffect(e1)) {
				return hxsl_Tools.hasSideEffect(e2);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var e1 = _g.e1;
		return hxsl_Tools.hasSideEffect(e1);
	case 7:
		return true;
	case 8:
		var _ge = _g.e;
		var _gargs = _g.args;
		var _ge1 = _ge.e;
		if(_ge1._hx_index == 2) {
			if(_ge1.g._hx_index == 77) {
				return true;
			} else {
				var e = _ge;
				var pl = _gargs;
				if(e.e._hx_index != 2) {
					return true;
				}
				var _g1 = 0;
				while(_g1 < pl.length) {
					var p = pl[_g1];
					++_g1;
					if(hxsl_Tools.hasSideEffect(p)) {
						return true;
					}
				}
				return false;
			}
		} else {
			var e = _ge;
			var pl = _gargs;
			if(e.e._hx_index != 2) {
				return true;
			}
			var _g1 = 0;
			while(_g1 < pl.length) {
				var p = pl[_g1];
				++_g1;
				if(hxsl_Tools.hasSideEffect(p)) {
					return true;
				}
			}
			return false;
		}
		break;
	case 9:
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 12:
		return true;
	case 13:
		var it = _g.it;
		var loop = _g.loop;
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 11:case 14:case 15:
		return true;
	case 16:
		var e = _g.e;
		var index = _g.index;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 18:
		var e = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var e = _g.e;
		var loop = _g.loop;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 20:
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		break;
	case 1:
		break;
	case 2:
		break;
	case 3:
		var e = _g.e;
		f(e);
		break;
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 5:
		var e1 = _g.e1;
		var e2 = _g.e2;
		f(e1);
		f(e2);
		break;
	case 6:
		var e1 = _g.e1;
		f(e1);
		break;
	case 7:
		var init = _g.init;
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var e = _g.e;
		var args = _g.args;
		f(e);
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			f(a);
		}
		break;
	case 9:
		var e = _g.e;
		f(e);
		break;
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 12:
		var e = _g.e;
		if(e != null) {
			f(e);
		}
		break;
	case 13:
		var it = _g.it;
		var loop = _g.loop;
		f(it);
		f(loop);
		break;
	case 11:case 14:case 15:
		break;
	case 16:
		var e = _g.e;
		var index = _g.index;
		f(e);
		f(index);
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 18:
		var e = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		f(e);
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var e = _g.e;
		var loop = _g.loop;
		f(e);
		f(loop);
		break;
	case 20:
		var e = _g.e;
		f(e);
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		ed = e.e;
		break;
	case 1:
		ed = e.e;
		break;
	case 2:
		ed = e.e;
		break;
	case 3:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var op = _g.op;
		var e1 = _g.e1;
		var e2 = _g.e2;
		ed = hxsl_TExprDef.TBinop(op,f(e1),f(e2));
		break;
	case 6:
		var op = _g.op;
		var e1 = _g.e1;
		ed = hxsl_TExprDef.TUnop(op,f(e1));
		break;
	case 7:
		var v = _g.v;
		var init = _g.init;
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var e1 = _g.e;
		var args = _g.args;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			_g1.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g1);
		break;
	case 9:
		var e1 = _g.e;
		var c = _g.regs;
		ed = hxsl_TExprDef.TSwiz(f(e1),c);
		break;
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 12:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TReturn(e1 != null ? f(e1) : null);
		break;
	case 13:
		var v = _g.v;
		var it = _g.it;
		var loop = _g.loop;
		ed = hxsl_TExprDef.TFor(v,f(it),f(loop));
		break;
	case 11:case 14:case 15:
		ed = e.e;
		break;
	case 16:
		var e1 = _g.e;
		var index = _g.index;
		ed = hxsl_TExprDef.TArray(f(e1),f(index));
		break;
	case 17:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g1);
		break;
	case 18:
		var e1 = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < cases.length) {
			var c = cases[_g2];
			++_g2;
			var _g3 = [];
			var _g4 = 0;
			var _g5 = c.values;
			while(_g4 < _g5.length) {
				var v = _g5[_g4];
				++_g4;
				_g3.push(f(v));
			}
			_g1.push({ values : _g3, expr : f(c.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed1,_g1,def == null ? null : f(def));
		break;
	case 19:
		var e1 = _g.e;
		var loop = _g.loop;
		var normalWhile = _g.normalWhile;
		ed = hxsl_TExprDef.TWhile(f(e1),f(loop),normalWhile);
		break;
	case 20:
		var m = _g.m;
		var args = _g.args;
		var e1 = _g.e;
		ed = hxsl_TExprDef.TMeta(m,args,f(e1));
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 5:
		var n = t.size;
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t.size;
		return s;
	case 2:case 4:case 10:case 11:case 12:
		return 0;
	case 13:
		var vl = t.vl;
		var s = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s += hxsl_Tools.size(v.type);
		}
		return s;
	case 14:
		return 0;
	case 15:
		var _gt = t.t;
		var _gsize = t.size;
		switch(_gsize._hx_index) {
		case 0:
			var v = _gsize.v;
			var t1 = _gt;
			return hxsl_Tools.size(t1) * v;
		case 1:
			return 0;
		}
		break;
	case 16:
		var _gsize = t.size;
		if(_gsize._hx_index == 0) {
			var v = _gsize.v;
			var t1 = t.t;
			return hxsl_Tools.size(t1) * v;
		} else {
			return 0;
		}
		break;
	case 17:
		var n = t.size;
		return n;
	case 18:
		return 4;
	}
};
hxsl_Tools.evalConst = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var c = _g.c;
		switch(c._hx_index) {
		case 0:
			return null;
		case 1:
			var b = c.b;
			return b;
		case 2:
			var i = c.v;
			return i;
		case 3:
			var f = c.v;
			return f;
		case 4:
			var s = c.v;
			return s;
		}
		break;
	case 8:
		var _gargs = _g.args;
		var _ge = _g.e.e;
		if(_ge._hx_index == 2) {
			switch(_ge.g._hx_index) {
			case 40:case 41:
				var args = _gargs;
				var _g = [];
				var _g1 = 0;
				while(_g1 < args.length) {
					var a = args[_g1];
					++_g1;
					_g.push(hxsl_Tools.evalConst(a));
				}
				var vals = _g;
				if(vals.length == 1) {
					var x = vals[0];
					var y = vals[0];
					var z = vals[0];
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					return new h3d_VectorImpl(x,y,z);
				}
				var x = vals[0];
				var y = vals[1];
				var z = vals[2];
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				return new h3d_VectorImpl(x,y,z);
			case 42:
				var args = _gargs;
				var _g = [];
				var _g1 = 0;
				while(_g1 < args.length) {
					var a = args[_g1];
					++_g1;
					_g.push(hxsl_Tools.evalConst(a));
				}
				var vals = _g;
				if(vals.length == 1) {
					var x = vals[0];
					var y = vals[0];
					var z = vals[0];
					var w = vals[0];
					if(w == null) {
						w = 1.;
					}
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					return new h3d_Vector4Impl(x,y,z,w);
				}
				var x = vals[0];
				var y = vals[1];
				var z = vals[2];
				var w = vals[3];
				if(w == null) {
					w = 1.;
				}
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				return new h3d_Vector4Impl(x,y,z,w);
			default:
				throw haxe_Exception.thrown("Unhandled constant init " + hxsl_Printer.toString(e));
			}
		} else {
			throw haxe_Exception.thrown("Unhandled constant init " + hxsl_Printer.toString(e));
		}
		break;
	default:
		throw haxe_Exception.thrown("Unhandled constant init " + hxsl_Printer.toString(e));
	}
};
var hxsl_Tools2 = function() { };
$hxClasses["hxsl.Tools2"] = hxsl_Tools2;
hxsl_Tools2.__name__ = "hxsl.Tools2";
hxsl_Tools2.toString = function(g) {
	var n = $hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name;
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_Tools3 = function() { };
$hxClasses["hxsl.Tools3"] = hxsl_Tools3;
hxsl_Tools3.__name__ = "hxsl.Tools3";
hxsl_Tools3.toString = function(s) {
	return hxsl_Printer.shaderToString(s);
};
var hxsl_Tools4 = function() { };
$hxClasses["hxsl.Tools4"] = hxsl_Tools4;
hxsl_Tools4.__name__ = "hxsl.Tools4";
hxsl_Tools4.toString = function(e) {
	return hxsl_Printer.toString(e);
};
var hxsl_BatchShader = function() {
	this.Batch_Count__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["hxsl.BatchShader"] = hxsl_BatchShader;
hxsl_BatchShader.__name__ = "hxsl.BatchShader";
hxsl_BatchShader.__super__ = hxsl_Shader;
hxsl_BatchShader.prototype = $extend(hxsl_Shader.prototype,{
	get_Batch_HasOffset: function() {
		return this.Batch_HasOffset__;
	}
	,set_Batch_HasOffset: function(_v) {
		this.constModified = true;
		return this.Batch_HasOffset__ = _v;
	}
	,get_Batch_Count: function() {
		return this.Batch_Count__;
	}
	,set_Batch_Count: function(_v) {
		this.constModified = true;
		return this.Batch_Count__ = _v;
	}
	,get_Batch_Buffer: function() {
		return this.Batch_Buffer__;
	}
	,set_Batch_Buffer: function(_v) {
		return this.Batch_Buffer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.Batch_HasOffset__) {
			this.constBits |= 1;
		}
		var v = this.Batch_Count__;
		if(v >>> 17 != 0) {
			throw haxe_Exception.thrown("Batch_Count" + " is out of range " + v + ">" + 131071);
		}
		this.constBits |= v << 1;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.Batch_HasOffset__;
		case 1:
			return this.Batch_Count__;
		case 2:
			return this.Batch_Buffer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,setParamIndexValue: function(index,val) {
		switch(index) {
		case 0:
			this.Batch_HasOffset__ = val;
			break;
		case 1:
			this.Batch_Count__ = val;
			break;
		case 2:
			this.Batch_Buffer__ = val;
			break;
		default:
		}
	}
	,setParamIndexFloatValue: function(index,val) {
	}
	,clone: function() {
		var s = Object.create(hxsl_BatchShader.prototype);
		s.shader = this.shader;
		s.Batch_HasOffset__ = this.Batch_HasOffset__;
		s.Batch_Count__ = this.Batch_Count__;
		s.Batch_Buffer__ = this.Batch_Buffer__;
		return s;
	}
	,__class__: hxsl_BatchShader
});
var hxsl_BatchInstanceParams = function(forcedPerInstance) {
	this.forcedPerInstance = forcedPerInstance;
};
$hxClasses["hxsl.BatchInstanceParams"] = hxsl_BatchInstanceParams;
hxsl_BatchInstanceParams.__name__ = "hxsl.BatchInstanceParams";
hxsl_BatchInstanceParams.prototype = {
	getSignature: function() {
		if(this.cachedSignature == null) {
			var _g = 0;
			var _g1 = this.forcedPerInstance;
			while(_g < _g1.length) {
				var fp = _g1[_g];
				++_g;
				fp.params.sort(Reflect.compare);
			}
			var _g = [];
			var _g1 = 0;
			var _g2 = this.forcedPerInstance;
			while(_g1 < _g2.length) {
				var s = _g2[_g1];
				++_g1;
				_g.push(s.shader + "=" + s.params.join(","));
			}
			this.cachedSignature = HxOverrides.substr(haxe_crypto_Md5.encode(_g.join(";")),0,8);
		}
		return this.cachedSignature;
	}
	,__class__: hxsl_BatchInstanceParams
};
var hxsl_SearchMap = function() {
	this.minId = 0;
	this.nexts = [];
};
$hxClasses["hxsl.SearchMap"] = hxsl_SearchMap;
hxsl_SearchMap.__name__ = "hxsl.SearchMap";
hxsl_SearchMap.prototype = {
	set: function(id,s) {
		if(this.minId == 0) {
			this.minId = id;
			this.nexts = [s];
			return;
		}
		var offset = id - this.minId;
		if(offset < 0) {
			var n = [];
			var _g = 0;
			var _g1 = this.nexts.length;
			while(_g < _g1) {
				var i = _g++;
				n[i - offset] = this.nexts[i];
			}
			this.nexts = n;
			this.minId += offset;
			offset = 0;
		}
		this.nexts[offset] = s;
	}
	,get: function(id) {
		return this.nexts[id - this.minId];
	}
	,__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.batchShaders = new haxe_ds_ObjectMap();
	this.batchShadersParams = new haxe_ds_StringMap();
	this.byID = new haxe_ds_StringMap();
};
$hxClasses["hxsl.Cache"] = hxsl_Cache;
hxsl_Cache.__name__ = "hxsl.Cache";
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.set = function(c) {
	hxsl_Cache.INST = c;
};
hxsl_Cache.clear = function() {
	hxsl_Cache.INST = null;
};
hxsl_Cache.prototype = {
	getLinkShader: function(vars) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vars.length) {
			var v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		var key = _g.join(",");
		var shader = this.linkShaders.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(haxe_crypto_Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		var pos = null;
		var outVars_h = Object.create(null);
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g = 0;
			var _g1 = args.length;
			while(_g < _g1) {
				var i = _g++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v = outVars_h[path];
			if(v != null) {
				return v;
			}
			v = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v);
			} else {
				var _g = parent.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					vl.push(v);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			}
			outVars_h[path] = v;
			return v;
		};
		var makeOutExpr = null;
		makeOutExpr = function(v,rem) {
			switch(v._hx_index) {
			case 0:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v1)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var vname = v.v;
				var size = v.size;
				var v1 = outVars_h[vname];
				if(v1 != null) {
					return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
				}
				var path = vname.split(".");
				var parent = null;
				while(path.length > 1) parent = makeVar(path.shift(),hxsl_Type.TStruct([]),parent);
				if(size != null) {
					rem = size;
				}
				v1 = makeVar(path.shift(),rem == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem,hxsl_VecType.VFloat),parent);
				return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
			case 2:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,3)]), t : tvec4, p : pos};
			case 3:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,1)]), t : tvec4, p : pos};
			case 4:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec2,2,args,makeOutExpr);
			case 5:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec3,3,args,makeOutExpr);
			case 6:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec4,4,args,makeOutExpr);
			case 7:
				var v1 = v.a;
				var comps = v.swiz;
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr(v1,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutput = function(v) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr(v,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g = [];
			var _g1 = 0;
			while(_g1 < vars.length) {
				var v = vars[_g1];
				++_g1;
				_g.push(makeOutput(v));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		this.linkShaders.h[key] = shader;
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders,mode) {
		var c = this.linkCache;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			var cs = c.nexts[i.id - c.minId];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.set(i.id,cs);
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,mode);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders,mode) {
		var shaderDatas = [];
		var index = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s1,s2) {
			return s2.p - s1.p;
		});
		var _g = 0;
		while(_g < shaderDatas.length) {
			var s = shaderDatas[_g];
			++_g;
			hxsl_Printer.check(s.inst.shader);
		}
		var linker = new hxsl_Linker(mode);
		var s;
		try {
			var _g = [];
			var _g1 = 0;
			while(_g1 < shaderDatas.length) {
				var s1 = shaderDatas[_g1];
				++_g1;
				_g.push(s1.inst.shader);
			}
			s = linker.link(_g);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				var _g1 = [];
				var _g2 = 0;
				while(_g2 < shaderDatas.length) {
					var s1 = shaderDatas[_g2];
					++_g2;
					_g1.push(hxsl_Printer.shaderToString(s1.inst.shader));
				}
				var shaders1 = _g1;
				e.msg += "\n\nin\n\n" + shaders1.join("\n-----\n");
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		if(mode == hxsl_LinkMode.Batch) {
			var checkRec = null;
			checkRec = function(v) {
				if(v.qualifiers != null && v.qualifiers.indexOf(hxsl_VarQualifier.PerObject) >= 0) {
					if(v.qualifiers.length == 1) {
						v.qualifiers = null;
					} else {
						v.qualifiers = v.qualifiers.slice();
						HxOverrides.remove(v.qualifiers,hxsl_VarQualifier.PerObject);
					}
					if(v.kind != hxsl_VarKind.Var) {
						v.kind = hxsl_VarKind.Local;
					}
				}
				var _g = v.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					var _g = 0;
					while(_g < vl.length) {
						var v = vl[_g];
						++_g;
						checkRec(v);
					}
				}
			};
			var _g = 0;
			var _g1 = s.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				checkRec(v);
			}
		}
		var _g = [];
		var _g1 = 0;
		while(_g1 < shaderDatas.length) {
			var s1 = shaderDatas[_g1];
			++_g1;
			_g.push(s1.inst.shader);
		}
		hxsl_Printer.check(s,_g);
		var prev = s;
		var splitter = new hxsl_Splitter();
		var sl;
		try {
			sl = splitter.split(s);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				e.msg += "\n\nin\n\n" + hxsl_Printer.shaderToString(s);
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		var paramVars = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = linker.allVars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(v.v.kind == hxsl_VarKind.Param) {
				if(v.v.type._hx_index == 13) {
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				var nv = splitter.varMap.h[v.v.__id__];
				paramVars.h[nv == null ? v.id : nv.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var _g = 0;
		while(_g < sl.length) {
			var s = sl[_g];
			++_g;
			hxsl_Printer.check(s,[prev]);
		}
		var prev = sl;
		var sl1 = new hxsl_Dce().dce(sl);
		var _g_current = 0;
		var _g_array = sl1;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var s = _g_value;
			hxsl_Printer.check(s,[prev[i]]);
		}
		var r = this.buildRuntimeShader(sl1,paramVars);
		r.mode = mode;
		var _g = [];
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			_g.push(new hxsl_ShaderInstanceDesc(s1.shader,s1.constBits));
		}
		r.spec = { instances : _g, signature : null};
		var _g = 0;
		var _g1 = shaderDatas.length;
		while(_g < _g1) {
			var i = _g++;
			var s = shaderDatas[shaderDatas.length - 1 - i];
			r.spec.instances[s.index].index = i;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = r.spec.instances;
		while(_g1 < _g2.length) {
			var i = _g2[_g1];
			++_g1;
			_g.push(i.shader.data.name + "_" + i.bits + "_" + i.index);
		}
		var signParts = _g;
		var tmp = signParts.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		var _g = [];
		var _g1 = 0;
		var _g2 = r.getShaders();
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			_g.push(hxsl_Printer.shaderToString(s.data));
		}
		r.signature = haxe_crypto_Md5.encode(_g.join(""));
		var r2 = this.byID.h[r.signature];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			this.byID.h[r.signature] = r;
		}
		return r;
	}
	,buildRuntimeShader: function(shaders,paramVars) {
		var r = new hxsl_RuntimeShader();
		r.globals = new haxe_ds_IntMap();
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var kind;
			switch(s.name) {
			case "fragment":
				kind = hxsl_FunctionKind.Fragment;
				break;
			case "main":
				kind = hxsl_FunctionKind.Main;
				break;
			case "vertex":
				kind = hxsl_FunctionKind.Vertex;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			var fl = this.flattenShader(s,kind,paramVars);
			fl.kind = kind;
			switch(kind._hx_index) {
			case 0:
				r.vertex = fl;
				break;
			case 1:
				r.fragment = fl;
				break;
			case 4:
				r.vertex = fl;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			this.initGlobals(r,fl);
			hxsl_Printer.check(fl.data,[s]);
		}
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p = s.params;
		while(p != null) {
			if(p.perObjectGlobal != null) {
				r.globals.h[p.perObjectGlobal.gid] = true;
			}
			p = p.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind);
		var textures = [];
		c.texturesCount = 0;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				var _g = [];
				var _g1 = 0;
				while(_g1 < alloc.length) {
					var a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g;
				var _g2 = 0;
				var _g3 = out.length - 1;
				while(_g2 < _g3) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g4 = g1.type;
				if(_g4._hx_index == 15) {
					var _gt = _g4.t;
					var _gsize = _g4.size;
					if(_gt._hx_index == 5) {
						if(_gt.size == 4) {
							if(_gt.t._hx_index == 1) {
								if(_gsize._hx_index == 0) {
									var size = _gsize.v;
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
					} else {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			case 2:
				var out1 = [];
				var count = 0;
				var _g5 = 0;
				while(_g5 < alloc.length) {
					var a1 = alloc[_g5];
					++_g5;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						++count;
						continue;
					}
					var ap1 = new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type);
					var _g6 = a1.v.type;
					if(_g6._hx_index == 15) {
						var t = _g6.t;
						if(hxsl_Tools.isSampler(t)) {
							ap1.pos = -a1.size;
							count += a1.size;
						} else {
							++count;
						}
					} else {
						++count;
					}
					out1.push(ap1);
				}
				var _g7 = 0;
				var _g8 = out1.length - 1;
				while(_g7 < _g8) {
					var i1 = _g7++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g9 = g1.type;
				if(_g9._hx_index == 15) {
					var _gt1 = _g9.t;
					var _gsize1 = _g9.size;
					var t1 = _gt1;
					if(hxsl_Tools.isSampler(t1)) {
						textures.push({ t : t1, all : out1});
						c.texturesCount += count;
					} else {
						switch(_gt1._hx_index) {
						case 5:
							if(_gt1.size == 4) {
								if(_gt1.t._hx_index == 1) {
									if(_gsize1._hx_index == 0) {
										var size1 = _gsize1.v;
										c.params = out1[0];
										c.paramsSize = size1;
									} else {
										throw haxe_Exception.thrown("assert");
									}
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
							break;
						case 16:
							if(c.buffers == null) {
								c.buffers = out1[0];
								c.bufferCount = out1.length;
							} else {
								var p1 = c.buffers;
								while(p1.next != null) p1 = p1.next;
								p1.next = out1[0];
								c.bufferCount += out1.length;
							}
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				return t1.t._hx_index - t2.t._hx_index;
			});
			c.textures = textures[0].all[0];
			var _g = 1;
			var _g1 = textures.length;
			while(_g < _g1) {
				var i = _g++;
				var prevAll = textures[i - 1].all;
				var prev = prevAll[prevAll.length - 1];
				prev.next = textures[i].all[0];
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.buffers == null) {
			c.bufferCount = 0;
		}
		c.data = data;
		return c;
	}
	,makeBatchShader: function(rt,shaders,params) {
		var batchMap;
		if(params == null) {
			batchMap = this.batchShaders;
		} else {
			var this1 = this.batchShadersParams;
			var key = params.getSignature();
			batchMap = this1.h[key];
			if(batchMap == null) {
				batchMap = new haxe_ds_ObjectMap();
				var this1 = this.batchShadersParams;
				var key = params.getSignature();
				this1.h[key] = batchMap;
			}
		}
		var sh = batchMap.h[rt.__id__];
		if(sh == null) {
			sh = this.createBatchShader(rt,shaders,params);
			batchMap.set(rt,sh);
		}
		var shader = Object.create(hxsl_BatchShader.prototype);
		shader.shader = sh.shader;
		shader.params = sh.params;
		shader.paramsSize = sh.size;
		return shader;
	}
	,isPerInstance: function(v) {
		if(v.qualifiers == null) {
			return false;
		}
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			var tmp;
			switch(q._hx_index) {
			case 3:
				tmp = true;
				break;
			case 9:
				tmp = true;
				break;
			default:
				tmp = false;
			}
			if(tmp) {
				return true;
			}
		}
		return false;
	}
	,createBatchShader: function(rt,shaders,params) {
		var _gthis = this;
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(params == null ? rt.spec.signature : haxe_crypto_Md5.encode(rt.spec.signature + params.getSignature()),0,8);
		var declVar = function(name,t,kind) {
			return { id : hxsl_Tools.allocVarId(), type : t, name : name, kind : kind};
		};
		var instancedParams = [];
		if(params != null) {
			var forcedPerInstance = params.forcedPerInstance;
			var instanceIndex = 1;
			var forcedIndex = forcedPerInstance.length - 1;
			var s1 = shaders;
			while(s1 != null && forcedIndex >= 0) {
				if(s1.s.shader.data.name == forcedPerInstance[forcedIndex].shader) {
					instancedParams[instanceIndex] = forcedPerInstance[forcedIndex].params;
					--forcedIndex;
				}
				++instanceIndex;
				s1 = s1.next;
			}
		}
		var pos = null;
		var hasOffset = declVar("Batch_HasOffset",hxsl_Type.TBool,hxsl_VarKind.Param);
		var inputOffset = declVar("Batch_Start",hxsl_Type.TFloat,hxsl_VarKind.Input);
		hasOffset.qualifiers = [hxsl_VarQualifier.Const()];
		inputOffset.qualifiers = [hxsl_VarQualifier.PerInstance(1)];
		var vcount = declVar("Batch_Count",hxsl_Type.TInt,hxsl_VarKind.Param);
		var vbuffer = declVar("Batch_Buffer",hxsl_Type.TBuffer(hxsl_Type.TVec(4,hxsl_VecType.VFloat),hxsl_SizeDecl.SVar(vcount),hxsl_BufferKind.Uniform),hxsl_VarKind.Param);
		var voffset = declVar("Batch_Offset",hxsl_Type.TInt,hxsl_VarKind.Local);
		var ebuffer = { e : hxsl_TExprDef.TVar(vbuffer), p : pos, t : vbuffer.type};
		var eoffset = { e : hxsl_TExprDef.TVar(voffset), p : pos, t : voffset.type};
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var countBits = 16;
		vcount.qualifiers = [hxsl_VarQualifier.Const(1 << countBits)];
		s.data = { name : "batchShader_" + id, vars : [vcount,hasOffset,vbuffer,voffset,inputOffset], funs : []};
		var getVarRec = null;
		getVarRec = function(v,name,kind) {
			if(v.kind == kind && v.name == name) {
				return v;
			}
			var _g = v.type;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				var _g = 0;
				while(_g < vl.length) {
					var v = vl[_g];
					++_g;
					var v1 = getVarRec(v,name,kind);
					if(v1 != null) {
						return v1;
					}
				}
			}
			return null;
		};
		var getVar = function(p) {
			var s = shaders;
			if(p.perObjectGlobal != null) {
				var path = p.perObjectGlobal.path.split(".");
				while(s != null) {
					var _g = 0;
					var _g1 = s.s.shader.data.vars;
					while(_g < _g1.length) {
						var v = _g1[_g];
						++_g;
						if(v.name != path[0]) {
							continue;
						}
						var v1 = getVarRec(v,p.name,hxsl_VarKind.Global);
						if(v1 != null) {
							return v1;
						}
					}
					s = s.next;
				}
			} else {
				var i = p.instance - 1;
				while(i > 0) {
					--i;
					s = s.next;
				}
				var name = p.name;
				while(true) {
					var _g = 0;
					var _g1 = s.s.shader.data.vars;
					while(_g < _g1.length) {
						var v = _g1[_g];
						++_g;
						var v1 = getVarRec(v,name,hxsl_VarKind.Param);
						if(v1 != null) {
							return v1;
						}
					}
					var cc = HxOverrides.cca(name,name.length - 1);
					if(cc >= 48 && cc <= 57) {
						name = HxOverrides.substr(name,0,-1);
					} else {
						break;
					}
				}
			}
			throw haxe_Exception.thrown("Var not found " + p.name);
		};
		var params = null;
		var used = [];
		var addParam = function(p) {
			var size;
			var _g = p.type;
			switch(_g._hx_index) {
			case 3:
				size = 1;
				break;
			case 5:
				if(_g.t._hx_index == 1) {
					var n = _g.size;
					size = n;
				} else {
					throw haxe_Exception.thrown("Unsupported batch var type " + Std.string(p.type));
				}
				break;
			case 7:
				size = 16;
				break;
			default:
				throw haxe_Exception.thrown("Unsupported batch var type " + Std.string(p.type));
			}
			var index;
			if(size >= 4) {
				index = used.length << 2;
				var _g = 0;
				var _g1 = size >> 2;
				while(_g < _g1) {
					var i = _g++;
					used.push(15);
				}
			} else if(size == 1) {
				var best = -1;
				var _g = 0;
				var _g1 = used.length;
				while(_g < _g1) {
					var i = _g++;
					if(used[i] != 15 && (best < 0 || used[best] < used[i])) {
						best = i;
					}
				}
				if(best < 0) {
					best = used.length;
					used.push(0);
				}
				index = best << 2;
				var _g = 0;
				while(_g < 4) {
					var k = _g++;
					var bit = 3 - k;
					if((used[best] & 1 << bit) == 0) {
						used[best] |= 1 << bit;
						index += bit;
						break;
					}
				}
			} else {
				var k = size == 2 ? 3 : 7;
				var best = -1;
				var _g = 0;
				var _g1 = used.length;
				while(_g < _g1) {
					var i = _g++;
					if((used[i] & k) == 0) {
						used[i] |= k;
						best = i;
						break;
					}
				}
				if(best < 0) {
					best = used.length;
					used.push(k);
				}
				index = best << 2;
			}
			var p2 = new hxsl_AllocParam(p.name,index,p.instance,p.index,p.type);
			p2.perObjectGlobal = p.perObjectGlobal;
			p2.next = params;
			params = p2;
		};
		var p = rt.vertex.params;
		while(p != null) {
			var v = getVar(p);
			var params1 = instancedParams[p.instance];
			if(params1 != null && params1.indexOf(v.name) >= 0 ? true : _gthis.isPerInstance(v)) {
				addParam(p);
			}
			p = p.next;
		}
		var p = rt.fragment.params;
		while(p != null) {
			var v = getVar(p);
			var params1 = instancedParams[p.instance];
			if(params1 != null && params1.indexOf(v.name) >= 0 ? true : _gthis.isPerInstance(v)) {
				addParam(p);
			}
			p = p.next;
		}
		var parentVars = new haxe_ds_ObjectMap();
		var swiz = [[hxsl_Component.X],[hxsl_Component.Y],[hxsl_Component.Z],[hxsl_Component.W]];
		var readOffset = function(index) {
			return { e : hxsl_TExprDef.TArray(ebuffer,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,eoffset,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos}), t : tvec4, p : pos};
		};
		var extractVar = function(v) {
			var vreal = declVar(v.name,v.type,hxsl_VarKind.Local);
			if(v.perObjectGlobal != null) {
				var path = v.perObjectGlobal.path.split(".");
				path.pop();
				var cur = vreal;
				while(path.length > 0) {
					var key = path.join(".");
					var name = path.pop();
					var vp = parentVars.h[path.__id__];
					if(vp == null) {
						vp = declVar(name,hxsl_Type.TStruct([]),hxsl_VarKind.Local);
						parentVars.set(path,vp);
					}
					var _g = vp.type;
					if(_g._hx_index == 13) {
						var vl = _g.vl;
						vl.push(cur);
					}
					cur.parent = vp;
					cur = vp;
				}
			}
			s.data.vars.push(vreal);
			var index = v.pos >> 2;
			var extract;
			var _g = v.type;
			switch(_g._hx_index) {
			case 3:
				extract = { p : pos, t : v.type, e : hxsl_TExprDef.TSwiz(readOffset(index),swiz[v.pos & 3])};
				break;
			case 5:
				var _gt = _g.t;
				switch(_g.size) {
				case 2:
					if(_gt._hx_index == 1) {
						var swiz1;
						switch(v.pos & 3) {
						case 0:
							swiz1 = [hxsl_Component.X,hxsl_Component.Y];
							break;
						case 1:
							swiz1 = [hxsl_Component.Y,hxsl_Component.Z];
							break;
						default:
							swiz1 = [hxsl_Component.Z,hxsl_Component.W];
						}
						extract = { p : pos, t : v.type, e : hxsl_TExprDef.TSwiz(readOffset(index),swiz1)};
					} else {
						throw haxe_Exception.thrown("assert");
					}
					break;
				case 3:
					if(_gt._hx_index == 1) {
						extract = { p : pos, t : v.type, e : hxsl_TExprDef.TSwiz(readOffset(index),(v.pos & 3) == 0 ? [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z] : [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W])};
					} else {
						throw haxe_Exception.thrown("assert");
					}
					break;
				case 4:
					if(_gt._hx_index == 1) {
						extract = readOffset(index);
					} else {
						throw haxe_Exception.thrown("assert");
					}
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
				break;
			case 7:
				extract = { p : pos, t : v.type, e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4), t : hxsl_Type.TVoid, p : pos},[readOffset(index),readOffset(index + 1),readOffset(index + 2),readOffset(index + 3)])};
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			return { p : pos, e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(vreal), p : pos, t : v.type},extract), t : hxsl_Type.TVoid};
		};
		var exprs = [];
		var stride = used.length;
		var p = params;
		while(p != null) {
			exprs.push(extractVar(p));
			p = p.next;
		}
		var inits = [];
		inits.push({ p : pos, e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,eoffset,{ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.InstanceID), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVoid});
		inits.push({ p : pos, e : hxsl_TExprDef.TIf({ e : hxsl_TExprDef.TVar(hasOffset), t : hxsl_Type.TBool, p : pos},{ p : pos, e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpAdd),eoffset,{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TVoid, p : pos},[{ p : pos, t : hxsl_Type.TFloat, e : hxsl_TExprDef.TVar(inputOffset)}]), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVoid},null), t : hxsl_Type.TVoid});
		inits.push({ p : pos, t : hxsl_Type.TInt, e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssignOp(haxe_macro_Binop.OpMult),eoffset,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : pos})});
		var fv = declVar("init",hxsl_Type.TFun([]),hxsl_VarKind.Function);
		var f = { kind : hxsl_FunctionKind.Init, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(inits.concat(exprs)), p : pos, t : hxsl_Type.TVoid}};
		s.data.funs.push(f);
		s.consts = new hxsl_ShaderConst(vcount,1,countBits + 1);
		s.consts.globalId = 0;
		s.consts.next = new hxsl_ShaderConst(hasOffset,0,1);
		s.consts.next.globalId = 0;
		return { shader : s, params : params, size : stride};
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxEnums["hxsl.Channel"] = { __ename__:"hxsl.Channel",__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_name:"R",_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_name:"G",_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_name:"B",_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_name:"A",_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_name:"PackedFloat",_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_name:"PackedNormal",_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl_Channel.__constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Clone"] = hxsl_Clone;
hxsl_Clone.__name__ = "hxsl.Clone";
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 14:
			var vars = t.variants;
			return hxsl_Type.TFun(vars);
		case 15:
			var t1 = t.t;
			var size = t.size;
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size._hx_index) {
			case 0:
				tmp1 = size;
				break;
			case 1:
				var v = size.v;
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v),init);
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			tmp = hxsl_TExprDef.TFor(this.tvar(v),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_Exit = function() {
};
$hxClasses["hxsl._Dce.Exit"] = hxsl__$Dce_Exit;
hxsl__$Dce_Exit.__name__ = "hxsl._Dce.Exit";
hxsl__$Dce_Exit.prototype = {
	__class__: hxsl__$Dce_Exit
};
var hxsl__$Dce_VarDeps = function(v) {
	this.v = v;
	this.used = false;
	this.deps = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Dce.VarDeps"] = hxsl__$Dce_VarDeps;
hxsl__$Dce_VarDeps.__name__ = "hxsl._Dce.VarDeps";
hxsl__$Dce_VarDeps.prototype = {
	__class__: hxsl__$Dce_VarDeps
};
var hxsl_Dce = function() {
};
$hxClasses["hxsl.Dce"] = hxsl_Dce;
hxsl_Dce.__name__ = "hxsl.Dce";
hxsl_Dce.prototype = {
	debug: function(msg,pos) {
	}
	,dce: function(shaders) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.vars;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				var i = this.get(v);
				if(v.kind == hxsl_VarKind.Input) {
					inputs.push(i);
				}
				var tmp;
				if(v.kind != hxsl_VarKind.Output) {
					var _g3 = v.type;
					tmp = _g3._hx_index == 16 && _g3.kind._hx_index == 1;
				} else {
					tmp = true;
				}
				if(tmp) {
					i.keep = true;
				}
			}
		}
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				this.check(f.expr,[],[]);
			}
		}
		var outExprs = [];
		do {
			var v = this.used.iterator();
			while(v.hasNext()) {
				var v1 = v.next();
				if(v1.keep) {
					this.markRec(v1);
				}
			}
			while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
			var _g = 0;
			while(_g < inputs.length) {
				var v2 = inputs[_g];
				++_g;
				this.markRec(v2);
			}
			outExprs = [];
			var _g1 = 0;
			while(_g1 < shaders.length) {
				var s = shaders[_g1];
				++_g1;
				var _g2 = 0;
				var _g3 = s.funs;
				while(_g2 < _g3.length) {
					var f = _g3[_g2];
					++_g2;
					outExprs.push(this.mapExpr(f.expr,false));
				}
			}
			this.markAsKeep = false;
			var _g4 = 0;
			while(_g4 < outExprs.length) {
				var e = outExprs[_g4];
				++_g4;
				this.checkBranches(e);
			}
		} while(this.markAsKeep);
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				f.expr = outExprs.shift();
			}
		}
		var v = this.used.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.used) {
				continue;
			}
			if(v1.v.kind == hxsl_VarKind.Input) {
				continue;
			}
			var _g = 0;
			while(_g < shaders.length) {
				var s = shaders[_g];
				++_g;
				HxOverrides.remove(s.vars,v1.v);
			}
		}
		return shaders.slice();
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,markRec: function(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		var d = v.deps.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			this.markRec(d1);
		}
	}
	,link: function(v,writeTo) {
		var vd = this.get(v);
		var _g = 0;
		while(_g < writeTo.length) {
			var w = writeTo[_g];
			++_g;
			if(w == null) {
				if(!vd.keep) {
					vd.keep = true;
					this.markAsKeep = true;
				}
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	,check: function(e,writeTo,isAffected) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			this.link(v,writeTo);
			break;
		case 4:
			var el = _g.el;
			var noWrite = [];
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				this.check(el[i],i < el.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			var _ge = _g.e1;
			var _ge1 = _g.e2;
			switch(_g.op._hx_index) {
			case 4:
				var _ge2 = _ge.e;
				switch(_ge2._hx_index) {
				case 1:
					var v = _ge2.v;
					var e1 = _ge1;
					var v1 = this.get(v);
					writeTo.push(v1);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v1) < 0) {
						isAffected.push(v1);
					}
					break;
				case 9:
					var _ge3 = _ge2.e.e;
					if(_ge3._hx_index == 1) {
						var v = _ge3.v;
						var e1 = _ge1;
						var v1 = this.get(v);
						writeTo.push(v1);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						var _g1 = this;
						var writeTo1 = writeTo;
						var isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g1.check(e,writeTo1,isAffected1);
						});
					}
					break;
				case 16:
					var _ge3 = _ge2.e.e;
					if(_ge3._hx_index == 1) {
						var v = _ge3.v;
						var i = _ge2.index;
						var e1 = _ge1;
						var v1 = this.get(v);
						writeTo.push(v1);
						this.check(i,writeTo,isAffected);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						var _g2 = this;
						var writeTo2 = writeTo;
						var isAffected2 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g2.check(e,writeTo2,isAffected2);
						});
					}
					break;
				default:
					var _g3 = this;
					var writeTo3 = writeTo;
					var isAffected3 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g3.check(e,writeTo3,isAffected3);
					});
				}
				break;
			case 20:
				var _ge2 = _ge.e;
				switch(_ge2._hx_index) {
				case 1:
					var v = _ge2.v;
					var e1 = _ge1;
					var v1 = this.get(v);
					writeTo.push(v1);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v1) < 0) {
						isAffected.push(v1);
					}
					break;
				case 9:
					var _ge = _ge2.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						var e1 = _ge1;
						var v1 = this.get(v);
						writeTo.push(v1);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						var _g4 = this;
						var writeTo4 = writeTo;
						var isAffected4 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g4.check(e,writeTo4,isAffected4);
						});
					}
					break;
				case 16:
					var _ge = _ge2.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						var i = _ge2.index;
						var e1 = _ge1;
						var v1 = this.get(v);
						writeTo.push(v1);
						this.check(i,writeTo,isAffected);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						var _g5 = this;
						var writeTo5 = writeTo;
						var isAffected5 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g5.check(e,writeTo5,isAffected5);
						});
					}
					break;
				default:
					var _g6 = this;
					var writeTo6 = writeTo;
					var isAffected6 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g6.check(e,writeTo6,isAffected6);
					});
				}
				break;
			default:
				var _g7 = this;
				var writeTo7 = writeTo;
				var isAffected7 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g7.check(e,writeTo7,isAffected7);
				});
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			if(init != null) {
				writeTo.push(this.get(v));
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				var _g8 = this;
				var writeTo8 = writeTo;
				var isAffected8 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g8.check(e,writeTo8,isAffected8);
				});
			}
			break;
		case 8:
			var _gargs = _g.args;
			var _ge = _g.e.e;
			if(_ge._hx_index == 2) {
				switch(_ge.g._hx_index) {
				case 63:
					if(_gargs.length == 3) {
						var _ge = _gargs[0].e;
						if(_ge._hx_index == 1) {
							var _ge1 = _gargs[2].e;
							if(_ge1._hx_index == 0) {
								var _gc = _ge1.c;
								if(_gc._hx_index == 2) {
									var cid = _gc.v;
									var uv = _gargs[1];
									var c = _ge.v;
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g9 = this;
									var writeTo9 = writeTo;
									var isAffected9 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g9.check(e,writeTo9,isAffected9);
									});
								}
							} else {
								var _g10 = this;
								var writeTo10 = writeTo;
								var isAffected10 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g10.check(e,writeTo10,isAffected10);
								});
							}
						} else {
							var _g11 = this;
							var writeTo11 = writeTo;
							var isAffected11 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g11.check(e,writeTo11,isAffected11);
							});
						}
					} else {
						var _g12 = this;
						var writeTo12 = writeTo;
						var isAffected12 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g12.check(e,writeTo12,isAffected12);
						});
					}
					break;
				case 64:
					if(_gargs.length == 4) {
						var _ge = _gargs[0].e;
						if(_ge._hx_index == 1) {
							var _ge1 = _gargs[3].e;
							if(_ge1._hx_index == 0) {
								var _gc = _ge1.c;
								if(_gc._hx_index == 2) {
									var cid = _gc.v;
									var lod = _gargs[2];
									var uv = _gargs[1];
									var c = _ge.v;
									this.check(uv,writeTo,isAffected);
									this.check(lod,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g13 = this;
									var writeTo13 = writeTo;
									var isAffected13 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g13.check(e,writeTo13,isAffected13);
									});
								}
							} else {
								var _g14 = this;
								var writeTo14 = writeTo;
								var isAffected14 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g14.check(e,writeTo14,isAffected14);
								});
							}
						} else {
							var _g15 = this;
							var writeTo15 = writeTo;
							var isAffected15 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g15.check(e,writeTo15,isAffected15);
							});
						}
					} else {
						var _g16 = this;
						var writeTo16 = writeTo;
						var isAffected16 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g16.check(e,writeTo16,isAffected16);
						});
					}
					break;
				default:
					var _g17 = this;
					var writeTo17 = writeTo;
					var isAffected17 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g17.check(e,writeTo17,isAffected17);
					});
				}
			} else {
				var _g18 = this;
				var writeTo18 = writeTo;
				var isAffected18 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g18.check(e,writeTo18,isAffected18);
				});
			}
			break;
		case 10:
			var e1 = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			var affect = [];
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			var len = affect.length;
			var _g19 = 0;
			while(_g19 < writeTo.length) {
				var v = writeTo[_g19];
				++_g19;
				if(affect.indexOf(v) < 0) {
					affect.push(v);
				}
			}
			this.check(e1,affect,isAffected);
			var _g19 = 0;
			var _g20 = len;
			while(_g19 < _g20) {
				var i = _g19++;
				var v = affect[i];
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var affect = [];
			this.check(loop,writeTo,affect);
			this.check(it,affect,isAffected);
			var _g = 0;
			while(_g < affect.length) {
				var v = affect[_g];
				++_g;
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		default:
			var _g = this;
			var writeTo19 = writeTo;
			var isAffected19 = isAffected;
			hxsl_Tools.iter(e,function(e) {
				_g.check(e,writeTo19,isAffected19);
			});
		}
	}
	,checkBranches: function(e) {
		var _g = e.e;
		if(_g._hx_index == 10) {
			var cond = _g.econd;
			var writeTo = [null];
			this.check(cond,writeTo,[]);
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			var _ge = _g.e1;
			switch(_g.op._hx_index) {
			case 4:
				var _ge1 = _ge.e;
				switch(_ge1._hx_index) {
				case 1:
					var v = _ge1.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _ge2 = _ge1.e.e;
					if(_ge2._hx_index == 1) {
						var v = _ge2.v;
						if(!this.get(v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 16:
					var _ge2 = _ge1.e.e;
					if(_ge2._hx_index == 1) {
						var v = _ge2.v;
						if(!this.get(v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			case 20:
				var _ge1 = _ge.e;
				switch(_ge1._hx_index) {
				case 1:
					var v = _ge1.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _ge = _ge1.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						if(!this.get(v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 16:
					var _ge = _ge1.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						if(!this.get(v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 7:
			var v = _g.v;
			if(!this.get(v).used) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 8:
			var _gargs = _g.args;
			var _ge = _g.e.e;
			if(_ge._hx_index == 2) {
				switch(_ge.g._hx_index) {
				case 63:
					if(_gargs.length == 3) {
						var _ge = _gargs[2].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var uv = _gargs[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 64:
					if(_gargs.length == 4) {
						var _ge = _gargs[3].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var lod = _gargs[2];
								var uv = _gargs[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureLod), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 65:
					switch(_gargs.length) {
					case 3:
						var _ge = _gargs[2].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var pos = _gargs[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 4:
						var _ge = _gargs[3].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var lod = _gargs[2];
								var pos = _gargs[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 66:
					switch(_gargs.length) {
					case 2:
						var _ge = _gargs[1].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureSize), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p}]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 3:
						var _ge = _gargs[2].e;
						if(_ge._hx_index == 0) {
							var _gc = _ge.c;
							if(_gc._hx_index == 2) {
								var cid = _gc.v;
								var lod = _gargs[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureSize), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 10:
			var e1 = _g.econd;
			var econd = _g.eif;
			var eelse = _g.eelse;
			var e2 = this.mapExpr(e1,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e2.t, p : e2.p};
			}
			return { e : hxsl_TExprDef.TIf(e2,econd1,eelse1), p : e2.p, t : e2.t};
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v,it1,loop1), p : e.p, t : e.t};
		default:
			return hxsl_Tools.map(e,function(e) {
				return _gthis.mapExpr(e,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_Eval = function() {
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Eval"] = hxsl_Eval;
hxsl_Eval.__name__ = "hxsl.Eval";
hxsl_Eval.prototype = {
	setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		v2 = { id : v.type._hx_index == 17 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		var _g = v2.type;
		switch(_g._hx_index) {
		case 13:
			var vl = _g.vl;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < vl.length) {
				var v = vl[_g2];
				++_g2;
				_g1.push(this.mapVar(v));
			}
			v2.type = hxsl_Type.TStruct(_g1);
			break;
		case 15:
			var _gsize = _g.size;
			if(_gsize._hx_index == 1) {
				var vs = _gsize.v;
				var t = _g.t;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _gc = c.c;
						if(_gc._hx_index == 2) {
							var v = _gc.v;
							var _g1 = v2.type;
							var tmp;
							switch(_g1._hx_index) {
							case 15:
								tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v));
								break;
							case 16:
								var kind = _g1.kind;
								tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v),kind);
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							v2.type = tmp;
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g1 = v2.type;
					var tmp;
					switch(_g1._hx_index) {
					case 15:
						tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2));
						break;
					case 16:
						var kind = _g1.kind;
						tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2),kind);
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
					v2.type = tmp;
				}
			}
			break;
		case 16:
			var _gsize = _g.size;
			if(_gsize._hx_index == 1) {
				var vs = _gsize.v;
				var t = _g.t;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _gc = c.c;
						if(_gc._hx_index == 2) {
							var v = _gc.v;
							var _g = v2.type;
							var tmp;
							switch(_g._hx_index) {
							case 15:
								tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v));
								break;
							case 16:
								var kind = _g.kind;
								tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v),kind);
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							v2.type = tmp;
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g = v2.type;
					var tmp;
					switch(_g._hx_index) {
					case 15:
						tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2));
						break;
					case 16:
						var kind = _g.kind;
						tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2),kind);
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
					v2.type = tmp;
				}
			}
			break;
		default:
		}
		return v2;
	}
	,checkSamplerRec: function(t) {
		if(hxsl_Tools.isSampler(t)) {
			return true;
		}
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				if(this.checkSamplerRec(v.type)) {
					return true;
				}
			}
			return false;
		case 15:
			var t1 = t.t;
			return this.checkSamplerRec(t1);
		case 16:
			return true;
		default:
		}
		return false;
	}
	,needsInline: function(f) {
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(this.checkSamplerRec(a.type)) {
				return true;
			}
		}
		return false;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref);
			var _g2 = [];
			var _g3 = 0;
			var _g4 = f.args;
			while(_g3 < _g4.length) {
				var a = _g4[_g3];
				++_g3;
				_g2.push(this.mapVar(a));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(f.kind == hxsl_FunctionKind.Helper && this.inlineCalls || this.needsInline(f21)) {
				this.funMap.set(f21.ref,f);
			} else {
				funs.push(f21);
			}
		}
		var _g = 0;
		var _g1 = funs.length;
		while(_g < _g1) {
			var i = _g++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.mapVar(v));
		}
		return { name : s1, vars : _g, funs : funs};
	}
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		if(e.e._hx_index == 12) {
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g._hx_index) {
		case 3:
			var v = _g.e;
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g.el;
			var i = 0;
			var last = el.length;
			var out = [];
			_hx_loop1: while(i < last) {
				var e1 = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e1,isFinal));
				} else {
					var _g1 = e1.e;
					switch(_g1._hx_index) {
					case 10:
						if(_g1.eelse == null) {
							var eif = _g1.eif;
							var econd = _g1.econd;
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e1));
							}
						} else {
							out.push(this.handleReturn(e1));
						}
						break;
					case 12:
						var e2 = _g1.e;
						out.push(this.handleReturn(e2,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e1));
					}
				}
			}
			var t = isFinal ? out.length == 0 ? hxsl_Type.TVoid : out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var cond = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif1 = this.handleReturn(eif,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif1,this.handleReturn(eelse,isFinal)), t : eif1.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v = _g.e;
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 38:
			if(args.length == 1) {
				var _ge = args[0].e;
				if(_ge._hx_index == 0) {
					var _gc = _ge.c;
					if(_gc._hx_index == 2) {
						var i = _gc.v;
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 63:case 64:
			var i;
			var _g = args[0].e;
			if(_g._hx_index == 0) {
				var _gc = _g.c;
				if(_gc._hx_index == 2) {
					var i1 = _gc.v;
					i = i1;
				} else {
					hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw haxe_Exception.thrown("assert");
				}
			} else {
				hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw haxe_Exception.thrown("assert");
			}
			var channel = oldArgs[0];
			var _g = channel.e;
			var channel1;
			if(_g._hx_index == 1) {
				var v = _g.v;
				channel1 = hxsl_TExprDef.TVar(this.mapVar(v));
			} else {
				throw haxe_Exception.thrown("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			var count;
			var _g = channel.t;
			if(_g._hx_index == 17) {
				var i1 = _g.size;
				count = i1;
			} else {
				throw haxe_Exception.thrown("assert");
			}
			var channelMode = Type.createEnumIndex(hxsl_Channel,i & 7,null);
			var targs = [channel];
			var _g = 1;
			var _g1 = args.length;
			while(_g < _g1) {
				var i1 = _g++;
				targs.push(args[i1]);
			}
			targs.push({ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i >> 3)), t : hxsl_Type.TInt, p : pos});
			var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},targs), t : hxsl_Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				var tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X];
						break;
					case 2:
						tmp = [hxsl_Component.Y];
						break;
					case 3:
						tmp = [hxsl_Component.Z];
						break;
					case 4:
						tmp = [hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 3:
						tmp = [hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl_TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
			}
			break;
		case 67:
			var args1 = args;
			var _g = 0;
			while(_g < args1.length) {
				var a = args1[_g];
				++_g;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,ifBlock: function(e) {
		if(e == null || e.e._hx_index != 10) {
			return e;
		}
		return { e : hxsl_TExprDef.TBlock([e]), t : e.t, p : e.p};
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var d;
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			d = e.e;
			break;
		case 1:
			var v = _g.v;
			var c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v);
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 2:
			d = e.e;
			break;
		case 3:
			var e1 = _g.e;
			var e2 = this.evalExpr(e1,isVal);
			d = e2.e._hx_index == 0 ? e2.e : hxsl_TExprDef.TParenthesis(e2);
			break;
		case 4:
			var el = _g.el;
			var out = [];
			var last = el.length - 1;
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var isVal1 = isVal && i == last;
				var e1 = this.evalExpr(el[i],isVal1);
				switch(e1.e._hx_index) {
				case 0:
					if(isVal1) {
						out.push(e1);
					}
					break;
				case 1:
					if(isVal1) {
						out.push(e1);
					}
					break;
				default:
					out.push(e1);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			switch(op._hx_index) {
			case 0:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 3) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a + b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 1:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a * b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 3) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a * b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 2:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a / b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 3) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a / b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 3:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a - b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 3) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a - b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 4:case 21:
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			case 5:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 6:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 7:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 8:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 9:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 10:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _gc1.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							switch(_gc1._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _gc1.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _gv = _gc.v;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							switch(_gc._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _gc.v;
								var a = _gv;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 11:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a & b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 12:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a | b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 13:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a ^ b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 14:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 1) {
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							if(_gc._hx_index == 1) {
								var b = _gc.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a && b));
							} else {
								var a = _gb;
								d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _gb;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g2._hx_index == 0) {
						var _gc = _g2.c;
						if(_gc._hx_index == 1) {
							var a = _gc.b;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g2._hx_index == 0) {
					var _gc = _g2.c;
					if(_gc._hx_index == 1) {
						var a = _gc.b;
						d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 15:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 1) {
						var _gb = _gc.b;
						if(_g2._hx_index == 0) {
							var _gc = _g2.c;
							if(_gc._hx_index == 1) {
								var b = _gc.b;
								var a = _gb;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a || b));
							} else {
								var a = _gb;
								d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _gb;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g2._hx_index == 0) {
						var _gc = _g2.c;
						if(_gc._hx_index == 1) {
							var a = _gc.b;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g2._hx_index == 0) {
					var _gc = _g2.c;
					if(_gc._hx_index == 1) {
						var a = _gc.b;
						d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 16:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a << b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 17:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 18:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					if(_gc._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >>> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 19:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _gc = _g1.c;
					switch(_gc._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 2) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a % b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _gc1 = _g2.c;
							if(_gc1._hx_index == 3) {
								var b = _gc1.v;
								var a = _gc.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a % b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 20:
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 6:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = this.evalExpr(e1);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				switch(op._hx_index) {
				case 2:
					if(c._hx_index == 1) {
						var b = c.b;
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b));
					} else {
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				case 3:
					switch(c._hx_index) {
					case 2:
						var i = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i));
						break;
					case 3:
						var f = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op,e2);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op,e2);
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var c = _g.e;
			var eargs = _g.args;
			var c1 = this.evalExpr(c);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < eargs.length) {
				var a = eargs[_g2];
				++_g2;
				_g1.push(this.evalExpr(a));
			}
			var args = _g1;
			var _g1 = c1.e;
			switch(_g1._hx_index) {
			case 1:
				var v = _g1.v;
				if(this.funMap.h.__keys__[v.__id__] != null) {
					var f = this.funMap.h[v.__id__];
					var outExprs = [];
					var undo = [];
					var _g2 = 0;
					var _g3 = f.args.length;
					while(_g2 < _g3) {
						var i = _g2++;
						var v = [f.args[i]];
						var e1 = args[i];
						var _g4 = e1.e;
						switch(_g4._hx_index) {
						case 0:
							var old = [this.constants.h[v[0].id]];
							undo.push((function(old,v) {
								return function() {
									if(old[0] == null) {
										_gthis.constants.remove(v[0].id);
									} else {
										_gthis.constants.h[v[0].id] = old[0];
									}
								};
							})(old,v));
							this.constants.h[v[0].id] = e1.e;
							break;
						case 1:
							switch(_g4.v.kind._hx_index) {
							case 0:case 1:case 2:
								var old1 = [this.constants.h[v[0].id]];
								undo.push((function(old,v) {
									return function() {
										if(old[0] == null) {
											_gthis.constants.remove(v[0].id);
										} else {
											_gthis.constants.h[v[0].id] = old[0];
										}
									};
								})(old1,v));
								this.constants.h[v[0].id] = e1.e;
								break;
							default:
								var old2 = [this.varMap.h[v[0].__id__]];
								if(old2[0] == null) {
									undo.push((function(v) {
										return function() {
											_gthis.varMap.remove(v[0]);
										};
									})(v));
								} else {
									this.varMap.remove(v[0]);
									undo.push((function(old,v) {
										return function() {
											_gthis.varMap.set(v[0],old[0]);
										};
									})(old2,v));
								}
								var v2 = this.mapVar(v[0]);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v2,e1), t : hxsl_Type.TVoid, p : e1.p});
							}
							break;
						default:
							var old3 = [this.varMap.h[v[0].__id__]];
							if(old3[0] == null) {
								undo.push((function(v) {
									return function() {
										_gthis.varMap.remove(v[0]);
									};
								})(v));
							} else {
								this.varMap.remove(v[0]);
								undo.push((function(old,v) {
									return function() {
										_gthis.varMap.set(v[0],old[0]);
									};
								})(old3,v));
							}
							var v21 = this.mapVar(v[0]);
							outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e1), t : hxsl_Type.TVoid, p : e1.p});
						}
					}
					var e1 = this.handleReturn(this.evalExpr(f.expr,false),true);
					var _g2 = 0;
					while(_g2 < undo.length) {
						var u = undo[_g2];
						++_g2;
						u();
					}
					var _g2 = e1.e;
					if(_g2._hx_index == 4) {
						var el = _g2.el;
						var _g2 = 0;
						while(_g2 < el.length) {
							var e2 = el[_g2];
							++_g2;
							outExprs.push(e2);
						}
					} else {
						outExprs.push(e1);
					}
					d = hxsl_TExprDef.TBlock(outExprs);
				} else {
					d = hxsl_TExprDef.TCall(c1,args);
				}
				break;
			case 2:
				var g = _g1.g;
				var v1 = this.evalCall(g,args,eargs,e.p);
				d = v1 != null ? v1 : hxsl_TExprDef.TCall(c1,args);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c1) + "'",c1.p);
			}
			break;
		case 9:
			var e1 = _g.e;
			var r = _g.regs;
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e1),r.slice());
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			var econd1 = this.evalExpr(econd);
			var _g1 = econd1.e;
			if(_g1._hx_index == 0) {
				var _gc = _g1.c;
				if(_gc._hx_index == 1) {
					var b = _gc.b;
					d = b ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(eif,isVal);
					if(eelse != null) {
						eelse = this.evalExpr(eelse,isVal);
						var _g1 = eelse.e;
						if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
							eelse = null;
						}
					}
					eif = this.ifBlock(eif);
					eelse = this.ifBlock(eelse);
					d = hxsl_TExprDef.TIf(econd1,eif,eelse);
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(eif,isVal);
				if(eelse != null) {
					eelse = this.evalExpr(eelse,isVal);
					var _g1 = eelse.e;
					if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
						eelse = null;
					}
				}
				eif = this.ifBlock(eif);
				eelse = this.ifBlock(eelse);
				d = hxsl_TExprDef.TIf(econd1,eif,eelse);
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e1 = _g.e;
			d = hxsl_TExprDef.TReturn(e1 == null ? null : this.evalExpr(e1));
			break;
		case 13:
			var v1 = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var v2 = this.mapVar(v1);
			var it1 = this.evalExpr(it);
			var e1;
			var _g1 = it1.e;
			if(_g1._hx_index == 5) {
				if(_g1.op._hx_index == 21) {
					var _ge = _g1.e1.e;
					if(_ge._hx_index == 0) {
						var _gc = _ge.c;
						if(_gc._hx_index == 2) {
							var _ge = _g1.e2.e;
							if(_ge._hx_index == 0) {
								var _gc1 = _ge.c;
								if(_gc1._hx_index == 2) {
									var len = _gc1.v;
									var start = _gc.v;
									if(this.unrollLoops) {
										var out = [];
										var _g1 = start;
										var _g2 = len;
										while(_g1 < _g2) {
											var i = _g1++;
											this.constants.h[v1.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i));
											out.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v1.id);
										e1 = hxsl_TExprDef.TBlock(out);
									} else {
										e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
									}
								} else {
									e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
								}
							} else {
								e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
							}
						} else {
							e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
						}
					} else {
						e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
					}
				} else {
					e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
				}
			} else {
				e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
			}
			this.varMap.remove(v1);
			d = e1;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e1 = _g.e;
			var e2 = _g.index;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			var _g1 = e11.e;
			var _g2 = e21.e;
			if(_g1._hx_index == 17) {
				if(_g2._hx_index == 0) {
					var _gc = _g2.c;
					if(_gc._hx_index == 2) {
						var i = _gc.v;
						var el = _g1.el;
						d = i >= 0 && i < el.length ? el[i].e : hxsl_TExprDef.TArray(e11,e21);
					} else {
						d = hxsl_TExprDef.TArray(e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TArray(e11,e21);
				}
			} else {
				d = hxsl_TExprDef.TArray(e11,e21);
			}
			break;
		case 17:
			var el = _g.el;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < el.length) {
				var e1 = el[_g2];
				++_g2;
				_g1.push(this.evalExpr(e1));
			}
			d = hxsl_TExprDef.TArrayDecl(_g1);
			break;
		case 18:
			var e1 = _g.e;
			var cases = _g.cases;
			var def = _g.def;
			var e2 = this.evalExpr(e1);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < cases.length) {
				var c = cases[_g2];
				++_g2;
				var _g3 = [];
				var _g4 = 0;
				var _g5 = c.values;
				while(_g4 < _g5.length) {
					var v1 = _g5[_g4];
					++_g4;
					_g3.push(this.evalExpr(v1));
				}
				_g1.push({ values : _g3, expr : this.evalExpr(c.expr,isVal)});
			}
			var cases = _g1;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				if(c._hx_index == 2) {
					var val = c.v;
					var _g1 = 0;
					while(_g1 < cases.length) {
						var c1 = cases[_g1];
						++_g1;
						var _g2 = 0;
						var _g3 = c1.values;
						while(_g2 < _g3.length) {
							var v1 = _g3[_g2];
							++_g2;
							var _g4 = v1.e;
							if(_g4._hx_index == 0) {
								var cst = _g4.c;
								switch(cst._hx_index) {
								case 2:
									var k = cst.v;
									if(k == val) {
										return c1.expr;
									}
									break;
								case 3:
									var k1 = cst.v;
									if(k1 == val) {
										return c1.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw haxe_Exception.thrown("Unsupported switch constant " + Std.string(c));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e2,cases,def1) : def1 == null ? hxsl_TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			var cond = _g.e;
			var loop = _g.loop;
			var normalWhile = _g.normalWhile;
			var cond1 = this.evalExpr(cond);
			var loop1 = this.evalExpr(loop,false);
			d = hxsl_TExprDef.TWhile(cond1,this.ifBlock(loop1),normalWhile);
			break;
		case 20:
			var name = _g.m;
			var args = _g.args;
			var e1 = _g.e;
			var e2;
			if(name == "unroll") {
				var old4 = this.unrollLoops;
				this.unrollLoops = true;
				e2 = this.evalExpr(e1,isVal);
				this.unrollLoops = false;
			} else {
				e2 = this.evalExpr(e1,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args,e2);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
$hxClasses["hxsl._Flatten.Alloc"] = hxsl__$Flatten_Alloc;
hxsl__$Flatten_Alloc.__name__ = "hxsl._Flatten.Alloc";
hxsl__$Flatten_Alloc.prototype = {
	__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxEnums["hxsl.ARead"] = { __ename__:"hxsl.ARead",__constructs__:null
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr,__params__:function(){ return [this.a];}}; },$_._hx_name="AIndex",$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr,__params__:function(){ return [this.a,this.stride,this.delta];}}; },$_._hx_name="AOffset",$_)
};
hxsl_ARead.__constructs__ = [hxsl_ARead.AIndex,hxsl_ARead.AOffset];
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
$hxClasses["hxsl.Flatten"] = hxsl_Flatten;
hxsl_Flatten.__name__ = "hxsl.Flatten";
hxsl_Flatten.prototype = {
	flatten: function(s,kind) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.gatherVar(v);
		}
		var prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		case 4:
			prefix = "compute";
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		var textures = this.packTextures(prefix + "Textures",allVars,hxsl_Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl_Type.TSamplerCube)).concat(this.packTextures(prefix + "TexturesArray",allVars,hxsl_Type.TSampler2DArray));
		this.packBuffers("buffers",allVars,hxsl_BufferKind.Uniform);
		this.packBuffers("rwbuffers",allVars,hxsl_BufferKind.RW);
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.mapFun(f,$bind(this,this.mapExpr)));
		}
		var funs = _g;
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mapExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var a = this.varMap.h[v.__id__];
			if(a != null) {
				e = this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			}
			break;
		case 16:
			var _ge = _g.e;
			var _ge1 = _ge.e;
			if(_ge1._hx_index == 1) {
				var v = _ge1.v;
				var vp = _ge.p;
				var eindex = _g.index;
				var _g = eindex.e;
				if(!(_g._hx_index == 0 && _g.c._hx_index == 2)) {
					var a = this.varMap.h[v.__id__];
					if(a != null) {
						var _g = v.type;
						if(_g._hx_index == 15) {
							var _gt = _g.t;
							var t = _gt;
							if(hxsl_Tools.isSampler(t)) {
								eindex = this.toInt(this.mapExpr(eindex));
								e = this.access(a,t,vp,hxsl_ARead.AOffset(a,1,eindex));
							} else {
								var t = _gt;
								var stride = this.varSize(t,a.t);
								if(stride == 0 || (stride & 3) != 0) {
									throw haxe_Exception.thrown(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
								}
								stride >>= 2;
								eindex = this.toInt(this.mapExpr(eindex));
								e = this.access(a,t,vp,hxsl_ARead.AOffset(a,stride,stride == 1 ? eindex : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,eindex,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : vp}), t : hxsl_Type.TInt, p : vp}));
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,mkInt: function(v,pos) {
		return { e : hxsl_TExprDef.TConst(hxsl_Const.CInt(v)), t : hxsl_Type.TInt, p : pos};
	}
	,readIndex: function(a,index,pos) {
		var offs = a.t == null ? a.pos : a.pos >> 2;
		return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a.g), t : a.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a.t), p : pos};
	}
	,readOffset: function(a,stride,delta,index,pos) {
		var index1 = (a.t == null ? a.pos : a.pos >> 2) + index;
		var offset = index1 == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
		return { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a.g), t : a.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a.t), p : pos};
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t._hx_index) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4);
			var tmp1 = hxsl_Type.TFun([]);
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp5;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 3;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp, t : tmp1, p : pos},[tmp2,tmp3,tmp4,tmp5]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4);
			var tmp1 = hxsl_Type.TFun([]);
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp, t : tmp1, p : pos},[tmp2,tmp3,tmp4]), t : hxsl_Type.TMat3x4, p : pos};
		case 15:
			var _gsize = t.size;
			if(_gsize._hx_index == 0) {
				var len = _gsize.v;
				var t1 = t.t;
				var stride = a.size / len | 0;
				var _g = [];
				var _g1 = 0;
				var _g2 = len;
				while(_g1 < _g2) {
					var i = _g1++;
					var a1 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride * i,stride);
					_g.push(this.access(a1,t1,pos,hxsl_ARead.AIndex(a1)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				if(hxsl_Tools.isSampler(t)) {
					var e;
					switch(acc._hx_index) {
					case 0:
						var a1 = acc.a;
						var offs = a1.t == null ? a1.pos : a1.pos >> 2;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					case 1:
						var a1 = acc.a;
						var stride = acc.stride;
						var delta = acc.delta;
						var index = a1.t == null ? a1.pos : a1.pos >> 2;
						var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					}
					e.t = t;
					return e;
				}
				var size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var a1 = acc.a;
					var stride = acc.stride;
					var delta = acc.delta;
					var index = a1.t == null ? a1.pos : a1.pos >> 2;
					var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				if(size == 4) {
					if(a.pos == -1) {
						return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TFun([]), p : pos},[{ e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0)), t : hxsl_Type.TFloat, p : pos}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : pos};
					}
					if((a.pos & 3) != 0) {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					var sw = [];
					var _g = 0;
					var _g1 = size;
					while(_g < _g1) {
						var i = _g++;
						sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
					}
					e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e.t = hxsl_Type.TFloat;
					e = this.toInt(e);
					break;
				case 5:
					if(t.t._hx_index == 0) {
						var size = t.size;
						e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
						e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					}
					break;
				default:
				}
				return e;
			}
			break;
		default:
			if(hxsl_Tools.isSampler(t)) {
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var a1 = acc.a;
					var stride = acc.stride;
					var delta = acc.delta;
					var index = a1.t == null ? a1.pos : a1.pos >> 2;
					var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				e.t = t;
				return e;
			}
			var size = this.varSize(t,a.t);
			if(size > 4) {
				return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
			}
			var e;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			if(size == 4) {
				if(a.pos == -1) {
					return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TFun([]), p : pos},[{ e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0)), t : hxsl_Type.TFloat, p : pos}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : pos};
				}
				if((a.pos & 3) != 0) {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				var sw = [];
				var _g = 0;
				var _g1 = size;
				while(_g < _g1) {
					var i = _g++;
					sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
				}
				e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
			}
			switch(t._hx_index) {
			case 1:
				e.t = hxsl_Type.TFloat;
				e = this.toInt(e);
				break;
			case 5:
				if(t.t._hx_index == 0) {
					var size = t.size;
					e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
					e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
				}
				break;
			default:
			}
			return e;
		}
	}
	,toInt: function(e) {
		if(e.t == hxsl_Type.TInt) {
			return e;
		}
		return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : e.p},[e]), t : hxsl_Type.TInt, p : e.p};
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 8:
			var _gargs = _g.args;
			var _ge = _g.e.e;
			if(_ge._hx_index == 2) {
				if(_ge.g._hx_index == 52) {
					if(_gargs.length == 1) {
						var _ge = _gargs[0].e;
						if(_ge._hx_index == 8) {
							var _ge1 = _ge.e.e;
							if(_ge1._hx_index == 2) {
								if(_ge1.g._hx_index == 51) {
									var args = _ge.args;
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g2 = rem;
										while(_g1 < _g2) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g1 = e.e;
										if(_g1._hx_index == 8) {
											var e1 = _g1.e;
											emat = e1;
										} else {
											throw haxe_Exception.thrown("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			var _ge = _g.e.e;
			if(_ge._hx_index == 17) {
				var _ge1 = _g.index.e;
				if(_ge1._hx_index == 0) {
					var _gc = _ge1.c;
					if(_gc._hx_index == 2) {
						var i = _gc.v;
						var el = _ge.el;
						if(i >= 0 && i < el.length) {
							return el[i];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var pos = 0;
		var samplers = [];
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var count = 1;
			if(v.type != t) {
				var _g1 = v.type;
				switch(_g1._hx_index) {
				case 15:
					var _gsize = _g1.size;
					if(_gsize._hx_index == 0) {
						var n = _gsize.v;
						var t2 = _g1.t;
						if(t2 == t) {
							count = n;
						} else {
							continue;
						}
					} else {
						continue;
					}
					break;
				case 17:
					if(t != hxsl_Type.TSampler2D) {
						continue;
					}
					break;
				default:
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,pos,count);
			a.v = v;
			if(v.qualifiers != null) {
				var _g2 = 0;
				var _g3 = v.qualifiers;
				while(_g2 < _g3.length) {
					var q = _g3[_g2];
					++_g2;
					if(q._hx_index == 12) {
						var name = q.name;
						var _g4 = 0;
						var _g5 = count;
						while(_g4 < _g5) {
							var i = _g4++;
							samplers[pos + i] = name;
						}
					}
				}
			}
			this.varMap.set(v,a);
			alloc.push(a);
			pos += count;
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(pos));
		if(samplers.length > 0) {
			var _g = 0;
			var _g1 = pos;
			while(_g < _g1) {
				var i = _g++;
				if(samplers[i] == null) {
					samplers[i] = "";
				}
			}
			if(g.qualifiers == null) {
				g.qualifiers = [];
			}
			g.qualifiers.push(hxsl_VarQualifier.Sampler(samplers.join(",")));
		}
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,packBuffers: function(name,vars,kind) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVoid, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			if(_g1._hx_index == 16) {
				var k = _g1.kind;
				if(kind == k) {
					var a = new hxsl__$Flatten_Alloc(g,null,alloc.length,1);
					a.v = v;
					alloc.push(a);
					this.outVars.push(v);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TBuffer(hxsl_Type.TVoid,hxsl_SizeDecl.SConst(0),kind),hxsl_SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			if(hxsl_Tools.isSampler(v.type) || v.type._hx_index == 16) {
				continue;
			}
			var _g1 = v.type;
			if(_g1._hx_index == 15) {
				var t1 = _g1.t;
				if(hxsl_Tools.isSampler(t1)) {
					continue;
				}
			}
			var size = this.varSize(v.type,t);
			if(size == 0) {
				var a = new hxsl__$Flatten_Alloc(g,t,-1,size);
				a.v = v;
				this.varMap.set(v,a);
				continue;
			}
			var best = null;
			var _g2 = 0;
			while(_g2 < alloc.length) {
				var a1 = alloc[_g2];
				++_g2;
				if(a1.v == null && a1.size >= size && (best == null || best.size > a1.size)) {
					best = a1;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = alloc.indexOf(best);
					var a2 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a2);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a3 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a3.v = v;
				this.varMap.set(v,a3);
				alloc.push(a3);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a4 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a4);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var n = v.size;
			var t2 = v.t;
			if(t == t2) {
				return n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 15:
			var _gsize = v.size;
			if(_gsize._hx_index == 0) {
				var n = _gsize.v;
				var at = v.t;
				return this.varSize(at,t) * n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,gatherVar: function(v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.gatherVar(v1);
			}
		} else {
			switch(v.kind._hx_index) {
			case 0:
				if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl_GlobalSlot = {};
hxsl_GlobalSlot._new = function(name) {
	return hxsl_Globals.allocID(name);
};
hxsl_GlobalSlot.toInt = function(this1) {
	return this1;
};
hxsl_GlobalSlot.set = function(this1,globals,v) {
	globals.map.h[this1] = v;
};
hxsl_GlobalSlot.get = function(this1,globals) {
	return globals.map.h[this1];
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Globals"] = hxsl_Globals;
hxsl_Globals.__name__ = "hxsl.Globals";
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var id = hxsl_Globals.MAP.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		hxsl_Globals.MAP.h[path] = id;
	}
	return id;
};
hxsl_Globals.getIDName = function(id) {
	return hxsl_Globals.ALL[id];
};
hxsl_Globals.prototype = {
	set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,get: function(path) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		return this1.h[key];
	}
	,fastSet: function(id,v) {
		this.map.h[id] = v;
	}
	,fastGet: function(id) {
		return this.map.h[id];
	}
	,resetChannels: function() {
		this.maxChannels = 0;
	}
	,allocChannelID: function(t) {
		var _g = 0;
		var _g1 = this.maxChannels;
		while(_g < _g1) {
			var i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw haxe_Exception.thrown("Too many unique channels");
		}
		var i = this.maxChannels++;
		this.channels[i] = t;
		return i;
	}
	,__class__: hxsl_Globals
};
var hxsl_GlslOut = function() {
	this.outIndex = 0;
	this.uniformBuffer = 0;
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
};
$hxClasses["hxsl.GlslOut"] = hxsl_GlslOut;
hxsl_GlslOut.__name__ = "hxsl.GlslOut";
hxsl_GlslOut.compile = function(s) {
	var out = new hxsl_GlslOut();
	out.glES = 1;
	out.version = 100;
	return out.run(s);
};
hxsl_GlslOut.prototype = {
	get_isES: function() {
		return this.glES != null;
	}
	,get_isES2: function() {
		if(this.glES != null) {
			return this.glES <= 2;
		} else {
			return false;
		}
	}
	,add: function(v) {
		this.buf.b += Std.string(v);
	}
	,ident: function(v) {
		var v1 = this.varName(v);
		this.buf.b += Std.string(v1);
	}
	,decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,addType: function(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += Std.string("void");
			break;
		case 1:
			this.buf.b += Std.string("int");
			break;
		case 2:
			this.buf.b += Std.string("bool");
			break;
		case 3:
			this.buf.b += Std.string("float");
			break;
		case 4:
			this.buf.b += Std.string("string");
			break;
		case 5:
			var size = t.size;
			var k = t.t;
			switch(k._hx_index) {
			case 0:
				this.buf.b += Std.string("i");
				break;
			case 1:
				break;
			case 2:
				this.buf.b += Std.string("b");
				break;
			}
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += Std.string("mat3");
			break;
		case 7:
			this.buf.b += Std.string("mat4");
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += Std.string("_mat3x4");
			break;
		case 9:
			var n = t.size;
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(n);
			break;
		case 10:
			this.buf.b += Std.string("sampler2D");
			break;
		case 11:
			this.buf.b += Std.string("sampler2DArray");
			if(this.glES != null) {
				this.decl("precision lowp sampler2DArray;");
			}
			break;
		case 12:
			this.buf.b += Std.string("samplerCube");
			break;
		case 13:
			var vl = t.vl;
			this.buf.b += Std.string("struct { ");
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += Std.string(";");
			}
			this.buf.b += Std.string(" }");
			break;
		case 14:
			this.buf.b += Std.string("function");
			break;
		case 15:
			var t1 = t.t;
			var size = t.size;
			this.addType(t1);
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _gv = size.v;
				if(_gv == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var v = _gv;
						this.buf.b += Std.string(v);
					}
				} else {
					var v = _gv;
					this.buf.b += Std.string(v);
				}
				break;
			case 1:
				var v = size.v;
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			throw haxe_Exception.thrown("assert");
		case 17:
			var n = t.size;
			this.buf.b += Std.string("channel" + n);
			break;
		case 18:
			this.buf.b += Std.string("mat2");
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 15:
			var t = _g.t;
			var size = _g.size;
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _gv = size.v;
				if(_gv == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var n = _gv;
						this.buf.b += Std.string(n);
					}
				} else {
					var n = _gv;
					this.buf.b += Std.string(n);
				}
				break;
			case 1:
				var v1 = size.v;
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var t = _g.t;
			var size = _g.size;
			var kind = _g.kind;
			if(kind != hxsl_BufferKind.Uniform) {
				throw haxe_Exception.thrown("TODO");
			}
			this.buf.b += Std.string((this.isVertex ? "vertex_" : "") + "uniform_buffer" + this.uniformBuffer++);
			this.buf.b += Std.string(" { ");
			v.type = hxsl_Type.TArray(t,size);
			this.addVar(v);
			v.type = hxsl_Type.TBuffer(t,size,kind);
			this.buf.b += Std.string("; }");
			break;
		default:
			this.addType(v.type);
			this.buf.b += Std.string(" ");
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var name = "val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += Std.string(" ");
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("(void)");
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("()");
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buf.b += Std.string("( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(" ) ? ");
			this.addValue(eif,tabs);
			this.buf.b += Std.string(" : ");
			this.addValue(eelse,tabs);
			break;
		case 20:
			var e1 = _g.e;
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,getFunName: function(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl_Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 33:
			switch(args[0].t._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					return "textureCube";
				}
				break;
			case 17:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 34:
			switch(args[0].t._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "textureCubeLodEXT";
				}
				break;
			case 17:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 35:
			return "texelFetch";
		case 36:
			switch(args[0].t._hx_index) {
			case 10:
				this.decl("vec2 _textureSize(sampler2D sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
				break;
			case 11:
				this.decl("vec3 _textureSize(sampler2DArray sampler, int lod) { return vec3(textureSize(sampler, lod)); }");
				break;
			case 12:
				this.decl("vec2 _textureSize(samplerCube sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
				break;
			case 17:
				this.decl("vec2 _textureSize(sampler2D sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
				break;
			default:
			}
			return "_textureSize";
		case 50:
			if(args[0].t == hxsl_Type.TMat3x4) {
				this.decl(hxsl_GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 52:
			this.decl(hxsl_GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 54:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 55:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 56:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 57:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 58:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 59:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 60:case 61:case 62:
			if(this.isVertex) {
				throw haxe_Exception.thrown("Can't use " + Std.string(g) + " in vertex shader");
			}
			if(this.version < 300) {
				this.decl("#extension GL_OES_standard_derivatives:enable");
			}
			break;
		case 73:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			this.decl("int _floatBitsToUint( float v) { return int(floatBitsToUint(v)); }");
			this.decl("ivec2 _floatBitsToUint( vec2 v ) { return ivec2(floatBitsToUint(v)); }");
			this.decl("ivec3 _floatBitsToUint( vec3 v ) { return ivec3(floatBitsToUint(v)); }");
			this.decl("ivec4 _floatBitsToUint( vec4 v ) { return ivec4(floatBitsToUint(v)); }");
			break;
		case 72:case 74:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			break;
		case 75:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			this.decl("float _uintBitsToFloat( int v ) { return uintBitsToFloat(uint(v)); }");
			this.decl("vec2 _uintBitsToFloat( ivec2 v ) { return uintBitsToFloat(uvec2(v)); }");
			this.decl("vec3 _uintBitsToFloat( ivec3 v ) { return uintBitsToFloat(uvec3(v)); }");
			this.decl("vec4 _uintBitsToFloat( ivec4 v ) { return uintBitsToFloat(uvec4(v)); }");
			break;
		default:
		}
		return hxsl_GlslOut.GLOBALS[g._hx_index];
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				this.buf.b += Std.string("null");
				break;
			case 1:
				var b = c.b;
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c.v;
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c.v;
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += Std.string(".");
				}
				break;
			case 4:
				var v = c.v;
				this.buf.b += Std.string("\"" + v + "\"");
				break;
			}
			break;
		case 1:
			var v = _g.v;
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
			break;
		case 2:
			var g = _g.g;
			this.buf.b += Std.string(hxsl_GlslOut.GLOBALS[g._hx_index]);
			break;
		case 3:
			var e1 = _g.e;
			this.buf.b += Std.string("(");
			this.addValue(e1,tabs);
			this.buf.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buf.b += Std.string("{\n");
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e1,t2);
				this.newLine(e1);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += Std.string("}");
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var _g1 = e1.t;
			var _g2 = e2.t;
			switch(op._hx_index) {
			case 1:
				if(_g1._hx_index == 5) {
					if(_g1.size == 3) {
						if(_g1.t._hx_index == 1) {
							if(_g2._hx_index == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								if(op._hx_index == 20) {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" = ");
								}
								this.buf.b += Std.string("m3x4mult(");
								this.addValue(e1,tabs);
								this.buf.b += Std.string(",");
								this.addValue(e2,tabs);
								this.buf.b += Std.string(")");
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 5:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 6:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 7:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 8:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 9:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 10:
				if(_g1._hx_index == 5) {
					if(_g2._hx_index == 5) {
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += Std.string("_ushr(");
				this.addValue(e1,tabs);
				this.buf.b += Std.string(",");
				this.addValue(e2,tabs);
				this.buf.b += Std.string(")");
				break;
			case 19:
				if(e.t != hxsl_Type.TInt) {
					if(op._hx_index == 20) {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" = ");
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 20:
				switch(op.op._hx_index) {
				case 1:
					if(_g1._hx_index == 5) {
						if(_g1.size == 3) {
							if(_g1.t._hx_index == 1) {
								if(_g2._hx_index == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									if(op._hx_index == 20) {
										this.addValue(e1,tabs);
										this.buf.b += Std.string(" = ");
									}
									this.buf.b += Std.string("m3x4mult(");
									this.addValue(e1,tabs);
									this.buf.b += Std.string(",");
									this.addValue(e2,tabs);
									this.buf.b += Std.string(")");
								} else {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" ");
									var v = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v);
									this.buf.b += Std.string(" ");
									this.addValue(e2,tabs);
								}
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl_Type.TInt) {
						if(op._hx_index == 20) {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" = ");
						}
						this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				default:
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			default:
				this.addValue(e1,tabs);
				this.buf.b += Std.string(" ");
				var v = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v);
				this.buf.b += Std.string(" ");
				this.addValue(e2,tabs);
			}
			break;
		case 6:
			var op = _g.op;
			var e1 = _g.e1;
			var v;
			switch(op._hx_index) {
			case 0:
				v = "++";
				break;
			case 1:
				v = "--";
				break;
			case 2:
				v = "!";
				break;
			case 3:
				v = "-";
				break;
			case 4:
				v = "~";
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			this.buf.b += Std.string(v);
			this.addValue(e1,tabs);
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			this.locals.h[v.id] = v;
			if(init != null) {
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				this.buf.b += Std.string(" = ");
				this.addValue(init,tabs);
			} else {
				this.buf.b += Std.string("/*var*/");
			}
			break;
		case 8:
			var _ge = _g.e;
			var _gargs = _g.args;
			var _ge1 = _ge.e;
			if(_ge1._hx_index == 2) {
				var _gg = _ge1.g;
				switch(_gg._hx_index) {
				case 35:
					var g = _gg;
					var args = _gargs;
					var v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					this.addValue(args[0],tabs);
					this.buf.b += Std.string(", ");
					this.addValue(args[1],tabs);
					if(args.length != 2) {
						this.buf.b += Std.string(", ");
						this.addValue(args[2],tabs);
						this.buf.b += Std.string(")");
					} else {
						this.buf.b += Std.string(", 0)");
					}
					break;
				case 36:
					var g = _gg;
					var args = _gargs;
					var v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					this.addValue(args[0],tabs);
					if(args.length != 1) {
						this.buf.b += Std.string(", ");
						this.addValue(args[1],tabs);
						this.buf.b += Std.string(")");
					} else {
						this.buf.b += Std.string(", 0)");
					}
					break;
				case 53:
					if(_gargs.length == 1) {
						var e1 = _gargs[0];
						this.buf.b += Std.string("clamp(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(", 0., 1.)");
					} else {
						var v = _ge;
						var args = _gargs;
						var _g1 = v.e;
						if(_g1._hx_index == 2) {
							var g = _g1.g;
							var v1 = this.getFunName(g,args,e.t);
							this.buf.b += Std.string(v1);
						} else {
							this.addValue(v,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g1 = 0;
						while(_g1 < args.length) {
							var e1 = args[_g1];
							++_g1;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e1,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				default:
					var v = _ge;
					var args = _gargs;
					var _g1 = v.e;
					if(_g1._hx_index == 2) {
						var g = _g1.g;
						var v1 = this.getFunName(g,args,e.t);
						this.buf.b += Std.string(v1);
					} else {
						this.addValue(v,tabs);
					}
					this.buf.b += Std.string("(");
					var first = true;
					var _g1 = 0;
					while(_g1 < args.length) {
						var e1 = args[_g1];
						++_g1;
						if(first) {
							first = false;
						} else {
							this.buf.b += Std.string(", ");
						}
						this.addValue(e1,tabs);
					}
					this.buf.b += Std.string(")");
				}
			} else {
				var v = _ge;
				var args = _gargs;
				var _g1 = v.e;
				if(_g1._hx_index == 2) {
					var g = _g1.g;
					var v1 = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v1);
				} else {
					this.addValue(v,tabs);
				}
				this.buf.b += Std.string("(");
				var first = true;
				var _g1 = 0;
				while(_g1 < args.length) {
					var e1 = args[_g1];
					++_g1;
					if(first) {
						first = false;
					} else {
						this.buf.b += Std.string(", ");
					}
					this.addValue(e1,tabs);
				}
				this.buf.b += Std.string(")");
			}
			break;
		case 9:
			var e1 = _g.e;
			var regs = _g.regs;
			if(e1.t._hx_index == 3) {
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					if(r != hxsl_Component.X) {
						throw haxe_Exception.thrown("assert");
					}
				}
				switch(regs.length) {
				case 1:
					this.addValue(e1,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += Std.string("_vec2(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += Std.string("_vec3(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += Std.string("_vec4(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
			} else {
				this.addValue(e1,tabs);
				this.buf.b += Std.string(".");
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					var _this = this.buf;
					var _this1 = _this.b;
					var tmp;
					switch(r._hx_index) {
					case 0:
						tmp = "x";
						break;
					case 1:
						tmp = "y";
						break;
					case 2:
						tmp = "z";
						break;
					case 3:
						tmp = "w";
						break;
					}
					_this.b = _this1 + Std.string(tmp);
				}
			}
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buf.b += Std.string("if( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(") ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += Std.string(";");
				}
				this.buf.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += Std.string("discard");
			break;
		case 12:
			var e1 = _g.e;
			if(e1 == null) {
				this.buf.b += Std.string("return");
			} else {
				this.buf.b += Std.string("return ");
				this.addValue(e1,tabs);
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.locals.h[v.id] = v;
			var _g1 = it.e;
			if(_g1._hx_index == 5) {
				if(_g1.op._hx_index == 21) {
					var e1 = _g1.e1;
					var e2 = _g1.e2;
					this.buf.b += Std.string("for(");
					this.buf.b += Std.string(v.name + "=");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(";" + v.name + "<");
					this.addValue(e2,tabs);
					this.buf.b += Std.string(";" + v.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 14:
			this.buf.b += Std.string("continue");
			break;
		case 15:
			this.buf.b += Std.string("break");
			break;
		case 16:
			var e1 = _g.e;
			var index = _g.index;
			this.addValue(e1,tabs);
			this.buf.b += Std.string("[");
			this.addValue(index,tabs);
			this.buf.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			var _g1 = e.t;
			if(_g1._hx_index == 15) {
				var t = _g1.t;
				this.addType(t);
			} else {
				throw haxe_Exception.thrown("assert");
			}
			this.buf.b += Std.string("[" + el.length + "]");
			this.buf.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buf.b += Std.string(", ");
				}
				this.addValue(e,tabs);
			}
			this.buf.b += Std.string(")");
			break;
		case 18:
			this.buf.b += Std.string("switch(...)");
			break;
		case 19:
			var _ge = _g.e;
			var _gloop = _g.loop;
			if(_g.normalWhile == false) {
				var loop = _gloop;
				var e = _ge;
				var old = tabs;
				tabs += "\t";
				this.buf.b += Std.string("do ");
				this.addBlock(loop,tabs);
				this.buf.b += Std.string(" while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" )");
			} else {
				var loop = _gloop;
				var e = _ge;
				this.buf.b += Std.string("while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" ) ");
				this.addBlock(loop,tabs);
			}
			break;
		case 20:
			var e = _g.e;
			this.addExpr(e,tabs);
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		if(v.kind == hxsl_VarKind.Var) {
			n += "_varying";
		}
		if(Object.prototype.hasOwnProperty.call(hxsl_GlslOut.KWDS.h,n)) {
			n = "_" + n;
		}
		if(Object.prototype.hasOwnProperty.call(this.allNames.h,n)) {
			var k = 2;
			n += "_";
			while(Object.prototype.hasOwnProperty.call(this.allNames.h,n + k)) ++k;
			n += k;
		}
		this.varNames.h[v.id] = n;
		this.allNames.h[n] = v.id;
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += Std.string("\n");
		} else {
			this.buf.b += Std.string(";\n");
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			return true;
		case 13:
			var loop = _g.loop;
			return this.isBlock(loop);
		case 19:
			if(_g.normalWhile == true) {
				var loop = _g.loop;
				return this.isBlock(loop);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,initVar: function(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			if(v.type._hx_index == 16) {
				this.buf.b += Std.string("layout(std140) ");
			}
			this.buf.b += Std.string("uniform ");
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += Std.string("out ");
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 6) {
					var p = q.p;
					switch(p._hx_index) {
					case 0:
						this.buf.b += Std.string("lowp ");
						break;
					case 1:
						this.buf.b += Std.string("mediump ");
						break;
					case 2:
						this.buf.b += Std.string("highp ");
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += Std.string(";\n");
	}
	,initVars: function(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += Std.string("\n");
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	,run: function(s) {
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		if(s.funs.length != 1) {
			throw haxe_Exception.thrown("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		if(this.isVertex) {
			this.decl("precision highp float;");
		} else {
			this.decl("precision mediump float;");
		}
		this.initVars(s);
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += Std.string("void main(void) {\n");
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g = 0;
			while(_g < el.length) {
				var e = el[_g];
				++_g;
				this.buf.b += Std.string("\t");
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		if(this.isVertex) {
			this.buf.b += Std.string("\tgl_Position.z += gl_Position.z - gl_Position.w;\n");
		}
		this.buf.b += Std.string("}");
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		var _g = 0;
		while(_g < locals.length) {
			var v = locals[_g];
			++_g;
			this.addVar(v);
			this.buf.b += Std.string(";\n");
		}
		this.buf.b += Std.string("\n");
		var _g = 0;
		var _g1 = this.exprValues;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			this.buf.b += Std.string(e);
			this.buf.b += Std.string("\n\n");
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
};
var hxsl__$Linker_AllocatedVar = function() {
};
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl__$Linker_AllocatedVar;
hxsl__$Linker_AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
hxsl__$Linker_AllocatedVar.prototype = {
	__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.uid = hxsl__$Linker_ShaderInfos.UID++;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.readMap = new haxe_ds_IntMap();
	this.readVars = [];
	this.writeMap = new haxe_ds_IntMap();
	this.writeVars = [];
};
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl__$Linker_ShaderInfos;
hxsl__$Linker_ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
hxsl__$Linker_ShaderInfos.prototype = {
	__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function(mode) {
	this.debugDepth = 0;
	this.mode = mode;
};
$hxClasses["hxsl.Linker"] = hxsl_Linker;
hxsl_Linker.__name__ = "hxsl.Linker";
hxsl_Linker.prototype = {
	debug: function(msg,pos) {
	}
	,error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p,shaderName) {
		switch(v.kind._hx_index) {
		case 2:
			if(!(shaderName != null && hxsl_Tools.hasBorrowQualifier(v2,shaderName))) {
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 6:
			throw haxe_Exception.thrown("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g = v.type;
		var _g1 = v2.type;
		if(_g._hx_index == 13) {
			if(_g1._hx_index == 13) {
				var fl2 = _g1.vl;
				var fl1 = _g.vl;
				var _g = 0;
				while(_g < fl1.length) {
					var f1 = fl1[_g];
					++_g;
					var ft = null;
					var _g1 = 0;
					while(_g1 < fl2.length) {
						var f2 = fl2[_g1];
						++_g1;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p,shaderName).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p,shaderName);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,shaderName,path,parent) {
		var _gthis = this;
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p,shaderName);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					var n = q.n;
					key = n;
				}
			}
		}
		var v2 = this.varMap.h[key];
		var vname = v.name;
		if(v2 != null) {
			var _g = 0;
			var _g1 = v2.merged;
			while(_g < _g1.length) {
				var vm = _g1[_g];
				++_g;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			var borrowed = hxsl_Tools.hasBorrowQualifier(v2.v,shaderName);
			if(!(v.kind == hxsl_VarKind.Param && !borrowed && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v.kind == hxsl_VarKind.Function || (v.kind == hxsl_VarKind.Var || v.kind == hxsl_VarKind.Local) && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				var borrowed = hxsl_Tools.hasBorrowQualifier(v,v2.rootShaderName);
				tmp = v1.kind == hxsl_VarKind.Param && !borrowed && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v1.kind == hxsl_VarKind.Function || (v1.kind == hxsl_VarKind.Var || v1.kind == hxsl_VarKind.Local) && hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				var k = 2;
				while(true) {
					var a = this.varMap.h[key + k];
					if(a == null) {
						break;
					}
					var _g = 0;
					var _g1 = a.merged;
					while(_g < _g1.length) {
						var vm = _g1[_g];
						++_g;
						if(vm == v) {
							return a;
						}
					}
					++k;
				}
				if(v.kind == hxsl_VarKind.Input) {
					var _this = this.varMap;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
					this.varMap.h[key + k] = v2;
					v2.v.name += k;
					v2.path += k;
				} else {
					vname += k;
					key += k;
				}
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p,v2.rootShaderName);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var v2 = { id : hxsl_Tools.allocVarId(), name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a = new hxsl__$Linker_AllocatedVar();
		a.v = v2;
		a.merged = [v];
		a.path = key;
		a.id = v2.id;
		a.parent = parent;
		a.instanceIndex = this.curInstance;
		a.rootShaderName = shaderName;
		this.allVars.push(a);
		this.varMap.h[key] = a;
		var _g = v2.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.allocVar(v,p,shaderName,key,a).v);
			}
			v2.type = hxsl_Type.TStruct(_g);
		}
		return a;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			if(!this.locals.h.hasOwnProperty(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
					if(!this.curShader.readMap.h.hasOwnProperty(v1.id)) {
						this.curShader.readMap.h[v1.id] = v1;
						this.curShader.readVars.push(v1);
					}
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var _g1 = e1.e;
			switch(op._hx_index) {
			case 4:
				switch(_g1._hx_index) {
				case 1:
					var _gv = _g1.v;
					var v = _gv;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e1.p);
						if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
							this.curShader.writeMap.h[v1.id] = v1;
							this.curShader.writeVars.push(v1);
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v = _gv;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					var _ge = _g1.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e11 = this.mapExprVar(e1);
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e11.p);
						if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
							this.curShader.writeMap.h[v1.id] = v1;
							this.curShader.writeVars.push(v1);
						}
						return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
					}
					break;
				case 9:
					var _ge = _g1.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.writeMap.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.readMap.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.readVars;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			this.buildDependency(s,r,s.writeMap.h.hasOwnProperty(r.id));
		}
		if(s.vertex == null) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == false) {
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == null) {
					d1.vertex = true;
				}
			}
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g = 0;
		while(_g < deps.length) {
			var d = deps[_g];
			++_g;
			this.collect(d,out,vertex);
		}
		if(cur.vertex == null) {
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			out.push(cur);
		}
		cur.onStack = false;
	}
	,link: function(shadersData) {
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = [];
		var _g = [];
		var _g_current = 0;
		var _g_array = shadersData;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var s = _g_value;
			if(shadersData.indexOf(s) < i) {
				var s2 = hxsl_Clone.shaderData(s);
				dupShaders.push({ origin : s, cloned : s2});
				_g.push(s2);
			} else {
				_g.push(s);
			}
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			this.isBatchShader = this.mode == hxsl_LinkMode.Batch && StringTools.startsWith(s.name,"batchShader_");
			var _g1 = 0;
			var _g2 = s.vars;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				var v2 = this.allocVar(v,null,s.name);
				if(this.isBatchShader && v2.v.kind == hxsl_VarKind.Param && !StringTools.startsWith(v2.path,"Batch_")) {
					v2.v.kind = hxsl_VarKind.Local;
				}
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g3 = 0;
			var _g4 = s.funs;
			while(_g3 < _g4.length) {
				var f = _g4[_g3];
				++_g3;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var initPrio_init = [-3000];
		var initPrio_vert = [-2000];
		var initPrio_frag = [-1000];
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				var v = this.allocVar(f.ref,f.expr.p);
				if(v.kind == null) {
					throw haxe_Exception.thrown("assert");
				}
				switch(v.kind._hx_index) {
				case 0:case 1:
					if(this.mode == hxsl_LinkMode.Compute) {
						var e = v.kind;
						throw haxe_Exception.thrown("Unexpected " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name.toLowerCase() + "() function in compute shader");
					}
					this.addShader(s.name + "." + (v.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v.kind == hxsl_FunctionKind.Vertex,f.expr,priority);
					break;
				case 2:
					var prio;
					var status;
					switch(f.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					var _g3 = f.expr.e;
					if(_g3._hx_index == 4) {
						var el = _g3.el;
						var index = 0;
						var _g4 = 0;
						while(_g4 < el.length) {
							var e1 = el[_g4];
							++_g4;
							this.addShader(s.name + "." + f.ref.name + index++,status,e1,prio[0]++);
						}
					} else {
						this.addShader(s.name + "." + f.ref.name,status,f.expr,prio[0]++);
					}
					break;
				case 3:
					throw haxe_Exception.thrown("Unexpected helper function in linker " + v.v.name);
				case 4:
					if(this.mode != hxsl_LinkMode.Compute) {
						throw haxe_Exception.thrown("Unexpected main() outside compute shader");
					}
					this.addShader(s.name,true,f.expr,priority).isCompute = true;
					break;
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var uid = 0;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.uid = uid++;
		}
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g = 0;
		while(_g < outVars.length) {
			var v = outVars[_g];
			++_g;
			this.buildDependency(entry,this.allocVar(v,null),false);
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.hasDiscard || s.isCompute) {
				this.initDependencies(s);
				entry.deps.set(s,true);
			}
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var _g2 = 0;
			var _g3 = s.readVars;
			while(_g2 < _g3.length) {
				var r = _g3[_g2];
				++_g2;
				if(r.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				s.vertex = false;
			}
		}
		var v = [];
		var f = [];
		this.collect(entry,v,true);
		this.collect(entry,f,false);
		if(f.pop() != entry) {
			throw haxe_Exception.thrown("assert");
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.marked = null;
		}
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s.name + " is unreachable",null);
				}
			}
			s.marked = true;
		}
		var outVars = [];
		var varMap_h = { };
		var addVar = null;
		addVar = function(v) {
			if(varMap_h.hasOwnProperty(v.id)) {
				return;
			}
			varMap_h[v.id] = true;
			if(v.v.parent != null) {
				addVar(v.parent);
			} else {
				outVars.push(v.v);
			}
		};
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = s.readVars;
			while(_g2 < _g3.length) {
				var v1 = _g3[_g2];
				++_g2;
				addVar(v1);
			}
			var _g4 = 0;
			var _g5 = s.writeVars;
			while(_g4 < _g5.length) {
				var v2 = _g5[_g4];
				++_g4;
				addVar(v2);
			}
		}
		var cleanVar = null;
		cleanVar = function(v) {
			var _g = v.type;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				if(v.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g = 0;
					while(_g < vl.length) {
						var v1 = vl[_g];
						++_g;
						if(varMap_h.hasOwnProperty(v1.id)) {
							cleanVar(v1);
							vout.push(v1);
						}
					}
					v.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var _g = 0;
		while(_g < outVars.length) {
			var v1 = outVars[_g];
			++_g;
			cleanVar(v1);
		}
		var build = function(kind,name,a) {
			var v = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars.push(v);
			var exprs = [];
			var _g = 0;
			while(_g < a.length) {
				var s = a[_g];
				++_g;
				var _g1 = s.body.e;
				if(_g1._hx_index == 4) {
					var el = _g1.el;
					var _g2 = 0;
					while(_g2 < el.length) {
						var e = el[_g2];
						++_g2;
						exprs.push(e);
					}
				} else {
					exprs.push(s.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			return { kind : kind, ref : v, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = this.mode == hxsl_LinkMode.Compute ? [build(hxsl_FunctionKind.Main,"main",v)] : [build(hxsl_FunctionKind.Vertex,"vertex",v),build(hxsl_FunctionKind.Fragment,"fragment",f)];
		var _g = 0;
		while(_g < dupShaders.length) {
			var d = dupShaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = d.cloned.vars.length;
			while(_g1 < _g2) {
				var i = _g1++;
				this.allocVar(d.cloned.vars[i],null).merged.unshift(d.origin.vars[i]);
			}
		}
		return { name : "out", vars : outVars, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
$hxClasses["hxsl.Printer"] = hxsl_Printer;
hxsl_Printer.__name__ = "hxsl.Printer";
hxsl_Printer.opStr = function(op) {
	switch(op._hx_index) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op.op;
		return Std.string(hxsl_Printer.opStr(op1)) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	default:
		return "??" + Std.string(op);
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.check = function(s,from) {
	try {
		var vars = new haxe_ds_IntMap();
		var regVars = [];
		var regVar = null;
		regVar = function(v,reg) {
			if(reg) {
				if(vars.h.hasOwnProperty(v.id)) {
					throw haxe_Exception.thrown("Duplicate var " + v.id);
				}
				vars.h[v.id] = v;
				regVars.push(v);
			} else {
				vars.remove(v.id);
			}
			var _g = v.type;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				var _g = 0;
				while(_g < vl.length) {
					var v = vl[_g];
					++_g;
					regVar(v,reg);
				}
			}
		};
		var checkExpr = null;
		checkExpr = function(e) {
			var _g = e.e;
			switch(_g._hx_index) {
			case 1:
				var v = _g.v;
				if(!vars.h.hasOwnProperty(v.id)) {
					throw haxe_Exception.thrown("Unbound var " + v.name + "@" + v.id);
				}
				break;
			case 4:
				var el = _g.el;
				var old = regVars;
				regVars = [];
				var _g1 = 0;
				while(_g1 < el.length) {
					var e1 = el[_g1];
					++_g1;
					checkExpr(e1);
				}
				var _g1 = 0;
				while(_g1 < regVars.length) {
					var v = regVars[_g1];
					++_g1;
					regVar(v,false);
				}
				regVars = old;
				break;
			case 7:
				var v = _g.v;
				var init = _g.init;
				if(init != null) {
					checkExpr(init);
				}
				regVar(v,true);
				break;
			case 13:
				var v = _g.v;
				var it = _g.it;
				var loop = _g.loop;
				checkExpr(it);
				regVar(v,true);
				checkExpr(loop);
				regVar(v,false);
				break;
			default:
				hxsl_Tools.iter(e,checkExpr);
			}
		};
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			regVar(v,true);
		}
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = f.args;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				regVar(v,true);
			}
			checkExpr(f.expr);
			var _g4 = 0;
			var _g5 = f.args;
			while(_g4 < _g5.length) {
				var v1 = _g5[_g4];
				++_g4;
				regVar(v1,false);
			}
		}
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		if(typeof(_g1) == "string") {
			var e = _g1;
			var msg = e + "\n    in\n" + hxsl_Printer.shaderToString(s,true);
			if(from != null) {
				var _g1 = [];
				var _g2 = 0;
				while(_g2 < from.length) {
					var s = from[_g2];
					++_g2;
					_g1.push(hxsl_Printer.shaderToString(s,true));
				}
				msg += "\n    from\n\n" + _g1.join("\n\n");
			}
			throw haxe_Exception.thrown(msg);
		} else {
			throw _g;
		}
	}
};
hxsl_Printer.prototype = {
	add: function(v) {
		this.buffer.b += Std.string(v);
	}
	,shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,null);
			this.buffer.b += Std.string(";\n");
		}
		if(s.vars.length > 0) {
			this.buffer.b += Std.string("\n");
		}
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.addFun(f);
			this.buffer.b += Std.string("\n\n");
		}
		return this.buffer.b;
	}
	,varString: function(v) {
		this.buffer = new StringBuf();
		this.addVar(v,null);
		return this.buffer.b;
	}
	,funString: function(f) {
		this.buffer = new StringBuf();
		this.addFun(f);
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q.n;
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q.p;
					v1 = $hxEnums[p.__enum__].__constructs__[p._hx_index]._hx_name.toLowerCase() + "p";
					break;
				case 7:
					var min = q.min;
					var max1 = q.max;
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				case 9:
					var n1 = q.v;
					v1 = "perInstance(" + n1 + ")";
					break;
				case 10:
					var s = q.s;
					v1 = "doc(\"" + StringTools.replace(s,"\"","\\\"") + "\")";
					break;
				case 11:
					var s1 = q.source;
					v1 = "borrow(" + s1 + ")";
					break;
				case 12:
					var s2 = q.name;
					v1 = "sampler(" + s2 + ")";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += Std.string("@global ");
				break;
			case 1:
				this.buffer.b += Std.string("@input ");
				break;
			case 2:
				this.buffer.b += Std.string("@param ");
				break;
			case 3:
				this.buffer.b += Std.string("@varying ");
				break;
			case 4:
				this.buffer.b += Std.string("@local ");
				break;
			case 5:
				this.buffer.b += Std.string("@output ");
				break;
			case 6:
				this.buffer.b += Std.string("@function ");
				break;
			}
		}
		this.buffer.b += Std.string("var ");
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += Std.string(" : ");
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			this.buffer.b += Std.string("{");
			var first = true;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addVar(v1,v1.kind,tabs,v1);
			}
			this.buffer.b += Std.string("}");
		} else {
			var v1 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v1);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += Std.string(" ");
				first = false;
			} else {
				this.buffer.b += Std.string(", ");
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += Std.string(" ");
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += Std.string(".");
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c.b;
			tmp = b;
			break;
		case 2:
			var i = c.v;
			tmp = i;
			break;
		case 3:
			var f = c.v;
			tmp = f;
			break;
		case 4:
			var s = c.v;
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.addConst(c);
			break;
		case 1:
			var v = _g.v;
			this.addVarName(v);
			break;
		case 2:
			var g = _g.g;
			var v = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v);
			break;
		case 3:
			var e = _g.e;
			this.buffer.b += Std.string("(");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buffer.b += Std.string("{");
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(";");
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += Std.string("}");
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			this.addExpr(e1,tabs);
			var v = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v);
			this.addExpr(e2,tabs);
			break;
		case 6:
			var op = _g.op;
			var e = _g.e1;
			var v;
			switch(op._hx_index) {
			case 0:
				v = "++";
				break;
			case 1:
				v = "--";
				break;
			case 2:
				v = "!";
				break;
			case 3:
				v = "-";
				break;
			case 4:
				v = "~";
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			this.buffer.b += Std.string(v);
			this.addExpr(e,tabs);
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			this.addVar(v,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += Std.string(" = ");
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var e = _g.e;
			var el = _g.args;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		case 9:
			var e = _g.e;
			var regs = _g.regs;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(".");
			var _g1 = 0;
			while(_g1 < regs.length) {
				var r = regs[_g1];
				++_g1;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			var cond = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buffer.b += Std.string("if( ");
			this.addExpr(cond,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += Std.string("discard");
			break;
		case 12:
			var e = _g.e;
			this.buffer.b += Std.string("return");
			if(e != null) {
				this.buffer.b += Std.string(" ");
				this.addExpr(e,tabs);
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.buffer.b += Std.string("for( ");
			this.addVarName(v);
			this.buffer.b += Std.string(" in ");
			this.addExpr(it,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += Std.string("continue");
			break;
		case 15:
			this.buffer.b += Std.string("break");
			break;
		case 16:
			var e1 = _g.e;
			var e2 = _g.index;
			this.addExpr(e1,tabs);
			this.buffer.b += Std.string("[");
			this.addExpr(e2,tabs);
			this.buffer.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			this.buffer.b += Std.string("[");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string("]");
			break;
		case 18:
			var e = _g.e;
			var cases = _g.cases;
			var def = _g.def;
			this.buffer.b += Std.string("switch( ");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(") {");
			var old = tabs;
			var _g1 = 0;
			while(_g1 < cases.length) {
				var c = cases[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += Std.string("case ");
				var first = true;
				var _g2 = 0;
				var _g3 = c.values;
				while(_g2 < _g3.length) {
					var v = _g3[_g2];
					++_g2;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addExpr(v,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			var _ge = _g.e;
			var _gloop = _g.loop;
			if(_g.normalWhile == false) {
				var loop = _gloop;
				var e = _ge;
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(" )");
			} else {
				var loop = _gloop;
				var e = _ge;
				this.buffer.b += Std.string("while( ");
				this.addExpr(e,tabs);
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var m = _g.m;
			var args = _g.args;
			var e = _g.e;
			this.buffer.b += Std.string("@");
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += Std.string("(");
				var first = true;
				var _g = 0;
				while(_g < args.length) {
					var c = args[_g];
					++_g;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addConst(c);
				}
				this.buffer.b += Std.string(")");
			}
			this.buffer.b += Std.string(" ");
			this.addExpr(e,tabs);
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_LinkMode = $hxEnums["hxsl.LinkMode"] = { __ename__:"hxsl.LinkMode",__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"hxsl.LinkMode",toString:$estr}
	,Batch: {_hx_name:"Batch",_hx_index:1,__enum__:"hxsl.LinkMode",toString:$estr}
	,Compute: {_hx_name:"Compute",_hx_index:2,__enum__:"hxsl.LinkMode",toString:$estr}
};
hxsl_LinkMode.__constructs__ = [hxsl_LinkMode.Default,hxsl_LinkMode.Batch,hxsl_LinkMode.Compute];
hxsl_LinkMode.__empty_constructs__ = [hxsl_LinkMode.Default,hxsl_LinkMode.Batch,hxsl_LinkMode.Compute];
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
$hxClasses["hxsl.AllocParam"] = hxsl_AllocParam;
hxsl_AllocParam.__name__ = "hxsl.AllocParam";
hxsl_AllocParam.prototype = {
	clone: function(resetGID) {
		if(resetGID == null) {
			resetGID = false;
		}
		var p = new hxsl_AllocParam(this.name,this.pos,this.instance,this.index,this.type);
		if(this.perObjectGlobal != null) {
			p.perObjectGlobal = this.perObjectGlobal.clone(resetGID);
		}
		if(this.next != null) {
			p.next = this.next.clone(resetGID);
		}
		return p;
	}
	,__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
$hxClasses["hxsl.AllocGlobal"] = hxsl_AllocGlobal;
hxsl_AllocGlobal.__name__ = "hxsl.AllocGlobal";
hxsl_AllocGlobal.prototype = {
	clone: function(resetGID) {
		if(resetGID == null) {
			resetGID = false;
		}
		var g = new hxsl_AllocGlobal(this.pos,this.path,this.type);
		if(this.next != null) {
			g.next = this.next.clone(resetGID);
		}
		if(resetGID) {
			g.gid = 0;
		}
		return g;
	}
	,__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
$hxClasses["hxsl.RuntimeShaderData"] = hxsl_RuntimeShaderData;
hxsl_RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
hxsl_RuntimeShaderData.prototype = {
	__class__: hxsl_RuntimeShaderData
};
var hxsl_ShaderInstanceDesc = function(shader,bits) {
	this.shader = shader;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderInstanceDesc"] = hxsl_ShaderInstanceDesc;
hxsl_ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
hxsl_ShaderInstanceDesc.prototype = {
	__class__: hxsl_ShaderInstanceDesc
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
$hxClasses["hxsl.RuntimeShader"] = hxsl_RuntimeShader;
hxsl_RuntimeShader.__name__ = "hxsl.RuntimeShader";
hxsl_RuntimeShader.prototype = {
	get_compute: function() {
		return this.vertex;
	}
	,set_compute: function(v) {
		return this.vertex = v;
	}
	,hasGlobal: function(gid) {
		return this.globals.h.hasOwnProperty(gid);
	}
	,getShaders: function() {
		if(this.mode == hxsl_LinkMode.Compute) {
			return [this.vertex];
		} else {
			return [this.vertex,this.fragment];
		}
	}
	,__class__: hxsl_RuntimeShader
};
var hxsl_Serializer = function() {
	this.tid = 1;
	this.uid = 1;
};
$hxClasses["hxsl.Serializer"] = hxsl_Serializer;
hxsl_Serializer.__name__ = "hxsl.Serializer";
hxsl_Serializer.run = function(s) {
	return new hxsl_Serializer().serialize(s);
};
hxsl_Serializer.prototype = {
	writeArr: function(arr,f) {
		this.writeVarInt(arr.length);
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			f(v);
		}
	}
	,readArr: function(f) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return _g;
	}
	,readVarInt: function() {
		var b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	,writeVarInt: function(id) {
		if(id < 128) {
			this.out.addByte(id);
		} else {
			var n = id >> 8;
			if(n >= 127) {
				this.out.addByte(255);
				this.out.addInt32(n);
			} else {
				this.out.addByte(n | 128);
				this.out.addByte(id & 255);
			}
		}
	}
	,writeID: function(id) {
		var id2 = this.idMap.h[id];
		if(id2 == null) {
			id2 = this.uid++;
			this.idMap.h[id] = id2;
		}
		this.writeVarInt(id2);
	}
	,readID: function() {
		return this.readVarInt();
	}
	,writeTID: function(t) {
		var tid = this.typeIdMap.get(t);
		if(tid != null) {
			this.writeVarInt(tid);
			return false;
		}
		tid = this.tid++;
		this.typeIdMap.set(t,tid);
		this.writeVarInt(tid);
		return true;
	}
	,writeType: function(t) {
		this.out.addByte(t._hx_index);
		switch(t._hx_index) {
		case 5:
			var size = t.size;
			var t1 = t.t;
			this.out.addByte(size | t1._hx_index << 3);
			break;
		case 9:
			var size = t.size;
			this.out.addInt32(size);
			break;
		case 0:case 1:case 2:case 3:case 4:case 6:case 7:case 8:case 10:case 11:case 12:case 18:
			break;
		case 13:
			var vl = t.vl;
			if(this.writeTID(t)) {
				var f = $bind(this,this.writeVar);
				this.writeVarInt(vl.length);
				var _g = 0;
				while(_g < vl.length) {
					var v = vl[_g];
					++_g;
					f(v);
				}
			}
			break;
		case 14:
			var variants = t.variants;
			break;
		case 15:
			var t1 = t.t;
			var size = t.size;
			this.writeType(t1);
			switch(size._hx_index) {
			case 0:
				var v = size.v;
				this.out.addByte(0);
				this.writeVarInt(v);
				break;
			case 1:
				var v = size.v;
				this.writeVar(v);
				break;
			}
			break;
		case 16:
			var _gt = t.t;
			var _gsize = t.size;
			var _gkind = t.kind;
			if(_gkind._hx_index == 0) {
				var size = _gsize;
				var t1 = _gt;
				this.writeType(t1);
				switch(size._hx_index) {
				case 0:
					var v = size.v;
					this.out.addByte(0);
					this.writeVarInt(v);
					break;
				case 1:
					var v = size.v;
					this.writeVar(v);
					break;
				}
			} else {
				var kind = _gkind;
				var size = _gsize;
				var t1 = _gt;
				this.out.addByte(kind._hx_index + 128);
				this.writeType(t1);
				switch(size._hx_index) {
				case 0:
					var v = size.v;
					this.out.addByte(0);
					this.writeVarInt(v);
					break;
				case 1:
					var v = size.v;
					this.writeVar(v);
					break;
				}
			}
			break;
		case 17:
			var size = t.size;
			this.out.addByte(size);
			break;
		}
	}
	,readType: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Type.TVoid;
		case 1:
			return hxsl_Type.TInt;
		case 2:
			return hxsl_Type.TBool;
		case 3:
			return hxsl_Type.TFloat;
		case 4:
			return hxsl_Type.TString;
		case 5:
			var bits = this.input.readByte();
			var v = hxsl_Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl_Type.TVec(bits & 7,Type.createEnumIndex(hxsl_VecType,bits >> 3,null));
				hxsl_Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl_Type.TMat3;
		case 7:
			return hxsl_Type.TMat4;
		case 8:
			return hxsl_Type.TMat3x4;
		case 9:
			return hxsl_Type.TBytes(this.input.readInt32());
		case 10:
			return hxsl_Type.TSampler2D;
		case 11:
			return hxsl_Type.TSampler2DArray;
		case 12:
			return hxsl_Type.TSamplerCube;
		case 13:
			var id = this.readVarInt();
			var t = this.types[id];
			if(t != null) {
				return t;
			}
			var f = $bind(this,this.readVar);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			t = hxsl_Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl_Type.TFun(null);
		case 15:
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TArray(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v));
		case 16:
			var tag = this.input.readByte();
			var kind = hxsl_BufferKind.Uniform;
			if((tag & 128) == 0) {
				var fh = this.input;
				fh.set_position(fh.pos - 1);
			} else {
				kind = Type.createEnumIndex(hxsl_BufferKind,tag & 127,null);
			}
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TBuffer(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v),kind);
		case 17:
			return hxsl_Type.TChannel(this.input.readByte());
		case 18:
			return hxsl_Type.TMat2;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,writeString: function(s) {
		var bytes = haxe_io_Bytes.ofString(s);
		this.writeVarInt(bytes.length);
		this.out.add(bytes);
	}
	,readString: function() {
		var len = this.readVarInt();
		var s = this.input.read(len).getString(0,len);
		return s;
	}
	,writeVar: function(v) {
		if(v == null) {
			this.out.addByte(0);
			return;
		}
		this.writeID(v.id);
		if(this.varMap.h.hasOwnProperty(v.id)) {
			return;
		}
		this.varMap.h[v.id] = v;
		this.writeString(v.name);
		this.writeType(v.type);
		this.out.addByte(v.kind._hx_index);
		this.writeVar(v.parent);
		if(v.qualifiers == null) {
			this.out.addByte(0);
		} else {
			this.out.addByte(v.qualifiers.length);
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				this.out.addByte(q._hx_index);
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					this.out.addInt32(max == null ? 0 : max);
					break;
				case 4:
					var n = q.n;
					this.writeString(n);
					break;
				case 6:
					var p = q.p;
					this.out.addByte(p._hx_index);
					break;
				case 7:
					var min = q.min;
					var max1 = q.max;
					this.out.addDouble(min);
					this.out.addDouble(max1);
					break;
				case 1:case 2:case 3:case 5:case 8:
					break;
				case 9:
					var v = q.v;
					this.out.addInt32(v);
					break;
				case 10:
					var s = q.s;
					this.writeString(s);
					break;
				case 11:
					var s1 = q.source;
					this.writeString(s1);
					break;
				case 12:
					var s2 = q.name;
					this.writeString(s2);
					break;
				}
			}
		}
	}
	,writeFun: function(f) {
		this.out.addByte(f.kind._hx_index);
		this.writeVar(f.ref);
		var arr = f.args;
		var f1 = $bind(this,this.writeVar);
		this.writeVarInt(arr.length);
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			f1(v);
		}
		this.writeType(f.ret);
		this.writeExpr(f.expr);
	}
	,writeConst: function(c) {
		this.out.addByte(c._hx_index);
		switch(c._hx_index) {
		case 0:
			break;
		case 1:
			var b = c.b;
			this.out.addByte(b ? 1 : 0);
			break;
		case 2:
			var v = c.v;
			this.out.addInt32(v);
			break;
		case 3:
			var v = c.v;
			this.out.addDouble(v);
			break;
		case 4:
			var v = c.v;
			this.writeString(v);
			break;
		}
	}
	,writeExpr: function(e) {
		var _gthis = this;
		if(e == null) {
			this.out.addByte(0);
			return;
		}
		this.out.addByte(e.e._hx_index + 1);
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.writeConst(c);
			break;
		case 1:
			var v = _g.v;
			this.writeVar(v);
			break;
		case 2:
			var g = _g.g;
			this.out.addByte(g._hx_index);
			break;
		case 3:
			var e1 = _g.e;
			this.writeExpr(e1);
			break;
		case 4:
			var el = _g.el;
			var f = $bind(this,this.writeExpr);
			this.writeVarInt(el.length);
			var _g1 = 0;
			while(_g1 < el.length) {
				var v = el[_g1];
				++_g1;
				f(v);
			}
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			if(op._hx_index == 20) {
				var op1 = op.op;
				this.out.addByte(op1._hx_index | 128);
			} else {
				this.out.addByte(op._hx_index);
			}
			this.writeExpr(e1);
			this.writeExpr(e2);
			break;
		case 6:
			var op = _g.op;
			var e1 = _g.e1;
			this.out.addByte(op._hx_index);
			this.writeExpr(e1);
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			this.writeVar(v);
			this.writeExpr(init);
			break;
		case 8:
			var e1 = _g.e;
			var args = _g.args;
			this.writeExpr(e1);
			var f = $bind(this,this.writeExpr);
			this.writeVarInt(args.length);
			var _g1 = 0;
			while(_g1 < args.length) {
				var v = args[_g1];
				++_g1;
				f(v);
			}
			break;
		case 9:
			var e1 = _g.e;
			var regs = _g.regs;
			this.writeExpr(e1);
			if(regs.length == 0) {
				throw haxe_Exception.thrown("assert");
			}
			var bits = regs.length - 1;
			var k = 2;
			var _g1 = 0;
			while(_g1 < regs.length) {
				var r = regs[_g1];
				++_g1;
				bits |= r._hx_index << k;
				k += 2;
			}
			this.out.addByte(bits & 255);
			this.out.addByte(bits >> 8);
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.writeExpr(econd);
			this.writeExpr(eif);
			this.writeExpr(eelse);
			break;
		case 11:
			break;
		case 12:
			var e1 = _g.e;
			this.writeExpr(e1);
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.writeVar(v);
			this.writeExpr(it);
			this.writeExpr(loop);
			break;
		case 14:
			break;
		case 15:
			break;
		case 16:
			var e1 = _g.e;
			var index = _g.index;
			this.writeExpr(e1);
			this.writeExpr(index);
			break;
		case 17:
			var el = _g.el;
			var f = $bind(this,this.writeExpr);
			this.writeVarInt(el.length);
			var _g1 = 0;
			while(_g1 < el.length) {
				var v = el[_g1];
				++_g1;
				f(v);
			}
			break;
		case 18:
			var e1 = _g.e;
			var cases = _g.cases;
			var def = _g.def;
			this.writeExpr(e1);
			this.writeVarInt(cases.length);
			var _g1 = 0;
			while(_g1 < cases.length) {
				var v = cases[_g1];
				++_g1;
				var arr = v.values;
				var f = $bind(_gthis,_gthis.writeExpr);
				_gthis.writeVarInt(arr.length);
				var _g2 = 0;
				while(_g2 < arr.length) {
					var v1 = arr[_g2];
					++_g2;
					f(v1);
				}
				_gthis.writeExpr(v.expr);
			}
			this.writeExpr(def);
			break;
		case 19:
			var e1 = _g.e;
			var loop = _g.loop;
			var normalWhile = _g.normalWhile;
			this.writeExpr(e1);
			this.writeExpr(loop);
			this.out.addByte(normalWhile ? 1 : 0);
			break;
		case 20:
			var m = _g.m;
			var args = _g.args;
			var e1 = _g.e;
			this.writeString(m);
			var f = $bind(this,this.writeConst);
			this.writeVarInt(args.length);
			var _g = 0;
			while(_g < args.length) {
				var v = args[_g];
				++_g;
				f(v);
			}
			this.writeExpr(e1);
			break;
		}
		this.writeType(e.t);
	}
	,readConst: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Const.CNull;
		case 1:
			return hxsl_Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl_Const.CInt(this.input.readInt32());
		case 3:
			return hxsl_Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl_Const.CString(this.readString());
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,readExpr: function() {
		var _gthis = this;
		var k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		var e;
		switch(k) {
		case 0:
			e = hxsl_TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl_TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl_TExprDef.TGlobal(hxsl_Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl_TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TBlock(_g);
			break;
		case 5:
			var op = this.input.readByte();
			e = hxsl_TExprDef.TBinop(op >= 128 ? haxe_macro_Binop.OpAssignOp(hxsl_Serializer.BOPS[op & 127]) : hxsl_Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl_TExprDef.TUnop(hxsl_Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl_TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			var e1 = this.readExpr();
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TCall(e1,_g);
			break;
		case 9:
			var e1 = this.readExpr();
			var bits = this.input.readUInt16();
			var swiz = hxsl_Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = (bits & 3) + 1;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(hxsl_Serializer.REGS[bits >> i * 2 + 2 & 3]);
				}
				swiz = _g;
				hxsl_Serializer.TSWIZ.h[bits] = swiz;
			}
			e = hxsl_TExprDef.TSwiz(e1,swiz);
			break;
		case 10:
			e = hxsl_TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl_TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl_TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl_TExprDef.TContinue;
			break;
		case 15:
			e = hxsl_TExprDef.TBreak;
			break;
		case 16:
			e = hxsl_TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TArrayDecl(_g);
			break;
		case 18:
			var e1 = this.readExpr();
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				var f = $bind(_gthis,_gthis.readExpr);
				var _g3 = [];
				var _g4 = 0;
				var _g5 = _gthis.readVarInt();
				while(_g4 < _g5) {
					var i1 = _g4++;
					_g3.push(f());
				}
				_g.push({ values : _g3, expr : _gthis.readExpr()});
			}
			e = hxsl_TExprDef.TSwitch(e1,_g,this.readExpr());
			break;
		case 19:
			e = hxsl_TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			var e1 = this.readString();
			var f = $bind(this,this.readConst);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TMeta(e1,_g,this.readExpr());
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	,readVar: function() {
		var id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		var v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl_Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl_Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		var nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			var _g = 0;
			var _g1 = nq;
			while(_g < _g1) {
				var i = _g++;
				var qid = this.input.readByte();
				var q;
				switch(qid) {
				case 0:
					var n = this.input.readInt32();
					q = hxsl_VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl_VarQualifier.Private;
					break;
				case 2:
					q = hxsl_VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl_VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl_VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl_VarQualifier.Shared;
					break;
				case 6:
					q = hxsl_VarQualifier.Precision(hxsl_Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl_VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl_VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl_VarQualifier.PerInstance(this.input.readInt32());
					break;
				case 10:
					q = hxsl_VarQualifier.Doc(this.readString());
					break;
				case 11:
					q = hxsl_VarQualifier.Borrow(this.readString());
					break;
				case 12:
					q = hxsl_VarQualifier.Sampler(this.readString());
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	,readFun: function() {
		var tmp = hxsl_Serializer.FKIND[this.input.readByte()];
		var tmp1 = this.readVar();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	,unserialize: function(data) {
		this.input = new haxe_io_BytesInput(haxe_crypto_Base64.decode(data,false));
		if(this.input.readByte() != (hxsl_Serializer.SIGN & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 8 & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 16 & 255)) {
			throw haxe_Exception.thrown("Invalid HXSL data");
		}
		this.varMap = new haxe_ds_IntMap();
		this.types = [];
		var tmp = this.readString();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		var tmp1 = _g;
		var f = $bind(this,this.readFun);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { name : tmp, vars : tmp1, funs : _g};
	}
	,serialize: function(s) {
		this.varMap = new haxe_ds_IntMap();
		this.idMap = new haxe_ds_IntMap();
		this.typeIdMap = new haxe_ds_EnumValueMap();
		this.out = new haxe_io_BytesBuffer();
		this.out.addByte(hxsl_Serializer.SIGN & 255);
		this.out.addByte(hxsl_Serializer.SIGN >> 8 & 255);
		this.out.addByte(hxsl_Serializer.SIGN >> 16 & 255);
		this.writeString(s.name);
		var arr = s.vars;
		var f = $bind(this,this.writeVar);
		this.writeVarInt(arr.length);
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			f(v);
		}
		var arr = s.funs;
		var f = $bind(this,this.writeFun);
		this.writeVarInt(arr.length);
		var _g = 0;
		while(_g < arr.length) {
			var v = arr[_g];
			++_g;
			f(v);
		}
		return haxe_crypto_Base64.encode(this.out.getBytes(),false);
	}
	,__class__: hxsl_Serializer
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
$hxClasses["hxsl.ShaderList"] = hxsl_ShaderList;
hxsl_ShaderList.__name__ = "hxsl.ShaderList";
hxsl_ShaderList.addSort = function(s,shaders) {
	var prev = null;
	var hd = shaders;
	while(hd != null && hd.s.priority < s.priority) {
		prev = hd;
		hd = hd.next;
	}
	if(prev == null) {
		var l = new hxsl_ShaderList(s,shaders);
		hxsl_ShaderList.checkSize(l);
		return l;
	}
	prev.next = new hxsl_ShaderList(s,prev.next);
	hxsl_ShaderList.checkSize(shaders);
	return shaders;
};
hxsl_ShaderList.checkSize = function(list) {
	if(hxsl_ShaderList.MAX_LIST_SIZE <= 0) {
		return;
	}
	var hd = list;
	var count = 0;
	while(hd != null) {
		if(!hxsl_ShaderList.ALLOW_DUPLICATES && hd.next != null && hd.next.s == hd.s) {
			throw haxe_Exception.thrown("Duplicate shader " + Std.string(hd.s));
		}
		++count;
		hd = hd.next;
	}
	if(count > hxsl_ShaderList.MAX_LIST_SIZE) {
		throw haxe_Exception.thrown("Too many shaders");
	}
};
hxsl_ShaderList.prototype = {
	clone: function() {
		return new hxsl_ShaderList(this.s.clone(),this.next == null ? null : this.next.clone());
	}
	,iterator: function() {
		return new hxsl__$ShaderList_ShaderIterator(this,null);
	}
	,iterateTo: function(s) {
		return new hxsl__$ShaderList_ShaderIterator(this,s);
	}
	,__class__: hxsl_ShaderList
};
var hxsl__$ShaderList_ShaderIterator = function(l,last) {
	this.l = l;
	this.last = last;
};
$hxClasses["hxsl._ShaderList.ShaderIterator"] = hxsl__$ShaderList_ShaderIterator;
hxsl__$ShaderList_ShaderIterator.__name__ = "hxsl._ShaderList.ShaderIterator";
hxsl__$ShaderList_ShaderIterator.prototype = {
	hasNext: function() {
		return this.l != this.last;
	}
	,next: function() {
		var s = this.l.s;
		this.l = this.l.next;
		return s;
	}
	,__class__: hxsl__$ShaderList_ShaderIterator
};
var hxsl_ShaderInstance = function(shader) {
	this.id = ++hxsl_ShaderInstance.UID;
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
$hxClasses["hxsl.ShaderInstance"] = hxsl_ShaderInstance;
hxsl_ShaderInstance.__name__ = "hxsl.ShaderInstance";
hxsl_ShaderInstance.prototype = {
	__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
$hxClasses["hxsl.ShaderGlobal"] = hxsl_ShaderGlobal;
hxsl_ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
hxsl_ShaderGlobal.prototype = {
	__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderConst"] = hxsl_ShaderConst;
hxsl_ShaderConst.__name__ = "hxsl.ShaderConst";
hxsl_ShaderConst.prototype = {
	__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.data = new hxsl_Serializer().unserialize(src);
	var _g = 0;
	var _g1 = this.data.vars;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		this.initVarId(v);
	}
	this.data = hxsl_SharedShader.compactMem(this.data);
	this.initialize();
};
$hxClasses["hxsl.SharedShader"] = hxsl_SharedShader;
hxsl_SharedShader.__name__ = "hxsl.SharedShader";
hxsl_SharedShader.compactMem = function(mem) {
	return mem;
};
hxsl_SharedShader.prototype = {
	initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,getInstance: function(constBits) {
		var i = this.instanceCache.h[constBits];
		if(i == null) {
			return this.makeInstance(constBits);
		} else {
			return i;
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		while(c != null) {
			var c1 = c.v;
			var tmp;
			switch(c.v.type._hx_index) {
			case 1:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl_Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			case 17:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl_SharedShader.UNROLL_LOOPS;
		var edata = $eval.eval(this.data);
		edata = hxsl_SharedShader.compactMem(edata);
		var i = new hxsl_ShaderInstance(edata);
		hxsl_Printer.check(i.shader,[this.data]);
		this.paramsCount = 0;
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addSelfParam: function(i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.addSelfParam(i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[v.id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,initVarId: function(v) {
		v.id = hxsl_Tools.allocVarId();
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.initVarId(v);
			}
		}
	}
	,browseVar: function(v,path) {
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var vs = vl[_g];
				++_g;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
$hxClasses["hxsl._Splitter.VarProps"] = hxsl__$Splitter_VarProps;
hxsl__$Splitter_VarProps.__name__ = "hxsl._Splitter.VarProps";
hxsl__$Splitter_VarProps.prototype = {
	__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
$hxClasses["hxsl.Splitter"] = hxsl_Splitter;
hxsl_Splitter.__name__ = "hxsl.Splitter";
hxsl_Splitter.prototype = {
	split: function(s) {
		var _gthis = this;
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		var isCompute = false;
		this.varNames = new haxe_ds_StringMap();
		this.varMap = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			case 0:case 4:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				if(f.kind == hxsl_FunctionKind.Main) {
					isCompute = true;
				}
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		var vafterMap = [];
		var _g = 0;
		var _g1 = Lambda.array(vvars);
		while(_g < _g1.length) {
			var inf = [_g1[_g]];
			++_g;
			var v = [inf[0].v];
			if(inf[0].local) {
				continue;
			}
			switch(v[0].kind._hx_index) {
			case 3:case 4:
				var fv = fvars.h[inf[0].origin.id];
				v[0].kind = fv != null && fv.read > 0 ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			switch(v[0].kind._hx_index) {
			case 3:case 5:
				if(inf[0].read > 0 || inf[0].write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v[0].name, kind : hxsl_VarKind.Local, type : v[0].type};
					this.uniqueName(nv);
					this.varMap.set(inf[0].origin,nv);
					var ninf = new hxsl__$Splitter_VarProps(nv);
					ninf.read++;
					vvars.h[nv.id] = ninf;
					var p = vfun.expr.p;
					var e = [{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(v[0]), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(nv), t : v[0].type, p : p}), t : nv.type, p : p}];
					vafterMap.push((function(e) {
						return function() {
							_gthis.addExpr(vfun,e[0]);
						};
					})(e));
					if(v[0].kind == hxsl_VarKind.Var) {
						vafterMap.push((function(v,inf) {
							return function() {
								_gthis.varMap.set(inf[0].origin,v[0]);
							};
						})(v,inf));
					}
				}
				break;
			default:
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		var _g = 0;
		while(_g < vafterMap.length) {
			var f = vafterMap[_g];
			++_g;
			f();
		}
		var finits = [];
		var inf1 = fvars.iterator();
		while(inf1.hasNext()) {
			var inf2 = inf1.next();
			var v1 = inf2.v;
			switch(v1.kind._hx_index) {
			case 1:
				var nv = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Var, type : v1.type};
				this.uniqueName(nv);
				var i = vvars.h[inf2.origin.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v1);
					vvars.h[inf2.origin.id] = i;
				}
				i.read++;
				this.varMap.set(inf2.origin,nv);
				var ninf = new hxsl__$Splitter_VarProps(nv);
				ninf.origin = inf2.origin;
				fvars.h[inf2.origin.id] = ninf;
				vvars.h[nv.id] = ninf;
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : v1.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : vfun.expr.p}), t : v1.type, p : vfun.expr.p});
				break;
			case 3:
				if(inf2.write > 0) {
					var nv1 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Local, type : v1.type};
					this.uniqueName(nv1);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv1,{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(inf2.origin,nv1);
				}
				break;
			default:
			}
		}
		var v1 = vvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			this.checkVar(v2,true,vvars,vfun.expr.p);
		}
		var v1 = fvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			this.checkVar(v2,false,vvars,ffun.expr.p);
		}
		if(ffun != null) {
			ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
			var _g = ffun.expr.e;
			if(_g._hx_index == 4) {
				var el = _g.el;
				var _g = 0;
				while(_g < finits.length) {
					var e1 = finits[_g];
					++_g;
					el.unshift(e1);
				}
			} else {
				finits.push(ffun.expr);
				ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
			}
		}
		var _g = [];
		var v1 = vvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			if(!v2.local) {
				_g.push(v2);
			}
		}
		var vvars = _g;
		var _g = [];
		var v1 = fvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			if(!v2.local) {
				_g.push(v2);
			}
		}
		var fvars = _g;
		vvars.sort(function(v1,v2) {
			return (v1.origin == null ? v1.v.id : v1.origin.id) - (v2.origin == null ? v2.v.id : v2.origin.id);
		});
		fvars.sort(function(v1,v2) {
			return (v1.origin == null ? v1.v.id : v1.origin.id) - (v2.origin == null ? v2.v.id : v2.origin.id);
		});
		if(isCompute) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < vvars.length) {
				var v1 = vvars[_g1];
				++_g1;
				_g.push(v1.v);
			}
			return [{ name : "main", vars : _g, funs : [vfun]}];
		} else {
			var _g = [];
			var _g1 = 0;
			while(_g1 < vvars.length) {
				var v1 = vvars[_g1];
				++_g1;
				_g.push(v1.v);
			}
			var tmp = { name : "vertex", vars : _g, funs : [vfun]};
			var _g = [];
			var _g1 = 0;
			while(_g1 < fvars.length) {
				var v1 = fvars[_g1];
				++_g1;
				_g.push(v1.v);
			}
			return [tmp,{ name : "fragment", vars : _g, funs : [ffun]}];
		}
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.origin.id];
				if(i != null && i.v.kind == hxsl_VarKind.Input) {
					return;
				}
				if(i == null || i.write == 0) {
					throw haxe_Exception.thrown(new hxsl_Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw haxe_Exception.thrown(new hxsl_Error("Variable " + v.v.name + " is used without being initialized",p));
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TVarDecl(v2,init == null ? null : this.mapVars(init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TFor(v2,this.mapVars(it),this.mapVars(loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			var nv = this.varMap.h[v.__id__];
			if(nv == null) {
				if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
					nv = v;
				} else {
					nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.uniqueName(nv);
				}
				this.varMap.set(v,nv);
			}
			i = new hxsl__$Splitter_VarProps(nv);
			i.origin = v;
			this.vars.h[v.id] = i;
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		var n = this.varNames.h[v.name];
		if(n != null && n != v) {
			var prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			var k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(Object.prototype.hasOwnProperty.call(this.varNames.h,prefix + k)) ++k;
			v.name = prefix + k;
		}
		this.varNames.h[v.name] = v;
	}
	,checkExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			var _ge = _g.e1;
			var _ge1 = _g.e2;
			switch(_g.op._hx_index) {
			case 4:
				var _ge2 = _ge.e;
				switch(_ge2._hx_index) {
				case 1:
					var v = _ge2.v;
					var e1 = _ge1;
					var inf = this.get(v);
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _ge3 = _ge2.e.e;
					if(_ge3._hx_index == 1) {
						var v = _ge3.v;
						var e1 = _ge1;
						var inf = this.get(v);
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				var _ge2 = _ge.e;
				switch(_ge2._hx_index) {
				case 1:
					var v = _ge2.v;
					var e1 = _ge1;
					var inf = this.get(v);
					if(inf.write == 0) {
						inf.requireInit = true;
					}
					inf.read++;
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _ge = _ge2.e.e;
					if(_ge._hx_index == 1) {
						var v = _ge.v;
						var e1 = _ge1;
						var inf = this.get(v);
						if(inf.write == 0) {
							inf.requireInit = true;
						}
						inf.read++;
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			var inf = this.get(v);
			inf.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf.write++;
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.checkExpr(it);
			var inf = this.get(v);
			inf.local = true;
			inf.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var hxsl_ChannelTools = function() { };
$hxClasses["hxsl.ChannelTools"] = hxsl_ChannelTools;
hxsl_ChannelTools.__name__ = "hxsl.ChannelTools";
hxsl_ChannelTools.isPackedFormat = function(c) {
	return c.format == h3d_mat_Texture.nativeFormat;
};
var integration_Newgrounds = function() { };
$hxClasses["integration.Newgrounds"] = integration_Newgrounds;
integration_Newgrounds.__name__ = "integration.Newgrounds";
integration_Newgrounds.init = function(callback) {
	integration_Newgrounds.loadedCallback = callback;
	io_newgrounds_NG.createAndCheckSession("57141:CYpTMVTB");
	io_newgrounds_NG.core.verbose = true;
	io_newgrounds_NG.core.setupEncryption("+T/S1NanleX3f9OYdThQ3g==","aes128","base64");
	integration_Newgrounds.loggedIn = false;
	if(io_newgrounds_NG.core.attemptingLogin) {
		io_newgrounds_NG.core.onLogin.add(integration_Newgrounds.onLogin);
	} else {
		callback();
	}
};
integration_Newgrounds.onLogin = function() {
	io_newgrounds_NG.core.requestMedals(function() {
		io_newgrounds_NG.core.saveSlots.loadAllFiles(integration_Newgrounds.onFetched);
	},function(e) {
		integration_Newgrounds.loadedCallback();
	});
};
integration_Newgrounds.onFetched = function(r) {
	switch(r._hx_index) {
	case 0:
		var e = r.error;
		Main.println("Error fetching save slots: " + e);
		break;
	case 1:
		integration_Newgrounds.loggedIn = true;
		break;
	}
	integration_Newgrounds.loadedCallback();
};
integration_Newgrounds.save = function(data) {
	if(!integration_Newgrounds.loggedIn) {
		return;
	}
	var saveSlot = io_newgrounds_NG.core.saveSlots.map.h[1];
	saveSlot.save(data,function(r) {
		switch(r._hx_index) {
		case 0:
			var e = r.error;
			Main.println("Error saving Newgrounds data: \"" + e + "\"");
			break;
		case 1:
			haxe_Log.trace("SAVED TO NG: " + data,{ fileName : "src/integration/Newgrounds.hx", lineNumber : 63, className : "integration.Newgrounds", methodName : "save"});
			break;
		}
	});
};
integration_Newgrounds.load = function(callback,onFail) {
	if(!integration_Newgrounds.loggedIn) {
		onFail();
		return;
	}
	try {
		var saveSlot = io_newgrounds_NG.core.saveSlots.map.h[1];
		saveSlot.load(function(r) {
			switch(r._hx_index) {
			case 0:
				var e = r.error;
				Main.println("Error loading Newgrounds data: \"#e\"");
				onFail();
				break;
			case 1:
				var data = r.value;
				callback(data);
				break;
			}
		});
	} catch( _g ) {
		onFail();
	}
};
integration_Newgrounds.checkMedals = function() {
	var baseMedalId = 75603;
	var _g = 0;
	while(_g < 3) {
		var k = _g++;
		var allCompleted = true;
		var _g1 = 0;
		while(_g1 < 9) {
			var l = _g1++;
			var levelId = k * 9 + l + 1;
			if(save_Save.gameData.data.levelsCompleted.h[levelId] == null || !save_Save.gameData.data.levelsCompleted.h[levelId]) {
				allCompleted = false;
				break;
			}
		}
		if(allCompleted) {
			integration_Newgrounds.unlockMedal(baseMedalId + k);
		}
	}
};
integration_Newgrounds.unlockMedal = function(id) {
	if(io_newgrounds_NG.core.get_user().name == "jebouin") {
		return;
	}
	var medal = io_newgrounds_NG.core.medals.h[id];
	if(medal == null) {
		Main.println("Couldn't unlock NG medal with id " + id);
	} else {
		medal.sendUnlock();
	}
};
integration_Newgrounds.isMedalUnlocked = function(id) {
	var medal = io_newgrounds_NG.core.medals.h[id];
	if(medal == null) {
		Main.println("Couldn't check NG medal with id " + id);
		return false;
	} else {
		return medal._data.unlocked;
	}
};
integration_Newgrounds.logEvent = function(s) {
	if(io_newgrounds_NG.core.get_user().name == "jebouin") {
		return;
	}
	var call = io_newgrounds_NG.core.calls.event.logEvent(s);
	call.send();
};
integration_Newgrounds.sendScore = function(id,score) {
	if(io_newgrounds_NG.core.get_user().name == "jebouin") {
		return;
	}
	var call = io_newgrounds_NG.core.calls.scoreBoard.postScore(id,score);
	call.send();
};
integration_Newgrounds.resetEvent = function(s) {
};
var integration_Secret = function() { };
$hxClasses["integration.Secret"] = integration_Secret;
integration_Secret.__name__ = "integration.Secret";
var io_newgrounds_ICallable = function() { };
$hxClasses["io.newgrounds.ICallable"] = io_newgrounds_ICallable;
io_newgrounds_ICallable.__name__ = "io.newgrounds.ICallable";
io_newgrounds_ICallable.__isInterface__ = true;
io_newgrounds_ICallable.prototype = {
	__class__: io_newgrounds_ICallable
};
var io_newgrounds_Call = function(core,component,requireSession,isSecure) {
	if(isSecure == null) {
		isSecure = false;
	}
	if(requireSession == null) {
		requireSession = false;
	}
	this._core = core;
	this.component = component;
	this._requireSession = requireSession;
	this._isSecure = isSecure && core.encryptionHandler != null;
};
$hxClasses["io.newgrounds.Call"] = io_newgrounds_Call;
io_newgrounds_Call.__name__ = "io.newgrounds.Call";
io_newgrounds_Call.__interfaces__ = [io_newgrounds_ICallable];
io_newgrounds_Call.prototype = {
	addProperty: function(name,value) {
		if(this._properties == null) {
			this._properties = new haxe_ds_StringMap();
		}
		this._properties.h[name] = value;
		return this;
	}
	,addComponentParameter: function(name,value,defaultValue) {
		if(value == defaultValue) {
			return this;
		}
		if(this._parameters == null) {
			this._parameters = new haxe_ds_StringMap();
		}
		this._parameters.h[name] = value;
		return this;
	}
	,addDataHandler: function(handler) {
		if(this._dataHandlers == null) {
			this._dataHandlers = new io_newgrounds_utils_TypedDispatcher();
		}
		this._dataHandlers.add(handler);
		return this;
	}
	,addSuccessHandler: function(handler) {
		if(this._successHandlers == null) {
			this._successHandlers = new io_newgrounds_utils_Dispatcher();
		}
		this._successHandlers.add(handler);
		return this;
	}
	,addErrorHandler: function(handler) {
		if(this._httpErrorHandlers == null) {
			this._httpErrorHandlers = new io_newgrounds_utils_TypedDispatcher();
		}
		this._httpErrorHandlers.add(handler);
		return this;
	}
	,addStatusHandler: function(handler) {
		if(this._statusHandlers == null) {
			this._statusHandlers = new io_newgrounds_utils_TypedDispatcher();
		}
		this._statusHandlers.add(handler);
		return this;
	}
	,send: function() {
		var data = { };
		data.app_id = this._core.appId;
		data.call = { };
		data.call.component = this.component;
		if(this._core.debug) {
			this.addProperty("debug",true);
		}
		if(this._properties == null || !Object.prototype.hasOwnProperty.call(this._properties.h,"session_id")) {
			if(this._core.sessionId != null) {
				this.addProperty("session_id",this._core.sessionId);
			} else if(this._requireSession) {
				this._core.logError({ message : "cannot send \"" + this.component + "\" call without a sessionId", code : null},{ fileName : "io/newgrounds/Call.hx", lineNumber : 137, className : "io.newgrounds.Call", methodName : "send"});
				return;
			}
		}
		if(this._properties != null) {
			var h = this._properties.h;
			var field_h = h;
			var field_keys = Object.keys(h);
			var field_length = field_keys.length;
			var field_current = 0;
			while(field_current < field_length) {
				var field = field_keys[field_current++];
				data[field] = this._properties.h[field];
			}
		}
		if(this._parameters != null) {
			data.call.parameters = { };
			var h = this._parameters.h;
			var field_h = h;
			var field_keys = Object.keys(h);
			var field_length = field_keys.length;
			var field_current = 0;
			while(field_current < field_length) {
				var field = field_keys[field_current++];
				data.call.parameters[field] = this._parameters.h[field];
			}
		}
		var _this = this._core;
		var any = "Post  - " + JSON.stringify(data);
		if(_this.verbose) {
			_this.log(any,{ fileName : "io/newgrounds/Call.hx", lineNumber : 156, className : "io.newgrounds.Call", methodName : "send"});
		}
		if(this._isSecure) {
			var secureData = this._core.encryptionHandler(JSON.stringify(data.call));
			data.call = { };
			data.call.secure = secureData;
			var _this = this._core;
			if(_this.verbose) {
				_this.log("    secure - " + secureData,{ fileName : "io/newgrounds/Call.hx", lineNumber : 164, className : "io.newgrounds.Call", methodName : "send"});
			}
		}
		this._core.markCallPending_io_newgrounds_Call_T(this);
		io_newgrounds_utils_AsyncNGCall.send(this._core,JSON.stringify(data),$bind(this,this.onData),$bind(this,this.onHttpError),$bind(this,this.onStatus));
	}
	,queue: function() {
		this._core.queueCall_io_newgrounds_Call_T(this);
	}
	,onData: function(reply) {
		var _this = this._core;
		if(_this.verbose) {
			_this.log("Reply - " + reply,{ fileName : "io/newgrounds/Call.hx", lineNumber : 180, className : "io.newgrounds.Call", methodName : "onData"});
		}
		if(this._dataHandlers == null && this._successHandlers == null) {
			return;
		}
		var response = io_newgrounds_objects_events_Response._new(this._core,reply);
		if(this._dataHandlers != null) {
			this._dataHandlers.dispatch(response);
		}
		if(response.success && response.result.data.success && this._successHandlers != null) {
			this._successHandlers.dispatch();
		}
		this.destroy();
	}
	,onHttpError: function(message) {
		this._core.logError(message,{ fileName : "io/newgrounds/Call.hx", lineNumber : 198, className : "io.newgrounds.Call", methodName : "onHttpError"});
		if(this._httpErrorHandlers == null) {
			return;
		}
		var error = { message : message, code : null};
		this._httpErrorHandlers.dispatch(error);
	}
	,onStatus: function(status) {
		if(this._statusHandlers == null) {
			return;
		}
		this._statusHandlers.dispatch(status);
	}
	,destroy: function() {
		this._core = null;
		this._properties = null;
		this._parameters = null;
		this._dataHandlers = null;
		this._successHandlers = null;
		this._httpErrorHandlers = null;
		this._statusHandlers = null;
	}
	,__class__: io_newgrounds_Call
};
var io_newgrounds_utils_Dispatcher = function() {
	this._list = [];
	this._once = [];
};
$hxClasses["io.newgrounds.utils.Dispatcher"] = io_newgrounds_utils_Dispatcher;
io_newgrounds_utils_Dispatcher.__name__ = "io.newgrounds.utils.Dispatcher";
io_newgrounds_utils_Dispatcher.prototype = {
	add: function(handler,once) {
		if(once == null) {
			once = false;
		}
		if(this._list.indexOf(handler) != -1) {
			if(!once && this._once.indexOf(handler) != -1) {
				HxOverrides.remove(this._once,handler);
			}
			return false;
		}
		this._list.unshift(handler);
		if(once) {
			this._once.unshift(handler);
		}
		return true;
	}
	,addOnce: function(handler) {
		return this.add(handler,true);
	}
	,remove: function(handler) {
		HxOverrides.remove(this._once,handler);
		return HxOverrides.remove(this._list,handler);
	}
	,dispatch: function() {
		var i = this._list.length - 1;
		while(i >= 0) {
			var handler = this._list[i];
			if(HxOverrides.remove(this._once,handler)) {
				HxOverrides.remove(this._list,handler);
			}
			handler();
			--i;
		}
	}
	,__class__: io_newgrounds_utils_Dispatcher
};
var io_newgrounds_NGLite = function(appId,sessionId,debug,onSessionFail) {
	if(debug == null) {
		debug = false;
	}
	if(appId == null) {
		appId = "test";
	}
	this._pendingCalls = [];
	this._queuedCalls = [];
	this.appId = appId;
	this.set_sessionId(sessionId);
	this.debug = debug;
	this.calls = new io_newgrounds_components_ComponentList(this);
	if(this.sessionId != null) {
		var _g = this;
		var onFail = onSessionFail;
		var tmp = function(response) {
			_g.checkInitialSession(onFail,response);
		};
		var _g1 = this;
		var onFail1 = onSessionFail;
		var tmp1 = function(error) {
			_g1.initialSessionFail(onFail1,error);
		};
		this.calls.app.checkSession().addDataHandler(tmp).addErrorHandler(tmp1).send();
	}
};
$hxClasses["io.newgrounds.NGLite"] = io_newgrounds_NGLite;
io_newgrounds_NGLite.__name__ = "io.newgrounds.NGLite";
io_newgrounds_NGLite.create = function(appId,sessionId,onSessionFail) {
	if(appId == null) {
		appId = "test";
	}
	io_newgrounds_NGLite.core = new io_newgrounds_NGLite(appId,sessionId,false,onSessionFail);
	io_newgrounds_NGLite.onCoreReady.dispatch();
};
io_newgrounds_NGLite.createAndCheckSession = function(appId,backupSession,onSessionFail) {
	if(appId == null) {
		appId = "test";
	}
	var session = io_newgrounds_NGLite.getSessionId();
	if(session == null) {
		session = backupSession;
	}
	io_newgrounds_NGLite.create(appId,session,onSessionFail);
};
io_newgrounds_NGLite.getUrl = function() {
	return window.document.location.href;
};
io_newgrounds_NGLite.getSessionId = function() {
	var url = window.document.location.href;
	var index = url.indexOf("?");
	if(index != -1) {
		var _g = 0;
		var _g1 = HxOverrides.substr(url,index + 1,null).split("&");
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			index = param.indexOf("=");
			if(index != -1 && HxOverrides.substr(param,0,index) == "ngio_session_id") {
				return HxOverrides.substr(param,index + 1,null);
			}
		}
	}
	return null;
};
io_newgrounds_NGLite.prototype = {
	queueCall_io_newgrounds_Call_T: function(call) {
		if(this.verbose) {
			this.log("queued - " + call.component,{ fileName : "io/newgrounds/NGLite.hx", lineNumber : 190, className : "io.newgrounds.NGLite", methodName : "queueCall"});
		}
		this._queuedCalls.push(call);
		this.checkQueue();
	}
	,markCallPending_io_newgrounds_Call_T: function(call) {
		var _gthis = this;
		this._pendingCalls.push(call);
		call.addDataHandler(function(_) {
			_gthis.onCallComplete(call);
		});
		call.addErrorHandler(function(_) {
			_gthis.onCallComplete(call);
		});
	}
	,set_sessionId: function(value) {
		return this.sessionId = value == "" ? null : value;
	}
	,checkInitialSession: function(onFail,response) {
		if(!response.success || !response.result.data.success || response.result.data.session.expired) {
			this.initialSessionFail(onFail,response.success ? response.result.data.error : response.error);
		}
	}
	,initialSessionFail: function(onFail,error) {
		this.set_sessionId(null);
		if(onFail != null) {
			onFail(error);
		}
	}
	,onCallComplete: function(call) {
		HxOverrides.remove(this._pendingCalls,call);
		this.checkQueue();
	}
	,checkQueue: function() {
		if(this._pendingCalls.length == 0 && this._queuedCalls.length > 0) {
			this._queuedCalls.shift().send();
		}
	}
	,log: function(any,pos) {
		haxe_Log.trace("[Newgrounds API] :: " + Std.string(any),pos);
	}
	,logVerbose: function(any,pos) {
		if(this.verbose) {
			this.log(any,pos);
		}
	}
	,logError: function(any,pos) {
		this.log("Error: " + Std.string(any),pos);
	}
	,assert: function(condition,msg,pos) {
		if(!condition) {
			this.logError(msg,pos);
		}
		return condition;
	}
	,setupEncryption: function(key,cipher,format) {
		if(format == null) {
			format = "base64";
		}
		if(cipher == null) {
			cipher = "aes128";
		}
		this.encryptionHandler = null;
		var encrypt = io_newgrounds_crypto_Cipher.generateEncrypter(cipher,io_newgrounds_crypto_EncodingFormat.decode(format,key));
		if(encrypt != null) {
			this.encryptionHandler = function(data) {
				return io_newgrounds_crypto_EncodingFormat.encode(format,encrypt(haxe_io_Bytes.ofString(data)));
			};
		}
	}
	,initEncryption: function(key,cipher,format) {
		if(format == null) {
			format = "base64";
		}
		if(cipher == null) {
			cipher = "rc4";
		}
		this.setupEncryption(key,cipher,format);
	}
	,__class__: io_newgrounds_NGLite
};
var io_newgrounds_NG = function(appId,sessionId,debug,onSessionFail) {
	if(debug == null) {
		debug = false;
	}
	if(appId == null) {
		appId = "test";
	}
	this.host = io_newgrounds_NG.getHost();
	this.onLogin = new io_newgrounds_utils_Dispatcher();
	this.onLogOut = new io_newgrounds_utils_Dispatcher();
	this.onMedalsLoaded = new io_newgrounds_utils_Dispatcher();
	this.onScoreBoardsLoaded = new io_newgrounds_utils_Dispatcher();
	this.onSaveSlotsLoaded = new io_newgrounds_utils_Dispatcher();
	this.saveSlots = new io_newgrounds_utils_RawSaveSlotList(this);
	this.attemptingLogin = sessionId != null;
	io_newgrounds_NGLite.call(this,appId,sessionId,debug,onSessionFail);
};
$hxClasses["io.newgrounds.NG"] = io_newgrounds_NG;
io_newgrounds_NG.__name__ = "io.newgrounds.NG";
io_newgrounds_NG.create = function(appId,sessionId,debug,onSessionFail) {
	if(debug == null) {
		debug = false;
	}
	if(appId == null) {
		appId = "test";
	}
	io_newgrounds_NG.core = new io_newgrounds_NG(appId,sessionId,debug,onSessionFail);
	io_newgrounds_NG.onCoreReady.dispatch();
};
io_newgrounds_NG.createAndCheckSession = function(appId,debug,backupSession,onSessionFail) {
	if(debug == null) {
		debug = false;
	}
	if(appId == null) {
		appId = "test";
	}
	var session = io_newgrounds_NGLite.getSessionId();
	if(session == null) {
		session = backupSession;
	}
	io_newgrounds_NG.create(appId,session,debug,onSessionFail);
	if(io_newgrounds_NG.core.sessionId != null) {
		io_newgrounds_NG.core.attemptingLogin = true;
	}
};
io_newgrounds_NG.getHost = function() {
	var url = window.document.location.href;
	if(url == null || url == "") {
		return "AppView";
	}
	if(url.indexOf("file") == 0 || url.indexOf("127.0.0.1") != -1) {
		return "LocalHost";
	}
	if(io_newgrounds_NG.urlParser.match(url)) {
		return io_newgrounds_NG.urlParser.matched(1);
	}
	return "Unknown";
};
io_newgrounds_NG.__super__ = io_newgrounds_NGLite;
io_newgrounds_NG.prototype = $extend(io_newgrounds_NGLite.prototype,{
	get_user: function() {
		if(this._session == null) {
			return null;
		}
		return this._session.user;
	}
	,get_passportUrl: function() {
		if(this._session == null || io_newgrounds_objects_Session.get_status(this._session) != "request-login") {
			return null;
		}
		return this._session.passport_url;
	}
	,checkInitialSession: function(failHandler,response) {
		this.onSessionReceive(response,null,null,failHandler);
	}
	,requestLogin: function(onSuccess,onPending,onFail,onCancel) {
		if(this.attemptingLogin) {
			this.logError("cannot request another login until the previous attempt is complete",{ fileName : "io/newgrounds/NG.hx", lineNumber : 164, className : "io.newgrounds.NG", methodName : "requestLogin"});
			return;
		}
		if(this.loggedIn) {
			this.logError("cannot log in, already logged in",{ fileName : "io/newgrounds/NG.hx", lineNumber : 170, className : "io.newgrounds.NG", methodName : "requestLogin"});
			return;
		}
		this.attemptingLogin = true;
		this._loginCancelled = false;
		this._passportCallback = null;
		var _g = this;
		var onSuccess1 = onSuccess;
		var onPending1 = onPending;
		var onFail1 = onFail;
		var onCancel1 = onCancel;
		var call = function(response) {
			_g.onSessionReceive(response,onSuccess1,onPending1,onFail1,onCancel1);
		};
		var call1 = this.calls.app.startSession(true).addDataHandler(call);
		if(onFail != null) {
			call1.addErrorHandler(onFail);
		}
		call1.send();
	}
	,onSessionReceive: function(response,onSuccess,onPending,onFail,onCancel) {
		if(!response.success || !response.result.data.success) {
			this.set_sessionId(null);
			this.endLoginAndCall(null);
			if(onFail != null) {
				onFail(!response.success ? response.error : response.result.data.error);
			}
			return;
		}
		this._session = response.result.data.session;
		this.set_sessionId(this._session.id);
		var any = "session started - status: " + io_newgrounds_objects_Session.get_status(this._session);
		if(this.verbose) {
			this.log(any,{ fileName : "io/newgrounds/NG.hx", lineNumber : 209, className : "io.newgrounds.NG", methodName : "onSessionReceive"});
		}
		if(io_newgrounds_objects_Session.get_status(this._session) == "request-login") {
			var _g = this;
			var response = null;
			var onSuccess1 = onSuccess;
			var onCancel1 = onCancel;
			this._passportCallback = function() {
				_g.checkSession(response,onSuccess1,onCancel1);
			};
			if(onPending != null) {
				onPending();
			} else {
				this.openPassportUrl();
			}
		} else {
			this.checkSession(null,onSuccess,onCancel);
		}
	}
	,openPassportUrl: function() {
		if(this.get_passportUrl() != null) {
			var any = "loading passport: " + this.get_passportUrl();
			if(this.verbose) {
				this.log(any,{ fileName : "io/newgrounds/NG.hx", lineNumber : 231, className : "io.newgrounds.NG", methodName : "openPassportUrl"});
			}
			this.openPassportHelper(this.get_passportUrl());
			this.dispatchPassportCallback();
		} else {
			this.logError("Cannot open passport",{ fileName : "io/newgrounds/NG.hx", lineNumber : 236, className : "io.newgrounds.NG", methodName : "openPassportUrl"});
		}
	}
	,openPassportHelper: function(url) {
		var $window = "_blank";
		window.open(url,$window);
	}
	,onPassportUrlOpen: function() {
		this.dispatchPassportCallback();
	}
	,dispatchPassportCallback: function() {
		if(this._passportCallback != null) {
			if(this.verbose) {
				this.log("dispatching passport callback",{ fileName : "io/newgrounds/NG.hx", lineNumber : 271, className : "io.newgrounds.NG", methodName : "dispatchPassportCallback"});
			}
			var callback = this._passportCallback;
			this._passportCallback = null;
			callback();
		}
	}
	,checkSession: function(response,onSuccess,onCancel) {
		var _gthis = this;
		if(this._loginCancelled) {
			this.log("login cancelled via cancelLoginRequest",{ fileName : "io/newgrounds/NG.hx", lineNumber : 282, className : "io.newgrounds.NG", methodName : "checkSession"});
			this.endLoginAndCall(onCancel);
			return;
		}
		if(response != null) {
			if(!response.success || !response.result.data.success) {
				this.log("login cancelled via passport",{ fileName : "io/newgrounds/NG.hx", lineNumber : 292, className : "io.newgrounds.NG", methodName : "checkSession"});
				this.endLoginAndCall(onCancel);
				return;
			}
			if(this.verbose) {
				this.log("Session received",{ fileName : "io/newgrounds/NG.hx", lineNumber : 298, className : "io.newgrounds.NG", methodName : "checkSession"});
			}
			this._session = response.result.data.session;
		}
		if(io_newgrounds_objects_Session.get_status(this._session) == "user-loaded") {
			this.loggedIn = true;
			this.endLoginAndCall(onSuccess);
			this.onLogin.dispatch();
		} else if(io_newgrounds_objects_Session.get_status(this._session) == "request-login") {
			var _g = this;
			var onSuccess1 = onSuccess;
			var onCancel1 = onCancel;
			var call = function(response) {
				_g.checkSession(response,onSuccess1,onCancel1);
			};
			var call1 = this.calls.app.checkSession().addDataHandler(call);
			this.timer(3.0,function() {
				if(_gthis.verbose) {
					_gthis.log("3s elapsed, checking session again",{ fileName : "io/newgrounds/NG.hx", lineNumber : 317, className : "io.newgrounds.NG", methodName : "checkSession"});
				}
				if(!_gthis._loginCancelled) {
					call1.send();
				} else {
					_gthis.log("login cancelled via cancelLoginRequest",{ fileName : "io/newgrounds/NG.hx", lineNumber : 324, className : "io.newgrounds.NG", methodName : "checkSession"});
					_gthis.endLoginAndCall(onCancel);
				}
			});
		} else {
			this.log("login cancelled via passport",{ fileName : "io/newgrounds/NG.hx", lineNumber : 332, className : "io.newgrounds.NG", methodName : "checkSession"});
			this.endLoginAndCall(onCancel);
		}
	}
	,cancelLoginRequest: function() {
		if(this.attemptingLogin) {
			this._loginCancelled = true;
			this.dispatchPassportCallback();
		}
	}
	,endLoginAndCall: function(callback) {
		this.attemptingLogin = false;
		this._loginCancelled = false;
		if(callback != null) {
			callback();
		}
	}
	,logOut: function(onComplete) {
		var call = this.calls.app.endSession().addSuccessHandler($bind(this,this.onLogOutSuccessful));
		if(onComplete != null) {
			call.addSuccessHandler(onComplete);
		}
		call.addSuccessHandler(($_=this.onLogOut,$bind($_,$_.dispatch))).send();
	}
	,onLogOutSuccessful: function() {
		this._session = null;
		this.set_sessionId(null);
		this.loggedIn = false;
	}
	,requestMedals: function(onSuccess,onFail) {
		var call = this.calls.medal.getList().addDataHandler($bind(this,this.onMedalsReceived));
		if(onSuccess != null) {
			call.addSuccessHandler(onSuccess);
		}
		if(onFail != null) {
			call.addErrorHandler(onFail);
		}
		call.send();
	}
	,onMedalsReceived: function(response) {
		if(!response.success || !response.result.data.success) {
			return;
		}
		var idList = [];
		if(this.medals == null) {
			this.medals = new haxe_ds_IntMap();
			var _g = 0;
			var _g1 = response.result.data.medals;
			while(_g < _g1.length) {
				var medalData = _g1[_g];
				++_g;
				var medal = new io_newgrounds_objects_Medal(this,medalData);
				this.medals.h[medal._data.id] = medal;
				idList.push(medal._data.id);
			}
		} else {
			var _g = 0;
			var _g1 = response.result.data.medals;
			while(_g < _g1.length) {
				var medalData = _g1[_g];
				++_g;
				this.medals.h[medalData.id].parse(medalData);
				idList.push(medalData.id);
			}
		}
		var any = "" + response.result.data.medals.length + " Medals received [" + idList.join(", ") + "]";
		if(this.verbose) {
			this.log(any,{ fileName : "io/newgrounds/NG.hx", lineNumber : 421, className : "io.newgrounds.NG", methodName : "onMedalsReceived"});
		}
		this.onMedalsLoaded.dispatch();
	}
	,requestScoreBoards: function(onSuccess,onFail) {
		if(this.scoreBoards != null) {
			this.log("aborting scoreboard request, all scoreboards are loaded",{ fileName : "io/newgrounds/NG.hx", lineNumber : 434, className : "io.newgrounds.NG", methodName : "requestScoreBoards"});
			if(onSuccess != null) {
				onSuccess();
			}
			return;
		}
		var call = this.calls.scoreBoard.getBoards().addDataHandler($bind(this,this.onBoardsReceived));
		if(onSuccess != null) {
			call.addSuccessHandler(onSuccess);
		}
		if(onFail != null) {
			call.addErrorHandler(onFail);
		}
		call.send();
	}
	,onBoardsReceived: function(response) {
		if(!response.success || !response.result.data.success) {
			return;
		}
		var idList = [];
		if(this.scoreBoards == null) {
			this.scoreBoards = new haxe_ds_IntMap();
			var _g = 0;
			var _g1 = response.result.data.scoreboards;
			while(_g < _g1.length) {
				var boardData = _g1[_g];
				++_g;
				var board = new io_newgrounds_objects_ScoreBoard(this,boardData);
				this.scoreBoards.h[board._data.id] = board;
				idList.push(board._data.id);
			}
		}
		var any = "" + response.result.data.scoreboards.length + " ScoreBoards received [" + idList.join(", ") + "]";
		if(this.verbose) {
			this.log(any,{ fileName : "io/newgrounds/NG.hx", lineNumber : 473, className : "io.newgrounds.NG", methodName : "onBoardsReceived"});
		}
		this.onScoreBoardsLoaded.dispatch();
	}
	,requestSaveSlots: function(loadFiles,callback) {
		if(loadFiles == null) {
			loadFiles = false;
		}
		this.saveSlots.loadList(null,callback);
	}
	,timer: function(delay,callback) {
		var timer = new haxe_Timer(delay * 1000 | 0);
		var func = function() {
			timer.stop();
			callback();
		};
		timer.run = func;
	}
	,__class__: io_newgrounds_NG
});
var io_newgrounds_components_Component = function(core) {
	this._core = core;
};
$hxClasses["io.newgrounds.components.Component"] = io_newgrounds_components_Component;
io_newgrounds_components_Component.__name__ = "io.newgrounds.components.Component";
io_newgrounds_components_Component.prototype = {
	__class__: io_newgrounds_components_Component
};
var io_newgrounds_components_AppComponent = function(core) {
	io_newgrounds_components_Component.call(this,core);
};
$hxClasses["io.newgrounds.components.AppComponent"] = io_newgrounds_components_AppComponent;
io_newgrounds_components_AppComponent.__name__ = "io.newgrounds.components.AppComponent";
io_newgrounds_components_AppComponent.__super__ = io_newgrounds_components_Component;
io_newgrounds_components_AppComponent.prototype = $extend(io_newgrounds_components_Component.prototype,{
	startSession: function(force) {
		if(force == null) {
			force = false;
		}
		return new io_newgrounds_Call(this._core,"App.startSession").addComponentParameter("force",force,false);
	}
	,checkSession: function() {
		return new io_newgrounds_Call(this._core,"App.checkSession",true);
	}
	,endSession: function() {
		return new io_newgrounds_Call(this._core,"App.endSession",true);
	}
	,getCurrentVersion: function(version) {
		return new io_newgrounds_Call(this._core,"App.getCurrentVersion").addComponentParameter("version",version);
	}
	,getHostLicense: function() {
		return new io_newgrounds_Call(this._core,"App.getHostLicense").addComponentParameter("host",this._core.host);
	}
	,logView: function() {
		return new io_newgrounds_Call(this._core,"App.logView").addComponentParameter("host",this._core.host);
	}
	,__class__: io_newgrounds_components_AppComponent
});
var io_newgrounds_components_CloudSaveComponent = function(core) {
	io_newgrounds_components_Component.call(this,core);
};
$hxClasses["io.newgrounds.components.CloudSaveComponent"] = io_newgrounds_components_CloudSaveComponent;
io_newgrounds_components_CloudSaveComponent.__name__ = "io.newgrounds.components.CloudSaveComponent";
io_newgrounds_components_CloudSaveComponent.__super__ = io_newgrounds_components_Component;
io_newgrounds_components_CloudSaveComponent.prototype = $extend(io_newgrounds_components_Component.prototype,{
	clearSlot: function(id) {
		return new io_newgrounds_Call(this._core,"CloudSave.clearSlot",true).addComponentParameter("id",id);
	}
	,loadSlot: function(id) {
		return new io_newgrounds_Call(this._core,"CloudSave.loadSlot",true).addComponentParameter("id",id);
	}
	,loadSlots: function() {
		return new io_newgrounds_Call(this._core,"CloudSave.loadSlots",true);
	}
	,setData: function(data,id) {
		return new io_newgrounds_Call(this._core,"CloudSave.setData",true).addComponentParameter("data",data,io_newgrounds_components_CloudSaveComponent.allowNull).addComponentParameter("id",id);
	}
	,__class__: io_newgrounds_components_CloudSaveComponent
});
var io_newgrounds_components_ComponentList = function(core) {
	this._core = core;
	this.app = new io_newgrounds_components_AppComponent(this._core);
	this.cloudSave = new io_newgrounds_components_CloudSaveComponent(this._core);
	this.event = new io_newgrounds_components_EventComponent(this._core);
	this.gateway = new io_newgrounds_components_GatewayComponent(this._core);
	this.loader = new io_newgrounds_components_LoaderComponent(this._core);
	this.medal = new io_newgrounds_components_MedalComponent(this._core);
	this.scoreBoard = new io_newgrounds_components_ScoreBoardComponent(this._core);
};
$hxClasses["io.newgrounds.components.ComponentList"] = io_newgrounds_components_ComponentList;
io_newgrounds_components_ComponentList.__name__ = "io.newgrounds.components.ComponentList";
io_newgrounds_components_ComponentList.prototype = {
	__class__: io_newgrounds_components_ComponentList
};
var io_newgrounds_components_EventComponent = function(core) {
	io_newgrounds_components_Component.call(this,core);
};
$hxClasses["io.newgrounds.components.EventComponent"] = io_newgrounds_components_EventComponent;
io_newgrounds_components_EventComponent.__name__ = "io.newgrounds.components.EventComponent";
io_newgrounds_components_EventComponent.__super__ = io_newgrounds_components_Component;
io_newgrounds_components_EventComponent.prototype = $extend(io_newgrounds_components_Component.prototype,{
	logEvent: function(eventName) {
		return new io_newgrounds_Call(this._core,"Event.logEvent").addComponentParameter("event_name",eventName).addComponentParameter("host",this._core.host);
	}
	,__class__: io_newgrounds_components_EventComponent
});
var io_newgrounds_components_GatewayComponent = function(core) {
	io_newgrounds_components_Component.call(this,core);
};
$hxClasses["io.newgrounds.components.GatewayComponent"] = io_newgrounds_components_GatewayComponent;
io_newgrounds_components_GatewayComponent.__name__ = "io.newgrounds.components.GatewayComponent";
io_newgrounds_components_GatewayComponent.__super__ = io_newgrounds_components_Component;
io_newgrounds_components_GatewayComponent.prototype = $extend(io_newgrounds_components_Component.prototype,{
	getDatetime: function() {
		return new io_newgrounds_Call(this._core,"Gateway.getDatetime");
	}
	,getVersion: function() {
		return new io_newgrounds_Call(this._core,"Gateway.getVersion");
	}
	,ping: function() {
		return new io_newgrounds_Call(this._core,"Gateway.ping");
	}
	,__class__: io_newgrounds_components_GatewayComponent
});
var io_newgrounds_components_LoaderComponent = function(core) {
	io_newgrounds_components_Component.call(this,core);
};
$hxClasses["io.newgrounds.components.LoaderComponent"] = io_newgrounds_components_LoaderComponent;
io_newgrounds_components_LoaderComponent.__name__ = "io.newgrounds.components.LoaderComponent";
io_newgrounds_components_LoaderComponent.__super__ = io_newgrounds_components_Component;
io_newgrounds_components_LoaderComponent.prototype = $extend(io_newgrounds_components_Component.prototype,{
	loadAuthorUrl: function(redirect) {
		if(redirect == null) {
			redirect = false;
		}
		return new io_newgrounds_Call(this._core,"Loader.loadAuthorUrl").addComponentParameter("host",this._core.host).addComponentParameter("redirect",redirect,true);
	}
	,loadMoreGames: function(redirect) {
		if(redirect == null) {
			redirect = false;
		}
		return new io_newgrounds_Call(this._core,"Loader.loadMoreGames").addComponentParameter("host",this._core.host).addComponentParameter("redirect",redirect,true);
	}
	,loadNewgrounds: function(redirect) {
		if(redirect == null) {
			redirect = false;
		}
		return new io_newgrounds_Call(this._core,"Loader.loadNewgrounds").addComponentParameter("host",this._core.host).addComponentParameter("redirect",redirect,true);
	}
	,loadOfficialUrl: function(redirect) {
		if(redirect == null) {
			redirect = false;
		}
		return new io_newgrounds_Call(this._core,"Loader.loadOfficialUrl").addComponentParameter("host",this._core.host).addComponentParameter("redirect",redirect,true);
	}
	,loadReferral: function(redirect) {
		if(redirect == null) {
			redirect = false;
		}
		return new io_newgrounds_Call(this._core,"Loader.loadReferral").addComponentParameter("host",this._core.host).addComponentParameter("redirect",redirect,true);
	}
	,__class__: io_newgrounds_components_LoaderComponent
});
var io_newgrounds_components_MedalComponent = function(core) {
	io_newgrounds_components_Component.call(this,core);
};
$hxClasses["io.newgrounds.components.MedalComponent"] = io_newgrounds_components_MedalComponent;
io_newgrounds_components_MedalComponent.__name__ = "io.newgrounds.components.MedalComponent";
io_newgrounds_components_MedalComponent.__super__ = io_newgrounds_components_Component;
io_newgrounds_components_MedalComponent.prototype = $extend(io_newgrounds_components_Component.prototype,{
	unlock: function(id) {
		return new io_newgrounds_Call(this._core,"Medal.unlock",true,true).addComponentParameter("id",id);
	}
	,getList: function() {
		return new io_newgrounds_Call(this._core,"Medal.getList");
	}
	,__class__: io_newgrounds_components_MedalComponent
});
var io_newgrounds_components_ScoreBoardComponent = function(core) {
	io_newgrounds_components_Component.call(this,core);
};
$hxClasses["io.newgrounds.components.ScoreBoardComponent"] = io_newgrounds_components_ScoreBoardComponent;
io_newgrounds_components_ScoreBoardComponent.__name__ = "io.newgrounds.components.ScoreBoardComponent";
io_newgrounds_components_ScoreBoardComponent.__super__ = io_newgrounds_components_Component;
io_newgrounds_components_ScoreBoardComponent.prototype = $extend(io_newgrounds_components_Component.prototype,{
	getBoards: function() {
		return new io_newgrounds_Call(this._core,"ScoreBoard.getBoards");
	}
	,getScores: function(id,limit,skip,period,social,tag,user) {
		if(social == null) {
			social = false;
		}
		if(period == null) {
			period = "D";
		}
		if(skip == null) {
			skip = 0;
		}
		if(limit == null) {
			limit = 10;
		}
		if(user != null && typeof(user) != "string" && !(typeof(user) == "number" && ((user | 0) === user))) {
			user = user.id;
		}
		return new io_newgrounds_Call(this._core,"ScoreBoard.getScores").addComponentParameter("id",id).addComponentParameter("limit",limit,10).addComponentParameter("skip",skip,0).addComponentParameter("period",period,"D").addComponentParameter("social",social,false).addComponentParameter("tag",tag,null).addComponentParameter("user",user,null);
	}
	,postScore: function(id,value,tag) {
		return new io_newgrounds_Call(this._core,"ScoreBoard.postScore",true,true).addComponentParameter("id",id).addComponentParameter("value",value).addComponentParameter("tag",tag,null);
	}
	,createBoard: function(data) {
		var board = new io_newgrounds_objects_ScoreBoard(this._core,data);
		var _this = this._core;
		if(_this.verbose) {
			_this.log("created " + Std.string(board),{ fileName : "io/newgrounds/components/ScoreBoardComponent.hx", lineNumber : 93, className : "io.newgrounds.components.ScoreBoardComponent", methodName : "createBoard"});
		}
		this.allById.h[board._data.id] = board;
		return board;
	}
	,__class__: io_newgrounds_components_ScoreBoardComponent
});
var io_newgrounds_crypto_Aes = function(key) {
	this.key = key;
	this.roundKey = io_newgrounds_crypto__$Aes_CBC.keyExpansion(key);
};
$hxClasses["io.newgrounds.crypto.Aes"] = io_newgrounds_crypto_Aes;
io_newgrounds_crypto_Aes.__name__ = "io.newgrounds.crypto.Aes";
io_newgrounds_crypto_Aes.generateIV = function(bytes) {
	if(bytes == null) {
		bytes = 16;
	}
	var iv = new haxe_io_Bytes(new ArrayBuffer(bytes));
	var _g = 0;
	var _g1 = bytes;
	while(_g < _g1) {
		var i = _g++;
		var v = Math.floor(Math.random() * 256);
		iv.b[i] = v;
	}
	return iv;
};
io_newgrounds_crypto_Aes.prototype = {
	encrypt: function(data) {
		var iv = io_newgrounds_crypto_Aes.generateIV();
		var out = io_newgrounds_crypto__$Aes_CBC.encrypt(io_newgrounds_crypto__$Aes_PKCS7.pad(data),iv,this);
		var buffer = new haxe_io_BytesBuffer();
		buffer.add(iv);
		buffer.add(out);
		return buffer.getBytes();
	}
	,decrypt: function(data) {
		var iv = data.sub(0,16);
		var out = data.sub(16,data.length - 16);
		out = io_newgrounds_crypto__$Aes_CBC.decrypt(out,iv,this);
		return io_newgrounds_crypto__$Aes_PKCS7.unpad(out);
	}
	,__class__: io_newgrounds_crypto_Aes
};
var io_newgrounds_crypto__$Aes_CBC = function() { };
$hxClasses["io.newgrounds.crypto._Aes.CBC"] = io_newgrounds_crypto__$Aes_CBC;
io_newgrounds_crypto__$Aes_CBC.__name__ = "io.newgrounds.crypto._Aes.CBC";
io_newgrounds_crypto__$Aes_CBC.keyExpansion = function(key) {
	var nk = key.length >> 2;
	var nr = nk + 6;
	var roundKey = new Array(16 * (nr + 1));
	var temp = new Array(4);
	var _g = 0;
	var _g1 = nk;
	while(_g < _g1) {
		var i = _g++;
		roundKey[4 * i] = key.b[4 * i];
		roundKey[4 * i + 1] = key.b[4 * i + 1];
		roundKey[4 * i + 2] = key.b[4 * i + 2];
		roundKey[4 * i + 3] = key.b[4 * i + 3];
	}
	var _g = nk;
	var _g1 = 4 * (nr + 1);
	while(_g < _g1) {
		var i = _g++;
		temp[0] = roundKey[4 * (i - 1)];
		temp[1] = roundKey[4 * (i - 1) + 1];
		temp[2] = roundKey[4 * (i - 1) + 2];
		temp[3] = roundKey[4 * (i - 1) + 3];
		if(i % nk == 0) {
			temp = io_newgrounds_crypto__$Aes_CBC.subWord(io_newgrounds_crypto__$Aes_CBC.rotWord(temp));
			var k = i / nk | 0;
			temp[0] ^= io_newgrounds_crypto__$Aes_CBC.RCON[k];
		} else if(nk > 6 && i % nk == 4) {
			temp = io_newgrounds_crypto__$Aes_CBC.subWord(temp);
		}
		var k1 = i * 4;
		var m = (i - nk) * 4;
		roundKey[k1] = roundKey[m] ^ temp[0];
		roundKey[k1 + 1] = roundKey[m + 1] ^ temp[1];
		roundKey[k1 + 2] = roundKey[m + 2] ^ temp[2];
		roundKey[k1 + 3] = roundKey[m + 3] ^ temp[3];
	}
	return roundKey;
};
io_newgrounds_crypto__$Aes_CBC.rotWord = function(w) {
	var tmp = w[0];
	w[0] = w[1];
	w[1] = w[2];
	w[2] = w[3];
	w[3] = tmp;
	return w;
};
io_newgrounds_crypto__$Aes_CBC.subWord = function(w) {
	w[0] = io_newgrounds_crypto__$Aes_CBC.SBOX[w[0]];
	w[1] = io_newgrounds_crypto__$Aes_CBC.SBOX[w[1]];
	w[2] = io_newgrounds_crypto__$Aes_CBC.SBOX[w[2]];
	w[3] = io_newgrounds_crypto__$Aes_CBC.SBOX[w[3]];
	return w;
};
io_newgrounds_crypto__$Aes_CBC.encrypt = function(src,iv,aes) {
	var block = io_newgrounds_crypto__$Aes_Block._new();
	var out = src.sub(0,src.length);
	var vector = iv.sub(0,iv.length);
	var i = 0;
	var len = out.length;
	while(i < len) {
		var _g = 0;
		while(_g < 16) {
			var j = _g++;
			out.b[i + j] ^= vector.b[j];
		}
		io_newgrounds_crypto__$Aes_Block.readBytes(block,out,i);
		io_newgrounds_crypto__$Aes_Block.encrypt(block,aes);
		io_newgrounds_crypto__$Aes_Block.writeBytes(block,out,i);
		vector = out.sub(i,16);
		i += 16;
	}
	return out;
};
io_newgrounds_crypto__$Aes_CBC.decrypt = function(src,iv,aes) {
	var block = io_newgrounds_crypto__$Aes_Block._new();
	var out = src.sub(0,src.length);
	var vpos = out.length - 16;
	var i = out.length;
	while(i > 0) {
		i -= 16;
		vpos -= 16;
		io_newgrounds_crypto__$Aes_Block.readBytes(block,out,i);
		io_newgrounds_crypto__$Aes_Block.decrypt(block,aes);
		io_newgrounds_crypto__$Aes_Block.writeBytes(block,out,i);
		if(vpos < 0) {
			out.b[0] ^= iv.b[0];
			out.b[1] ^= iv.b[1];
			out.b[2] ^= iv.b[2];
			out.b[3] ^= iv.b[3];
			out.b[4] ^= iv.b[4];
			out.b[5] ^= iv.b[5];
			out.b[6] ^= iv.b[6];
			out.b[7] ^= iv.b[7];
			out.b[8] ^= iv.b[8];
			out.b[9] ^= iv.b[9];
			out.b[10] ^= iv.b[10];
			out.b[11] ^= iv.b[11];
			out.b[12] ^= iv.b[12];
			out.b[13] ^= iv.b[13];
			out.b[14] ^= iv.b[14];
			out.b[15] ^= iv.b[15];
		} else {
			var _g = 0;
			while(_g < 16) {
				var j = _g++;
				out.b[i + j] ^= out.b[vpos + j];
			}
		}
	}
	return out;
};
var io_newgrounds_crypto__$Aes_Block = {};
io_newgrounds_crypto__$Aes_Block._new = function() {
	return new Array(4);
};
io_newgrounds_crypto__$Aes_Block.readBytes = function(this1,data,index) {
	this1[0] = new Array(4);
	this1[0][0] = data.b[index];
	this1[0][1] = data.b[index + 1];
	this1[0][2] = data.b[index + 2];
	this1[0][3] = data.b[index + 3];
	this1[1] = new Array(4);
	this1[1][0] = data.b[4 + index];
	this1[1][1] = data.b[4 + index + 1];
	this1[1][2] = data.b[4 + index + 2];
	this1[1][3] = data.b[4 + index + 3];
	this1[2] = new Array(4);
	this1[2][0] = data.b[8 + index];
	this1[2][1] = data.b[8 + index + 1];
	this1[2][2] = data.b[8 + index + 2];
	this1[2][3] = data.b[8 + index + 3];
	this1[3] = new Array(4);
	this1[3][0] = data.b[12 + index];
	this1[3][1] = data.b[12 + index + 1];
	this1[3][2] = data.b[12 + index + 2];
	this1[3][3] = data.b[12 + index + 3];
	return this1;
};
io_newgrounds_crypto__$Aes_Block.writeBytes = function(this1,data,index) {
	data.b[index] = this1[0][0];
	data.b[1 + index] = this1[0][1];
	data.b[2 + index] = this1[0][2];
	data.b[3 + index] = this1[0][3];
	data.b[4 + index] = this1[1][0];
	data.b[5 + index] = this1[1][1];
	data.b[6 + index] = this1[1][2];
	data.b[7 + index] = this1[1][3];
	data.b[8 + index] = this1[2][0];
	data.b[9 + index] = this1[2][1];
	data.b[10 + index] = this1[2][2];
	data.b[11 + index] = this1[2][3];
	data.b[12 + index] = this1[3][0];
	data.b[13 + index] = this1[3][1];
	data.b[14 + index] = this1[3][2];
	data.b[15 + index] = this1[3][3];
};
io_newgrounds_crypto__$Aes_Block.get = function(this1,i,j) {
	return this1[i][j];
};
io_newgrounds_crypto__$Aes_Block.encrypt = function(this1,aes) {
	io_newgrounds_crypto__$Aes_Block.addRoundKey(this1,aes.roundKey,0);
	var nr = (aes.key.length >> 2) + 6;
	var _g = 1;
	var _g1 = nr;
	while(_g < _g1) {
		var round = _g++;
		io_newgrounds_crypto__$Aes_Block.subBytes(this1);
		io_newgrounds_crypto__$Aes_Block.shiftRows(this1);
		io_newgrounds_crypto__$Aes_Block.mixColumns(this1);
		io_newgrounds_crypto__$Aes_Block.addRoundKey(this1,aes.roundKey,round);
	}
	io_newgrounds_crypto__$Aes_Block.subBytes(this1);
	io_newgrounds_crypto__$Aes_Block.shiftRows(this1);
	io_newgrounds_crypto__$Aes_Block.addRoundKey(this1,aes.roundKey,nr);
};
io_newgrounds_crypto__$Aes_Block.decrypt = function(this1,aes) {
	var nr = (aes.key.length >> 2) + 6;
	io_newgrounds_crypto__$Aes_Block.addRoundKey(this1,aes.roundKey,nr);
	var round = nr - 1;
	while(round > 0) {
		io_newgrounds_crypto__$Aes_Block.invShiftRows(this1);
		io_newgrounds_crypto__$Aes_Block.invSubBytes(this1);
		io_newgrounds_crypto__$Aes_Block.addRoundKey(this1,aes.roundKey,round);
		io_newgrounds_crypto__$Aes_Block.invMixColumns(this1);
		--round;
	}
	io_newgrounds_crypto__$Aes_Block.invShiftRows(this1);
	io_newgrounds_crypto__$Aes_Block.invSubBytes(this1);
	io_newgrounds_crypto__$Aes_Block.addRoundKey(this1,aes.roundKey,0);
};
io_newgrounds_crypto__$Aes_Block.subBytes = function(this1) {
	this1[0][0] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[0][0]];
	this1[0][1] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[0][1]];
	this1[0][2] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[0][2]];
	this1[0][3] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[0][3]];
	this1[1][0] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[1][0]];
	this1[1][1] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[1][1]];
	this1[1][2] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[1][2]];
	this1[1][3] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[1][3]];
	this1[2][0] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[2][0]];
	this1[2][1] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[2][1]];
	this1[2][2] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[2][2]];
	this1[2][3] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[2][3]];
	this1[3][0] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[3][0]];
	this1[3][1] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[3][1]];
	this1[3][2] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[3][2]];
	this1[3][3] = io_newgrounds_crypto__$Aes_CBC.SBOX[this1[3][3]];
};
io_newgrounds_crypto__$Aes_Block.shiftRows = function(this1) {
	var temp = new Array(4);
	temp[0] = this1[1 % 4][1];
	temp[1] = this1[2 % 4][1];
	temp[2] = this1[3 % 4][1];
	temp[3] = this1[4 % 4][1];
	this1[0][1] = temp[0];
	this1[1][1] = temp[1];
	this1[2][1] = temp[2];
	this1[3][1] = temp[3];
	temp[0] = this1[2 % 4][2];
	temp[1] = this1[3 % 4][2];
	temp[2] = this1[4 % 4][2];
	temp[3] = this1[5 % 4][2];
	this1[0][2] = temp[0];
	this1[1][2] = temp[1];
	this1[2][2] = temp[2];
	this1[3][2] = temp[3];
	temp[0] = this1[3 % 4][3];
	temp[1] = this1[4 % 4][3];
	temp[2] = this1[5 % 4][3];
	temp[3] = this1[6 % 4][3];
	this1[0][3] = temp[0];
	this1[1][3] = temp[1];
	this1[2][3] = temp[2];
	this1[3][3] = temp[3];
};
io_newgrounds_crypto__$Aes_Block.mixColumns = function(this1) {
	var temp = new Array(4);
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		temp[0] = this1[i][0];
		temp[1] = this1[i][1];
		temp[2] = this1[i][2];
		temp[3] = this1[i][3];
		var val = io_newgrounds_crypto__$Aes_Block.mul(2,temp[0]) ^ io_newgrounds_crypto__$Aes_Block.mul(3,temp[1 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(1,temp[2 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(1,temp[3 % 4]);
		this1[i][0] = val;
		var val1 = io_newgrounds_crypto__$Aes_Block.mul(2,temp[1]) ^ io_newgrounds_crypto__$Aes_Block.mul(3,temp[2 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(1,temp[3 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(1,temp[4 % 4]);
		this1[i][1] = val1;
		var val2 = io_newgrounds_crypto__$Aes_Block.mul(2,temp[2]) ^ io_newgrounds_crypto__$Aes_Block.mul(3,temp[3 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(1,temp[4 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(1,temp[5 % 4]);
		this1[i][2] = val2;
		var val3 = io_newgrounds_crypto__$Aes_Block.mul(2,temp[3]) ^ io_newgrounds_crypto__$Aes_Block.mul(3,temp[4 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(1,temp[5 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(1,temp[6 % 4]);
		this1[i][3] = val3;
	}
};
io_newgrounds_crypto__$Aes_Block.invMixColumns = function(this1) {
	var temp = new Array(4);
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		temp[0] = this1[i][0];
		temp[1] = this1[i][1];
		temp[2] = this1[i][2];
		temp[3] = this1[i][3];
		var val = io_newgrounds_crypto__$Aes_Block.mul(14,temp[0]) ^ io_newgrounds_crypto__$Aes_Block.mul(11,temp[1 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(13,temp[2 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(9,temp[3 % 4]);
		this1[i][0] = val;
		var val1 = io_newgrounds_crypto__$Aes_Block.mul(14,temp[1]) ^ io_newgrounds_crypto__$Aes_Block.mul(11,temp[2 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(13,temp[3 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(9,temp[4 % 4]);
		this1[i][1] = val1;
		var val2 = io_newgrounds_crypto__$Aes_Block.mul(14,temp[2]) ^ io_newgrounds_crypto__$Aes_Block.mul(11,temp[3 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(13,temp[4 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(9,temp[5 % 4]);
		this1[i][2] = val2;
		var val3 = io_newgrounds_crypto__$Aes_Block.mul(14,temp[3]) ^ io_newgrounds_crypto__$Aes_Block.mul(11,temp[4 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(13,temp[5 % 4]) ^ io_newgrounds_crypto__$Aes_Block.mul(9,temp[6 % 4]);
		this1[i][3] = val3;
	}
};
io_newgrounds_crypto__$Aes_Block.invSubBytes = function(this1) {
	this1[0][0] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[0][0]];
	this1[1][0] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[1][0]];
	this1[2][0] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[2][0]];
	this1[3][0] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[3][0]];
	this1[0][1] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[0][1]];
	this1[1][1] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[1][1]];
	this1[2][1] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[2][1]];
	this1[3][1] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[3][1]];
	this1[0][2] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[0][2]];
	this1[1][2] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[1][2]];
	this1[2][2] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[2][2]];
	this1[3][2] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[3][2]];
	this1[0][3] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[0][3]];
	this1[1][3] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[1][3]];
	this1[2][3] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[2][3]];
	this1[3][3] = io_newgrounds_crypto__$Aes_CBC.RSBOX[this1[3][3]];
};
io_newgrounds_crypto__$Aes_Block.invShiftRows = function(this1) {
	var temp = new Array(4);
	temp[0] = this1[3 % 4][1];
	temp[1] = this1[4 % 4][1];
	temp[2] = this1[5 % 4][1];
	temp[3] = this1[6 % 4][1];
	this1[0][1] = temp[0];
	this1[1][1] = temp[1];
	this1[2][1] = temp[2];
	this1[3][1] = temp[3];
	temp[0] = this1[2 % 4][2];
	temp[1] = this1[3 % 4][2];
	temp[2] = this1[4 % 4][2];
	temp[3] = this1[5 % 4][2];
	this1[0][2] = temp[0];
	this1[1][2] = temp[1];
	this1[2][2] = temp[2];
	this1[3][2] = temp[3];
	temp[0] = this1[1 % 4][3];
	temp[1] = this1[2 % 4][3];
	temp[2] = this1[3 % 4][3];
	temp[3] = this1[4 % 4][3];
	this1[0][3] = temp[0];
	this1[1][3] = temp[1];
	this1[2][3] = temp[2];
	this1[3][3] = temp[3];
};
io_newgrounds_crypto__$Aes_Block.addRoundKey = function(this1,roundKey,round) {
	round <<= 2;
	this1[0][0] ^= roundKey[round * 4];
	this1[0][1] ^= roundKey[round * 4 + 1];
	this1[0][2] ^= roundKey[round * 4 + 2];
	this1[0][3] ^= roundKey[round * 4 + 3];
	this1[1][0] ^= roundKey[round * 4 + 4];
	this1[1][1] ^= roundKey[round * 4 + 4 + 1];
	this1[1][2] ^= roundKey[round * 4 + 4 + 2];
	this1[1][3] ^= roundKey[round * 4 + 4 + 3];
	this1[2][0] ^= roundKey[round * 4 + 8];
	this1[2][1] ^= roundKey[round * 4 + 8 + 1];
	this1[2][2] ^= roundKey[round * 4 + 8 + 2];
	this1[2][3] ^= roundKey[round * 4 + 8 + 3];
	this1[3][0] ^= roundKey[round * 4 + 12];
	this1[3][1] ^= roundKey[round * 4 + 12 + 1];
	this1[3][2] ^= roundKey[round * 4 + 12 + 2];
	this1[3][3] ^= roundKey[round * 4 + 12 + 3];
};
io_newgrounds_crypto__$Aes_Block.mul = function(a,b) {
	if(a != 0 && b != 0) {
		return io_newgrounds_crypto__$Aes_CBC.POWER3[(io_newgrounds_crypto__$Aes_CBC.LOG3[a] + io_newgrounds_crypto__$Aes_CBC.LOG3[b]) % 255];
	} else {
		return 0;
	}
};
var io_newgrounds_crypto__$Aes_PKCS7 = function() { };
$hxClasses["io.newgrounds.crypto._Aes.PKCS7"] = io_newgrounds_crypto__$Aes_PKCS7;
io_newgrounds_crypto__$Aes_PKCS7.__name__ = "io.newgrounds.crypto._Aes.PKCS7";
io_newgrounds_crypto__$Aes_PKCS7.pad = function(ciphertext) {
	var buffer = new haxe_io_BytesBuffer();
	buffer.addBytes(ciphertext,0,ciphertext.length);
	var padding = 16 - ciphertext.length % 16;
	var _g = 0;
	var _g1 = padding;
	while(_g < _g1) {
		var i = _g++;
		buffer.addByte(padding & 255);
	}
	return buffer.getBytes();
};
io_newgrounds_crypto__$Aes_PKCS7.unpad = function(encrypt) {
	var padding = encrypt.b[encrypt.length - 1];
	if(padding > encrypt.length) {
		throw haxe_Exception.thrown("Cannot remove " + padding + " bytes, because message is " + encrypt.length + " bytes");
	}
	var block = encrypt.length - padding;
	var _g = block;
	var _g1 = encrypt.length;
	while(_g < _g1) {
		var i = _g++;
		if(encrypt.b[i] != padding) {
			throw haxe_Exception.thrown("Invalid padding value. Got " + encrypt.b[i] + ", expected " + padding + " at position " + i);
		}
	}
	return encrypt.sub(0,block);
};
var io_newgrounds_crypto_Cipher = {};
io_newgrounds_crypto_Cipher.generateEncrypter = function(this1,key) {
	switch(this1) {
	case "aes128":
		return ($_=new io_newgrounds_crypto_Aes(key),$bind($_,$_.encrypt));
	case "rc4":
		return ($_=new io_newgrounds_crypto_Rc4(key),$bind($_,$_.crypt));
	default:
		return null;
	}
};
io_newgrounds_crypto_Cipher.generateEncrypterAndTestDecrypter = function(this1,key) {
	var encrypter;
	var decrypter;
	switch(this1) {
	case "aes128":
		var aes = new io_newgrounds_crypto_Aes(key);
		encrypter = $bind(aes,aes.encrypt);
		decrypter = $bind(aes,aes.decrypt);
		break;
	case "rc4":
		throw haxe_Exception.thrown("Rc4 decryption not implemented");
	default:
		return null;
	}
	return function(bytes) {
		var encrypted = encrypter(bytes);
		var decrypted = decrypter(encrypted);
		var _g = 0;
		var _g1 = bytes.length;
		while(_g < _g1) {
			var i = _g++;
			if(bytes.b[i] != decrypted.b[i]) {
				throw haxe_Exception.thrown("Reverse decryption did not match input, " + ("expected:" + bytes.toString() + ", got:" + decrypted.toString()));
			}
		}
		return encrypted;
	};
};
var io_newgrounds_crypto_EncodingFormat = {};
io_newgrounds_crypto_EncodingFormat.encode = function(this1,dataBytes) {
	switch(this1) {
	case "base64":
		return haxe_crypto_Base64.encode(dataBytes);
	case "hex":
		return dataBytes.toHex();
	default:
		return null;
	}
};
io_newgrounds_crypto_EncodingFormat.decode = function(this1,data) {
	switch(this1) {
	case "base64":
		return haxe_crypto_Base64.decode(data);
	case "hex":
		return haxe_io_Bytes.ofHex(data);
	default:
		return null;
	}
};
var io_newgrounds_crypto_Rc4 = function(key) {
	this.index2 = 0;
	this.index1 = 0;
	this.perm = new haxe_io_Bytes(new ArrayBuffer(256));
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		this.perm.b[i] = i;
	}
	var j = 0;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		j = (j + this.perm.b[i] + key.b[i % key.length]) % 256;
		var temp = this.perm.b[i];
		this.perm.b[i] = this.perm.b[j];
		this.perm.b[j] = temp;
	}
};
$hxClasses["io.newgrounds.crypto.Rc4"] = io_newgrounds_crypto_Rc4;
io_newgrounds_crypto_Rc4.__name__ = "io.newgrounds.crypto.Rc4";
io_newgrounds_crypto_Rc4.prototype = {
	swap: function(i,j) {
		var temp = this.perm.b[i];
		this.perm.b[i] = this.perm.b[j];
		this.perm.b[j] = temp;
	}
	,crypt: function(input) {
		var output = new haxe_io_Bytes(new ArrayBuffer(input.length));
		var _g = 0;
		var _g1 = input.length;
		while(_g < _g1) {
			var i = _g++;
			this.index1 = (this.index1 + 1) % 256;
			this.index2 = (this.index2 + this.perm.b[this.index1]) % 256;
			var i1 = this.index1;
			var j = this.index2;
			var temp = this.perm.b[i1];
			this.perm.b[i1] = this.perm.b[j];
			this.perm.b[j] = temp;
			var j1 = (this.perm.b[this.index1] + this.perm.b[this.index2]) % 256;
			output.b[i] = input.b[i] ^ this.perm.b[j1];
		}
		return output;
	}
	,__class__: io_newgrounds_crypto_Rc4
};
var io_newgrounds_objects_Error = {};
io_newgrounds_objects_Error.get_code = function(this1) {
	return this1.code;
};
io_newgrounds_objects_Error.get_message = function(this1) {
	return this1.message;
};
io_newgrounds_objects_Error._new = function(message,code) {
	return { message : message, code : code};
};
io_newgrounds_objects_Error.toString = function(this1) {
	return (this1.code != null ? "#" + this1.code + " - " : "") + this1.message;
};
var io_newgrounds_objects_Object = function(core,data) {
	this._core = core;
	this.onUpdate = new io_newgrounds_utils_Dispatcher();
	if(data != null) {
		this.parse(data);
	}
};
$hxClasses["io.newgrounds.objects.Object"] = io_newgrounds_objects_Object;
io_newgrounds_objects_Object.__name__ = "io.newgrounds.objects.Object";
io_newgrounds_objects_Object.prototype = {
	parse: function(data) {
		this._data = data;
		this.onUpdate.dispatch();
	}
	,destroy: function() {
		this._core = null;
	}
	,__class__: io_newgrounds_objects_Object
};
var io_newgrounds_objects_Medal = function(core,data) {
	this.onUnlock = new io_newgrounds_utils_Dispatcher();
	io_newgrounds_objects_Object.call(this,core,data);
};
$hxClasses["io.newgrounds.objects.Medal"] = io_newgrounds_objects_Medal;
io_newgrounds_objects_Medal.__name__ = "io.newgrounds.objects.Medal";
io_newgrounds_objects_Medal.__super__ = io_newgrounds_objects_Object;
io_newgrounds_objects_Medal.prototype = $extend(io_newgrounds_objects_Object.prototype,{
	get_id: function() {
		return this._data.id;
	}
	,get_name: function() {
		return this._data.name;
	}
	,get_description: function() {
		return this._data.description;
	}
	,get_icon: function() {
		return this._data.icon;
	}
	,get_value: function() {
		return this._data.value;
	}
	,get_difficulty: function() {
		return this._data.difficulty;
	}
	,get_secret: function() {
		return this._data.secret == 1;
	}
	,get_unlocked: function() {
		return this._data.unlocked;
	}
	,parse: function(data) {
		var wasLocked = this._data == null || !this._data.unlocked;
		io_newgrounds_objects_Object.prototype.parse.call(this,data);
		if(wasLocked && this._data.unlocked) {
			this.onUnlock.dispatch();
		}
	}
	,sendUnlock: function() {
		if(this._core.sessionId == null) {
			this._data.unlocked = true;
			this.onUnlock.dispatch();
		}
		this._core.calls.medal.unlock(this._data.id).addDataHandler($bind(this,this.onUnlockResponse)).send();
	}
	,onUnlockResponse: function(response) {
		if(response.success && response.result.data.success) {
			this.parse(response.result.data.medal);
			if(!this._data.unlocked) {
				this._data.unlocked = true;
				this.onUnlock.dispatch();
			}
		}
	}
	,sendDebugUnlock: function() {
		if(io_newgrounds_NG.core.sessionId == null) {
			this.onUnlock.dispatch();
		} else {
			this._data.unlocked = false;
			this.sendUnlock();
		}
	}
	,get_difficultyName: function() {
		switch(this._data.difficulty) {
		case 1:
			return "Easy";
		case 2:
			return "Moderate";
		case 3:
			return "Challenging";
		case 4:
			return "Difficult";
		case 5:
			return "Brutal";
		default:
			throw haxe_Exception.thrown("invalid difficulty: " + this._data.difficulty);
		}
	}
	,toString: function() {
		var tmp = "Medal: " + this._data.id + "@" + this._data.name + " (" + (this._data.unlocked ? "unlocked" : "locked") + ", " + this._data.value + " pts, ";
		var tmp1;
		switch(this._data.difficulty) {
		case 1:
			tmp1 = "Easy";
			break;
		case 2:
			tmp1 = "Moderate";
			break;
		case 3:
			tmp1 = "Challenging";
			break;
		case 4:
			tmp1 = "Difficult";
			break;
		case 5:
			tmp1 = "Brutal";
			break;
		default:
			throw haxe_Exception.thrown("invalid difficulty: " + this._data.difficulty);
		}
		return tmp + tmp1 + ").";
	}
	,__class__: io_newgrounds_objects_Medal
});
var io_newgrounds_objects_SaveSlot = function(core,data) {
	io_newgrounds_objects_Object.call(this,core,data);
};
$hxClasses["io.newgrounds.objects.SaveSlot"] = io_newgrounds_objects_SaveSlot;
io_newgrounds_objects_SaveSlot.__name__ = "io.newgrounds.objects.SaveSlot";
io_newgrounds_objects_SaveSlot.__super__ = io_newgrounds_objects_Object;
io_newgrounds_objects_SaveSlot.prototype = $extend(io_newgrounds_objects_Object.prototype,{
	get_datetime: function() {
		return this._data.datetime;
	}
	,get_id: function() {
		return this._data.id;
	}
	,get_size: function() {
		return this._data.size;
	}
	,get_timestamp: function() {
		return this._data.timestamp;
	}
	,get_url: function() {
		return this._data.url;
	}
	,save: function(data,callback) {
		var _gthis = this;
		if(data == null) {
			throw haxe_Exception.thrown("cannot save null to a SaveSlot");
		}
		this._core.calls.cloudSave.setData(data,this._data.id).addDataHandler(function(response) {
			_gthis.setContentsOnSlotFetch(response,data,callback);
		}).send();
	}
	,clear: function(callback) {
		var _gthis = this;
		this._core.calls.cloudSave.clearSlot(this._data.id).addDataHandler(function(response) {
			_gthis.setContentsOnSlotFetch(response,null,callback);
		}).send();
	}
	,setContentsOnSlotFetch: function(response,contents,callback) {
		if(callback == null) {
			callback = function(_) {
			};
		}
		if(response.success && response.result.data.success) {
			this.contents = contents;
			this.parse(response.result.data.slot);
		}
		callback(io_newgrounds_objects_events_ResultType.Success);
	}
	,load: function(callback) {
		var _gthis = this;
		if(this._data.url == null) {
			throw haxe_Exception.thrown("Cannot load from an empty SaveSlot, id:" + this._data.id);
		}
		io_newgrounds_utils_AsyncHttp.send(this._data.url,null,function(s) {
			_gthis.contents = s;
			callback(io_newgrounds_objects_events_TypedResultType.Success(_gthis.contents));
			_gthis.onUpdate.dispatch();
		},function(error) {
			callback(io_newgrounds_objects_events_TypedResultType.Error(error));
		});
	}
	,isEmpty: function() {
		return this._data.url == null;
	}
	,__class__: io_newgrounds_objects_SaveSlot
});
var io_newgrounds_objects_Score = {};
io_newgrounds_objects_Score.get_formatted_value = function(this1) {
	return this1.formatted_value;
};
io_newgrounds_objects_Score.get_formattedValue = function(this1) {
	return this1.formatted_value;
};
var io_newgrounds_objects_ScoreBoard = function(core,data) {
	io_newgrounds_objects_Object.call(this,core,data);
};
$hxClasses["io.newgrounds.objects.ScoreBoard"] = io_newgrounds_objects_ScoreBoard;
io_newgrounds_objects_ScoreBoard.__name__ = "io.newgrounds.objects.ScoreBoard";
io_newgrounds_objects_ScoreBoard.__super__ = io_newgrounds_objects_Object;
io_newgrounds_objects_ScoreBoard.prototype = $extend(io_newgrounds_objects_Object.prototype,{
	get_id: function() {
		return this._data.id;
	}
	,get_name: function() {
		return this._data.name;
	}
	,requestScores: function(limit,skip,period,social,tag,user) {
		if(social == null) {
			social = false;
		}
		if(period == null) {
			period = "A";
		}
		if(skip == null) {
			skip = 0;
		}
		if(limit == null) {
			limit = 10;
		}
		this._core.calls.scoreBoard.getScores(this._data.id,limit,skip,period,social,tag,user).addDataHandler($bind(this,this.onScoresReceived)).send();
	}
	,onScoresReceived: function(response) {
		if(!response.success || !response.result.data.success) {
			return;
		}
		this.scores = response.result.data.scores;
		var _this = this._core;
		if(_this.verbose) {
			_this.log("received " + this.scores.length + " scores",{ fileName : "io/newgrounds/objects/ScoreBoard.hx", lineNumber : 55, className : "io.newgrounds.objects.ScoreBoard", methodName : "onScoresReceived"});
		}
		this.onUpdate.dispatch();
	}
	,postScore: function(value,tag) {
		this._core.calls.scoreBoard.postScore(this._data.id,value,tag).addDataHandler($bind(this,this.onScorePosted)).send();
	}
	,onScorePosted: function(response) {
	}
	,toString: function() {
		return "ScoreBoard: " + this._data.id + "@" + this._data.name;
	}
	,__class__: io_newgrounds_objects_ScoreBoard
});
var io_newgrounds_objects_Session = {};
io_newgrounds_objects_Session.get_passportUrl = function(this1) {
	return this1.passport_url;
};
io_newgrounds_objects_Session.get_passport_url = function(this1) {
	return this1.passport_url;
};
io_newgrounds_objects_Session.get_status = function(this1) {
	if(this1.expired || this1.id == null || this1.id == "") {
		return "session-expired";
	}
	if(this1.user != null && this1.user.name != null && this1.user.name != "") {
		return "user-loaded";
	}
	return "request-login";
};
var io_newgrounds_objects_events_Response = {};
io_newgrounds_objects_events_Response.get_success = function(this1) {
	return this1.success;
};
io_newgrounds_objects_events_Response.get_error = function(this1) {
	return this1.error;
};
io_newgrounds_objects_events_Response.get_debug = function(this1) {
	return this1.debug;
};
io_newgrounds_objects_events_Response.get_result = function(this1) {
	return this1.result;
};
io_newgrounds_objects_events_Response.get_appId = function(this1) {
	return this1.app_id;
};
io_newgrounds_objects_events_Response._new = function(core,reply) {
	var this1;
	try {
		this1 = JSON.parse(reply);
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		this1 = JSON.parse("{\"success\":false,\"error\":{\"message\":\"Error parsing reply:'" + reply + "' error:'" + Std.string(e) + "'\",\"code\":0}}");
	}
	if(!this1.success) {
		var tmp = this1.error;
		core.logError("Call unseccessful: " + (tmp == null ? "null" : (tmp.code != null ? "#" + tmp.code + " - " : "") + tmp.message),{ fileName : "io/newgrounds/objects/events/Response.hx", lineNumber : 40, className : "io.newgrounds.objects.events._Response.Response_Impl_", methodName : "_new"});
	} else if(!this1.result.data.success) {
		var tmp = this1.result.data.error;
		core.logError("" + this1.result.component + " fail: " + (tmp == null ? "null" : (tmp.code != null ? "#" + tmp.code + " - " : "") + tmp.message),{ fileName : "io/newgrounds/objects/events/Response.hx", lineNumber : 42, className : "io.newgrounds.objects.events._Response.Response_Impl_", methodName : "_new"});
	}
	return this1;
};
var io_newgrounds_objects_events_Result = {};
io_newgrounds_objects_events_Result.get_component = function(this1) {
	return this1.component;
};
io_newgrounds_objects_events_Result.get_echo = function(this1) {
	return this1.echo;
};
io_newgrounds_objects_events_Result.get_data = function(this1) {
	return this1.data;
};
io_newgrounds_objects_events_Result.get_success = function(this1) {
	return this1.data.success;
};
io_newgrounds_objects_events_Result.get_debug = function(this1) {
	return this1.data.debug;
};
io_newgrounds_objects_events_Result.get_error = function(this1) {
	return this1.data.error;
};
var io_newgrounds_objects_events_GetHostResult = {};
io_newgrounds_objects_events_GetHostResult.get_host_approved = function(this1) {
	return this1.host_approved;
};
io_newgrounds_objects_events_GetHostResult.get_hostApproved = function(this1) {
	return this1.host_approved;
};
var io_newgrounds_objects_events_GetCurrentVersionResult = {};
io_newgrounds_objects_events_GetCurrentVersionResult.get_current_version = function(this1) {
	return this1.current_version;
};
io_newgrounds_objects_events_GetCurrentVersionResult.get_currentVersion = function(this1) {
	return this1.current_version;
};
io_newgrounds_objects_events_GetCurrentVersionResult.get_client_deprecated = function(this1) {
	return this1.client_deprecated;
};
io_newgrounds_objects_events_GetCurrentVersionResult.get_clientDeprecated = function(this1) {
	return this1.client_deprecated;
};
var io_newgrounds_objects_events_LogEventResult = {};
io_newgrounds_objects_events_LogEventResult.get_event_name = function(this1) {
	return this1.event_name;
};
io_newgrounds_objects_events_LogEventResult.get_eventName = function(this1) {
	return this1.event_name;
};
var io_newgrounds_objects_events_GetDateTimeResult = {};
io_newgrounds_objects_events_GetDateTimeResult.get_datetime = function(this1) {
	return this1.datetime;
};
io_newgrounds_objects_events_GetDateTimeResult.get_dateTime = function(this1) {
	return this1.datetime;
};
var io_newgrounds_objects_events_MedalUnlockResult = {};
io_newgrounds_objects_events_MedalUnlockResult.get_medal_score = function(this1) {
	return this1.medal_score;
};
io_newgrounds_objects_events_MedalUnlockResult.get_medalScore = function(this1) {
	return this1.medal_score;
};
var io_newgrounds_objects_events_TypedResultType = $hxEnums["io.newgrounds.objects.events.TypedResultType"] = { __ename__:"io.newgrounds.objects.events.TypedResultType",__constructs__:null
	,Error: ($_=function(error) { return {_hx_index:0,error:error,__enum__:"io.newgrounds.objects.events.TypedResultType",toString:$estr,__params__:function(){ return [this.error];}}; },$_._hx_name="Error",$_)
	,Success: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"io.newgrounds.objects.events.TypedResultType",toString:$estr,__params__:function(){ return [this.value];}}; },$_._hx_name="Success",$_)
};
io_newgrounds_objects_events_TypedResultType.__constructs__ = [io_newgrounds_objects_events_TypedResultType.Error,io_newgrounds_objects_events_TypedResultType.Success];
io_newgrounds_objects_events_TypedResultType.__empty_constructs__ = [];
var io_newgrounds_objects_events_ResultType = $hxEnums["io.newgrounds.objects.events.ResultType"] = { __ename__:"io.newgrounds.objects.events.ResultType",__constructs__:null
	,Error: ($_=function(error) { return {_hx_index:0,error:error,__enum__:"io.newgrounds.objects.events.ResultType",toString:$estr,__params__:function(){ return [this.error];}}; },$_._hx_name="Error",$_)
	,Success: {_hx_name:"Success",_hx_index:1,__enum__:"io.newgrounds.objects.events.ResultType",toString:$estr}
};
io_newgrounds_objects_events_ResultType.__constructs__ = [io_newgrounds_objects_events_ResultType.Error,io_newgrounds_objects_events_ResultType.Success];
io_newgrounds_objects_events_ResultType.__empty_constructs__ = [io_newgrounds_objects_events_ResultType.Success];
var io_newgrounds_utils_AsyncNGCall = function() { };
$hxClasses["io.newgrounds.utils.AsyncNGCall"] = io_newgrounds_utils_AsyncNGCall;
io_newgrounds_utils_AsyncNGCall.__name__ = "io.newgrounds.utils.AsyncNGCall";
io_newgrounds_utils_AsyncNGCall.send = function(core,data,onData,onError,onStatus) {
	if(core.verbose) {
		core.log("sending: " + data,{ fileName : "io/newgrounds/utils/AsyncHttp.hx", lineNumber : 36, className : "io.newgrounds.utils.AsyncNGCall", methodName : "send"});
	}
	io_newgrounds_utils_AsyncHttp.sendSync("https://newgrounds.io/gateway_v3.php",data,onData,onError,onStatus);
};
var io_newgrounds_utils_AsyncHttp = function() { };
$hxClasses["io.newgrounds.utils.AsyncHttp"] = io_newgrounds_utils_AsyncHttp;
io_newgrounds_utils_AsyncHttp.__name__ = "io.newgrounds.utils.AsyncHttp";
io_newgrounds_utils_AsyncHttp.getText = function(path,onData,onError,onStatus) {
	io_newgrounds_utils_AsyncHttp.send(path,null,onData,onError,onStatus);
};
io_newgrounds_utils_AsyncHttp.send = function(path,data,onData,onError,onStatus) {
	io_newgrounds_utils_AsyncHttp.sendSync(path,data,onData,onError,onStatus);
};
io_newgrounds_utils_AsyncHttp.sendSync = function(path,data,onData,onError,onStatus) {
	var http = new haxe_http_HttpJs(path);
	if(data != null) {
		http.setParameter("input",data);
	}
	http.onData = onData;
	http.onError = onError;
	if(onStatus != null) {
		http.onStatus = onStatus;
	}
	http.request(data != null);
	return http;
};
var io_newgrounds_utils_TypedDispatcher = function() {
	this._list = [];
	this._once = [];
};
$hxClasses["io.newgrounds.utils.TypedDispatcher"] = io_newgrounds_utils_TypedDispatcher;
io_newgrounds_utils_TypedDispatcher.__name__ = "io.newgrounds.utils.TypedDispatcher";
io_newgrounds_utils_TypedDispatcher.prototype = {
	add: function(handler,once) {
		if(once == null) {
			once = false;
		}
		if(this._list.indexOf(handler) != -1) {
			if(!once && this._once.indexOf(handler) != -1) {
				HxOverrides.remove(this._once,handler);
			}
			return false;
		}
		this._list.unshift(handler);
		if(once) {
			this._once.unshift(handler);
		}
		return true;
	}
	,addOnce: function(handler) {
		return this.add(handler,true);
	}
	,remove: function(handler) {
		HxOverrides.remove(this._once,handler);
		return HxOverrides.remove(this._list,handler);
	}
	,dispatch: function(arg) {
		var i = this._list.length - 1;
		while(i >= 0) {
			var handler = this._list[i];
			if(HxOverrides.remove(this._once,handler)) {
				HxOverrides.remove(this._list,handler);
			}
			handler(arg);
			--i;
		}
	}
	,__class__: io_newgrounds_utils_TypedDispatcher
};
var io_newgrounds_utils_SaveSlotList = {};
io_newgrounds_utils_SaveSlotList._new = function(core) {
	return new io_newgrounds_utils_RawSaveSlotList(core);
};
io_newgrounds_utils_SaveSlotList.get = function(this1,id) {
	return this1.map.h[id];
};
var io_newgrounds_utils_RawSaveSlotList = function(core) {
	this.core = core;
};
$hxClasses["io.newgrounds.utils.RawSaveSlotList"] = io_newgrounds_utils_RawSaveSlotList;
io_newgrounds_utils_RawSaveSlotList.__name__ = "io.newgrounds.utils.RawSaveSlotList";
io_newgrounds_utils_RawSaveSlotList.noCallback = function(r) {
};
io_newgrounds_utils_RawSaveSlotList.prototype = {
	loadList: function(loadFiles,callback) {
		if(loadFiles == null) {
			loadFiles = false;
		}
		var _gthis = this;
		if(callback == null) {
			callback = io_newgrounds_utils_RawSaveSlotList.noCallback;
		}
		this.core.calls.cloudSave.loadSlots().addDataHandler(function(response) {
			_gthis.onSaveSlotsReceived(response,loadFiles,callback);
		}).addErrorHandler(function(e) {
			callback(io_newgrounds_objects_events_ResultType.Error((e.code != null ? "#" + e.code + " - " : "") + e.message));
		}).send();
	}
	,onSaveSlotsReceived: function(response,loadFiles,callback) {
		var _gthis = this;
		if(!response.success) {
			var this1 = response.error;
			callback(io_newgrounds_objects_events_ResultType.Error((this1.code != null ? "#" + this1.code + " - " : "") + this1.message));
			return;
		}
		if(!response.result.data.success) {
			var this1 = response.result.data.error;
			callback(io_newgrounds_objects_events_ResultType.Error((this1.code != null ? "#" + this1.code + " - " : "") + this1.message));
			return;
		}
		var idList = [];
		if(this.map == null) {
			this.map = new haxe_ds_IntMap();
		}
		var _g = 0;
		var _g1 = response.result.data.slots;
		while(_g < _g1.length) {
			var slotData = _g1[_g];
			++_g;
			var id = slotData.id;
			if(this.map.h.hasOwnProperty(id) == false) {
				var slot = new io_newgrounds_objects_SaveSlot(this.core,slotData);
				this.map.h[id] = slot;
			} else {
				this.map.h[id].parse(slotData);
			}
			idList.push(id);
		}
		var _this = this.core;
		var any = "" + idList.length + " SaveSlots received [" + idList.join(", ") + "]";
		if(_this.verbose) {
			_this.log(any,{ fileName : "io/newgrounds/utils/SaveSlotList.hx", lineNumber : 91, className : "io.newgrounds.utils.RawSaveSlotList", methodName : "onSaveSlotsReceived"});
		}
		if(loadFiles) {
			this.loadAllFiles(function(result) {
				callback(result);
				_gthis.core.onSaveSlotsLoaded.dispatch();
			});
		} else {
			callback(io_newgrounds_objects_events_ResultType.Success);
			this.core.onSaveSlotsLoaded.dispatch();
		}
	}
	,loadAllFiles: function(callback) {
		if(this.map == null) {
			this.loadList(true,callback);
			return;
		}
		var slotsToLoad = 0;
		var result = io_newgrounds_objects_events_ResultType.Success;
		var onSlotLoad = function(slotResult) {
			if(result == io_newgrounds_objects_events_ResultType.Success) {
				switch(slotResult._hx_index) {
				case 0:
					var e = slotResult.error;
					result = io_newgrounds_objects_events_ResultType.Error(e);
					break;
				case 1:
					break;
				}
			}
			slotsToLoad -= 1;
			if(slotsToLoad == 0) {
				callback(result);
			}
		};
		var slot = this.map.iterator();
		while(slot.hasNext()) {
			var slot1 = slot.next();
			if(slot1._data.url == null == false) {
				slotsToLoad += 1;
			}
		}
		if(slotsToLoad == 0) {
			callback(io_newgrounds_objects_events_ResultType.Success);
			return;
		}
		var slot = this.map.iterator();
		while(slot.hasNext()) {
			var slot1 = slot.next();
			if(slot1._data.url == null == false) {
				slot1.load(onSlotLoad);
			}
		}
	}
	,keys: function() {
		return this.map.keys();
	}
	,iterator: function() {
		return this.map.iterator();
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this.map);
	}
	,__class__: io_newgrounds_utils_RawSaveSlotList
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
Math.__name__ = "Math";
var ldtk_WorldLayout = $hxEnums["ldtk.WorldLayout"] = { __ename__:"ldtk.WorldLayout",__constructs__:null
	,Free: {_hx_name:"Free",_hx_index:0,__enum__:"ldtk.WorldLayout",toString:$estr}
	,GridVania: {_hx_name:"GridVania",_hx_index:1,__enum__:"ldtk.WorldLayout",toString:$estr}
	,LinearHorizontal: {_hx_name:"LinearHorizontal",_hx_index:2,__enum__:"ldtk.WorldLayout",toString:$estr}
	,LinearVertical: {_hx_name:"LinearVertical",_hx_index:3,__enum__:"ldtk.WorldLayout",toString:$estr}
};
ldtk_WorldLayout.__constructs__ = [ldtk_WorldLayout.Free,ldtk_WorldLayout.GridVania,ldtk_WorldLayout.LinearHorizontal,ldtk_WorldLayout.LinearVertical];
ldtk_WorldLayout.__empty_constructs__ = [ldtk_WorldLayout.Free,ldtk_WorldLayout.GridVania,ldtk_WorldLayout.LinearHorizontal,ldtk_WorldLayout.LinearVertical];
var ldtk_LayerType = $hxEnums["ldtk.LayerType"] = { __ename__:"ldtk.LayerType",__constructs__:null
	,IntGrid: {_hx_name:"IntGrid",_hx_index:0,__enum__:"ldtk.LayerType",toString:$estr}
	,Entities: {_hx_name:"Entities",_hx_index:1,__enum__:"ldtk.LayerType",toString:$estr}
	,Tiles: {_hx_name:"Tiles",_hx_index:2,__enum__:"ldtk.LayerType",toString:$estr}
	,AutoLayer: {_hx_name:"AutoLayer",_hx_index:3,__enum__:"ldtk.LayerType",toString:$estr}
};
ldtk_LayerType.__constructs__ = [ldtk_LayerType.IntGrid,ldtk_LayerType.Entities,ldtk_LayerType.Tiles,ldtk_LayerType.AutoLayer];
ldtk_LayerType.__empty_constructs__ = [ldtk_LayerType.IntGrid,ldtk_LayerType.Entities,ldtk_LayerType.Tiles,ldtk_LayerType.AutoLayer];
var ldtk_AutoLayerRuleTileMode = $hxEnums["ldtk.AutoLayerRuleTileMode"] = { __ename__:"ldtk.AutoLayerRuleTileMode",__constructs__:null
	,Single: {_hx_name:"Single",_hx_index:0,__enum__:"ldtk.AutoLayerRuleTileMode",toString:$estr}
	,Stamp: {_hx_name:"Stamp",_hx_index:1,__enum__:"ldtk.AutoLayerRuleTileMode",toString:$estr}
};
ldtk_AutoLayerRuleTileMode.__constructs__ = [ldtk_AutoLayerRuleTileMode.Single,ldtk_AutoLayerRuleTileMode.Stamp];
ldtk_AutoLayerRuleTileMode.__empty_constructs__ = [ldtk_AutoLayerRuleTileMode.Single,ldtk_AutoLayerRuleTileMode.Stamp];
var ldtk_AutoLayerRuleCheckerMode = $hxEnums["ldtk.AutoLayerRuleCheckerMode"] = { __ename__:"ldtk.AutoLayerRuleCheckerMode",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"ldtk.AutoLayerRuleCheckerMode",toString:$estr}
	,Horizontal: {_hx_name:"Horizontal",_hx_index:1,__enum__:"ldtk.AutoLayerRuleCheckerMode",toString:$estr}
	,Vertical: {_hx_name:"Vertical",_hx_index:2,__enum__:"ldtk.AutoLayerRuleCheckerMode",toString:$estr}
};
ldtk_AutoLayerRuleCheckerMode.__constructs__ = [ldtk_AutoLayerRuleCheckerMode.None,ldtk_AutoLayerRuleCheckerMode.Horizontal,ldtk_AutoLayerRuleCheckerMode.Vertical];
ldtk_AutoLayerRuleCheckerMode.__empty_constructs__ = [ldtk_AutoLayerRuleCheckerMode.None,ldtk_AutoLayerRuleCheckerMode.Horizontal,ldtk_AutoLayerRuleCheckerMode.Vertical];
var ldtk_FieldDisplayPosition = $hxEnums["ldtk.FieldDisplayPosition"] = { __ename__:"ldtk.FieldDisplayPosition",__constructs__:null
	,Above: {_hx_name:"Above",_hx_index:0,__enum__:"ldtk.FieldDisplayPosition",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:1,__enum__:"ldtk.FieldDisplayPosition",toString:$estr}
	,Beneath: {_hx_name:"Beneath",_hx_index:2,__enum__:"ldtk.FieldDisplayPosition",toString:$estr}
};
ldtk_FieldDisplayPosition.__constructs__ = [ldtk_FieldDisplayPosition.Above,ldtk_FieldDisplayPosition.Center,ldtk_FieldDisplayPosition.Beneath];
ldtk_FieldDisplayPosition.__empty_constructs__ = [ldtk_FieldDisplayPosition.Above,ldtk_FieldDisplayPosition.Center,ldtk_FieldDisplayPosition.Beneath];
var ldtk_FieldType = $hxEnums["ldtk.FieldType"] = { __ename__:"ldtk.FieldType",__constructs__:null
	,F_Int: {_hx_name:"F_Int",_hx_index:0,__enum__:"ldtk.FieldType",toString:$estr}
	,F_Float: {_hx_name:"F_Float",_hx_index:1,__enum__:"ldtk.FieldType",toString:$estr}
	,F_String: {_hx_name:"F_String",_hx_index:2,__enum__:"ldtk.FieldType",toString:$estr}
	,F_Text: {_hx_name:"F_Text",_hx_index:3,__enum__:"ldtk.FieldType",toString:$estr}
	,F_Bool: {_hx_name:"F_Bool",_hx_index:4,__enum__:"ldtk.FieldType",toString:$estr}
	,F_Color: {_hx_name:"F_Color",_hx_index:5,__enum__:"ldtk.FieldType",toString:$estr}
	,F_Enum: ($_=function(enumDefUid) { return {_hx_index:6,enumDefUid:enumDefUid,__enum__:"ldtk.FieldType",toString:$estr,__params__:function(){ return [this.enumDefUid];}}; },$_._hx_name="F_Enum",$_)
	,F_Point: {_hx_name:"F_Point",_hx_index:7,__enum__:"ldtk.FieldType",toString:$estr}
	,F_Path: {_hx_name:"F_Path",_hx_index:8,__enum__:"ldtk.FieldType",toString:$estr}
	,F_EntityRef: {_hx_name:"F_EntityRef",_hx_index:9,__enum__:"ldtk.FieldType",toString:$estr}
	,F_Tile: {_hx_name:"F_Tile",_hx_index:10,__enum__:"ldtk.FieldType",toString:$estr}
};
ldtk_FieldType.__constructs__ = [ldtk_FieldType.F_Int,ldtk_FieldType.F_Float,ldtk_FieldType.F_String,ldtk_FieldType.F_Text,ldtk_FieldType.F_Bool,ldtk_FieldType.F_Color,ldtk_FieldType.F_Enum,ldtk_FieldType.F_Point,ldtk_FieldType.F_Path,ldtk_FieldType.F_EntityRef,ldtk_FieldType.F_Tile];
ldtk_FieldType.__empty_constructs__ = [ldtk_FieldType.F_Int,ldtk_FieldType.F_Float,ldtk_FieldType.F_String,ldtk_FieldType.F_Text,ldtk_FieldType.F_Bool,ldtk_FieldType.F_Color,ldtk_FieldType.F_Point,ldtk_FieldType.F_Path,ldtk_FieldType.F_EntityRef,ldtk_FieldType.F_Tile];
ldtk_FieldType.__meta__ = { fields : { F_EntityRef : { added : ["1.0.0"]}, F_Tile : { added : ["1.0.0"]}}};
var ldtk_EntityRenderMode = $hxEnums["ldtk.EntityRenderMode"] = { __ename__:"ldtk.EntityRenderMode",__constructs__:null
	,Rectangle: {_hx_name:"Rectangle",_hx_index:0,__enum__:"ldtk.EntityRenderMode",toString:$estr}
	,Ellipse: {_hx_name:"Ellipse",_hx_index:1,__enum__:"ldtk.EntityRenderMode",toString:$estr}
	,Tile: {_hx_name:"Tile",_hx_index:2,__enum__:"ldtk.EntityRenderMode",toString:$estr}
	,Cross: {_hx_name:"Cross",_hx_index:3,__enum__:"ldtk.EntityRenderMode",toString:$estr}
};
ldtk_EntityRenderMode.__constructs__ = [ldtk_EntityRenderMode.Rectangle,ldtk_EntityRenderMode.Ellipse,ldtk_EntityRenderMode.Tile,ldtk_EntityRenderMode.Cross];
ldtk_EntityRenderMode.__empty_constructs__ = [ldtk_EntityRenderMode.Rectangle,ldtk_EntityRenderMode.Ellipse,ldtk_EntityRenderMode.Tile,ldtk_EntityRenderMode.Cross];
var ldtk_EntityTileRenderMode = $hxEnums["ldtk.EntityTileRenderMode"] = { __ename__:"ldtk.EntityTileRenderMode",__constructs__:null
	,Cover: {_hx_name:"Cover",_hx_index:0,__enum__:"ldtk.EntityTileRenderMode",toString:$estr}
	,FitInside: {_hx_name:"FitInside",_hx_index:1,__enum__:"ldtk.EntityTileRenderMode",toString:$estr}
	,Repeat: {_hx_name:"Repeat",_hx_index:2,__enum__:"ldtk.EntityTileRenderMode",toString:$estr}
	,Stretch: {_hx_name:"Stretch",_hx_index:3,__enum__:"ldtk.EntityTileRenderMode",toString:$estr}
	,FullSizeCropped: {_hx_name:"FullSizeCropped",_hx_index:4,__enum__:"ldtk.EntityTileRenderMode",toString:$estr}
	,FullSizeUncropped: {_hx_name:"FullSizeUncropped",_hx_index:5,__enum__:"ldtk.EntityTileRenderMode",toString:$estr}
	,NineSlice: {_hx_name:"NineSlice",_hx_index:6,__enum__:"ldtk.EntityTileRenderMode",toString:$estr}
};
ldtk_EntityTileRenderMode.__constructs__ = [ldtk_EntityTileRenderMode.Cover,ldtk_EntityTileRenderMode.FitInside,ldtk_EntityTileRenderMode.Repeat,ldtk_EntityTileRenderMode.Stretch,ldtk_EntityTileRenderMode.FullSizeCropped,ldtk_EntityTileRenderMode.FullSizeUncropped,ldtk_EntityTileRenderMode.NineSlice];
ldtk_EntityTileRenderMode.__empty_constructs__ = [ldtk_EntityTileRenderMode.Cover,ldtk_EntityTileRenderMode.FitInside,ldtk_EntityTileRenderMode.Repeat,ldtk_EntityTileRenderMode.Stretch,ldtk_EntityTileRenderMode.FullSizeCropped,ldtk_EntityTileRenderMode.FullSizeUncropped,ldtk_EntityTileRenderMode.NineSlice];
var ldtk_EntityLimitBehavior = $hxEnums["ldtk.EntityLimitBehavior"] = { __ename__:"ldtk.EntityLimitBehavior",__constructs__:null
	,DiscardOldOnes: {_hx_name:"DiscardOldOnes",_hx_index:0,__enum__:"ldtk.EntityLimitBehavior",toString:$estr}
	,PreventAdding: {_hx_name:"PreventAdding",_hx_index:1,__enum__:"ldtk.EntityLimitBehavior",toString:$estr}
	,MoveLastOne: {_hx_name:"MoveLastOne",_hx_index:2,__enum__:"ldtk.EntityLimitBehavior",toString:$estr}
};
ldtk_EntityLimitBehavior.__constructs__ = [ldtk_EntityLimitBehavior.DiscardOldOnes,ldtk_EntityLimitBehavior.PreventAdding,ldtk_EntityLimitBehavior.MoveLastOne];
ldtk_EntityLimitBehavior.__empty_constructs__ = [ldtk_EntityLimitBehavior.DiscardOldOnes,ldtk_EntityLimitBehavior.PreventAdding,ldtk_EntityLimitBehavior.MoveLastOne];
var ldtk_FieldDisplayMode = $hxEnums["ldtk.FieldDisplayMode"] = { __ename__:"ldtk.FieldDisplayMode",__constructs__:null
	,Hidden: {_hx_name:"Hidden",_hx_index:0,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,ValueOnly: {_hx_name:"ValueOnly",_hx_index:1,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,NameAndValue: {_hx_name:"NameAndValue",_hx_index:2,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,EntityTile: {_hx_name:"EntityTile",_hx_index:3,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,LevelTile: {_hx_name:"LevelTile",_hx_index:4,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,Points: {_hx_name:"Points",_hx_index:5,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,PointStar: {_hx_name:"PointStar",_hx_index:6,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,PointPath: {_hx_name:"PointPath",_hx_index:7,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,PointPathLoop: {_hx_name:"PointPathLoop",_hx_index:8,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,RadiusPx: {_hx_name:"RadiusPx",_hx_index:9,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,RadiusGrid: {_hx_name:"RadiusGrid",_hx_index:10,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,ArrayCountWithLabel: {_hx_name:"ArrayCountWithLabel",_hx_index:11,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,ArrayCountNoLabel: {_hx_name:"ArrayCountNoLabel",_hx_index:12,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,RefLinkBetweenPivots: {_hx_name:"RefLinkBetweenPivots",_hx_index:13,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
	,RefLinkBetweenCenters: {_hx_name:"RefLinkBetweenCenters",_hx_index:14,__enum__:"ldtk.FieldDisplayMode",toString:$estr}
};
ldtk_FieldDisplayMode.__constructs__ = [ldtk_FieldDisplayMode.Hidden,ldtk_FieldDisplayMode.ValueOnly,ldtk_FieldDisplayMode.NameAndValue,ldtk_FieldDisplayMode.EntityTile,ldtk_FieldDisplayMode.LevelTile,ldtk_FieldDisplayMode.Points,ldtk_FieldDisplayMode.PointStar,ldtk_FieldDisplayMode.PointPath,ldtk_FieldDisplayMode.PointPathLoop,ldtk_FieldDisplayMode.RadiusPx,ldtk_FieldDisplayMode.RadiusGrid,ldtk_FieldDisplayMode.ArrayCountWithLabel,ldtk_FieldDisplayMode.ArrayCountNoLabel,ldtk_FieldDisplayMode.RefLinkBetweenPivots,ldtk_FieldDisplayMode.RefLinkBetweenCenters];
ldtk_FieldDisplayMode.__empty_constructs__ = [ldtk_FieldDisplayMode.Hidden,ldtk_FieldDisplayMode.ValueOnly,ldtk_FieldDisplayMode.NameAndValue,ldtk_FieldDisplayMode.EntityTile,ldtk_FieldDisplayMode.LevelTile,ldtk_FieldDisplayMode.Points,ldtk_FieldDisplayMode.PointStar,ldtk_FieldDisplayMode.PointPath,ldtk_FieldDisplayMode.PointPathLoop,ldtk_FieldDisplayMode.RadiusPx,ldtk_FieldDisplayMode.RadiusGrid,ldtk_FieldDisplayMode.ArrayCountWithLabel,ldtk_FieldDisplayMode.ArrayCountNoLabel,ldtk_FieldDisplayMode.RefLinkBetweenPivots,ldtk_FieldDisplayMode.RefLinkBetweenCenters];
var ldtk_FieldLinkStyle = $hxEnums["ldtk.FieldLinkStyle"] = { __ename__:"ldtk.FieldLinkStyle",__constructs__:null
	,ZigZag: {_hx_name:"ZigZag",_hx_index:0,__enum__:"ldtk.FieldLinkStyle",toString:$estr}
	,StraightArrow: {_hx_name:"StraightArrow",_hx_index:1,__enum__:"ldtk.FieldLinkStyle",toString:$estr}
	,CurvedArrow: {_hx_name:"CurvedArrow",_hx_index:2,__enum__:"ldtk.FieldLinkStyle",toString:$estr}
	,ArrowsLine: {_hx_name:"ArrowsLine",_hx_index:3,__enum__:"ldtk.FieldLinkStyle",toString:$estr}
	,DashedLine: {_hx_name:"DashedLine",_hx_index:4,__enum__:"ldtk.FieldLinkStyle",toString:$estr}
};
ldtk_FieldLinkStyle.__constructs__ = [ldtk_FieldLinkStyle.ZigZag,ldtk_FieldLinkStyle.StraightArrow,ldtk_FieldLinkStyle.CurvedArrow,ldtk_FieldLinkStyle.ArrowsLine,ldtk_FieldLinkStyle.DashedLine];
ldtk_FieldLinkStyle.__empty_constructs__ = [ldtk_FieldLinkStyle.ZigZag,ldtk_FieldLinkStyle.StraightArrow,ldtk_FieldLinkStyle.CurvedArrow,ldtk_FieldLinkStyle.ArrowsLine,ldtk_FieldLinkStyle.DashedLine];
var ldtk_BgImagePos = $hxEnums["ldtk.BgImagePos"] = { __ename__:"ldtk.BgImagePos",__constructs__:null
	,Unscaled: {_hx_name:"Unscaled",_hx_index:0,__enum__:"ldtk.BgImagePos",toString:$estr}
	,Contain: {_hx_name:"Contain",_hx_index:1,__enum__:"ldtk.BgImagePos",toString:$estr}
	,Cover: {_hx_name:"Cover",_hx_index:2,__enum__:"ldtk.BgImagePos",toString:$estr}
	,CoverDirty: {_hx_name:"CoverDirty",_hx_index:3,__enum__:"ldtk.BgImagePos",toString:$estr}
	,Repeat: {_hx_name:"Repeat",_hx_index:4,__enum__:"ldtk.BgImagePos",toString:$estr}
};
ldtk_BgImagePos.__constructs__ = [ldtk_BgImagePos.Unscaled,ldtk_BgImagePos.Contain,ldtk_BgImagePos.Cover,ldtk_BgImagePos.CoverDirty,ldtk_BgImagePos.Repeat];
ldtk_BgImagePos.__empty_constructs__ = [ldtk_BgImagePos.Unscaled,ldtk_BgImagePos.Contain,ldtk_BgImagePos.Cover,ldtk_BgImagePos.CoverDirty,ldtk_BgImagePos.Repeat];
var ldtk_TextLanguageMode = $hxEnums["ldtk.TextLanguageMode"] = { __ename__:"ldtk.TextLanguageMode",__constructs__:null
	,LangPython: {_hx_name:"LangPython",_hx_index:0,__enum__:"ldtk.TextLanguageMode",toString:$estr}
	,LangRuby: {_hx_name:"LangRuby",_hx_index:1,__enum__:"ldtk.TextLanguageMode",toString:$estr}
	,LangJS: {_hx_name:"LangJS",_hx_index:2,__enum__:"ldtk.TextLanguageMode",toString:$estr}
	,LangLua: {_hx_name:"LangLua",_hx_index:3,__enum__:"ldtk.TextLanguageMode",toString:$estr}
	,LangC: {_hx_name:"LangC",_hx_index:4,__enum__:"ldtk.TextLanguageMode",toString:$estr}
	,LangHaxe: {_hx_name:"LangHaxe",_hx_index:5,__enum__:"ldtk.TextLanguageMode",toString:$estr}
	,LangMarkdown: {_hx_name:"LangMarkdown",_hx_index:6,__enum__:"ldtk.TextLanguageMode",toString:$estr}
	,LangJson: {_hx_name:"LangJson",_hx_index:7,__enum__:"ldtk.TextLanguageMode",toString:$estr}
	,LangXml: {_hx_name:"LangXml",_hx_index:8,__enum__:"ldtk.TextLanguageMode",toString:$estr}
	,LangLog: {_hx_name:"LangLog",_hx_index:9,__enum__:"ldtk.TextLanguageMode",toString:$estr}
};
ldtk_TextLanguageMode.__constructs__ = [ldtk_TextLanguageMode.LangPython,ldtk_TextLanguageMode.LangRuby,ldtk_TextLanguageMode.LangJS,ldtk_TextLanguageMode.LangLua,ldtk_TextLanguageMode.LangC,ldtk_TextLanguageMode.LangHaxe,ldtk_TextLanguageMode.LangMarkdown,ldtk_TextLanguageMode.LangJson,ldtk_TextLanguageMode.LangXml,ldtk_TextLanguageMode.LangLog];
ldtk_TextLanguageMode.__empty_constructs__ = [ldtk_TextLanguageMode.LangPython,ldtk_TextLanguageMode.LangRuby,ldtk_TextLanguageMode.LangJS,ldtk_TextLanguageMode.LangLua,ldtk_TextLanguageMode.LangC,ldtk_TextLanguageMode.LangHaxe,ldtk_TextLanguageMode.LangMarkdown,ldtk_TextLanguageMode.LangJson,ldtk_TextLanguageMode.LangXml,ldtk_TextLanguageMode.LangLog];
var ldtk_ProjectFlag = $hxEnums["ldtk.ProjectFlag"] = { __ename__:"ldtk.ProjectFlag",__constructs__:null
	,DiscardPreCsvIntGrid: {_hx_name:"DiscardPreCsvIntGrid",_hx_index:0,__enum__:"ldtk.ProjectFlag",toString:$estr}
	,ExportPreCsvIntGridFormat: {_hx_name:"ExportPreCsvIntGridFormat",_hx_index:1,__enum__:"ldtk.ProjectFlag",toString:$estr}
	,IgnoreBackupSuggest: {_hx_name:"IgnoreBackupSuggest",_hx_index:2,__enum__:"ldtk.ProjectFlag",toString:$estr}
	,PrependIndexToLevelFileNames: {_hx_name:"PrependIndexToLevelFileNames",_hx_index:3,__enum__:"ldtk.ProjectFlag",toString:$estr}
	,MultiWorlds: {_hx_name:"MultiWorlds",_hx_index:4,__enum__:"ldtk.ProjectFlag",toString:$estr}
	,UseMultilinesType: {_hx_name:"UseMultilinesType",_hx_index:5,__enum__:"ldtk.ProjectFlag",toString:$estr}
};
ldtk_ProjectFlag.__constructs__ = [ldtk_ProjectFlag.DiscardPreCsvIntGrid,ldtk_ProjectFlag.ExportPreCsvIntGridFormat,ldtk_ProjectFlag.IgnoreBackupSuggest,ldtk_ProjectFlag.PrependIndexToLevelFileNames,ldtk_ProjectFlag.MultiWorlds,ldtk_ProjectFlag.UseMultilinesType];
ldtk_ProjectFlag.__empty_constructs__ = [ldtk_ProjectFlag.DiscardPreCsvIntGrid,ldtk_ProjectFlag.ExportPreCsvIntGridFormat,ldtk_ProjectFlag.IgnoreBackupSuggest,ldtk_ProjectFlag.PrependIndexToLevelFileNames,ldtk_ProjectFlag.MultiWorlds,ldtk_ProjectFlag.UseMultilinesType];
var ldtk_EntityLimitScope = $hxEnums["ldtk.EntityLimitScope"] = { __ename__:"ldtk.EntityLimitScope",__constructs__:null
	,PerLayer: {_hx_name:"PerLayer",_hx_index:0,__enum__:"ldtk.EntityLimitScope",toString:$estr}
	,PerLevel: {_hx_name:"PerLevel",_hx_index:1,__enum__:"ldtk.EntityLimitScope",toString:$estr}
	,PerWorld: {_hx_name:"PerWorld",_hx_index:2,__enum__:"ldtk.EntityLimitScope",toString:$estr}
};
ldtk_EntityLimitScope.__constructs__ = [ldtk_EntityLimitScope.PerLayer,ldtk_EntityLimitScope.PerLevel,ldtk_EntityLimitScope.PerWorld];
ldtk_EntityLimitScope.__empty_constructs__ = [ldtk_EntityLimitScope.PerLayer,ldtk_EntityLimitScope.PerLevel,ldtk_EntityLimitScope.PerWorld];
var ldtk_ImageExportMode = $hxEnums["ldtk.ImageExportMode"] = { __ename__:"ldtk.ImageExportMode",__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"ldtk.ImageExportMode",toString:$estr}
	,OneImagePerLayer: {_hx_name:"OneImagePerLayer",_hx_index:1,__enum__:"ldtk.ImageExportMode",toString:$estr}
	,OneImagePerLevel: {_hx_name:"OneImagePerLevel",_hx_index:2,__enum__:"ldtk.ImageExportMode",toString:$estr}
	,LayersAndLevels: {_hx_name:"LayersAndLevels",_hx_index:3,__enum__:"ldtk.ImageExportMode",toString:$estr}
};
ldtk_ImageExportMode.__constructs__ = [ldtk_ImageExportMode.None,ldtk_ImageExportMode.OneImagePerLayer,ldtk_ImageExportMode.OneImagePerLevel,ldtk_ImageExportMode.LayersAndLevels];
ldtk_ImageExportMode.__empty_constructs__ = [ldtk_ImageExportMode.None,ldtk_ImageExportMode.OneImagePerLayer,ldtk_ImageExportMode.OneImagePerLevel,ldtk_ImageExportMode.LayersAndLevels];
ldtk_ImageExportMode.__meta__ = { obj : { changed : ["1.1.0"]}};
var ldtk_EntityReferenceTarget = $hxEnums["ldtk.EntityReferenceTarget"] = { __ename__:"ldtk.EntityReferenceTarget",__constructs__:null
	,Any: {_hx_name:"Any",_hx_index:0,__enum__:"ldtk.EntityReferenceTarget",toString:$estr}
	,OnlySame: {_hx_name:"OnlySame",_hx_index:1,__enum__:"ldtk.EntityReferenceTarget",toString:$estr}
	,OnlyTags: {_hx_name:"OnlyTags",_hx_index:2,__enum__:"ldtk.EntityReferenceTarget",toString:$estr}
	,OnlySpecificEntity: {_hx_name:"OnlySpecificEntity",_hx_index:3,__enum__:"ldtk.EntityReferenceTarget",toString:$estr}
};
ldtk_EntityReferenceTarget.__constructs__ = [ldtk_EntityReferenceTarget.Any,ldtk_EntityReferenceTarget.OnlySame,ldtk_EntityReferenceTarget.OnlyTags,ldtk_EntityReferenceTarget.OnlySpecificEntity];
ldtk_EntityReferenceTarget.__empty_constructs__ = [ldtk_EntityReferenceTarget.Any,ldtk_EntityReferenceTarget.OnlySame,ldtk_EntityReferenceTarget.OnlyTags,ldtk_EntityReferenceTarget.OnlySpecificEntity];
ldtk_EntityReferenceTarget.__meta__ = { obj : { added : ["1.0.0"]}};
var ldtk_IdentifierStyle = $hxEnums["ldtk.IdentifierStyle"] = { __ename__:"ldtk.IdentifierStyle",__constructs__:null
	,Capitalize: {_hx_name:"Capitalize",_hx_index:0,__enum__:"ldtk.IdentifierStyle",toString:$estr}
	,Uppercase: {_hx_name:"Uppercase",_hx_index:1,__enum__:"ldtk.IdentifierStyle",toString:$estr}
	,Lowercase: {_hx_name:"Lowercase",_hx_index:2,__enum__:"ldtk.IdentifierStyle",toString:$estr}
	,Free: {_hx_name:"Free",_hx_index:3,__enum__:"ldtk.IdentifierStyle",toString:$estr}
};
ldtk_IdentifierStyle.__constructs__ = [ldtk_IdentifierStyle.Capitalize,ldtk_IdentifierStyle.Uppercase,ldtk_IdentifierStyle.Lowercase,ldtk_IdentifierStyle.Free];
ldtk_IdentifierStyle.__empty_constructs__ = [ldtk_IdentifierStyle.Capitalize,ldtk_IdentifierStyle.Uppercase,ldtk_IdentifierStyle.Lowercase,ldtk_IdentifierStyle.Free];
ldtk_IdentifierStyle.__meta__ = { obj : { added : ["1.0.0"]}};
var ldtk_EmbedAtlas = $hxEnums["ldtk.EmbedAtlas"] = { __ename__:"ldtk.EmbedAtlas",__constructs__:null
	,LdtkIcons: {_hx_name:"LdtkIcons",_hx_index:0,__enum__:"ldtk.EmbedAtlas",toString:$estr}
};
ldtk_EmbedAtlas.__constructs__ = [ldtk_EmbedAtlas.LdtkIcons];
ldtk_EmbedAtlas.__empty_constructs__ = [ldtk_EmbedAtlas.LdtkIcons];
var ldtk_CustomCommandTrigger = $hxEnums["ldtk.CustomCommandTrigger"] = { __ename__:"ldtk.CustomCommandTrigger",__constructs__:null
	,Manual: {_hx_name:"Manual",_hx_index:0,__enum__:"ldtk.CustomCommandTrigger",toString:$estr}
	,AfterLoad: {_hx_name:"AfterLoad",_hx_index:1,__enum__:"ldtk.CustomCommandTrigger",toString:$estr}
	,BeforeSave: {_hx_name:"BeforeSave",_hx_index:2,__enum__:"ldtk.CustomCommandTrigger",toString:$estr}
	,AfterSave: {_hx_name:"AfterSave",_hx_index:3,__enum__:"ldtk.CustomCommandTrigger",toString:$estr}
};
ldtk_CustomCommandTrigger.__constructs__ = [ldtk_CustomCommandTrigger.Manual,ldtk_CustomCommandTrigger.AfterLoad,ldtk_CustomCommandTrigger.BeforeSave,ldtk_CustomCommandTrigger.AfterSave];
ldtk_CustomCommandTrigger.__empty_constructs__ = [ldtk_CustomCommandTrigger.Manual,ldtk_CustomCommandTrigger.AfterLoad,ldtk_CustomCommandTrigger.BeforeSave,ldtk_CustomCommandTrigger.AfterSave];
ldtk_CustomCommandTrigger.__meta__ = { obj : { added : ["1.2.0"]}};
var ldtk_Layer_$AutoLayer = function(p,json) {
	ldtk_Layer.call(this,p,json);
	this.autoTiles = [];
	this.tilesetUid = json.__tilesetDefUid;
	var _g = 0;
	var _g1 = json.autoLayerTiles;
	while(_g < _g1.length) {
		var jsonAutoTile = _g1[_g];
		++_g;
		this.autoTiles.push({ tileId : jsonAutoTile.t, flips : jsonAutoTile.f, alpha : jsonAutoTile.a, renderX : jsonAutoTile.px[0], renderY : jsonAutoTile.px[1], ruleId : jsonAutoTile.d[0], coordId : jsonAutoTile.d[1]});
	}
};
$hxClasses["ldtk.Layer_AutoLayer"] = ldtk_Layer_$AutoLayer;
ldtk_Layer_$AutoLayer.__name__ = "ldtk.Layer_AutoLayer";
ldtk_Layer_$AutoLayer.__super__ = ldtk_Layer;
ldtk_Layer_$AutoLayer.prototype = $extend(ldtk_Layer.prototype,{
	get_untypedTileset: function() {
		return this.untypedProject._untypedTilesets.h[this.tilesetUid];
	}
	,render: function(target) {
		if(target == null) {
			var _this = this.untypedProject._untypedTilesets.h[this.tilesetUid];
			var target1;
			if(_this._cachedAtlasTile != null) {
				target1 = _this._cachedAtlasTile;
			} else {
				var bytes = _this.untypedProject.getAsset(_this.relPath);
				_this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
				if(_this._cachedAtlasTile == null) {
					_this._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this.pxWid,_this.pxHei);
				}
				target1 = _this._cachedAtlasTile;
			}
			target = new h2d_TileGroup(target1);
		}
		var _g = 0;
		var _g1 = this.autoTiles;
		while(_g < _g1.length) {
			var autoTile = _g1[_g];
			++_g;
			var x = autoTile.renderX + this.pxTotalOffsetX;
			var y = autoTile.renderY + this.pxTotalOffsetY;
			var a = autoTile.alpha;
			var _this = this.untypedProject._untypedTilesets.h[this.tilesetUid];
			var t;
			if(autoTile.tileId < 0) {
				t = null;
			} else {
				var tileId = autoTile.tileId;
				var flipBits = autoTile.flips;
				if(flipBits == null) {
					flipBits = 0;
				}
				if(tileId < 0) {
					t = null;
				} else {
					var atlas;
					if(_this._cachedAtlasTile != null) {
						atlas = _this._cachedAtlasTile;
					} else {
						var bytes = _this.untypedProject.getAsset(_this.relPath);
						_this._cachedAtlasTile = dn_ImageDecoder.decodeTile(bytes);
						if(_this._cachedAtlasTile == null) {
							_this._cachedAtlasTile = h2d_Tile.fromColor(16711680,_this.pxWid,_this.pxHei);
						}
						atlas = _this._cachedAtlasTile;
					}
					var t1 = atlas.sub((tileId - (tileId / Math.ceil(_this.pxWid / _this.tileGridSize) | 0) * Math.ceil(_this.pxWid / _this.tileGridSize)) * _this.tileGridSize,(tileId / Math.ceil(_this.pxWid / _this.tileGridSize) | 0) * _this.tileGridSize,_this.tileGridSize,_this.tileGridSize);
					switch(flipBits) {
					case 0:
						t = t1;
						break;
					case 1:
						t1.flipX();
						var px = 0;
						var py = 0;
						if(py == null) {
							py = 0.5;
						}
						if(px == null) {
							px = 0.5;
						}
						t1.dx = -(px * t1.width);
						t1.dy = -(py * t1.height);
						t = t1;
						break;
					case 2:
						t1.flipY();
						var px1 = 0;
						var py1 = 0;
						if(py1 == null) {
							py1 = 0.5;
						}
						if(px1 == null) {
							px1 = 0.5;
						}
						t1.dx = -(px1 * t1.width);
						t1.dy = -(py1 * t1.height);
						t = t1;
						break;
					case 3:
						t1.flipX();
						t1.flipY();
						var px2 = 0;
						var py2 = 0;
						if(py2 == null) {
							py2 = 0.5;
						}
						if(px2 == null) {
							px2 = 0.5;
						}
						t1.dx = -(px2 * t1.width);
						t1.dy = -(py2 * t1.height);
						t = t1;
						break;
					default:
						ldtk_Project.error("Unsupported flipBits value");
						t = null;
					}
				}
			}
			target.content.add(x,y,target.curColor.x,target.curColor.y,target.curColor.z,a,t);
		}
		return target;
	}
	,__class__: ldtk_Layer_$AutoLayer
});
var ldtk_NeighbourDir = $hxEnums["ldtk.NeighbourDir"] = { __ename__:"ldtk.NeighbourDir",__constructs__:null
	,North: {_hx_name:"North",_hx_index:0,__enum__:"ldtk.NeighbourDir",toString:$estr}
	,South: {_hx_name:"South",_hx_index:1,__enum__:"ldtk.NeighbourDir",toString:$estr}
	,West: {_hx_name:"West",_hx_index:2,__enum__:"ldtk.NeighbourDir",toString:$estr}
	,East: {_hx_name:"East",_hx_index:3,__enum__:"ldtk.NeighbourDir",toString:$estr}
	,SameDepthOverlap: {_hx_name:"SameDepthOverlap",_hx_index:4,__enum__:"ldtk.NeighbourDir",toString:$estr}
	,DepthBelow: {_hx_name:"DepthBelow",_hx_index:5,__enum__:"ldtk.NeighbourDir",toString:$estr}
	,DepthAbove: {_hx_name:"DepthAbove",_hx_index:6,__enum__:"ldtk.NeighbourDir",toString:$estr}
};
ldtk_NeighbourDir.__constructs__ = [ldtk_NeighbourDir.North,ldtk_NeighbourDir.South,ldtk_NeighbourDir.West,ldtk_NeighbourDir.East,ldtk_NeighbourDir.SameDepthOverlap,ldtk_NeighbourDir.DepthBelow,ldtk_NeighbourDir.DepthAbove];
ldtk_NeighbourDir.__empty_constructs__ = [ldtk_NeighbourDir.North,ldtk_NeighbourDir.South,ldtk_NeighbourDir.West,ldtk_NeighbourDir.East,ldtk_NeighbourDir.SameDepthOverlap,ldtk_NeighbourDir.DepthBelow,ldtk_NeighbourDir.DepthAbove];
var ldtk_Point = function(cx,cy) {
	this.cx = cx;
	this.cy = cy;
};
$hxClasses["ldtk.Point"] = ldtk_Point;
ldtk_Point.__name__ = "ldtk.Point";
ldtk_Point.prototype = {
	__class__: ldtk_Point
};
var save_GameData = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.timeSinceLevelCompletedShown = 0;
	this.levelBestTimes = new haxe_ds_IntMap();
	this.levelsCompletedShown = new haxe_ds_IntMap();
	this.levelsCompleted = new haxe_ds_IntMap();
	this.init();
};
$hxClasses["save.GameData"] = save_GameData;
save_GameData.__name__ = "save.GameData";
save_GameData.__interfaces__ = [hxbit_Serializable];
save_GameData.doSerialize = function(__ctx,__this) {
	var a = __this.levelsCompleted;
	if(a == null) {
		__ctx.addByte(0);
	} else {
		var _g = [];
		var k = a.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			_g.push(k1);
		}
		var keys = _g;
		__ctx.addInt(keys.length + 1);
		var _g = 0;
		while(_g < keys.length) {
			var k = keys[_g];
			++_g;
			__ctx.addInt(k);
			__ctx.addBool(a.h[k]);
		}
	}
	var a = __this.levelsCompletedShown;
	if(a == null) {
		__ctx.addByte(0);
	} else {
		var _g = [];
		var k = a.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			_g.push(k1);
		}
		var keys = _g;
		__ctx.addInt(keys.length + 1);
		var _g = 0;
		while(_g < keys.length) {
			var k = keys[_g];
			++_g;
			__ctx.addInt(k);
			__ctx.addBool(a.h[k]);
		}
	}
	var a = __this.levelBestTimes;
	if(a == null) {
		__ctx.addByte(0);
	} else {
		var _g = [];
		var k = a.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			_g.push(k1);
		}
		var keys = _g;
		__ctx.addInt(keys.length + 1);
		var _g = 0;
		while(_g < keys.length) {
			var k = keys[_g];
			++_g;
			__ctx.addInt(k);
			__ctx.addInt(a.h[k]);
		}
	}
	__ctx.addBool(__this.musicEnabled);
	__ctx.addBool(__this.soundEnabled);
};
save_GameData.doUnserialize = function(__ctx,__this) {
	var k0;
	var v0;
	var len = __ctx.getInt();
	var tmp;
	if(len == 0) {
		tmp = null;
	} else {
		var m = new haxe_ds_IntMap();
		while(--len > 0) {
			k0 = __ctx.getInt();
			var k = k0;
			v0 = __ctx.input.b[__ctx.inPos++] != 0;
			var v = v0;
			m.h[k] = v;
		}
		tmp = m;
	}
	__this.levelsCompleted = tmp;
	var k0;
	var v0;
	var len = __ctx.getInt();
	var tmp;
	if(len == 0) {
		tmp = null;
	} else {
		var m = new haxe_ds_IntMap();
		while(--len > 0) {
			k0 = __ctx.getInt();
			var k = k0;
			v0 = __ctx.input.b[__ctx.inPos++] != 0;
			var v = v0;
			m.h[k] = v;
		}
		tmp = m;
	}
	__this.levelsCompletedShown = tmp;
	var k0;
	var v0;
	var len = __ctx.getInt();
	var tmp;
	if(len == 0) {
		tmp = null;
	} else {
		var m = new haxe_ds_IntMap();
		while(--len > 0) {
			k0 = __ctx.getInt();
			var k = k0;
			v0 = __ctx.getInt();
			var v = v0;
			m.h[k] = v;
		}
		tmp = m;
	}
	__this.levelBestTimes = tmp;
	__this.musicEnabled = __ctx.input.b[__ctx.inPos++] != 0;
	__this.soundEnabled = __ctx.input.b[__ctx.inPos++] != 0;
};
save_GameData.prototype = {
	update: function(dt) {
		var prev = this.timeSinceLevelCompletedShown;
		this.timeSinceLevelCompletedShown += dt;
		if(prev <= 1. && this.timeSinceLevelCompletedShown > 1.) {
			save_Save.saveGame();
		}
	}
	,init: function() {
		this.musicEnabled = this.soundEnabled = true;
		var _g = 1;
		var _g1 = 28;
		while(_g < _g1) {
			var i = _g++;
			this.levelsCompleted.h[i] = false;
			this.levelsCompletedShown.h[i] = false;
			this.levelBestTimes.h[i] = -1;
		}
	}
	,completeLevel: function(id,playTimer) {
		this.levelsCompleted.h[id] = true;
		var curTimer = this.levelBestTimes.h[id];
		if(curTimer == null || curTimer == -1 || playTimer < curTimer) {
			this.levelBestTimes.h[id] = playTimer;
		}
		save_Save.saveGame();
	}
	,showCompletedLevel: function(id) {
		this.levelsCompletedShown.h[id] = true;
		this.timeSinceLevelCompletedShown = 0;
	}
	,setMuteState: function(musicEnabled,soundEnable) {
		this.musicEnabled = musicEnabled;
		this.soundEnabled = soundEnable;
		save_Save.saveGame();
	}
	,areAllLevelsCompleted: function() {
		var count = 0;
		var k = this.levelsCompleted.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			if(this.levelsCompleted.h[k1]) {
				++count;
			}
		}
		return count == 27;
	}
	,getLevelTimeSum: function() {
		var sum = 0;
		var k = this.levelBestTimes.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var time = this.levelBestTimes.h[k1];
			if(time != null && time != -1) {
				sum += time;
			}
		}
		return sum;
	}
	,getCLID: function() {
		return save_GameData.__clid;
	}
	,serialize: function(__ctx) {
		save_GameData.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("levelsCompleted");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PInt,hxbit_PropTypeDesc.PBool));
		schema.fieldsNames.push("levelsCompletedShown");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PInt,hxbit_PropTypeDesc.PBool));
		schema.fieldsNames.push("levelBestTimes");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PMap(hxbit_PropTypeDesc.PInt,hxbit_PropTypeDesc.PInt));
		schema.fieldsNames.push("musicEnabled");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("soundEnabled");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.isFinal = hxbit_Serializer.isClassFinal(save_GameData.__clid);
		return schema;
	}
	,unserializeInit: function() {
		this.levelsCompleted = new haxe_ds_IntMap();
		this.levelsCompletedShown = new haxe_ds_IntMap();
		this.levelBestTimes = new haxe_ds_IntMap();
		this.timeSinceLevelCompletedShown = 0;
	}
	,unserialize: function(__ctx) {
		save_GameData.doUnserialize(__ctx,this);
	}
	,__class__: save_GameData
};
var save_SaveHeader = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.timestamp = null;
	this.version = null;
	this.version = "1.1.1";
	this.timestamp = new Date().getTime();
};
$hxClasses["save.SaveHeader"] = save_SaveHeader;
save_SaveHeader.__name__ = "save.SaveHeader";
save_SaveHeader.__interfaces__ = [hxbit_Serializable];
save_SaveHeader.doSerialize = function(__ctx,__this) {
	__ctx.addString(__this.version);
	if(__this.timestamp == null) {
		__ctx.addByte(0);
	} else {
		__ctx.addByte(1);
		__ctx.addFloat(__this.timestamp);
	}
};
save_SaveHeader.doUnserialize = function(__ctx,__this) {
	__this.version = __ctx.getString();
	if(__ctx.input.b[__ctx.inPos++] == 0) {
		__this.timestamp = null;
	} else {
		var v = __ctx.input.getFloat(__ctx.inPos);
		__ctx.inPos += 4;
		__this.timestamp = v;
	}
};
save_SaveHeader.prototype = {
	getCLID: function() {
		return save_SaveHeader.__clid;
	}
	,serialize: function(__ctx) {
		save_SaveHeader.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("version");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PString);
		schema.fieldsNames.push("timestamp");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PFloat));
		schema.isFinal = hxbit_Serializer.isClassFinal(save_SaveHeader.__clid);
		return schema;
	}
	,unserializeInit: function() {
		this.version = null;
		this.timestamp = null;
	}
	,unserialize: function(__ctx) {
		save_SaveHeader.doUnserialize(__ctx,this);
	}
	,__class__: save_SaveHeader
};
var save_GameSaveData = function(header,data) {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.data = null;
	this.header = null;
	if(header == null) {
		header = new save_SaveHeader();
	}
	if(data == null) {
		data = new save_GameData();
	}
	this.header = header;
	this.data = data;
};
$hxClasses["save.GameSaveData"] = save_GameSaveData;
save_GameSaveData.__name__ = "save.GameSaveData";
save_GameSaveData.__interfaces__ = [hxbit_Serializable];
save_GameSaveData.doSerialize = function(__ctx,__this) {
	__ctx.addKnownRef(__this.header);
	__ctx.addKnownRef(__this.data);
};
save_GameSaveData.doUnserialize = function(__ctx,__this) {
	__this.header = __ctx.getRef(save_SaveHeader,save_SaveHeader.__clid);
	__this.data = __ctx.getRef(save_GameData,save_GameData.__clid);
};
save_GameSaveData.prototype = {
	init: function() {
		this.data.init();
		this.header = new save_SaveHeader();
	}
	,getCLID: function() {
		return save_GameSaveData.__clid;
	}
	,serialize: function(__ctx) {
		save_GameSaveData.doSerialize(__ctx,this);
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("header");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PSerializable("save.SaveHeader"));
		schema.fieldsNames.push("data");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PSerializable("save.GameData"));
		schema.isFinal = hxbit_Serializer.isClassFinal(save_GameSaveData.__clid);
		return schema;
	}
	,unserializeInit: function() {
		this.header = null;
		this.data = null;
	}
	,unserialize: function(__ctx) {
		save_GameSaveData.doUnserialize(__ctx,this);
	}
	,__class__: save_GameSaveData
};
var save_Save = function() { };
$hxClasses["save.Save"] = save_Save;
save_Save.__name__ = "save.Save";
save_Save.init = function(callback) {
	save_Save.gameFileName = "boxedBoxes" + "Save";
	save_Save.gameData = new save_GameSaveData();
	save_Save.loadGame(callback);
};
save_Save.saveGame = function() {
	var s = new hxbit_Serializer();
	s.beginSave();
	s.addDynamic(save_Save.gameData);
	var bytes = s.endSave();
	try {
		window.localStorage.setItem(save_Save.gameFileName,save_Save.bytesToString(bytes));
	} catch( _g ) {
		var e = haxe_Exception.caught(_g);
		haxe_Log.trace("Error saving game to local storage: " + Std.string(e),{ fileName : "src/save/Save.hx", lineNumber : 67, className : "save.Save", methodName : "saveGame"});
	}
};
save_Save.loadGame = function(callback) {
	var onBytesReceived = function(bytes) {
		if(bytes == null) {
			save_Save.gameData = new save_GameSaveData();
			callback(false);
		} else {
			try {
				var s = new hxbit_Serializer();
				s.beginLoad(bytes);
				save_Save.gameData = s.getDynamic();
				s.endLoad();
				if(save_Save.gameData.header.version == "1.0.0") {
					save_Save.gameData.init();
				}
				save_Save.gameData.data.levelsCompleted.h[27] = false;
			} catch( _g ) {
				save_Save.gameData = new save_GameSaveData();
			}
			callback(true);
		}
	};
	var bytes = null;
	try {
		bytes = save_Save.stringToBytes(window.localStorage.getItem(save_Save.gameFileName));
	} catch( _g ) {
	}
	onBytesReceived(bytes);
};
save_Save.bytesToString = function(bytes) {
	return haxe_crypto_Base64.encode(bytes);
};
save_Save.stringToBytes = function(str) {
	var bytes = null;
	try {
		bytes = haxe_crypto_Base64.decode(str);
	} catch( _g ) {
	}
	return bytes;
};
var ui_FPSCounter = function(font) {
	this.arr = [];
	this.tf = new h2d_Text(font,Main.inst.s2d);
	var _this = this.tf;
	_this.posChanged = true;
	_this.scaleX *= 2;
	_this.posChanged = true;
	_this.scaleY *= 2;
	this.onResize();
};
$hxClasses["ui.FPSCounter"] = ui_FPSCounter;
ui_FPSCounter.__name__ = "ui.FPSCounter";
ui_FPSCounter.prototype = {
	update: function() {
		var cur = hxd_Timer.fps();
		this.arr.push(cur);
		if(this.arr.length > 30) {
			this.arr.shift();
		}
		if(this.arr.length == 30) {
			var sorted = this.arr.slice();
			sorted.sort(function(a,b) {
				if(a > b) {
					return 1;
				} else if(a < b) {
					return -1;
				} else {
					return 0;
				}
			});
			var med = sorted[sorted.length >> 1];
			this.tf.set_text((med | 0) + " FPS");
		}
	}
	,show: function() {
		this.tf.set_visible(true);
	}
	,hide: function() {
		this.tf.set_visible(false);
	}
	,onResize: function() {
		var _this = this.tf;
		_this.posChanged = true;
		_this.x = Main.inst.s2d.width - 80;
		var _this = this.tf;
		_this.posChanged = true;
		_this.y = Main.inst.s2d.height - 2 * this.tf.font.lineHeight - 2;
	}
	,__class__: ui_FPSCounter
};
var ui_KeyValueFlow = function(parent,minWidth) {
	this.lines = [];
	h2d_Flow.call(this,parent);
	this.set_minWidth(minWidth);
	this.set_layout(h2d_FlowLayout.Vertical);
};
$hxClasses["ui.KeyValueFlow"] = ui_KeyValueFlow;
ui_KeyValueFlow.__name__ = "ui.KeyValueFlow";
ui_KeyValueFlow.__super__ = h2d_Flow;
ui_KeyValueFlow.prototype = $extend(h2d_Flow.prototype,{
	addLine: function(keyText,valueText) {
		if(valueText == null) {
			valueText = "";
		}
		if(keyText == null) {
			keyText = "";
		}
		var flow = new h2d_Flow(this);
		flow.set_minWidth(this.minWidth);
		var key = this.getText(flow,h2d_FlowAlign.Left);
		key.set_text(keyText);
		var value = this.getText(flow,h2d_FlowAlign.Right);
		value.set_text(valueText);
		this.lines.push(flow);
		return { key : key, value : value};
	}
	,getText: function(parent,align) {
		var text = new h2d_Text(Assets.font,parent);
		text.set_textColor(9149364);
		var props = parent.getProperties(text);
		props.horizontalAlign = align;
		return text;
	}
	,__class__: ui_KeyValueFlow
});
var ui_MouseInput = function() {
	this.mouseX = 0.;
	this.mouseDown = false;
	this.wasJumpDown = false;
	this.wasRightDown = false;
	this.wasLeftDown = false;
	this.isJumpDown = false;
	this.isRightDown = false;
	this.isLeftDown = false;
	this.curJumpDown = false;
	this.curRightDown = false;
	this.curLeftDown = false;
	this.enabled = true;
	this.container = new h2d_Flow();
	this.container.set_minWidth(320);
	this.container.set_minHeight(180);
	Game.inst.hud.add(this.container);
	this.container.set_enableInteractive(true);
	this.container.interactive.onPush = $bind(this,this.onPush);
	this.container.interactive.onRelease = $bind(this,this.onRelease);
	this.container.interactive.onMove = $bind(this,this.onMove);
	this.container.interactive.enableRightButton = true;
};
$hxClasses["ui.MouseInput"] = ui_MouseInput;
ui_MouseInput.__name__ = "ui.MouseInput";
ui_MouseInput.prototype = {
	'delete': function() {
		var _this = this.container;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,onPush: function(e) {
		if(e.button == 0) {
			this.mouseDown = true;
		} else if(e.button == 1) {
			this.curJumpDown = true;
		}
	}
	,onMove: function(e) {
		this.mouseX = e.relX;
	}
	,onRelease: function(e) {
		if(e.button == 0) {
			this.mouseDown = false;
		} else if(e.button == 1) {
			this.curJumpDown = false;
		}
	}
	,update: function(dt) {
	}
	,afterUpdate: function() {
		if(!this.enabled) {
			this.isLeftDown = this.isRightDown = this.isJumpDown = false;
		} else if(this.mouseDown) {
			var dx = this.mouseX - (Game.inst.hero.x + Game.inst.world.x);
			if(dx < -10) {
				this.curLeftDown = true;
				this.curRightDown = false;
			} else if(dx > 10) {
				this.curLeftDown = false;
				this.curRightDown = true;
			} else {
				this.curLeftDown = false;
				this.curRightDown = false;
			}
		} else {
			this.curLeftDown = false;
			this.curRightDown = false;
		}
		this.wasLeftDown = this.isLeftDown;
		this.wasRightDown = this.isRightDown;
		this.wasJumpDown = this.isJumpDown;
		this.isLeftDown = this.curLeftDown;
		this.isRightDown = this.curRightDown;
		this.isJumpDown = this.curJumpDown;
	}
	,isLeftPressed: function() {
		if(this.isLeftDown) {
			return !this.wasLeftDown;
		} else {
			return false;
		}
	}
	,isRightPressed: function() {
		if(this.isRightDown) {
			return !this.wasRightDown;
		} else {
			return false;
		}
	}
	,isJumpPressed: function() {
		if(this.isJumpDown) {
			return !this.wasJumpDown;
		} else {
			return false;
		}
	}
	,isLeftReleased: function() {
		if(!this.isLeftDown) {
			return this.wasLeftDown;
		} else {
			return false;
		}
	}
	,isRightReleased: function() {
		if(!this.isRightDown) {
			return this.wasRightDown;
		} else {
			return false;
		}
	}
	,isJumpReleased: function() {
		if(!this.isJumpDown) {
			return this.wasJumpDown;
		} else {
			return false;
		}
	}
	,hide: function() {
		this.container.set_visible(false);
	}
	,show: function() {
		this.container.set_visible(true);
	}
	,__class__: ui_MouseInput
};
var ui_Mute = function() { };
$hxClasses["ui.Mute"] = ui_Mute;
ui_Mute.__name__ = "ui.Mute";
ui_Mute.init = function() {
	var data = save_Save.gameData.data;
	ui_Mute.musicEnabled = data.musicEnabled;
	ui_Mute.soundEnabled = data.soundEnabled;
	audio_Audio.setMusicVolume(ui_Mute.musicEnabled ? 1. : 0.);
	audio_Audio.setSoundEffectVolume(ui_Mute.soundEnabled ? 1. : 0.);
};
ui_Mute.mute = function() {
	if(ui_Mute.text != null) {
		var _this = ui_Mute.text;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		ui_Mute.text = null;
	}
	ui_Mute.text = new h2d_Text(Assets.font,Main.inst.hud);
	if(ui_Mute.musicEnabled && ui_Mute.soundEnabled) {
		ui_Mute.musicEnabled = false;
		ui_Mute.text.set_text("MUSIC OFF");
		audio_Audio.setMusicVolume(0.);
	} else if(!ui_Mute.musicEnabled && ui_Mute.soundEnabled) {
		ui_Mute.soundEnabled = false;
		ui_Mute.text.set_text("SOUND OFF");
		audio_Audio.setSoundEffectVolume(0.);
	} else if(!ui_Mute.musicEnabled && !ui_Mute.soundEnabled) {
		ui_Mute.musicEnabled = true;
		ui_Mute.text.set_text("MUSIC ON");
		audio_Audio.setMusicVolume(1.);
	} else {
		ui_Mute.soundEnabled = true;
		ui_Mute.text.set_text("SOUND ON");
		audio_Audio.setSoundEffectVolume(1.);
	}
	var _this = ui_Mute.text;
	var v = 160 - ui_Mute.text.get_textWidth() * .5;
	_this.posChanged = true;
	_this.x = v;
	var _this = ui_Mute.text;
	var v = 180 - ui_Mute.text.get_textHeight();
	_this.posChanged = true;
	_this.y = v;
	ui_Mute.timer = 0.;
	save_Save.gameData.data.setMuteState(ui_Mute.musicEnabled,ui_Mute.soundEnabled);
};
ui_Mute.update = function(dt) {
	if(ui_Mute.text != null) {
		ui_Mute.timer += dt;
		if(ui_Mute.timer > 0.9) {
			var _this = ui_Mute.text;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			ui_Mute.text = null;
		} else if(ui_Mute.timer > .5) {
			ui_Mute.text.alpha = 1. - (ui_Mute.timer - .5) / .4;
		} else {
			ui_Mute.text.alpha = 1.;
		}
	}
};
var ui_TouchInput = function() {
	this.wasJumpDown = false;
	this.wasRightDown = false;
	this.wasLeftDown = false;
	this.isJumpDown = false;
	this.isRightDown = false;
	this.isLeftDown = false;
	this.curJumpDown = false;
	this.curRightDown = false;
	this.curLeftDown = false;
	var _gthis = this;
	this.container = new h2d_Flow();
	this.container.set_minWidth(320);
	this.container.set_horizontalSpacing(5);
	var _this = this.container;
	_this.posChanged = true;
	_this.y = 145;
	var _this = this.container;
	_this.posChanged = true;
	_this.x = 5;
	Game.inst.hud.add(this.container);
	var createButton = function(name,setf) {
		var flow = new h2d_Flow(_gthis.container);
		var icon = new h2d_Bitmap(Assets.getTile("entities",name),flow);
		flow.set_enableInteractive(true);
		flow.interactive.allowMultiClick = true;
		flow.interactive.onPush = function(e) {
			setf(true);
		};
		flow.interactive.onRelease = function(e) {
			setf(false);
		};
		return flow;
	};
	this.leftIcon = createButton("touchInputLeft",function(v) {
		_gthis.curLeftDown = v;
	});
	this.rightIcon = createButton("touchInputRight",function(v) {
		_gthis.curRightDown = v;
	});
	this.jumpIcon = createButton("touchInputJump",function(v) {
		_gthis.curJumpDown = v;
	});
	var props = this.container.getProperties(this.jumpIcon);
	props.horizontalAlign = h2d_FlowAlign.Right;
	props.paddingRight = 10;
};
$hxClasses["ui.TouchInput"] = ui_TouchInput;
ui_TouchInput.__name__ = "ui.TouchInput";
ui_TouchInput.prototype = {
	'delete': function() {
		var _this = this.container;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	,update: function(dt) {
	}
	,afterUpdate: function() {
		this.wasLeftDown = this.isLeftDown;
		this.wasRightDown = this.isRightDown;
		this.wasJumpDown = this.isJumpDown;
		this.isLeftDown = this.curLeftDown;
		this.isRightDown = this.curRightDown;
		this.isJumpDown = this.curJumpDown;
	}
	,isLeftPressed: function() {
		if(this.isLeftDown) {
			return !this.wasLeftDown;
		} else {
			return false;
		}
	}
	,isRightPressed: function() {
		if(this.isRightDown) {
			return !this.wasRightDown;
		} else {
			return false;
		}
	}
	,isJumpPressed: function() {
		if(this.isJumpDown) {
			return !this.wasJumpDown;
		} else {
			return false;
		}
	}
	,isLeftReleased: function() {
		if(!this.isLeftDown) {
			return this.wasLeftDown;
		} else {
			return false;
		}
	}
	,isRightReleased: function() {
		if(!this.isRightDown) {
			return this.wasRightDown;
		} else {
			return false;
		}
	}
	,isJumpReleased: function() {
		if(!this.isJumpDown) {
			return this.wasJumpDown;
		} else {
			return false;
		}
	}
	,hide: function() {
		this.container.set_visible(false);
	}
	,show: function() {
		this.container.set_visible(true);
	}
	,__class__: ui_TouchInput
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : $hxClasses["String"] = String, enumerable : false, writable : true});
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_MainLoop.add(hxd_System.updateCursor,-1);
js_Boot.__toStr = ({ }).toString;
var hx__registerFont;
hx__registerFont = function(name,data) {
	var s = window.document.createElement("style");
	s.type = "text/css";
	s.innerHTML = "@font-face{ font-family: " + (name == null ? "null" : "" + name) + "; src: url('data:font/ttf;base64," + Std.string(data) + "') format('truetype'); }";
	window.document.getElementsByTagName("head")[0].appendChild(s);
	var div = window.document.createElement("div");
	div.style.fontFamily = name;
	div.style.opacity = 0;
	div.style.width = "1px";
	div.style.height = "1px";
	div.style.position = "fixed";
	div.style.bottom = "0px";
	div.style.right = "0px";
	div.innerHTML = ".";
	div.className = "hx__loadFont";
	window.document.body.appendChild(div);
};
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
h2d_Object.tmpPoint = new h2d_col_PointImpl(0.,0.);
Assets.LOOPS_COL_TRUE = "#0000ffff";
Assets.LOOPS_COL_FALSE = "#fe5b59ff";
Controller.actionNames = ["flipperLeft","flipperRight","moveUp","moveRight","moveDown","moveLeft","retry","menuEnter","menuExit","pause","mapToggle","mapMoveX","mapMoveY"];
Binding.deadZone = 0.65;
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
Game.MAX_MOVE_STEPS = 100;
Game.TRANSITION_IN_TIME = 0.5;
Game.DEAD_TIME = .8;
Game.TRANSITION_OUT_TIME = 1.3;
Game._layer = 0;
Game.LAYER_CLEAR = Game._layer++;
Game.LAYER_BACK = Game._layer++;
Game.LAYER_FX_BACK = Game._layer++;
Game.LAYER_BACK_WALLS = Game._layer++;
Game.LAYER_BORDER_BACK = Game._layer++;
Game.LAYER_FX_MID = Game._layer++;
Game.LAYER_HERO = Game._layer++;
Game.LAYER_ENTITIES = Game._layer++;
Game.LAYER_WALLS = Game._layer++;
Game.LAYER_DECORATION = Game._layer++;
Game.LAYER_BORDER = Game._layer++;
Game.LAYER_GEM = Game._layer++;
Game.LAYER_FX_FRONT = Game._layer++;
Game.LAYER_FLASH = Game._layer++;
Game.LAYER_TIMER = Game._layer++;
Game.LAYER_DEBUG = Game._layer++;
Game.LAYER_WIN = Game._layer++;
Level.TS = 8;
Level.HTS = 4;
LevelComplete.HOLD_TIME = .22;
LevelComplete.REPEAT_TIME = .08;
Main.WIDTH = 320;
Main.HEIGHT = 180;
Main.WIDTH2 = 160;
Main.HEIGHT2 = 90;
Main.FPS = 60;
Main.GAME_NAME = "Boxed Boxes";
Main.GAME_ID = "boxedBoxes";
Main.GAME_VERSION = "1.1.1";
Palette.BLACK = 0;
LevelCell.COMPLETE_TIME = .5;
LevelCell.UNLOCK_TIME = .2;
Title.MUSIC_FADE_TIME = .2;
Title._layer = 0;
Title.LAYER_FX_BACK = Title._layer++;
Title.LAYER_HUD = Title._layer++;
Title.LAYER_FX_MID = Title._layer++;
Title.LAYER_FX_FRONT = Title._layer++;
Title.HOLD_TIME = .22;
Title.REPEAT_TIME = .08;
Title.GROUP_WIDTH = 3;
Title.GROUP_HEIGHT = 3;
Title.GROUP_COUNT = 3;
Title.LEVEL_COUNT = 27;
Title.GROUP_NAMES = ["Autumn Forest","Moonlit Lagoon","Spiky Cave"];
Title.GROUP_COLORS = [6539085,38377,14957380];
Title.GROUP_COMPLETED_TO_UNLOCK = [0,6,15];
Title.GROUP_MUSIC_NAMES = ["forest","lagoon","cave"];
Title.SHOW_COMPLETED_DELAY = .25;
Title.SHOW_COMPLETED_INTERVAL = .1;
Title.SHOW_UNLOCKED_DELAY = .2;
Title.SHOW_UNLOCKED_INTERVAL = .0;
Util.TAU = 6.28318530718;
Util.SQRT2 = 1.4142135623730951;
Util.ISQRT2 = 0.7071067811865475;
Util.HUE_YELLOW = 0.166666666666666657;
Util.HUE_BLUE = 0.66666666666666663;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
audio_Audio.MUSIC_VOLUME_MULT = .85;
audio_Audio.MUSIC_FADE_IN_TIME = .7;
audio_Audio.MUSIC_FADE_OUT_TIME = 1.;
background_SlicedParallax.TILE_WIDTH = 512;
background_SlicedParallax.TILE_HEIGHT = 256;
background_SlicedParallax.DISPLACE_POINT_COUNT_X = 17;
background_SlicedParallax.DISPLACE_POINT_COUNT_Y = 10;
cdb_TileMode.Tile = "tile";
cdb_TileMode.Ground = "ground";
cdb_TileMode.Border = "border";
cdb_TileMode.Object = "object";
cdb_TileMode.Group = "group";
cdb_Lang.IGNORE_EXPORT_FIELD = "__ignoreLoc__";
cdb_Lang.r_spaces = new EReg("^[ \t\r\n]+$","");
dn_CiAssert.VERBOSE = false;
dn_Cooldown.__meta__ = { obj : { indexes : ["test","jump","a","b","c"]}};
dn_Cooldown.DEFAULT_COUNT_LIMIT = 512;
dn_FilePath.WIN_NETWORK_DRIVE_REG = new EReg("^\\\\\\\\([a-z0-9-]+)\\\\(.*)","i");
dn_FilePath.SLASH_MODE = dn_PathSlashMode.Preserve;
dn_Identify.headers = [{ id : dn_IdentifyFormat.Png, magic : [137,80,78,71,13,10,26,10]},{ id : dn_IdentifyFormat.Gif, magic : [71,73,70,56,55,97]},{ id : dn_IdentifyFormat.Gif, magic : [71,73,70,56,57,97]},{ id : dn_IdentifyFormat.Jpeg, magic : [255,216,255]},{ id : dn_IdentifyFormat.Jpeg, magic : [255,216,255,219]},{ id : dn_IdentifyFormat.Jpeg, magic : [255,216,255,224,-1,-1,74,70,73,70,0,1]},{ id : dn_IdentifyFormat.Jpeg, magic : [255,216,255,225,-1,-1,69,120,105,102,0,0]},{ id : dn_IdentifyFormat.Aseprite, skipBytes : 4, magic : [224,165]},{ id : dn_IdentifyFormat.Bmp, magic : [66,77]}];
dn_Lib.L_WHITESPACE_TRIM = new EReg("^\\s*","gi");
dn_Lib.R_WHITESPACE_TRIM = new EReg("\\s*$","gi");
dn_Lib.fullscreenEnabled = false;
dn_Lib.VOWELS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["a"] = true;
	_g.h["e"] = true;
	_g.h["i"] = true;
	_g.h["o"] = true;
	_g.h["u"] = true;
	_g.h["y"] = true;
	$r = _g;
	return $r;
}(this));
dn_M.T_INT8_MIN = -128;
dn_M.T_INT8_MAX = 127;
dn_M.T_UINT8_MAX = 255;
dn_M.T_INT16_MIN = -32768;
dn_M.T_INT16_MAX = 32767;
dn_M.T_UINT16_MAX = 65535;
dn_M.T_INT32_MIN = -2147483648;
dn_M.T_INT32_MAX = 2147483647;
dn_M.T_UINT32_MAX = -1;
dn_M.T_INT_BITS = 32;
dn_M.T_FLOAT_MAX = 3.4028234663852886e+38;
dn_M.T_FLOAT_MIN = -3.4028234663852886e+38;
dn_M.T_DOUBLE_MAX = 1.7976931348623157e+308;
dn_M.T_DOUBLE_MIN = -1.7976931348623157e+308;
dn_M.RAD_DEG = 57.2957795130823229;
dn_M.DEG_RAD = 0.0174532925199432955;
dn_M.LN2 = 0.6931471805599453;
dn_M.PIHALF = 1.5707963267948966;
dn_M.PI = 3.141592653589793;
dn_M.PI2 = 6.283185307179586;
dn_M.A360 = 6.283185307179586;
dn_M.A180 = 3.141592653589793;
dn_M.A90 = 1.5707963267948966;
dn_M.A45 = 0.785398163397448;
dn_M.EPS = 1e-6;
dn_M.SQRT2 = 1.414213562373095;
dn_Process.MAX_PROCESSES = 1024;
dn_Process.FIXED_UPDATE_FPS = 30;
dn_Process.CUSTOM_STAGE_WIDTH = -1;
dn_Process.CUSTOM_STAGE_HEIGHT = -1;
dn_Process.UNIQ_ID = 0;
dn_Process.ROOTS = new dn_struct_FixedArray("RootProcesses",dn_Process.MAX_PROCESSES);
dn_Process.BEGINNING_OF_FRAME_CALLBACKS = new dn_struct_FixedArray(null,256);
dn_Process.END_OF_FRAME_CALLBACKS = new dn_struct_FixedArray(null,256);
dn_Process.RESIZE_REQUESTED = true;
dn_Process.PROFILING = false;
dn_Process.PROFILER_TIMES = new haxe_ds_StringMap();
dn_Tweenie.DEFAULT_DURATION = 1000.0;
dn_debug_MemTrack.allocs = new haxe_ds_StringMap();
dn_debug_MemTrack.firstMeasure = -1.;
entities_Border.all = [];
entities_Border.idToBorder = new haxe_ds_IntMap();
entities_Entity.all = [];
entities_Entity.idToEntity = new haxe_ds_IntMap();
entities_Box.FALL_VEL = 180;
entities_Box.GRAVITY = .996;
entities_Gem.all = [];
entities_Hero.MOVE_VEL = 75.;
entities_Hero.FALL_VEL = 180;
entities_Hero.FALL_FAST_VEL = 300;
entities_Hero.FALL_WALL_VEL = 90;
entities_Hero.AIR_FRICTION_X = .999;
entities_Hero.GRAVITY = .996;
entities_Hero.GRAVITY_JUMP = .93;
entities_Hero.GRAVITY_FAST = .9993;
entities_Hero.JUMP_VEL = 290.;
entities_Hero.JUMP_COYOTE_TIME = .1;
entities_Hero.JUMP_BUFFER_TIME = .15;
entities_Hero.WALL_JUMP_DIST = 2;
entities_Hero.WALL_JUMP_VEL_Y = 250.;
entities_Hero.WALL_JUMP_VEL_X = 170.;
entities_Hero.WALL_JUMP_TIME = .3;
entities_Hero.WALL_JUMP_ACC_X = .9;
entities_Hero.WALL_JUMP_FRICTION_X = .997;
entities_Hero.WALL_JUMP_COYOTE_TIME = .1;
entities_Hero.WALL_JUMP_FACE_TIME = .1;
entities_Solid.all = [];
format_gif_Tools.LN2 = Math.log(2);
format_mp3_MPEG.V1 = 3;
format_mp3_MPEG.V2 = 2;
format_mp3_MPEG.V25 = 0;
format_mp3_MPEG.Reserved = 1;
format_mp3_MPEG.V1_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.V2_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.SamplingRates = [[format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_Bad]];
format_mp3_CLayer.LReserved = 0;
format_mp3_CLayer.LLayer3 = 1;
format_mp3_CLayer.LLayer2 = 2;
format_mp3_CLayer.LLayer1 = 3;
format_mp3_CChannelMode.CStereo = 0;
format_mp3_CChannelMode.CJointStereo = 1;
format_mp3_CChannelMode.CDualChannel = 2;
format_mp3_CChannelMode.CMono = 3;
format_mp3_CEmphasis.ENone = 0;
format_mp3_CEmphasis.EMs50_15 = 1;
format_mp3_CEmphasis.EReserved = 2;
format_mp3_CEmphasis.ECCIT_J17 = 3;
fx_Particle.BOUNCINESS = .5;
fx_Particle.LIMIT = 1000;
fx_Particle.all = [];
h2d_Console.HIDE_LOG_TIMEOUT = 3.;
h2d_HtmlText.REG_SPACES = new EReg("[\r\n\t ]+","g");
h3d_impl_RenderContext.STRICT = true;
h2d_RenderContext.BUFFERING = false;
h2d_col_Matrix.tmp = new h2d_col_Matrix();
h2d_filter_Filter.defaultUseScreenResolution = false;
h3d_shader_ScreenShader.SRC = "HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
h2d_filter__$Mask_MaskShader.SRC = "HXSLG2gyZC5maWx0ZXIuX01hc2suTWFza1NoYWRlcg0BBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQoCAAALBG1hc2sKAgAADAhtYXNrTWF0QQULAgAADQhtYXNrTWF0QgULAgAADgtzbW9vdGhBbHBoYQICAAEAAAAAAA8IX19pbml0X18OBgAAEAZ2ZXJ0ZXgOBgAAEQhmcmFnbWVudA4GAAADAg8AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAQAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAERAAAFBQgSBWNvbG9yBQwEAAAJAyEOAgIKCgIDBQoFDAAIEwJ1dgULBAAACQMpDgICAwUKAQMAAAAAAADwPwMFCwAIFAFrBQwEAAAJAyEOAgILCgkDKA4CCQMdDgICEwULAgwFCwMJAx0OAgITBQsCDQULAwUKBQwACBUFYWxwaGEDBAAACwIOAgoCFAUMDAADCQMmDgEGBwoCFAUMDAADAQMAAAAAAAAAAAMCAwMABgQCBwUMBgECEgUMAhUDBQwFDAA";
h3d_Buffer.GUID = 0;
h3d_Engine.SOFTWARE_DRIVER = false;
h3d_Engine.ANTIALIASING = 0;
h3d_MatrixImpl.tmp = new h3d_MatrixImpl();
h3d_MatrixImpl.lumR = 0.212671;
h3d_MatrixImpl.lumG = 0.71516;
h3d_MatrixImpl.lumB = 0.072169;
h3d_MatrixImpl.SQ13 = 0.57735026918962576450914878050196;
h3d_anim_Animation.EPSILON = 0.000001;
h3d_col_ObjectCollider.TMP_RAY = new h3d_col_Ray();
h3d_col_ObjectCollider.TMP_MAT = new h3d_MatrixImpl();
h3d_scene_Object.ROT2RAD = -0.017453292519943295769236907684886;
h3d_scene_Object.tmpMat = new h3d_MatrixImpl();
h3d_impl_GlDriver.UID = 0;
h3d_impl_GlDriver.ALLOW_WEBGL2 = true;
h3d_impl_GlDriver.BLACK = (function($this) {
	var $r;
	var x = 0;
	var y = 0;
	var z = 0;
	var w = 0;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	$r = new h3d_Vector4Impl(x,y,z,w);
	return $r;
}(this));
h3d_impl_GlDriver.outOfMemoryCheck = false;
h3d_impl_GlDriver.STREAM_POS = 1;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779,32775,32776];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g2 = [];
			var _g3 = 0;
			var _g4 = i;
			while(_g3 < _g4) {
				var k = _g3++;
				_g2.push(36064 + k);
			}
			_g.push(_g2);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_MemoryManager.MAX_MEMORY = 4294967296.;
h3d_impl_MemoryManager.SIZE = 65532;
h3d_impl_MemoryManager.ALL_FLAGS = h3d_BufferFlag.__empty_constructs__.slice();
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Pass.enableLights_bits = 1;
h3d_mat_Pass.enableLights_offset = 0;
h3d_mat_Pass.enableLights_mask = 1;
h3d_mat_Pass.dynamicParameters_bits = 1;
h3d_mat_Pass.dynamicParameters_offset = 1;
h3d_mat_Pass.dynamicParameters_mask = 2;
h3d_mat_Pass.isStatic_bits = 1;
h3d_mat_Pass.isStatic_offset = 2;
h3d_mat_Pass.isStatic_mask = 4;
h3d_mat_Pass.batchMode_bits = 1;
h3d_mat_Pass.batchMode_offset = 3;
h3d_mat_Pass.batchMode_mask = 8;
h3d_mat_Pass.culling_bits = 2;
h3d_mat_Pass.culling_offset = 0;
h3d_mat_Pass.culling_mask = 3;
h3d_mat_Pass.depthWrite_bits = 1;
h3d_mat_Pass.depthWrite_offset = 2;
h3d_mat_Pass.depthWrite_mask = 4;
h3d_mat_Pass.depthTest_bits = 3;
h3d_mat_Pass.depthTest_offset = 3;
h3d_mat_Pass.depthTest_mask = 56;
h3d_mat_Pass.blendSrc_bits = 4;
h3d_mat_Pass.blendSrc_offset = 6;
h3d_mat_Pass.blendSrc_mask = 960;
h3d_mat_Pass.blendDst_bits = 4;
h3d_mat_Pass.blendDst_offset = 10;
h3d_mat_Pass.blendDst_mask = 15360;
h3d_mat_Pass.blendAlphaSrc_bits = 4;
h3d_mat_Pass.blendAlphaSrc_offset = 14;
h3d_mat_Pass.blendAlphaSrc_mask = 245760;
h3d_mat_Pass.blendAlphaDst_bits = 4;
h3d_mat_Pass.blendAlphaDst_offset = 18;
h3d_mat_Pass.blendAlphaDst_mask = 3932160;
h3d_mat_Pass.blendOp_bits = 3;
h3d_mat_Pass.blendOp_offset = 22;
h3d_mat_Pass.blendOp_mask = 29360128;
h3d_mat_Pass.blendAlphaOp_bits = 3;
h3d_mat_Pass.blendAlphaOp_offset = 25;
h3d_mat_Pass.blendAlphaOp_mask = 234881024;
h3d_mat_Pass.wireframe_bits = 1;
h3d_mat_Pass.wireframe_offset = 28;
h3d_mat_Pass.wireframe_mask = 268435456;
h3d_mat_Pass.reserved_bits = 1;
h3d_mat_Pass.reserved_offset = 29;
h3d_mat_Pass.reserved_mask = 536870912;
h3d_mat_Stencil.readMask_bits = 8;
h3d_mat_Stencil.readMask_offset = 0;
h3d_mat_Stencil.readMask_mask = 255;
h3d_mat_Stencil.writeMask_bits = 8;
h3d_mat_Stencil.writeMask_offset = 8;
h3d_mat_Stencil.writeMask_mask = 65280;
h3d_mat_Stencil.reference_bits = 8;
h3d_mat_Stencil.reference_offset = 16;
h3d_mat_Stencil.reference_mask = 16711680;
h3d_mat_Stencil.frontTest_bits = 3;
h3d_mat_Stencil.frontTest_offset = 0;
h3d_mat_Stencil.frontTest_mask = 7;
h3d_mat_Stencil.frontPass_bits = 3;
h3d_mat_Stencil.frontPass_offset = 3;
h3d_mat_Stencil.frontPass_mask = 56;
h3d_mat_Stencil.frontSTfail_bits = 3;
h3d_mat_Stencil.frontSTfail_offset = 6;
h3d_mat_Stencil.frontSTfail_mask = 448;
h3d_mat_Stencil.frontDPfail_bits = 3;
h3d_mat_Stencil.frontDPfail_offset = 9;
h3d_mat_Stencil.frontDPfail_mask = 3584;
h3d_mat_Stencil.backTest_bits = 3;
h3d_mat_Stencil.backTest_offset = 12;
h3d_mat_Stencil.backTest_mask = 28672;
h3d_mat_Stencil.backPass_bits = 3;
h3d_mat_Stencil.backPass_offset = 15;
h3d_mat_Stencil.backPass_mask = 229376;
h3d_mat_Stencil.backSTfail_bits = 3;
h3d_mat_Stencil.backSTfail_offset = 18;
h3d_mat_Stencil.backSTfail_mask = 1835008;
h3d_mat_Stencil.backDPfail_bits = 3;
h3d_mat_Stencil.backDPfail_offset = 21;
h3d_mat_Stencil.backDPfail_mask = 14680064;
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d_mat_Texture.PREVENT_FORCED_DISPOSE = -1;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_mat_Texture.TRILINEAR_FILTERING_ENABLED = true;
h3d_mat_Texture.DEFAULT_WRAP = h3d_mat_Wrap.Clamp;
h3d_mat_Texture.checkerTextureKeys = new haxe_ds_IntMap();
h3d_mat_Texture.noiseTextureKeys = new haxe_ds_IntMap();
h3d_mat_Texture.genTextureKeys = new haxe_ds_StringMap();
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}};
h3d_pass__$Border_BorderShader.SRC = "HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d_pass_CascadeShadowMap.debugColors = [16711680,65280,255,16776960,65535,16711935,0];
h3d_pass__$Copy_ArrayCopyShader.SRC = "HXSLHmgzZC5wYXNzLl9Db3B5LkFycmF5Q29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQsCAAALBWxheWVyAQIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFAQYEAggFDAkDIQ4CAgoLCQMpDgICCQUKCQMmDgECCwEDBQsFDAUMAA";
h3d_pass__$Copy_CopyShader.SRC = "HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA";
h3d_pass__$CubeCopy_CubeCopyShader.SRC = "HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA";
h3d_pass__$FXAA_FXAAShader.SRC = "HXSLGWgzZC5wYXNzLl9GWEFBLkZYQUFTaGFkZXIKAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKBWRlbHRhBQoCAAALB3RleHR1cmUKAgAADAhfX2luaXRfXw4GAAANBnZlcnRleA4GAAAOCGZyYWdtZW50DgYAAAMCDAAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA0AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ4AAAUdCA8DdHV2BQoEAAACAwUKAAgQAm53BQsEAAAKCQMhDgICCwoGAAIPBQoGAQkDKA4CAQMAAAAAAADwvwMBAwAAAAAAAPC/AwUKAgoFCgUKBQoFDJIABQsACBECbmUFCwQAAAoJAyEOAgILCgYAAg8FCgYBCQMoDgIBAwAAAAAAAPA/AwEDAAAAAAAA8L8DBQoCCgUKBQoFCgUMkgAFCwAIEgJzdwULBAAACgkDIQ4CAgsKBgACDwUKBgEJAygOAgEDAAAAAAAA8L8DAQMAAAAAAADwPwMFCgIKBQoFCgUKBQySAAULAAgTAnNlBQsEAAAKCQMhDgICCwoGAAIPBQoGAQkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUKAgoFCgUKBQoFDJIABQsACBQGb3JpZ2luBQwEAAAJAyEOAgILCgIPBQoFDAAIFQNtaWQFCwQAAAoCFAUMkgAFCwAIFgRsdW1BBQsEAAAJAykOAwEDiUFg5dAi0z8DAQNiEFg5tMjiPwMBA8l2vp8aL70/AwULAAgXBWx1bU5XAwQAAAkDHQ4CAhAFCwIWBQsDAAgYBWx1bU5FAwQAAAkDHQ4CAhEFCwIWBQsDAAgZBWx1bVNXAwQAAAkDHQ4CAhIFCwIWBQsDAAgaBWx1bVNFAwQAAAkDHQ4CAhMFCwIWBQsDAAgbBmx1bU1pZAMEAAAJAx0OAgIVBQsCFgULAwAIHAZsdW1NaW4DBAAACQMVDgICGwMJAxUOAgkDFQ4CAhcDAhgDAwkDFQ4CAhkDAhoDAwMDAAgdBmx1bU1heAMEAAAJAxYOAgIbAwkDFg4CCQMWDgICFwMCGAMDCQMWDgICGQMCGgMDAwMACB4DZGlyBQoEAAAAAAYECgIeBQoAAAMHAwQGAwQGAAIXAwIYAwMDBAYAAhkDAhoDAwMDAwMDBgQKAh4FCgQAAwQGAwQGAAIXAwIZAwMDBAYAAhgDAhoDAwMDAwMIHwlkaXJSZWR1Y2UDBAAACQMWDgIGAQQGAAYABgACFwMCGAMDAhkDAwIaAwMDBAYCAQMAAAAAAADQPwMBAwAAAAAAAGBAAwMDAwYCAQMAAAAAAADwPwMBAwAAAAAAACBAAwMDAAggCXJjcERpck1pbgMEAAAGAgEDAAAAAAAA8D8DBAYACQMVDgIJAw8OAQoCHgUKAAADAwkDDw4BCgIeBQoEAAMDAwIfAwMDAwAGBAIeBQoGAQkDFQ4CCQMoDgIBAwAAAAAAACBAAwEDAAAAAAAAIEADBQoJAxYOAgkDKA4CAQMAAAAAAAAgwAMBAwAAAAAAACDAAwUKBgECHgUKAiADBQoFCgUKAgoFCgUKBQoIIQRyZ2JBBQsEAAAGAQEDAAAAAAAA4D8DBAYACgkDIQ4CAgsKBgACDwUKBgECHgUKBAYDBgIBAwAAAAAAAPA/AwEDAAAAAAAACEADAwEDAAAAAAAA4D8DAwMFCgUKBQySAAULCgkDIQ4CAgsKBgACDwUKBgECHgUKBAYDBgIBAwAAAAAAAABAAwEDAAAAAAAACEADAwEDAAAAAAAA4D8DAwMFCgUKBQySAAULBQsFCwULAAgiBHJnYkIFCwQAAAYABgECIQULAQMAAAAAAADgPwMFCwYBAQMAAAAAAADQPwMEBgAKCQMhDgICCwoGAAIPBQoGAQIeBQoBAwAAAAAAAOC/AwUKBQoFDJIABQsKCQMhDgICCwoGAAIPBQoGAQIeBQoBAwAAAAAAAOA/AwUKBQoFDJIABQsFCwULBQsFCwAIIwRsdW1CAwQAAAkDHQ4CAiIFCwIWBQsDAAgkBWNvbG9yBQwEAAAAAAglA2NtcAUKBAAABgcJAygOAgIjAwcDAiMDAwUKCQMoDgICHAMHAwIdAwMFCgUKAAYECgIkBQySAAULCQMYDgMCIQULAiIFCwYBCgIlBQoAAAMKAiUFCgQAAwMFCwULBgQKAiQFDAwAAwoCFAUMDAADAwYEAgcFDAIkBQwFDAA";
h3d_scene_Mesh.tmpMat = new h3d_MatrixImpl();
h3d_scene_ObjectFlags.FPosChanged = 1;
h3d_scene_ObjectFlags.FVisible = 2;
h3d_scene_ObjectFlags.FCulled = 4;
h3d_scene_ObjectFlags.FFollowPositionOnly = 8;
h3d_scene_ObjectFlags.FLightCameraCenter = 16;
h3d_scene_ObjectFlags.FAllocated = 32;
h3d_scene_ObjectFlags.FAlwaysSyncAnimation = 64;
h3d_scene_ObjectFlags.FInheritCulled = 128;
h3d_scene_ObjectFlags.FModelRoot = 256;
h3d_scene_ObjectFlags.FIgnoreBounds = 512;
h3d_scene_ObjectFlags.FIgnoreCollide = 1024;
h3d_scene_ObjectFlags.FIgnoreParentTransform = 2048;
h3d_scene_ObjectFlags.FCullingColliderInherited = 4096;
h3d_scene_ObjectFlags.FFixedPosition = 8192;
h3d_scene_ObjectFlags.FFixedPositionSynced = 16384;
h3d_scene_ObjectFlags.FAlwaysSync = 32768;
h3d_scene_RenderContext.__meta__ = { fields : { cameraView : { global : ["camera.view"]}, cameraNear : { global : ["camera.zNear"]}, cameraFar : { global : ["camera.zFar"]}, cameraProj : { global : ["camera.proj"]}, cameraPos : { global : ["camera.position"]}, cameraProjDiag : { global : ["camera.projDiag"]}, cameraProjFlip : { global : ["camera.projFlip"]}, cameraViewProj : { global : ["camera.viewProj"]}, cameraInverseViewProj : { global : ["camera.inverseViewProj"]}, globalTime : { global : ["global.time"]}, pixelSize : { global : ["global.pixelSize"]}, globalModelView : { global : ["global.modelView"]}, globalModelViewInverse : { global : ["global.modelViewInverse"]}}};
h3d_scene_Skin.TMP_MAT = new h3d_MatrixImpl();
h3d_scene_pbr_IrradBase.SRC = "HXSLF2gzZC5zY2VuZS5wYnIuSXJyYWRCYXNlCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgtzYW1wbGVzQml0cwECAAEAAAAAAAsIX19pbml0X18OBgAADAZ2ZXJ0ZXgOBgAADQxfcmV2ZXJzZWJpdHMOBgAADgpoYW1tZXJzbGV5DgYAAA8TaW1wb3J0YW5jZVNhbXBsZUdHWA4GAAAFAgsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAMAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAMNARABaQEEAAABBQYIEQFyAQQAAAYMBAYQAhABAQIQAAAAAQEBBAYSAhABAQIQAAAAAQEBAQAGBAIRAQYMBAYQBAYLAhEBAQL/AP8AAQEBAQIIAAAAAQEBBAYSBAYLAhEBAQIA/wD/AQEBAQIIAAAAAQEBAQEGBAIRAQYMBAYQBAYLAhEBAQIPDw8PAQEBAQIEAAAAAQEBBAYSBAYLAhEBAQLw8PDwAQEBAQIEAAAAAQEBAQEGBAIRAQYMBAYQBAYLAhEBAQIzMzMzAQEBAQICAAAAAQEBBAYSBAYLAhEBAQLMzMzMAQEBAQICAAAAAQEBAQEGBAIRAQYMBAYQBAYLAhEBAQJVVVVVAQEBAQIBAAAAAQEBBAYSBAYLAhEBAQKqqqqqAQEBAQIBAAAAAQEBAQENAhEBAAADDgISAWkBBAAAEwNtYXgBBAAABQoFAggUAnJpAwQAAAYBCQMmDgEJAg0OAQISAQEDAQMAAAAAAADwPQMDAA0JAygOAgYCCQMmDgECEgEDCQMmDgECEwEDAwIUAwUKAAADDwMVCXJvdWdobmVzcwMEAAAWAXAFCgQAABcBbgULBAAABQsFCQgYAWEDBAAABgECFQMCFQMDAAgZA3BoaQMEAAAGAQYBAQMAAAAAAAAAQAMBAxgtRFT7IQlAAwMKAhYFCgAAAwMACBoEY29zVAMEAAAJAxUOAgkDDQ4BBgIEBgMBAwAAAAAAAPA/AwoCFgUKBAADAwMEBgABAwAAAAAAAPA/AwYBBAYDBgECGAMCGAMDAQMAAAAAAADwPwMDAwoCFgUKBAADAwMDAwMBAwAAAAAAAPA/AwMACBsEc2luVAMEAAAJAw0OAQYDAQMAAAAAAADwPwMGAQIaAwIaAwMDAwAIHARsdGFuBQsEAAAJAykOAwYBAhsDCQMDDgECGQMDAwYBAhsDCQMCDgECGQMDAwIaAwULAAgdAnVwBQsEAAALBgkJAw8OAQoCFwULCAADAwEDK4cW2c737z8DAgkDKQ4DAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQsJAykOAwEDAAAAAAAA8D8DAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwULBQsACB4EdGFuWAULBAAACQMfDgEJAx4OAgIdBQsCFwULBQsFCwAIHwR0YW5ZBQsEAAAJAx8OAQkDHg4CAhcFCwIeBQsFCwULAA0JAx8OAQQGAAYABgECHgULCgIcBQsAAAMFCwYBAh8FCwoCHAULBAADBQsFCwYBAhcFCwoCHAULCAADBQsFCwULBQsAAA";
h3d_scene_pbr_IrradShader.SRC = "HXSLGWgzZC5zY2VuZS5wYnIuSXJyYWRTaGFkZXIXAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKC3NhbXBsZXNCaXRzAQIAAQAAAAAACwpmYWNlTWF0cml4BgIAAAwGZW52TWFwDAIAAA0KaXNTcGVjdWxhcgICAAEAAAAAAA4GaXNTUkdCAgIAAQAAAAAADwlyb3VnaG5lc3MDAgAAEAhjdWJlU2l6ZQMCAAARD2N1YmVTY2FsZUZhY3RvcgMCAAASBmhkck1heAMCAAATCF9faW5pdF9fDgYAABQGdmVydGV4DgYAABUMX3JldmVyc2ViaXRzDgYAABYKaGFtbWVyc2xleQ4GAAAXE2ltcG9ydGFuY2VTYW1wbGVHR1gOBgAAGBZjb3NpbmVXZWlnaHRlZFNhbXBsaW5nDgYAABkJZ2V0Tm9ybWFsDgYAABoMZ2FtbWFDb3JyZWN0DgYAABsIZnJhZ21lbnQOBgAACQITAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAAFAAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAADFQEcAWkBBAAAAQUGCB0BcgEEAAAGDAQGEAIcAQECEAAAAAEBAQQGEgIcAQECEAAAAAEBAQEABgQCHQEGDAQGEAQGCwIdAQEC/wD/AAEBAQECCAAAAAEBAQQGEgQGCwIdAQECAP8A/wEBAQECCAAAAAEBAQEBBgQCHQEGDAQGEAQGCwIdAQECDw8PDwEBAQECBAAAAAEBAQQGEgQGCwIdAQEC8PDw8AEBAQECBAAAAAEBAQEBBgQCHQEGDAQGEAQGCwIdAQECMzMzMwEBAQECAgAAAAEBAQQGEgQGCwIdAQECzMzMzAEBAQECAgAAAAEBAQEBBgQCHQEGDAQGEAQGCwIdAQECVVVVVQEBAQECAQAAAAEBAQQGEgQGCwIdAQECqqqqqgEBAQECAQAAAAEBAQEBDQIdAQAAAxYCHgFpAQQAAB8DbWF4AQQAAAUKBQIIIAJyaQMEAAAGAQkDJg4BCQIVDgECHgEBAwEDAAAAAAAA8D0DAwANCQMoDgIGAgkDJg4BAh4BAwkDJg4BAh8BAwMCIAMFCgAAAxcDIQlyb3VnaG5lc3MDBAAAIgFwBQoEAAAjAW4FCwQAAAULBQkIJAFhAwQAAAYBAiEDAiEDAwAIJQNwaGkDBAAABgEGAQEDAAAAAAAAAEADAQMYLURU+yEJQAMDCgIiBQoAAAMDAAgmBGNvc1QDBAAACQMVDgIJAw0OAQYCBAYDAQMAAAAAAADwPwMKAiIFCgQAAwMDBAYAAQMAAAAAAADwPwMGAQQGAwYBAiQDAiQDAwEDAAAAAAAA8D8DAwMKAiIFCgQAAwMDAwMDAQMAAAAAAADwPwMDAAgnBHNpblQDBAAACQMNDgEGAwEDAAAAAAAA8D8DBgECJgMCJgMDAwMACCgEbHRhbgULBAAACQMpDgMGAQInAwkDAw4BAiUDAwMGAQInAwkDAg4BAiUDAwMCJgMFCwAIKQJ1cAULBAAACwYJCQMPDgEKAiMFCwgAAwMBAyuHFtnO9+8/AwIJAykOAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwULCQMpDgMBAwAAAAAAAPA/AwEDAAAAAAAAAAADAQMAAAAAAAAAAAMFCwULAAgqBHRhblgFCwQAAAkDHw4BCQMeDgICKQULAiMFCwULBQsACCsEdGFuWQULBAAACQMfDgEJAx4OAgIjBQsCKgULBQsFCwANCQMfDgEEBgAGAAYBAioFCwoCKAULAAADBQsGAQIrBQsKAigFCwQAAwULBQsGAQIjBQsKAigFCwgAAwULBQsFCwULAAADGAIsAXAFCgQAAC0BbgULBAAABQsFBwguAnNxAwQAAAkDDQ4BBgMBAwAAAAAAAPA/AwoCLAUKAAADAwMACC8FYWxwaGEDBAAABgEGAQEDAAAAAAAAAEADAQMYLURU+yEJQAMDCgIsBQoEAAMDAAgwBGx0YW4FCwQAAAkDKQ4DBgECLgMJAwMOAQIvAwMDBgECLgMJAwIOAQIvAwMDCQMNDgEKAiwFCgAAAwMFCwAIMQJ1cAULBAAACwYJCQMPDgEKAi0FCwgAAwMBAyuHFtnO9+8/AwIJAykOAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwULCQMpDgMBAwAAAAAAAPA/AwEDAAAAAAAAAAADAQMAAAAAAAAAAAMFCwULAAgyBHRhblgFCwQAAAkDHw4BCQMeDgICMQULAi0FCwULBQsACDMEdGFuWQULBAAACQMfDgEJAx4OAgItBQsCMgULBQsFCwANCQMfDgEEBgAGAAYBAjIFCwoCMAULAAADBQsGAQIzBQsKAjAFCwQAAwULBQsGAQItBQsKAjAFCwgAAwULBQsFCwULAAADGQAFCwUDCDQBZAUKBAAABgMGAQIDBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgALAg0CBQEGgAI0BQoGAQIRAwQGAQYBAjQFCgI0BQoFCgI0BQoFCgUKBQoFCgAAAA0JAx8OAQQGAQkDKQ4CAjQFCgEDAAAAAAAA8D8DBQsCCwYFCwULBQsAAAMaATUFY29sb3IFCwQAAAULBQENCwIOAgI1BQsJAwgOAgI1BQsJAykOAQEDmpmZmZmZAUADBQsFCwULAAABGwAABQYINgVjb2xvcgULBAAACQMpDgEBAwAAAAAAAAAAAwULAAg3AW4FCwQAAAkCGQ4ABQsACDgLdG90YWxXZWlnaHQDBAAAAQO7vdfZ33zbPQMACDkKbnVtU2FtcGxlcwEEAAAGEAECAQAAAAECCgEBAA46AWkBBAAABhUBAgAAAAABAjkBDwEAAAUFCDsBcAUKBAAACQIWDgICOgECOQEFCgAIPAFsBQsEAAAAAAsCDQIFAwg9AWgFCwQAAAkCFw4DAg8DAjsFCgI3BQsFCwAIPgF2BQsEAAACNwULAAYEAjwFCwkDHw4BCQMgDgIHAwI+BQsFCwI9BQsFCwULBQsABQEGBAI8BQsJAhgOAgI7BQoCNwULBQsFCwAACD8GYW1vdW50AwQAAAkDNQ4BCQMdDgICNwULAjwFCwMDAAsGBwI/AwEDAAAAAAAAAAADAgUDCEAIZW52Q29sb3IFCwQAAAkCGg4BCQMVDgIKCQMhDgICDAwCPAULBQySAAULAhIDBQsFCwAGgAI2BQsGAQJABQsCPwMFCwULBoACOAMCPwMDAAAAAAAGBAIHBQwJAyoOAgYCAjYFCwI4AwULAQMAAAAAAADwPwMFDAUMAA";
h3d_scene_pbr_IrradLut.SRC = "HXSLFmgzZC5zY2VuZS5wYnIuSXJyYWRMdXQOAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKC3NhbXBsZXNCaXRzAQIAAQAAAAAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANDF9yZXZlcnNlYml0cw4GAAAOCmhhbW1lcnNsZXkOBgAADxNpbXBvcnRhbmNlU2FtcGxlR0dYDgYAABADR0dYDgYAABEHR19TbWl0aA4GAAASCGZyYWdtZW50DgYAAAgCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAw0BEwFpAQQAAAEFBggUAXIBBAAABgwEBhACEwEBAhAAAAABAQEEBhICEwEBAhAAAAABAQEBAAYEAhQBBgwEBhAEBgsCFAEBAv8A/wABAQEBAggAAAABAQEEBhIEBgsCFAEBAgD/AP8BAQEBAggAAAABAQEBAQYEAhQBBgwEBhAEBgsCFAEBAg8PDw8BAQEBAgQAAAABAQEEBhIEBgsCFAEBAvDw8PABAQEBAgQAAAABAQEBAQYEAhQBBgwEBhAEBgsCFAEBAjMzMzMBAQEBAgIAAAABAQEEBhIEBgsCFAEBAszMzMwBAQEBAgIAAAABAQEBAQYEAhQBBgwEBhAEBgsCFAEBAlVVVVUBAQEBAgEAAAABAQEEBhIEBgsCFAEBAqqqqqoBAQEBAgEAAAABAQEBAQ0CFAEAAAMOAhUBaQEEAAAWA21heAEEAAAFCgUCCBcCcmkDBAAABgEJAyYOAQkCDQ4BAhUBAQMBAwAAAAAAAPA9AwMADQkDKA4CBgIJAyYOAQIVAQMJAyYOAQIWAQMDAhcDBQoAAAMPAxgJcm91Z2huZXNzAwQAABkBcAUKBAAAGgFuBQsEAAAFCwUJCBsBYQMEAAAGAQIYAwIYAwMACBwDcGhpAwQAAAYBBgEBAwAAAAAAAABAAwEDGC1EVPshCUADAwoCGQUKAAADAwAIHQRjb3NUAwQAAAkDFQ4CCQMNDgEGAgQGAwEDAAAAAAAA8D8DCgIZBQoEAAMDAwQGAAEDAAAAAAAA8D8DBgEEBgMGAQIbAwIbAwMBAwAAAAAAAPA/AwMDCgIZBQoEAAMDAwMDAwEDAAAAAAAA8D8DAwAIHgRzaW5UAwQAAAkDDQ4BBgMBAwAAAAAAAPA/AwYBAh0DAh0DAwMDAAgfBGx0YW4FCwQAAAkDKQ4DBgECHgMJAwMOAQIcAwMDBgECHgMJAwIOAQIcAwMDAh0DBQsACCACdXAFCwQAAAsGCQkDDw4BCgIaBQsIAAMDAQMrhxbZzvfvPwMCCQMpDgMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFCwkDKQ4DAQMAAAAAAADwPwMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQsFCwAIIQR0YW5YBQsEAAAJAx8OAQkDHg4CAiAFCwIaBQsFCwULAAgiBHRhblkFCwQAAAkDHw4BCQMeDgICGgULAiEFCwULBQsADQkDHw4BBAYABgAGAQIhBQsKAh8FCwAAAwULBgECIgULCgIfBQsEAAMFCwULBgECGgULCgIfBQsIAAMFCwULBQsFCwAAAxACIwVOZG90VgMEAAAkCXJvdWdobmVzcwMEAAADBQIIJQFrAwQAAAYBBAYBAiQDAiQDAwMBAwAAAAAAAOA/AwMADQYCAiMDBAYABgECIwMEBgMBAwAAAAAAAPA/AwIlAwMDAwIlAwMDAwAAAxEDJglyb3VnaG5lc3MDBAAAJwVuRG90VgMEAAAoBW5Eb3RMAwQAAAMFAQ0GAQkCEA4CAigDAiYDAwkCEA4CAicDAiYDAwMAAAESAAAFCQgpCXJvdWdobmVzcwMEAAAKAgMFCgAAAwAIKgNOb1YDBAAACgIDBQoEAAMACCsBdgULBAAACQMpDgMJAw0OAQYDAQMAAAAAAADwPwMGAQIqAwIqAwMDAwEDAAAAAAAAAAADAioDBQsACCwBbgULBAAACQMpDgMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFCwAILQpudW1TYW1wbGVzAQQAAAYQAQIBAAAAAQIKAQEACC4BYQMEAAABAwAAAAAAAAAAAwAILwFiAwQAAAEDAAAAAAAAAAADAA4wAWkBBAAABhUBAgAAAAABAi0BDwEAAAUHCDECeGkFCgQAAAkCDg4CAjABAi0BBQoACDIBaAULBAAACQIPDgMCKQMCMQUKAiwFCwULAAgzAWwFCwQAAAkDIA4CBwMCKwULBQsCMgULBQsACDQDTm9MAwQAAAkDNQ4BCQMdDgICLAULAjMFCwMDAAg1A05vSAMEAAAJAzUOAQkDHQ4CAiwFCwIyBQsDAwAINgNWb0gDBAAACQM1DgEJAx0OAgIrBQsCMgULAwMACwYHAjQDAQMAAAAAAAAAAAMCBQUINwFnAwQAAAkCEQ4DAikDAioDAjQDAwAIOARndmlzAwQAAAYCBgECNwMCNgMDBAYBAjUDAioDAwMDAAg5B2ZyZXNuZWwDBAAACQMIDgIGAwEDAAAAAAAA8D8DAjYDAwEDAAAAAAAAFEADAwAGgAIuAwYBBAYDAQMAAAAAAADwPwMCOQMDAwI4AwMDBoACLwMGAQI5AwI4AwMDAAAAAAAGBAIHBQwJAyoOBAYCAi4DCQMmDgECLQEDAwYCAi8DCQMmDgECLQEDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
h3d_scene_pbr_PanoramaToCube.SRC = "HXSLHGgzZC5zY2VuZS5wYnIuUGFub3JhbWFUb0N1YmUNAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwpmYWNlTWF0cml4BgIAAAwJdGhyZXNob2xkAwIAAA0TYWJvdmVUaHJlc2hvbGRTY2FsZQMCAAAOCF9faW5pdF9fDgYAAA8GdmVydGV4DgYAABAJZ2V0Tm9ybWFsDgYAABEIZnJhZ21lbnQOBgAABAIOAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADwAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAADEAAFCwUCCBIBZAUKBAAABgMGAQIDBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgANCQMfDgEEBgEJAykOAgISBQoBAwAAAAAAAPA/AwULAgsGBQsFCwULAAABEQAABQYIEwFuBQsEAAAJAhAOAAULAAgUAnV2BQoEAAAJAygOAgkDBw4CCgITBQsEAAMKAhMFCwAAAwMJAwUOAQcDCgITBQsIAAMDAwUKAAaBAhQFCgkDKA4CAQOvlGWIY13EPwMBA3RGlPYGX9Q/AwUKBQoGgAIUBQoBAwAAAAAAAOA/AwUKBgQCCAUMCQMhDgICCgoCFAUKBQwFDAsGBwkDFg4CCQMWDgIKAggFDAAAAwoCCAUMBAADAwoCCAUMCAADAwIMAwIGgQIIBQwCDQMFDAAAAA";
h3d_scene_pbr_CubeToPanorama.SRC = "HXSLHGgzZC5zY2VuZS5wYnIuQ3ViZVRvUGFub3JhbWEJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKBnNvdXJjZQwCAAALCF9faW5pdF9fDgYAAAwGdmVydGV4DgYAAA0IZnJhZ21lbnQOBgAAAwILAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADAAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDQAABQ4IDgJQSQMEAAABA0rYEk37IQlAAwAIDwRmb3ZYAwQAAAYBAg4DAQMAAAAAAAAAQAMDAAgQBGZvdlkDBAAAAg4DAAgRB2hPZmZzZXQDBAAABgEEBgMGAQEDAAAAAAAAAEADAg4DAwIPAwMDAQMAAAAAAADgPwMDAAgSB3ZPZmZzZXQDBAAABgEEBgMCDgMCEAMDAwEDAAAAAAAA4D8DAwAIEwZoQW5nbGUDBAAABgACEQMGAQoCCQUKAAADAg8DAwMACBQGdkFuZ2xlAwQAAAYAAhIDBgEKAgkFCgQAAwIQAwMDAAgVAW4FCwQAAAkDKQ4BAQMAAAAAAAAAAAMFCwAGBAoCFQULAAADBgEJAwIOAQIUAwMJAwIOAQITAwMDAwYECgIVBQsEAAMJAwMOAQIUAwMDBgQKAhUFCwgAAwYBCQMCDgECFAMDCQMDDgECEwMDAwMGBAIVBQsJAx8OAQIVBQsFCwULBgQCCAUMCQMqDgIKCQMhDgICCgwCFQULBQySAAULAQMAAAAAAADwPwMFDAUMBgQCCAUMCQMqDgQBAwAAAAAAAPA/AwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwA";
h3d_scene_pbr_Environment.DEFAULT_FORMAT = hxd_PixelFormat.RGBA32F;
h3d_scene_pbr_DepthCopy.SRC = "HXSLF2gzZC5zY2VuZS5wYnIuRGVwdGhDb3B5CQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgxkZXB0aFRleHR1cmURAQIAAQgLCF9faW5pdF9fDgYAAAwGdmVydGV4DgYAAA0IZnJhZ21lbnQOBgAAAwILAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADAAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDQAABQEGBAIIBQwJAyoOAQkDPw4CAgoRAQIJBQoDBQwFDAA";
h3d_scene_pbr_Renderer.ALPHA = hxsl_Output.Swiz(hxsl_Output.Value("output.color"),[hxsl_Component.W]);
h3d_shader_AmbientLight.SRC = "HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d_shader_Base2d.SRC = "HXSLEWgzZC5zaGFkZXIuQmFzZTJkGwEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCXZpZXdwb3J0QQULAgAAHAl2aWV3cG9ydEIFCwIAAB0Ob3V0cHV0UG9zaXRpb24FDAQAAB4IX19pbml0X18OBgAAHwZ2ZXJ0ZXgOBgAAIAhmcmFnbWVudA4GAAADAh4AAAUGBgQCCwUMCQMqDgMCAgUKAgkDAQMAAAAAAADwPwMFDAUMCwIQAgUDBgQKAgwFDAAAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhIFCwMDBgQKAgwFDAQAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhMFCwMDBgQKAgwFDDkABQoKAgsFDDkABQoFCgAGBAIMBQwCCwUMBQwABgQCDwUKCwIWAgYABgECAwUKCgIXBQw5AAUKBQoKAhcFDBEABQoFCgIDBQoFCgUKBgQCDQUMCwIQAgYBAhEFDAIEBQwFDAIEBQwFDAUMBgQCDgUMCQMhDgICCgoCDwUKBQwFDAaBAg0FDAIOBQwFDAAAHwAABQUIIQN0bXAFCwQAAAkDKQ4CCgIMBQwRAAUKAQMAAAAAAADwPwMFCwAGBAIhBQsJAykOAwkDHQ4CAiEFCwIUBQsDCQMdDgICIQULAhUFCwMBAwAAAAAAAPA/AwULBQsGBAIdBQwJAyoOAwkDHQ4CAiEFCwIbBQsDCQMdDgICIQULAhwFCwMKAgwFDDkABQoFDAUMCwIZAgaDCgIdBQwRAAUKAhoFCgUKAAAGBAIGBQwCHQUMBQwAASAAAAUCCwYOAhgCBgkKAg0FDAwAAwED/Knx0k1iUD8DAgIMAAAABgQCBwUMAg0FDAUMAA";
h3d_shader_BaseMesh.SRC = "HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA";
h3d_shader_Blur.SRC = "HXSLD2gzZC5zaGFkZXIuQmx1choBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoVY2FtZXJhSW52ZXJzZVZpZXdQcm9qBwIAAAsHdGV4dHVyZQoCAAAMDGRlcHRoVGV4dHVyZQoCAAANB1F1YWxpdHkBAgABAAAAAAAOB2lzRGVwdGgCAgABAAAAAAAPBnZhbHVlcw8DDQIAABAHb2Zmc2V0cw8DDQIAABEFcGl4ZWwFCgIAABINaGFzRml4ZWRDb2xvcgICAAEAAAAAABMQc21vb3RoRml4ZWRDb2xvcgICAAEAAAAAABQKZml4ZWRDb2xvcgUMAgAAFRBpc0RlcHRoRGVwZW5kYW50AgIAAQAAAAAAFgloYXNOb3JtYWwCAgABAAAAAAAXDW5vcm1hbFRleHR1cmUKAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlDAIAABoHY3ViZURpcgYCAAAbCF9faW5pdF9fDgYAABwGdmVydGV4DgYAAB0IZnJhZ21lbnQOBgAAHgtnZXRQb3NpdGlvbg4GAAAEAhsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAcAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEdAAAFAgsCFQIFBggfBHBjdXIFCwQAAAkCHg4BAgMFCgULAAggBGNjdXIFDAQAAAkDIQ4CAgsKAgMFCgUMAAghBWNvbG9yBQwEAAAJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwACCIEbmN1cgULBAAACQM5DgEJAyEOAgIXCgIDBQoFDAULABUGdW5yb2xsAA4jAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICCQCdXYFCgQAAAYAAgMFCgYBAhEFChECEA8DDQsGCQIjAQECAAAAAAECBwMCIwEBAiMBAQMFCgUKAAglAWMFDAQAAAkDIQ4CAgsKAiQFCgUMAAgmAXAFCwQAAAkCHg4BAiQFCgULAAgnAWQDBAAACQMdDgIEBgMCJgULAh8FCwULBQsGAwImBQsCHwULBQsDAAgoAW4FCwQAAAkDOQ4BCQMhDgICFwoCJAUKBQwFCwAGBAIlBQwJAxgOAwIgBQwCJQUMCQMdDgICIgULAigFCwMFDAUMBgQCJQUMCQMYDgMCJQUMAiAFDAkDFQ4CBAYBCQMWDgIEBgMCJwMBA/yp8dJNYlA/AwMDAQMAAAAAAAAAAAMDAQMAAAAAAGr4QAMDAwEDAAAAAAAA8D8DAwUMBQwGgAIhBQwGAQIlBQwRAg8PAw0LBgkCIwEBAgAAAAABAgcDAiMBAQIjAQEDBQwFDAAAAAYEAggFDAIhBQwFDAALAg4CBQMIKQN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADioBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACKQMGAQkDNw4BCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwDEQIPDwMNCwYJAioBAQIAAAAAAQIHAwIqAQECKgEBAwMDBoACKQMGAQkDNw4BCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFDAMRAg8PAw0LBgkCKgEBAgAAAAABAgcDAioBAQIqAQEDAwMAAAAABgQCCAUMCQM2DgEJAxUOAgIpAwEDyxpQyv//7z8DAwUMBQwABQMIKwVjb2xvcgUMBAAACQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMABUGdW5yb2xsAA4sAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUBCwIYAgaAAisFDAYBCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCLAEBAgAAAAABAgcDAiwBAQIsAQEDBQwFDAaAAisFDAYBCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFDBECDw8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFDAUMAAAAAAYEAggFDAIrBQwFDAAAAAsCEgIFAgsCEwIGgQoCCAUMDAADCgIUBQwMAAMDBgQKAggFDAwAAwYBCgIUBQwMAAMJAyYOAQYHCgIIBQwMAAMBAwAAAAAAAAAAAwIDAwMABgQKAggFDJIABQsGAQoCFAUMkgAFCwoCCAUMDAADBQsFCwAAAAADHgEtAnV2BQoEAAAFCwUECC4FZGVwdGgDBAAACQM3DgEJAyEOAgIMCgItBQoFDAMACC8EdGVtcAUMBAAABgEJAyoOAwkDOw4BAi0FCgUKAi4DAQMAAAAAAADwPwMFDAIKBwUMAAgwCG9yaWdpbldTBQsEAAAGAgoCLwUMkgAFCwoCLwUMDAADBQsADQIwBQsAAA";
h3d_shader_DirShadow.SRC = "HXSLFGgzZC5zaGFkZXIuRGlyU2hhZG93EAEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFC1BDRl9TQU1QTEVTAQIAAQAAAAAABghwY2ZTY2FsZQMCAAAHCXNoYWRvd1JlcwUKAgAACAlzaGFkb3dNYXARAQIAAAkKc2hhZG93UHJvaggCAAAKCnNoYWRvd0JpYXMDAgAACxN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAMBnNoYWRvdwMEAAANCWRpclNoYWRvdwMEAAAOC3BvaXNzb25EaXNrDwUMBQIAAA8EcmFuZA4GAAAQCGZyYWdtZW50DgYAAAIDDwERAXYDBAAAAwUCCBICZHADBAAACQMdDgIJAyoOAQIRAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhIDAwEDUPwYc9Fd5UADAwMAAAEQAAAFAgsCAQIFAQsCBAIFCwYEAgwDAQMAAAAAAADwPwMDCBMJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgUCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBUIc2hhZG93VXYFCgQAAAkDOg4BCgIUBQsRAAUKBQoACBYEek1heAMEAAAJAzUOAQoCFAULCAADAwAIFwNyb3QDBAAABgEGAQkCDw4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwAIGARjb3NSAwQAAAkDAw4BAhcDAwAIGQRzaW5SAwQAAAkDAg4BAhcDAwAIGg5zYW1wbGVTdHJlbmd0aAMEAAAGAgEDAAAAAAAA8D8DCQMmDgECBQEDAwAIGwhvZmZTY2FsZQUKBAAABgECEwUKAgYDBQoADhwBaQEEAAAGFQECAAAAAAECBQEPAQAABQQIHQZvZmZzZXQFCgQAAAYBChECDg8FDAUCHAEFDBEABQoCGwUKBQoABgQCHQUKCQMoDgIGAwYBAhgDCgIdBQoAAAMDBgECGQMKAh0FCgQAAwMDBgAGAQIYAwoCHQUKBAADAwYBAhkDCgIdBQoAAAMDAwUKBQoIHgVkZXB0aAMEAAAJA0AOAwIIEQEGAAIVBQoCHQUKBQoBAwAAAAAAAAAAAwMABoMCDAMLBAYHBgMCFgMCCgMDAh4DAgICGgMBAwAAAAAAAAAAAwMDAAAACwICAgUFCB8Jc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIIAVkZXB0aAMEAAAJAz8OAgIIEQEJAzoOAQoCHwULEQAFCgUKAwAIIQR6TWF4AwQAAAkDNQ4BCgIfBQsIAAMDAAgiBWRlbHRhAwQAAAYDCQMVDgIEBgACIAMCCgMDAwIhAwMCIQMDAAYEAgwDCQM1DgEJAwkOAQYBAgMDAiIDAwMDAwAFBAgjCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCQIc2hhZG93VXYFCgQAAAkDOg4BCgIjBQsRAAUKBQoACCUFZGVwdGgDBAAACQM/DgICCBEBCgIkBQoRAAUKAwAGBAIMAwsGBwYDCQM1DgEKAiMFCwgAAwMCCgMDAiUDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA";
h3d_shader_CascadeShadow.SRC = "HXSLGGgzZC5zaGFkZXIuQ2FzY2FkZVNoYWRvdxgBBmVuYWJsZQICAAEAAAAAAAIHVVNFX0VTTQICAAEAAAAAAAMLc2hhZG93UG93ZXIDAgAABAdVU0VfUENGAgIAAQAAAAAABQtQQ0ZfU0FNUExFUwECAAEAAAAAAAYIcGNmU2NhbGUDAgAABwlzaGFkb3dSZXMFCgIAAAgJc2hhZG93TWFwEQECAAAJCnNoYWRvd1Byb2oIAgAACgpzaGFkb3dCaWFzAwIAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADAZzaGFkb3cDBAAADQlkaXJTaGFkb3cDBAAADgtwb2lzc29uRGlzaw8FDAUCAAAPCnBpeGVsQ29sb3IFDAQAABANQ0FTQ0FERV9DT1VOVAECAAEABQAAABEFREVCVUcCAgABAAAAAAASEWNhc2NhZGVTaGFkb3dNYXBzDwoQAgAAEwxjYXNjYWRlUHJvanMPCBACAAAUDWNhc2NhZGVEZWJ1Z3MPBQwQAgAAFQtjYXNjYWRlQmlhcw8DEAIAABYEcmFuZA4GAAAXBmluc2lkZQ4GAAAYCGZyYWdtZW50DgYAAAMDFgEZAXYDBAAAAwUCCBoCZHADBAAACQMdDgIJAyoOAQIZAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhoDAwEDUPwYc9Fd5UADAwMAAAMXARsDcG9zBQsEAAACBQELBg4GDgYJCQMPDgEKAhsFCwAAAwMBAwAAAAAAAPA/AwIGCQkDDw4BCgIbBQsEAAMDAQMAAAAAAADwPwMCAgYJCQMPDgEKAhsFCwgAAwMBAwAAAAAAAPA/AwICBQENAQEBAgAABQENAQEAAgAAAAABGAAABQQLAgECBQMGBAIMAwEDAAAAAAAA8D8DAwgcCXRleGVsU2l6ZQUKBAAABgIBAwAAAAAAAPA/AwIHBQoFCgAVBnVucm9sbAAOHQFjAQQAAAYVAQIAAAAAAQIQAQ8BAAAFAggeCXNoYWRvd1BvcwULBAAABgECCwULEQITDwgQAh0BCAULAAsJAhcOAQIeBQsCBQUGBAIMAwEDAAAAAAAA8D8DAwgfBHpNYXgDBAAACQM1DgEKAh4FCwgAAwMACCAIc2hhZG93VXYFCgQAAAkDOg4BCgIeBQsRAAUKBQoACCEEYmlhcwMEAAARAhUPAxACHQEDAAsCBAIFBggiA3JvdAMEAAAGAQYBCQIWDgEGAAYACgILBQsAAAMKAgsFCwQAAwMKAgsFCwgAAwMDAQMfhetRuB4JQAMDAQMAAAAAAAAAQAMDAAgjBGNvc1IDBAAACQMDDgECIgMDAAgkBHNpblIDBAAACQMCDgECIgMDAAglDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMJAyYOAQIFAQMDAAgmCG9mZlNjYWxlBQoEAAAGAQIcBQoCBgMFCgAOJwFpAQQAAAYVAQIAAAAAAQIFAQ8BAAAFBAgoBm9mZnNldAUKBAAABgEKEQIODwUMBQInAQUMEQAFCgImBQoFCgAGBAIoBQoJAygOAgYDBgECIwMKAigFCgAAAwMGAQIkAwoCKAUKBAADAwMGAAYBAiMDCgIoBQoEAAMDBgECJAMKAigFCgAAAwMDBQoFCggpBWRlcHRoAwQAAAoJAyIOAxECEg8KEAIdAQoGAAIgBQoCKAUKBQoBAwAAAAAAAAAAAwUMAAADAAaDAgwDCwQGBwYDAh8DAiEDAwIpAwICAiUDAQMAAAAAAAAAAAMDAwAAAAsCAgIFAwgqBWRlcHRoAwQAAAoJAyEOAhECEg8KEAIdAQoCIAUKBQwAAAMACCsFZGVsdGEDBAAABgMJAxUOAgQGAAIqAwIhAwMDAh8DAwIfAwMABgQCDAMJAzUOAQkDCQ4BBgECAwMCKwMDAwMDAAUCCCwFZGVwdGgDBAAACgkDIQ4CEQISDwoQAh0BCgIgBQoFDAAAAwAGgwIMAwsGBwYDAh8DAiEDAwIsAwIBAwAAAAAAAPA/AwEDAAAAAAAAAAADAwMAAAAAAAAAAAAAAAALAhECBQIGBAIPBQwJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDBUGdW5yb2xsAA4tAWMBBAAABhUBAgAAAAABAhABDwEAAAUCCC4Jc2hhZG93UG9zBQsEAAAGAQILBQsRAhMPCBACLQEIBQsACwkCFw4BAi4FCwIFAQYECgIPBQySAAULChECFA8FDBACLQEFDJIABQsFCwAAAAAAAAAAAAYEAgwDCQM1DgECDAMDAwYEAg0DAgwDAwA";
h3d_shader_ColorAdd.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d_shader_ColorKey.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d_shader_ColorMatrix.SRC = "HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgEAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADB2VuYWJsZWQCAgABAAAAAAAECGZyYWdtZW50DgYAAAEBBAAABQELAgMCBgQCAQUMCQMqDgIKBAYBCQMqDgIKAgEFDJIABQsBAwAAAAAAAPA/AwUMAgIHBQwFDJIABQsKBAYBAgEFDAICBwUMBQwMAAMFDAUMAAAA";
h3d_shader_GenTexture.SRC = "HXSLFWgzZC5zaGFkZXIuR2VuVGV4dHVyZQoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEbW9kZQECAAEAAAAAAAsFY29sb3IFDAIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFARMEAgoBAQEBAQIAAAAAAQUBBgQCCAUMCwYHCQMbDgEKAgYFDBEABQoDAQMAAAAAAADwPwMCCQMqDgEBAwAAAAAAAAAAAwUMAgsFDAUMBQwAAAAA";
h3d_shader_LineShader.SRC = "HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d_shader_MinMaxShader.SRC = "HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA";
h3d_shader_CubeMinMaxShader.SRC = "HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA";
h3d_shader_NormalMap.SRC = "HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA";
h3d_shader_PointShadow.SRC = "HXSLFmgzZC5zaGFkZXIuUG9pbnRTaGFkb3cOAQZlbmFibGUCAgABAAAAAAACB1VTRV9FU00CAgABAAAAAAADC3NoYWRvd1Bvd2VyAwIAAAQHVVNFX1BDRgICAAEAAAAAAAUKcGNmUXVhbGl0eQECAAEAAAAAAAYIcGNmU2NhbGUDAgAABwlzaGFkb3dNYXAMAgAACAhsaWdodFBvcwULAgAACQpzaGFkb3dCaWFzAwIAAAoEekZhcgMCAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwGc2hhZG93AwQAAA0LcG9pbnRTaGFkb3cDBAAADghmcmFnbWVudA4GAAABAQ4AAAUCCwIBAgUBCwIEAgUFBgQCDAMBAwAAAAAAAPA/AwMIDwpwb3NUb0xpZ2h0BQsEAAAGAwoCCwULkgAFCwIIBQsFCwAIEANkaXIFCwQAAAkDHw4BCgIPBQuSAAULBQsACBEEek1heAMEAAAJAxsOAQIPBQsDAAsGCQIKAwIRAwIGBAIMAwEDAAAAAAAA8D8DAwUGCBILc2FtcGxlQ291bnQBBAAAAQIAAAAAAQATBAIFAQEDAQECAQAAAAEFAQYEAhIBAQIBAAAAAQEAAQECAgAAAAEFAQYEAhIBAQICAAAAAQEAAQECAwAAAAEFAQYEAhIBAQIEAAAAAQEAAAAIEwxzYW1wbGVQZXJEaW0BBAAABgAGAQISAQECAgAAAAEBAQIBAAAAAQEACBQLdG90YWxTYW1wbGUBBAAABgEGAQITAQITAQECEwEBAAgVDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMJAyYOAQIUAQMDAA4WAWkBBAAABhUHAwISAQEGAAISAQECAQAAAAEBDwEAAAUBDhcBagEEAAAGFQcDAhIBAQYAAhIBAQIBAAAAAQEPAQAABQEOGAFrAQQAAAYVBwMCEgEBBgACEgEBAgEAAAABAQ8BAAAFAwgZBm9mZnNldAULBAAABgEJAykOAwkDJg4BAhYBAwkDJg4BAhcBAwkDJg4BAhgBAwULAgYDBQsACBoFZGVwdGgDBAAABgEKCQMiDgMCBwwGAAIQBQsCGQULBQsBAwAAAAAAAAAAAwUMAAADAgoDAwALBgcGAwIRAwIJAwMCGgMCBoMCDAMCFQMDAAAAAAAAAAAAAAALAgICBQYIGwpwb3NUb0xpZ2h0BQsEAAAGAwoCCwULkgAFCwIIBQsFCwAIHANkaXIFCwQAAAkDHw4BCgIbBQuSAAULBQsACB0FZGVwdGgDBAAABgEKCQMiDgMCBwwCHAULAQMAAAAAAAAAAAMFDAAAAwIKAwMACB4Eek1heAMEAAAJAxsOAQIbBQsDAAgfBWRlbHRhAwQAAAYDCQMVDgIEBgACHQMCCQMDAwIeAwMCHgMDAAYEAgwDCQM1DgEJAwkOAQYBAgMDAh8DAwMDAwAFBQggCnBvc1RvTGlnaHQFCwQAAAYDCgILBQuSAAULAggFCwULAAghA2RpcgULBAAACQMfDgEKAiAFC5IABQsFCwAIIgVkZXB0aAMEAAAGAQoJAyIOAwIHDAIhBQsBAwAAAAAAAAAAAwUMAAADAgoDAwAIIwR6TWF4AwQAAAkDGw4BAiAFCwMABgQCDAMLBgcGAwIjAwIJAwMCIgMCAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwMDAAAAAAAABgQCDQMCDAMDAA";
h3d_shader_Shadow.SRC = "HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsEAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d_shader_SignedDistanceField.SRC = "HXSLHmgzZC5zaGFkZXIuU2lnbmVkRGlzdGFuY2VGaWVsZA8BBWlucHV0DQEDAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEABAVjb2xvcgUMAQEAAQAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAIBHRpbWUDAAAACQ5zcHJpdGVQb3NpdGlvbgUMBAAAChBhYnNvbHV0ZVBvc2l0aW9uBQwEAAALCnBpeGVsQ29sb3IFDAQAAAwMdGV4dHVyZUNvbG9yBQwEAAANDGNhbGN1bGF0ZWRVVgUKAwAADg5vdXRwdXRQb3NpdGlvbgUMBAAADwdjaGFubmVsAQIAAQAAAAAAEA1hdXRvU21vb3RoaW5nAgIAAQAAAAAAEQthbHBoYUN1dG9mZgMCAAASCXNtb290aGluZwMCAAATBm1lZGlhbg4GAAAUCGZyYWdtZW50DgYAAAIDEwMVAXIDBAAAFgFnAwQAABcBYgMEAAADBQENCQMWDgIJAxUOAgIVAwIWAwMJAxUOAgkDFg4CAhUDAhYDAwIXAwMDAAABFAAABQUIGA10ZXh0dXJlU2FtcGxlBQwEAAACDAUMAAgZCGRpc3RhbmNlAwQAAAAABgQCGQMLBgUCDwEBAgAAAAABAgoCGAUMAAADCwYFAg8BAQIBAAAAAQIKAhgFDAQAAwsGBQIPAQECAgAAAAECCgIYBQwIAAMLBgUCDwEBAgMAAAABAgoCGAUMDAADCQITDgMKAhgFDAAAAwoCGAUMBAADCgIYBQwIAAMDAwMDAwMIGglzbW9vdGhWYWwDBAAACwIQAgkDDw4BBgEJAz4OAQIZAwMBAwAAAAAAAOA/AwMDAhIDAwAGBAIMBQwJAyoOBAEDAAAAAAAA8D8DAQMAAAAAAADwPwMBAwAAAAAAAPA/AwkDGg4DBgMCEQMCGgMDBgACEQMCGgMDAhkDAwUMBQwA";
h3d_shader_SkinBase.SRC = "HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UGARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFEWZvdXJCb25lc0J5VmVydGV4AgIAAQAAAAAABg1ib25lc01hdHJpeGVzDwgEAgABCAA";
h3d_shader_Skin.SRC = "HXSLD2gzZC5zaGFkZXIuU2tpbgkBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAURZm91ckJvbmVzQnlWZXJ0ZXgCAgABAAAAAAAGDWJvbmVzTWF0cml4ZXMPCAQCAAEIBwVpbnB1dA0BBAgIcG9zaXRpb24FCwEHAAkGbm9ybWFsBQsBBwAKB3dlaWdodHMFCwEHAAsHaW5kZXhlcwkEAAAAAQcAAQAADBJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAQAAA0GdmVydGV4DgYAAAEADQAABQQGBAICBQsGAAYABgEEBgECAQULEQIGDwgECQMlDgEKAgsJBAAAAAAAAwEIBQsFCwoCCgULAAADBQsGAQQGAQIBBQsRAgYPCAQJAyUOAQoCCwkEAAAABAADAQgFCwULCgIKBQsEAAMFCwULBgEEBgECAQULEQIGDwgECQMlDgEKAgsJBAAAAAgAAwEIBQsFCwoCCgULCAADBQsFCwULBgQCAwULBgAGAAYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgsJBAAAAAAAAwEIBgULBQsKAgoFCwAAAwULBgEEBgECCQULCQMyDgERAgYPCAQJAyUOAQoCCwkEAAAABAADAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgsJBAAAAAgAAwEIBgULBQsKAgoFCwgAAwULBQsFCwsCBQIFAwgOAnc0AwQAAAYDAQMAAAAAAADwPwMEBgAGAAoCCgULAAADCgIKBQsEAAMDCgIKBQsIAAMDAwMABoACAgULBgEEBgECAQULEQIGDwgECQMlDgEKAgsJBAAAAAwAAwEIBQsFCwIOAwULBQsGgAIDBQsGAQQGAQIJBQsJAzIOARECBg8IBAkDJQ4BCgILCQQAAAAIAAMBCAYFCwULAg4DBQsFCwAAAAYEAgMFCwkDHw4BAgMFCwULBQsA";
h3d_shader_SkinTangent.SRC = "HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQJARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFEWZvdXJCb25lc0J5VmVydGV4AgIAAQAAAAAABg1ib25lc01hdHJpeGVzDwgEAgABCAcFaW5wdXQNAQUICHBvc2l0aW9uBQsBBwAJBm5vcm1hbAULAQcACgd0YW5nZW50BQsBBwALB3dlaWdodHMFCwEHAAwHaW5kZXhlcwkEAAAAAQcAAQAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAQAAA4GdmVydGV4DgYAAAEADgAABQYGBAICBQsGAAYABgEEBgECAQULEQIGDwgECQMlDgEKAgwJBAAAAAAAAwEIBQsFCwoCCwULAAADBQsGAQQGAQIBBQsRAgYPCAQJAyUOAQoCDAkEAAAABAADAQgFCwULCgILBQsEAAMFCwULBgEEBgECAQULEQIGDwgECQMlDgEKAgwJBAAAAAgAAwEIBQsFCwoCCwULCAADBQsFCwULBgQCAwULBgAGAAYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAAAAwEIBgULBQsKAgsFCwAAAwULBgEEBgECCQULCQMyDgERAgYPCAQJAyUOAQoCDAkEAAAABAADAQgGBQsFCwoCCwULBAADBQsFCwYBBAYBAgkFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAgAAwEIBgULBQsKAgsFCwgAAwULBQsFCwYECgINBQySAAULBgAGAAYBBAYBCgIKBQuSAAULCQMyDgERAgYPCAQJAyUOAQoCDAkEAAAAAAADAQgGBQsFCwoCCwULAAADBQsGAQQGAQoCCgULkgAFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAQAAwEIBgULBQsKAgsFCwQAAwULBQsGAQQGAQoCCgULkgAFCwkDMg4BEQIGDwgECQMlDgEKAgwJBAAAAAgAAwEIBgULBQsKAgsFCwgAAwULBQsFCwsCBQIFBAgPAnc0AwQAAAYDAQMAAAAAAADwPwMEBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwMABoACAgULBgEEBgECAQULEQIGDwgECQMlDgEKAgwJBAAAAAwAAwEIBQsFCwIPAwULBQsGgAIDBQsGAQQGAQIJBQsJAzIOARECBg8IBAkDJQ4BCgIMCQQAAAAIAAMBCAYFCwULAg8DBQsFCwaACgINBQySAAULBgEEBgEKAgoFC5IABQsJAzIOARECBg8IBAkDJQ4BCgIMCQQAAAAMAAMBCAYFCwULAg8DBQsFCwAAAAYEAgMFCwkDHw4BAgMFCwULBQsGBAoCDQUMkgAFCwkDHw4BCgINBQySAAULBQsFCwA";
h3d_shader_SpecularTexture.SRC = "HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA";
h3d_shader_SpotShadow.SRC = "HXSLFWgzZC5zaGFkZXIuU3BvdFNoYWRvdxEBBmVuYWJsZQICAAEAAAAAAAIHVVNFX0VTTQICAAEAAAAAAAMLc2hhZG93UG93ZXIDAgAABAdVU0VfUENGAgIAAQAAAAAABQpwY2ZRdWFsaXR5AQIAAQAAAAAABghwY2ZTY2FsZQMCAAAHCXNoYWRvd1JlcwUKAgAACAlzaGFkb3dNYXARAQIAAAkKc2hhZG93UHJvagcCAAAKCnNoYWRvd0JpYXMDAgAACxN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAMBnNoYWRvdwMEAAANDnBvaXNzb25EaXNrTG93DwUMAAQCAAAOD3BvaXNzb25EaXNrSGlnaA8FDAAMAgAADxNwb2lzc29uRGlza1ZlcnlIaWdoDwUMAEACAAAQBHJhbmQOBgAAEQhmcmFnbWVudA4GAAACAxABEgF2AwQAAAMFAggTAmRwAwQAAAkDHQ4CCQMqDgECEgMFDAkDKg4EAQNfKcsQx/opQAMBA/T91HjpjlNAAwEDokW28/2URkADAQNQjZduEqtXQAMFDAMADQkDEw4BBgEJAwIOAQITAwMBA1D8GHPRXeVAAwMDAAABEQAABQELAgECBQELAgQCBQgGBAIMAwEDAAAAAAAA8D8DAwgUCXRleGVsU2l6ZQUKBAAABgIBAwAAAAAAAPA/AwIHBQoFCgAIFQlzaGFkb3dQb3MFDAQAAAYBCQMqDgICCwULAQMAAAAAAADwPwMFDAIJBwUMAAYECgIVBQySAAULBgIKAhUFDJIABQsKAhUFDAwAAwULBQsIFghzaGFkb3dVdgUKBAAACQM6DgEKAhUFDBEABQoFCgAIFwR6TWF4AwQAAAoCFQUMCAADAAgYA3JvdAMEAAAGAQYBCQIQDgEGAAYACgILBQsAAAMKAgsFCwQAAwMKAgsFCwgAAwMDAQMfhetRuB4JQAMDAQMAAAAAAAAAQAMDABMEAgUBAQMBAQIBAAAAAQUCCBkOc2FtcGxlU3RyZW5ndGgDBAAABgIBAwAAAAAAAPA/AwEDAAAAAAAAEEADAwAOGgFpAQQAAAYVAQIAAAAAAQECBAAAAAEPAQAABQQIGwZvZmZzZXQFCgQAAAYBBgEKEQINDwUMAAQCGgEFDBEABQoCFAUKBQoCBgMFCgAGBAIbBQoJAygOAgYDBgEJAwMOAQIYAwMKAhsFCgAAAwMGAQkDAg4BAhgDAwoCGwUKBAADAwMGAAYBCQMDDgECGAMDCgIbBQoEAAMDBgEJAwIOAQIYAwMKAhsFCgAAAwMDBQoFCggcBWRlcHRoAwQAAAkDQA4DAggRAQYAAhYFCgIbBQoFCgEDAAAAAAAAAAADAwALBgcGAwIXAwIKAwMCHAMCBoMCDAMCGQMDAAAAAAABAQICAAAAAQUCCB0Oc2FtcGxlU3RyZW5ndGgDBAAABgIBAwAAAAAAAPA/AwEDAAAAAAAAKEADAwAOHgFpAQQAAAYVAQIAAAAAAQECDAAAAAEPAQAABQQIHwZvZmZzZXQFCgQAAAYBBgEKEQIODwUMAAwCHgEFDBEABQoCFAUKBQoCBgMFCgAGBAIfBQoJAygOAgYDBgEJAwMOAQIYAwMKAh8FCgAAAwMGAQkDAg4BAhgDAwoCHwUKBAADAwMGAAYBCQMDDgECGAMDCgIfBQoEAAMDBgEJAwIOAQIYAwMKAh8FCgAAAwMDBQoFCgggBWRlcHRoAwQAAAkDQA4DAggRAQYAAhYFCgIfBQoFCgEDAAAAAAAAAAADAwALBgcGAwIXAwIKAwMCIAMCBoMCDAMCHQMDAAAAAAABAQIDAAAAAQUCCCEOc2FtcGxlU3RyZW5ndGgDBAAABgIBAwAAAAAAAPA/AwEDAAAAAAAAUEADAwAOIgFpAQQAAAYVAQIAAAAAAQECQAAAAAEPAQAABQQIIwZvZmZzZXQFCgQAAAYBBgEKEQIODwUMAAwCIgEFDBEABQoCFAUKBQoCBgMFCgAGBAIjBQoJAygOAgYDBgEJAwMOAQIYAwMKAiMFCgAAAwMGAQkDAg4BAhgDAwoCIwUKBAADAwMGAAYBCQMDDgECGAMDCgIjBQoEAAMDBgEJAwIOAQIYAwMKAiMFCgAAAwMDBQoFCggkBWRlcHRoAwQAAAkDQA4DAggRAQYAAhYFCgIjBQoFCgEDAAAAAAAAAAADAwALBgcGAwIXAwIKAwMCJAMCBoMCDAMCIQMDAAAAAAAAAAALAgICBQYIJQlzaGFkb3dQb3MFDAQAAAYBCQMqDgICCwULAQMAAAAAAADwPwMFDAIJBwUMAAgmD3NoYWRvd1NjcmVlblBvcwULBAAABgIKAiUFDJIABQsKAiUFDAwAAwULAAgnBWRlcHRoAwQAAAkDPw4CAggRAQkDOg4BCgImBQsRAAUKBQoDAAgoBHpNYXgDBAAACQM1DgEKAiYFCwgAAwMACCkFZGVsdGEDBAAABgMJAxUOAgQGAAInAwIKAwMDAigDAwIoAwMABgQCDAMJAzUOAQkDCQ4BBgECAwMCKQMDAwMDAAUFCCoJc2hhZG93UG9zBQwEAAAGAQkDKg4CAgsFCwEDAAAAAAAA8D8DBQwCCQcFDAAGBAoCKgUMkgAFCwYCCgIqBQySAAULCgIqBQwMAAMFCwULCCsIc2hhZG93VXYFCgQAAAkDOg4BCgIqBQwRAAUKBQoACCwFZGVwdGgDBAAACQM/DgICCBEBCgIrBQoRAAUKAwAGBAIMAwsGBwYDCgIqBQwIAAMCCgMDAiwDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAA";
h3d_shader_Texture.SRC = "HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA";
h3d_shader_UVDelta.SRC = "HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d_shader_VertexColorAlpha.SRC = "HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d_shader_VolumeDecal.SRC = "HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA";
h3d_shader_pbr_BDRF.SRC = "HXSLE2gzZC5zaGFkZXIucGJyLkJEUkYGARdnZXRBbmlzb3Ryb3BpY1JvdWdobmVzcw4GAAACHXNtaXRoR0dYQ29ycmVsYXRlZEFuaXNvdHJvcGljDgYAAAMgbm9ybWFsRGlzdHJpYnV0aW9uR0dYQW5pc290cm9waWMOBgAABBVub3JtYWxEaXN0cmlidXRpb25HR1gOBgAABRJnZW9tZXRyeVNjaGxpY2tHR1gOBgAABg5mcmVzbmVsU2NobGljaw4GAAAGAwECBwlyb3VnaG5lc3MDBAAACAphbmlzb3Ryb3B5AwQAAAUKBQMICQJhdAMEAAAJAxYOAgYBAgcDBAYAAQMAAAAAAADwPwMCCAMDAwMBA/yp8dJNYlA/AwMACAoCYWIDBAAACQMWDgIGAQIHAwQGAwEDAAAAAAAA8D8DAggDAwMDAQP8qfHSTWJQPwMDAA0JAygOAgIJAwIKAwUKAAADAggLAmF0AwQAAAwCYWIDBAAADQNUZFYDBAAADgNCZFYDBAAADwNUZEwDBAAAEANCZEwDBAAAEQNOZFYDBAAAEgNOZEwDBAAAAwUECBMHbGFtYmRhVgMEAAAGAQISAwkDGw4BCQMpDgMGAQILAwINAwMGAQIMAwIOAwMCEQMFCwMDAAgUB2xhbWJkYUwDBAAABgECEQMJAxsOAQkDKQ4DBgECCwMCDwMDBgECDAMCEAMDAhIDBQsDAwAIFQF2AwQAAAYCAQMAAAAAAADgPwMEBgACEwMCFAMDAwMADQkDNQ4BAhUDAwAAAwMHFgJhdAMEAAAXAmFiAwQAABgDTmRIAwQAABkDVGRIAwQAABoDQmRIAwQAABsJcm91Z2huZXNzAwQAABwKYW5pc290cm9weQMEAAADBQUIHQJhMgMEAAAGAQIWAwIXAwMACB4BdgULBAAACQMpDgMGAQIXAwIZAwMGAQIWAwIaAwMGAQIdAwIYAwMFCwAIHwJ2MgMEAAAJAx0OAgIeBQsCHgULAwAIIAJ3MgMEAAAGAgIdAwIfAwMADQYBBgEGAQIdAwIgAwMCIAMDBAYCAQMAAAAAAADwPwMBAxgtRFT7IQlAAwMDAwAAAwQCIQNOZEgDBAAAIglyb3VnaG5lc3MDBAAAAwUECCMFYWxwaGEDBAAABgECIgMCIgMDAAgkBmFscGhhMgMEAAAGAQIjAwIjAwMACCUFZGVub20DBAAABgAGAQYBAiEDAiEDAwQGAwIkAwEDAAAAAAAA8D8DAwMDAQMAAAAAAADwPwMDAA0GAgIkAwQGAQYBAQMYLURU+yEJQAMCJQMDAiUDAwMDAAADBQMmA05kVgMEAAAnA05kTAMEAAAoCXJvdWdobmVzcwMEAAADBQQIKQFrAwQAAAQGAAIoAwEDAAAAAAAA8D8DAwMABoECKQMCKQMDBoECKQMBAwAAAAAAAMA/AwMNBgEGAQQGAgEDAAAAAAAA8D8DBAYABgECJgMEBgMBAwAAAAAAAPA/AwIpAwMDAwIpAwMDAwMEBgIBAwAAAAAAAPA/AwQGAAYBAicDBAYDAQMAAAAAAADwPwMCKQMDAwMCKQMDAwMDAwEDAAAAAAAA0D8DAwAAAwYCKgNWZEgDBAAAKwJGMAULBAAABQsFAQ0GAAIrBQsGAQQGAwEDAAAAAAAA8D8DAisFCwULBQsJAwsOAQYBBAYDBgEBA7lwICQLOBbAAwIqAwMBAwLxun7B7htAAwMDAioDAwMFCwULAAA";
h3d_shader_pbr_DefaultForward.SRC = "";
h3d_shader_pbr_LightEvaluation.SRC = "HXSLHmgzZC5zaGFkZXIucGJyLkxpZ2h0RXZhbHVhdGlvbgIBE3BvaW50TGlnaHRJbnRlbnNpdHkOBgAAAhJzcG90TGlnaHRJbnRlbnNpdHkOBgAAAgMBAwMFZGVsdGEFCwQAAAQEc2l6ZQMEAAAFCWludlJhbmdlNAMEAAADBQYIBgRkaXN0AwQAAAkDHQ4CAgMFCwIDBQsDAAgHB2ZhbGxvZmYDBAAACQM1DgEGAwEDAAAAAAAA8D8DBgEGAQIGAwIGAwMCBQMDAwMACwYHAgQDAQMAAAAAAAAAAAMCBQIGBAIGAwkDFg4CBAYDCQMNDgECBgMDAgQDAwMBAwAAAAAAAAAAAwMDBoECBgMCBgMDAAAABoECBwMCBwMDBoECBwMGAgEDAAAAAAAA8D8DBAYAAgYDAQMAAAAAAADwPwMDAwMDDQIHAwAAAwIGCAVkZWx0YQULBAAACQhsaWdodERpcgULBAAACgVyYW5nZQMEAAALCWludlJhbmdlNAMEAAAMDGFuZ2xlRmFsbE9mZgMEAAANBWFuZ2xlAwQAAAUKBQkIDgRkaXN0AwQAAAkDHQ4CAggFCwIIBQsDAAgPB2ZhbGxvZmYDBAAACQM1DgEGAwEDAAAAAAAA8D8DBgEGAQIOAwIOAwMCCwMDAwMACwYHAgoDAQMAAAAAAAAAAAMCBQIGBAIOAwkDFg4CBAYDCQMNDgECDgMDAgoDAwMBAwAAAAAAAAAAAwMDBoECDgMCDgMDAAAABoECDwMCDwMDBoECDwMGAgEDAAAAAAAA8D8DBAYAAg4DAQMAAAAAAADwPwMDAwMDCBAFdGhldGEDBAAACQMdDgIJAx8OAQIIBQsFCwcDAgkFCwULAwAIEQdlcHNpbG9uAwQAAAYDAgwDAg0DAwAIEgxhbmdsZUZhbGxvZmYDBAAACQMXDgMGAgQGAwIQAwINAwMDAhEDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMDAA0JAygOAgIPAwISAwUKAAA";
h3d_shader_pbr_Light.SRC = "HXSLFGgzZC5zaGFkZXIucGJyLkxpZ2h0CgERcGJyTGlnaHREaXJlY3Rpb24FCwQAAAIZcGJyU3BlY3VsYXJMaWdodERpcmVjdGlvbgULBAAAAw1wYnJMaWdodENvbG9yBQsEAAAEEnBick9jY2x1c2lvbkZhY3RvcgMEAAAFE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAYJb2NjbHVzaW9uAwQAAAcKbGlnaHRDb2xvcgULAgAACA9vY2NsdXNpb25GYWN0b3IDAgAACRNwb2ludExpZ2h0SW50ZW5zaXR5DgYAAAoSc3BvdExpZ2h0SW50ZW5zaXR5DgYAAAIDCQMLBWRlbHRhBQsEAAAMBHNpemUDBAAADQlpbnZSYW5nZTQDBAAAAwUGCA4EZGlzdAMEAAAJAx0OAgILBQsCCwULAwAIDwdmYWxsb2ZmAwQAAAkDNQ4BBgMBAwAAAAAAAPA/AwYBBgECDgMCDgMDAg0DAwMDAAsGBwIMAwEDAAAAAAAAAAADAgUCBgQCDgMJAxYOAgQGAwkDDQ4BAg4DAwIMAwMDAQMAAAAAAAAAAAMDAwaBAg4DAg4DAwAAAAaBAg8DAg8DAwaBAg8DBgIBAwAAAAAAAPA/AwQGAAIOAwEDAAAAAAAA8D8DAwMDAw0CDwMAAAMKBhAFZGVsdGEFCwQAABEIbGlnaHREaXIFCwQAABIFcmFuZ2UDBAAAEwlpbnZSYW5nZTQDBAAAFAxhbmdsZUZhbGxPZmYDBAAAFQVhbmdsZQMEAAAFCgUJCBYEZGlzdAMEAAAJAx0OAgIQBQsCEAULAwAIFwdmYWxsb2ZmAwQAAAkDNQ4BBgMBAwAAAAAAAPA/AwYBBgECFgMCFgMDAhMDAwMDAAsGBwISAwEDAAAAAAAAAAADAgUCBgQCFgMJAxYOAgQGAwkDDQ4BAhYDAwISAwMDAQMAAAAAAAAAAAMDAwaBAhYDAhYDAwAAAAaBAhcDAhcDAwaBAhcDBgIBAwAAAAAAAPA/AwQGAAIWAwEDAAAAAAAA8D8DAwMDAwgYBXRoZXRhAwQAAAkDHQ4CCQMfDgECEAULBQsHAwIRBQsFCwMACBkHZXBzaWxvbgMEAAAGAwIUAwIVAwMACBoMYW5nbGVGYWxsb2ZmAwQAAAkDFw4DBgIEBgMCGAMCFQMDAwIZAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DAwANCQMoDgICFwMCGgMFCgAA";
h3d_shader_pbr_SpotLight.SRC = "HXSLGGgzZC5zaGFkZXIucGJyLlNwb3RMaWdodBQBEXBickxpZ2h0RGlyZWN0aW9uBQsEAAACGXBiclNwZWN1bGFyTGlnaHREaXJlY3Rpb24FCwQAAAMNcGJyTGlnaHRDb2xvcgULBAAABBJwYnJPY2NsdXNpb25GYWN0b3IDBAAABRN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAGCW9jY2x1c2lvbgMEAAAHCmxpZ2h0Q29sb3IFCwIAAAgPb2NjbHVzaW9uRmFjdG9yAwIAAAkHc3BvdERpcgULAgAACghsaWdodFBvcwULAgAACwVhbmdsZQMCAAAMB2ZhbGxPZmYDAgAADQ5pbnZMaWdodFJhbmdlNAMCAAAOBXJhbmdlAwIAAA8JbGlnaHRQcm9qBwIAABAJdXNlQ29va2llAgIAAQAAAAAAEQljb29raWVUZXgKAgAAEhNwb2ludExpZ2h0SW50ZW5zaXR5DgYAABMSc3BvdExpZ2h0SW50ZW5zaXR5DgYAABQIZnJhZ21lbnQOBgAAAwMSAxUFZGVsdGEFCwQAABYEc2l6ZQMEAAAXCWludlJhbmdlNAMEAAADBQYIGARkaXN0AwQAAAkDHQ4CAhUFCwIVBQsDAAgZB2ZhbGxvZmYDBAAACQM1DgEGAwEDAAAAAAAA8D8DBgEGAQIYAwIYAwMCFwMDAwMACwYHAhYDAQMAAAAAAAAAAAMCBQIGBAIYAwkDFg4CBAYDCQMNDgECGAMDAhYDAwMBAwAAAAAAAAAAAwMDBoECGAMCGAMDAAAABoECGQMCGQMDBoECGQMGAgEDAAAAAAAA8D8DBAYAAhgDAQMAAAAAAADwPwMDAwMDDQIZAwAAAxMGGgVkZWx0YQULBAAAGwhsaWdodERpcgULBAAAHAVyYW5nZQMEAAAdCWludlJhbmdlNAMEAAAeDGFuZ2xlRmFsbE9mZgMEAAAfBWFuZ2xlAwQAAAUKBQkIIARkaXN0AwQAAAkDHQ4CAhoFCwIaBQsDAAghB2ZhbGxvZmYDBAAACQM1DgEGAwEDAAAAAAAA8D8DBgEGAQIgAwIgAwMCHQMDAwMACwYHAhwDAQMAAAAAAAAAAAMCBQIGBAIgAwkDFg4CBAYDCQMNDgECIAMDAhwDAwMBAwAAAAAAAAAAAwMDBoECIAMCIAMDAAAABoECIQMCIQMDBoECIQMGAgEDAAAAAAAA8D8DBAYAAiADAQMAAAAAAADwPwMDAwMDCCIFdGhldGEDBAAACQMdDgIJAx8OAQIaBQsFCwcDAhsFCwULAwAIIwdlcHNpbG9uAwQAAAYDAh4DAh8DAwAIJAxhbmdsZUZhbGxvZmYDBAAACQMXDgMGAgQGAwIiAwIfAwMDAiMDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMDAA0JAygOAgIhAwIkAwUKAAABFAAABQgIJQVkZWx0YQULBAAABgMCCgULAgUFCwULAAYEAgEFCwkDHw4BAiUFCwULBQsIJgtmYWxsT2ZmSW5mbwUKBAAACQITDgYCJQULAgkFCwIOAwINAwIMAwILAwUKAAgnB2ZhbGxPZmYDBAAACgImBQoAAAMACCgQZmFsbE9mZkluZm9BbmdsZQMEAAAKAiYFCgQAAwAGBAIDBQsGAQInAwIHBQsFCwULBgQCBAMCCAMDCwIQAgUFCCkNcG9zTGlnaHRTcGFjZQUMBAAABgEJAyoOAgIFBQsBAwAAAAAAAPA/AwUMAg8HBQwACCoFcG9zVVYFCgQAAAkDOg4BBgIKAikFDBEABQoKAikFDAwAAwUKBQoACwYPBg8GDwYHCgIqBQoAAAMBAwAAAAAAAPA/AwIGCQoCKgUKAAADAQMAAAAAAAAAAAMCAgYHCgIqBQoEAAMBAwAAAAAAAPA/AwICBgkKAioFCgQAAwEDAAAAAAAAAAADAgIMAAAACCsGY29va2llBQwEAAAKCQMhDgICEQoCKgUKBQyTAwUMAAaBAgMFCwYBCgIrBQySAAULCgIrBQwMAAMFCwULAAaBAgMFCwIoAwULAAA";
h3d_shader_pbr_PointLight.SRC = "HXSLGWgzZC5zaGFkZXIucGJyLlBvaW50TGlnaHQOARFwYnJMaWdodERpcmVjdGlvbgULBAAAAhlwYnJTcGVjdWxhckxpZ2h0RGlyZWN0aW9uBQsEAAADDXBickxpZ2h0Q29sb3IFCwQAAAQScGJyT2NjbHVzaW9uRmFjdG9yAwQAAAUTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAABglvY2NsdXNpb24DBAAABwpsaWdodENvbG9yBQsCAAAID29jY2x1c2lvbkZhY3RvcgMCAAAJCGxpZ2h0UG9zBQsCAAAKDmludkxpZ2h0UmFuZ2U0AwIAAAsJcG9pbnRTaXplAwIAAAwTcG9pbnRMaWdodEludGVuc2l0eQ4GAAANEnNwb3RMaWdodEludGVuc2l0eQ4GAAAOCGZyYWdtZW50DgYAAAMDDAMPBWRlbHRhBQsEAAAQBHNpemUDBAAAEQlpbnZSYW5nZTQDBAAAAwUGCBIEZGlzdAMEAAAJAx0OAgIPBQsCDwULAwAIEwdmYWxsb2ZmAwQAAAkDNQ4BBgMBAwAAAAAAAPA/AwYBBgECEgMCEgMDAhEDAwMDAAsGBwIQAwEDAAAAAAAAAAADAgUCBgQCEgMJAxYOAgQGAwkDDQ4BAhIDAwIQAwMDAQMAAAAAAAAAAAMDAwaBAhIDAhIDAwAAAAaBAhMDAhMDAwaBAhMDBgIBAwAAAAAAAPA/AwQGAAISAwEDAAAAAAAA8D8DAwMDAw0CEwMAAAMNBhQFZGVsdGEFCwQAABUIbGlnaHREaXIFCwQAABYFcmFuZ2UDBAAAFwlpbnZSYW5nZTQDBAAAGAxhbmdsZUZhbGxPZmYDBAAAGQVhbmdsZQMEAAAFCgUJCBoEZGlzdAMEAAAJAx0OAgIUBQsCFAULAwAIGwdmYWxsb2ZmAwQAAAkDNQ4BBgMBAwAAAAAAAPA/AwYBBgECGgMCGgMDAhcDAwMDAAsGBwIWAwEDAAAAAAAAAAADAgUCBgQCGgMJAxYOAgQGAwkDDQ4BAhoDAwIWAwMDAQMAAAAAAAAAAAMDAwaBAhoDAhoDAwAAAAaBAhsDAhsDAwaBAhsDBgIBAwAAAAAAAPA/AwQGAAIaAwEDAAAAAAAA8D8DAwMDAwgcBXRoZXRhAwQAAAkDHQ4CCQMfDgECFAULBQsHAwIVBQsFCwMACB0HZXBzaWxvbgMEAAAGAwIYAwIZAwMACB4MYW5nbGVGYWxsb2ZmAwQAAAkDFw4DBgIEBgMCHAMCGQMDAwIdAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DAwANCQMoDgICGwMCHgMFCgAAAQ4AAAUECB8FZGVsdGEFCwQAAAYDAgkFCwIFBQsFCwAGBAIBBQsJAx8OAQIfBQsFCwULBgQCAwULBgEJAgwOAwIfBQsCCwMCCgMDAgcFCwULBQsGBAIEAwIIAwMA";
h3d_shader_pbr_DirLight.SRC = "HXSLF2gzZC5zaGFkZXIucGJyLkRpckxpZ2h0DAERcGJyTGlnaHREaXJlY3Rpb24FCwQAAAIZcGJyU3BlY3VsYXJMaWdodERpcmVjdGlvbgULBAAAAw1wYnJMaWdodENvbG9yBQsEAAAEEnBick9jY2x1c2lvbkZhY3RvcgMEAAAFE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAYJb2NjbHVzaW9uAwQAAAcKbGlnaHRDb2xvcgULAgAACA9vY2NsdXNpb25GYWN0b3IDAgAACQhsaWdodERpcgULAgAAChNwb2ludExpZ2h0SW50ZW5zaXR5DgYAAAsSc3BvdExpZ2h0SW50ZW5zaXR5DgYAAAwIZnJhZ21lbnQOBgAAAwMKAw0FZGVsdGEFCwQAAA4Ec2l6ZQMEAAAPCWludlJhbmdlNAMEAAADBQYIEARkaXN0AwQAAAkDHQ4CAg0FCwINBQsDAAgRB2ZhbGxvZmYDBAAACQM1DgEGAwEDAAAAAAAA8D8DBgEGAQIQAwIQAwMCDwMDAwMACwYHAg4DAQMAAAAAAAAAAAMCBQIGBAIQAwkDFg4CBAYDCQMNDgECEAMDAg4DAwMBAwAAAAAAAAAAAwMDBoECEAMCEAMDAAAABoECEQMCEQMDBoECEQMGAgEDAAAAAAAA8D8DBAYAAhADAQMAAAAAAADwPwMDAwMDDQIRAwAAAwsGEgVkZWx0YQULBAAAEwhsaWdodERpcgULBAAAFAVyYW5nZQMEAAAVCWludlJhbmdlNAMEAAAWDGFuZ2xlRmFsbE9mZgMEAAAXBWFuZ2xlAwQAAAUKBQkIGARkaXN0AwQAAAkDHQ4CAhIFCwISBQsDAAgZB2ZhbGxvZmYDBAAACQM1DgEGAwEDAAAAAAAA8D8DBgEGAQIYAwIYAwMCFQMDAwMACwYHAhQDAQMAAAAAAAAAAAMCBQIGBAIYAwkDFg4CBAYDCQMNDgECGAMDAhQDAwMBAwAAAAAAAAAAAwMDBoECGAMCGAMDAAAABoECGQMCGQMDBoECGQMGAgEDAAAAAAAA8D8DBAYAAhgDAQMAAAAAAADwPwMDAwMDCBoFdGhldGEDBAAACQMdDgIJAx8OAQISBQsFCwcDAhMFCwULAwAIGwdlcHNpbG9uAwQAAAYDAhYDAhcDAwAIHAxhbmdsZUZhbGxvZmYDBAAACQMXDgMGAgQGAwIaAwIXAwMDAhsDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMDAA0JAygOAgIZAwIcAwUKAAABDAAABQMGBAIBBQsCCQULBQsGBAIDBQsCBwULBQsGBAIEAwIIAwMA";
h3d_shader_pbr_Performance.SRC = "HXSLGmgzZC5zaGFkZXIucGJyLlBlcmZvcm1hbmNlBQEJbWF4TGlnaHRzAQIAAAIKcGl4ZWxDb2xvcgUMBAAAAw1wYnJMaWdodENvbG9yBQsEAAAEBnNoYWRvdwMEAAAFCGZyYWdtZW50DgYAAAEBBQAABQIIBgFkBQsEAAAJAykOAQYCAQMAAAAAAADwPwMJAyYOAQIBAQMDBQsABgQKAgIFDJIABQsGAAQLBgcECgICBQwAAAMDAQMAAAAAAAAAAAMCCQMpDgEBAwAAAAAAAAAAAwULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwQLBgcEBgAGAAoCAwULAAADCgIDBQsEAAMDCgIDBQsIAAMDAwEDAAAAAAAAAAADAgIGBQsJAykOAQEDAAAAAAAAAAADBQsFCwULBQsFCwA";
h3d_shader_pbr_CapsuleLight.SRC = "HXSLG2gzZC5zaGFkZXIucGJyLkNhcHN1bGVMaWdodBUBEXBickxpZ2h0RGlyZWN0aW9uBQsEAAACGXBiclNwZWN1bGFyTGlnaHREaXJlY3Rpb24FCwQAAAMNcGJyTGlnaHRDb2xvcgULBAAABBJwYnJPY2NsdXNpb25GYWN0b3IDBAAABRN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAGCW9jY2x1c2lvbgMEAAAHCmxpZ2h0Q29sb3IFCwIAAAgPb2NjbHVzaW9uRmFjdG9yAwIAAAkGbm9ybWFsBQsEAAAKCGxpZ2h0UG9zBQsCAAALBnJhZGl1cwMCAAAMCWludlJhbmdlNAMCAAANCmhhbGZMZW5ndGgDAgAADgRsZWZ0BQsCAAAPCnBpeGVsQ29sb3IFDAQAABAEdmlldwULBAAAERNwb2ludExpZ2h0SW50ZW5zaXR5DgYAABISc3BvdExpZ2h0SW50ZW5zaXR5DgYAABMSY2xvc2VzdFBvaW50T25MaW5lDgYAABQVY2xvc2VzdFBvaW50T25TZWdtZW50DgYAABUIZnJhZ21lbnQOBgAABQMRAxYFZGVsdGEFCwQAABcEc2l6ZQMEAAAYCWludlJhbmdlNAMEAAADBQYIGQRkaXN0AwQAAAkDHQ4CAhYFCwIWBQsDAAgaB2ZhbGxvZmYDBAAACQM1DgEGAwEDAAAAAAAA8D8DBgEGAQIZAwIZAwMCGAMDAwMACwYHAhcDAQMAAAAAAAAAAAMCBQIGBAIZAwkDFg4CBAYDCQMNDgECGQMDAhcDAwMBAwAAAAAAAAAAAwMDBoECGQMCGQMDAAAABoECGgMCGgMDBoECGgMGAgEDAAAAAAAA8D8DBAYAAhkDAQMAAAAAAADwPwMDAwMDDQIaAwAAAxIGGwVkZWx0YQULBAAAHAhsaWdodERpcgULBAAAHQVyYW5nZQMEAAAeCWludlJhbmdlNAMEAAAfDGFuZ2xlRmFsbE9mZgMEAAAgBWFuZ2xlAwQAAAUKBQkIIQRkaXN0AwQAAAkDHQ4CAhsFCwIbBQsDAAgiB2ZhbGxvZmYDBAAACQM1DgEGAwEDAAAAAAAA8D8DBgEGAQIhAwIhAwMCHgMDAwMACwYHAh0DAQMAAAAAAAAAAAMCBQIGBAIhAwkDFg4CBAYDCQMNDgECIQMDAh0DAwMBAwAAAAAAAAAAAwMDBoECIQMCIQMDAAAABoECIgMCIgMDBoECIgMGAgEDAAAAAAAA8D8DBAYAAiEDAQMAAAAAAADwPwMDAwMDCCMFdGhldGEDBAAACQMdDgIJAx8OAQIbBQsFCwcDAhwFCwULAwAIJAdlcHNpbG9uAwQAAAYDAh8DAiADAwAIJQxhbmdsZUZhbGxvZmYDBAAACQMXDgMGAgQGAwIjAwIgAwMDAiQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMDAA0JAygOAgIiAwIlAwUKAAADEwMmAWEFCwQAACcBYgULBAAAKAFjBQsEAAAFCwUDCCkCYWIFCwQAAAYDAicFCwImBQsFCwAIKgF0AwQAAAYCCQMdDgIGAwIoBQsCJgULBQsCKQULAwkDHQ4CAikFCwIpBQsDAwANBgACJgULBgECKgMCKQULBQsFCwAAAxQDKwFhBQsEAAAsAWIFCwQAAC0BYwULBAAABQsFAwguAmFiBQsEAAAGAwIsBQsCKwULBQsACC8BdAMEAAAGAgkDHQ4CBgMCLQULAisFCwULAi4FCwMJAx0OAgIuBQsCLgULAwMADQYAAisFCwYBCQM1DgECLwMDAi4FCwULBQsAAAEVAAAFEggwAlAwBQsEAAAGAwIKBQsGAQINAwIOBQsFCwULAAgxAlAxBQsEAAAGAAIKBQsGAQINAwIOBQsFCwULAAgyCXNwaGVyZVBvcwULBAAACQIUDgMCMAULAjEFCwIFBQsFCwAIMwVkZWx0YQULBAAABgMCMgULAgUFCwULAAYEAgEFCwkDHw4BAjMFCwULBQsINBNjbG9zZXN0UG9pbnREaWZmdXNlBQsEAAAGAwIyBQsGAQYBAgEFCwkDNQ4BBgIEBgMJAxsOAQIzBQsDAQPxaOOItfjkPgMDAwILAwMDBQsCCwMFCwULAAYEAjMFCwYDAjQFCwIFBQsFCwULBgQCAQULCQMfDgECMwULBQsFCwg1B2ZhbGxvZmYDBAAACQIRDgMCMwULAgsDAgwDAwAINgFSBQsEAAAGAwIQBQsGAQYBAQMAAAAAAAAAQAMJAx0OAgIQBQsCCQULAwMCCQULBQsFCwAINwpwb3NUb0xpZ2h0BQsEAAAGAwIKBQsCBQULBQsACDgHb25QbGFuZQULBAAABgACBQULBgECNgULCQMdDgICNwULAjYFCwMFCwULAAg5DXNwaGVyZVBvc1NwZWMFCwQAAAkCFA4DAjAFCwIxBQsCOAULBQsABgQCAgULCQMfDgEGAwI5BQsCBQULBQsFCwULCDoUY2xvc2VzdFBvaW50U3BlY3VsYXIFCwQAAAYDAjkFCwYBBgECAgULCQM1DgEGAwkDGw4BBgMCOQULAgUFCwULAwYCAQPxaOOItfjkPgMCCwMDAwMFCwILAwULBQsABgQCAgULCQMfDgEGAwI6BQsCBQULBQsFCwULBgQCAwULBgECNQMCBwULBQsFCwYEAgQDAggDAwA";
h3d_shader_pbr_PropsDefinition.SRC = "HXSLHmgzZC5zaGFkZXIucGJyLlByb3BzRGVmaW5pdGlvbhEBBmFsYmVkbwULBAAAAgVkZXB0aAMEAAADBm5vcm1hbAULBAAABAltZXRhbG5lc3MDBAAABQlyb3VnaG5lc3MDBAAABglvY2NsdXNpb24DBAAABwhlbWlzc2l2ZQMEAAAIB2N1c3RvbTEDBAAACQdjdXN0b20yAwQAAAoQcGJyU3BlY3VsYXJDb2xvcgULBAAACxN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAMBHZpZXcFCwQAAA0DTmRWAwQAAA4OY2FtZXJhUG9zaXRpb24FCwIAAA8KcGl4ZWxDb2xvcgUMBAAAEAZzaGFkb3cDBAAAERBfX2luaXRfX2ZyYWdtZW50DgYAAAECEQAABQMGBAIQAwEDAAAAAAAA8D8DAwYEAg8FDAkDKg4EAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMBQIGBAIMBQsJAx8OAQQGAwIOBQsCCwULBQsFCwULBQsGBAINAwkDFg4CCQMdDgICAwULAgwFCwMBAwAAAAAAAAAAAwMDAAA";
h3d_shader_pbr_Indirect.SRC = "HXSLF2gzZC5zaGFkZXIucGJyLkluZGlyZWN0LAEGYWxiZWRvBQsEAAACBWRlcHRoAwQAAAMGbm9ybWFsBQsEAAAECW1ldGFsbmVzcwMEAAAFCXJvdWdobmVzcwMEAAAGCW9jY2x1c2lvbgMEAAAHCGVtaXNzaXZlAwQAAAgHY3VzdG9tMQMEAAAJB2N1c3RvbTIDBAAAChBwYnJTcGVjdWxhckNvbG9yBQsEAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwEdmlldwULBAAADQNOZFYDBAAADg5jYW1lcmFQb3NpdGlvbgULAgAADwpwaXhlbENvbG9yBQwEAAAQBnNoYWRvdwMEAAARE2RyYXdJbmRpcmVjdERpZmZ1c2UCAgABAAAAAAASFGRyYXdJbmRpcmVjdFNwZWN1bGFyAgIAAQAAAAAAEwdzaG93U2t5AgIAAQAAAAAAFAhza3lDb2xvcgICAAEAAAAAABUGaXJyTHV0CgIAABYKaXJyRGlmZnVzZQwCAAAXC2lyclNwZWN1bGFyDAIAABgRaXJyU3BlY3VsYXJMZXZlbHMDAgAAGQhpcnJQb3dlcgMCAAAaC2lyclJvdGF0aW9uBQoCAAAbBnNreU1hcAwCAAAcCXNreUhkck1heAMCAAAdDGdhbW1hQ29ycmVjdAICAAEAAAAAAB4RY2FtZXJhSW52Vmlld1Byb2oHAgAAHw1za3lDb2xvclZhbHVlBQsCAAAgDWVtaXNzaXZlUG93ZXIDAgAAIQxjYWxjdWxhdGVkVVYFCgQAACIQX19pbml0X19mcmFnbWVudA4GAAAjF2dldEFuaXNvdHJvcGljUm91Z2huZXNzDgYAACQdc21pdGhHR1hDb3JyZWxhdGVkQW5pc290cm9waWMOBgAAJSBub3JtYWxEaXN0cmlidXRpb25HR1hBbmlzb3Ryb3BpYw4GAAAmFW5vcm1hbERpc3RyaWJ1dGlvbkdHWA4GAAAnEmdlb21ldHJ5U2NobGlja0dHWA4GAAAoDmZyZXNuZWxTY2hsaWNrDgYAACkMcm90YXRlTm9ybWFsDgYAACoOZ2V0RW52U3BlY3VsYXIOBgAAKw1nZXRFbnZEaWZmdXNlDgYAACwIZnJhZ21lbnQOBgAACwIiAAAFAwYEAhADAQMAAAAAAADwPwMDBgQCDwUMCQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwFAgYEAgwFCwkDHw4BBAYDAg4FCwILBQsFCwULBQsFCwYEAg0DCQMWDgIJAx0OAgIDBQsCDAULAwEDAAAAAAAAAAADAwMAAAMjAi0Jcm91Z2huZXNzAwQAAC4KYW5pc290cm9weQMEAAAFCgUDCC8CYXQDBAAACQMWDgIGAQItAwQGAAEDAAAAAAAA8D8DAi4DAwMDAQP8qfHSTWJQPwMDAAgwAmFiAwQAAAkDFg4CBgECLQMEBgMBAwAAAAAAAPA/AwIuAwMDAwED/Knx0k1iUD8DAwANCQMoDgICLwMCMAMFCgAAAyQIMQJhdAMEAAAyAmFiAwQAADMDVGRWAwQAADQDQmRWAwQAADUDVGRMAwQAADYDQmRMAwQAADcDTmRWAwQAADgDTmRMAwQAAAMFBAg5B2xhbWJkYVYDBAAABgECOAMJAxsOAQkDKQ4DBgECMQMCMwMDBgECMgMCNAMDAjcDBQsDAwAIOgdsYW1iZGFMAwQAAAYBAjcDCQMbDgEJAykOAwYBAjEDAjUDAwYBAjIDAjYDAwI4AwULAwMACDsBdgMEAAAGAgEDAAAAAAAA4D8DBAYAAjkDAjoDAwMDAA0JAzUOAQI7AwMAAAMlBzwCYXQDBAAAPQJhYgMEAAA+A05kSAMEAAA/A1RkSAMEAABAA0JkSAMEAABBCXJvdWdobmVzcwMEAABCCmFuaXNvdHJvcHkDBAAAAwUFCEMCYTIDBAAABgECPAMCPQMDAAhEAXYFCwQAAAkDKQ4DBgECPQMCPwMDBgECPAMCQAMDBgECQwMCPgMDBQsACEUCdjIDBAAACQMdDgICRAULAkQFCwMACEYCdzIDBAAABgICQwMCRQMDAA0GAQYBBgECQwMCRgMDAkYDAwQGAgEDAAAAAAAA8D8DAQMYLURU+yEJQAMDAwMAAAMmAkcDTmRIAwQAAEgJcm91Z2huZXNzAwQAAAMFBAhJBWFscGhhAwQAAAYBAkgDAkgDAwAISgZhbHBoYTIDBAAABgECSQMCSQMDAAhLBWRlbm9tAwQAAAYABgEGAQJHAwJHAwMEBgMCSgMBAwAAAAAAAPA/AwMDAwEDAAAAAAAA8D8DAwANBgICSgMEBgEGAQEDGC1EVPshCUADAksDAwJLAwMDAwAAAycDTANOZFYDBAAATQNOZEwDBAAATglyb3VnaG5lc3MDBAAAAwUECE8BawMEAAAEBgACTgMBAwAAAAAAAPA/AwMDAAaBAk8DAk8DAwaBAk8DAQMAAAAAAADAPwMDDQYBBgEEBgIBAwAAAAAAAPA/AwQGAAYBAkwDBAYDAQMAAAAAAADwPwMCTwMDAwMCTwMDAwMDBAYCAQMAAAAAAADwPwMEBgAGAQJNAwQGAwEDAAAAAAAA8D8DAk8DAwMDAk8DAwMDAwMBAwAAAAAAANA/AwMAAAMoAlADVmRIAwQAAFECRjAFCwQAAAULBQENBgACUQULBgEEBgMBAwAAAAAAAPA/AwJRBQsFCwULCQMLDgEGAQQGAwYBAQO5cCAkCzgWwAMCUAMDAQMC8bp+we4bQAMDAwJQAwMDBQsFCwAAAykBUgFuBQsEAAAFCwUBDQkDKQ4DBgMGAQoCUgULAAADCgIaBQoAAAMDBgEKAlIFCwQAAwoCGgUKBAADAwMGAAYBCgJSBQsAAAMKAhoFCgQAAwMGAQoCUgULBAADCgIaBQoAAAMDAwoCUgULCAADBQsAAAMqAlMGbm9ybWFsBQsEAABUCXJvdWdobmVzcwMEAAAFCwUBDQoJAyIOAwIXDAkCKQ4BAlMFCwULBgECVAMCGAMDBQySAAULAAADKwFVBm5vcm1hbAULBAAABQsFAQ0KCQMhDgICFgwJAikOAQJVBQsFCwUMkgAFCwAAASwAAAUCCFYFaXNTa3kCBAAABgoJAx0OAgIDBQsCAwULAwEDAAAAAAAAAAADAgALAlYCBQELAhMCBQMIVwVjb2xvcgULBAAAAAALAhQCBQIGBAJXBQsCHwULBQsLAh0CBoECVwULAlcFCwULAAAABQUIWAZub3JtYWwFCwQAAAkDHw4BBAYBCQMpDgIJAzsOAQIhBQoFCgEDAAAAAAAA8D8DBQsJAzQOAQIeBwgFCwULBQsABgQCVwULCgkDIQ4CAhsMCQIpDgECWAULBQsFDJIABQsFCwYEAlcFCwkDFQ4CAlcFCwIcAwULBQsLAh0CBoECVwULAlcFCwULAAAGgQJXBQsCGQMFCwAABoAKAg8FDJIABQsCVwULBQsADAAAAAUICFkHZGlmZnVzZQULBAAACQMpDgEBAwAAAAAAAAAAAwULAAhaCHNwZWN1bGFyBQsEAAAJAykOAQEDAAAAAAAAAAADBQsACFsCRjAFCwQAAAIKBQsACFwBRgULBAAABgACWwULBgEEBgMJAxYOAgkDKQ4BBgMBAwAAAAAAAPA/AwIFAwMFCwJbBQsFCwJbBQsFCwULCQMLDgEGAQQGAwYBAQO5cCAkCzgWwAMCDQMDAQMC8bp+we4bQAMDAwINAwMDBQsFCwALAhECBQEGBAJZBQsGAQkCKw4BAgMFCwULAgEFCwULBQsAAAALAhICBQQIXQpyZWZsZWN0VmVjBQsEAAAJAyAOAgcDAgwFCwULAgMFCwULAAheB2VudlNwZWMFCwQAAAkCKg4CAl0FCwIFAwULAAhfB2VudkJSREYFDAQAAAkDIQ4CAhUKCQMoDgICBQMCDQMFCgUMAAYEAloFCwYBAl4FCwQGAAYBAlwFCwoCXwUMAAADBQsKAl8FDAQAAwULBQsFCwULAAAACGAIaW5kaXJlY3QFCwQAAAYBBAYABgEGAQJZBQsEBgMBAwAAAAAAAPA/AwIEAwMDBQsEBgMBAwAAAAAAAPA/AwJcBQsFCwULBQsCWgULBQsFCwIZAwULAAaACgIPBQySAAULBgAGAQJgBQsCBgMFCwYBBgECAQULAgcDBQsCIAMFCwULBQsAAAA";
h3d_shader_pbr_Direct.SRC = "HXSLFWgzZC5zaGFkZXIucGJyLkRpcmVjdB4BBmFsYmVkbwULBAAAAgVkZXB0aAMEAAADBm5vcm1hbAULBAAABAltZXRhbG5lc3MDBAAABQlyb3VnaG5lc3MDBAAABglvY2NsdXNpb24DBAAABwhlbWlzc2l2ZQMEAAAIB2N1c3RvbTEDBAAACQdjdXN0b20yAwQAAAoQcGJyU3BlY3VsYXJDb2xvcgULBAAACxN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAMBHZpZXcFCwQAAA0DTmRWAwQAAA4OY2FtZXJhUG9zaXRpb24FCwIAAA8KcGl4ZWxDb2xvcgUMBAAAEAZzaGFkb3cDBAAAERFwYnJMaWdodERpcmVjdGlvbgULBAAAEhlwYnJTcGVjdWxhckxpZ2h0RGlyZWN0aW9uBQsEAAATDXBickxpZ2h0Q29sb3IFCwQAABQScGJyT2NjbHVzaW9uRmFjdG9yAwQAABUJZG9EaXNjYXJkAgIAAQAAAAAAFhBfX2luaXRfX2ZyYWdtZW50DgYAABcXZ2V0QW5pc290cm9waWNSb3VnaG5lc3MOBgAAGB1zbWl0aEdHWENvcnJlbGF0ZWRBbmlzb3Ryb3BpYw4GAAAZIG5vcm1hbERpc3RyaWJ1dGlvbkdHWEFuaXNvdHJvcGljDgYAABoVbm9ybWFsRGlzdHJpYnV0aW9uR0dYDgYAABsSZ2VvbWV0cnlTY2hsaWNrR0dYDgYAABwOZnJlc25lbFNjaGxpY2sOBgAAHRFfX2luaXRfX2ZyYWdtZW50Mg4GAAAeCGZyYWdtZW50DgYAAAkCFgAABQMGBAIQAwEDAAAAAAAA8D8DAwYEAg8FDAkDKg4EAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMBQIGBAIMBQsJAx8OAQQGAwIOBQsCCwULBQsFCwULBQsGBAINAwkDFg4CCQMdDgICAwULAgwFCwMBAwAAAAAAAAAAAwMDAAADFwIfCXJvdWdobmVzcwMEAAAgCmFuaXNvdHJvcHkDBAAABQoFAwghAmF0AwQAAAkDFg4CBgECHwMEBgABAwAAAAAAAPA/AwIgAwMDAwED/Knx0k1iUD8DAwAIIgJhYgMEAAAJAxYOAgYBAh8DBAYDAQMAAAAAAADwPwMCIAMDAwMBA/yp8dJNYlA/AwMADQkDKA4CAiEDAiIDBQoAAAMYCCMCYXQDBAAAJAJhYgMEAAAlA1RkVgMEAAAmA0JkVgMEAAAnA1RkTAMEAAAoA0JkTAMEAAApA05kVgMEAAAqA05kTAMEAAADBQQIKwdsYW1iZGFWAwQAAAYBAioDCQMbDgEJAykOAwYBAiMDAiUDAwYBAiQDAiYDAwIpAwULAwMACCwHbGFtYmRhTAMEAAAGAQIpAwkDGw4BCQMpDgMGAQIjAwInAwMGAQIkAwIoAwMCKgMFCwMDAAgtAXYDBAAABgIBAwAAAAAAAOA/AwQGAAIrAwIsAwMDAwANCQM1DgECLQMDAAADGQcuAmF0AwQAAC8CYWIDBAAAMANOZEgDBAAAMQNUZEgDBAAAMgNCZEgDBAAAMwlyb3VnaG5lc3MDBAAANAphbmlzb3Ryb3B5AwQAAAMFBQg1AmEyAwQAAAYBAi4DAi8DAwAINgF2BQsEAAAJAykOAwYBAi8DAjEDAwYBAi4DAjIDAwYBAjUDAjADAwULAAg3AnYyAwQAAAkDHQ4CAjYFCwI2BQsDAAg4AncyAwQAAAYCAjUDAjcDAwANBgEGAQYBAjUDAjgDAwI4AwMEBgIBAwAAAAAAAPA/AwEDGC1EVPshCUADAwMDAAADGgI5A05kSAMEAAA6CXJvdWdobmVzcwMEAAADBQQIOwVhbHBoYQMEAAAGAQI6AwI6AwMACDwGYWxwaGEyAwQAAAYBAjsDAjsDAwAIPQVkZW5vbQMEAAAGAAYBBgECOQMCOQMDBAYDAjwDAQMAAAAAAADwPwMDAwMBAwAAAAAAAPA/AwMADQYCAjwDBAYBBgEBAxgtRFT7IQlAAwI9AwMCPQMDAwMAAAMbAz4DTmRWAwQAAD8DTmRMAwQAAEAJcm91Z2huZXNzAwQAAAMFBAhBAWsDBAAABAYAAkADAQMAAAAAAADwPwMDAwAGgQJBAwJBAwMGgQJBAwEDAAAAAAAAwD8DAw0GAQYBBAYCAQMAAAAAAADwPwMEBgAGAQI+AwQGAwEDAAAAAAAA8D8DAkEDAwMDAkEDAwMDAwQGAgEDAAAAAAAA8D8DBAYABgECPwMEBgMBAwAAAAAAAPA/AwJBAwMDAwJBAwMDAwMDAQMAAAAAAADQPwMDAAADHAJCA1ZkSAMEAABDAkYwBQsEAAAFCwUBDQYAAkMFCwYBBAYDAQMAAAAAAADwPwMCQwULBQsFCwkDCw4BBgEEBgMGAQEDuXAgJAs4FsADAkIDAwEDAvG6fsHuG0ADAwMCQgMDAwULBQsAAAIdAAAFAQYEAhIFCwIRBQsFCwABHgAABQIIRANOZEwDBAAACQMWDgIJAx0OAgIDBQsCEQULAwEDAAAAAAAAAAADAwALBg4GBwkDHQ4CAhMFCwITBQsDAQMtQxzr4jYaPwMCBgcCRAMBAwAAAAAAAAAAAwICBQsIRQRoYWxmBQsEAAAJAx8OAQQGAAISBQsCDAULBQsFCwULAAhGA05kSAMEAAAJAxYOAgkDHQ4CAgMFCwJFBQsDAQMAAAAAAAAAAAMDAAhHA1ZkSAMEAAAJAxYOAgkDHQ4CAgwFCwJFBQsDAQMAAAAAAAAAAAMDAAhIAkYwBQsEAAACCgULAAhJB2RpZmZ1c2UFCwQAAAYCAgEFCwEDGC1EVPshCUADBQsACEoBRAMEAAAJAhoOAgJGAwIFAwMACEsBRgULBAAACQIcDgICRwMCSAULBQsACEwBRwMEAAAJAhsOAwINAwJEAwIFAwMACE0Ic3BlY3VsYXIFCwQAAAkDFg4CBAYBBgECSgMCSwULBQsCTAMFCwULAQMAAAAAAAAAAAMFCwAITgZkaXJlY3QFCwQAAAYBBgEEBgAGAQYBAkkFCwQGAwEDAAAAAAAA8D8DAgQDAwMFCwQGAwEDAAAAAAAA8D8DAksFCwULBQsFCwJNBQsFCwULAhMFCwULAkQDBQsABoAKAg8FDJIABQsGAQYBAk4FCwIQAwULCQMYDgMBAwAAAAAAAPA/AwIGAwIUAwMFCwULAAsCFQIMAAAAAAA";
h3d_shader_pbr_PerformanceViewer.SRC = "HXSLIGgzZC5zaGFkZXIucGJyLlBlcmZvcm1hbmNlVmlld2VyCgEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgZoZHJNYXAKAgAACwhncmFkaWVudAoCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQEGBAIIBQwJAyEOAgILCgkDKA4CCgkDNQ4BCQMhDgICCgoCCQUKBQwFDAAAAwEDAAAAAAAAAAADBQoFDAUMAA";
h3d_shader_pbr_PropsImport.SRC = "HXSLGmgzZC5zaGFkZXIucGJyLlByb3BzSW1wb3J0FgEJYWxiZWRvVGV4CgIAAAIJbm9ybWFsVGV4CgIAAAMGcGJyVGV4CgIAAAQIZGVwdGhUZXgKAgAABQhvdGhlclRleAoCAAAGCGlzU2NyZWVuAgIAAQAAAAAABxVjYW1lcmFJbnZlcnNlVmlld1Byb2oHAgAACA5vY2NsdXNpb25Qb3dlcgMCAAAJBmFsYmVkbwULBAAACgVkZXB0aAMEAAALBm5vcm1hbAULBAAADAltZXRhbG5lc3MDBAAADQlyb3VnaG5lc3MDBAAADglvY2NsdXNpb24DBAAADwhlbWlzc2l2ZQMEAAAQB2N1c3RvbTEDBAAAEQdjdXN0b20yAwQAABIMY2FsY3VsYXRlZFVWBQoEAAATE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAABQQcGJyU3BlY3VsYXJDb2xvcgULBAAAFQhzY3JlZW5VVgUKBAAAFghmcmFnbWVudA4GAAABARYAAAURCBcCdXYFCgQAAAsCBgICEgUKAhUFCgUKAAYEAgkFCwoJAyEOAgIBCgIXBQoFDJIABQsFCwaBAgkFCwIJBQsFCwYEAgsFCwoJAyEOAgICCgIXBQoFDJIABQsFCwgYA3BicgUMBAAACQMhDgICAwoCFwUKBQwABgQCDAMKAhgFDAAAAwMGBAINAwoCGAUMBAADAwYEAg4DCQMYDgMBAwAAAAAAAPA/AwoCGAUMCAADAggDAwMIGQVvdGhlcgUMBAAACQMhDgICBQoCFwUKBQwABgQCDwMKAhkFDAAAAwMGBAIQAwoCGQUMBAADAwYEAhEDCgIZBQwIAAMDBgQCCgMKCQMhDgICBAoCFwUKBQwAAAMDBgQCFAULCQMYDgMJAykOAQEDexSuR+F6pD8DBQsCCQULAgwDBQsFCwgaBHRlbXAFDAQAAAYBCQMqDgMJAzsOAQIXBQoFCgIKAwEDAAAAAAAA8D8DBQwCBwcFDAAIGwhvcmlnaW5XUwULBAAABgIKAhoFDJIABQsKAhoFDAwAAwULAAYEAhMFCwIbBQsFCwA";
h3d_shader_pbr_Slides.SRC = "HXSLFWgzZC5zaGFkZXIucGJyLlNsaWRlcxYBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoGYWxiZWRvBQsEAAALBWRlcHRoAwQAAAwGbm9ybWFsBQsEAAANCW1ldGFsbmVzcwMEAAAOCXJvdWdobmVzcwMEAAAPCW9jY2x1c2lvbgMEAAAQCGVtaXNzaXZlAwQAABEHY3VzdG9tMQMEAAASB2N1c3RvbTIDBAAAEwlzaGFkb3dNYXARAQIAABQNc2hhZG93TWFwQ3ViZQwCAAAVDHNoYWRvd0lzQ3ViZQICAAEAAAAAABYFc21vZGUBAgABAAAAAAAXCF9faW5pdF9fDgYAABgGdmVydGV4DgYAABkIZ2V0Q29sb3IOBgAAGghmcmFnbWVudA4GAAAEAhcAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAYAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAMZAhsBeAMEAAAcAXkDBAAABQsFAwgdBWNvbG9yBQsEAAAAAAsGCQIcAwEDAAAAAAAACEADAgUBCwYJAhsDAQMAAAAAAADwPwMCBgQCHQULCQMNDgECCgULBQsFCwsGCQIbAwEDAAAAAAAAAEADAgYEAh0FCwoJAzgOAQIMBQsFDJIABQsFCwsGCQIbAwEDAAAAAAAACEADAgYEAh0FCwoCDgMCAAULBQsGBAIdBQsKAg0DAgAFCwULAAAAAAUBCwYJAhsDAQMAAAAAAADwPwMCBgQCHQULCQMpDgMCEAMCEQMCEgMFCwULCwYJAhsDAQMAAAAAAAAAQAMCBgQCHQULCgILAwIABQsFCwsGCQIbAwEDAAAAAAAACEADAgYEAh0FCwoCDwMCAAULBQsFAggeAnV2BQoEAAAGAwkDKA4CAhsDAhwDBQoBAwAAAAAAAAhAAwUKAAsCFQIFBAgfA3BoaQMEAAAGAQYBBAYDAQMAAAAAAADwPwMKAh4FCgAAAwMDAQNvEoPAyiEJQAMDAQMAAAAAAAAAQAMDAAggBXRoZXRhAwQAAAYBBAYABwMKAh4FCgQAAwMBAwAAAAAAAOA/AwMDAQNvEoPAyiEJQAMDAAghA2RpcgULBAAACQMpDgMGAQkDAw4BAh8DAwkDAw4BAiADAwMGAQkDAg4BAh8DAwkDAw4BAiADAwMJAwIOAQIgAwMFCwAGBAIdBQsKCQMhDgICFAwCIQULBQwCAAULBQsABgQCHQULCgkDPw4CAhMRAQIeBQoDAgAFCwULAAAAAAAAAA0CHQULAAABGgAABQUIIgVjb2xvcgULBAAAAAAIIwF4AwQAAAYBCgIDBQoAAAMBAwAAAAAAABBAAwMACCQBeQMEAAAGAQoCAwUKBAADAQMAAAAAAAAQQAMDAAsGBQIWAQECAAAAAAECBgQCIgULCQIZDgICIwMCJAMFCwULBgQCIgULCQIZDgIGAAkDJg4BBhMEBgMCFgEBAgEAAAABAQEBAgQAAAABAQMKAgMFCgAAAwMGAAkDJg4BBgEJAyUOAQYCBAYDAhYBAQIBAAAAAQEBAQIEAAAAAQEBAQIDAAAAAQEDCgIDBQoEAAMDBQsFCwAGBAIIBQwJAyoOAgIiBQsBAwAAAAAAAPA/AwUMBQwA";
h3d_shader_pbr_ToneMapping.SRC = "HXSLGmgzZC5zaGFkZXIucGJyLlRvbmVNYXBwaW5nFAEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgpoZHJUZXh0dXJlCgIAAAsLZXhwb3N1cmVFeHADAgAADAZpc1NSQkcCAgABAAAAAAANBG1vZGUBAgABAAAAAAAOCGludkdhbW1hAwIAAA8BYQMCAAAQAWIDAgAAEQFjAwIAABIBZAMCAAATAWUDAgAAFAhoZHJDb2xvcgUMBAAAFQhfX2luaXRfXw4GAAAWBnZlcnRleA4GAAAXEF9faW5pdF9fZnJhZ21lbnQOBgAAGAhmcmFnbWVudA4GAAAEAhUAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAWAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAIXAAAFAQYEAhQFDAkDIQ4CAgoKAgkFCgUMBQwAARgAAAUFCBkFY29sb3IFDAQAAAIUBQwABoEKAhkFDJIABQsCCwMFCxMEAg0BAQMBAQIAAAAAAQUBBgQKAhkFDJIABQsJAzUOAQoCGQUMkgAFCwULBQsAAQECAQAAAAEFAQYECgIZBQySAAULBgIKAhkFDJIABQsEBgAKAhkFDJIABQsJAykOAQEDAAAAAAAA8D8DBQsFCwULBQsFCwABAQICAAAAAQUBBgQKAhkFDJIABQsJAzUOAQYCBAYBCgIZBQySAAULBAYABgECDwMKAhkFDJIABQsFCwIQAwULBQsFCwULBAYABgEKAhkFDJIABQsEBgAGAQIRAwoCGQUMkgAFCwULAhIDBQsFCwULAhMDBQsFCwULBQsFCwAAAAsHAgIMAgIGBAoCGQUMkgAFCwkDCA4CCgIZBQySAAULCQMpDgECDgMFCwULBQsAAAYEAggFDAIZBQwFDAA";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxbit_Convert.convFuns = new haxe_ds_StringMap();
hxbit_Macros.IGNORED_META = new haxe_ds_StringMap();
hxbit_Macros.VISIBILITY_VALUES = [];
hxbit_Macros.CUSTOM_GETTERS = [];
hxbit_Macros.NW_BUILD_STACK = [];
hxbit_Serializer.UID = 0;
hxbit_Serializer.SEQ = 0;
hxbit_Serializer.SEQ_BITS = 8;
hxbit_Serializer.SEQ_MASK = 16777215;
hxbit_Serializer.CLASSES = [];
hxbit_Serializer.EMPTY_MAP = new haxe_ds_StringMap();
hxbit_Serializer.ENUM_CLASSES = new haxe_ds_StringMap();
hxbit_Schema.__clid = hxbit_Serializer.registerClass(hxbit_Schema);
hxd_Precision.F32 = 0;
hxd_Precision.F16 = 1;
hxd_Precision.U8 = 2;
hxd_Precision.S8 = 3;
hxd_Precision.SIZES = [4,2,1,1];
hxd_InputFormat.DFloat = 1;
hxd_InputFormat.DVec2 = 2;
hxd_InputFormat.DVec3 = 3;
hxd_InputFormat.DVec4 = 4;
hxd_InputFormat.DBytes4 = 9;
hxd_BufferFormat._UID = 0;
hxd_BufferFormat.ALL_FORMATS = new haxe_ds_StringMap();
hxd_MultiFormat.UID = 0;
hxd_MultiFormat.CACHE = new haxe_ds_IntMap();
hxd_MultiFormat._UID = 0;
hxd_MultiFormat.MAX_FORMATS = 16;
hxd_Charset.ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
hxd_Charset.LATIN1 = "¡¢£¤¥¦§¨©ª«¬-®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿœæŒÆ€";
hxd_Charset.CYRILLIC = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя—";
hxd_Charset.POLISH = "ĄĆĘŁŃÓŚŹŻąćęłńóśźż";
hxd_Charset.TURKISH = "ÂÇĞIİÎÖŞÜÛâçğıİîöşüû";
hxd_Charset.JP_KANA = "　あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわゐゑをんがぎぐげござじずぜぞだぢづでどばびぶべぼぱぴぷぺぽゃゅょアイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヰヱヲンガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポヴャぇっッュョァィゥェォ・ー「」、。『』“”！：？％＆（）－０１２３４５６７８９";
hxd_Charset.UNICODE_SPECIALS = "�□";
hxd_Charset.DEFAULT_CHARS = hxd_Charset.ASCII + hxd_Charset.LATIN1;
hxd_Charset.complementChars = (function($this) {
	var $r;
	var str = "ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻。，";
	var _g = new haxe_ds_IntMap();
	{
		var _g1 = 0;
		var _g2 = str.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.h[HxOverrides.cca(str,i)] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxd_Key.BACKSPACE = 8;
hxd_Key.TAB = 9;
hxd_Key.ENTER = 13;
hxd_Key.SHIFT = 16;
hxd_Key.CTRL = 17;
hxd_Key.ALT = 18;
hxd_Key.ESCAPE = 27;
hxd_Key.SPACE = 32;
hxd_Key.PGUP = 33;
hxd_Key.PGDOWN = 34;
hxd_Key.END = 35;
hxd_Key.HOME = 36;
hxd_Key.LEFT = 37;
hxd_Key.UP = 38;
hxd_Key.RIGHT = 39;
hxd_Key.DOWN = 40;
hxd_Key.INSERT = 45;
hxd_Key.DELETE = 46;
hxd_Key.QWERTY_EQUALS = 187;
hxd_Key.QWERTY_MINUS = 189;
hxd_Key.QWERTY_TILDE = 192;
hxd_Key.QWERTY_BRACKET_LEFT = 219;
hxd_Key.QWERTY_BRACKET_RIGHT = 221;
hxd_Key.QWERTY_SEMICOLON = 186;
hxd_Key.QWERTY_QUOTE = 222;
hxd_Key.QWERTY_BACKSLASH = 220;
hxd_Key.QWERTY_COMMA = 188;
hxd_Key.QWERTY_PERIOD = 190;
hxd_Key.QWERTY_SLASH = 191;
hxd_Key.INTL_BACKSLASH = 226;
hxd_Key.LEFT_WINDOW_KEY = 91;
hxd_Key.RIGHT_WINDOW_KEY = 92;
hxd_Key.CONTEXT_MENU = 93;
hxd_Key.PAUSE_BREAK = 19;
hxd_Key.CAPS_LOCK = 20;
hxd_Key.NUM_LOCK = 144;
hxd_Key.SCROLL_LOCK = 145;
hxd_Key.NUMBER_0 = 48;
hxd_Key.NUMBER_1 = 49;
hxd_Key.NUMBER_2 = 50;
hxd_Key.NUMBER_3 = 51;
hxd_Key.NUMBER_4 = 52;
hxd_Key.NUMBER_5 = 53;
hxd_Key.NUMBER_6 = 54;
hxd_Key.NUMBER_7 = 55;
hxd_Key.NUMBER_8 = 56;
hxd_Key.NUMBER_9 = 57;
hxd_Key.NUMPAD_0 = 96;
hxd_Key.NUMPAD_1 = 97;
hxd_Key.NUMPAD_2 = 98;
hxd_Key.NUMPAD_3 = 99;
hxd_Key.NUMPAD_4 = 100;
hxd_Key.NUMPAD_5 = 101;
hxd_Key.NUMPAD_6 = 102;
hxd_Key.NUMPAD_7 = 103;
hxd_Key.NUMPAD_8 = 104;
hxd_Key.NUMPAD_9 = 105;
hxd_Key.A = 65;
hxd_Key.B = 66;
hxd_Key.C = 67;
hxd_Key.D = 68;
hxd_Key.E = 69;
hxd_Key.F = 70;
hxd_Key.G = 71;
hxd_Key.H = 72;
hxd_Key.I = 73;
hxd_Key.J = 74;
hxd_Key.K = 75;
hxd_Key.L = 76;
hxd_Key.M = 77;
hxd_Key.N = 78;
hxd_Key.O = 79;
hxd_Key.P = 80;
hxd_Key.Q = 81;
hxd_Key.R = 82;
hxd_Key.S = 83;
hxd_Key.T = 84;
hxd_Key.U = 85;
hxd_Key.V = 86;
hxd_Key.W = 87;
hxd_Key.X = 88;
hxd_Key.Y = 89;
hxd_Key.Z = 90;
hxd_Key.F1 = 112;
hxd_Key.F2 = 113;
hxd_Key.F3 = 114;
hxd_Key.F4 = 115;
hxd_Key.F5 = 116;
hxd_Key.F6 = 117;
hxd_Key.F7 = 118;
hxd_Key.F8 = 119;
hxd_Key.F9 = 120;
hxd_Key.F10 = 121;
hxd_Key.F11 = 122;
hxd_Key.F12 = 123;
hxd_Key.F13 = 124;
hxd_Key.F14 = 125;
hxd_Key.F15 = 126;
hxd_Key.F16 = 127;
hxd_Key.F17 = 128;
hxd_Key.F18 = 129;
hxd_Key.F19 = 130;
hxd_Key.F20 = 131;
hxd_Key.F21 = 132;
hxd_Key.F22 = 133;
hxd_Key.F23 = 134;
hxd_Key.F24 = 135;
hxd_Key.NUMPAD_MULT = 106;
hxd_Key.NUMPAD_ADD = 107;
hxd_Key.NUMPAD_ENTER = 108;
hxd_Key.NUMPAD_SUB = 109;
hxd_Key.NUMPAD_DOT = 110;
hxd_Key.NUMPAD_DIV = 111;
hxd_Key.MOUSE_LEFT = 0;
hxd_Key.MOUSE_RIGHT = 1;
hxd_Key.MOUSE_MIDDLE = 2;
hxd_Key.MOUSE_BACK = 3;
hxd_Key.MOUSE_FORWARD = 4;
hxd_Key.MOUSE_WHEEL_UP = 5;
hxd_Key.MOUSE_WHEEL_DOWN = 6;
hxd_Key.LOC_LEFT = 256;
hxd_Key.LOC_RIGHT = 512;
hxd_Key.LSHIFT = 272;
hxd_Key.RSHIFT = 528;
hxd_Key.LCTRL = 273;
hxd_Key.RCTRL = 529;
hxd_Key.LALT = 274;
hxd_Key.RALT = 530;
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Math.PI = 3.14159265358979323;
hxd_Math.EPSILON = 1e-10;
hxd_Math.EPSILON2 = 1e-20;
hxd_Pad.CONFIG_JS_STD = { A : 0, B : 1, X : 2, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 12, dpadDown : 13, dpadLeft : 14, dpadRight : 15, analogX : 17, analogY : 18, ranalogX : 19, ranalogY : 20, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.CONFIG_JS_DS4 = { A : 0, B : 1, X : 2, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 12, dpadDown : 13, dpadLeft : 14, dpadRight : 15, analogX : 18, analogY : 19, ranalogX : 20, ranalogY : 21, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.CONFIG_JS_DS4_FF = { A : 1, B : 2, X : 0, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 9000, dpadDown : 9000, dpadLeft : 9000, dpadRight : 9000, analogX : 18, analogY : 19, ranalogX : 20, ranalogY : 23, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.DEFAULT_CONFIG = hxd_Pad.CONFIG_JS_STD;
hxd_Pad.initDone = false;
hxd_Pad.pads = new haxe_ds_IntMap();
hxd_Channel.R = 0;
hxd_Channel.G = 1;
hxd_Channel.B = 2;
hxd_Channel.A = 3;
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.smoothFactor = 0.95;
hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
hxd_Timer.elapsedTime = 0.;
hxd_Timer.frameCount = 0;
hxd_Timer.dt = 1 / hxd_Timer.wantedFPS;
hxd_Timer.currentDT = 1 / hxd_Timer.wantedFPS;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_System.fpsLimit = -1;
hxd_clipper__$Clipper_ClipperBase.HORIZONTAL = -9007199254740992.;
hxd_clipper__$Clipper_ClipperBase.TOLERANCE = 1E-20;
hxd_clipper__$Clipper_ClipperBase.SKIP = -2;
hxd_clipper__$Clipper_ClipperBase.UNASSIGNED = -1;
hxd_fmt_hmd_Position.QTMP = new h3d_Quat();
hxd_fmt_hmd_Data.CURRENT_VERSION = 3;
hxd_fmt_hmd_Reader.BLEND = h2d_BlendMode.__empty_constructs__.slice();
hxd_fmt_hmd_Reader.CULLING = h3d_mat_Face.__empty_constructs__.slice();
hxd_impl_BufferFlags.Dynamic = 0;
hxd_impl_BufferFlags.Static = 1;
hxd_impl_BufferFlags.UniformDynamic = 2;
hxd_poly2tri_Point.C_ID = 0;
hxd_res_Resource.LIVE_UPDATE = true;
hxd_res_ImageFormat.Jpg = 0;
hxd_res_ImageFormat.Png = 1;
hxd_res_ImageFormat.Gif = 2;
hxd_res_ImageFormat.Tga = 3;
hxd_res_ImageFormat.Dds = 4;
hxd_res_ImageFormat.Raw = 5;
hxd_res_ImageFormat.Hdr = 6;
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.MIPMAP_MAX_SIZE = 0;
hxd_res_Image.ENABLE_AUTO_WATCH = true;
hxd_res_Image.BLACK_1x1 = hxd_Pixels.alloc(1,1,hxd_PixelFormat.RGBA);
hxd_res_Image.LOG_TEXTURE_LOAD = false;
hxd_res_NanoJpeg.BLOCKSIZE = 64;
hxd_res_NanoJpeg.W1 = 2841;
hxd_res_NanoJpeg.W2 = 2676;
hxd_res_NanoJpeg.W3 = 2408;
hxd_res_NanoJpeg.W5 = 1609;
hxd_res_NanoJpeg.W6 = 1108;
hxd_res_NanoJpeg.W7 = 565;
hxd_res_NanoJpeg.CF4A = -9;
hxd_res_NanoJpeg.CF4B = 111;
hxd_res_NanoJpeg.CF4C = 29;
hxd_res_NanoJpeg.CF4D = -3;
hxd_res_NanoJpeg.CF3A = 28;
hxd_res_NanoJpeg.CF3B = 109;
hxd_res_NanoJpeg.CF3C = -9;
hxd_res_NanoJpeg.CF3X = 104;
hxd_res_NanoJpeg.CF3Y = 27;
hxd_res_NanoJpeg.CF3Z = -3;
hxd_res_NanoJpeg.CF2A = 139;
hxd_res_NanoJpeg.CF2B = -11;
hxd_res_Sound.ENABLE_AUTO_WATCH = true;
hxd_snd_Channel.ID = 0;
hxd_snd_Source.ID = 0;
hxd_snd_Manager.STREAM_DURATION = 5.;
hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT = 44100;
hxd_snd_Manager.BUFFER_QUEUE_LENGTH = 2;
hxd_snd_Manager.MAX_SOURCES = 16;
hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE = 256;
hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD = 1e-5;
hxd_snd_Manager.BUFFER_STREAM_SPLIT = 16;
hxd_snd_webaudio_BufferPlayback.FADE_SAMPLES = 10;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__.slice();
hxsl_Tools.MAX_CHANNELS_BITS = 3;
hxsl_BatchShader.SRC = "HXSLEGh4c2wuQmF0Y2hTaGFkZXIDAQ9CYXRjaF9IYXNPZmZzZXQCAgABAAAAAAACC0JhdGNoX0NvdW50AQIAAQAAAAEAAwxCYXRjaF9CdWZmZXIQBQwCAgAAAA";
hxsl_GlslOut.KWD_LIST = ["input","output","discard","sample","dvec2","dvec3","dvec4","hvec2","hvec3","hvec4","fvec2","fvec3","fvec4","int","float","bool","long","short","double","half","fixed","unsigned","superp","lowp","mediump","highp","precision","invariant","discard","struct","asm","union","template","this","packed","goto","sizeof","namespace","noline","volatile","external","flat","input","output","out","attribute","const","uniform","varying","inout","void"];
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = hxsl_GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			_g.h[k] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var gl = [];
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			gl[g._hx_index] = n;
		}
	}
	gl[hxsl_TGlobal.ToInt._hx_index] = "int";
	gl[hxsl_TGlobal.ToFloat._hx_index] = "float";
	gl[hxsl_TGlobal.ToBool._hx_index] = "bool";
	gl[hxsl_TGlobal.LReflect._hx_index] = "reflect";
	gl[hxsl_TGlobal.Mat3x4._hx_index] = "_mat3x4";
	gl[hxsl_TGlobal.VertexID._hx_index] = "gl_VertexID";
	gl[hxsl_TGlobal.InstanceID._hx_index] = "gl_InstanceID";
	gl[hxsl_TGlobal.IVec2._hx_index] = "ivec2";
	gl[hxsl_TGlobal.IVec3._hx_index] = "ivec3";
	gl[hxsl_TGlobal.IVec4._hx_index] = "ivec4";
	gl[hxsl_TGlobal.BVec2._hx_index] = "bvec2";
	gl[hxsl_TGlobal.BVec3._hx_index] = "bvec3";
	gl[hxsl_TGlobal.BVec4._hx_index] = "bvec4";
	gl[hxsl_TGlobal.FragCoord._hx_index] = "gl_FragCoord";
	gl[hxsl_TGlobal.FrontFacing._hx_index] = "gl_FrontFacing";
	gl[hxsl_TGlobal.FrontFacing._hx_index] = "gl_FrontFacing";
	gl[hxsl_TGlobal.FloatBitsToUint._hx_index] = "_floatBitsToUint";
	gl[hxsl_TGlobal.UintBitsToFloat._hx_index] = "_uintBitsToFloat";
	{
		var _g = 0;
		while(_g < gl.length) {
			var g = gl[_g];
			++_g;
			hxsl_GlslOut.KWDS.h[g] = true;
		}
	}
	$r = gl;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
hxsl_Serializer.TVECS = new haxe_ds_IntMap();
hxsl_Serializer.BOPS = (function($this) {
	var $r;
	var ops = haxe_macro_Binop.__empty_constructs__.slice();
	ops.splice(haxe_macro_Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl_Serializer.UNOPS = haxe_macro_Unop.__empty_constructs__.slice();
hxsl_Serializer.TGLOBALS = hxsl_TGlobal.__empty_constructs__.slice();
hxsl_Serializer.TSWIZ = new haxe_ds_IntMap();
hxsl_Serializer.REGS = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Serializer.VKINDS = hxsl_VarKind.__empty_constructs__.slice();
hxsl_Serializer.PRECS = hxsl_Prec.__empty_constructs__.slice();
hxsl_Serializer.FKIND = hxsl_FunctionKind.__empty_constructs__.slice();
hxsl_Serializer.SIGN = 9139229;
hxsl_ShaderList.MAX_LIST_SIZE = 0;
hxsl_ShaderList.ALLOW_DUPLICATES = true;
hxsl_ShaderInstance.UID = 0;
hxsl_SharedShader.UNROLL_LOOPS = false;
integration_Secret.NEWGROUNDS_APP_ID = "57141:CYpTMVTB";
integration_Secret.NEWGROUNDS_ENCRYPTION_KEY = "+T/S1NanleX3f9OYdThQ3g==";
io_newgrounds_NGLite.onCoreReady = new io_newgrounds_utils_Dispatcher();
io_newgrounds_NG.onCoreReady = new io_newgrounds_utils_Dispatcher();
io_newgrounds_NG.urlParser = new EReg("^(?:http[s]?://)?([^:/\\s]+)(:[0-9]+)?((?:/\\w+)*/)([\\w\\-\\.]+[^#?\\s]+)([^#\\s]*)?(#[\\w\\-]+)?$","i");
io_newgrounds_components_CloudSaveComponent.allowNull = { };
io_newgrounds_crypto__$Aes_CBC.SBOX = [99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22].slice(0);
io_newgrounds_crypto__$Aes_CBC.RSBOX = [82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125].slice(0);
io_newgrounds_crypto__$Aes_CBC.POWER3 = [1,3,5,15,17,51,85,255,26,46,114,150,161,248,19,53,95,225,56,72,216,115,149,164,247,2,6,10,30,34,102,170,229,52,92,228,55,89,235,38,106,190,217,112,144,171,230,49,83,245,4,12,20,60,68,204,79,209,104,184,211,110,178,205,76,212,103,169,224,59,77,215,98,166,241,8,24,40,120,136,131,158,185,208,107,189,220,127,129,152,179,206,73,219,118,154,181,196,87,249,16,48,80,240,11,29,39,105,187,214,97,163,254,25,43,125,135,146,173,236,47,113,147,174,233,32,96,160,251,22,58,78,210,109,183,194,93,231,50,86,250,21,63,65,195,94,226,61,71,201,64,192,91,237,44,116,156,191,218,117,159,186,213,100,172,239,42,126,130,157,188,223,122,142,137,128,155,182,193,88,232,35,101,175,234,37,111,177,200,67,197,84,252,31,33,99,165,244,7,9,27,45,119,153,176,203,70,202,69,207,74,222,121,139,134,145,168,227,62,66,198,81,243,14,18,54,90,238,41,123,141,140,143,138,133,148,167,242,13,23,57,75,221,124,132,151,162,253,28,36,108,180,199,82,246].slice(0);
io_newgrounds_crypto__$Aes_CBC.LOG3 = [0,0,25,1,50,2,26,198,75,199,27,104,51,238,223,3,100,4,224,14,52,141,129,239,76,113,8,200,248,105,28,193,125,194,29,181,249,185,39,106,77,228,166,114,154,201,9,120,101,47,138,5,33,15,225,36,18,240,130,69,53,147,218,142,150,143,219,189,54,208,206,148,19,92,210,241,64,70,131,56,102,221,253,48,191,6,139,98,179,37,226,152,34,136,145,16,126,110,72,195,163,182,30,66,58,107,40,84,250,133,61,186,43,121,10,21,155,159,94,202,78,212,172,229,243,115,167,87,175,88,168,80,244,234,214,116,79,174,233,213,231,230,173,232,44,215,117,122,235,22,11,245,89,203,95,176,156,169,81,160,127,12,246,111,23,196,73,236,216,67,31,45,164,118,123,183,204,187,62,90,251,96,177,134,59,82,161,108,170,85,41,157,151,178,135,144,97,190,220,252,188,149,207,205,55,63,91,209,83,57,132,60,65,162,109,71,20,42,158,93,86,242,211,171,68,17,146,217,35,32,46,137,180,124,184,38,119,153,227,165,103,74,237,222,197,49,254,24,13,99,140,128,192,247,112,7].slice(0);
io_newgrounds_crypto__$Aes_CBC.RCON = [141,1,2,4,8,16,32,64,128,27,54].slice(0);
io_newgrounds_crypto__$Aes_CBC.BLOCK_SIZE = 16;
io_newgrounds_crypto__$Aes_CBC.NB = 4;
io_newgrounds_crypto__$Aes_Block.NB = 4;
io_newgrounds_crypto__$Aes_Block.BLOCK_SIZE = 16;
io_newgrounds_crypto_Cipher.NONE = "none";
io_newgrounds_crypto_Cipher.AES_128 = "aes128";
io_newgrounds_crypto_Cipher.RC4 = "rc4";
io_newgrounds_crypto_EncodingFormat.BASE_64 = "base64";
io_newgrounds_crypto_EncodingFormat.HEX = "hex";
io_newgrounds_objects_Medal.EASY = 1;
io_newgrounds_objects_Medal.MODERATE = 2;
io_newgrounds_objects_Medal.CHALLENGING = 3;
io_newgrounds_objects_Medal.DIFFICULT = 4;
io_newgrounds_objects_Medal.BRUTAL = 5;
io_newgrounds_utils_AsyncNGCall.PATH = "https://newgrounds.io/gateway_v3.php";
save_GameData.SAVE_COOLDOWN = 1.;
save_GameData.__clid = hxbit_Serializer.registerClass(save_GameData);
save_SaveHeader.__clid = hxbit_Serializer.registerClass(save_SaveHeader);
save_GameSaveData.__clid = hxbit_Serializer.registerClass(save_GameSaveData);
ui_FPSCounter.AVERAGE_COUNT = 30;
ui_Mute.STAY_TIME = .5;
ui_Mute.FADE_TIME = .4;
ui_Mute.musicEnabled = true;
ui_Mute.soundEnabled = true;
{
	Main.main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=boxedBoxes.js.map